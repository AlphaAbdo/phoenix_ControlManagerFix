{"version":3,"file":"675.61266cedcc3fe268.js","mappings":"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","names":["TGraphPolargramPainter","ObjectPainter","constructor","dom","polargram","super","this","$polargram","zoom_rmin","zoom_rmax","translate","angle","radius","keep_float","rx","r","ry","szx","szy","grx","Math","cos","gry","sin","round","format","toString","ndig","toExponential","toFixed","axisAsText","axis","value","PI","getFrameRect","pp","getPadPainter","pad","getRootPad","w","getPadWidth","h","getPadHeight","rect","max","fLeftMargin","fRightMargin","fBottomMargin","fTopMargin","width","height","x","y","hint_delta_x","hint_delta_y","transform","makeTranslate","mouseEvent","kind","evnt","interactive","getLayerSvg","select","empty","pnt","pos","d3_pointer","node","touch","processFrameTooltipEvent","mouseWheel","stopPropagation","preventDefault","polar","getObject","delta","wheelDelta","deltaY","detail","rmin","scale_rmin","rmax","scale_rmax","fRwrmin","fRwrmax","redrawPad","redraw","_this","_asyncToGenerator","isMainPainter","createG","draw_g","scaleLinear","domain","range","fAxisAngle","ticks","fontsize","fPolarTextSize","nminor","floor","fNdivRad","nmajor","fNdivPol","createAttLine","attr","gridatt","color","fLineColor","style","std","abs","log10","length","lbls","indx","lbl","indexOf","push","exclude_last","startTextDrawingAsync","fRadialLabelFont","fRadialTextSize","then","n","append","call","lineatt","func","drawText","align","text","getColor","fRadialLabelColor","latex","dr","nn","gridr","finishTextDrawing","fPolarLabelFont","aligns","aindx","fPolarLabelColor","isBatchMode","TooltipHandler","assign","layer","classed","on","d3_select","parentNode","settings","Zooming","ZoomWheel","draw","main","getElementMainPainter","Error","painter","ensureTCanvas","setAsMainPainter","TGraphPolarPainter","drawGraphPolar","decodeOptions","opt","d","DrawOptions","options","Object","mark","check","err","fill","line","curve","storeDrawOpt","graph","getMainPainter","createAttMarker","createAttFill","mpath","epath","bins","fNpoints","fY","pos1","fX","fEY","pos2","fEX","markeratt","create","lpath","buildSvgCurve","fillatt","createPolargram","gr","min","extractTooltip","best_dist2","bestindx","bestpos","dist2","match_distance","used","getFullSize","sqrt","res","name","fName","title","fTitle","color1","exact","lines","getObjectHint","binindx","menu_dist","showTooltip","hint","ttcircle","selectChild","changed","property","remove","processTooltipEvent","disabled","console","error","pr","Promise","resolve","fPolargram","addToPadPrimitives"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/draw/TGraphPolarPainter.mjs"],"sourcesContent":["import { settings, create } from '../core.mjs';\nimport { scaleLinear, select as d3_select, pointer as d3_pointer } from '../d3.mjs';\nimport { DrawOptions, buildSvgCurve, makeTranslate } from '../base/BasePainter.mjs';\nimport { ObjectPainter, getElementMainPainter } from '../base/ObjectPainter.mjs';\nimport { ensureTCanvas } from '../gpad/TCanvasPainter.mjs';\nimport { TooltipHandler } from '../gpad/TFramePainter.mjs';\n\n\n/**\n * @summary Painter for TGraphPolargram objects.\n *\n * @private */\n\nclass TGraphPolargramPainter extends ObjectPainter {\n\n   /** @summary Create painter\n     * @param {object|string} dom - DOM element for drawing or element id\n     * @param {object} polargram - object to draw */\n   constructor(dom, polargram) {\n      super(dom, polargram);\n      this.$polargram = true; // indicate that this is polargram\n      this.zoom_rmin = this.zoom_rmax = 0;\n   }\n\n   /** @summary Translate coordinates */\n   translate(angle, radius, keep_float) {\n      let rx = this.r(radius),\n          ry = rx/this.szx*this.szy,\n          grx = rx * Math.cos(-angle - this.angle),\n          gry = ry * Math.sin(-angle - this.angle);\n\n      if (!keep_float) {\n         grx = Math.round(grx);\n         gry = Math.round(gry);\n         rx = Math.round(rx);\n         ry = Math.round(ry);\n      }\n      return { grx, gry, rx, ry };\n   }\n\n   /** @summary format label for radius ticks */\n   format(radius) {\n      if (radius === Math.round(radius)) return radius.toString();\n      if (this.ndig > 10) return radius.toExponential(4);\n\n      return radius.toFixed((this.ndig > 0) ? this.ndig : 0);\n   }\n\n   /** @summary Convert axis values to text */\n   axisAsText(axis, value) {\n      if (axis === 'r') {\n         if (value === Math.round(value)) return value.toString();\n         if (this.ndig>10) return value.toExponential(4);\n         return value.toFixed(this.ndig+2);\n      }\n\n      value *= 180/Math.PI;\n      return (value === Math.round(value)) ? value.toString() : value.toFixed(1);\n   }\n\n   /** @summary Returns coordinate of frame - without using frame itself */\n   getFrameRect() {\n      const pp = this.getPadPainter(),\n            pad = pp.getRootPad(true),\n            w = pp.getPadWidth(),\n            h = pp.getPadHeight(),\n            rect = {};\n\n      if (pad) {\n         rect.szx = Math.round(Math.max(0.1, 0.5 - Math.max(pad.fLeftMargin, pad.fRightMargin))*w);\n         rect.szy = Math.round(Math.max(0.1, 0.5 - Math.max(pad.fBottomMargin, pad.fTopMargin))*h);\n      } else {\n         rect.szx = Math.round(0.5*w);\n         rect.szy = Math.round(0.5*h);\n      }\n\n      rect.width = 2*rect.szx;\n      rect.height = 2*rect.szy;\n      rect.x = Math.round(w/2 - rect.szx);\n      rect.y = Math.round(h/2 - rect.szy);\n\n      rect.hint_delta_x = rect.szx;\n      rect.hint_delta_y = rect.szy;\n\n      rect.transform = makeTranslate(rect.x, rect.y) || '';\n\n      return rect;\n   }\n\n   /** @summary Process mouse event */\n   mouseEvent(kind, evnt) {\n      const layer = this.getLayerSvg('primitives_layer'),\n            interactive = layer.select('.interactive_ellipse');\n      if (interactive.empty()) return;\n\n      let pnt = null;\n\n      if (kind !== 'leave') {\n         const pos = d3_pointer(evnt, interactive.node());\n         pnt = { x: pos[0], y: pos[1], touch: false };\n      }\n\n      this.processFrameTooltipEvent(pnt);\n   }\n\n   /** @summary Process mouse wheel event */\n   mouseWheel(evnt) {\n      evnt.stopPropagation();\n      evnt.preventDefault();\n\n      this.processFrameTooltipEvent(null); // remove all tooltips\n\n      const polar = this.getObject();\n      if (!polar) return;\n\n      let delta = evnt.wheelDelta ? -evnt.wheelDelta : (evnt.deltaY || evnt.detail);\n      if (!delta) return;\n\n      delta = (delta < 0) ? -0.2 : 0.2;\n\n      let rmin = this.scale_rmin, rmax = this.scale_rmax;\n      const range = rmax - rmin;\n\n      // rmin -= delta*range;\n      rmax += delta*range;\n\n      if ((rmin<polar.fRwrmin) || (rmax>polar.fRwrmax)) rmin = rmax = 0;\n\n      if ((this.zoom_rmin !== rmin) || (this.zoom_rmax !== rmax)) {\n         this.zoom_rmin = rmin;\n         this.zoom_rmax = rmax;\n         this.redrawPad();\n      }\n   }\n\n   /** @summary Redraw polargram */\n   async redraw() {\n      if (!this.isMainPainter())\n         return;\n\n      const polar = this.getObject(),\n            rect = this.getPadPainter().getFrameRect();\n\n      this.createG();\n\n      makeTranslate(this.draw_g, Math.round(rect.x + rect.width/2), Math.round(rect.y + rect.height/2));\n      this.szx = rect.szx;\n      this.szy = rect.szy;\n\n      this.scale_rmin = polar.fRwrmin;\n      this.scale_rmax = polar.fRwrmax;\n      if (this.zoom_rmin !== this.zoom_rmax) {\n         this.scale_rmin = this.zoom_rmin;\n         this.scale_rmax = this.zoom_rmax;\n      }\n\n      this.r = scaleLinear().domain([this.scale_rmin, this.scale_rmax]).range([0, this.szx]);\n      this.angle = polar.fAxisAngle || 0;\n\n      const ticks = this.r.ticks(5),\n            fontsize = Math.round(polar.fPolarTextSize * this.szy * 2);\n      let nminor = Math.floor((polar.fNdivRad % 10000) / 100),\n          nmajor = polar.fNdivPol % 100;\n      if (nmajor !== 3)\n         nmajor = 8;\n\n      this.createAttLine({ attr: polar });\n      if (!this.gridatt) this.gridatt = this.createAttLine({ color: polar.fLineColor, style: 2, width: 1, std: false });\n\n      const range = Math.abs(polar.fRwrmax - polar.fRwrmin);\n      this.ndig = (range <= 0) ? -3 : Math.round(Math.log10(ticks.length / range));\n\n      // verify that all radius labels are unique\n      let lbls = [], indx = 0;\n      while (indx<ticks.length) {\n         const lbl = this.format(ticks[indx]);\n         if (lbls.indexOf(lbl) >= 0) {\n            if (++this.ndig>10) break;\n            lbls = []; indx = 0; continue;\n          }\n         lbls.push(lbl);\n         indx++;\n      }\n\n      let exclude_last = false;\n\n      if ((ticks[ticks.length-1] < polar.fRwrmax) && (this.zoom_rmin === this.zoom_rmax)) {\n         ticks.push(polar.fRwrmax);\n         exclude_last = true;\n      }\n\n      return this.startTextDrawingAsync(polar.fRadialLabelFont, Math.round(polar.fRadialTextSize * this.szy * 2)).then(() => {\n         for (let n = 0; n < ticks.length; ++n) {\n            let rx = this.r(ticks[n]), ry = rx/this.szx*this.szy;\n            this.draw_g.append('ellipse')\n               .attr('cx', 0)\n               .attr('cy', 0)\n               .attr('rx', Math.round(rx))\n               .attr('ry', Math.round(ry))\n               .style('fill', 'none')\n               .call(this.lineatt.func);\n\n            if ((n < ticks.length-1) || !exclude_last) {\n               this.drawText({ align: 23, x: Math.round(rx), y: Math.round(polar.fRadialTextSize * this.szy * 0.5),\n                              text: this.format(ticks[n]), color: this.getColor(polar.fRadialLabelColor), latex: 0 });\n            }\n\n            if ((nminor>1) && ((n < ticks.length-1) || !exclude_last)) {\n               const dr = (ticks[1] - ticks[0]) / nminor;\n               for (let nn = 1; nn < nminor; ++nn) {\n                  const gridr = ticks[n] + dr*nn;\n                  if (gridr > this.scale_rmax) break;\n                  rx = this.r(gridr); ry = rx/this.szx*this.szy;\n                  this.draw_g.append('ellipse')\n                     .attr('cx', 0)\n                     .attr('cy', 0)\n                     .attr('rx', Math.round(rx))\n                     .attr('ry', Math.round(ry))\n                     .style('fill', 'none')\n                     .call(this.gridatt.func);\n               }\n            }\n         }\n\n\n         return this.finishTextDrawing();\n      }).then(() => {\n         return this.startTextDrawingAsync(polar.fPolarLabelFont, fontsize);\n      }).then(() => {\n         lbls = (nmajor === 8) ? ['0', '#frac{#pi}{4}', '#frac{#pi}{2}', '#frac{3#pi}{4}', '#pi', '#frac{5#pi}{4}', '#frac{3#pi}{2}', '#frac{7#pi}{4}'] : ['0', '#frac{2#pi}{3}', '#frac{4#pi}{3}'];\n         const aligns = [12, 11, 21, 31, 32, 33, 23, 13];\n\n         for (let n = 0; n < nmajor; ++n) {\n            const angle = -n*2*Math.PI/nmajor - this.angle;\n            this.draw_g.append('svg:path')\n                .attr('d', `M0,0L${Math.round(this.szx*Math.cos(angle))},${Math.round(this.szy*Math.sin(angle))}`)\n                .call(this.lineatt.func);\n\n            const aindx = Math.round(16 -angle/Math.PI*4) % 8; // index in align table, here absolute angle is important\n\n            this.drawText({ align: aligns[aindx],\n                            x: Math.round((this.szx+fontsize)*Math.cos(angle)),\n                            y: Math.round((this.szy + fontsize/this.szx*this.szy)*(Math.sin(angle))),\n                            text: lbls[n],\n                            color: this.getColor(polar.fPolarLabelColor), latex: 1 });\n         }\n\n         return this.finishTextDrawing();\n      }).then(() => {\n         nminor = Math.floor((polar.fNdivPol % 10000) / 100);\n\n         if (nminor > 1) {\n            for (let n = 0; n < nmajor*nminor; ++n) {\n               if (n % nminor === 0) continue;\n               const angle = -n*2*Math.PI/nmajor/nminor - this.angle;\n               this.draw_g.append('svg:path')\n                   .attr('d', `M0,0L${Math.round(this.szx*Math.cos(angle))},${Math.round(this.szy*Math.sin(angle))}`)\n                   .call(this.gridatt.func);\n            }\n         }\n\n         if (this.isBatchMode()) return;\n\n         TooltipHandler.assign(this);\n\n         const layer = this.getLayerSvg('primitives_layer');\n         let interactive = layer.select('.interactive_ellipse');\n\n         if (interactive.empty()) {\n            interactive = layer.append('g')\n                               .classed('most_upper_primitives', true)\n                               .append('ellipse')\n                               .classed('interactive_ellipse', true)\n                               .attr('cx', 0)\n                               .attr('cy', 0)\n                               .style('fill', 'none')\n                               .style('pointer-events', 'visibleFill')\n                               .on('mouseenter', evnt => this.mouseEvent('enter', evnt))\n                               .on('mousemove', evnt => this.mouseEvent('move', evnt))\n                               .on('mouseleave', evnt => this.mouseEvent('leave', evnt));\n         }\n\n         interactive.attr('rx', this.szx).attr('ry', this.szy);\n\n         d3_select(interactive.node().parentNode).attr('transform', this.draw_g.attr('transform'));\n\n         if (settings.Zooming && settings.ZoomWheel)\n            interactive.on('wheel', evnt => this.mouseWheel(evnt));\n      });\n   }\n\n   /** @summary Draw TGraphPolargram */\n   static async draw(dom, polargram /* , opt */) {\n      const main = getElementMainPainter(dom);\n      if (main) {\n         if (main.getObject() === polargram)\n            return main;\n         throw Error('Cannot superimpose TGraphPolargram with any other drawings');\n      }\n\n      const painter = new TGraphPolargramPainter(dom, polargram);\n      return ensureTCanvas(painter, false).then(() => {\n         painter.setAsMainPainter();\n         return painter.redraw();\n      }).then(() => painter);\n   }\n\n} // class TGraphPolargramPainter\n\n\n/**\n * @summary Painter for TGraphPolar objects.\n *\n * @private\n */\n\nclass TGraphPolarPainter extends ObjectPainter {\n\n   /** @summary Redraw TGraphPolar */\n   redraw() {\n      this.drawGraphPolar();\n   }\n\n   /** @summary Decode options for drawing TGraphPolar */\n   decodeOptions(opt) {\n      const d = new DrawOptions(opt || 'L');\n\n      if (!this.options) this.options = {};\n\n      Object.assign(this.options, {\n          mark: d.check('P'),\n          err: d.check('E'),\n          fill: d.check('F'),\n          line: d.check('L'),\n          curve: d.check('C')\n      });\n\n      this.storeDrawOpt(opt);\n   }\n\n   /** @summary Drawing TGraphPolar */\n   drawGraphPolar() {\n      const graph = this.getObject(),\n            main = this.getMainPainter();\n\n      if (!graph || !main?.$polargram) return;\n\n      if (this.options.mark) this.createAttMarker({ attr: graph });\n      if (this.options.err || this.options.line || this.options.curve) this.createAttLine({ attr: graph });\n      if (this.options.fill) this.createAttFill({ attr: graph });\n\n      this.createG();\n\n      this.draw_g.attr('transform', main.draw_g.attr('transform'));\n\n      let mpath = '', epath = '';\n      const bins = [];\n\n      for (let n = 0; n < graph.fNpoints; ++n) {\n         if (graph.fY[n] > main.scale_rmax) continue;\n\n         if (this.options.err) {\n            let pos1 = main.translate(graph.fX[n], graph.fY[n] - graph.fEY[n]),\n                pos2 = main.translate(graph.fX[n], graph.fY[n] + graph.fEY[n]);\n            epath += `M${pos1.grx},${pos1.gry}L${pos2.grx},${pos2.gry}`;\n\n            pos1 = main.translate(graph.fX[n] + graph.fEX[n], graph.fY[n]);\n            pos2 = main.translate(graph.fX[n] - graph.fEX[n], graph.fY[n]);\n\n            epath += `M${pos1.grx},${pos1.gry}A${pos2.rx},${pos2.ry},0,0,1,${pos2.grx},${pos2.gry}`;\n         }\n\n         const pos = main.translate(graph.fX[n], graph.fY[n]);\n\n         if (this.options.mark)\n            mpath += this.markeratt.create(pos.grx, pos.gry);\n\n         if (this.options.curve || this.options.line || this.options.fill)\n            bins.push(pos);\n      }\n\n      if ((this.options.fill || this.options.line) && bins.length) {\n         const lpath = buildSvgCurve(bins, { line: true });\n         if (this.options.fill) {\n            this.draw_g.append('svg:path')\n                .attr('d', lpath + 'Z')\n                .call(this.fillatt.func);\n         }\n\n         if (this.options.line) {\n            this.draw_g.append('svg:path')\n                .attr('d', lpath)\n                .style('fill', 'none')\n                .call(this.lineatt.func);\n         }\n      }\n\n      if (this.options.curve && bins.length) {\n         this.draw_g.append('svg:path')\n                 .attr('d', buildSvgCurve(bins))\n                 .style('fill', 'none')\n                 .call(this.lineatt.func);\n      }\n\n      if (epath) {\n         this.draw_g.append('svg:path')\n             .attr('d', epath)\n             .style('fill', 'none')\n             .call(this.lineatt.func);\n      }\n\n      if (mpath) {\n         this.draw_g.append('svg:path')\n               .attr('d', mpath)\n               .call(this.markeratt.func);\n      }\n   }\n\n   /** @summary Create polargram object */\n   createPolargram() {\n      const polargram = create('TGraphPolargram'),\n            gr = this.getObject();\n\n      let rmin = gr.fY[0] || 0, rmax = rmin;\n      for (let n = 0; n < gr.fNpoints; ++n) {\n         rmin = Math.min(rmin, gr.fY[n] - gr.fEY[n]);\n         rmax = Math.max(rmax, gr.fY[n] + gr.fEY[n]);\n      }\n\n      polargram.fRwrmin = rmin - (rmax-rmin)*0.1;\n      polargram.fRwrmax = rmax + (rmax-rmin)*0.1;\n\n      return polargram;\n   }\n\n   /** @summary Provide tooltip at specified point */\n   extractTooltip(pnt) {\n      if (!pnt) return null;\n\n      const graph = this.getObject(),\n            main = this.getMainPainter();\n      let best_dist2 = 1e10, bestindx = -1, bestpos = null;\n\n      for (let n = 0; n < graph.fNpoints; ++n) {\n         const pos = main.translate(graph.fX[n], graph.fY[n]),\n               dist2 = (pos.x-pnt.x)**2 + (pos.y-pnt.y)**2;\n         if (dist2 < best_dist2) { best_dist2 = dist2; bestindx = n; bestpos = pos; }\n      }\n\n      let match_distance = 5;\n      if (this.markeratt?.used) match_distance = this.markeratt.getFullSize();\n\n      if (Math.sqrt(best_dist2) > match_distance) return null;\n\n      const res = {\n         name: this.getObject().fName, title: this.getObject().fTitle,\n         x: bestpos.x, y: bestpos.y,\n         color1: this.markeratt?.used ? this.markeratt.color : this.lineatt.color,\n         exact: Math.sqrt(best_dist2) < 4,\n         lines: [this.getObjectHint()],\n         binindx: bestindx,\n         menu_dist: match_distance,\n         radius: match_distance\n      };\n\n      res.lines.push(`r = ${main.axisAsText('r', graph.fY[bestindx])}`,\n                     `phi = ${main.axisAsText('phi', graph.fX[bestindx])}`);\n\n      if (graph.fEY && graph.fEY[bestindx])\n         res.lines.push(`error r = ${main.axisAsText('r', graph.fEY[bestindx])}`);\n\n      if (graph.fEX && graph.fEX[bestindx])\n         res.lines.push(`error phi = ${main.axisAsText('phi', graph.fEX[bestindx])}`);\n\n      return res;\n   }\n\n   /** @summary Show tooltip */\n   showTooltip(hint) {\n      let ttcircle = this.draw_g?.selectChild('.tooltip_bin');\n\n      if (!hint || !this.draw_g) {\n         ttcircle?.remove();\n         return;\n      }\n\n      if (ttcircle.empty()) {\n         ttcircle = this.draw_g.append('svg:ellipse')\n                             .attr('class', 'tooltip_bin')\n                             .style('pointer-events', 'none');\n      }\n\n      hint.changed = ttcircle.property('current_bin') !== hint.binindx;\n\n      if (hint.changed) {\n         ttcircle.attr('cx', hint.x)\n               .attr('cy', hint.y)\n               .attr('rx', Math.round(hint.radius))\n               .attr('ry', Math.round(hint.radius))\n               .style('fill', 'none')\n               .style('stroke', hint.color1)\n               .property('current_bin', hint.binindx);\n      }\n   }\n\n   /** @summary Process tooltip event */\n   processTooltipEvent(pnt) {\n      const hint = this.extractTooltip(pnt);\n      if (!pnt || !pnt.disabled) this.showTooltip(hint);\n      return hint;\n   }\n\n   /** @summary Draw TGraphPolar */\n   static async draw(dom, graph, opt) {\n      const painter = new TGraphPolarPainter(dom, graph);\n      painter.decodeOptions(opt);\n\n      const main = painter.getMainPainter();\n      if (main && !main.$polargram) {\n         console.error('Cannot superimpose TGraphPolar with plain histograms');\n         return null;\n      }\n\n      let pr = Promise.resolve(null);\n      if (!main) {\n         if (!graph.fPolargram)\n            graph.fPolargram = painter.createPolargram();\n         pr = TGraphPolargramPainter.draw(dom, graph.fPolargram);\n      }\n\n      return pr.then(() => {\n         painter.addToPadPrimitives();\n         painter.drawGraphPolar();\n         return painter;\n      });\n   }\n\n} // class TGraphPolarPainter\n\nexport { TGraphPolargramPainter, TGraphPolarPainter };\n"],"x_google_ignoreList":[0]}