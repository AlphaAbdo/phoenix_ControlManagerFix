var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/ActiveVariable.html",[0,0.272,1,1.813]],["body/classes/ActiveVariable.html",[0,0.359,1,2.964,2,0.39,3,0.298,4,0.255,5,0.171,6,4.754,7,3.235,8,0.482,9,3.362,10,2.871,11,4.567,12,1.116,13,5.425,14,2.964,15,5.425,16,0.212,17,0.88,18,1.312,19,4.666,20,1.163,21,0.563,22,0.543,23,5.425,24,3.853,25,1.307,26,4.385,27,6.598,28,0.633,29,4.385,30,1.505,31,4.003,32,0.589,33,0.029,34,0.524,35,0.312,36,1.745,37,5.89,38,5.425,39,0.489,40,4.385,41,3.235,42,4.385,43,5.425,44,4.385,45,1.208,46,4.567,47,3.09,48,5.425,49,0.483,50,0.955,51,5.425,52,4.385,53,6.154,54,0.605,55,0.425,56,0.524,57,4.385,58,4.385,59,4.385,60,4.385,61,4.385,62,0.018,63,0.022,64,0.018]],["title/classes/AnimationsManager.html",[0,0.272,65,2.448]],["body/classes/AnimationsManager.html",[0,0.154,2,0.168,3,0.128,4,0.109,5,0.073,8,0.445,9,1.626,12,0.68,14,1.028,16,0.091,18,1.083,20,1.123,21,0.495,22,0.298,25,1.251,28,0.557,30,0.522,32,0.557,33,0.029,34,0.495,35,0.269,36,2.215,39,0.412,41,2.979,45,1.399,46,1.585,47,2.794,49,0.505,50,1.052,54,0.696,55,0.147,56,0.578,62,0.008,63,0.012,64,0.008,65,2.197,66,2.85,67,4.78,68,0.696,69,1.362,70,1.444,71,4.382,72,1.8,73,1.379,74,2.656,75,1.67,76,2.977,77,3.109,78,3.692,79,3.692,80,2.977,81,3.109,82,3.692,83,3.692,84,3.692,85,2.977,86,1.883,87,2.135,88,3.534,89,2.411,90,3.484,91,1.389,92,0.826,93,1.945,94,0.848,95,1.454,96,1.626,97,1.78,98,2.293,99,0.953,100,1.883,101,0.996,102,5.509,103,1.883,104,4.996,105,4.686,106,4.686,107,3.453,108,4.78,109,4.189,110,4.093,111,5.535,112,5.288,113,5.535,114,4.686,115,4.686,116,1.883,117,5.774,118,1.883,119,2.44,120,3.849,121,1.883,122,4.572,123,1.883,124,2.977,125,3.692,126,3.534,127,4.197,128,2.506,129,1.883,130,1.883,131,3.849,132,1.883,133,1.379,134,2.017,135,3.484,136,2.278,137,3.097,138,1.78,139,2.017,140,3.097,141,1.883,142,1.883,143,1.883,144,1.883,145,3.692,146,5.434,147,1.883,148,4.197,149,4.572,150,4.572,151,2.162,152,1.883,153,2.506,154,5.774,155,1.626,156,1.495,157,3.692,158,2.725,159,3.209,160,2.977,161,2.506,162,1.883,163,5.091,164,1.585,165,2.977,166,1.854,167,2.197,168,2.208,169,1.164,170,2.977,171,1.883,172,3.484,173,2.556,174,4.197,175,2.65,176,3.097,177,4.197,178,0.57,179,1.243,180,3.109,181,1.78,182,2.118,183,2.197,184,2.197,185,1.585,186,4.444,187,1.626,188,2.197,189,2.977,190,1.495,191,0.419,192,1.585,193,1.883,194,1.883,195,2.977,196,1.883,197,0.827,198,1.883,199,2.437,200,1.883,201,2.437,202,1.883,203,1.883,204,1.883,205,0.232,206,1.495,207,1.883,208,1.883,209,1.126,210,1.389,211,1.883,212,1.602,213,1.883,214,1.883,215,1.883,216,3.109,217,1.883,218,2.977,219,1.585,220,1.965,221,1.78,222,1.585,223,0.945,224,1.883,225,0.826,226,1.883,227,1.883,228,1.883,229,1.883,230,1.883,231,1.883,232,2.977,233,1.883,234,1.883,235,0.945,236,3.692,237,1.883,238,2.977,239,1.883,240,3.692,241,4.197,242,1.883,243,1.389,244,1.883,245,4.572,246,1.883,247,1.495,248,1.965,249,2.977,250,1.78,251,3.692,252,3.018,253,1.126,254,1.584,255,2.977,256,3.534,257,1.243,258,4.197,259,1.883,260,1.883,261,1.883,262,2.977,263,3.692,264,1.126,265,2.977,266,2.977,267,1.883,268,1.883,269,2.977,270,1.883,271,1.883,272,1.883,273,1.883,274,1.028,275,1.585,276,1.883,277,3.109,278,2.977,279,1.883,280,1.883,281,1.883,282,1.389,283,1.883,284,1.883,285,1.883,286,1.883,287,1.585,288,1.585,289,1.389,290,0.749,291,2.977,292,1.883,293,1.883,294,1.883,295,2.977,296,1.883,297,1.126,298,1.883,299,1.883,300,2.197,301,1.883,302,1.883,303,1.883,304,1.883,305,1.883,306,1.883,307,1.126,308,1.243,309,1.585,310,1.883,311,1.883,312,0.886,313,1.883,314,1.883,315,2.977,316,1.585,317,1.883,318,1.883,319,1.883,320,1.883,321,1.883,322,1.883,323,2.977,324,1.883,325,1.883,326,1.883,327,1.883,328,1.883,329,1.883,330,1.883,331,1.883,332,1.883,333,1.883,334,1.883,335,0.762,336,1.883,337,1.883,338,1.883,339,1.883,340,1.883,341,1.883,342,1.883,343,2.977,344,3.692,345,1.883,346,1.883,347,1.883,348,1.585,349,1.883,350,1.389,351,1.883,352,4.197,353,1.389,354,0.696,355,1.883,356,1.965,357,3.692,358,1.585,359,1.883,360,1.585,361,2.977,362,2.977,363,1.883,364,1.883,365,1.883,366,1.883,367,1.883,368,1.883,369,1.883,370,1.585,371,1.389,372,2.977,373,1.883,374,0.807,375,1.389,376,1.883,377,0.872,378,1.883,379,1.883,380,2.977,381,2.977,382,1.389,383,1.626,384,2.977,385,1.883,386,2.977,387,1.883,388,1.883,389,1.883,390,1.883,391,1.883,392,1.883,393,1.883,394,1.883,395,1.883,396,1.883,397,1.883,398,1.883,399,0.872,400,1.883,401,1.883,402,4.197,403,1.883,404,1.883,405,1.883,406,1.389,407,1.389,408,2.977,409,1.883,410,1.585,411,1.883,412,1.883,413,1.883]],["title/classes/CMSObjects.html",[0,0.272,414,2.19]],["body/classes/CMSObjects.html",[0,0.349,2,0.38,3,0.29,4,0.248,5,0.166,8,0.418,16,0.206,20,0.752,21,0.38,22,0.534,28,0.427,32,0.628,33,0.029,34,0.38,35,0.206,49,0.475,54,0.738,55,0.334,56,0.38,62,0.017,63,0.022,64,0.017,93,2.471,94,0.724,101,0.635,151,2.123,158,3.149,169,1.48,178,0.724,181,3.19,183,3.936,184,3.936,187,3.179,188,3.936,190,2.678,191,0.95,197,0.774,205,0.527,221,2.552,254,2.288,307,3.19,335,1.101,382,3.936,383,2.914,414,3.521,415,4.491,416,3.149,417,2.678,418,2.471,419,4.491,420,3.521,421,3.521,422,2.002,423,5.334,424,5.334,425,4.268,426,3.19,427,5.389,428,6.4,429,1.835,430,5.819,431,4.268,432,4.491,433,5.334,434,4.491,435,2.817,436,3.593,437,3.593,438,5.334,439,4.268,440,4.268,441,0.752,442,4.268,443,4.268,444,4.268,445,4.268,446,5.334,447,5.819,448,5.819,449,5.334,450,5.819,451,5.819,452,3.149,453,5.334,454,5.819,455,5.819,456,5.334,457,5.819,458,5.819,459,3.593,460,5.334,461,3.593,462,5.334,463,3.593,464,2.817,465,5.334,466,4.268,467,4.268,468,4.268,469,4.268,470,4.268,471,4.268,472,3.149,473,4.268,474,4.268,475,2.817,476,4.268,477,5.819,478,3.149,479,4.268,480,4.268,481,5.334,482,4.268,483,4.268,484,4.268,485,4.268,486,4.268,487,4.268,488,4.268,489,4.268]],["title/interfaces/Configuration.html",[490,1.666,491,1.141]],["body/interfaces/Configuration.html",[3,0.295,4,0.252,5,0.169,8,0.34,16,0.21,17,0.874,21,0.609,33,0.029,35,0.323,39,0.717,55,0.34,62,0.018,63,0.022,64,0.018,89,2.145,94,0.908,95,1.513,101,0.872,178,0.796,335,1.113,429,1.854,441,1.111,490,2.179,491,2.109,492,2.865,493,3.654,494,1.963,495,6.132,496,6.132,497,5.163,498,4.048,499,6.132,500,3.938,501,5.163,502,6.132,503,1.783,504,3.079,505,3.977,506,3.079,507,1.993,508,2.497,509,1.854,510,3.977,511,3.223,512,4.538,513,2.497,514,3.558,515,3.223,516,3.977,517,2.706,518,2.509,519,2.333,520,4.538,521,3.558,522,2.497,523,2.841,524,2.945,525,3.203,526,1.726,527,4.048,528,4.326,529,3.977,530,5.39,531,4.34,532,4.34,533,3.202,534,2.371,535,2.371,536,4.34,537,4.34]],["title/classes/CoordinateHelper.html",[0,0.272,538,2.19]],["body/classes/CoordinateHelper.html",[0,0.292,2,0.318,3,0.243,4,0.207,5,0.139,8,0.465,16,0.173,20,1.046,21,0.507,22,0.57,28,0.594,32,0.633,33,0.029,34,0.507,35,0.276,49,0.57,54,0.681,55,0.28,56,0.563,62,0.015,63,0.019,64,0.015,101,1.021,159,3.529,178,0.485,182,2.886,191,0.796,197,0.703,199,3.762,201,3.529,205,0.732,206,2.861,210,2.636,212,1.647,216,5.447,220,4.177,222,3.007,225,1.483,282,4.205,297,3.197,307,2.844,353,4.503,422,2.295,538,3.139,539,5.138,540,2.636,541,2.844,542,4.798,543,4.755,544,5.699,545,5.346,546,4.755,547,4.501,548,4.755,549,3.572,550,5.393,551,4.004,552,3.509,553,4.004,554,4.755,555,3.509,556,3.509,557,2.598,558,3.572,559,4.987,560,4.403,561,3.572,562,5.699,563,4.755,564,5.699,565,5.699,566,5.699,567,5.138,568,4.755,569,5.699,570,6.568,571,4.755,572,3.572,573,6.327,574,4.987,575,4.798,576,4.798,577,5.699,578,5.699,579,5.699,580,3.572,581,3.572,582,4.755,583,3.572,584,1.655,585,3.572,586,3.572,587,4.755,588,3.509,589,4.755,590,4.755,591,4.798,592,4.755,593,4.755,594,3.572,595,3.572,596,5.699,597,4.755,598,3.007,599,4.004,600,3.007,601,3.572,602,3.572,603,3.007,604,3.572,605,3.572,606,3.572,607,3.572,608,3.572,609,3.572]],["title/classes/Cut.html",[0,0.272,610,1.666]],["body/classes/Cut.html",[0,0.34,2,0.37,3,0.283,4,0.241,5,0.162,8,0.411,12,1.104,14,3.139,16,0.201,17,0.85,18,1.416,20,1.183,21,0.37,22,0.525,25,1.563,28,0.653,30,1.455,32,0.416,33,0.029,34,0.537,35,0.312,39,0.72,49,0.37,50,0.673,55,0.325,56,0.537,62,0.017,63,0.021,64,0.017,94,0.924,95,1.633,101,1.012,138,3.436,223,3.308,225,1.455,441,1.064,610,3.24,611,3.497,612,3.497,613,3.497,614,5.023,615,5.747,616,5.747,617,4.109,618,5.434,619,5.434,620,3.801,621,4.153,622,5.244,623,3.461,624,5.747,625,6.454,626,6.638,627,6.454,628,4.153,629,4.153,630,4.153,631,4.153,632,4.153,633,4.153,634,5.244,635,5.244,636,4.153,637,4.153]],["title/classes/DatGUIMenuUI.html",[0,0.272,638,2.448]],["body/classes/DatGUIMenuUI.html",[0,0.309,2,0.173,3,0.133,4,0.113,5,0.076,8,0.43,12,0.97,16,0.148,17,0.496,18,1.447,20,1.141,21,0.475,22,0.306,25,0.581,28,0.624,30,1.048,32,0.534,33,0.029,34,0.562,35,0.314,36,1.702,39,0.518,45,0.841,49,0.51,50,0.929,54,0.518,55,0.153,56,0.543,62,0.008,63,0.013,64,0.008,69,1.104,70,1.052,72,2.291,73,1.982,75,1.217,87,1.582,92,1.369,94,0.887,95,1.579,99,1.37,101,0.561,136,1.975,151,2.548,155,1.065,156,1.536,158,3.64,159,3.068,168,1.165,169,1.639,173,2.477,178,0.631,179,1.286,191,1.223,197,0.804,199,2.824,201,2.824,205,0.466,209,2.558,210,3.941,212,1.369,225,0.849,235,1.536,247,2.477,250,2.258,254,2.659,257,2.019,308,2.019,312,0.467,335,1.16,374,2.213,377,2.475,383,1.065,407,4.298,418,1.417,441,1.124,459,1.641,464,1.286,491,1.472,498,2.019,503,1.524,504,1.536,507,1.824,513,2.285,514,2.824,515,1.829,517,3.305,518,2.593,519,1.217,551,2.576,555,3.64,610,2.334,618,1.641,619,1.641,623,2.019,638,2.257,639,3.755,640,5.287,641,4.955,642,1.438,643,1.671,644,2.475,645,3.179,646,3.179,647,3.776,648,3.179,649,3.776,650,3.776,651,3.776,652,2.786,653,3.602,654,2.576,655,3.179,656,3.602,657,2.576,658,2.576,659,4.278,660,4.343,661,3.059,662,3.059,663,2.337,664,3.059,665,1.417,666,2.148,667,1.949,668,3.988,669,1.949,670,2.695,671,1.949,672,2.924,673,3.059,674,3.362,675,1.949,676,1.949,677,4.933,678,1.949,679,2.695,680,4.933,681,1.949,682,1.641,683,2.558,684,3.845,685,3.602,686,1.949,687,1.56,688,2.822,689,3.156,690,3.405,691,3.131,692,2.257,693,1.949,694,2.257,695,2.576,696,3.913,697,2.576,698,1.949,699,2.786,700,3.602,701,1.641,702,3.43,703,1.949,704,2.019,705,2.257,706,2.257,707,1.949,708,2.576,709,1.949,710,2.318,711,3.156,712,2.824,713,2.576,714,1.949,715,3.179,716,2.576,717,1.949,718,2.576,719,3.059,720,5.159,721,1.949,722,3.059,723,1.949,724,2.019,725,1.438,726,1.641,727,0.978,728,1.949,729,1.949,730,1.949,731,1.949,732,1.949,733,1.641,734,1.165,735,1.641,736,1.641,737,1.949,738,4.153,739,3.913,740,4.498,741,1.949,742,1.949,743,1.949,744,1.949,745,2.257,746,3.64,747,4.278,748,1.949,749,3.059,750,5.159,751,5.494,752,1.949,753,3.913,754,3.913,755,1.949,756,3.059,757,1.641,758,1.949,759,1.949,760,1.949,761,1.641,762,1.949,763,1.949,764,3.059,765,3.059,766,1.949,767,4.498,768,1.949,769,3.059,770,1.286,771,4.278,772,1.949,773,3.776,774,3.059,775,1.641,776,4.933,777,1.949,778,1.949,779,1.949,780,1.641,781,1.949,782,3.776,783,3.059,784,1.641,785,1.286,786,1.949,787,1.949,788,1.949,789,1.949,790,1.949,791,1.949,792,3.059,793,1.949,794,3.776,795,1.949,796,3.059,797,1.949,798,1.949,799,3.059,800,1.949,801,1.949,802,1.949,803,1.065,804,1.949,805,1.949,806,1.949,807,1.949,808,1.641,809,1.438,810,1.949,811,0.836,812,1.949,813,1.949,814,1.949,815,3.776,816,3.059,817,1.949,818,1.949,819,1.949,820,1.641,821,1.949,822,1.641,823,1.949,824,1.949,825,1.641,826,1.949,827,1.949,828,3.059,829,1.949,830,2.576,831,3.776,832,1.949,833,3.059,834,1.641,835,1.949,836,1.949,837,1.641,838,1.949,839,4.278,840,1.949,841,1.949,842,1.949,843,3.059,844,2.576,845,2.576,846,1.949,847,3.059,848,1.949,849,2.576,850,1.949,851,1.949,852,1.949,853,1.438,854,1.641,855,1.641,856,2.576,857,2.576,858,1.949,859,1.949,860,1.641,861,3.059,862,3.059,863,4.278,864,1.949,865,1.949,866,1.949,867,1.949,868,1.949,869,1.949,870,1.949,871,1.949,872,1.949,873,1.949,874,4.278,875,1.949,876,1.949,877,1.949,878,1.949,879,1.949,880,1.641,881,1.949,882,1.949,883,1.949,884,1.641,885,1.949,886,1.949,887,1.949,888,1.949,889,1.949,890,1.949]],["title/classes/EffectsManager.html",[0,0.272,891,2.19]],["body/classes/EffectsManager.html",[0,0.259,2,0.282,3,0.215,4,0.184,5,0.123,8,0.461,12,0.513,16,0.153,17,0.71,18,1.462,20,1.172,21,0.507,22,0.438,25,1.497,28,0.645,32,0.569,33,0.029,34,0.507,35,0.309,39,0.712,45,1.207,49,0.524,50,0.923,54,0.605,55,0.248,56,0.556,62,0.013,63,0.018,64,0.013,66,3.257,68,1.17,69,1.399,70,1.507,75,2.157,87,2.559,89,2.74,94,0.896,98,3.361,178,0.773,191,0.705,197,0.541,205,0.391,225,0.878,243,4,248,3.578,335,0.904,354,1.858,374,1.879,494,2.112,503,1.579,504,2.722,724,2.891,891,2.891,892,5.463,893,4.753,894,4,895,5.554,896,3.688,897,3.688,898,5.258,899,6.488,900,5.023,901,4.354,902,5.421,903,4.38,904,4.38,905,4.38,906,4.38,907,4.38,908,4,909,3.688,910,3.688,911,5.421,912,3.361,913,3.174,914,3.232,915,2.665,916,3.578,917,4,918,1.893,919,5.023,920,2.335,921,6.322,922,5.023,923,2.665,924,3.688,925,4.38,926,4.453,927,2.335,928,3.165,929,2.199,930,4.564,931,4.564,932,4,933,5.18,934,4.38,935,3.165,936,4.38,937,3.165,938,4.38,939,3.165,940,4.38,941,2.665,942,3.165,943,2.665,944,4.38,945,3.165,946,3.165,947,3.165,948,4.38,949,3.165,950,4.229,951,3.688,952,3.165,953,3.165,954,3.165,955,2.089,956,4.38,957,5.023,958,4.38,959,4.38,960,3.165,961,3.165,962,3.165,963,3.165,964,3.165,965,2.665,966,3.165,967,3.165,968,3.165,969,3.165,970,3.165,971,3.165,972,3.165]],["title/interfaces/EventDataLoader.html",[490,1.666,500,1.984]],["body/interfaces/EventDataLoader.html",[3,0.364,4,0.207,5,0.139,8,0.465,16,0.259,21,0.507,22,0.476,28,0.623,32,0.57,33,0.029,34,0.507,35,0.276,49,0.594,50,0.771,55,0.28,56,0.57,62,0.015,63,0.019,64,0.015,69,1.576,92,1.756,93,2.932,94,0.933,95,1.593,101,0.795,138,2.845,169,1.895,178,0.726,235,2.685,290,1.893,417,2.388,420,3.14,441,1.184,490,1.795,492,2.36,494,1.523,500,2.845,513,2.204,519,1.893,533,2.637,557,2.599,644,2.828,663,3.114,665,2.998,666,2.862,670,2.599,674,3.65,683,2.845,687,1.582,688,3.362,710,2.549,712,3.14,770,3.14,811,2.041,912,2.599,973,5.328,974,2.138,975,4.757,976,4.757,977,4.502,978,4.502,979,4.006,980,4.206,981,4.206,982,4.006,983,4.8,984,3.01,985,4.206,986,3.575,987,3.01,988,4.206,989,3.763,990,3.177,991,3.575,992,4.504,993,3.51,994,4.006,995,3.14,996,4.757,997,3.51,998,4.206,999,3.14,1000,3.51,1001,2.041,1002,4.006,1003,3.51,1004,4.006,1005,3.53,1006,3.14,1007,3.51,1008,3.575,1009,2.845,1010,4.006,1011,4.006,1012,3.575,1013,2.845,1014,4.006,1015,3.409,1016,4.006,1017,5.139,1018,3.575,1019,3.763,1020,3.51,1021,3.14,1022,3.14,1023,4.006,1024,3.575,1025,4.006,1026,4.177,1027,4.8,1028,3.51,1029,3.14,1030,3.575,1031,3.01,1032,2.637]],["title/classes/ExportManager.html",[0,0.272,1033,2.448]],["body/classes/ExportManager.html",[0,0.293,2,0.319,3,0.244,4,0.208,5,0.209,8,0.478,16,0.173,18,1.427,20,1.076,21,0.529,22,0.477,28,0.594,32,0.594,33,0.029,34,0.529,35,0.287,49,0.529,50,0.772,54,0.531,55,0.419,56,0.564,62,0.023,63,0.02,64,0.015,66,3.066,68,1.325,69,1.23,70,1.639,72,2.043,87,2.526,94,0.892,95,1.553,96,3.659,97,2.849,178,0.775,187,3.659,191,0.798,197,0.816,205,0.661,235,3.276,377,2.207,491,2.178,509,1.639,526,1.827,584,1.66,670,3.725,688,1.798,803,2.603,918,2.142,999,3.145,1033,3.515,1034,5.143,1035,5.353,1036,4.764,1037,4.764,1038,4.764,1039,4.764,1040,3.582,1041,2.643,1042,4.804,1043,3.412,1044,4.011,1045,4.011,1046,4.011,1047,3.515,1048,5.706,1049,4.032,1050,4.764,1051,4.764,1052,3.582,1053,3.337,1054,4.764,1055,3.582,1056,4.764,1057,3.016,1058,4.764,1059,4.764,1060,4.764,1061,3.582,1062,4.764,1063,3.582,1064,2.365,1065,3.016,1066,3.582,1067,5.353,1068,3.582,1069,3.582,1070,3.582,1071,4.764,1072,5.706,1073,3.582,1074,2.365,1075,2.365,1076,3.016,1077,2.643,1078,4.011,1079,3.582,1080,3.582,1081,3.016,1082,3.582,1083,3.582,1084,3.582,1085,5.706,1086,3.582,1087,5.706,1088,3.582,1089,3.016,1090,3.582,1091,3.582,1092,3.582,1093,3.582,1094,3.582,1095,3.582,1096,3.582,1097,3.016,1098,3.582]],["title/classes/Field.html",[0,0.272,617,2.19]],["body/classes/Field.html",[0,0.432,2,0.311,3,0.237,4,0.203,5,0.136,8,0.274,16,0.169,17,0.566,21,0.311,22,0.469,24,2.088,28,0.349,32,0.349,33,0.029,34,0.311,35,0.169,39,0.389,45,0.778,49,0.54,54,0.389,55,0.274,56,0.56,62,0.019,63,0.019,64,0.014,73,1.618,74,1.907,92,0.969,101,0.973,119,1.753,133,1.618,134,2.887,136,2.242,139,1.907,156,2.653,166,2.653,168,2.088,175,1.753,178,0.474,182,3.14,191,0.778,197,0.764,205,0.578,223,3.044,225,0.969,264,3.377,274,1.907,290,1.389,312,0.838,335,0.967,356,3.091,422,1.943,429,1.611,503,0.969,584,2.809,617,3.728,643,1.907,679,1.907,955,3.091,1001,2.009,1099,3.091,1100,2.305,1101,2.94,1102,3.491,1103,3.491,1104,3.491,1105,3.456,1106,4.253,1107,4.253,1108,1.753,1109,2.29,1110,2.576,1111,2.576,1112,2.576,1113,3.091,1114,3.377,1115,3.16,1116,3.377,1117,2.576,1118,2.576,1119,2.576,1120,3.888,1121,2.576,1122,2.576,1123,2.576,1124,2.576,1125,4.167,1126,3.899,1127,3.456,1128,3.456,1129,4.57,1130,4.645,1131,4.167,1132,3.377,1133,2.576,1134,2.576,1135,2.576,1136,4.705,1137,2.576,1138,2.305,1139,4.645,1140,2.576,1141,2.576,1142,4.346,1143,4.754,1144,2.576,1145,4.57,1146,2.576,1147,2.576,1148,2.576,1149,3.456,1150,2.576,1151,3.456,1152,3.899,1153,2.576,1154,2.576,1155,2.576,1156,2.576,1157,2.576,1158,2.576,1159,2.576,1160,2.576,1161,2.576,1162,2.576,1163,2.576,1164,2.576,1165,2.576,1166,2.576,1167,2.576,1168,2.576,1169,1.907,1170,2.576,1171,3.899,1172,3.456,1173,2.576,1174,3.899,1175,2.305,1176,3.899,1177,3.456,1178,2.576,1179,2.576,1180,2.576,1181,2.576,1182,2.576,1183,2.576,1184,2.576,1185,2.576,1186,2.576,1187,2.576,1188,2.576,1189,3.456,1190,3.456,1191,3.456,1192,3.488,1193,2.801,1194,3.899,1195,3.456,1196,2.088,1197,2.305,1198,2.801,1199,2.305,1200,2.088,1201,2.305,1202,2.576,1203,3.456,1204,2.576,1205,2.576,1206,2.576,1207,2.576,1208,2.576,1209,2.576,1210,2.576]],["title/classes/InfoLogger.html",[0,0.272,990,1.666]],["body/classes/InfoLogger.html",[0,0.366,2,0.398,3,0.465,4,0.259,5,0.174,8,0.43,12,0.89,16,0.216,17,0.89,18,1.442,21,0.398,22,0.549,28,0.62,32,0.447,33,0.029,34,0.398,35,0.287,36,1.779,39,0.612,49,0.529,50,0.725,55,0.35,56,0.489,62,0.018,63,0.022,64,0.018,92,1.523,94,0.607,95,1.601,101,0.816,155,2.999,205,0.552,441,1.141,494,1.431,679,2.999,687,1.719,710,2.609,912,2.999,913,2.756,990,2.756,1005,4.404,1006,2.95,1015,3.871,1029,3.623,1211,5.354,1212,3.763,1213,5.94,1214,5.94,1215,6.195,1216,4.469,1217,4.621,1218,4.469,1219,5.489,1220,5.489,1221,3.623,1222,4.05,1223,5.489,1224,4.469,1225,5.489,1226,4.776,1227,4.469,1228,4.621,1229,3.623,1230,4.469,1231,4.469,1232,4.469,1233,4.469,1234,4.469]],["title/classes/LHCbLoader.html",[0,0.272,1235,2.448]],["body/classes/LHCbLoader.html",[0,0.24,2,0.261,3,0.328,4,0.17,5,0.114,8,0.493,12,0.672,16,0.201,17,0.672,18,1.401,20,1.161,21,0.554,22,0.415,25,1.648,28,0.67,32,0.636,33,0.029,34,0.566,35,0.327,36,1.65,39,0.537,45,1.073,47,1.47,49,0.581,50,0.957,55,0.229,56,0.261,62,0.012,63,0.017,64,0.012,69,1.07,72,1.779,75,1.165,92,1.674,93,2.843,94,0.93,95,1.614,99,1.328,101,0.617,169,1.852,173,2.418,178,0.397,187,1.599,190,2.965,197,0.512,212,0.812,235,2.776,247,2.776,312,0.995,335,0.856,354,1.534,375,2.16,417,1.47,420,1.932,426,3.67,427,4.055,429,2.031,441,1.144,494,1.328,503,1.453,507,1.082,508,1.356,513,1.356,519,2.285,521,2.737,522,2.427,523,1.356,526,1.328,557,2.266,610,2.082,613,2.464,643,2.266,644,2.736,652,3.06,663,2.631,665,1.921,666,2.082,668,1.75,670,1.599,674,3.133,683,2.88,684,2.737,687,1.151,688,3.259,689,3.06,690,1.932,699,3.06,704,2.737,710,2.285,712,1.932,770,1.932,811,1.779,912,1.599,974,1.75,977,3.492,978,3.492,979,3.492,980,3.554,981,4.237,982,3.492,983,4.055,984,2.464,985,3.06,987,2.464,988,3.865,989,3.179,990,2.63,992,3.06,993,2.16,994,2.464,995,1.932,997,2.16,998,3.06,999,1.932,1000,2.16,1001,1.255,1002,2.464,1003,2.16,1004,2.464,1006,1.932,1007,2.16,1013,3.434,1015,3.307,1019,3.458,1020,3.06,1021,2.737,1022,2.737,1023,2.464,1028,2.16,1029,3.179,1043,1.75,1047,2.16,1132,2.48,1221,1.932,1222,2.16,1229,3.179,1235,3.06,1236,4.835,1237,4.419,1238,5.53,1239,4.147,1240,6.452,1241,4.147,1242,2.631,1243,2.631,1244,5.239,1245,4.147,1246,4.147,1247,4.147,1248,4.147,1249,4.147,1250,5.53,1251,6.588,1252,2.927,1253,2.927,1254,2.927,1255,2.927,1256,2.927,1257,3.06,1258,3.492,1259,2.927,1260,2.927,1261,2.927,1262,2.927,1263,2.927,1264,2.464,1265,4.147,1266,2.927,1267,2.266,1268,2.927,1269,5.239,1270,4.147,1271,5.239,1272,2.927,1273,2.927,1274,2.464,1275,2.927,1276,2.464,1277,4.147,1278,4.147,1279,2.464,1280,3.492,1281,4.147,1282,4.147,1283,2.927,1284,2.927,1285,4.147,1286,2.927,1287,2.927,1288,4.055,1289,3.554,1290,2.927,1291,2.464,1292,2.927,1293,2.927,1294,2.927,1295,2.927,1296,5.53,1297,2.927,1298,2.927,1299,2.927,1300,2.927,1301,2.927,1302,2.927,1303,2.464,1304,2.927,1305,2.927,1306,2.927,1307,2.927,1308,2.464,1309,2.464,1310,2.927,1311,2.927,1312,2.927,1313,4.147,1314,2.927,1315,2.464,1316,2.927,1317,2.464,1318,2.927,1319,2.927,1320,4.147,1321,2.927,1322,3.492]],["title/classes/LoadingManager.html",[0,0.272,1242,1.813]],["body/classes/LoadingManager.html",[0,0.263,2,0.286,3,0.219,4,0.187,5,0.125,8,0.475,12,0.983,16,0.156,17,0.718,18,1.438,19,4.028,20,1.199,21,0.527,22,0.443,25,1.51,28,0.655,30,1.229,32,0.592,33,0.029,34,0.55,35,0.315,39,0.676,41,3.184,45,1.275,47,3.303,49,0.55,50,1.067,55,0.252,56,0.54,62,0.013,63,0.018,64,0.013,68,1.189,69,1.594,70,1.107,101,0.901,138,2.649,197,0.547,205,0.397,212,1.229,253,2.649,256,4.596,350,4.898,422,1.743,441,1.153,508,1.49,509,2.035,513,2.862,522,2.939,526,1.622,620,3.538,672,1.615,687,1.76,691,2.42,918,1.924,927,2.373,1009,1.924,1049,3.998,1242,2.982,1257,3.738,1323,5.54,1324,4.366,1325,5.066,1326,5.066,1327,5.066,1328,5.066,1329,4.429,1330,4.429,1331,4.429,1332,4.429,1333,4.429,1334,4.429,1335,4.429,1336,3.729,1337,3.217,1338,3.217,1339,5.645,1340,4.429,1341,5.61,1342,3.217,1343,4.429,1344,2.373,1345,4.429,1346,3.217,1347,5.2,1348,4.429,1349,3.217,1350,4.429,1351,3.217,1352,4.429,1353,2.708,1354,4.429,1355,3.217,1356,4.429,1357,4.429,1358,3.217,1359,5.066,1360,3.217,1361,3.217,1362,5.066,1363,4.429,1364,3.217,1365,3.217,1366,3.217,1367,3.217,1368,3.217,1369,4.429,1370,3.217,1371,4.429,1372,3.729,1373,4.429,1374,3.217,1375,3.217,1376,4.429,1377,3.217,1378,4.429,1379,3.217,1380,3.217,1381,3.217,1382,3.217,1383,3.217]],["title/classes/PhoenixMenuNode.html",[0,0.272,523,1.537]],["body/classes/PhoenixMenuNode.html",[0,0.182,2,0.198,3,0.152,4,0.129,5,0.087,8,0.457,9,2.509,11,2.856,12,1.021,14,1.853,16,0.108,17,0.55,18,1.16,21,0.509,22,0.339,25,1.011,28,0.65,30,1.445,32,0.572,33,0.029,34,0.598,35,0.317,36,2.155,39,0.604,45,1.355,49,0.561,50,0.946,54,0.248,55,0.266,56,0.561,62,0.009,63,0.014,64,0.009,92,0.941,101,0.504,151,1.35,169,1.645,176,2.503,197,0.766,205,0.668,212,1.14,225,1.14,290,2.393,312,1.372,335,1.075,348,1.875,354,0.824,374,2.501,375,2.503,441,1.156,452,2.503,491,1.92,503,1.706,507,2.25,509,1.167,518,2.671,523,3.038,524,1.217,525,3.768,526,1.948,534,3.56,535,3.56,639,3.896,665,1.032,672,1.118,687,1.274,692,2.503,710,0.886,724,2.239,746,4.219,785,2.239,811,1.455,853,4.49,1053,1.217,1109,2.313,1267,3.049,1341,4.385,1384,1.644,1385,5.368,1386,4.108,1387,4.108,1388,4.108,1389,5.832,1390,4.704,1391,4.108,1392,5.223,1393,4.108,1394,4.108,1395,3.392,1396,3.392,1397,3.392,1398,3.392,1399,4.593,1400,2.856,1401,3.392,1402,3.392,1403,4.593,1404,1.875,1405,3.392,1406,4.699,1407,2.227,1408,2.227,1409,2.227,1410,4.385,1411,6.577,1412,4.593,1413,3.392,1414,2.227,1415,2.227,1416,2.227,1417,2.227,1418,2.856,1419,2.227,1420,2.227,1421,2.227,1422,2.227,1423,2.227,1424,3.392,1425,3.867,1426,2.227,1427,3.595,1428,3.392,1429,2.227,1430,3.389,1431,3.647,1432,2.856,1433,3.392,1434,2.227,1435,4.699,1436,4.593,1437,4.593,1438,3.392,1439,2.227,1440,2.856,1441,2.227,1442,2.856,1443,2.227,1444,2.227,1445,3.392,1446,2.227,1447,3.392,1448,2.227,1449,3.392,1450,3.392,1451,2.227,1452,2.856,1453,1.644,1454,2.856,1455,3.459,1456,1.875,1457,2.227,1458,4.943,1459,3.392,1460,3.392,1461,2.227,1462,2.227,1463,2.227,1464,3.392,1465,2.227,1466,2.227,1467,2.227,1468,2.227,1469,2.227,1470,2.227,1471,1.644,1472,2.227,1473,2.227,1474,2.227,1475,2.227,1476,2.227,1477,2.227,1478,2.227,1479,2.227,1480,4.108,1481,3.392,1482,3.392,1483,2.227,1484,2.227,1485,1.47,1486,2.227,1487,4.593,1488,2.227,1489,2.227,1490,2.227,1491,2.227,1492,4.108,1493,2.227,1494,2.227,1495,1.875,1496,2.227,1497,3.392,1498,2.227,1499,2.227,1500,2.227,1501,2.227,1502,3.392,1503,2.227,1504,2.227,1505,2.227,1506,4.108,1507,1.47,1508,1.875,1509,2.227,1510,2.227,1511,2.227,1512,3.392,1513,2.227,1514,4.108,1515,2.227,1516,2.227,1517,2.227,1518,2.227,1519,2.227,1520,2.227,1521,2.227,1522,2.227,1523,2.227,1524,2.227,1525,2.227,1526,4.108,1527,2.227,1528,2.227,1529,2.227,1530,2.227,1531,2.227,1532,2.227,1533,5.415,1534,2.227,1535,4.108,1536,2.227,1537,3.392,1538,2.227,1539,2.227,1540,2.227,1541,2.227,1542,2.227]],["title/classes/PhoenixMenuUI.html",[0,0.272,1543,2.448]],["body/classes/PhoenixMenuUI.html",[0,0.326,2,0.189,3,0.222,4,0.123,5,0.083,8,0.431,12,1.064,16,0.103,17,0.53,18,1.381,20,1.162,21,0.474,22,0.327,25,0.633,28,0.62,30,0.907,32,0.533,33,0.029,34,0.56,35,0.313,36,1.925,39,0.445,45,0.888,49,0.522,50,0.95,54,0.237,55,0.166,56,0.547,62,0.009,63,0.013,64,0.009,69,1.156,70,1.125,72,2.47,73,2.076,75,1.302,87,1.657,92,1.525,94,0.896,95,1.586,99,1.435,101,0.666,151,2.545,155,1.16,156,1.066,173,2.566,178,0.694,179,1.402,191,1.256,197,0.597,205,0.404,209,2.893,212,1.243,223,2.566,225,1.107,247,2.566,250,2.385,254,2.698,257,2.159,277,3.358,308,2.159,312,0.509,335,1.135,374,2.192,377,2.613,383,2.643,418,1.515,441,1.121,472,2.413,491,1.541,503,1.626,504,1.642,507,1.657,509,1.372,513,2.076,514,2.159,517,1.642,518,2.703,519,1.302,523,2.977,524,1.787,525,3.494,526,2.134,534,3.413,535,3.413,555,3.771,610,2.566,620,1.27,623,2.159,639,3.736,642,1.567,643,1.787,644,2.547,645,3.358,646,3.358,648,3.358,652,2.943,653,3.772,654,2.754,655,3.358,656,3.772,657,2.754,658,2.754,660,4.074,663,2.448,665,1.515,666,1.642,668,3.677,670,1.787,672,2.249,674,3.287,679,2.792,682,1.788,683,3.056,684,3.976,685,4.074,687,1.671,688,2.76,689,3.306,690,2.633,691,1.787,692,2.413,694,2.413,695,2.754,696,2.754,697,2.754,699,2.413,700,3.772,701,1.788,702,3.57,704,2.159,705,2.413,706,2.413,708,2.754,710,2.63,711,3.771,712,2.957,713,2.754,715,3.358,716,2.754,718,2.754,725,1.567,726,1.788,738,4.303,739,3.772,740,3.772,745,2.413,753,4.303,754,4.303,761,1.788,767,2.754,775,1.788,780,1.788,784,1.788,808,1.788,820,1.788,822,1.788,825,1.788,830,2.754,834,1.788,837,1.788,844,3.358,845,3.358,849,1.788,853,2.413,854,2.754,855,2.754,856,2.754,857,2.754,860,2.754,880,1.788,884,1.788,1053,1.16,1109,1.657,1410,2.754,1431,1.567,1495,1.788,1543,2.413,1544,3.989,1545,3.57,1546,4.48,1547,4.48,1548,3.271,1549,3.271,1550,3.271,1551,2.124,1552,2.124,1553,2.124,1554,2.124,1555,2.124,1556,2.124,1557,2.124,1558,4.074,1559,2.124,1560,2.124,1561,2.124,1562,2.124,1563,2.124,1564,2.124,1565,3.271,1566,5.758,1567,2.124,1568,1.27,1569,1.788,1570,1.567,1571,4.838,1572,3.271,1573,3.989,1574,2.124,1575,2.124,1576,2.124,1577,3.271,1578,6.023,1579,3.989,1580,5.111,1581,4.48,1582,2.124,1583,1.788,1584,2.124,1585,3.271,1586,2.124,1587,2.124,1588,2.124,1589,2.124,1590,2.124,1591,2.124,1592,2.754,1593,4.074,1594,2.124,1595,3.271,1596,2.124,1597,2.124,1598,2.124,1599,2.124,1600,2.124,1601,2.124,1602,3.271,1603,2.124,1604,2.124,1605,2.124,1606,2.124,1607,2.124,1608,2.124,1609,2.124,1610,2.124,1611,2.124,1612,2.124,1613,1.788,1614,2.124,1615,2.124,1616,2.124,1617,2.124,1618,2.124,1619,2.124,1620,2.124,1621,2.124,1622,3.271,1623,2.124,1624,2.124,1625,2.124,1626,2.124,1627,2.124,1628,2.124,1629,2.124,1630,2.124,1631,2.124,1632,2.124,1633,2.124,1634,2.124]],["title/classes/PhoenixObjects.html",[0,0.272,421,2.19]],["body/classes/PhoenixObjects.html",[0,0.22,2,0.24,3,0.364,4,0.156,5,0.105,8,0.471,16,0.13,17,0.437,18,1.123,20,0.889,21,0.525,22,0.391,28,0.59,32,0.677,33,0.029,34,0.525,35,0.312,39,0.513,49,0.557,54,0.715,55,0.211,56,0.449,62,0.011,63,0.016,64,0.011,93,2.588,94,0.531,96,2.135,119,2.308,136,1.445,137,1.988,151,1.83,159,2.579,166,2.532,169,1.83,172,4.13,173,2.892,175,2.532,178,0.685,180,2.268,181,1.611,182,1.81,183,2.883,184,3.393,185,2.268,186,3.29,187,3.477,188,1.988,190,1.352,191,0.6,197,0.824,199,1.778,201,2.579,205,0.742,212,1.669,221,2.337,225,1.084,252,3.803,253,1.611,254,2.749,264,2.337,275,4.246,282,1.988,289,1.988,297,2.75,300,4.566,307,2.75,312,1.21,316,3.871,335,0.949,353,1.988,360,5.21,382,1.988,383,1.472,416,1.988,417,1.962,418,1.81,421,2.579,422,2.261,426,3.653,429,2.102,432,2.268,434,3.29,435,1.778,436,2.268,441,0.475,472,1.988,475,3.329,478,2.883,512,3.29,526,1.615,538,1.778,541,2.337,550,3.871,553,2.268,556,1.988,584,1.81,598,2.268,599,3.29,600,2.268,691,2.135,809,1.988,811,1.155,1000,2.883,1001,1.676,1013,3.202,1097,2.268,1108,1.352,1132,3.202,1175,3.329,1197,3.803,1198,1.611,1322,3.29,1507,1.778,1635,5.064,1636,3.907,1637,4.598,1638,3.907,1639,3.907,1640,3.907,1641,3.907,1642,3.907,1643,3.907,1644,2.694,1645,2.694,1646,5.043,1647,3.907,1648,3.907,1649,2.694,1650,6.314,1651,5.043,1652,3.907,1653,3.907,1654,3.907,1655,3.907,1656,4.246,1657,2.694,1658,2.694,1659,3.907,1660,3.907,1661,2.694,1662,4.598,1663,3.907,1664,3.907,1665,2.694,1666,3.907,1667,3.907,1668,2.694,1669,4.598,1670,2.694,1671,5.043,1672,2.694,1673,4.598,1674,3.29,1675,3.907,1676,3.907,1677,2.694,1678,2.694,1679,5.355,1680,2.694,1681,2.694,1682,3.907,1683,2.694,1684,2.694,1685,3.907,1686,3.907,1687,1.778,1688,2.694,1689,2.694,1690,2.694,1691,2.694,1692,2.268,1693,3.907,1694,2.694,1695,2.694,1696,3.907,1697,2.694,1698,2.694,1699,2.694,1700,2.694,1701,2.694,1702,3.907,1703,4.598,1704,2.268,1705,4.598,1706,2.268,1707,5.355,1708,2.268,1709,4.598,1710,2.268,1711,2.694,1712,3.29,1713,2.694,1714,4.969,1715,2.694,1716,2.694,1717,2.694,1718,2.694,1719,3.907,1720,2.694,1721,2.694,1722,2.694,1723,2.694,1724,4.246,1725,3.329,1726,3.721,1727,2.694,1728,2.694,1729,5.355,1730,2.694,1731,4.598,1732,4.598,1733,2.694,1734,2.694,1735,3.907,1736,2.694,1737,2.268,1738,2.694,1739,2.694,1740,2.694,1741,2.694,1742,2.694,1743,1.988,1744,3.907,1745,2.268,1746,2.694,1747,2.694,1748,2.694,1749,2.694,1750,2.694,1751,2.694,1752,2.694,1753,3.907,1754,2.694,1755,2.694,1756,2.694,1757,2.694,1758,2.694,1759,2.694,1760,2.694,1761,2.694,1762,2.694,1763,2.694,1764,2.694,1765,2.694,1766,2.694,1767,2.694,1768,2.694,1769,3.907,1770,2.694,1771,2.694,1772,2.694,1773,2.694,1774,2.694,1775,3.907,1776,2.694,1777,2.694,1778,2.694,1779,2.694,1780,2.694,1781,2.694,1782,2.694,1783,2.268,1784,2.694,1785,2.694,1786,2.268,1787,1.988,1788,2.694,1789,2.694]],["title/classes/PresetView.html",[0,0.272,527,2.19]],["body/classes/PresetView.html",[0,0.355,2,0.387,3,0.295,4,0.252,5,0.169,8,0.422,16,0.21,17,0.874,20,1.17,21,0.387,22,0.54,25,1.295,28,0.643,30,1.496,32,0.435,33,0.029,34,0.598,35,0.305,45,0.967,49,0.48,50,0.704,55,0.34,56,0.522,62,0.018,63,0.022,64,0.018,89,2.51,101,0.938,136,2.377,205,0.536,220,4.049,354,2.377,441,1.19,506,3.08,511,4.114,527,3.56,528,5.033,529,3.205,1390,5.046,1404,4.541,1455,3.657,1456,4.938,1790,5.488,1791,3.657,1792,4.344,1793,4.344,1794,3.205,1795,6.586,1796,5.865,1797,6.134,1798,5.393,1799,6.134,1800,4.344,1801,4.344,1802,4.344,1803,4.344,1804,4.344,1805,4.344,1806,4.344]],["title/classes/PrettySymbols.html",[0,0.272,1568,1.984]],["body/classes/PrettySymbols.html",[0,0.33,2,0.359,3,0.274,4,0.234,5,0.157,8,0.444,12,0.654,16,0.195,17,0.834,20,0.999,21,0.458,22,0.515,28,0.567,30,1.119,32,0.641,33,0.029,34,0.458,35,0.305,39,0.45,49,0.504,54,0.574,55,0.316,56,0.549,62,0.017,63,0.021,64,0.017,99,1.291,133,1.868,166,2.024,169,1.855,197,0.761,205,0.7,287,3.395,417,2.583,422,2.255,441,1.112,475,2.661,508,2.626,541,2.411,559,3.797,560,3.397,574,3.797,584,2.384,687,1.119,1009,3.077,1113,3.397,1114,3.077,1115,3.077,1116,3.077,1274,5.311,1280,3.395,1471,4.406,1568,3.077,1570,4.654,1787,4.406,1807,5.027,1808,3.395,1809,6.743,1810,4.772,1811,5.146,1812,5.146,1813,5.027,1814,5.146,1815,5.971,1816,5.971,1817,5.971,1818,4.333,1819,4.032,1820,5.146,1821,4.032,1822,6.491,1823,5.146,1824,5.146,1825,4.032,1826,6.411,1827,6.169,1828,5.668,1829,4.032,1830,4.032,1831,4.032,1832,4.032,1833,5.668,1834,4.032,1835,5.146,1836,4.032,1837,4.032,1838,4.032,1839,5.146,1840,4.032,1841,4.032,1842,4.032,1843,4.032,1844,4.032,1845,3.395,1846,4.032,1847,5.971,1848,4.032,1849,4.032,1850,4.032,1851,3.395,1852,5.146,1853,4.032,1854,4.032,1855,4.032,1856,4.032,1857,4.032,1858,4.032,1859,4.032]],["title/classes/RKHelper.html",[0,0.272,1687,2.19]],["body/classes/RKHelper.html",[0,0.326,2,0.354,3,0.271,4,0.231,5,0.155,8,0.441,12,0.646,16,0.193,20,0.899,21,0.454,22,0.595,28,0.511,32,0.511,33,0.029,34,0.454,35,0.287,39,0.628,45,1.255,49,0.582,50,0.646,54,0.569,55,0.312,56,0.502,62,0.016,63,0.021,64,0.016,74,3.247,92,1.416,94,0.693,99,1.634,101,0.759,134,2.175,136,1.888,166,2.563,172,3.923,175,2.563,178,0.693,182,2.847,191,0.887,197,0.789,205,0.63,206,1.999,212,1.416,247,3.251,252,4.274,274,2.789,312,1.225,335,1.298,399,2.365,422,2.163,464,2.628,475,2.628,503,1.105,508,2.365,540,2.938,541,3.053,552,4.157,560,3.37,567,3.352,574,3.766,576,3.352,588,2.938,665,1.845,1013,3.053,1106,2.628,1107,2.628,1108,3.21,1114,2.381,1115,2.381,1116,3.823,1120,3.923,1192,2.628,1198,3.554,1199,3.37,1200,3.053,1201,3.37,1687,3.37,1692,5.004,1704,4.298,1706,4.298,1708,4.298,1710,3.352,1845,4.298,1851,3.352,1860,4.744,1861,5.635,1862,5.105,1863,3.981,1864,3.981,1865,5.105,1866,5.105,1867,4.298,1868,5.105,1869,3.981,1870,5.635,1871,3.981,1872,3.981,1873,3.981,1874,3.981,1875,3.981,1876,3.981,1877,3.981,1878,3.981,1879,3.981,1880,5.635,1881,3.981,1882,5.105,1883,3.981,1884,3.981,1885,3.981,1886,3.981,1887,3.981,1888,3.981,1889,3.981,1890,3.981,1891,3.981,1892,3.981,1893,3.981,1894,3.352,1895,3.981,1896,3.981,1897,3.352,1898,3.981,1899,3.981,1900,3.981,1901,3.981,1902,3.981,1903,3.981,1904,3.981,1905,3.981,1906,3.981]],["title/classes/RendererManager.html",[0,0.272,90,2.19]],["body/classes/RendererManager.html",[0,0.2,2,0.218,3,0.166,4,0.142,5,0.095,8,0.486,12,0.968,16,0.21,17,0.59,18,1.432,20,1.161,21,0.546,22,0.364,25,1.296,28,0.655,30,1.01,32,0.614,33,0.029,34,0.546,35,0.307,39,0.537,49,0.584,50,0.995,54,0.406,55,0.192,56,0.562,62,0.01,63,0.015,64,0.01,66,3.297,68,0.905,69,1.393,70,1.252,71,1.615,72,1.561,75,2.285,87,2.123,89,2.412,90,2.403,94,0.78,97,2.177,98,3.765,99,1.392,101,0.364,107,3.434,119,1.828,153,3.065,169,1.01,178,0.332,191,0.811,197,0.737,205,0.69,212,1.206,225,1.01,253,2.88,290,0.973,312,1.043,335,0.897,354,2.269,371,4.237,374,1.561,377,2.385,418,2.231,441,0.951,494,1.728,498,3.178,503,1.702,511,2.177,513,2.231,514,3.178,515,2.88,620,1.463,687,1.01,691,1.989,724,2.403,727,1.828,734,3.227,735,2.06,736,2.06,803,2.375,901,3.79,908,5.046,913,2.417,914,4.575,916,3.79,917,4.237,918,2.177,920,1.805,924,3.065,926,2.686,929,1.828,965,2.06,1015,3.898,1029,3.178,1724,3.065,1907,5.528,1908,4.347,1909,4.815,1910,5.148,1911,6.587,1912,3.64,1913,3.64,1914,4.815,1915,4.815,1916,4.815,1917,4.815,1918,2.686,1919,3.64,1920,4.815,1921,3.64,1922,3.64,1923,3.64,1924,3.64,1925,3.64,1926,3.64,1927,3.64,1928,3.64,1929,4.348,1930,5.028,1931,2.446,1932,2.446,1933,3.64,1934,3.64,1935,3.64,1936,2.446,1937,5.269,1938,3.64,1939,2.446,1940,3.64,1941,3.64,1942,2.446,1943,2.446,1944,2.446,1945,2.446,1946,4.815,1947,3.64,1948,2.06,1949,3.64,1950,2.446,1951,3.64,1952,2.446,1953,3.64,1954,2.06,1955,3.64,1956,3.64,1957,2.06,1958,3.64,1959,2.446,1960,3.64,1961,2.446,1962,3.64,1963,2.446,1964,3.065,1965,3.66,1966,2.446,1967,3.66,1968,3.64,1969,3.64,1970,2.446,1971,3.64,1972,5.396,1973,2.446,1974,3.64,1975,4.815,1976,4.815,1977,4.815,1978,2.446,1979,2.446,1980,1.805,1981,2.446,1982,2.446,1983,1.805,1984,2.446,1985,2.446,1986,2.446,1987,2.446,1988,2.446,1989,3.64,1990,4.347,1991,2.446,1992,2.446,1993,4.347,1994,2.446,1995,3.64,1996,2.446,1997,4.347,1998,3.64,1999,2.446,2000,3.64,2001,2.446,2002,2.446,2003,2.446,2004,2.446,2005,2.446,2006,3.64,2007,2.446,2008,2.446,2009,3.64,2010,4.815,2011,2.446,2012,2.446,2013,2.446,2014,2.446,2015,3.64,2016,2.446,2017,2.446,2018,2.446,2019,3.64]],["title/classes/RungeKutta.html",[0,0.272,1108,1.666]],["body/classes/RungeKutta.html",[0,0.417,2,0.289,3,0.221,4,0.188,5,0.127,8,0.399,12,0.527,16,0.157,17,0.723,21,0.397,22,0.446,24,1.942,28,0.446,32,0.446,33,0.029,34,0.397,35,0.246,39,0.362,45,1.134,49,0.551,50,0.527,54,0.362,55,0.254,56,0.551,62,0.018,63,0.018,64,0.013,73,2.066,74,2.436,92,1.237,101,1.001,119,1.63,133,2.066,134,2.994,136,2.35,139,1.774,156,2.884,166,2.751,168,2.666,175,2.238,178,0.441,182,3.126,191,0.723,197,0.75,205,0.55,223,3.248,225,1.237,264,3.277,274,2.436,290,1.292,312,1.07,335,1.131,356,2.943,422,2.041,429,1.885,503,0.901,508,1.505,584,2.749,643,2.436,679,2.436,955,3.618,1001,2.351,1099,3.361,1100,2.143,1105,4.044,1106,4.326,1107,4.326,1108,2.238,1109,2.392,1110,3.29,1111,3.29,1112,3.29,1113,3.361,1114,3.549,1115,3.277,1116,3.549,1117,2.396,1118,2.396,1119,2.396,1120,3.792,1121,2.396,1122,2.396,1123,2.396,1124,2.396,1125,4.044,1126,3.757,1127,3.29,1128,3.29,1129,4.484,1130,4.567,1131,4.044,1132,3.277,1133,2.396,1134,2.396,1135,2.396,1136,4.634,1137,2.396,1138,2.143,1139,4.567,1140,2.396,1141,2.396,1142,4.238,1143,4.689,1144,2.396,1145,4.484,1146,2.396,1147,2.396,1148,2.396,1149,3.29,1150,2.396,1151,3.29,1152,3.757,1153,2.396,1154,2.396,1155,2.396,1156,2.396,1157,2.396,1158,2.396,1159,2.396,1160,2.396,1161,2.396,1162,2.396,1163,2.396,1164,2.396,1165,2.396,1166,2.396,1167,2.396,1168,2.396,1169,1.774,1170,2.396,1171,3.757,1172,3.29,1173,2.396,1174,3.757,1175,2.143,1176,3.757,1177,3.29,1178,2.396,1179,2.396,1180,2.396,1181,2.396,1182,2.396,1183,2.396,1184,2.396,1185,2.396,1186,2.396,1187,2.396,1188,2.396,1189,4.238,1190,4.044,1191,4.044,1192,3.792,1193,3.277,1194,4.238,1195,4.044,1196,2.666,1197,2.943,1198,3.277,1199,2.943,1200,2.666,1201,2.943,1202,3.29,1203,3.29,1204,2.396,1205,2.396,1206,2.396,1207,2.396,1208,2.396,1209,2.396,1210,2.396,2020,3.247,2021,3.247,2022,3.247]],["title/classes/ScriptLoader.html",[0,0.272,2023,2.448]],["body/classes/ScriptLoader.html",[0,0.32,2,0.348,3,0.266,4,0.227,5,0.152,8,0.438,10,1.676,12,0.818,16,0.189,20,0.889,21,0.525,22,0.505,28,0.505,32,0.505,33,0.029,34,0.449,35,0.244,36,1.555,39,0.563,41,2.532,49,0.525,54,0.623,55,0.306,56,0.525,62,0.016,63,0.021,64,0.016,69,1.009,94,0.685,95,1.416,99,1.251,178,0.531,197,0.796,205,0.623,212,1.084,257,2.58,309,4.247,335,1.041,399,2.337,422,2.152,441,1.148,506,2.963,509,2.19,515,3.016,519,2.007,522,2.734,614,3.722,687,1.084,809,2.884,811,1.676,974,2.337,1049,3.529,1242,3.338,1276,4.247,1392,4.247,2023,3.722,2024,4.121,2025,5.005,2026,5.902,2027,5.044,2028,5.144,2029,4.702,2030,5.585,2031,5.585,2032,3.908,2033,3.908,2034,5.044,2035,3.957,2036,5.585,2037,4.969,2038,4.247,2039,5.902,2040,4.258,2041,5.044,2042,4.121,2043,5.044,2044,3.908,2045,6.517,2046,5.902,2047,5.585,2048,3.908,2049,6.109,2050,5.044,2051,5.044,2052,5.044,2053,3.291,2054,3.291,2055,3.291,2056,3.908,2057,3.908,2058,3.908,2059,5.044,2060,3.908,2061,3.908,2062,3.908,2063,3.908,2064,3.908,2065,3.291,2066,3.908,2067,3.908,2068,3.908,2069,3.908,2070,5.044,2071,3.908,2072,3.908,2073,3.908,2074,3.908,2075,3.908,2076,3.908,2077,3.908,2078,3.908,2079,3.908,2080,5.044,2081,3.908,2082,5.902,2083,5.902,2084,3.908,2085,3.908,2086,3.908,2087,3.908,2088,3.908,2089,3.908]],["title/classes/SelectionManager.html",[0,0.272,2090,2.448]],["body/classes/SelectionManager.html",[0,0.193,1,2.769,2,0.21,3,0.16,4,0.137,5,0.092,8,0.433,10,1.011,12,0.863,16,0.114,17,0.767,18,1.52,20,1.105,21,0.451,22,0.354,25,1.511,28,0.652,31,2.613,32,0.533,33,0.029,34,0.506,35,0.308,39,0.527,41,2.672,45,1.185,49,0.527,50,0.863,54,0.616,55,0.185,56,0.527,62,0.01,63,0.015,64,0.01,66,3.282,68,0.872,69,1.551,70,1.831,72,1.519,75,1.882,87,2.426,89,2.53,91,1.74,92,1.312,93,2.348,94,0.896,95,1.363,96,3.233,97,2.118,99,1.134,101,0.351,169,1.862,178,0.723,187,2.908,190,1.778,191,0.525,197,0.742,205,0.584,206,2.971,212,1.18,221,1.41,225,0.983,243,3.927,253,2.118,312,0.566,335,1.099,354,1.968,374,1.519,426,1.41,429,1.627,441,1.024,494,2.022,503,1.532,508,1.971,516,3.739,521,1.557,584,1.641,687,0.654,734,3.183,811,1.011,891,4.103,893,3.739,894,4.191,895,4.481,896,3.981,897,3.981,912,2.583,913,2.672,916,3.906,917,3.489,929,1.778,930,2.982,931,3.981,932,3.927,933,4.481,943,2.982,950,2.982,951,1.985,990,3.121,1001,1.519,1005,2.338,1006,3.121,1009,2.543,1026,3.121,1032,1.74,1221,3.513,1222,3.489,1226,3.138,1229,3.121,1344,1.74,1372,1.985,1507,1.557,1568,1.41,1569,1.985,1570,1.74,1725,4.064,1726,4.586,1743,2.613,1745,1.985,1918,3.138,1980,2.613,2090,2.613,2091,5.504,2092,4.253,2093,4.253,2094,4.253,2095,4.253,2096,4.253,2097,4.253,2098,4.253,2099,4.481,2100,4.728,2101,4.728,2102,3.981,2103,3.542,2104,3.542,2105,3.542,2106,3.542,2107,3.542,2108,2.358,2109,5.183,2110,2.613,2111,1.985,2112,2.358,2113,3.542,2114,3.542,2115,2.358,2116,1.74,2117,3.542,2118,2.358,2119,6.156,2120,5.323,2121,2.358,2122,4.728,2123,2.358,2124,2.613,2125,3.542,2126,3.542,2127,2.358,2128,2.358,2129,1.985,2130,2.613,2131,4.782,2132,2.358,2133,2.358,2134,2.982,2135,4.728,2136,1.985,2137,2.982,2138,2.982,2139,3.542,2140,3.542,2141,2.358,2142,2.358,2143,3.542,2144,2.358,2145,4.253,2146,3.542,2147,3.542,2148,2.358,2149,3.542,2150,2.358,2151,4.253,2152,2.358,2153,2.358,2154,2.358,2155,2.358,2156,1.74,2157,2.358,2158,4.253,2159,2.358,2160,2.358,2161,2.358,2162,2.358,2163,1.985,2164,2.358,2165,2.358,2166,2.358,2167,2.358,2168,2.358,2169,2.358,2170,2.358,2171,4.481,2172,5.323,2173,2.358,2174,3.542,2175,2.358,2176,4.253,2177,2.358,2178,3.542,2179,2.358,2180,2.358,2181,2.358,2182,2.358,2183,2.358,2184,2.358,2185,4.253,2186,2.358,2187,5.068,2188,2.358,2189,2.358,2190,2.358,2191,2.358,2192,3.542,2193,2.358,2194,2.358,2195,2.358,2196,2.358,2197,2.358,2198,2.358,2199,2.358,2200,2.358,2201,2.358,2202,2.358,2203,2.358,2204,2.358,2205,2.358,2206,2.358,2207,2.358,2208,2.358,2209,3.542,2210,2.358,2211,1.74,2212,1.985,2213,2.358,2214,2.358,2215,2.358,2216,2.358,2217,2.358,2218,3.542,2219,2.358,2220,2.358,2221,2.358,2222,2.358,2223,2.358,2224,2.358,2225,2.358,2226,2.358,2227,2.358,2228,2.358,2229,2.358,2230,2.358,2231,2.358,2232,2.358,2233,2.358,2234,2.358,2235,2.358]],["title/classes/State.html",[0,0.272,1109,1.227]],["body/classes/State.html",[0,0.368,2,0.293,3,0.224,4,0.191,5,0.128,8,0.257,12,1.007,16,0.159,17,0.831,24,1.966,28,0.621,33,0.029,35,0.3,39,0.692,45,0.732,49,0.49,54,0.571,55,0.257,56,0.553,62,0.018,63,0.018,64,0.013,73,1.523,74,1.796,92,0.912,101,0.993,109,2.425,119,1.65,133,1.523,134,2.799,136,2.255,139,1.796,155,1.796,156,2.896,166,2.896,168,2.688,175,1.65,178,0.446,182,3.104,191,0.732,197,0.753,205,0.555,212,1.652,223,3.117,225,1.247,264,3.294,274,1.796,290,1.308,297,2.688,312,0.789,335,0.928,356,2.968,422,1.547,429,1.547,503,0.912,584,2.76,643,1.796,679,2.456,955,2.968,1001,1.928,1099,4.156,1100,2.17,1105,3.317,1106,4.205,1107,4.205,1108,1.65,1109,2.329,1110,2.425,1111,2.425,1112,2.425,1113,3.382,1114,3.562,1115,3.294,1116,3.562,1117,2.425,1118,2.425,1119,2.425,1120,3.808,1121,2.425,1122,2.425,1123,2.425,1124,2.425,1125,4.065,1126,3.781,1127,3.317,1128,3.317,1129,4.499,1130,4.581,1131,4.065,1132,3.294,1133,2.425,1134,2.425,1135,2.425,1136,4.646,1137,2.425,1138,2.17,1139,4.581,1140,2.425,1141,2.425,1142,4.256,1143,4.7,1144,2.425,1145,4.499,1146,2.425,1147,2.425,1148,2.425,1149,3.317,1150,2.425,1151,3.317,1152,3.781,1153,2.425,1154,2.425,1155,2.425,1156,2.425,1157,2.425,1158,2.425,1159,2.425,1160,2.425,1161,2.425,1162,2.425,1163,2.425,1164,2.425,1165,2.425,1166,2.425,1167,2.425,1168,2.425,1169,1.796,1170,2.425,1171,3.781,1172,3.317,1173,2.425,1174,3.781,1175,2.17,1176,3.781,1177,3.317,1178,2.425,1179,2.425,1180,2.425,1181,2.425,1182,2.425,1183,2.425,1184,2.425,1185,2.425,1186,2.425,1187,2.425,1188,2.425,1189,3.317,1190,3.317,1191,3.317,1192,3.382,1193,3.064,1194,3.781,1195,3.317,1196,2.688,1197,2.968,1198,2.688,1199,2.17,1200,1.966,1201,2.17,1202,2.425,1203,4.065,1204,2.425,1205,2.425,1206,2.425,1207,2.425,1208,2.425,1209,2.425,1210,2.425,2236,4.496,2237,4.496,2238,4.496,2239,4.496,2240,3.287,2241,3.287,2242,3.287,2243,3.287,2244,3.287,2245,3.287,2246,3.287,2247,3.287,2248,3.287,2249,2.767]],["title/classes/StateManager.html",[0,0.272,1243,1.813]],["body/classes/StateManager.html",[0,0.26,1,1.736,2,0.283,3,0.216,4,0.184,5,0.124,8,0.473,9,2.4,10,1.363,12,0.816,16,0.154,17,0.712,18,1.121,21,0.525,22,0.44,25,1.501,28,0.66,30,1.219,32,0.59,33,0.029,34,0.525,35,0.312,39,0.561,49,0.563,50,0.98,54,0.606,55,0.249,56,0.525,62,0.013,63,0.018,64,0.013,68,1.175,69,1.65,70,1.511,87,1.625,88,4.239,89,2.614,91,2.345,94,0.849,101,0.749,107,3.907,169,1.582,178,0.774,191,0.708,197,0.542,205,0.542,220,4.065,290,1.748,312,0.763,354,2.34,377,1.473,422,2.028,441,1.039,494,2.002,501,4.963,503,1.397,504,2.727,508,1.473,509,1.868,518,2.405,523,2.731,524,3.301,525,3.364,526,1.888,534,1.736,535,1.736,644,1.473,672,1.596,687,0.882,710,1.748,727,3.26,915,2.676,916,3.585,918,1.901,920,2.345,923,2.676,927,2.345,941,2.676,1019,2.9,1041,2.345,1049,2.627,1053,2.967,1057,2.676,1064,2.9,1065,2.676,1109,2.501,1243,3.221,1267,3.457,1315,4.239,1317,4.239,1324,4.669,1336,3.699,1353,2.676,1400,3.699,1427,1.901,1442,3.699,1507,2.098,1508,2.676,1545,2.345,1592,3.699,1593,3.699,2116,2.345,2156,2.345,2250,5.581,2251,4.393,2252,5.431,2253,5.035,2254,5.035,2255,5.431,2256,5.431,2257,4.393,2258,4.393,2259,4.393,2260,4.393,2261,4.393,2262,4.393,2263,4.393,2264,5.431,2265,4.393,2266,3.179,2267,4.393,2268,3.179,2269,4.393,2270,3.179,2271,4.393,2272,4.393,2273,3.179,2274,4.393,2275,3.179,2276,4.393,2277,2.345,2278,5.431,2279,5.035,2280,3.179,2281,3.179,2282,3.179,2283,3.179,2284,3.179,2285,3.179,2286,3.179,2287,3.179,2288,3.179,2289,3.179,2290,3.179,2291,3.179,2292,3.179,2293,3.179,2294,3.179,2295,3.179,2296,3.179,2297,3.179,2298,3.179,2299,3.179,2300,3.179,2301,3.699,2302,2.676,2303,3.179,2304,3.179,2305,3.179,2306,3.179]],["title/classes/URLOptionsManager.html",[0,0.272,2307,2.19]],["body/classes/URLOptionsManager.html",[0,0.281,2,0.306,3,0.315,4,0.2,5,0.248,8,0.411,10,1.988,16,0.166,17,0.751,18,1.305,20,1.12,21,0.412,22,0.464,25,1.673,28,0.586,32,0.561,33,0.029,34,0.412,35,0.316,36,1.844,39,0.626,49,0.467,50,0.85,54,0.626,55,0.363,56,0.499,62,0.014,63,0.019,64,0.014,68,1.271,69,1.512,70,1.594,92,1.286,94,0.905,95,1.346,133,2.147,169,0.954,178,0.796,197,0.761,205,0.424,235,1.726,312,0.825,335,1.082,406,3.42,429,1.594,441,1.12,461,2.894,463,2.894,491,2.246,494,1.975,506,3.411,507,2.43,509,2.015,510,4.323,517,1.726,518,2.086,519,2.233,522,1.593,526,1.797,557,1.878,641,2.536,644,1.593,727,3.097,914,2.536,929,2.941,1026,2.269,1074,2.269,1109,1.271,1169,2.532,1196,2.771,1237,3.059,1243,2.864,1267,2.864,1427,3.135,1430,3.42,1435,3.902,1545,2.536,1794,3.42,1929,3.059,2116,3.42,2129,2.894,2171,2.894,2301,2.894,2307,3.059,2308,4.453,2309,5.243,2310,5.243,2311,5.612,2312,5.612,2313,3.437,2314,5.243,2315,4.634,2316,3.437,2317,5.859,2318,3.437,2319,4.725,2320,5.612,2321,5.612,2322,3.902,2323,4.725,2324,3.902,2325,2.894,2326,4.634,2327,3.902,2328,3.437,2329,3.437,2330,2.894,2331,2.894,2332,2.536,2333,3.437,2334,3.437,2335,3.437,2336,3.437,2337,3.437,2338,3.437,2339,3.437,2340,3.437,2341,3.437,2342,2.056,2343,4.634,2344,3.437,2345,3.437,2346,5.243,2347,3.437,2348,3.437,2349,3.437,2350,4.414,2351,3.902,2352,3.437,2353,3.437,2354,3.902,2355,3.437,2356,3.437,2357,3.437,2358,3.437,2359,4.634,2360,3.437,2361,3.437,2362,3.437,2363,3.437,2364,3.437,2365,2.894,2366,2.894,2367,3.437,2368,3.437,2369,3.437,2370,3.437,2371,3.437,2372,3.437,2373,3.437,2374,3.437,2375,3.437,2376,2.894,2377,3.437,2378,3.437,2379,3.437,2380,3.437,2381,3.437,2382,3.437]],["title/classes/VRManager.html",[0,0.272,2383,2.448]],["body/classes/VRManager.html",[0,0.205,2,0.223,3,0.17,4,0.145,5,0.098,8,0.407,9,3.157,12,0.842,16,0.121,17,0.6,18,1.517,20,1.152,21,0.392,22,0.37,28,0.656,32,0.487,33,0.029,34,0.433,35,0.312,36,1.753,39,0.579,41,2.731,45,1.157,47,3.014,48,2.106,49,0.534,50,0.988,54,0.628,55,0.196,56,0.501,62,0.01,63,0.015,64,0.01,66,3.305,68,0.925,69,0.955,72,1.587,73,1.715,87,1.369,89,2.695,92,1.351,94,0.503,96,2.972,98,3.327,101,0.655,120,3.116,126,3.709,135,3.43,136,1.629,139,1.367,140,4.014,164,2.106,167,2.731,176,1.846,178,0.503,181,1.496,182,2.407,190,3.179,191,0.557,197,0.695,205,0.544,206,2.826,212,1.222,223,1.256,225,0.694,254,1.073,288,3.116,290,1.473,297,2.213,312,1.057,335,0.516,354,2.22,371,1.846,377,2.041,399,2.255,410,2.106,418,2.255,422,1.515,429,1.675,441,0.652,494,1.185,503,1.509,504,2.444,513,1.159,591,2.106,666,1.858,672,1.256,908,4.014,909,2.106,913,2.902,995,2.908,1041,1.846,1169,2.022,1193,3.686,1339,2.106,1344,1.846,1347,4.099,1440,2.106,1453,3.592,1583,2.106,1656,3.709,1674,3.116,1712,2.106,1783,2.106,1810,3.709,1948,2.106,1954,2.106,1957,2.106,2040,1.651,2111,2.106,2124,2.731,2136,2.106,2249,2.106,2325,2.106,2365,2.106,2383,2.731,2384,5.543,2385,5.098,2386,4.405,2387,4.405,2388,4.405,2389,4.405,2390,4.405,2391,4.405,2392,4.405,2393,4.405,2394,4.866,2395,4.405,2396,4.405,2397,4.405,2398,4.405,2399,4.405,2400,4.868,2401,3.701,2402,4.868,2403,4.868,2404,3.701,2405,4.868,2406,4.405,2407,2.501,2408,4.969,2409,5.779,2410,2.501,2411,4.868,2412,4.923,2413,5.44,2414,3.701,2415,3.701,2416,2.501,2417,2.501,2418,2.501,2419,2.731,2420,2.501,2421,3.701,2422,2.501,2423,2.501,2424,3.701,2425,2.501,2426,3.701,2427,2.501,2428,3.701,2429,5.779,2430,3.701,2431,2.501,2432,3.701,2433,2.501,2434,5.196,2435,2.501,2436,3.701,2437,3.701,2438,2.501,2439,2.106,2440,2.501,2441,2.501,2442,4.405,2443,2.501,2444,2.501,2445,2.501,2446,2.501,2447,3.701,2448,2.501,2449,2.501,2450,3.701,2451,2.501,2452,3.701,2453,2.501,2454,2.501,2455,2.501,2456,2.501,2457,2.501,2458,2.501,2459,2.501,2460,2.501,2461,2.501,2462,4.868,2463,2.501,2464,3.701,2465,2.501,2466,3.701,2467,2.501,2468,3.701,2469,3.701,2470,4.405,2471,2.501,2472,4.405,2473,4.868,2474,2.501,2475,3.701,2476,2.501,2477,2.501,2478,2.501,2479,2.501,2480,2.501,2481,2.501,2482,2.501,2483,2.501,2484,2.501,2485,2.501,2486,2.501,2487,2.501,2488,2.501,2489,2.501,2490,2.501,2491,2.501,2492,2.501,2493,2.501,2494,2.501,2495,2.501,2496,2.501,2497,2.501,2498,2.501,2499,2.501,2500,2.501,2501,2.501,2502,2.501,2503,2.501,2504,2.501,2505,2.501,2506,3.701,2507,3.701,2508,2.501,2509,3.701,2510,2.501,2511,2.501,2512,2.501,2513,2.501,2514,2.501,2515,2.501,2516,2.106,2517,2.501,2518,2.501,2519,2.501,2520,3.701,2521,2.501,2522,2.501,2523,2.501,2524,2.501]],["title/interfaces/Window.html",[490,1.666,2342,1.984]],["body/interfaces/Window.html",[0,0.224,1,1.496,3,0.295,4,0.098,5,0.21,8,0.133,10,0.727,12,0.275,14,0.926,16,0.132,17,0.444,18,1.227,19,2.02,20,1.16,22,0.274,30,0.47,32,0.345,33,0.029,34,0.588,35,0.082,39,0.189,41,1.985,45,0.61,47,2.706,49,0.522,50,0.792,54,0.518,55,0.133,56,0.605,62,0.007,63,0.011,64,0.007,69,1.571,70,1.185,71,3.063,72,1.477,73,0.786,74,0.926,75,1.573,77,1.428,81,1.428,87,1.879,89,1.371,92,1.627,93,2.01,94,0.902,95,1.449,96,1.496,97,1.014,98,1.496,99,1.486,101,0.835,102,3.907,104,3.329,105,2.306,106,2.306,107,1.014,108,1.428,109,2.02,110,2.306,111,3.907,112,2.9,113,2.9,114,2.306,115,2.306,119,0.851,128,1.428,131,2.9,133,1.596,134,1.882,135,1.119,136,1.013,137,2.02,138,1.638,139,0.926,140,2.02,151,1.727,167,1.251,169,1.799,175,2.452,178,0.69,190,0.851,191,0.767,197,0.68,205,0.732,206,0.851,209,1.638,212,0.47,225,0.47,235,1.729,250,3.612,254,2.843,274,0.926,290,0.675,308,3.063,312,0.407,335,1.159,350,1.251,354,1.013,374,1.174,399,2.15,407,1.251,417,1.375,418,0.786,420,1.119,426,1.014,429,1.748,441,1.16,490,1.729,491,2.078,492,1.119,494,1.828,503,1.645,504,2.551,505,2.02,506,2.866,507,1.013,509,1.36,511,1.638,516,2.541,517,1.729,518,2.193,519,0.675,520,2.306,522,2.497,524,1.496,525,2.535,526,1.828,528,1.251,529,1.251,533,1.251,557,0.926,612,3.907,644,2.432,663,1.496,665,1.832,666,1.375,668,1.638,670,2.371,672,1.729,683,1.014,687,1.558,688,2.767,690,1.808,691,1.496,694,1.251,702,4.63,704,2.274,705,1.251,706,3.424,710,1.943,711,2.02,727,2.551,734,1.638,770,1.119,803,2.776,811,0.727,894,1.251,901,1.808,910,1.428,912,1.496,913,1.985,929,2.179,932,2.541,980,1.251,981,1.251,985,2.541,988,1.251,989,1.808,990,1.985,992,1.251,993,1.251,995,2.274,998,2.02,999,1.119,1001,0.727,1005,2.61,1007,1.251,1009,2.06,1010,1.428,1011,1.428,1013,2.365,1014,1.428,1015,1.014,1016,2.306,1017,3.653,1019,1.808,1020,2.02,1021,1.808,1022,1.119,1026,2.61,1027,1.428,1028,3.424,1031,1.428,1032,1.251,1042,2.306,1043,2.595,1044,1.428,1045,1.428,1046,1.428,1047,1.251,1049,2.365,1074,1.119,1075,2.274,1077,3.977,1081,1.428,1089,2.306,1109,1.806,1196,1.014,1200,1.014,1217,2.306,1221,1.119,1228,1.428,1242,2.16,1243,2.16,1257,2.02,1258,1.428,1264,1.428,1267,3.011,1308,2.9,1309,2.306,1324,1.251,1430,1.251,1432,1.428,1558,5.228,1714,3.329,1725,3.707,1743,1.251,1794,1.251,1894,3.329,1897,2.306,1929,2.274,1930,2.306,1964,1.428,1965,1.428,1967,1.428,1983,1.251,2035,3.358,2040,3.558,2042,1.251,2053,1.428,2055,1.428,2099,1.428,2102,1.428,2109,2.9,2110,2.541,2130,1.251,2131,1.428,2134,1.428,2137,2.306,2138,1.428,2156,1.251,2163,2.9,2211,2.02,2302,1.428,2307,1.808,2330,1.428,2342,2.92,2366,1.428,2385,2.917,2394,1.428,2412,1.251,2525,1.428,2526,1.428,2527,1.696,2528,1.696,2529,2.738,2530,3.444,2531,3.444,2532,1.696,2533,1.696,2534,1.696,2535,2.738,2536,2.738,2537,1.696,2538,2.738,2539,3.444,2540,1.696,2541,3.444,2542,1.696,2543,1.696,2544,1.696,2545,1.696,2546,1.696,2547,1.696,2548,1.696,2549,1.696,2550,1.696,2551,1.696,2552,1.696,2553,1.696,2554,1.696,2555,3.444,2556,1.696,2557,2.306,2558,1.696,2559,1.696,2560,1.696,2561,1.696,2562,1.696,2563,1.696,2564,3.444,2565,1.696,2566,4.883,2567,1.696,2568,1.696,2569,1.696,2570,1.696,2571,1.696,2572,1.696,2573,1.696,2574,1.696,2575,2.738,2576,2.738,2577,2.738,2578,2.738,2579,2.738,2580,1.696,2581,1.696,2582,1.696,2583,1.696,2584,1.696,2585,1.696,2586,1.696,2587,1.696,2588,1.696,2589,1.696,2590,1.696,2591,1.696,2592,3.444,2593,3.653,2594,4.641,2595,4.641,2596,4.641,2597,4.641,2598,5.928,2599,3.954,2600,3.444,2601,1.428,2602,1.696,2603,2.738,2604,1.696,2605,4.339,2606,3.954,2607,1.696,2608,4.339,2609,1.696,2610,1.696,2611,1.696,2612,1.696,2613,1.696,2614,1.696,2615,1.696,2616,2.738,2617,1.696,2618,1.696,2619,1.696,2620,1.696,2621,1.696,2622,1.696,2623,1.696,2624,1.696,2625,1.696,2626,1.696,2627,1.696,2628,1.696,2629,1.696,2630,1.696,2631,1.696,2632,2.738,2633,2.738,2634,1.696,2635,1.696,2636,3.444,2637,2.738,2638,1.696,2639,1.696,2640,1.696,2641,1.696,2642,1.696,2643,3.444,2644,2.738,2645,2.738,2646,2.738,2647,1.696,2648,1.696,2649,2.738,2650,1.696,2651,1.696,2652,1.696,2653,1.696,2654,1.696,2655,1.696,2656,1.696,2657,3.907,2658,1.696,2659,3.444,2660,1.696,2661,1.696,2662,1.696,2663,3.444,2664,1.428,2665,1.696,2666,1.696,2667,1.696,2668,1.696,2669,1.696,2670,1.696,2671,2.738,2672,1.696,2673,1.696,2674,1.696,2675,1.696,2676,1.696,2677,1.696,2678,1.696,2679,1.696,2680,1.696,2681,1.696,2682,1.696,2683,1.696,2684,1.696,2685,1.696,2686,1.696,2687,1.696,2688,1.696,2689,1.696,2690,1.696,2691,1.696,2692,1.696,2693,2.738,2694,1.696,2695,1.696,2696,1.696,2697,1.696,2698,1.428,2699,1.696,2700,1.696,2701,1.696,2702,1.696,2703,1.696,2704,1.428,2705,1.696,2706,1.696,2707,1.696,2708,1.696,2709,1.696,2710,1.428,2711,1.696,2712,1.696,2713,1.696,2714,1.428,2715,1.696,2716,1.696,2717,2.738,2718,1.696,2719,1.696,2720,1.696,2721,1.696,2722,1.696,2723,1.696,2724,1.696,2725,1.696,2726,1.428,2727,1.696,2728,1.696,2729,1.696]],["title/changelog.html",[2419,2.046,2730,2.046,2731,2.773]],["body/changelog.html",[3,0.174,4,0.149,5,0.192,9,1.399,10,1.098,12,0.61,14,2.057,21,0.397,24,2.944,30,1.239,31,1.889,33,0.018,34,0.335,39,0.286,45,0.838,54,0.42,62,0.01,63,0.015,64,0.01,69,1.464,70,0.881,71,2.947,75,1.777,87,0.947,89,1.019,93,1.186,94,0.952,95,0.903,98,1.399,99,1.205,101,0.381,107,2.251,133,1.186,135,1.69,136,1.392,151,1.959,155,2.057,156,1.89,169,1.573,172,1.69,173,2.242,178,0.511,181,1.531,205,0.465,206,1.285,219,2.156,247,2.634,248,2.485,250,2.251,252,1.69,254,2.432,289,2.778,300,2.778,307,3.137,354,2.029,370,2.156,374,2.432,383,2.057,399,2.836,406,3.295,414,1.69,417,1.285,418,2.542,419,4.145,437,3.17,452,1.889,464,1.69,478,1.889,491,1.887,494,2.242,497,2.156,505,1.889,506,2.921,507,2.029,509,1.694,511,2.251,517,2.472,518,2.363,519,1.959,522,2.431,524,1.399,525,1.399,526,1.863,541,1.531,542,3.17,547,2.156,552,2.778,556,1.889,559,2.778,560,1.69,575,2.156,603,2.156,610,1.89,614,1.889,620,1.531,623,1.69,644,2.751,666,1.89,668,2.251,674,3.28,684,2.947,687,1.859,688,1.89,710,2.183,733,2.156,734,1.531,745,1.889,746,2.778,757,2.156,785,1.69,803,1.399,811,1.098,893,1.889,898,2.156,901,1.69,926,1.889,929,1.89,997,1.889,1001,1.098,1003,1.889,1021,1.69,1022,2.485,1025,2.156,1043,1.531,1053,2.057,1075,1.69,1077,1.889,1078,2.156,1109,2.029,1138,1.69,1169,1.399,1193,1.531,1226,1.889,1267,2.057,1279,2.156,1289,3.295,1291,3.17,1303,3.17,1385,2.156,1390,1.889,1406,2.156,1418,2.156,1427,2.67,1431,1.889,1471,1.889,1485,2.947,1613,2.156,1725,1.69,1726,3.295,1737,3.17,1786,3.76,1787,1.889,1813,3.17,1818,2.156,1867,3.17,1918,3.295,1929,1.69,1937,2.156,1980,2.778,1983,3.295,2025,1.889,2029,2.156,2035,2.944,2037,3.17,2038,3.17,2040,1.69,2065,2.156,2110,2.778,2124,3.633,2130,1.889,2212,2.156,2319,2.156,2322,3.17,2324,3.17,2342,1.531,2354,2.156,2385,3.871,2408,2.156,2412,1.889,2439,2.156,2516,2.156,2557,2.156,2601,2.156,2657,2.156,2664,4.145,2704,4.899,2710,5,2714,2.156,2726,2.156,2730,1.889,2732,2.56,2733,2.56,2734,2.56,2735,2.56,2736,2.56,2737,2.56,2738,3.765,2739,2.56,2740,5.246,2741,3.765,2742,2.56,2743,5.671,2744,2.56,2745,5.818,2746,2.56,2747,2.56,2748,2.56,2749,2.56,2750,6.31,2751,2.56,2752,2.56,2753,4.465,2754,2.56,2755,2.56,2756,2.56,2757,2.56,2758,6.472,2759,2.56,2760,2.56,2761,2.56,2762,2.56,2763,2.56,2764,2.56,2765,2.56,2766,2.56,2767,2.156,2768,2.56,2769,2.56,2770,2.56,2771,2.56,2772,2.56,2773,2.56,2774,2.56,2775,3.765,2776,2.56,2777,2.56,2778,2.56,2779,5.486,2780,2.56,2781,2.56,2782,2.56,2783,3.765,2784,2.56,2785,2.56,2786,4.465,2787,2.56,2788,2.56,2789,2.56,2790,2.56,2791,2.56,2792,2.56,2793,2.56,2794,2.56,2795,3.765,2796,2.56,2797,2.56,2798,2.56,2799,2.56,2800,5.486,2801,2.56,2802,2.56,2803,2.56,2804,2.56,2805,2.56,2806,2.56,2807,4.465,2808,2.56,2809,2.56,2810,2.56,2811,2.56,2812,2.56,2813,2.56,2814,2.56,2815,4.465,2816,2.56,2817,2.56,2818,2.56,2819,2.56,2820,2.56,2821,2.56,2822,2.56,2823,2.56,2824,2.56,2825,3.765,2826,2.56,2827,2.56,2828,2.56,2829,2.56,2830,2.56,2831,2.56,2832,2.56,2833,3.765,2834,3.765,2835,3.765,2836,2.56,2837,2.56,2838,2.56,2839,2.56,2840,2.56,2841,2.56,2842,2.56,2843,2.56,2844,2.56,2845,2.56,2846,2.56,2847,2.56,2848,2.56,2849,2.56,2850,2.56,2851,3.765,2852,2.56,2853,2.56,2854,2.56,2855,2.56,2856,2.56,2857,2.56,2858,2.56,2859,4.465,2860,5.246,2861,2.56,2862,2.56,2863,2.56,2864,3.17,2865,2.56,2866,2.56,2867,2.156,2868,2.56,2869,2.56,2870,2.56,2871,2.56,2872,3.765,2873,2.56,2874,2.56,2875,2.56,2876,2.56,2877,2.56,2878,2.56,2879,2.56,2880,2.56,2881,2.56,2882,2.56,2883,2.56,2884,2.56,2885,2.56,2886,3.765,2887,2.56,2888,2.56,2889,2.56,2890,3.765,2891,2.56,2892,2.56,2893,2.56,2894,2.56,2895,2.156,2896,2.56,2897,2.56,2898,4.465,2899,2.56,2900,2.56,2901,3.765,2902,2.56,2903,3.17,2904,2.56,2905,2.56,2906,2.56,2907,2.56,2908,2.56,2909,3.17,2910,2.56,2911,2.56,2912,2.56,2913,2.56,2914,2.56,2915,3.765,2916,2.56,2917,2.56,2918,2.56,2919,2.56,2920,2.56,2921,2.56,2922,2.56,2923,2.56,2924,2.56,2925,2.156,2926,2.56,2927,2.56,2928,2.56,2929,2.56,2930,4.923,2931,2.56,2932,2.56,2933,2.56,2934,2.56,2935,2.56,2936,2.56,2937,2.56,2938,3.765,2939,2.56,2940,2.56,2941,2.56,2942,2.56,2943,2.56,2944,2.56,2945,2.56,2946,2.56,2947,2.56,2948,3.765,2949,2.56,2950,2.56,2951,2.56,2952,2.56,2953,2.56,2954,2.56,2955,2.56,2956,2.56,2957,2.56,2958,2.56,2959,2.56,2960,2.56,2961,2.56,2962,2.56,2963,2.56,2964,2.56,2965,2.56,2966,2.56,2967,2.56,2968,2.56,2969,2.56,2970,2.56,2971,2.56,2972,2.56,2973,2.56,2974,2.56,2975,2.56,2976,2.56,2977,2.56,2978,2.56,2979,2.56,2980,2.56,2981,2.56,2982,2.56,2983,2.56,2984,2.56,2985,2.56,2986,2.56,2987,2.56,2988,2.56,2989,2.56,2990,2.56,2991,2.56,2992,2.56,2993,2.56,2994,2.56,2995,2.56,2996,2.56,2997,2.56,2998,2.56,2999,2.56,3000,2.56,3001,2.56,3002,2.56,3003,2.56,3004,2.56,3005,3.765,3006,2.56,3007,2.56,3008,2.156,3009,2.56,3010,1.889]],["title/coverage.html",[3011,3.81]],["body/coverage.html",[0,0.57,1,2.18,5,0.156,6,2.945,7,2.945,10,2.637,33,0.029,35,0.193,54,0.445,62,0.016,63,0.021,64,0.016,65,2.945,66,3.311,67,3.36,68,2.48,90,2.634,94,0.542,95,0.957,179,2.634,414,2.634,415,3.36,416,3.772,421,2.634,435,2.634,490,2.832,491,1.373,493,3.36,500,2.387,507,1.891,518,2.034,523,1.849,527,2.634,534,2.793,535,2.793,538,2.634,539,3.36,540,3.772,610,2.004,611,3.36,617,2.634,638,2.945,639,3.557,640,3.36,641,2.945,642,3.772,663,2.18,725,2.945,727,2.004,891,2.634,892,3.36,973,3.36,974,3.912,989,2.634,990,2.004,1033,2.945,1034,3.36,1064,2.634,1099,3.723,1100,3.723,1108,2.004,1109,1.476,1211,3.36,1212,3.36,1235,2.945,1236,3.36,1237,2.634,1242,2.18,1243,2.18,1323,3.36,1384,2.945,1543,2.945,1568,2.387,1635,3.36,1687,2.634,1790,3.36,1791,3.36,1807,3.36,1808,3.36,1860,3.36,1907,3.36,2023,2.945,2024,3.772,2035,2.387,2090,2.945,2091,3.36,2250,3.36,2277,2.945,2307,2.634,2308,3.772,2327,3.36,2332,2.945,2342,2.387,2383,2.945,2384,3.36,2525,4.304,2526,4.304,2767,3.36,2925,3.36,3011,3.36,3012,3.991,3013,3.991,3014,6.989,3015,3.991,3016,5.641,3017,5.948,3018,3.991,3019,5.948,3020,3.36,3021,6.149,3022,4.304,3023,3.991,3024,3.991,3025,5.641,3026,3.991,3027,3.991,3028,3.991,3029,3.991,3030,5.112,3031,3.991,3032,3.991,3033,3.991,3034,5.112,3035,3.991,3036,5.112,3037,3.991,3038,3.991,3039,3.991,3040,3.991,3041,5.112,3042,3.991,3043,3.991,3044,3.991,3045,3.991,3046,3.991,3047,3.991,3048,3.991,3049,3.991,3050,5.112,3051,3.991,3052,5.641,3053,3.991,3054,3.991,3055,3.991]],["title/dependencies.html",[3010,2.046,3056,3.359]],["body/dependencies.html",[33,0.028,62,0.022,63,0.025,64,0.022,191,1.189,192,4.495,517,2.68,2376,4.495,3008,4.495,3056,4.495,3057,5.338,3058,5.338,3059,5.338,3060,5.338,3061,5.338,3062,5.338]],["title/index.html",[16,0.134,2419,2.046,2730,2.046]],["body/index.html",[2,0.401,4,0.261,5,0.176,30,1.653,33,0.029,54,0.693,62,0.018,63,0.023,64,0.018,75,1.791,94,0.93,95,1.49,99,1.441,151,1.791,178,0.749,197,0.766,209,3.563,248,2.971,254,2.364,399,2.554,491,2.281,494,2.163,498,3.639,500,3.296,507,2.038,509,1.896,519,2.194,521,2.971,526,2.103,557,2.459,588,3.321,687,1.249,727,3.255,803,2.459,913,2.26,929,2.767,1043,2.692,1074,2.971,1076,3.789,1101,4.641,1229,2.971,1237,3.933,2025,3.321,2211,4.067,2350,4.641,2351,3.789,2698,4.641,2864,4.641,2867,4.641,2895,5.017,2903,3.789,2909,3.789,3010,3.321,3063,4.501,3064,4.501,3065,4.501,3066,4.501,3067,4.501,3068,4.501,3069,4.501,3070,5.512,3071,4.501,3072,5.512,3073,4.501,3074,4.501,3075,4.501,3076,4.501,3077,5.512,3078,4.501,3079,4.501,3080,4.501,3081,4.501,3082,4.501,3083,4.501,3084,4.501,3085,5.512,3086,4.501,3087,4.501,3088,4.501,3089,4.501,3090,4.501,3091,4.501,3092,4.501,3093,4.501,3094,4.501]],["title/modules.html",[3095,3.81]],["body/modules.html",[33,0.025,62,0.022,63,0.025,64,0.022,3095,4.571]],["title/overview.html",[3096,3.81]],["body/overview.html",[2,0.481,33,0.025,62,0.022,63,0.025,64,0.022,221,3.233,492,3.569,3096,4.552,3097,5.406]],["title/miscellaneous/typealiases.html",[3098,1.83,3099,3.99]],["body/miscellaneous/typealiases.html",[6,3.854,7,4.444,16,0.253,33,0.028,35,0.291,38,5.071,45,1.341,47,2.622,62,0.021,63,0.025,64,0.021,151,2.079,491,1.797,518,2.397,523,2.42,534,2.854,535,2.854,639,3.124,710,2.079,785,3.448,1384,4.444,1425,5.071,1452,4.398,1453,3.854,1454,4.398,1485,3.448,3098,3.448,3100,5.224,3101,5.224,3102,5.224]],["title/miscellaneous/variables.html",[3098,1.83,3103,3.359]],["body/miscellaneous/variables.html",[5,0.252,10,1.912,12,1.004,16,0.216,30,1.237,33,0.029,35,0.307,39,0.69,50,0.723,54,0.744,62,0.018,63,0.022,64,0.018,68,2.026,94,0.605,95,1.485,99,1.427,161,3.753,169,1.52,173,2.238,197,0.764,247,2.238,312,1.069,358,3.753,377,2.065,399,2.065,429,1.533,435,3.617,441,1.12,506,2.238,507,2.194,509,1.533,510,3.289,515,3.277,522,2.065,526,1.427,665,2.065,974,3.277,1053,2.435,1064,3.617,1075,3.617,1288,3.753,1289,3.289,1427,2.666,1485,2.942,2024,3.289,2028,3.753,2035,3.701,2042,3.289,2054,3.753,2277,4.043,2308,3.289,2323,3.753,2331,3.753,2332,4.043,2593,4.614,3020,3.753,3022,3.753,3098,2.942,3103,3.753,3104,4.458,3105,4.458,3106,5.48,3107,4.458,3108,5.933,3109,4.458,3110,5.48,3111,4.458,3112,4.458,3113,4.458,3114,4.458,3115,6.19,3116,5.48,3117,4.458,3118,4.458,3119,5.48,3120,4.458,3121,4.458,3122,4.458,3123,4.458,3124,5.48,3125,4.458,3126,4.458,3127,4.458,3128,4.458,3129,4.458,3130,4.458,3131,4.458,3132,4.458,3133,4.458,3134,4.458,3135,4.458,3136,4.458,3137,4.458,3138,4.458,3139,4.458,3140,4.458,3141,4.458,3142,4.458,3143,4.458,3144,4.458,3145,4.458,3146,4.458]]],"invertedIndex":[["",{"_index":33,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":212,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["0.0",{"_index":777,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["0.0002",{"_index":1173,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["0.01",{"_index":277,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixMenuUI.html":{}}}],["0.05",{"_index":1591,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["0.1",{"_index":472,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{}}}],["0.127.0",{"_index":3062,"title":{},"body":{"dependencies.html":{}}}],["0.25",{"_index":233,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["0.3",{"_index":1717,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0.5",{"_index":1175,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["0.7",{"_index":485,"title":{},"body":{"classes/CMSObjects.html":{}}}],["0.7.7",{"_index":3058,"title":{},"body":{"dependencies.html":{}}}],["0.75",{"_index":234,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["000",{"_index":2264,"title":{},"body":{"classes/StateManager.html":{}}}],["000000",{"_index":763,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["01",{"_index":2906,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":2871,"title":{},"body":{"changelog.html":{}}}],["029d526",{"_index":2951,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":2839,"title":{},"body":{"changelog.html":{}}}],["03a1de4",{"_index":2832,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":2741,"title":{},"body":{"changelog.html":{}}}],["04dc545",{"_index":2964,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":3005,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":2932,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":2972,"title":{},"body":{"changelog.html":{}}}],["0837334",{"_index":2893,"title":{},"body":{"changelog.html":{}}}],["0980379",{"_index":2978,"title":{},"body":{"changelog.html":{}}}],["0a26fea",{"_index":2975,"title":{},"body":{"changelog.html":{}}}],["0b2dd8a",{"_index":2837,"title":{},"body":{"changelog.html":{}}}],["0b95e5b",{"_index":2763,"title":{},"body":{"changelog.html":{}}}],["0x000000",{"_index":827,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["0x000fff",{"_index":2612,"title":{},"body":{"interfaces/Window.html":{}}}],["0x8c8c8c",{"_index":3082,"title":{},"body":{"index.html":{}}}],["0xafafaf",{"_index":873,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["0xffffff",{"_index":484,"title":{},"body":{"classes/CMSObjects.html":{}}}],["1",{"_index":225,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["1.0",{"_index":765,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["1.0.1",{"_index":3008,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["1.0.2",{"_index":3004,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":2971,"title":{},"body":{"changelog.html":{}}}],["1.2.0",{"_index":2929,"title":{},"body":{"changelog.html":{}}}],["1.3.0",{"_index":2905,"title":{},"body":{"changelog.html":{}}}],["1.4.0",{"_index":2870,"title":{},"body":{"changelog.html":{}}}],["1.5.0",{"_index":2838,"title":{},"body":{"changelog.html":{}}}],["1.6.0",{"_index":2756,"title":{},"body":{"changelog.html":{}}}],["1.7.0",{"_index":2739,"title":{},"body":{"changelog.html":{}}}],["1/1",{"_index":3021,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":155,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/InfoLogger.html":{},"classes/PhoenixMenuUI.html":{},"classes/State.html":{},"changelog.html":{}}}],["100",{"_index":3014,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":168,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["10000",{"_index":339,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["11",{"_index":733,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"changelog.html":{}}}],["11/11",{"_index":3042,"title":{},"body":{"coverage.html":{}}}],["1100",{"_index":1697,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["11000",{"_index":124,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["12",{"_index":2931,"title":{},"body":{"changelog.html":{}}}],["1261358",{"_index":2999,"title":{},"body":{"changelog.html":{}}}],["13/13",{"_index":3046,"title":{},"body":{"coverage.html":{}}}],["15/15",{"_index":3040,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":2872,"title":{},"body":{"changelog.html":{}}}],["16/16",{"_index":3049,"title":{},"body":{"coverage.html":{}}}],["17.4.0",{"_index":3057,"title":{},"body":{"dependencies.html":{}}}],["17/17",{"_index":3041,"title":{},"body":{"coverage.html":{}}}],["17909eb",{"_index":2995,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":2757,"title":{},"body":{"changelog.html":{}}}],["18f8db2",{"_index":2954,"title":{},"body":{"changelog.html":{}}}],["1906976",{"_index":2993,"title":{},"body":{"changelog.html":{}}}],["1975d70",{"_index":2950,"title":{},"body":{"changelog.html":{}}}],["1].oncomplete",{"_index":369,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["2",{"_index":584,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{}}}],["2.0",{"_index":587,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["2/2",{"_index":3016,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1583,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"classes/VRManager.html":{}}}],["20/20",{"_index":3036,"title":{},"body":{"coverage.html":{}}}],["2020",{"_index":2930,"title":{},"body":{"changelog.html":{}}}],["2021",{"_index":2740,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":2742,"title":{},"body":{"changelog.html":{}}}],["2219a3e",{"_index":2888,"title":{},"body":{"changelog.html":{}}}],["22a1ec8",{"_index":2956,"title":{},"body":{"changelog.html":{}}}],["23/23",{"_index":3052,"title":{},"body":{"coverage.html":{}}}],["236bdf4",{"_index":2768,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":219,"title":{},"body":{"classes/AnimationsManager.html":{},"changelog.html":{}}}],["24/24",{"_index":3034,"title":{},"body":{"coverage.html":{}}}],["257",{"_index":2793,"title":{},"body":{"changelog.html":{}}}],["25b2a9d",{"_index":2960,"title":{},"body":{"changelog.html":{}}}],["266af04",{"_index":2847,"title":{},"body":{"changelog.html":{}}}],["27/27",{"_index":3039,"title":{},"body":{"coverage.html":{}}}],["28/11/2020",{"_index":2445,"title":{},"body":{"classes/VRManager.html":{}}}],["28/28",{"_index":3033,"title":{},"body":{"coverage.html":{}}}],["29/08/2020",{"_index":2440,"title":{},"body":{"classes/VRManager.html":{}}}],["29093a2",{"_index":2826,"title":{},"body":{"changelog.html":{}}}],["2e16371",{"_index":2824,"title":{},"body":{"changelog.html":{}}}],["2fa310f",{"_index":2868,"title":{},"body":{"changelog.html":{}}}],["2rem",{"_index":732,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["3",{"_index":221,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"overview.html":{}}}],["3.0",{"_index":608,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["3.3333",{"_index":2247,"title":{},"body":{"classes/State.html":{}}}],["3.6.0",{"_index":3060,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":3025,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":410,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{}}}],["300",{"_index":393,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["3000",{"_index":316,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["30b0383",{"_index":2961,"title":{},"body":{"changelog.html":{}}}],["30b5160",{"_index":2822,"title":{},"body":{"changelog.html":{}}}],["32",{"_index":380,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["34/34",{"_index":3027,"title":{},"body":{"coverage.html":{}}}],["3475836",{"_index":2875,"title":{},"body":{"changelog.html":{}}}],["359d353",{"_index":2849,"title":{},"body":{"changelog.html":{}}}],["36/36",{"_index":3045,"title":{},"body":{"coverage.html":{}}}],["37",{"_index":3097,"title":{},"body":{"overview.html":{}}}],["3756330",{"_index":2892,"title":{},"body":{"changelog.html":{}}}],["37df19f",{"_index":2935,"title":{},"body":{"changelog.html":{}}}],["38/38",{"_index":3030,"title":{},"body":{"coverage.html":{}}}],["3918159",{"_index":2980,"title":{},"body":{"changelog.html":{}}}],["399ac77",{"_index":3007,"title":{},"body":{"changelog.html":{}}}],["3b1991c",{"_index":2844,"title":{},"body":{"changelog.html":{}}}],["3ce675f",{"_index":2884,"title":{},"body":{"changelog.html":{}}}],["3d",{"_index":1001,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["3f6367f",{"_index":2887,"title":{},"body":{"changelog.html":{}}}],["4/4",{"_index":3024,"title":{},"body":{"coverage.html":{}}}],["4000",{"_index":677,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["40bbba0",{"_index":2781,"title":{},"body":{"changelog.html":{}}}],["4262a1b",{"_index":2967,"title":{},"body":{"changelog.html":{}}}],["43/43",{"_index":3053,"title":{},"body":{"coverage.html":{}}}],["455f536",{"_index":2802,"title":{},"body":{"changelog.html":{}}}],["45a0123",{"_index":2829,"title":{},"body":{"changelog.html":{}}}],["4764196",{"_index":2937,"title":{},"body":{"changelog.html":{}}}],["48130b2",{"_index":2969,"title":{},"body":{"changelog.html":{}}}],["4b10452",{"_index":2970,"title":{},"body":{"changelog.html":{}}}],["4f80bd6",{"_index":2874,"title":{},"body":{"changelog.html":{}}}],["5/5",{"_index":3023,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1712,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/VRManager.html":{}}}],["500",{"_index":217,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["5000",{"_index":157,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["50c2584",{"_index":2785,"title":{},"body":{"changelog.html":{}}}],["5139c6e",{"_index":2918,"title":{},"body":{"changelog.html":{}}}],["5283e9a",{"_index":2981,"title":{},"body":{"changelog.html":{}}}],["53/53",{"_index":3015,"title":{},"body":{"coverage.html":{}}}],["5389282",{"_index":2817,"title":{},"body":{"changelog.html":{}}}],["56f94f0",{"_index":2797,"title":{},"body":{"changelog.html":{}}}],["56ff275",{"_index":2831,"title":{},"body":{"changelog.html":{}}}],["5743adc",{"_index":2827,"title":{},"body":{"changelog.html":{}}}],["57e438f",{"_index":2794,"title":{},"body":{"changelog.html":{}}}],["5a562ab",{"_index":2791,"title":{},"body":{"changelog.html":{}}}],["5bdc562",{"_index":2749,"title":{},"body":{"changelog.html":{}}}],["5ea04f1",{"_index":2866,"title":{},"body":{"changelog.html":{}}}],["5f0f942",{"_index":2965,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":264,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["6/6",{"_index":3019,"title":{},"body":{"coverage.html":{}}}],["60269f7",{"_index":2902,"title":{},"body":{"changelog.html":{}}}],["61/61",{"_index":3051,"title":{},"body":{"coverage.html":{}}}],["612205c",{"_index":3000,"title":{},"body":{"changelog.html":{}}}],["6486982",{"_index":2818,"title":{},"body":{"changelog.html":{}}}],["66cbbc0",{"_index":2771,"title":{},"body":{"changelog.html":{}}}],["68cd7ad",{"_index":2819,"title":{},"body":{"changelog.html":{}}}],["6943f79",{"_index":2927,"title":{},"body":{"changelog.html":{}}}],["69d3f75",{"_index":2962,"title":{},"body":{"changelog.html":{}}}],["6a834e8",{"_index":2774,"title":{},"body":{"changelog.html":{}}}],["6ef17d0",{"_index":2798,"title":{},"body":{"changelog.html":{}}}],["7/7",{"_index":3018,"title":{},"body":{"coverage.html":{}}}],["73b7c27",{"_index":2976,"title":{},"body":{"changelog.html":{}}}],["7528ee0",{"_index":2776,"title":{},"body":{"changelog.html":{}}}],["7632a18",{"_index":2803,"title":{},"body":{"changelog.html":{}}}],["789da8b",{"_index":2926,"title":{},"body":{"changelog.html":{}}}],["79e6d7c",{"_index":2900,"title":{},"body":{"changelog.html":{}}}],["7bcd7ba",{"_index":2853,"title":{},"body":{"changelog.html":{}}}],["7d1ca22",{"_index":3003,"title":{},"body":{"changelog.html":{}}}],["7d606b2",{"_index":2928,"title":{},"body":{"changelog.html":{}}}],["7d90d72",{"_index":2789,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":356,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["8/8",{"_index":3028,"title":{},"body":{"coverage.html":{}}}],["854e543",{"_index":2804,"title":{},"body":{"changelog.html":{}}}],["85d4a14",{"_index":2799,"title":{},"body":{"changelog.html":{}}}],["8ba94e7",{"_index":2920,"title":{},"body":{"changelog.html":{}}}],["8cbcaa5",{"_index":2843,"title":{},"body":{"changelog.html":{}}}],["8d7b160",{"_index":2891,"title":{},"body":{"changelog.html":{}}}],["8e2eff4",{"_index":2836,"title":{},"body":{"changelog.html":{}}}],["8f3e8e1",{"_index":2939,"title":{},"body":{"changelog.html":{}}}],["9/9",{"_index":3017,"title":{},"body":{"coverage.html":{}}}],["9474565",{"_index":2966,"title":{},"body":{"changelog.html":{}}}],["947f6bf",{"_index":2958,"title":{},"body":{"changelog.html":{}}}],["9540af5",{"_index":2856,"title":{},"body":{"changelog.html":{}}}],["9e3dc20",{"_index":3002,"title":{},"body":{"changelog.html":{}}}],["9eb21f5",{"_index":2986,"title":{},"body":{"changelog.html":{}}}],["9efd9ca",{"_index":2992,"title":{},"body":{"changelog.html":{}}}],["a474af2",{"_index":2865,"title":{},"body":{"changelog.html":{}}}],["a6a1c19",{"_index":2934,"title":{},"body":{"changelog.html":{}}}],["a8a8a8",{"_index":860,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["a8f8353",{"_index":2845,"title":{},"body":{"changelog.html":{}}}],["ab8feb4",{"_index":2942,"title":{},"body":{"changelog.html":{}}}],["ability",{"_index":2704,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["aborting",{"_index":1742,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["absolute",{"_index":731,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ac0c4f1",{"_index":2850,"title":{},"body":{"changelog.html":{}}}],["acc",{"_index":1371,"title":{},"body":{"classes/LoadingManager.html":{}}}],["access",{"_index":2689,"title":{},"body":{"interfaces/Window.html":{}}}],["accessing",{"_index":2054,"title":{},"body":{"classes/ScriptLoader.html":{},"miscellaneous/variables.html":{}}}],["active",{"_index":9,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["activecamera",{"_index":88,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/StateManager.html":{}}}],["activeobject",{"_index":2092,"title":{},"body":{"classes/SelectionManager.html":{}}}],["activevariable",{"_index":1,"title":{"classes/ActiveVariable.html":{}},"body":{"classes/ActiveVariable.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["activevariable(0",{"_index":2262,"title":{},"body":{"classes/StateManager.html":{}}}],["activevariable(false",{"_index":2263,"title":{},"body":{"classes/StateManager.html":{}}}],["actual",{"_index":261,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["add",{"_index":687,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["add('could",{"_index":2367,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["add(cut",{"_index":843,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(data",{"_index":1223,"title":{},"body":{"classes/InfoLogger.html":{}}}],["add(k1.clone().multiplyscalar(h2",{"_index":1147,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k1.clone().multiplyscalar(half_h",{"_index":1150,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k2",{"_index":1180,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k2.clone().multiplyscalar(2",{"_index":1184,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k2.clone().multiplyscalar(half_h",{"_index":1154,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3",{"_index":1181,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3.clone().multiplyscalar(2",{"_index":1185,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3.clone().multiplyscalar(h",{"_index":1160,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3.clone().multiplyscalar(h2",{"_index":1157,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k4",{"_index":1186,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(state.dir.clone().multiplyscalar(h",{"_index":1156,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(state.dir.clone().multiplyscalar(half_h",{"_index":1146,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(this.guiparameters.eventdata",{"_index":815,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(this.guiparameters.geometries",{"_index":749,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(this.guiparameters.labels",{"_index":863,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(this.guiparameters[collectionname",{"_index":833,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(this.guiparameters[labelid",{"_index":877,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(this.guiparameters[name",{"_index":776,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["addchild",{"_index":1394,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addchild(name",{"_index":1422,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addcollection",{"_index":652,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{}}}],["addcollection(objectcollection",{"_index":1268,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["addcollection(typefolder",{"_index":682,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addcolor(this.guiparameters.labels",{"_index":868,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["addcolor(this.guiparameters[collectionname",{"_index":836,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["addcolor(this.guiparameters[labelid",{"_index":881,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["addcolor(this.guiparameters[name",{"_index":772,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["addconfig",{"_index":1395,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addconfig('button",{"_index":1592,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{}}}],["addconfig('checkbox",{"_index":1576,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["addconfig('color",{"_index":1589,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["addconfig('label",{"_index":1610,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["addconfig('slider",{"_index":1579,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["addconfig(type",{"_index":1424,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["added",{"_index":691,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["addeventdatafolder",{"_index":653,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addeventdatatypefolder",{"_index":654,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addeventdatatypefolder(typename",{"_index":697,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addeventlistener('click",{"_index":2175,"title":{},"body":{"classes/SelectionManager.html":{}}}],["addeventlistener('mousemove",{"_index":2173,"title":{},"body":{"classes/SelectionManager.html":{}}}],["addeventlistener('touchstart",{"_index":2177,"title":{},"body":{"classes/SelectionManager.html":{}}}],["addface3",{"_index":439,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('back_1",{"_index":453,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('back_3",{"_index":456,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('back_4",{"_index":462,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('front_1",{"_index":446,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('front_2",{"_index":460,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('front_3",{"_index":449,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addgeometry",{"_index":655,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addgeometry(name",{"_index":701,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addgeomfolder",{"_index":656,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["adding",{"_index":995,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["addlabel",{"_index":657,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addlabel(labelid",{"_index":708,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addlabelsfolder",{"_index":658,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addlabelsfolder(configfunctions",{"_index":713,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addlabeltoeventobject",{"_index":977,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["addlabeltoeventobject(label",{"_index":984,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["addlabeltoobject",{"_index":2724,"title":{},"body":{"interfaces/Window.html":{}}}],["addloadableitem",{"_index":1329,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadableitem(id",{"_index":1343,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistener",{"_index":1330,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistener(callback",{"_index":1345,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistenerwithcheck",{"_index":1331,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistenerwithcheck(callback",{"_index":1348,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addobjecttype",{"_index":1245,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["addobjecttype(object",{"_index":1284,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["addoutlinepassforselection",{"_index":902,"title":{},"body":{"classes/EffectsManager.html":{}}}],["addprogresslistener",{"_index":1332,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addprogresslistener(callback",{"_index":1350,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addrenderer",{"_index":1912,"title":{},"body":{"classes/RendererManager.html":{}}}],["addrenderer(renderer",{"_index":1935,"title":{},"body":{"classes/RendererManager.html":{}}}],["adds",{"_index":704,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["again",{"_index":289,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["aliases",{"_index":3100,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alleventdata",{"_index":352,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alleventdata.getobjectbyname('track",{"_index":401,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alleventdata.traverse((eventobject",{"_index":376,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alleventdata.visible",{"_index":408,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["allfacepositions",{"_index":438,"title":{},"body":{"classes/CMSObjects.html":{}}}],["allfacepositions.concat",{"_index":442,"title":{},"body":{"classes/CMSObjects.html":{}}}],["allow",{"_index":505,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["allowcustomvalue",{"_index":1581,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["allowed",{"_index":626,"title":{},"body":{"classes/Cut.html":{}}}],["allowing",{"_index":1044,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["allowselection(selectedobject",{"_index":2702,"title":{},"body":{"interfaces/Window.html":{}}}],["allowurloptions",{"_index":495,"title":{},"body":{"interfaces/Configuration.html":{}}}],["allscripts",{"_index":2059,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["alltweens",{"_index":241,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(animationspheretween",{"_index":342,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(eventobjecttween",{"_index":272,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(scaletween",{"_index":294,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(tween",{"_index":366,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens[0].onstart",{"_index":343,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens[alltweens.length",{"_index":368,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["along",{"_index":158,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{}}}],["alongaxisposition",{"_index":211,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alpha",{"_index":2007,"title":{},"body":{"classes/RendererManager.html":{}}}],["already",{"_index":809,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/ScriptLoader.html":{}}}],["always",{"_index":1867,"title":{},"body":{"classes/RKHelper.html":{},"changelog.html":{}}}],["ambientlight",{"_index":2153,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ambientlight().type",{"_index":2160,"title":{},"body":{"classes/SelectionManager.html":{}}}],["angle",{"_index":220,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CoordinateHelper.html":{},"classes/PresetView.html":{},"classes/StateManager.html":{}}}],["angular",{"_index":2903,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["animate",{"_index":104,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animateclippingwithcollision",{"_index":77,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animateclippingwithcollision(tweenduration",{"_index":100,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateevent",{"_index":78,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateevent(tweenduration",{"_index":116,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithclipping",{"_index":79,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithclipping(tweenduration",{"_index":121,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithcollision",{"_index":80,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithcollision(tweenduration",{"_index":128,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animatethroughevent",{"_index":81,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animatethroughevent(startpos",{"_index":130,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animatewithcollision",{"_index":82,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animatewithcollision(animationfunction",{"_index":141,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animating",{"_index":165,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animation",{"_index":71,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["animationclipplane",{"_index":363,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationclipplane.constant",{"_index":364,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationclipplanes",{"_index":357,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationfunction",{"_index":145,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationfunction(tweenduration",{"_index":411,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animations",{"_index":114,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animationsmanager",{"_index":65,"title":{"classes/AnimationsManager.html":{}},"body":{"classes/AnimationsManager.html":{},"coverage.html":{}}}],["animationsphere",{"_index":237,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretween",{"_index":314,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretween.chain(animationspheretweenclone",{"_index":341,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretween.onupdate(onanimationsphereupdate",{"_index":336,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretweenclone",{"_index":338,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretweenclone.oncomplete",{"_index":347,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretweenclone.onupdate(onanimationsphereupdate",{"_index":340,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["another",{"_index":2996,"title":{},"body":{"changelog.html":{}}}],["antialias",{"_index":926,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"changelog.html":{}}}],["antialiasing",{"_index":898,"title":{},"body":{"classes/EffectsManager.html":{},"changelog.html":{}}}],["antialiasrender",{"_index":903,"title":{},"body":{"classes/EffectsManager.html":{}}}],["antialiasrender(scene",{"_index":934,"title":{},"body":{"classes/EffectsManager.html":{}}}],["any).geometry",{"_index":322,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["any)?.material.color",{"_index":405,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["any)?.material?.color",{"_index":404,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["any)?.xr",{"_index":2449,"title":{},"body":{"classes/VRManager.html":{}}}],["any,typefolderpm",{"_index":1286,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["api",{"_index":3065,"title":{},"body":{"index.html":{}}}],["app",{"_index":2758,"title":{},"body":{"changelog.html":{}}}],["appended",{"_index":2051,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["application",{"_index":3069,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":3116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applied",{"_index":375,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{}}}],["applies",{"_index":564,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["apply",{"_index":1430,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["applyconfigstate",{"_index":1396,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["applyconfigstate(config",{"_index":1428,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["applyeventoptions",{"_index":2310,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyeventoptions(defaulteventpath",{"_index":2316,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyhidewidgetsoptions",{"_index":2311,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applying",{"_index":2938,"title":{},"body":{"changelog.html":{}}}],["applyoptions",{"_index":2312,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["archive",{"_index":2855,"title":{},"body":{"changelog.html":{}}}],["around",{"_index":2432,"title":{},"body":{"classes/VRManager.html":{}}}],["array",{"_index":175,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["array.from",{"_index":301,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["array.isarray(first",{"_index":1739,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["array.isarray(hitsparams",{"_index":1733,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["arraybuffer",{"_index":2628,"title":{},"body":{"interfaces/Window.html":{}}}],["arrays",{"_index":1745,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{}}}],["aspects",{"_index":2536,"title":{},"body":{"interfaces/Window.html":{}}}],["assets/preset",{"_index":1805,"title":{},"body":{"classes/PresetView.html":{}}}],["assign",{"_index":2907,"title":{},"body":{"changelog.html":{}}}],["associated",{"_index":1020,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["async",{"_index":2029,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{}}}],["atlas",{"_index":552,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["atlasquaternion",{"_index":544,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["attach",{"_index":716,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["attempt",{"_index":2744,"title":{},"body":{"changelog.html":{}}}],["attribute",{"_index":614,"title":{},"body":{"classes/Cut.html":{},"classes/ScriptLoader.html":{},"changelog.html":{}}}],["attributename",{"_index":2201,"title":{},"body":{"classes/SelectionManager.html":{}}}],["attributes",{"_index":1743,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["attributevalue",{"_index":2202,"title":{},"body":{"classes/SelectionManager.html":{}}}],["available",{"_index":1937,"title":{},"body":{"classes/RendererManager.html":{},"changelog.html":{}}}],["available/created",{"_index":1934,"title":{},"body":{"classes/RendererManager.html":{}}}],["averageprogress",{"_index":1375,"title":{},"body":{"classes/LoadingManager.html":{}}}],["avoid",{"_index":1675,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["await",{"_index":2065,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{}}}],["axes",{"_index":160,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["axeshelper",{"_index":2154,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axeshelper().type",{"_index":2162,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axis",{"_index":210,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{}}}],["azimuthal",{"_index":589,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["b",{"_index":1977,"title":{},"body":{"classes/RendererManager.html":{}}}],["b10bb7a",{"_index":2788,"title":{},"body":{"changelog.html":{}}}],["b46c49f",{"_index":2989,"title":{},"body":{"changelog.html":{}}}],["b52282f",{"_index":2814,"title":{},"body":{"changelog.html":{}}}],["b7a324a",{"_index":2808,"title":{},"body":{"changelog.html":{}}}],["b7e8da0",{"_index":2908,"title":{},"body":{"changelog.html":{}}}],["b8e88b8",{"_index":2778,"title":{},"body":{"changelog.html":{}}}],["b_first",{"_index":1133,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["b_last",{"_index":1128,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["b_middle",{"_index":1127,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["back",{"_index":452,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["back_1",{"_index":458,"title":{},"body":{"classes/CMSObjects.html":{}}}],["back_2",{"_index":454,"title":{},"body":{"classes/CMSObjects.html":{}}}],["back_3",{"_index":455,"title":{},"body":{"classes/CMSObjects.html":{}}}],["back_4",{"_index":457,"title":{},"body":{"classes/CMSObjects.html":{}}}],["bbcdf0c",{"_index":2811,"title":{},"body":{"changelog.html":{}}}],["bbea6b0",{"_index":2760,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":2125,"title":{},"body":{"classes/SelectionManager.html":{}}}],["being",{"_index":1228,"title":{},"body":{"classes/InfoLogger.html":{},"interfaces/Window.html":{}}}],["better",{"_index":1737,"title":{},"body":{"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["big",{"_index":2982,"title":{},"body":{"changelog.html":{}}}],["bind",{"_index":2780,"title":{},"body":{"changelog.html":{}}}],["blob",{"_index":3136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blob([data",{"_index":3137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bloom",{"_index":897,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["boolean",{"_index":503,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["both",{"_index":1894,"title":{},"body":{"classes/RKHelper.html":{},"interfaces/Window.html":{}}}],["bottom",{"_index":461,"title":{},"body":{"classes/CMSObjects.html":{},"classes/URLOptionsManager.html":{}}}],["bounded",{"_index":2453,"title":{},"body":{"classes/VRManager.html":{}}}],["bounds",{"_index":1201,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["box",{"_index":479,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffer",{"_index":465,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffer.attributes.position",{"_index":466,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffer.computevertexnormals",{"_index":468,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffergeometry",{"_index":1684,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["boxedges",{"_index":481,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject",{"_index":469,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.name",{"_index":476,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.userdata",{"_index":474,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.uuid",{"_index":489,"title":{},"body":{"classes/CMSObjects.html":{}}}],["browser",{"_index":2815,"title":{},"body":{"changelog.html":{}}}],["browsers",{"_index":1985,"title":{},"body":{"classes/RendererManager.html":{}}}],["bufferattribute",{"_index":188,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["buffergeometry",{"_index":181,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["buffergeometry().setfrompoints",{"_index":2501,"title":{},"body":{"classes/VRManager.html":{}}}],["buffergeometry().setfrompoints(points",{"_index":1778,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["bug",{"_index":2743,"title":{},"body":{"changelog.html":{}}}],["bugged",{"_index":2991,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":2211,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["build:bundlethis",{"_index":3086,"title":{},"body":{"index.html":{}}}],["buildeventdata",{"_index":978,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["buildeventdata(eventdata",{"_index":987,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["buildeventdatafromjson(eventdata",{"_index":2574,"title":{},"body":{"interfaces/Window.html":{}}}],["buildgeometryfromparameters",{"_index":2695,"title":{},"body":{"interfaces/Window.html":{}}}],["buildgeometryfromparameters(parameters",{"_index":2655,"title":{},"body":{"interfaces/Window.html":{}}}],["building",{"_index":3091,"title":{},"body":{"index.html":{}}}],["builds",{"_index":2573,"title":{},"body":{"interfaces/Window.html":{}}}],["bump",{"_index":3009,"title":{},"body":{"changelog.html":{}}}],["bundle",{"_index":2895,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["bundled",{"_index":3084,"title":{},"body":{"index.html":{}}}],["button",{"_index":1453,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{},"miscellaneous/typealiases.html":{}}}],["buttons",{"_index":2280,"title":{},"body":{"classes/StateManager.html":{}}}],["c1",{"_index":2510,"title":{},"body":{"classes/VRManager.html":{}}}],["c36a222",{"_index":2940,"title":{},"body":{"changelog.html":{}}}],["c39ecd3",{"_index":2953,"title":{},"body":{"changelog.html":{}}}],["c7a35db",{"_index":2983,"title":{},"body":{"changelog.html":{}}}],["c9781e5",{"_index":2766,"title":{},"body":{"changelog.html":{}}}],["c991e54",{"_index":2899,"title":{},"body":{"changelog.html":{}}}],["c9d4880",{"_index":2881,"title":{},"body":{"changelog.html":{}}}],["ca3cc2f",{"_index":2806,"title":{},"body":{"changelog.html":{}}}],["calc",{"_index":1889,"title":{},"body":{"classes/RKHelper.html":{}}}],["calculated",{"_index":1202,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["call",{"_index":41,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["callback",{"_index":47,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"miscellaneous/typealiases.html":{}}}],["callback(averageprogress",{"_index":1377,"title":{},"body":{"classes/LoadingManager.html":{}}}],["callback(eventdata",{"_index":2582,"title":{},"body":{"interfaces/Window.html":{}}}],["callback(eventkeys",{"_index":2572,"title":{},"body":{"interfaces/Window.html":{}}}],["callback(updatedvalue",{"_index":60,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["callbackfunction",{"_index":38,"title":{},"body":{"classes/ActiveVariable.html":{},"miscellaneous/typealiases.html":{}}}],["callbacks",{"_index":19,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/LoadingManager.html":{},"interfaces/Window.html":{}}}],["called",{"_index":2529,"title":{},"body":{"interfaces/Window.html":{}}}],["calling",{"_index":1432,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{}}}],["calocluster",{"_index":2769,"title":{},"body":{"changelog.html":{}}}],["caloclusters",{"_index":1289,"title":{},"body":{"classes/LHCbLoader.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["camera",{"_index":89,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["cameragroup",{"_index":2386,"title":{},"body":{"classes/VRManager.html":{}}}],["camerapos",{"_index":1795,"title":{},"body":{"classes/PresetView.html":{}}}],["cameraposition",{"_index":2285,"title":{},"body":{"classes/StateManager.html":{}}}],["cameras",{"_index":2658,"title":{},"body":{"interfaces/Window.html":{}}}],["canvas",{"_index":734,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["canvas.appendchild(this.gui.domelement",{"_index":737,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["canvaswrapper",{"_index":1993,"title":{},"body":{"classes/RendererManager.html":{}}}],["canvaswrapper.appendchild(this.getmainrenderer().domelement",{"_index":2003,"title":{},"body":{"classes/RendererManager.html":{}}}],["canvaswrapper.offsetheight",{"_index":1998,"title":{},"body":{"classes/RendererManager.html":{}}}],["canvaswrapper.offsetwidth",{"_index":1995,"title":{},"body":{"classes/RendererManager.html":{}}}],["care",{"_index":994,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["cartesian",{"_index":562,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["case",{"_index":1699,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["catch",{"_index":2840,"title":{},"body":{"changelog.html":{}}}],["catch((error",{"_index":2365,"title":{},"body":{"classes/URLOptionsManager.html":{},"classes/VRManager.html":{}}}],["catmullromcurve3",{"_index":1680,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cb2ec40",{"_index":2897,"title":{},"body":{"changelog.html":{}}}],["cdn",{"_index":2867,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["cfb1b6a",{"_index":2990,"title":{},"body":{"changelog.html":{}}}],["cg",{"_index":2512,"title":{},"body":{"classes/VRManager.html":{}}}],["chaining",{"_index":2898,"title":{},"body":{"changelog.html":{}}}],["chamber",{"_index":428,"title":{},"body":{"classes/CMSObjects.html":{}}}],["change",{"_index":14,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["changeable",{"_index":680,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["changed",{"_index":13,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["changelog",{"_index":2731,"title":{"changelog.html":{}},"body":{}}],["changes",{"_index":2110,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["changing",{"_index":249,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["charge",{"_index":1113,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["check",{"_index":253,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["checkbox",{"_index":1452,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["checked",{"_index":1940,"title":{},"body":{"classes/RendererManager.html":{}}}],["checking",{"_index":1168,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["chi2",{"_index":1814,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["child",{"_index":1411,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.findintree(name",{"_index":1534,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.name",{"_index":1541,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.nodelevel",{"_index":1463,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.parent",{"_index":1462,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.toggleselfanddescendants(child.togglestate",{"_index":1484,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.toggleselfanddescendants(value",{"_index":1483,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.togglestate",{"_index":1482,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childindex",{"_index":1466,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["children",{"_index":1385,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["childrenactive",{"_index":1386,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childrentogglestate",{"_index":1387,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate",{"_index":1524,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate.name",{"_index":1529,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate.nodelevel",{"_index":1531,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["class",{"_index":0,"title":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{}},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"index.html":{},"overview.html":{}}}],["cleanup",{"_index":2772,"title":{},"body":{"changelog.html":{}}}],["clear",{"_index":718,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["cleardatgui",{"_index":659,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["clearing",{"_index":2578,"title":{},"body":{"interfaces/Window.html":{}}}],["clearinterval(intervalid",{"_index":2517,"title":{},"body":{"classes/VRManager.html":{}}}],["clearphoenixmenu",{"_index":1546,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["click",{"_index":2120,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicked",{"_index":2216,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicking",{"_index":2706,"title":{},"body":{"interfaces/Window.html":{}}}],["clipping",{"_index":107,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["clippingangle",{"_index":2252,"title":{},"body":{"classes/StateManager.html":{}}}],["clippingconstant",{"_index":122,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["clippingenabled",{"_index":2253,"title":{},"body":{"classes/StateManager.html":{}}}],["clone",{"_index":1145,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["cloned",{"_index":1674,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/VRManager.html":{}}}],["close",{"_index":2748,"title":{},"body":{"changelog.html":{}}}],["closes",{"_index":2792,"title":{},"body":{"changelog.html":{}}}],["closest",{"_index":2233,"title":{},"body":{"classes/SelectionManager.html":{}}}],["cluster",{"_index":1646,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusterparams",{"_index":1647,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusterparams.uuid",{"_index":1760,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusters",{"_index":1303,"title":{},"body":{"classes/LHCbLoader.html":{},"changelog.html":{}}}],["cms",{"_index":419,"title":{},"body":{"classes/CMSObjects.html":{},"changelog.html":{}}}],["cmsloader",{"_index":2925,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["cmsobjects",{"_index":414,"title":{"classes/CMSObjects.html":{}},"body":{"classes/CMSObjects.html":{},"changelog.html":{},"coverage.html":{}}}],["code",{"_index":2909,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["collection",{"_index":688,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["collection's",{"_index":835,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["collection.name",{"_index":1094,"title":{},"body":{"classes/ExportManager.html":{}}}],["collectioncolor",{"_index":685,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["collectioncolor?.gethexstring",{"_index":1605,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["collectionname",{"_index":683,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["collectionnode",{"_index":1602,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["collectionnode.addconfig('checkbox",{"_index":1608,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["collectionnode.addconfig('color",{"_index":1604,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["collectionnode.addconfig('rangeslider",{"_index":1615,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["collectionnode.addconfig('slider",{"_index":1606,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["collections",{"_index":1013,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"interfaces/Window.html":{}}}],["collfolder",{"_index":831,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["collfolder.addfolder('cuts",{"_index":840,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["collideparticles",{"_index":83,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["collideparticles(tweenduration",{"_index":147,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["colliding",{"_index":400,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["collision",{"_index":146,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["collison",{"_index":110,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["color",{"_index":151,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["color(0x2194ce",{"_index":3109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xff0000",{"_index":3108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xffd166",{"_index":3110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xffffff",{"_index":161,"title":{},"body":{"classes/AnimationsManager.html":{},"miscellaneous/variables.html":{}}}],["color(color).gethexstring",{"_index":1590,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["colormenu",{"_index":771,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["colormenu.onchange((color",{"_index":883,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["colormenu.onchange((value",{"_index":774,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["colormenu.onchange(oncolorchange",{"_index":869,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["colormenu.setvalue(collectioncolor?.gethex",{"_index":838,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["colors",{"_index":3113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["colour",{"_index":2693,"title":{},"body":{"interfaces/Window.html":{}}}],["commit",{"_index":2737,"title":{},"body":{"changelog.html":{}}}],["commits",{"_index":2736,"title":{},"body":{"changelog.html":{}}}],["complete",{"_index":2664,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["completely",{"_index":2936,"title":{},"body":{"changelog.html":{}}}],["completes",{"_index":346,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["component",{"_index":2959,"title":{},"body":{"changelog.html":{}}}],["components",{"_index":2994,"title":{},"body":{"changelog.html":{}}}],["composer",{"_index":899,"title":{},"body":{"classes/EffectsManager.html":{}}}],["computed",{"_index":1111,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["concatonateobjs",{"_index":1271,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["cone",{"_index":1713,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["config",{"_index":1427,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["config.onchange",{"_index":1494,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['color",{"_index":1491,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['ischecked",{"_index":1489,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['value",{"_index":1493,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.type",{"_index":1487,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['color",{"_index":1490,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['highvalue",{"_index":1496,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['ischecked",{"_index":1488,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['value",{"_index":1492,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configactive",{"_index":1388,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configfile",{"_index":3125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configfunctions",{"_index":715,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["configoptions",{"_index":1474,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configs",{"_index":1389,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configslength",{"_index":1476,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate",{"_index":1512,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate['label",{"_index":1519,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate['type",{"_index":1517,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate[prop",{"_index":1522,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configurable",{"_index":555,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["configuration",{"_index":491,"title":{"interfaces/Configuration.html":{}},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["configuration.allowurloptions",{"_index":2552,"title":{},"body":{"interfaces/Window.html":{}}}],["configure",{"_index":2436,"title":{},"body":{"classes/VRManager.html":{}}}],["console",{"_index":2555,"title":{},"body":{"interfaces/Window.html":{}}}],["console.error",{"_index":1470,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["console.error('could",{"_index":2368,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["console.error('error",{"_index":2085,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["console.log",{"_index":2509,"title":{},"body":{"classes/VRManager.html":{}}}],["console.log('no",{"_index":1741,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["console.log('processing",{"_index":1314,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["console.log('vr",{"_index":2460,"title":{},"body":{"classes/VRManager.html":{}}}],["const",{"_index":197,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":125,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["constructor",{"_index":25,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{}}}],["constructor(camera",{"_index":907,"title":{},"body":{"classes/EffectsManager.html":{}}}],["constructor(configuration",{"_index":2537,"title":{},"body":{"interfaces/Window.html":{}}}],["constructor(elementid",{"_index":662,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["constructor(eventdisplay",{"_index":2313,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["constructor(field",{"_index":621,"title":{},"body":{"classes/Cut.html":{}}}],["constructor(name",{"_index":1404,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["constructor(phoenixmenu",{"_index":1549,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["constructor(public",{"_index":57,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["constructor(scene",{"_index":86,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["constructor(value",{"_index":26,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["contain",{"_index":1651,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["containing",{"_index":92,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["containingevent",{"_index":2668,"title":{},"body":{"interfaces/Window.html":{}}}],["containment",{"_index":1941,"title":{},"body":{"classes/RendererManager.html":{}}}],["contains",{"_index":1029,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/RendererManager.html":{}}}],["containsobject",{"_index":1913,"title":{},"body":{"classes/RendererManager.html":{}}}],["containsobject(obj",{"_index":1938,"title":{},"body":{"classes/RendererManager.html":{}}}],["content",{"_index":2608,"title":{},"body":{"interfaces/Window.html":{}}}],["contenttype",{"_index":3115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controller",{"_index":2408,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["controller1",{"_index":2387,"title":{},"body":{"classes/VRManager.html":{}}}],["controller2",{"_index":2388,"title":{},"body":{"classes/VRManager.html":{}}}],["controllergrip1",{"_index":2389,"title":{},"body":{"classes/VRManager.html":{}}}],["controllergrip2",{"_index":2390,"title":{},"body":{"classes/VRManager.html":{}}}],["controllermodelfactory",{"_index":2490,"title":{},"body":{"classes/VRManager.html":{}}}],["controllermodelfactory.createcontrollermodel(this.controllergrip1",{"_index":2494,"title":{},"body":{"classes/VRManager.html":{}}}],["controllermodelfactory.createcontrollermodel(this.controllergrip2",{"_index":2499,"title":{},"body":{"classes/VRManager.html":{}}}],["controllers",{"_index":2483,"title":{},"body":{"classes/VRManager.html":{}}}],["controls",{"_index":666,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["controlsmanager",{"_index":3044,"title":{},"body":{"coverage.html":{}}}],["conventional",{"_index":2735,"title":{},"body":{"changelog.html":{}}}],["conversions",{"_index":543,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["convert",{"_index":573,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["coordinate",{"_index":542,"title":{},"body":{"classes/CoordinateHelper.html":{},"changelog.html":{}}}],["coordinatehelper",{"_index":538,"title":{"classes/CoordinateHelper.html":{}},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["coordinates",{"_index":1730,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["coordlength",{"_index":1731,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["coords",{"_index":553,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["copy",{"_index":1831,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["copy(camera.clone",{"_index":2478,"title":{},"body":{"classes/VRManager.html":{}}}],["correct",{"_index":2943,"title":{},"body":{"changelog.html":{}}}],["correctly",{"_index":2988,"title":{},"body":{"changelog.html":{}}}],["count",{"_index":256,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LoadingManager.html":{}}}],["coverage",{"_index":3011,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covering",{"_index":337,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["cphi",{"_index":1705,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cpu",{"_index":2863,"title":{},"body":{"changelog.html":{}}}],["create",{"_index":30,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["created",{"_index":1440,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{}}}],["creating",{"_index":2575,"title":{},"body":{"interfaces/Window.html":{}}}],["cross(b_last",{"_index":1161,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["cross(b_middle",{"_index":1151,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["ctheta",{"_index":1709,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube",{"_index":1762,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.lookat(new",{"_index":1757,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.name",{"_index":1759,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.position.copy(position",{"_index":1756,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.userdata",{"_index":1758,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.uuid",{"_index":1761,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["curently",{"_index":1059,"title":{},"body":{"classes/ExportManager.html":{}}}],["current",{"_index":290,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["currently",{"_index":96,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["currentvrsession",{"_index":2391,"title":{},"body":{"classes/VRManager.html":{}}}],["customize",{"_index":2535,"title":{},"body":{"interfaces/Window.html":{}}}],["cut",{"_index":610,"title":{"classes/Cut.html":{}},"body":{"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"changelog.html":{},"coverage.html":{}}}],["cut.field",{"_index":847,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["cut.maxvalue",{"_index":845,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["cut.minvalue",{"_index":844,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["cut.reset",{"_index":1612,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["cut.step",{"_index":1617,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["cuts",{"_index":684,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["cutsfolder",{"_index":839,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["cylinderbuffergeometry",{"_index":1682,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["d0",{"_index":1880,"title":{},"body":{"classes/RKHelper.html":{}}}],["d207bad",{"_index":2858,"title":{},"body":{"changelog.html":{}}}],["d2874b8",{"_index":2842,"title":{},"body":{"changelog.html":{}}}],["d3920c4",{"_index":2968,"title":{},"body":{"changelog.html":{}}}],["d677089",{"_index":2882,"title":{},"body":{"changelog.html":{}}}],["d90e3a6",{"_index":2883,"title":{},"body":{"changelog.html":{}}}],["da3ead5",{"_index":2949,"title":{},"body":{"changelog.html":{}}}],["dashsize",{"_index":1780,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["dat.gui",{"_index":517,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"dependencies.html":{}}}],["data",{"_index":95,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["data.json",{"_index":3079,"title":{},"body":{"index.html":{}}}],["datguimenuui",{"_index":638,"title":{"classes/DatGUIMenuUI.html":{}},"body":{"classes/DatGUIMenuUI.html":{},"coverage.html":{}}}],["db261a6",{"_index":2894,"title":{},"body":{"changelog.html":{}}}],["db3ca8b",{"_index":2752,"title":{},"body":{"changelog.html":{}}}],["dc05ed9",{"_index":2896,"title":{},"body":{"changelog.html":{}}}],["dc140dd",{"_index":2923,"title":{},"body":{"changelog.html":{}}}],["dc5d489",{"_index":2913,"title":{},"body":{"changelog.html":{}}}],["dcf6cec",{"_index":2947,"title":{},"body":{"changelog.html":{}}}],["declare",{"_index":2055,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["default",{"_index":39,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["defaulteventfile",{"_index":496,"title":{},"body":{"interfaces/Configuration.html":{}}}],["defaulteventpath",{"_index":2320,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["defaulteventtype",{"_index":2317,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["defaultmaxvalue",{"_index":615,"title":{},"body":{"classes/Cut.html":{}}}],["defaultminvalue",{"_index":616,"title":{},"body":{"classes/Cut.html":{}}}],["defaultrenderpass",{"_index":900,"title":{},"body":{"classes/EffectsManager.html":{}}}],["defaults",{"_index":2039,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["defaultview",{"_index":497,"title":{},"body":{"interfaces/Configuration.html":{},"changelog.html":{}}}],["define",{"_index":1101,"title":{},"body":{"classes/Field.html":{},"index.html":{}}}],["defined",{"_index":28,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{}}}],["defining",{"_index":2688,"title":{},"body":{"interfaces/Window.html":{}}}],["definition",{"_index":576,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{}}}],["definitions",{"_index":1892,"title":{},"body":{"classes/RKHelper.html":{}}}],["delete",{"_index":1471,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"changelog.html":{}}}],["deleted",{"_index":810,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["deleting",{"_index":802,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["dependencies",{"_index":3056,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["deployment",{"_index":3006,"title":{},"body":{"changelog.html":{}}}],["depth",{"_index":1600,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["depthtest",{"_index":696,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["depthtestmenu",{"_index":818,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["depthtestmenu.onchange((value",{"_index":821,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["descendants",{"_index":1450,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["describe",{"_index":1799,"title":{},"body":{"classes/PresetView.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["desired",{"_index":1011,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["detector",{"_index":209,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{},"index.html":{}}}],["detectoropacity",{"_index":764,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["dflt_colors",{"_index":2645,"title":{},"body":{"interfaces/Window.html":{}}}],["dialog",{"_index":2782,"title":{},"body":{"changelog.html":{}}}],["different",{"_index":665,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/RKHelper.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["dimensional",{"_index":177,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["dir",{"_index":1203,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["direction",{"_index":1193,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["directionallight",{"_index":2152,"title":{},"body":{"classes/SelectionManager.html":{}}}],["directionallight().type",{"_index":2161,"title":{},"body":{"classes/SelectionManager.html":{}}}],["directly",{"_index":3085,"title":{},"body":{"index.html":{}}}],["directory",{"_index":3089,"title":{},"body":{"index.html":{}}}],["disable",{"_index":2130,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["disabled",{"_index":917,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["disableselecting",{"_index":2100,"title":{},"body":{"classes/SelectionManager.html":{}}}],["display",{"_index":494,"title":{},"body":{"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["display's",{"_index":97,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["display.ts",{"_index":2526,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["displayed",{"_index":1017,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["displayusage",{"_index":3073,"title":{},"body":{"index.html":{}}}],["dist/bundle",{"_index":3088,"title":{},"body":{"index.html":{}}}],["distance",{"_index":126,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{}}}],["distancefromorigin",{"_index":149,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["dividescalar(previousscale",{"_index":292,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["docs",{"_index":2765,"title":{},"body":{"changelog.html":{}}}],["document",{"_index":2171,"title":{},"body":{"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{}}}],["document.body",{"_index":736,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{}}}],["document.createelement('a",{"_index":3139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document.createelement('input",{"_index":3120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document.createelement('script",{"_index":2076,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["document.getelementbyid('gui",{"_index":741,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["document.getelementbyid(elementid",{"_index":735,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{}}}],["document.getelementsbytagname('head')[0",{"_index":2050,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["document.queryselectorall",{"_index":2072,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["documentation",{"_index":2767,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["documented",{"_index":2734,"title":{},"body":{"changelog.html":{}}}],["dof",{"_index":1816,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["dom",{"_index":1951,"title":{},"body":{"classes/RendererManager.html":{}}}],["don't",{"_index":1280,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PrettySymbols.html":{}}}],["doubleside",{"_index":433,"title":{},"body":{"classes/CMSObjects.html":{}}}],["doublesided",{"_index":2598,"title":{},"body":{"interfaces/Window.html":{}}}],["download",{"_index":3146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dparams",{"_index":1845,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["dparams[0",{"_index":1881,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[1",{"_index":1883,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[2",{"_index":1884,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[3",{"_index":1885,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[4",{"_index":1886,"title":{},"body":{"classes/RKHelper.html":{}}}],["draw",{"_index":1000,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{}}}],["drawing",{"_index":2751,"title":{},"body":{"changelog.html":{}}}],["drawrange",{"_index":255,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["driven",{"_index":3066,"title":{},"body":{"index.html":{}}}],["drop",{"_index":2861,"title":{},"body":{"changelog.html":{}}}],["duration",{"_index":112,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["dynamically",{"_index":2026,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["e",{"_index":3124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e.g",{"_index":1282,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["e.target?.files[0",{"_index":3126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e10a68d",{"_index":2885,"title":{},"body":{"changelog.html":{}}}],["e297c98",{"_index":2944,"title":{},"body":{"changelog.html":{}}}],["e6f69a0",{"_index":2880,"title":{},"body":{"changelog.html":{}}}],["e96136b",{"_index":2877,"title":{},"body":{"changelog.html":{}}}],["e9f1bc9",{"_index":2916,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":138,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/LoadingManager.html":{},"interfaces/Window.html":{}}}],["easily",{"_index":1792,"title":{},"body":{"classes/PresetView.html":{}}}],["easing",{"_index":163,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["edcd567",{"_index":2755,"title":{},"body":{"changelog.html":{}}}],["edges",{"_index":480,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry",{"_index":431,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry(boxbuffer",{"_index":482,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edit",{"_index":299,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["edward's",{"_index":2933,"title":{},"body":{"changelog.html":{}}}],["effect",{"_index":921,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectcomposer",{"_index":919,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectcomposer(renderer",{"_index":949,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effects",{"_index":893,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["effectsmanager",{"_index":891,"title":{"classes/EffectsManager.html":{}},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["effectsrender",{"_index":904,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectsrender(scene",{"_index":936,"title":{},"body":{"classes/EffectsManager.html":{}}}],["element",{"_index":515,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"miscellaneous/variables.html":{}}}],["elementid",{"_index":498,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{},"index.html":{}}}],["elements",{"_index":932,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["embed",{"_index":2784,"title":{},"body":{"changelog.html":{}}}],["empty",{"_index":2726,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["enable",{"_index":516,"title":{},"body":{"interfaces/Configuration.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["enabled",{"_index":916,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["enabledatguimenu",{"_index":499,"title":{},"body":{"interfaces/Configuration.html":{}}}],["enableeventdisplayconsole",{"_index":2687,"title":{},"body":{"interfaces/Window.html":{}}}],["enablekeyboardcontrols",{"_index":2718,"title":{},"body":{"interfaces/Window.html":{}}}],["enables",{"_index":2686,"title":{},"body":{"interfaces/Window.html":{}}}],["enableselecting",{"_index":2101,"title":{},"body":{"classes/SelectionManager.html":{}}}],["enableselecting(enable",{"_index":2708,"title":{},"body":{"interfaces/Window.html":{}}}],["enabling",{"_index":2126,"title":{},"body":{"classes/SelectionManager.html":{}}}],["enabling/disabling",{"_index":756,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["end",{"_index":167,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["end.chain(startclone",{"_index":230,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["ended",{"_index":115,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["ends",{"_index":140,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["endvr",{"_index":2562,"title":{},"body":{"interfaces/Window.html":{}}}],["endvrsession",{"_index":2400,"title":{},"body":{"classes/VRManager.html":{}}}],["energy",{"_index":1787,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"changelog.html":{}}}],["entries",{"_index":1219,"title":{},"body":{"classes/InfoLogger.html":{}}}],["entry",{"_index":1225,"title":{},"body":{"classes/InfoLogger.html":{}}}],["error",{"_index":1169,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["error_estimate",{"_index":1171,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["estimate",{"_index":1170,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["et",{"_index":1817,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["eta",{"_index":559,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PrettySymbols.html":{},"changelog.html":{}}}],["eta/phi",{"_index":563,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["eta=0",{"_index":596,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etaphitocartesian",{"_index":545,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etaphitocartesian(radius",{"_index":558,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etatotheta",{"_index":546,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etatotheta(eta",{"_index":571,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["eta~infinite",{"_index":602,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etc",{"_index":689,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{}}}],["event",{"_index":94,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["event's",{"_index":2265,"title":{},"body":{"classes/StateManager.html":{}}}],["event.clientx",{"_index":2223,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.clienty",{"_index":2226,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.preventdefault",{"_index":2218,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event_data_type_colors",{"_index":435,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["event_data_type_colors.jets",{"_index":1716,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["event_data_type_colors.missingenergy",{"_index":1782,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["event_data_type_colors.muonchambers",{"_index":471,"title":{},"body":{"classes/CMSObjects.html":{}}}],["event_data_type_colors.vertices",{"_index":1765,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["eventdata",{"_index":235,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["eventdata.children",{"_index":1090,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdata.traverse((eventobject",{"_index":244,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventdataconfig",{"_index":1085,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name",{"_index":1092,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name].push(collection.name",{"_index":1095,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataloader",{"_index":500,"title":{"interfaces/EventDataLoader.html":{}},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"coverage.html":{},"index.html":{}}}],["eventdisplay",{"_index":727,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"coverage.html":{},"index.html":{}}}],["eventdisplay.init(configuration",{"_index":3077,"title":{},"body":{"index.html":{}}}],["eventdisplay.loadobjgeometry('path/to/geometry.obj",{"_index":3081,"title":{},"body":{"index.html":{}}}],["eventdisplay.parsephoenixevents(res",{"_index":3080,"title":{},"body":{"index.html":{}}}],["eventfile",{"_index":536,"title":{},"body":{"interfaces/Configuration.html":{}}}],["eventfolder",{"_index":645,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["eventfolderstate",{"_index":1544,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["eventkey",{"_index":2585,"title":{},"body":{"interfaces/Window.html":{}}}],["eventkeys",{"_index":2564,"title":{},"body":{"interfaces/Window.html":{}}}],["eventmetadata",{"_index":2254,"title":{},"body":{"classes/StateManager.html":{}}}],["eventnumber",{"_index":1315,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/StateManager.html":{}}}],["eventobject",{"_index":240,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry",{"_index":245,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.attributes['position'].array",{"_index":302,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.boundingsphere.center",{"_index":298,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.computeboundingsphere",{"_index":304,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.deleteattribute('position",{"_index":303,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.drawrange",{"_index":270,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.drawrange.count",{"_index":266,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.setdrawrange(0",{"_index":267,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry?.attributes?.position?.count",{"_index":259,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.material",{"_index":361,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.material.clippingplanes",{"_index":362,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.name",{"_index":251,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.position",{"_index":291,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.position.equals",{"_index":296,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.setscalar(updatedscale.x",{"_index":285,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.x",{"_index":278,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.y",{"_index":279,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.z",{"_index":280,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.visible",{"_index":311,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobjecttween",{"_index":268,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobjecttween.oncomplete",{"_index":271,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["events",{"_index":1026,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["eventsdata",{"_index":1028,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["eventtype",{"_index":537,"title":{},"body":{"interfaces/Configuration.html":{}}}],["examples",{"_index":3093,"title":{},"body":{"index.html":{}}}],["except",{"_index":2835,"title":{},"body":{"changelog.html":{}}}],["existing",{"_index":1897,"title":{},"body":{"classes/RKHelper.html":{},"interfaces/Window.html":{}}}],["exists",{"_index":257,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/ScriptLoader.html":{}}}],["experiment",{"_index":557,"title":{},"body":{"classes/CoordinateHelper.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["experimental",{"_index":569,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["experimentinfo",{"_index":2374,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["experiments",{"_index":2941,"title":{},"body":{"changelog.html":{}}}],["export",{"_index":55,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["exported",{"_index":1048,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter",{"_index":1067,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse",{"_index":1079,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse(scene",{"_index":1068,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportmanager",{"_index":1033,"title":{"classes/ExportManager.html":{}},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["exportphoenixdisplay",{"_index":2625,"title":{},"body":{"interfaces/Window.html":{}}}],["exportphoenixscene",{"_index":1035,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportphoenixscene(scene",{"_index":1040,"title":{},"body":{"classes/ExportManager.html":{}}}],["exports",{"_index":1042,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["exportscenetoobj",{"_index":1036,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportscenetoobj(scene",{"_index":1050,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporttoobj",{"_index":2613,"title":{},"body":{"interfaces/Window.html":{}}}],["expressed",{"_index":1311,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["extend",{"_index":2821,"title":{},"body":{"changelog.html":{}}}],["extendeventdatatypeui",{"_index":1285,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["extends",{"_index":1239,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["extension",{"_index":2746,"title":{},"body":{"changelog.html":{}}}],["external",{"_index":2027,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["extraanimationsphereduration",{"_index":232,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["extract",{"_index":2360,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["extrainfo",{"_index":1653,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["extrapolate",{"_index":1865,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolated",{"_index":1692,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["extrapolatetrackpositions",{"_index":1861,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolatetrackpositions(track",{"_index":1863,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolating",{"_index":246,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["extrapolation",{"_index":1701,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["extras/configuration",{"_index":2330,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["extras/cut.model",{"_index":726,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["f279898",{"_index":2777,"title":{},"body":{"changelog.html":{}}}],["f4c2e31",{"_index":2904,"title":{},"body":{"changelog.html":{}}}],["f7cd6b4",{"_index":2810,"title":{},"body":{"changelog.html":{}}}],["f87c587",{"_index":2979,"title":{},"body":{"changelog.html":{}}}],["f8a0080",{"_index":2764,"title":{},"body":{"changelog.html":{}}}],["f94c0e4",{"_index":2911,"title":{},"body":{"changelog.html":{}}}],["faces",{"_index":440,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces.map((face",{"_index":443,"title":{},"body":{"classes/CMSObjects.html":{}}}],["facing",{"_index":2520,"title":{},"body":{"classes/VRManager.html":{}}}],["factor",{"_index":2659,"title":{},"body":{"interfaces/Window.html":{}}}],["failed",{"_index":2973,"title":{},"body":{"changelog.html":{}}}],["fallback",{"_index":2321,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["false",{"_index":312,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["fbd584e",{"_index":2869,"title":{},"body":{"changelog.html":{}}}],["fe0b2e6",{"_index":2889,"title":{},"body":{"changelog.html":{}}}],["features",{"_index":2779,"title":{},"body":{"changelog.html":{}}}],["fetch",{"_index":2341,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["fetch('path/to/event",{"_index":3078,"title":{},"body":{"index.html":{}}}],["fetch(file",{"_index":2357,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["fetch(this.urloptions.get('config",{"_index":2349,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["few",{"_index":1691,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["ff10477",{"_index":2957,"title":{},"body":{"changelog.html":{}}}],["ff666e2",{"_index":2790,"title":{},"body":{"changelog.html":{}}}],["ffffff",{"_index":2678,"title":{},"body":{"interfaces/Window.html":{}}}],["fh",{"_index":1176,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["fh2",{"_index":1177,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field",{"_index":617,"title":{"classes/Field.html":{}},"body":{"classes/Cut.html":{},"classes/Field.html":{},"coverage.html":{}}}],["field.get(pos1",{"_index":1148,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field.get(pos2",{"_index":1158,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field.get(state.pos",{"_index":1134,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["file.readobject(objectname).then((obj",{"_index":2653,"title":{},"body":{"interfaces/Window.html":{}}}],["filename",{"_index":2593,"title":{},"body":{"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["filereader",{"_index":3128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["files",{"_index":2851,"title":{},"body":{"changelog.html":{}}}],["filter",{"_index":623,"title":{},"body":{"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["filter((val",{"_index":2210,"title":{},"body":{"classes/SelectionManager.html":{}}}],["filtered",{"_index":624,"title":{},"body":{"classes/Cut.html":{}}}],["filters",{"_index":613,"title":{},"body":{"classes/Cut.html":{},"classes/LHCbLoader.html":{}}}],["finally",{"_index":2354,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["find",{"_index":1435,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/URLOptionsManager.html":{}}}],["finding",{"_index":2140,"title":{},"body":{"classes/SelectionManager.html":{}}}],["findintree",{"_index":1397,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintree(name",{"_index":1433,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintreeorcreate",{"_index":1398,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintreeorcreate(name",{"_index":1438,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["first",{"_index":119,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["first.type",{"_index":1740,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["fix",{"_index":2750,"title":{},"body":{"changelog.html":{}}}],["fixed",{"_index":1930,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["fixedoverlay",{"_index":1908,"title":{},"body":{"classes/RendererManager.html":{}}}],["fixes",{"_index":2710,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["fixing",{"_index":2924,"title":{},"body":{"changelog.html":{}}}],["fixoverlayview(fixed",{"_index":2711,"title":{},"body":{"interfaces/Window.html":{}}}],["flat",{"_index":2601,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["float32array([].concat(...reachedhits",{"_index":331,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["float32array(allfacepositions",{"_index":467,"title":{},"body":{"classes/CMSObjects.html":{}}}],["float32array(hitlength",{"_index":1746,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["floor",{"_index":2452,"title":{},"body":{"classes/VRManager.html":{}}}],["fo",{"_index":2271,"title":{},"body":{"classes/StateManager.html":{}}}],["folder",{"_index":668,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["folders",{"_index":2597,"title":{},"body":{"interfaces/Window.html":{}}}],["form",{"_index":2787,"title":{},"body":{"changelog.html":{}}}],["format",{"_index":1043,"title":{},"body":{"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["formatted",{"_index":2987,"title":{},"body":{"changelog.html":{}}}],["found",{"_index":1437,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["front",{"_index":445,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_1",{"_index":451,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_2",{"_index":447,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_3",{"_index":448,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_4",{"_index":450,"title":{},"body":{"classes/CMSObjects.html":{}}}],["function",{"_index":45,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["function,onanimationstart",{"_index":143,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["functionality",{"_index":999,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["functions",{"_index":99,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["generate",{"_index":1076,"title":{},"body":{"classes/ExportManager.html":{},"index.html":{}}}],["generation",{"_index":106,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["generic",{"_index":2890,"title":{},"body":{"changelog.html":{}}}],["geom",{"_index":2675,"title":{},"body":{"interfaces/Window.html":{}}}],["geometrical",{"_index":2761,"title":{},"body":{"changelog.html":{}}}],["geometries",{"_index":670,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["geometries.children.foreach((object",{"_index":1096,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometries/event",{"_index":2705,"title":{},"body":{"interfaces/Window.html":{}}}],["geometriesconfig",{"_index":1087,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometriesconfig.push(object.name",{"_index":1098,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometry",{"_index":254,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["geometry.computeboundingsphere",{"_index":332,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["geometry.setattribute",{"_index":330,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["geometry/event",{"_index":2701,"title":{},"body":{"interfaces/Window.html":{}}}],["geometryposcount",{"_index":258,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["geomfolder",{"_index":646,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["get(field",{"_index":1102,"title":{},"body":{"classes/Field.html":{}}}],["getactiveobjectid",{"_index":2102,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["getcamera(new",{"_index":2477,"title":{},"body":{"classes/VRManager.html":{}}}],["getcameragroup",{"_index":2401,"title":{},"body":{"classes/VRManager.html":{}}}],["getcameragroup(camera",{"_index":2424,"title":{},"body":{"classes/VRManager.html":{}}}],["getcameratween",{"_index":84,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["getcameratween(pos",{"_index":162,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["getcluster",{"_index":1636,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcluster(clusterparams",{"_index":1644,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcollection",{"_index":979,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["getcollection(collectionname",{"_index":1007,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["getcollections",{"_index":980,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["getelementbyid('three",{"_index":2172,"title":{},"body":{"classes/SelectionManager.html":{}}}],["getelementbyid(singleid",{"_index":2381,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["geteventdata",{"_index":1244,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["geteventmetadata",{"_index":981,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["geteventslist",{"_index":982,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["geteventslist(eventsdata",{"_index":1023,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["gethits",{"_index":1637,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gethits(hitsparams",{"_index":1648,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gethitspositions",{"_index":85,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["gethitspositions(positions",{"_index":170,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["geticonurl",{"_index":1797,"title":{},"body":{"classes/PresetView.html":{}}}],["getinfologger",{"_index":2366,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["getinfologgerlist",{"_index":1215,"title":{},"body":{"classes/InfoLogger.html":{}}}],["getinstance",{"_index":2255,"title":{},"body":{"classes/StateManager.html":{}}}],["getjet",{"_index":1638,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getjet(jetparams",{"_index":1657,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getlabelsobject",{"_index":983,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["getloadingmanager",{"_index":2590,"title":{},"body":{"interfaces/Window.html":{}}}],["getlocalclipping",{"_index":1914,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmainrenderer",{"_index":1915,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmissingenergy",{"_index":1639,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getmissingenergy(metparams",{"_index":1660,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getmuon",{"_index":1246,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["getmuon(muonparams",{"_index":1300,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["getmuonchamber",{"_index":423,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getmuonchamber(muonchamberparams",{"_index":424,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getnodestate",{"_index":1399,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["getobject",{"_index":1269,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["getobjecttypecollections",{"_index":1247,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["getobjecttypecollections(object",{"_index":1304,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["getoverlayrenderer",{"_index":1916,"title":{},"body":{"classes/RendererManager.html":{}}}],["getprettyparams",{"_index":1811,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettyparams(params",{"_index":1820,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettysymbol",{"_index":1812,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettysymbol(param",{"_index":1824,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getrenderers",{"_index":1917,"title":{},"body":{"classes/RendererManager.html":{}}}],["getscenemanager",{"_index":754,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["getstatemanager",{"_index":2591,"title":{},"body":{"interfaces/Window.html":{}}}],["getthreemanager",{"_index":2589,"title":{},"body":{"interfaces/Window.html":{}}}],["getting",{"_index":2730,"title":{"changelog.html":{},"index.html":{}},"body":{"changelog.html":{}}}],["gettrack",{"_index":1640,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gettrack(trackparams",{"_index":1664,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gettrackswithrungekutta",{"_index":1862,"title":{},"body":{"classes/RKHelper.html":{}}}],["gettrackswithrungekutta(trackscollectionsevent",{"_index":1868,"title":{},"body":{"classes/RKHelper.html":{}}}],["getuimanager",{"_index":2302,"title":{},"body":{"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["getvertex",{"_index":1641,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getvertex(vertexparams",{"_index":1667,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getvrcamera",{"_index":2402,"title":{},"body":{"classes/VRManager.html":{}}}],["given",{"_index":429,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["giving",{"_index":2138,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["global",{"_index":2042,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["globalmomentum",{"_index":1890,"title":{},"body":{"classes/RKHelper.html":{}}}],["globalmomentum.clone",{"_index":1901,"title":{},"body":{"classes/RKHelper.html":{}}}],["globalthis",{"_index":2879,"title":{},"body":{"changelog.html":{}}}],["gltf",{"_index":1077,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["gltfexporter",{"_index":1062,"title":{},"body":{"classes/ExportManager.html":{}}}],["go",{"_index":1834,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["graphic",{"_index":996,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["graphics",{"_index":1293,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["graphicslibrary",{"_index":988,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["greater",{"_index":2660,"title":{},"body":{"interfaces/Window.html":{}}}],["grid",{"_index":2805,"title":{},"body":{"changelog.html":{}}}],["group",{"_index":190,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["groupvisibility",{"_index":1611,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["groupvisibility(collectionname",{"_index":829,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["groupvisibility(scenemanager.event_data_id",{"_index":1598,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["groupvisibility(scenemanager.geometries_id",{"_index":1574,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["gui",{"_index":641,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/URLOptionsManager.html":{},"coverage.html":{}}}],["gui.remove",{"_index":742,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["guidelines",{"_index":2738,"title":{},"body":{"changelog.html":{}}}],["guiparameters",{"_index":647,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["h",{"_index":1139,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["h).cross(b_last",{"_index":1159,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["h2",{"_index":1125,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["half_h",{"_index":1126,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["half_h).cross(b_middle",{"_index":1149,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["hand",{"_index":2454,"title":{},"body":{"classes/VRManager.html":{}}}],["handed",{"_index":1895,"title":{},"body":{"classes/RKHelper.html":{}}}],["handle",{"_index":2753,"title":{},"body":{"changelog.html":{}}}],["handles",{"_index":1277,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["handling",{"_index":2807,"title":{},"body":{"changelog.html":{}}}],["hash",{"_index":2984,"title":{},"body":{"changelog.html":{}}}],["hasposition",{"_index":295,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["helper",{"_index":541,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["helper.ts",{"_index":540,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"coverage.html":{}}}],["helper.ts:12",{"_index":1869,"title":{},"body":{"classes/RKHelper.html":{}}}],["helper.ts:13",{"_index":572,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:23",{"_index":583,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:32",{"_index":1864,"title":{},"body":{"classes/RKHelper.html":{}}}],["helper.ts:34",{"_index":581,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:53",{"_index":561,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:69",{"_index":549,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helpers/active",{"_index":2156,"title":{},"body":{"classes/SelectionManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["helpers/constants",{"_index":436,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["helpers/coordinate",{"_index":1689,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["helpers/file",{"_index":1065,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{}}}],["helpers/info",{"_index":1032,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["helpers/pretty",{"_index":1569,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"classes/SelectionManager.html":{}}}],["helpers/rk",{"_index":1688,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["here",{"_index":577,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["hide",{"_index":406,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["hidewidgets",{"_index":2323,"title":{},"body":{"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["hidewidgetsoptions",{"_index":2370,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["hiding",{"_index":2914,"title":{},"body":{"changelog.html":{}}}],["hierarchy",{"_index":2595,"title":{},"body":{"interfaces/Window.html":{}}}],["high",{"_index":1979,"title":{},"body":{"classes/RendererManager.html":{}}}],["highlight",{"_index":2137,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highlighting",{"_index":930,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["highlightobject",{"_index":2103,"title":{},"body":{"classes/SelectionManager.html":{}}}],["highlightobject(uuid",{"_index":2134,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highly",{"_index":3063,"title":{},"body":{"index.html":{}}}],["highvalue",{"_index":1495,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{}}}],["hit",{"_index":300,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["hitlength",{"_index":1744,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitlines",{"_index":2801,"title":{},"body":{"changelog.html":{}}}],["hitparamsclone",{"_index":1671,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hits",{"_index":173,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["hitsparams",{"_index":1650,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparams.length",{"_index":1735,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparams.pos",{"_index":1734,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparams[0",{"_index":1738,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparamsclone",{"_index":1729,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitspositions",{"_index":323,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["hitspositions.filter((hitposition",{"_index":326,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["hitstolines",{"_index":1642,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitstolines(pointpos",{"_index":1670,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitstopoints",{"_index":1643,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitstopoints(pointpos",{"_index":1677,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["home",{"_index":2952,"title":{},"body":{"changelog.html":{}}}],["hovered",{"_index":931,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["hovering",{"_index":2114,"title":{},"body":{"classes/SelectionManager.html":{}}}],["html",{"_index":2698,"title":{},"body":{"interfaces/Window.html":{},"index.html":{}}}],["htmlcanvaselement",{"_index":1965,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["htmlelement",{"_index":2047,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["https://cdn.jsdelivr.net/npm/jsroot@${jsrootversion}/scripts",{"_index":2058,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["https://en.wikipedia.org/wiki/pseudorapidity",{"_index":578,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["icon",{"_index":1390,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"changelog.html":{}}}],["id",{"_index":513,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["identifier",{"_index":3012,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1276,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/ScriptLoader.html":{}}}],["idstohide",{"_index":2378,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["idstohide.foreach((singleid",{"_index":2380,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["ig",{"_index":2854,"title":{},"body":{"changelog.html":{}}}],["ignored",{"_index":2113,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ignorelist",{"_index":2093,"title":{},"body":{"classes/SelectionManager.html":{}}}],["immersive",{"_index":2421,"title":{},"body":{"classes/VRManager.html":{}}}],["implementing",{"_index":975,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["implicitly",{"_index":3001,"title":{},"body":{"changelog.html":{}}}],["import",{"_index":178,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["importmanager",{"_index":3048,"title":{},"body":{"coverage.html":{}}}],["improve",{"_index":2745,"title":{},"body":{"changelog.html":{}}}],["improvements",{"_index":2910,"title":{},"body":{"changelog.html":{}}}],["improving",{"_index":2862,"title":{},"body":{"changelog.html":{}}}],["inbounds",{"_index":1198,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["include",{"_index":3092,"title":{},"body":{"index.html":{}}}],["included",{"_index":3090,"title":{},"body":{"index.html":{}}}],["including",{"_index":1058,"title":{},"body":{"classes/ExportManager.html":{}}}],["independent",{"_index":3067,"title":{},"body":{"index.html":{}}}],["index",{"_index":16,"title":{"index.html":{}},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexincollection",{"_index":985,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["individually",{"_index":1281,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["infinity",{"_index":262,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["infologger",{"_index":990,"title":{"classes/InfoLogger.html":{}},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["infologgerlist",{"_index":1213,"title":{},"body":{"classes/InfoLogger.html":{}}}],["information",{"_index":1221,"title":{},"body":{"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["inherited",{"_index":1251,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["init",{"_index":1918,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["init(camera",{"_index":2141,"title":{},"body":{"classes/SelectionManager.html":{}}}],["init(configuration",{"_index":2544,"title":{},"body":{"interfaces/Window.html":{}}}],["init(elementid",{"_index":1947,"title":{},"body":{"classes/RendererManager.html":{}}}],["initial",{"_index":37,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["initialize",{"_index":929,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["initialized",{"_index":2117,"title":{},"body":{"classes/SelectionManager.html":{}}}],["initializes",{"_index":2700,"title":{},"body":{"interfaces/Window.html":{}}}],["initializing",{"_index":1928,"title":{},"body":{"classes/RendererManager.html":{}}}],["initially",{"_index":706,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["initiallyvisible",{"_index":702,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["initrenderer",{"_index":1919,"title":{},"body":{"classes/RendererManager.html":{}}}],["initrenderer(elementid",{"_index":1949,"title":{},"body":{"classes/RendererManager.html":{}}}],["initvr(onsessionended",{"_index":2559,"title":{},"body":{"interfaces/Window.html":{}}}],["input",{"_index":1075,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["inputfile",{"_index":3119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.accept",{"_index":3122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.click",{"_index":3133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.onchange",{"_index":3123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.remove",{"_index":3131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.type",{"_index":3121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inside",{"_index":912,"title":{},"body":{"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["install",{"_index":3070,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1324,"title":{},"body":{"classes/LoadingManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["instanceof",{"_index":263,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["instantiate",{"_index":1066,"title":{},"body":{"classes/ExportManager.html":{}}}],["instead",{"_index":1473,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["integrator",{"_index":1124,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["interface",{"_index":490,"title":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["interfaces",{"_index":492,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["intersected",{"_index":2146,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject",{"_index":2187,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.name",{"_index":2192,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.userdata",{"_index":2198,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.userdata[key",{"_index":2209,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject",{"_index":2104,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject(event",{"_index":2143,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects",{"_index":2145,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects.length",{"_index":2231,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects[0].object",{"_index":2234,"title":{},"body":{"classes/SelectionManager.html":{}}}],["interval",{"_index":2506,"title":{},"body":{"classes/VRManager.html":{}}}],["intervalid",{"_index":2507,"title":{},"body":{"classes/VRManager.html":{}}}],["intitialize",{"_index":2534,"title":{},"body":{"interfaces/Window.html":{}}}],["introduce",{"_index":2809,"title":{},"body":{"changelog.html":{}}}],["invisible",{"_index":306,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["ischecked",{"_index":1577,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["isfixedoverlay",{"_index":1920,"title":{},"body":{"classes/RendererManager.html":{}}}],["isinit",{"_index":2094,"title":{},"body":{"classes/SelectionManager.html":{}}}],["issimplearray",{"_index":1732,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["issue",{"_index":1700,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["isvractive",{"_index":2403,"title":{},"body":{"classes/VRManager.html":{}}}],["it's",{"_index":1840,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["item",{"_index":1341,"title":{},"body":{"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{}}}],["itemloaded",{"_index":1333,"title":{},"body":{"classes/LoadingManager.html":{}}}],["itemloaded(id",{"_index":1352,"title":{},"body":{"classes/LoadingManager.html":{}}}],["itemname",{"_index":1357,"title":{},"body":{"classes/LoadingManager.html":{}}}],["items",{"_index":350,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LoadingManager.html":{},"interfaces/Window.html":{}}}],["itself",{"_index":1449,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["j",{"_index":1322,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{}}}],["jasmine",{"_index":2921,"title":{},"body":{"changelog.html":{}}}],["jet",{"_index":275,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["jetparams",{"_index":1659,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams.color",{"_index":1715,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams.uuid",{"_index":1727,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jets",{"_index":1288,"title":{},"body":{"classes/LHCbLoader.html":{},"miscellaneous/variables.html":{}}}],["jivexml",{"_index":2319,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["jivexmlloader",{"_index":2327,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{}}}],["jixexml",{"_index":2773,"title":{},"body":{"changelog.html":{}}}],["js",{"_index":3061,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":1267,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["json.parse(input",{"_index":2619,"title":{},"body":{"interfaces/Window.html":{}}}],["json.parse(json",{"_index":1508,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["json.stringify(jsonresult",{"_index":1082,"title":{},"body":{"classes/ExportManager.html":{}}}],["json.stringify(state",{"_index":2289,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata",{"_index":2291,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay",{"_index":2295,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']?.['cameraposition",{"_index":2297,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']?.['clippingangle",{"_index":2298,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['phoenixmenu",{"_index":2292,"title":{},"body":{"classes/StateManager.html":{}}}],["jsonobject",{"_index":1506,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['children",{"_index":1525,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['childrenactive",{"_index":1509,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['configs",{"_index":1513,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['togglestate",{"_index":1510,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonresult",{"_index":1080,"title":{},"body":{"classes/ExportManager.html":{}}}],["jsroot",{"_index":2035,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jsroot.core.js",{"_index":2060,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsroot.csg.js",{"_index":2062,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsroot.geo.build(obj",{"_index":2644,"title":{},"body":{"interfaces/Window.html":{}}}],["jsroot.geom.js",{"_index":2064,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsroot.newhttprequest(url",{"_index":2642,"title":{},"body":{"interfaces/Window.html":{}}}],["jsroot.openfile(url).then((file",{"_index":2652,"title":{},"body":{"interfaces/Window.html":{}}}],["jsroot.painter.js",{"_index":2063,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsroot_cdn_url",{"_index":2057,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsrooteventloader",{"_index":3032,"title":{},"body":{"coverage.html":{}}}],["jsrootversion",{"_index":2036,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jszip",{"_index":3059,"title":{},"body":{"dependencies.html":{}}}],["k1",{"_index":1136,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k1.clone().sub(k2).sub(k3).add(k4",{"_index":1163,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k2",{"_index":1129,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k3",{"_index":1130,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k4",{"_index":1131,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k4).lpnorm",{"_index":1164,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["keep",{"_index":2812,"title":{},"body":{"changelog.html":{}}}],["key",{"_index":1009,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LoadingManager.html":{},"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["keyboard",{"_index":2557,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["keys",{"_index":1027,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["kutta",{"_index":1107,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["kutta.ts",{"_index":1100,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["kutta.ts:12",{"_index":2022,"title":{},"body":{"classes/RungeKutta.html":{}}}],["kutta.ts:126",{"_index":2021,"title":{},"body":{"classes/RungeKutta.html":{}}}],["kutta.ts:168",{"_index":2244,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:170",{"_index":2240,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:172",{"_index":2242,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:174",{"_index":2245,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:176",{"_index":2248,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:178",{"_index":2246,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:180",{"_index":2241,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:182",{"_index":2243,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:192",{"_index":1103,"title":{},"body":{"classes/Field.html":{}}}],["label",{"_index":710,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["labelid",{"_index":711,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["labelitem",{"_index":874,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["labelitem.add(this.guiparameters[labelid",{"_index":887,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["labelitemfolder",{"_index":720,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["labelnode",{"_index":1566,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["labelnode.addconfig('button",{"_index":1628,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["labelnode.addconfig('color",{"_index":1627,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["labelnode?.remove",{"_index":1633,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["labels",{"_index":674,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["labelsfolder",{"_index":648,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["labelsobject",{"_index":1241,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["labelssizemenu",{"_index":865,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["labelssizemenu.onfinishchange(onsizechange",{"_index":867,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["last",{"_index":139,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["later",{"_index":1045,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["latest",{"_index":2037,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{}}}],["left",{"_index":463,"title":{},"body":{"classes/CMSObjects.html":{},"classes/URLOptionsManager.html":{}}}],["length",{"_index":1197,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["level",{"_index":1418,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["lhcb",{"_index":1238,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["lhcbloader",{"_index":1235,"title":{"classes/LHCbLoader.html":{}},"body":{"classes/LHCbLoader.html":{},"coverage.html":{}}}],["library",{"_index":997,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"changelog.html":{}}}],["limits",{"_index":2762,"title":{},"body":{"changelog.html":{}}}],["line",{"_index":1656,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/VRManager.html":{}}}],["line(geometry",{"_index":1783,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/VRManager.html":{}}}],["line.name",{"_index":2502,"title":{},"body":{"classes/VRManager.html":{}}}],["line.scale.z",{"_index":2503,"title":{},"body":{"classes/VRManager.html":{}}}],["linebasicmaterial",{"_index":432,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["lineboxobject",{"_index":483,"title":{},"body":{"classes/CMSObjects.html":{}}}],["linedashedmaterial",{"_index":1686,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["linehits",{"_index":2820,"title":{},"body":{"changelog.html":{}}}],["lines",{"_index":478,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["linesegments",{"_index":434,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["linewidth",{"_index":1779,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["link",{"_index":437,"title":{},"body":{"classes/CMSObjects.html":{},"changelog.html":{}}}],["list",{"_index":1015,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["listen",{"_index":751,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["listener",{"_index":1347,"title":{},"body":{"classes/LoadingManager.html":{},"classes/VRManager.html":{}}}],["listentodisplayedeventchange(callback",{"_index":2681,"title":{},"body":{"interfaces/Window.html":{}}}],["listentoloadedeventschange(callback",{"_index":2683,"title":{},"body":{"interfaces/Window.html":{}}}],["literal",{"_index":508,"title":{},"body":{"interfaces/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["load",{"_index":509,"title":{},"body":{"interfaces/Configuration.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/ScriptLoader.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["loadable",{"_index":1257,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"interfaces/Window.html":{}}}],["loadconfig",{"_index":2346,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loaded",{"_index":1049,"title":{},"body":{"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["loader",{"_index":519,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["loader.geteventdata",{"_index":2362,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loader.process(res",{"_index":2361,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loader.ts",{"_index":974,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/ScriptLoader.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loader.ts:15",{"_index":2033,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loader.ts:17",{"_index":991,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:22",{"_index":1266,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loader.ts:29",{"_index":1024,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:31",{"_index":1262,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loader.ts:35",{"_index":1012,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:42",{"_index":1008,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:46",{"_index":2048,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loader.ts:48",{"_index":1018,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:57",{"_index":986,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:62",{"_index":1263,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loader.ts:67",{"_index":1030,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:8",{"_index":1249,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loaders",{"_index":976,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loaders/event",{"_index":532,"title":{},"body":{"interfaces/Configuration.html":{}}}],["loaders/jivexml",{"_index":2328,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loaders/phoenix",{"_index":2329,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loadevent(eventkey",{"_index":2586,"title":{},"body":{"interfaces/Window.html":{}}}],["loadeventfolderstate",{"_index":1547,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["loadfile",{"_index":2277,"title":{},"body":{"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loadfile((data",{"_index":2282,"title":{},"body":{"classes/StateManager.html":{}}}],["loadgltfgeometry",{"_index":2633,"title":{},"body":{"interfaces/Window.html":{}}}],["loading",{"_index":522,"title":{},"body":{"interfaces/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["loadingmanager",{"_index":1242,"title":{"classes/LoadingManager.html":{}},"body":{"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["loadingmanager.addloadableitem('jsroot_scripts",{"_index":2056,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadingmanager.addloadableitem('single_script",{"_index":2068,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadingmanager.instance",{"_index":1359,"title":{},"body":{"classes/LoadingManager.html":{}}}],["loadingmanager.itemloaded('jsroot_scripts",{"_index":2067,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadingmanager.itemloaded('single_script",{"_index":2083,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadjsongeometry",{"_index":2637,"title":{},"body":{"interfaces/Window.html":{}}}],["loadjsrootscripts",{"_index":2030,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadjsrootscripts(jsrootversion",{"_index":2032,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadlabels",{"_index":862,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["loadobjecttypes",{"_index":1248,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loadobjecttypes(eventdata",{"_index":1306,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loadobjgeometry",{"_index":2603,"title":{},"body":{"interfaces/Window.html":{}}}],["loadrootgeometry",{"_index":2650,"title":{},"body":{"interfaces/Window.html":{}}}],["loadrootjsongeometry",{"_index":2640,"title":{},"body":{"interfaces/Window.html":{}}}],["loads",{"_index":2566,"title":{},"body":{"interfaces/Window.html":{}}}],["loadsceneconfiguration(sceneconfiguration",{"_index":2669,"title":{},"body":{"interfaces/Window.html":{}}}],["loadscript",{"_index":2031,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadscript(scripturl",{"_index":2044,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadstatefromjson",{"_index":1400,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["loadstatefromjson(json",{"_index":1442,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["local",{"_index":371,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["locationhref",{"_index":2333,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["locationhref.substr(locationhref.lastindexof",{"_index":2336,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["log",{"_index":1226,"title":{},"body":{"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["logger",{"_index":1005,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["logger.ts",{"_index":1212,"title":{},"body":{"classes/InfoLogger.html":{},"coverage.html":{}}}],["logger.ts:15",{"_index":1224,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:26",{"_index":1227,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:6",{"_index":1216,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:8",{"_index":1218,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logging",{"_index":1006,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/SelectionManager.html":{}}}],["logo",{"_index":2372,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["logs",{"_index":1217,"title":{},"body":{"classes/InfoLogger.html":{},"interfaces/Window.html":{}}}],["long",{"_index":1841,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["look",{"_index":2714,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["lookatobject(uuid",{"_index":2715,"title":{},"body":{"interfaces/Window.html":{}}}],["loop",{"_index":1983,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["lowres",{"_index":673,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["made",{"_index":692,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{}}}],["main",{"_index":914,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/URLOptionsManager.html":{}}}],["mainlogo",{"_index":2371,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["mainrenderer",{"_index":1909,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.domelement.id",{"_index":2002,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.setpixelratio(window.devicepixelratio",{"_index":2001,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.setsize(rendererwidth",{"_index":2000,"title":{},"body":{"classes/RendererManager.html":{}}}],["major",{"_index":2997,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":307,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["making",{"_index":305,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager",{"_index":69,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["manager.ts",{"_index":68,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["manager.ts:10",{"_index":1932,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:100",{"_index":2417,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:101",{"_index":1351,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:102",{"_index":2150,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:104",{"_index":1966,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:108",{"_index":1358,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:11",{"_index":1338,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:111",{"_index":2132,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:118",{"_index":1970,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:12",{"_index":920,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:122",{"_index":2423,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:123",{"_index":2273,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:126",{"_index":1943,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:128",{"_index":2129,"title":{},"body":{"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{}}}],["manager.ts:130",{"_index":2427,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:131",{"_index":2270,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:134",{"_index":1944,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:139",{"_index":2268,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:14",{"_index":918,"title":{},"body":{"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:140",{"_index":2425,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:141",{"_index":118,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:142",{"_index":1945,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:145",{"_index":2123,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:147",{"_index":2275,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:152",{"_index":1936,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:158",{"_index":2118,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:16",{"_index":927,"title":{},"body":{"classes/EffectsManager.html":{},"classes/LoadingManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:162",{"_index":1954,"title":{},"body":{"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:169",{"_index":2431,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:174",{"_index":1973,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:18",{"_index":923,"title":{},"body":{"classes/EffectsManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:186",{"_index":1939,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:19",{"_index":1335,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:199",{"_index":1961,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:20",{"_index":915,"title":{},"body":{"classes/EffectsManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:207",{"_index":2121,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:209",{"_index":1942,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:21",{"_index":2422,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:218",{"_index":2144,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:219",{"_index":1952,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:22",{"_index":2116,"title":{},"body":{"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{}}}],["manager.ts:227",{"_index":1959,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:23",{"_index":909,"title":{},"body":{"classes/EffectsManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:24",{"_index":91,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:241",{"_index":2136,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:25",{"_index":2420,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:26",{"_index":2127,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:27",{"_index":1041,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:28",{"_index":2128,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:29",{"_index":2416,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:30",{"_index":2108,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:31",{"_index":2407,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:314",{"_index":123,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:32",{"_index":2112,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:33",{"_index":1948,"title":{},"body":{"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:36",{"_index":1344,"title":{},"body":{"classes/LoadingManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:38",{"_index":2111,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:390",{"_index":152,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:40",{"_index":2410,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:41",{"_index":2115,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:42",{"_index":2325,"title":{},"body":{"classes/URLOptionsManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:43",{"_index":2107,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:44",{"_index":1353,"title":{},"body":{"classes/LoadingManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:45",{"_index":1957,"title":{},"body":{"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:450",{"_index":144,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:47",{"_index":164,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:48",{"_index":937,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:489",{"_index":129,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:499",{"_index":103,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:516",{"_index":171,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:52",{"_index":1057,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:55",{"_index":2435,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:57",{"_index":2318,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:6",{"_index":1337,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:60",{"_index":1355,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:61",{"_index":935,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:63",{"_index":1950,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:65",{"_index":2142,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:66",{"_index":1052,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:69",{"_index":928,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:70",{"_index":132,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:78",{"_index":2266,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:8",{"_index":1931,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:80",{"_index":1346,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:83",{"_index":2148,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:85",{"_index":1055,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:88",{"_index":939,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:89",{"_index":1349,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:9",{"_index":1342,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:90",{"_index":2418,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:94",{"_index":2133,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:96",{"_index":1963,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:97",{"_index":941,"title":{},"body":{"classes/EffectsManager.html":{},"classes/StateManager.html":{}}}],["manager/animations",{"_index":67,"title":{},"body":{"classes/AnimationsManager.html":{},"coverage.html":{}}}],["manager/controls",{"_index":3043,"title":{},"body":{"coverage.html":{}}}],["manager/dat",{"_index":640,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"coverage.html":{}}}],["manager/effects",{"_index":892,"title":{},"body":{"classes/EffectsManager.html":{},"coverage.html":{}}}],["manager/export",{"_index":1034,"title":{},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["manager/import",{"_index":3047,"title":{},"body":{"coverage.html":{}}}],["manager/index.ts",{"_index":3050,"title":{},"body":{"coverage.html":{}}}],["manager/phoenix",{"_index":534,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["manager/renderer",{"_index":1907,"title":{},"body":{"classes/RendererManager.html":{},"coverage.html":{}}}],["manager/scene",{"_index":725,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"coverage.html":{}}}],["manager/selection",{"_index":2091,"title":{},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["manager/vr",{"_index":2384,"title":{},"body":{"classes/VRManager.html":{},"coverage.html":{}}}],["managers/loading",{"_index":2053,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["managers/state",{"_index":2527,"title":{},"body":{"interfaces/Window.html":{}}}],["managers/three",{"_index":1031,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["managers/ui",{"_index":533,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["managers/url",{"_index":2528,"title":{},"body":{"interfaces/Window.html":{}}}],["manages",{"_index":910,"title":{},"body":{"classes/EffectsManager.html":{},"interfaces/Window.html":{}}}],["managing",{"_index":70,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["manipulate",{"_index":1004,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["manual",{"_index":1486,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["manually",{"_index":281,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["map((key",{"_index":2206,"title":{},"body":{"classes/SelectionManager.html":{}}}],["matching",{"_index":63,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":1714,"title":{},"body":{"classes/PhoenixObjects.html":{},"interfaces/Window.html":{}}}],["material.opacity",{"_index":1718,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.abs(1",{"_index":1851,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["math.abs(position.z",{"_index":1752,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.abs(returnvec.x",{"_index":1165,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.abs(returnvec.y",{"_index":1166,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.abs(returnvec.z",{"_index":1167,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.atan(math.pow(math.e",{"_index":585,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["math.cos(phi",{"_index":1706,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["math.cos(theta",{"_index":1710,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["math.log(math.tan(theta",{"_index":586,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["math.pi",{"_index":222,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CoordinateHelper.html":{}}}],["math.pow(fh",{"_index":1178,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.round(p",{"_index":1887,"title":{},"body":{"classes/RKHelper.html":{}}}],["math.sign(1",{"_index":1854,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["math.sin(phi",{"_index":1704,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["math.sin(theta",{"_index":1708,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["math.sqrt(cylradius2",{"_index":1751,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.sqrt(maxr2",{"_index":1750,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.sqrt(pos.x",{"_index":1694,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["max",{"_index":679,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["maxcut",{"_index":850,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["maxcut.onchange((value",{"_index":852,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["maxentries",{"_index":1214,"title":{},"body":{"classes/InfoLogger.html":{}}}],["maximum",{"_index":627,"title":{},"body":{"classes/Cut.html":{}}}],["maxpositionx",{"_index":649,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["maxpositiony",{"_index":650,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["maxpositionz",{"_index":651,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["maxr2",{"_index":1747,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["maxstepsize",{"_index":2236,"title":{},"body":{"classes/State.html":{}}}],["maxvalue",{"_index":618,"title":{},"body":{"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{}}}],["maxz",{"_index":1753,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["menu",{"_index":518,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["menu's",{"_index":700,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["menu.onchange((value",{"_index":816,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["menu/phoenix",{"_index":535,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["menunodename",{"_index":1558,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["menus",{"_index":1003,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"changelog.html":{}}}],["mesh",{"_index":184,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["mesh(geometry",{"_index":1719,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh(particlegeometry",{"_index":385,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["mesh.name",{"_index":1723,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.position.copy(translation",{"_index":1720,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.quaternion.copy(quaternion",{"_index":1721,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.userdata",{"_index":1722,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.uuid",{"_index":1728,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["meshbasicmaterial",{"_index":183,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["meshphongmaterial",{"_index":1685,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["meshtoonmaterial",{"_index":1681,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["met",{"_index":1663,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["metadata",{"_index":1019,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["method",{"_index":2759,"title":{},"body":{"changelog.html":{}}}],["methods",{"_index":22,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["metparams",{"_index":1662,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["metparams.color",{"_index":1781,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["metparams.ety",{"_index":1777,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["metparams.uuid",{"_index":1788,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mev",{"_index":1879,"title":{},"body":{"classes/RKHelper.html":{}}}],["min",{"_index":1580,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["mincut",{"_index":842,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["mincut.onchange((value",{"_index":848,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["minimum",{"_index":625,"title":{},"body":{"classes/Cut.html":{}}}],["minor",{"_index":2917,"title":{},"body":{"changelog.html":{}}}],["minvalue",{"_index":619,"title":{},"body":{"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{}}}],["miscellaneous",{"_index":3098,"title":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":1786,"title":{},"body":{"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["missingenergy",{"_index":3112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mm",{"_index":1878,"title":{},"body":{"classes/RKHelper.html":{}}}],["mock",{"_index":3117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mocking",{"_index":3135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":2124,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["model",{"_index":2331,"title":{},"body":{"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["modular",{"_index":3064,"title":{},"body":{"index.html":{}}}],["module",{"_index":3074,"title":{},"body":{"index.html":{}}}],["modules",{"_index":3095,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["mom",{"_index":1818,"title":{},"body":{"classes/PrettySymbols.html":{},"changelog.html":{}}}],["momentum",{"_index":1115,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["more",{"_index":1291,"title":{},"body":{"classes/LHCbLoader.html":{},"changelog.html":{}}}],["mouse",{"_index":2119,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.x",{"_index":2222,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.y",{"_index":2225,"title":{},"body":{"classes/SelectionManager.html":{}}}],["move",{"_index":206,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["moveindirection",{"_index":2404,"title":{},"body":{"classes/VRManager.html":{}}}],["moveindirection(direction",{"_index":2428,"title":{},"body":{"classes/VRManager.html":{}}}],["movement",{"_index":2409,"title":{},"body":{"classes/VRManager.html":{}}}],["moving",{"_index":288,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{}}}],["mss",{"_index":1194,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multidimensional",{"_index":174,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["multiple",{"_index":1025,"title":{},"body":{"interfaces/EventDataLoader.html":{},"changelog.html":{}}}],["multiplyscalar(fh",{"_index":1187,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multiplyscalar(fh2",{"_index":1182,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multiplyscalar(qop",{"_index":1152,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multiplyscalar(updatedscale.x",{"_index":293,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["muon",{"_index":427,"title":{},"body":{"classes/CMSObjects.html":{},"classes/LHCbLoader.html":{}}}],["muonchamber",{"_index":477,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(boxobject",{"_index":486,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(lineboxobject",{"_index":487,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams",{"_index":430,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams.color",{"_index":470,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams.uuid",{"_index":488,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams[face",{"_index":444,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchambers",{"_index":3111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["muonparams",{"_index":1302,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["name",{"_index":34,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["name('color",{"_index":773,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('depth",{"_index":819,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('load",{"_index":871,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('max",{"_index":851,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('min",{"_index":846,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('opacity",{"_index":778,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('reset",{"_index":841,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('save",{"_index":870,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('scale",{"_index":787,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('show",{"_index":750,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('size",{"_index":866,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('wireframe",{"_index":759,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('x",{"_index":793,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('y",{"_index":797,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('z",{"_index":800,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('çolor",{"_index":882,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name.split('>').foreach((nodename",{"_index":1536,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["named",{"_index":1340,"title":{},"body":{"classes/LoadingManager.html":{}}}],["names",{"_index":1296,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["namespace",{"_index":2816,"title":{},"body":{"changelog.html":{}}}],["naming",{"_index":1290,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["native",{"_index":568,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["navigator",{"_index":2448,"title":{},"body":{"classes/VRManager.html":{}}}],["ndof",{"_index":1815,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["necessary",{"_index":565,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["need",{"_index":282,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["needed",{"_index":1842,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["new",{"_index":54,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newvalue",{"_index":781,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["node",{"_index":525,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["node.ts",{"_index":1384,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["node.ts:101",{"_index":1444,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:114",{"_index":1451,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:124",{"_index":1426,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:137",{"_index":1448,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:157",{"_index":1429,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:17",{"_index":1416,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:180",{"_index":1441,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:19",{"_index":1415,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:201",{"_index":1443,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:21",{"_index":1419,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:23",{"_index":1421,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:247",{"_index":1434,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:25",{"_index":1407,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:265",{"_index":1439,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:27",{"_index":1414,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:29",{"_index":1417,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:31",{"_index":1420,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:36",{"_index":1409,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:39",{"_index":1408,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:41",{"_index":1405,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:75",{"_index":1423,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:92",{"_index":1446,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild",{"_index":1526,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.loadstatefromjson(childstate",{"_index":1532,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.name",{"_index":1528,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.nodelevel",{"_index":1530,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig",{"_index":1514,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig.label",{"_index":1518,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig.type",{"_index":1516,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig[prop",{"_index":1521,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodefound",{"_index":1533,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodejs.timeout",{"_index":2508,"title":{},"body":{"classes/VRManager.html":{}}}],["nodelevel",{"_index":1391,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodename",{"_index":1537,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodename.trim",{"_index":1538,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodes",{"_index":1412,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["none",{"_index":510,"title":{},"body":{"interfaces/Configuration.html":{},"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["normal",{"_index":925,"title":{},"body":{"classes/EffectsManager.html":{}}}],["normalblending",{"_index":944,"title":{},"body":{"classes/EffectsManager.html":{}}}],["notable",{"_index":2732,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":2439,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["nothing",{"_index":595,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["now",{"_index":607,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["nowdisplayingevent",{"_index":2532,"title":{},"body":{"interfaces/Window.html":{}}}],["npm",{"_index":3071,"title":{},"body":{"index.html":{}}}],["null",{"_index":377,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":101,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["number'].includes",{"_index":2208,"title":{},"body":{"classes/SelectionManager.html":{}}}],["number,onend",{"_index":142,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["numofsteps",{"_index":218,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj",{"_index":803,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/ExportManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["obj.eventobject",{"_index":321,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj.eventobject.name",{"_index":320,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj.eventobject.visible",{"_index":334,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj.obj",{"_index":1070,"title":{},"body":{"classes/ExportManager.html":{}}}],["object",{"_index":169,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["object's",{"_index":770,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["object.assign",{"_index":475,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["object.assign(configoptions",{"_index":1475,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["object.computelinedistances",{"_index":1784,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["object.entries(hidewidgetsoptions).foreach(([urloption",{"_index":2377,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["object.keys(intersectedobject.userdata",{"_index":2205,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(paramscopy",{"_index":1836,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["object.keys(prettyparams",{"_index":2199,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(prettysymbols.symbols).find((symbol",{"_index":1829,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["object.keys(sceneconfiguration.eventdata",{"_index":2670,"title":{},"body":{"interfaces/Window.html":{}}}],["object.keys(this.progressitems).length",{"_index":1374,"title":{},"body":{"classes/LoadingManager.html":{}}}],["object.keys(trackscollections",{"_index":1873,"title":{},"body":{"classes/RKHelper.html":{}}}],["object.name",{"_index":1097,"title":{},"body":{"classes/ExportManager.html":{},"classes/PhoenixObjects.html":{}}}],["object.userdata",{"_index":1785,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["object.uuid",{"_index":1789,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["object.values(this.progressitems).reduce",{"_index":1370,"title":{},"body":{"classes/LoadingManager.html":{}}}],["object3d",{"_index":187,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{}}}],["objectcollection",{"_index":1273,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["objectgroup",{"_index":1270,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["objectname",{"_index":2649,"title":{},"body":{"interfaces/Window.html":{}}}],["objects",{"_index":93,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["objects.ts",{"_index":416,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["objects.ts:129",{"_index":1658,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:196",{"_index":1649,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:25",{"_index":425,"title":{},"body":{"classes/CMSObjects.html":{}}}],["objects.ts:275",{"_index":1678,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:305",{"_index":1672,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:334",{"_index":1645,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:383",{"_index":1668,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:39",{"_index":1665,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:409",{"_index":1661,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objectsgroup",{"_index":2135,"title":{},"body":{"classes/SelectionManager.html":{}}}],["objectsgroup.getobjectbyproperty('uuid",{"_index":2235,"title":{},"body":{"classes/SelectionManager.html":{}}}],["objectstoanimatewithsphere",{"_index":239,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["objectstoanimatewithsphere.foreach((obj",{"_index":319,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["objectstoanimatewithsphere.push",{"_index":313,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["objecttype",{"_index":1089,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["objecttype.children",{"_index":1093,"title":{},"body":{"classes/ExportManager.html":{}}}],["objecttype.name",{"_index":1091,"title":{},"body":{"classes/ExportManager.html":{}}}],["objectvisibility(collectionname",{"_index":834,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["objectvisibility(labelid",{"_index":879,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["objectvisibility(scenemanager.event_data_id",{"_index":817,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["objectvisibility(scenemanager.geometries_id",{"_index":755,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["objexporter",{"_index":1060,"title":{},"body":{"classes/ExportManager.html":{}}}],["objfolder",{"_index":767,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["objfolder.add(this.guiparameters[name",{"_index":804,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["objfolder.remove",{"_index":1594,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["objfolder.togglestate",{"_index":1588,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["observable",{"_index":31,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["observed",{"_index":15,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["olddrawrangecount",{"_index":265,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["older",{"_index":2754,"title":{},"body":{"changelog.html":{}}}],["onanimationend",{"_index":131,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["onanimationsphereupdate",{"_index":317,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["onanimationsphereupdate(new",{"_index":351,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["onanimationstart",{"_index":117,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["once",{"_index":309,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ScriptLoader.html":{}}}],["onchange",{"_index":1578,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["onchange((value",{"_index":794,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["onclick",{"_index":1593,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{}}}],["oncolorchange",{"_index":855,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["oncontrollerselectend",{"_index":2392,"title":{},"body":{"classes/VRManager.html":{}}}],["oncontrollerselectstart",{"_index":2393,"title":{},"body":{"classes/VRManager.html":{}}}],["ondisplayedeventchange",{"_index":2531,"title":{},"body":{"interfaces/Window.html":{}}}],["ondocumentmousedown",{"_index":2095,"title":{},"body":{"classes/SelectionManager.html":{}}}],["one",{"_index":811,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["onend",{"_index":102,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["oneventschange",{"_index":2530,"title":{},"body":{"interfaces/Window.html":{}}}],["onfileread",{"_index":3114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onfileread?.(e.target.result.tostring",{"_index":3130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onloadcallbacks",{"_index":1325,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onloadlabels",{"_index":857,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["onprogress",{"_index":1334,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onprogress(itemname",{"_index":1354,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onprogresscallbacks",{"_index":1326,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onsavelabels",{"_index":856,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["onsessionended",{"_index":2394,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["onsessionstarted",{"_index":2434,"title":{},"body":{"classes/VRManager.html":{}}}],["onsizechange",{"_index":854,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["ontoggle",{"_index":853,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{}}}],["ontouchdown",{"_index":2096,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ontouchmove",{"_index":2097,"title":{},"body":{"classes/SelectionManager.html":{}}}],["onupdate",{"_index":23,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["onupdate(callback",{"_index":43,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["onvrsessionended",{"_index":2395,"title":{},"body":{"classes/VRManager.html":{}}}],["onvrsessionstarted",{"_index":2396,"title":{},"body":{"classes/VRManager.html":{}}}],["opacity",{"_index":383,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["opacity.onfinishchange((newvalue",{"_index":779,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["operations",{"_index":73,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["optimal",{"_index":2948,"title":{},"body":{"changelog.html":{}}}],["optimize",{"_index":2846,"title":{},"body":{"changelog.html":{}}}],["option",{"_index":2324,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["optional",{"_index":21,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["optionalfeatures",{"_index":2451,"title":{},"body":{"classes/VRManager.html":{}}}],["optionally",{"_index":1652,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["options",{"_index":507,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["origin",{"_index":127,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["original",{"_index":287,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PrettySymbols.html":{}}}],["out",{"_index":274,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["outdated",{"_index":2441,"title":{},"body":{"classes/VRManager.html":{}}}],["outline",{"_index":894,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["outlinepass",{"_index":933,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["outlinepass.overlaymaterial.blending",{"_index":966,"title":{},"body":{"classes/EffectsManager.html":{}}}],["outlinepass.visibleedgecolor.set(0xdf5330",{"_index":968,"title":{},"body":{"classes/EffectsManager.html":{}}}],["outlinepass.visibleedgecolor.set(0xffff66",{"_index":967,"title":{},"body":{"classes/EffectsManager.html":{}}}],["output",{"_index":1078,"title":{},"body":{"classes/ExportManager.html":{},"changelog.html":{}}}],["over",{"_index":243,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["overlay",{"_index":1929,"title":{},"body":{"classes/RendererManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["overlaycanvas",{"_index":1967,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["overlayed",{"_index":2697,"title":{},"body":{"interfaces/Window.html":{}}}],["overlayrenderer",{"_index":1910,"title":{},"body":{"classes/RendererManager.html":{}}}],["overview",{"_index":3096,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":1832,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["p",{"_index":1116,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["package",{"_index":3010,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"index.html":{}}}],["packages",{"_index":2834,"title":{},"body":{"changelog.html":{}}}],["page",{"_index":2326,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["panel",{"_index":1222,"title":{},"body":{"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/SelectionManager.html":{}}}],["param",{"_index":56,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["parameter",{"_index":1827,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parameters",{"_index":32,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["parameterss",{"_index":1823,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parametrised",{"_index":2963,"title":{},"body":{"changelog.html":{}}}],["paramkey",{"_index":1835,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["params",{"_index":1274,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PrettySymbols.html":{}}}],["paramscopy",{"_index":1833,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams",{"_index":1859,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[0",{"_index":1856,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[1",{"_index":1858,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[2",{"_index":1849,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[3",{"_index":1848,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[4",{"_index":1852,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy?.dparams",{"_index":1846,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy['pos",{"_index":1843,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy[paramkey",{"_index":1839,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy[symbol",{"_index":1838,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parent",{"_index":1392,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{}}}],["parentelement",{"_index":2046,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["parentelement.appendchild(scriptelement",{"_index":2086,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["parentnode",{"_index":1585,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["parentnode.addchild(name",{"_index":1587,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["parse",{"_index":1074,"title":{},"body":{"classes/ExportManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["parsed",{"_index":2630,"title":{},"body":{"interfaces/Window.html":{}}}],["parsegltfgeometry",{"_index":2627,"title":{},"body":{"interfaces/Window.html":{}}}],["parseobjgeometry",{"_index":2609,"title":{},"body":{"interfaces/Window.html":{}}}],["parsephoenixdisplay(input",{"_index":2617,"title":{},"body":{"interfaces/Window.html":{}}}],["parsephoenixevents(eventsdata",{"_index":2567,"title":{},"body":{"interfaces/Window.html":{}}}],["parses",{"_index":1309,"title":{},"body":{"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["parsing",{"_index":2912,"title":{},"body":{"changelog.html":{}}}],["part",{"_index":420,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["part_list",{"_index":1319,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["particle",{"_index":109,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["particle1",{"_index":384,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle1.clone",{"_index":387,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle1.position.setz(distancefromorigin",{"_index":388,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle2",{"_index":386,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle2.position.setz",{"_index":389,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particlecolor",{"_index":150,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particlegeometry",{"_index":378,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particlematerial",{"_index":381,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particles",{"_index":154,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particlesize",{"_index":148,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletoorigin",{"_index":394,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletweens",{"_index":391,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletweens.push(particletoorigin",{"_index":396,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletweens[0].oncomplete",{"_index":397,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["pass",{"_index":895,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["passed",{"_index":1200,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["passes",{"_index":911,"title":{},"body":{"classes/EffectsManager.html":{}}}],["passindex",{"_index":970,"title":{},"body":{"classes/EffectsManager.html":{}}}],["path",{"_index":1196,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["pathlength",{"_index":2237,"title":{},"body":{"classes/State.html":{}}}],["pdata_list",{"_index":1320,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["peek",{"_index":1736,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["per",{"_index":556,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["perform",{"_index":643,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["performance",{"_index":1980,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["performed",{"_index":1110,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["performing",{"_index":1105,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["persist",{"_index":2876,"title":{},"body":{"changelog.html":{}}}],["perspective",{"_index":1575,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["phi",{"_index":560,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["phi=0",{"_index":597,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["phi=pi",{"_index":604,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["phnx",{"_index":2616,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenix",{"_index":526,"title":{},"body":{"interfaces/Configuration.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["phoenix.min.js",{"_index":3087,"title":{},"body":{"index.html":{}}}],["phoenixloader",{"_index":1237,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/URLOptionsManager.html":{},"coverage.html":{},"index.html":{}}}],["phoenixloader:121",{"_index":1294,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:142",{"_index":1307,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:17",{"_index":1253,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:19",{"_index":1260,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:21",{"_index":1252,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:23",{"_index":1256,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:25",{"_index":1259,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:27",{"_index":1255,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:339",{"_index":1287,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:386",{"_index":1272,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:420",{"_index":1305,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:437",{"_index":1301,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:45",{"_index":1292,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:490",{"_index":1297,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:545",{"_index":1283,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:571",{"_index":1299,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:81",{"_index":1298,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:97",{"_index":1295,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixmenu",{"_index":1545,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{}}}],["phoenixmenuconfig",{"_index":1425,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["phoenixmenunode",{"_index":523,"title":{"classes/PhoenixMenuNode.html":{}},"body":{"interfaces/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["phoenixmenunode(name",{"_index":1461,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixmenunode.name",{"_index":1624,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["phoenixmenuroot",{"_index":501,"title":{},"body":{"interfaces/Configuration.html":{},"classes/StateManager.html":{}}}],["phoenixmenuui",{"_index":1543,"title":{"classes/PhoenixMenuUI.html":{}},"body":{"classes/PhoenixMenuUI.html":{},"coverage.html":{}}}],["phoenixnodejson",{"_index":1497,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['children",{"_index":1504,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['children'].push(child.getnodestate",{"_index":1505,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['childrenactive",{"_index":1501,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['configs",{"_index":1503,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['name",{"_index":1498,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['nodelevel",{"_index":1499,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['togglestate",{"_index":1500,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixobjects",{"_index":421,"title":{"classes/PhoenixObjects.html":{}},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["phoenixscene",{"_index":2618,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.scene",{"_index":2621,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.sceneconfiguration",{"_index":2620,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixurloptions",{"_index":2332,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["physics",{"_index":417,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["picker",{"_index":769,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["pipe",{"_index":2977,"title":{},"body":{"changelog.html":{}}}],["plane",{"_index":189,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["planes",{"_index":108,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["plength",{"_index":1195,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["point",{"_index":1132,"title":{},"body":{"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pointpos",{"_index":1673,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["points",{"_index":1679,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["points.push(new",{"_index":1775,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsmaterial",{"_index":1683,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos",{"_index":166,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos.x",{"_index":1695,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos.y",{"_index":1696,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos1",{"_index":1144,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos2",{"_index":1155,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos[0",{"_index":200,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["pos[1",{"_index":202,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["pos[2",{"_index":203,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["position",{"_index":136,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["position.length",{"_index":1749,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["position.setlength",{"_index":1748,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["position.setlength((position.length",{"_index":1754,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["position.z",{"_index":1755,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["positioning",{"_index":790,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["positions",{"_index":172,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["positions.concat(extrapolatedpos",{"_index":1906,"title":{},"body":{"classes/RKHelper.html":{}}}],["positions.length",{"_index":1693,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["positions.push([startpos.x",{"_index":1898,"title":{},"body":{"classes/RKHelper.html":{}}}],["positive",{"_index":603,"title":{},"body":{"classes/CoordinateHelper.html":{},"changelog.html":{}}}],["possible",{"_index":2945,"title":{},"body":{"changelog.html":{}}}],["post",{"_index":2157,"title":{},"body":{"classes/SelectionManager.html":{}}}],["powerpreference",{"_index":1978,"title":{},"body":{"classes/RendererManager.html":{}}}],["preselectionantialias",{"_index":2098,"title":{},"body":{"classes/SelectionManager.html":{}}}],["presenting",{"_index":3068,"title":{},"body":{"index.html":{}}}],["preset",{"_index":528,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["presetview",{"_index":527,"title":{"classes/PresetView.html":{}},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"coverage.html":{}}}],["presetviews",{"_index":502,"title":{},"body":{"interfaces/Configuration.html":{}}}],["prettier",{"_index":2775,"title":{},"body":{"changelog.html":{}}}],["pretty",{"_index":1809,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams",{"_index":1847,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['d0",{"_index":1855,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['q",{"_index":1853,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['z0",{"_index":1857,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['|p",{"_index":1850,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettyparams",{"_index":2196,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettyparams[key",{"_index":2203,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettysymbol",{"_index":1828,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettysymbols",{"_index":1568,"title":{"classes/PrettySymbols.html":{}},"body":{"classes/PhoenixMenuUI.html":{},"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["prettysymbols.getprettyparams",{"_index":2197,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettysymbols.getprettysymbol(cut.field",{"_index":1616,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["prettysymbols.getprettysymbol(paramkey",{"_index":1837,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettysymbols.symbols[symbol].includes(param",{"_index":1830,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["previous",{"_index":1410,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{}}}],["previousscale",{"_index":284,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["prevlocalclipping",{"_index":372,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["prevnode",{"_index":1535,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.addchild(nodename",{"_index":1542,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.children.find(child",{"_index":1540,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.findintree(nodename",{"_index":1539,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["print",{"_index":1844,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["printed",{"_index":1822,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["private",{"_index":18,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["probably",{"_index":1888,"title":{},"body":{"classes/RKHelper.html":{}}}],["process",{"_index":426,"title":{},"body":{"classes/CMSObjects.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["process(data",{"_index":1265,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["processed",{"_index":1250,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["processes",{"_index":2667,"title":{},"body":{"interfaces/Window.html":{}}}],["processing",{"_index":521,"title":{},"body":{"interfaces/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/SelectionManager.html":{},"index.html":{}}}],["progress",{"_index":1339,"title":{},"body":{"classes/LoadingManager.html":{},"classes/VRManager.html":{}}}],["progresses",{"_index":1356,"title":{},"body":{"classes/LoadingManager.html":{}}}],["progressitems",{"_index":1327,"title":{},"body":{"classes/LoadingManager.html":{}}}],["project",{"_index":2733,"title":{},"body":{"changelog.html":{}}}],["promise",{"_index":2040,"title":{},"body":{"classes/ScriptLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["promise((resolve",{"_index":2069,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["prop",{"_index":1520,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["propagate",{"_index":1189,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["propagate(startpos",{"_index":2020,"title":{},"body":{"classes/RungeKutta.html":{}}}],["propagation",{"_index":105,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["propagator",{"_index":1866,"title":{},"body":{"classes/RKHelper.html":{}}}],["properties",{"_index":17,"title":{},"body":{"classes/ActiveVariable.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["props",{"_index":2204,"title":{},"body":{"classes/SelectionManager.html":{}}}],["props.join",{"_index":2214,"title":{},"body":{"classes/SelectionManager.html":{}}}],["props.length",{"_index":2213,"title":{},"body":{"classes/SelectionManager.html":{}}}],["protected",{"_index":1240,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["pseudorapidity",{"_index":570,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["pt",{"_index":1813,"title":{},"body":{"classes/PrettySymbols.html":{},"changelog.html":{}}}],["public",{"_index":20,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["pushed",{"_index":2415,"title":{},"body":{"classes/VRManager.html":{}}}],["puts",{"_index":601,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["q",{"_index":1114,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["qop",{"_index":1120,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["quaternion",{"_index":550,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["quaternion.multiply(quaternion2",{"_index":609,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["quaternion.setfromunitvectors(v1",{"_index":600,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["quaternion2",{"_index":605,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["quaternion2.setfromaxisangle(new",{"_index":606,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["radians",{"_index":579,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["radius",{"_index":216,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CoordinateHelper.html":{}}}],["range",{"_index":1613,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["rangeslider",{"_index":1454,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["ratio",{"_index":1117,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["raycaster",{"_index":2151,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.intersectobjects(this.scene.children",{"_index":2230,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.params.line.threshold",{"_index":2229,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.setfromcamera(mouse",{"_index":2228,"title":{},"body":{"classes/SelectionManager.html":{}}}],["reachedhits",{"_index":325,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["reachedhits.length",{"_index":329,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["reaches",{"_index":310,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["react",{"_index":3094,"title":{},"body":{"index.html":{}}}],["read",{"_index":3118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reader",{"_index":3127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reader.onload",{"_index":3129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reader.readastext(configfile",{"_index":3132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["readonly",{"_index":1810,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/VRManager.html":{}}}],["realistic",{"_index":2857,"title":{},"body":{"changelog.html":{}}}],["receives",{"_index":1308,"title":{},"body":{"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["reconstruct",{"_index":1310,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["reconstructing",{"_index":1278,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["recover",{"_index":1046,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["redundant",{"_index":2848,"title":{},"body":{"changelog.html":{}}}],["refactoring",{"_index":2998,"title":{},"body":{"changelog.html":{}}}],["references",{"_index":1676,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["reject",{"_index":2070,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["related",{"_index":72,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["released",{"_index":2414,"title":{},"body":{"classes/VRManager.html":{}}}],["reload",{"_index":2583,"title":{},"body":{"interfaces/Window.html":{}}}],["remaining",{"_index":349,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["remove",{"_index":374,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["remove').name('remove",{"_index":805,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["removechild",{"_index":1401,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["removechild(child",{"_index":1445,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["removecontrols",{"_index":1921,"title":{},"body":{"classes/RendererManager.html":{}}}],["removecontrols(renderer",{"_index":1953,"title":{},"body":{"classes/RendererManager.html":{}}}],["removed",{"_index":724,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{}}}],["removeeventlistener('click",{"_index":2183,"title":{},"body":{"classes/SelectionManager.html":{}}}],["removeeventlistener('mousemove",{"_index":2182,"title":{},"body":{"classes/SelectionManager.html":{}}}],["removeeventlistener('touchstart",{"_index":2184,"title":{},"body":{"classes/SelectionManager.html":{}}}],["removelabel",{"_index":660,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["removelabel').name('remove",{"_index":888,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["removelabel(labelid",{"_index":719,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["removelabelnode",{"_index":1548,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["removelabelnode(labelid",{"_index":1565,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["removeobj",{"_index":661,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["removeobj(name",{"_index":722,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["removepass",{"_index":905,"title":{},"body":{"classes/EffectsManager.html":{}}}],["removepass(pass",{"_index":938,"title":{},"body":{"classes/EffectsManager.html":{}}}],["removing",{"_index":2747,"title":{},"body":{"changelog.html":{}}}],["render",{"_index":901,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["render(scene",{"_index":1956,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendered",{"_index":1968,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderer",{"_index":98,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["renderer.localclippingenabled",{"_index":2016,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderera",{"_index":1975,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererb",{"_index":1972,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererelement",{"_index":2220,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererelement.clientheight",{"_index":2227,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererelement.clientwidth",{"_index":2224,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererheight",{"_index":1997,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderermanager",{"_index":90,"title":{"classes/RendererManager.html":{}},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"coverage.html":{}}}],["renderers",{"_index":1911,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererwidth",{"_index":1994,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendering",{"_index":924,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["renderpass",{"_index":922,"title":{},"body":{"classes/EffectsManager.html":{}}}],["renderpass(this.scene",{"_index":953,"title":{},"body":{"classes/EffectsManager.html":{}}}],["renders",{"_index":2636,"title":{},"body":{"interfaces/Window.html":{}}}],["repo",{"_index":2852,"title":{},"body":{"changelog.html":{}}}],["representation",{"_index":2411,"title":{},"body":{"classes/VRManager.html":{}}}],["representing",{"_index":998,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["represents",{"_index":993,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["request",{"_index":2841,"title":{},"body":{"changelog.html":{}}}],["required",{"_index":3076,"title":{},"body":{"index.html":{}}}],["res.json",{"_index":2351,"title":{},"body":{"classes/URLOptionsManager.html":{},"index.html":{}}}],["res.text",{"_index":2358,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["reset",{"_index":620,"title":{},"body":{"classes/Cut.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"changelog.html":{}}}],["resetcut",{"_index":828,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["resize",{"_index":2859,"title":{},"body":{"changelog.html":{}}}],["resolve",{"_index":2082,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["resolved",{"_index":2041,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["resources",{"_index":1258,"title":{},"body":{"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["responsible",{"_index":520,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/Window.html":{}}}],["restore",{"_index":348,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixMenuNode.html":{}}}],["restored",{"_index":1413,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["restoring",{"_index":286,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["restructure",{"_index":2823,"title":{},"body":{"changelog.html":{}}}],["result",{"_index":62,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["resultant",{"_index":1654,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["results",{"_index":64,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":1010,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["return",{"_index":205,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["returns",{"_index":49,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["returnvec",{"_index":1162,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["reverse",{"_index":590,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["revert",{"_index":370,"title":{},"body":{"classes/AnimationsManager.html":{},"changelog.html":{}}}],["right",{"_index":464,"title":{},"body":{"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["rkhelper",{"_index":1687,"title":{"classes/RKHelper.html":{}},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"coverage.html":{}}}],["rkhelper.extrapolatetrackpositions(track",{"_index":1876,"title":{},"body":{"classes/RKHelper.html":{}}}],["rkhelper.extrapolatetrackpositions(trackparams",{"_index":1698,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["rkstate",{"_index":1204,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.dir",{"_index":1206,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.maxstepsize",{"_index":1209,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.p",{"_index":1207,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.pathlength",{"_index":1210,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.pos",{"_index":1205,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.q",{"_index":1208,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rollup",{"_index":2878,"title":{},"body":{"changelog.html":{}}}],["root",{"_index":524,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["rotate",{"_index":551,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{}}}],["rotate.chain(end",{"_index":229,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["rotateclipping(jsondata['eventdisplay']['clippingangle",{"_index":2303,"title":{},"body":{"classes/StateManager.html":{}}}],["rotationpositions",{"_index":224,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["rotations",{"_index":566,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["routes",{"_index":2985,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":1022,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["run${this.eventmetadata.runnumber}_evt${this.eventmetadata.eventnumber}.json",{"_index":2290,"title":{},"body":{"classes/StateManager.html":{}}}],["runge",{"_index":1106,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rungekutta",{"_index":1108,"title":{"classes/RungeKutta.html":{}},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["runnumber",{"_index":1317,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/StateManager.html":{}}}],["same",{"_index":1279,"title":{},"body":{"classes/LHCbLoader.html":{},"changelog.html":{}}}],["save",{"_index":1053,"title":{},"body":{"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["saved",{"_index":1047,"title":{},"body":{"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["saveeventdataconfiguration",{"_index":1037,"title":{},"body":{"classes/ExportManager.html":{}}}],["saveeventdataconfiguration(eventdata",{"_index":1051,"title":{},"body":{"classes/ExportManager.html":{}}}],["savefile",{"_index":1064,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["savefile(output",{"_index":1083,"title":{},"body":{"classes/ExportManager.html":{}}}],["savefile(result",{"_index":1069,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration",{"_index":1038,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration(geometries",{"_index":1054,"title":{},"body":{"classes/ExportManager.html":{}}}],["savelabels",{"_index":861,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["saves",{"_index":2565,"title":{},"body":{"interfaces/Window.html":{}}}],["savesceneconfig",{"_index":1039,"title":{},"body":{"classes/ExportManager.html":{}}}],["savesceneconfig(eventdata",{"_index":1056,"title":{},"body":{"classes/ExportManager.html":{}}}],["savestateasjson",{"_index":2256,"title":{},"body":{"classes/StateManager.html":{}}}],["scale",{"_index":250,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["scalemenu",{"_index":786,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["scalemenu.onchange((value",{"_index":788,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["scaleobject(scenemanager.geometries_id",{"_index":1584,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["scaletween",{"_index":276,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["scaletween.onupdate((updatedscale",{"_index":283,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["scaling",{"_index":273,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["scene",{"_index":87,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["scene's",{"_index":2251,"title":{},"body":{"classes/StateManager.html":{}}}],["scene.background",{"_index":1990,"title":{},"body":{"classes/RendererManager.html":{}}}],["scene.phnx",{"_index":1084,"title":{},"body":{"classes/ExportManager.html":{}}}],["scene/geometry",{"_index":2632,"title":{},"body":{"interfaces/Window.html":{}}}],["scenecolor",{"_index":1989,"title":{},"body":{"classes/RendererManager.html":{}}}],["sceneconfig",{"_index":1072,"title":{},"body":{"classes/ExportManager.html":{}}}],["sceneconfiguration",{"_index":1081,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["sceneconfiguration.eventdata[objecttype",{"_index":2673,"title":{},"body":{"interfaces/Window.html":{}}}],["sceneconfiguration.geometries",{"_index":2676,"title":{},"body":{"interfaces/Window.html":{}}}],["scenemanager",{"_index":179,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"coverage.html":{}}}],["scenemanager.event_data_id",{"_index":830,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["scenemanager.labels_id",{"_index":880,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["sceneurl",{"_index":2691,"title":{},"body":{"interfaces/Window.html":{}}}],["screen",{"_index":2707,"title":{},"body":{"interfaces/Window.html":{}}}],["screenshot",{"_index":2955,"title":{},"body":{"changelog.html":{}}}],["script",{"_index":2025,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{},"index.html":{}}}],["script[src",{"_index":2073,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement",{"_index":2075,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.addeventlistener('load",{"_index":2081,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.onerror",{"_index":2084,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.setattribute('data",{"_index":2080,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.src",{"_index":2079,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.type",{"_index":2077,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists",{"_index":2071,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists.length",{"_index":2074,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists[0].addeventlistener('load",{"_index":2089,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists[0].dataset.loaded",{"_index":2088,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptfor",{"_index":2045,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptloader",{"_index":2023,"title":{"classes/ScriptLoader.html":{}},"body":{"classes/ScriptLoader.html":{},"coverage.html":{}}}],["scriptloader.loadscript(jsroot_cdn_url",{"_index":2066,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scripts",{"_index":2028,"title":{},"body":{"classes/ScriptLoader.html":{},"miscellaneous/variables.html":{}}}],["scripturl",{"_index":2049,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["search",{"_index":2315,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["second",{"_index":1141,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["secondary",{"_index":1933,"title":{},"body":{"classes/RendererManager.html":{}}}],["see",{"_index":575,"title":{},"body":{"classes/CoordinateHelper.html":{},"changelog.html":{}}}],["select",{"_index":2413,"title":{},"body":{"classes/VRManager.html":{}}}],["selected",{"_index":2109,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selectedobject",{"_index":2099,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selectend",{"_index":2471,"title":{},"body":{"classes/VRManager.html":{}}}],["selecting",{"_index":2131,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selection",{"_index":1726,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["selectionmanager",{"_index":2090,"title":{"classes/SelectionManager.html":{}},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["selectstart",{"_index":2469,"title":{},"body":{"classes/VRManager.html":{}}}],["send",{"_index":2648,"title":{},"body":{"interfaces/Window.html":{}}}],["separate",{"_index":2825,"title":{},"body":{"changelog.html":{}}}],["separator",{"_index":2594,"title":{},"body":{"interfaces/Window.html":{}}}],["service",{"_index":1229,"title":{},"body":{"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/SelectionManager.html":{},"index.html":{}}}],["session",{"_index":2412,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["session.addeventlistener('end",{"_index":2463,"title":{},"body":{"classes/VRManager.html":{}}}],["session_type",{"_index":2397,"title":{},"body":{"classes/VRManager.html":{}}}],["sessioninit",{"_index":2450,"title":{},"body":{"classes/VRManager.html":{}}}],["set",{"_index":354,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["set/get",{"_index":2005,"title":{},"body":{"classes/RendererManager.html":{}}}],["setantialiasing",{"_index":906,"title":{},"body":{"classes/EffectsManager.html":{}}}],["setantialiasing(antialias",{"_index":940,"title":{},"body":{"classes/EffectsManager.html":{}}}],["setcamera",{"_index":2257,"title":{},"body":{"classes/StateManager.html":{}}}],["setcamera(camera",{"_index":2267,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingangle",{"_index":2258,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingangle(angle",{"_index":2269,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingenabled",{"_index":2259,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingenabled(clipping",{"_index":2272,"title":{},"body":{"classes/StateManager.html":{}}}],["seteventdisplay",{"_index":2260,"title":{},"body":{"classes/StateManager.html":{}}}],["seteventdisplay(eventdisplay",{"_index":2274,"title":{},"body":{"classes/StateManager.html":{}}}],["setfixoverlay",{"_index":1922,"title":{},"body":{"classes/RendererManager.html":{}}}],["setfixoverlay(value",{"_index":1958,"title":{},"body":{"classes/RendererManager.html":{}}}],["setflat",{"_index":2600,"title":{},"body":{"interfaces/Window.html":{}}}],["setfromsphericalcoordinates",{"_index":1891,"title":{},"body":{"classes/RKHelper.html":{}}}],["setgeometryopacity(scenemanager.geometries_id",{"_index":1582,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["setinterval",{"_index":2514,"title":{},"body":{"classes/VRManager.html":{}}}],["setlocalclippingenabled",{"_index":1923,"title":{},"body":{"classes/RendererManager.html":{}}}],["setlocalclippingenabled(value",{"_index":1960,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer",{"_index":1924,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer(renderer",{"_index":1962,"title":{},"body":{"classes/RendererManager.html":{}}}],["setoverlayrenderer",{"_index":1925,"title":{},"body":{"classes/RendererManager.html":{}}}],["setoverlayrenderer(overlaycanvas",{"_index":1964,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["setphoenixmenuroot",{"_index":2261,"title":{},"body":{"classes/StateManager.html":{}}}],["setphoenixmenuroot(phoenixmenuroot",{"_index":2276,"title":{},"body":{"classes/StateManager.html":{}}}],["setrenderers",{"_index":1926,"title":{},"body":{"classes/RendererManager.html":{}}}],["setrenderers(renderers",{"_index":1969,"title":{},"body":{"classes/RendererManager.html":{}}}],["sets",{"_index":705,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["setselectedobject",{"_index":2105,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselectedobject(selectedobject",{"_index":2147,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting",{"_index":2106,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting(enable",{"_index":2149,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setting",{"_index":1724,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{}}}],["settings",{"_index":2561,"title":{},"body":{"interfaces/Window.html":{}}}],["setup",{"_index":2786,"title":{},"body":{"changelog.html":{}}}],["setupvrcontrols",{"_index":2405,"title":{},"body":{"classes/VRManager.html":{}}}],["setview",{"_index":1796,"title":{},"body":{"classes/PresetView.html":{}}}],["setvrsession",{"_index":2406,"title":{},"body":{"classes/VRManager.html":{}}}],["setvrsession(renderer",{"_index":2433,"title":{},"body":{"classes/VRManager.html":{}}}],["shade",{"_index":2946,"title":{},"body":{"changelog.html":{}}}],["shaded",{"_index":2602,"title":{},"body":{"interfaces/Window.html":{}}}],["share",{"_index":2783,"title":{},"body":{"changelog.html":{}}}],["show",{"_index":407,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/Window.html":{}}}],["show/hide",{"_index":695,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["showgeometriesmenu",{"_index":748,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["showgeometriesmenu.onchange((value",{"_index":752,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["showing",{"_index":1002,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["showing/hiding",{"_index":747,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["showmenu",{"_index":782,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["showmenu.onchange((value",{"_index":783,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["showmenu.onchange(ontoggle",{"_index":864,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["shown",{"_index":1220,"title":{},"body":{"classes/InfoLogger.html":{}}}],["si",{"_index":1118,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["side",{"_index":473,"title":{},"body":{"classes/CMSObjects.html":{}}}],["sides",{"_index":2599,"title":{},"body":{"interfaces/Window.html":{}}}],["simple",{"_index":3075,"title":{},"body":{"index.html":{}}}],["simplify",{"_index":2795,"title":{},"body":{"changelog.html":{}}}],["single",{"_index":176,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{}}}],["singlelabelnode",{"_index":1631,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["singlelabelnode.name",{"_index":1632,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["singleton",{"_index":1336,"title":{},"body":{"classes/LoadingManager.html":{},"classes/StateManager.html":{}}}],["size",{"_index":156,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["slider",{"_index":785,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["sliders",{"_index":1614,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["smaller",{"_index":2661,"title":{},"body":{"interfaces/Window.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["space",{"_index":1191,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["spec",{"_index":2922,"title":{},"body":{"changelog.html":{}}}],["specific",{"_index":1264,"title":{},"body":{"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["specified",{"_index":1794,"title":{},"body":{"classes/PresetView.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["specifying",{"_index":612,"title":{},"body":{"classes/Cut.html":{},"interfaces/Window.html":{}}}],["sphere",{"_index":186,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["sphere(new",{"_index":238,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["sphere.attributes.position",{"_index":359,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["sphere.name",{"_index":1772,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.position.x",{"_index":1766,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.position.y",{"_index":1768,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.position.z",{"_index":1770,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.userdata",{"_index":1771,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.uuid",{"_index":1774,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["spherebuffergeometry",{"_index":185,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["spherebuffergeometry(1",{"_index":355,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spherebuffergeometry(3",{"_index":1763,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["spherebuffergeometry(particlesize",{"_index":379,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spherical",{"_index":353,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["sphericaltocartesian",{"_index":547,"title":{},"body":{"classes/CoordinateHelper.html":{},"changelog.html":{}}}],["sphericaltocartesian(radius",{"_index":580,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["sphi",{"_index":1703,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["split",{"_index":2828,"title":{},"body":{"changelog.html":{}}}],["splitting",{"_index":2830,"title":{},"body":{"changelog.html":{}}}],["src/.../active",{"_index":3101,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../constants.ts",{"_index":3104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../file.ts",{"_index":3106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../phoenix",{"_index":3102,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../script",{"_index":3105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../url",{"_index":3107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/event",{"_index":2525,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["src/extras/configuration.ts",{"_index":493,"title":{},"body":{"interfaces/Configuration.html":{},"coverage.html":{}}}],["src/extras/cut.model.ts",{"_index":611,"title":{},"body":{"classes/Cut.html":{},"coverage.html":{}}}],["src/extras/cut.model.ts:18",{"_index":629,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:19",{"_index":631,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:20",{"_index":630,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:21",{"_index":632,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:30",{"_index":633,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:6",{"_index":628,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:8",{"_index":622,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/preset",{"_index":1790,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{}}}],["src/helpers/active",{"_index":6,"title":{},"body":{"classes/ActiveVariable.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/helpers/constants.ts",{"_index":3020,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/coordinate",{"_index":539,"title":{},"body":{"classes/CoordinateHelper.html":{},"coverage.html":{}}}],["src/helpers/file.ts",{"_index":3022,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/info",{"_index":1211,"title":{},"body":{"classes/InfoLogger.html":{},"coverage.html":{}}}],["src/helpers/pretty",{"_index":1807,"title":{},"body":{"classes/PrettySymbols.html":{},"coverage.html":{}}}],["src/helpers/rk",{"_index":1860,"title":{},"body":{"classes/RKHelper.html":{},"coverage.html":{}}}],["src/helpers/runge",{"_index":1099,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["src/loaders/cms",{"_index":3026,"title":{},"body":{"coverage.html":{}}}],["src/loaders/event",{"_index":973,"title":{},"body":{"interfaces/EventDataLoader.html":{},"coverage.html":{}}}],["src/loaders/jivexml",{"_index":3029,"title":{},"body":{"coverage.html":{}}}],["src/loaders/jsroot",{"_index":3031,"title":{},"body":{"coverage.html":{}}}],["src/loaders/lhcb",{"_index":1236,"title":{},"body":{"classes/LHCbLoader.html":{},"coverage.html":{}}}],["src/loaders/objects/cms",{"_index":415,"title":{},"body":{"classes/CMSObjects.html":{},"coverage.html":{}}}],["src/loaders/objects/phoenix",{"_index":1635,"title":{},"body":{"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["src/loaders/phoenix",{"_index":3035,"title":{},"body":{"coverage.html":{}}}],["src/loaders/script",{"_index":2024,"title":{},"body":{"classes/ScriptLoader.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/loaders/trackml",{"_index":3037,"title":{},"body":{"coverage.html":{}}}],["src/managers/loading",{"_index":1323,"title":{},"body":{"classes/LoadingManager.html":{},"coverage.html":{}}}],["src/managers/state",{"_index":2250,"title":{},"body":{"classes/StateManager.html":{},"coverage.html":{}}}],["src/managers/three",{"_index":66,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"coverage.html":{}}}],["src/managers/ui",{"_index":639,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/managers/url",{"_index":2308,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["standalone",{"_index":3083,"title":{},"body":{"index.html":{}}}],["start",{"_index":135,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["start.chain(startxaxis",{"_index":227,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["start.start",{"_index":231,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["startclone.delay(500",{"_index":226,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["startdir",{"_index":1192,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["startdir.normalize",{"_index":1902,"title":{},"body":{"classes/RKHelper.html":{}}}],["started",{"_index":2419,"title":{"changelog.html":{},"index.html":{}},"body":{"classes/VRManager.html":{}}}],["starting",{"_index":955,"title":{},"body":{"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["startpos",{"_index":134,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["startpos.y",{"_index":1899,"title":{},"body":{"classes/RKHelper.html":{}}}],["startpos.z",{"_index":1900,"title":{},"body":{"classes/RKHelper.html":{}}}],["startpos[2",{"_index":213,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["starts",{"_index":120,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{}}}],["startxaxis",{"_index":214,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["startxaxis.chain(rotatestart",{"_index":228,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["state",{"_index":1109,"title":{"classes/State.html":{}},"body":{"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["state.dir",{"_index":1143,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.add",{"_index":1183,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().cross(b_first).multiplyscalar(qop",{"_index":1137,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.cross(b_first",{"_index":1135,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.normalize",{"_index":1188,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.p",{"_index":1123,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos",{"_index":1142,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos.add(state.dir.clone().multiplyscalar(fh)).add",{"_index":1179,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.q",{"_index":1121,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.stepsize",{"_index":1174,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.unitc",{"_index":1122,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["statemanager",{"_index":1243,"title":{"classes/StateManager.html":{}},"body":{"classes/LHCbLoader.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["statemanager.instance",{"_index":2278,"title":{},"body":{"classes/StateManager.html":{}}}],["statemanager.loadstatefromjson(jsonstate",{"_index":2353,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["statements",{"_index":3013,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":422,"title":{},"body":{"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/Field.html":{},"classes/LoadingManager.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["stats",{"_index":2376,"title":{},"body":{"classes/URLOptionsManager.html":{},"dependencies.html":{}}}],["statselement",{"_index":2375,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["step",{"_index":223,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/Field.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["step(state",{"_index":1112,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["stepdistance",{"_index":2429,"title":{},"body":{"classes/VRManager.html":{}}}],["steps",{"_index":1190,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["stepsize",{"_index":2238,"title":{},"body":{"classes/State.html":{}}}],["stheta",{"_index":1707,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["still",{"_index":2443,"title":{},"body":{"classes/VRManager.html":{}}}],["stop",{"_index":2516,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["stored",{"_index":1014,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["storing",{"_index":2533,"title":{},"body":{"interfaces/Window.html":{}}}],["string",{"_index":441,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":1016,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["style.setproperty('display",{"_index":2382,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["sub",{"_index":2596,"title":{},"body":{"interfaces/Window.html":{}}}],["super",{"_index":1312,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["support",{"_index":2800,"title":{},"body":{"changelog.html":{}}}],["svg",{"_index":1806,"title":{},"body":{"classes/PresetView.html":{}}}],["swap",{"_index":1974,"title":{},"body":{"classes/RendererManager.html":{}}}],["swapped",{"_index":1976,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers",{"_index":1927,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers(renderera",{"_index":1971,"title":{},"body":{"classes/RendererManager.html":{}}}],["switch",{"_index":2813,"title":{},"body":{"changelog.html":{}}}],["switching",{"_index":530,"title":{},"body":{"interfaces/Configuration.html":{}}}],["symbol",{"_index":1826,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols",{"_index":1570,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{}}}],["symbols.ts",{"_index":1808,"title":{},"body":{"classes/PrettySymbols.html":{},"coverage.html":{}}}],["symbols.ts:24",{"_index":1825,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols.ts:37",{"_index":1821,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols.ts:6",{"_index":1819,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["synchronously",{"_index":2034,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["t",{"_index":27,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["table",{"_index":3055,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3054,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":2052,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["take",{"_index":2207,"title":{},"body":{"classes/SelectionManager.html":{}}}],["takes",{"_index":992,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["tells",{"_index":1655,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["temp",{"_index":2015,"title":{},"body":{"classes/RendererManager.html":{}}}],["tempanchor",{"_index":3138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.click",{"_index":3144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.download",{"_index":3143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.href",{"_index":3141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.remove",{"_index":3145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.style.display",{"_index":3140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["temporary",{"_index":554,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["tesla",{"_index":1104,"title":{},"body":{"classes/Field.html":{}}}],["test",{"_index":820,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["tests",{"_index":2860,"title":{},"body":{"changelog.html":{}}}],["text",{"_index":2212,"title":{},"body":{"classes/SelectionManager.html":{},"changelog.html":{}}}],["text/javascript",{"_index":2078,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["text/plain",{"_index":1071,"title":{},"body":{"classes/ExportManager.html":{}}}],["then((jsonstate",{"_index":2352,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["then((res",{"_index":2350,"title":{},"body":{"classes/URLOptionsManager.html":{},"index.html":{}}}],["then((session",{"_index":2458,"title":{},"body":{"classes/VRManager.html":{}}}],["theta",{"_index":574,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["thetatoeta",{"_index":548,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["thetatoeta(theta",{"_index":582,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["third",{"_index":1153,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["this.activecamera",{"_index":2306,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activecamera.position.fromarray",{"_index":2296,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activecamera.position.toarray",{"_index":2286,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activeobject",{"_index":2168,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.activeobject.update(intersectedobject.uuid",{"_index":2195,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.addrenderer(overlayrenderer",{"_index":2008,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.addrenderer(renderer",{"_index":1981,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.animateevent",{"_index":193,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animateevent.bind(this",{"_index":194,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animateeventwithclipping",{"_index":195,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animateeventwithclipping.bind(this",{"_index":196,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animatewithcollision",{"_index":413,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animatewithcollision(this.animateevent",{"_index":412,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.antialiasing",{"_index":957,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.antialiasrender",{"_index":958,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.applyconfigstate(nodeconfig",{"_index":1523,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.applyconfigstate(this.configs[configslength",{"_index":1478,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.applyeventoptions",{"_index":2337,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.applyhidewidgetsoptions",{"_index":2340,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.buildeventdatafromjson(event",{"_index":2588,"title":{},"body":{"interfaces/Window.html":{}}}],["this.buildgeometryfromparameters(parameters",{"_index":2696,"title":{},"body":{"interfaces/Window.html":{}}}],["this.callbacks.foreach((callback",{"_index":59,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["this.callbacks.push(callback",{"_index":61,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["this.camera",{"_index":950,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["this.cameragroup",{"_index":2473,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.add(this.vrcamera",{"_index":2482,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.position.addscaledvector(direction",{"_index":2523,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.position.copy(this.vrcamera.position",{"_index":2481,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.position.toarray().join",{"_index":2513,"title":{},"body":{"classes/VRManager.html":{}}}],["this.camerapos",{"_index":1804,"title":{},"body":{"classes/PresetView.html":{}}}],["this.children",{"_index":1458,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.filter",{"_index":1527,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.indexof(child",{"_index":1467,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.push(child",{"_index":1465,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.splice(childindex",{"_index":1468,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.childrenactive",{"_index":1502,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.childrentogglestate[child.name",{"_index":1481,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.clippingangle",{"_index":2288,"title":{},"body":{"classes/StateManager.html":{}}}],["this.clippingangle.update(angle",{"_index":2305,"title":{},"body":{"classes/StateManager.html":{}}}],["this.clippingenabled",{"_index":2287,"title":{},"body":{"classes/StateManager.html":{}}}],["this.clippingenabled.update(clipping",{"_index":2304,"title":{},"body":{"classes/StateManager.html":{}}}],["this.collideparticles(1500",{"_index":409,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.composer",{"_index":948,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.addpass(outlinepass",{"_index":969,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.addpass(this.defaultrenderpass",{"_index":954,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.passes.indexof(pass",{"_index":971,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.passes.splice(passindex",{"_index":972,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.render",{"_index":962,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.renderer.render(scene",{"_index":963,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.configs",{"_index":1459,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configs.find",{"_index":1515,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configs.push(configoptions",{"_index":1477,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configuration",{"_index":2545,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.defaulteventfile?.eventfile",{"_index":2338,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.configuration.defaulteventfile?.eventtype",{"_index":2339,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.configuration.eventdataloader",{"_index":2359,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.configuration.eventdataloader.addlabeltoeventobject",{"_index":2725,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.buildeventdata",{"_index":2580,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.getcollection(collectionname",{"_index":2679,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.getcollections",{"_index":2680,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.geteventmetadata",{"_index":2685,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.geteventslist",{"_index":2569,"title":{},"body":{"interfaces/Window.html":{}}}],["this.containsobject(renderer",{"_index":2011,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.controller.getworlddirection(direction",{"_index":2521,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1",{"_index":2484,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.add(line.clone",{"_index":2504,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.addeventlistener",{"_index":2518,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.addeventlistener('selectend",{"_index":2519,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.position.toarray().join",{"_index":2511,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1?.removeeventlistener",{"_index":2468,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller2",{"_index":2487,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller2.add(line.clone",{"_index":2505,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip1",{"_index":2491,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip1.add",{"_index":2493,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip2",{"_index":2496,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip2.add",{"_index":2498,"title":{},"body":{"classes/VRManager.html":{}}}],["this.currentvrsession",{"_index":2466,"title":{},"body":{"classes/VRManager.html":{}}}],["this.currentvrsession?.end",{"_index":2474,"title":{},"body":{"classes/VRManager.html":{}}}],["this.currentvrsession?.removeeventlistener('end",{"_index":2467,"title":{},"body":{"classes/VRManager.html":{}}}],["this.data",{"_index":1313,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.eventnumber",{"_index":1316,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.particles",{"_index":1321,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.runnumber",{"_index":1318,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.defaultmaxvalue",{"_index":635,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultminvalue",{"_index":634,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultrenderpass",{"_index":952,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.defaultrenderpass.camera",{"_index":960,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.defaultrenderpass.scene",{"_index":961,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.disableselecting",{"_index":2170,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager",{"_index":2164,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.addoutlinepassforselection",{"_index":2166,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.antialiasing",{"_index":2180,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.composer.renderer.domelement",{"_index":2221,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.setantialiasing(false",{"_index":2181,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.setantialiasing(this.preselectionantialias",{"_index":2186,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsrender",{"_index":959,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.enableeventdisplayconsole",{"_index":2556,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enablekeyboardcontrols",{"_index":2558,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enableselecting",{"_index":2169,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.etatotheta(eta",{"_index":594,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["this.eventdisplay",{"_index":2301,"title":{},"body":{"classes/StateManager.html":{},"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.buildeventdatafromjson(eventdata",{"_index":2363,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().addloadableitem('url_config",{"_index":2348,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().addloadableitem('url_event",{"_index":2356,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().itemloaded('url_config",{"_index":2355,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().itemloaded('url_event",{"_index":2369,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getuimanager().setclipping(true",{"_index":2300,"title":{},"body":{"classes/StateManager.html":{}}}],["this.eventdisplay.parsephoenixevents(res",{"_index":2364,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventfolder",{"_index":739,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.eventfolder.addchild(typename",{"_index":1601,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventfolder.addconfig('checkbox",{"_index":1599,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventfolder.addfolder(typename",{"_index":823,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.eventfolder.getnodestate",{"_index":1596,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventfolder.loadstatefromjson(this.eventfolderstate",{"_index":1634,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventfolder.remove",{"_index":1597,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventfolderstate",{"_index":1595,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventsdata",{"_index":2568,"title":{},"body":{"interfaces/Window.html":{}}}],["this.eventsdata[eventkey",{"_index":2587,"title":{},"body":{"interfaces/Window.html":{}}}],["this.fixedoverlay",{"_index":2019,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.geomfolder",{"_index":738,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.geomfolder.__folders[name",{"_index":806,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.geomfolder.addfolder(name",{"_index":768,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.geomfolder.findintreeorcreate(menunodename",{"_index":1586,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.geomfolder.removefolder(folder",{"_index":807,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.getcameragroup().add(this.controller1",{"_index":2486,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controller2",{"_index":2489,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controllergrip1",{"_index":2495,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controllergrip2",{"_index":2500,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameratween(alongaxisposition",{"_index":215,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.getcameratween(startpos",{"_index":207,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.gethitspositions(obj.position",{"_index":324,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.getmainrenderer",{"_index":1999,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmainrenderer().setanimationloop(null",{"_index":1984,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer",{"_index":1987,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().domelement.hidden",{"_index":1988,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().render(scene",{"_index":1992,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getstatemanager().seteventdisplay(this",{"_index":2548,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary",{"_index":2539,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.addgeometryfromparameters(parameters",{"_index":2656,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.addlabeltoobject(label",{"_index":2729,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animateclippingwithcollision(tweenduration",{"_index":2723,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animateeventwithcollision(tweenduration",{"_index":2722,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animatethroughevent",{"_index":2721,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.cleareventdata",{"_index":2579,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enablekeyboardcontrols",{"_index":2720,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enableselecting(enable",{"_index":2709,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.endvrsession",{"_index":2563,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportphoenixscene",{"_index":2626,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportscenetoobj",{"_index":2614,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.fixoverlayview(fixed",{"_index":2712,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.getactiveobjectid",{"_index":2713,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.highlightobject(uuid",{"_index":2717,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.init(configuration",{"_index":2546,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.initvrsession(onsessionended",{"_index":2560,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadgltfgeometry",{"_index":2635,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadjsongeometry",{"_index":2639,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadobjgeometry",{"_index":2607,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.lookatobject(uuid",{"_index":2716,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsegltfgeometry(input",{"_index":2631,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parseobjgeometry(content",{"_index":2611,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsephnxscene(phoenixscene.scene",{"_index":2624,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setanimationloop(uiloop",{"_index":2551,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setoverlayrenderer(overlaycanvas",{"_index":2699,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setselectedobjectdisplay(selectedobject",{"_index":2703,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.zoomto(zoomfactor",{"_index":2666,"title":{},"body":{"interfaces/Window.html":{}}}],["this.gui",{"_index":728,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.addfolder('event",{"_index":813,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.addfolder(scenemanager.geometries_id",{"_index":743,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.addfolder(scenemanager.labels_id",{"_index":858,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.domelement.id",{"_index":729,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.domelement.style.csstext",{"_index":730,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.removefolder(this.eventfolder",{"_index":812,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters.eventdata",{"_index":814,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters.eventdata[typename",{"_index":824,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters.geometries",{"_index":744,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters.labels",{"_index":859,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters[collectionname",{"_index":826,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters[labelid",{"_index":872,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters[labelid]['removelabel",{"_index":885,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters[name",{"_index":762,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.icon",{"_index":1456,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["this.ignorelist",{"_index":2159,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ignorelist.includes(intersectedobject.type",{"_index":2189,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.infologger",{"_index":2163,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["this.infologger.add('exported",{"_index":2615,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologger.add(log",{"_index":2215,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.infologger.add(name",{"_index":2606,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologgerlist",{"_index":1234,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.length",{"_index":1230,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.pop",{"_index":1232,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.unshift(label",{"_index":1233,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.init(configuration",{"_index":2543,"title":{},"body":{"interfaces/Window.html":{}}}],["this.initrenderer(elementid",{"_index":1986,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.intersectobject(event",{"_index":2188,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.isfixedoverlay",{"_index":1991,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.isinit",{"_index":2158,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.labelsfolder",{"_index":740,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.__folders[labelid",{"_index":889,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.labelsfolder.addchild(labelid",{"_index":1625,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.addconfig('button",{"_index":1622,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.addconfig('color",{"_index":1621,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.addconfig('slider",{"_index":1620,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.addfolder(labelid",{"_index":875,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.labelsfolder.children.find",{"_index":1623,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.removefolder(labelitemfolder",{"_index":890,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.labelsfolder?.children.find",{"_index":1630,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.loaded",{"_index":1381,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.length",{"_index":1363,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.push(id",{"_index":1361,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.sort().join",{"_index":1365,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loadevent(eventkeys[0",{"_index":2570,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadgltfgeometry(sceneurl",{"_index":2692,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager",{"_index":2538,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem('root_json_geom",{"_index":2641,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`gltf_geom_${name",{"_index":2634,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`json_geom_${name",{"_index":2638,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`obj_geom_${name",{"_index":2604,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_gltf_${name",{"_index":2629,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_obj_${name",{"_index":2610,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_phnx_${name",{"_index":2623,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded('root_json_geom",{"_index":2647,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadjsongeometry",{"_index":2643,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadobjgeometry(filename",{"_index":2694,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadsceneconfiguration(phoenixscene.sceneconfiguration",{"_index":2622,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadstatefromjson(json.parse(data",{"_index":2283,"title":{},"body":{"classes/StateManager.html":{}}}],["this.mainrenderer",{"_index":2006,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.maxentries",{"_index":1231,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.maxpositionx",{"_index":792,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.maxpositiony",{"_index":796,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.maxpositionz",{"_index":799,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.maxvalue",{"_index":637,"title":{},"body":{"classes/Cut.html":{}}}],["this.minvalue",{"_index":636,"title":{},"body":{"classes/Cut.html":{}}}],["this.moveindirection(direction",{"_index":2515,"title":{},"body":{"classes/VRManager.html":{}}}],["this.name",{"_index":1455,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["this.nodelevel",{"_index":1464,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.oncontrollerselectend",{"_index":2472,"title":{},"body":{"classes/VRManager.html":{}}}],["this.oncontrollerselectstart",{"_index":2470,"title":{},"body":{"classes/VRManager.html":{}}}],["this.ondisplayedeventchange.foreach((callback",{"_index":2581,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondisplayedeventchange.push(callback",{"_index":2682,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondocumentmousedown",{"_index":2176,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.oneventschange.foreach((callback",{"_index":2571,"title":{},"body":{"interfaces/Window.html":{}}}],["this.oneventschange.push(callback",{"_index":2684,"title":{},"body":{"interfaces/Window.html":{}}}],["this.onloadcallbacks",{"_index":1382,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onloadcallbacks.foreach((callback",{"_index":1366,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onloadcallbacks.push(callback",{"_index":1378,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onprogresscallbacks",{"_index":1376,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onprogresscallbacks.push(callback",{"_index":1379,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onsessionended",{"_index":2447,"title":{},"body":{"classes/VRManager.html":{}}}],["this.ontoggle",{"_index":1457,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontoggle?.(this.togglestate",{"_index":1511,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontoggle?.(value",{"_index":1479,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontouchdown",{"_index":2178,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ontouchmove",{"_index":2174,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ontouchmove(event.targettouches[0",{"_index":2219,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.onvrsessionended",{"_index":2464,"title":{},"body":{"classes/VRManager.html":{}}}],["this.onvrsessionstarted(session",{"_index":2459,"title":{},"body":{"classes/VRManager.html":{}}}],["this.outlinepass",{"_index":2165,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects",{"_index":2185,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects[0",{"_index":2190,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.overlayrenderer",{"_index":2009,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.parent",{"_index":1460,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.parent.removechild(this",{"_index":1469,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.phoenixmenu",{"_index":1571,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.phoenixmenu.addchild",{"_index":1573,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.phoenixmenu.truncate",{"_index":1572,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.phoenixmenuroot",{"_index":2279,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.configactive",{"_index":2294,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.getnodestate",{"_index":2284,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.loadstatefromjson(jsondata['phoenixmenu",{"_index":2293,"title":{},"body":{"classes/StateManager.html":{}}}],["this.preselectionantialias",{"_index":2179,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.progressitems",{"_index":1383,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.progressitems[itemname",{"_index":1368,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.removelabel(labelid",{"_index":886,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.removelabelnode(labelid",{"_index":1629,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.removeobj(name",{"_index":766,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.render",{"_index":956,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.renderer",{"_index":2446,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr",{"_index":2476,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontroller(0",{"_index":2485,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontroller(1",{"_index":2488,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontrollergrip(0",{"_index":2492,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontrollergrip(1",{"_index":2497,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.setsession(session",{"_index":2465,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderermanager.getmainrenderer().localclippingenabled",{"_index":373,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.renderers",{"_index":2010,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.indexof(renderer",{"_index":2013,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.length",{"_index":2017,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.push(renderer",{"_index":2012,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.splice(index",{"_index":2014,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers[0].localclippingenabled",{"_index":2018,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.reset",{"_index":1367,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.saveeventdataconfiguration(eventdata",{"_index":1086,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savegeometriesconfiguration(geometries",{"_index":1088,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savesceneconfig(eventdata",{"_index":1073,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savestateasjson",{"_index":2281,"title":{},"body":{"classes/StateManager.html":{}}}],["this.scene",{"_index":951,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["this.scene.add(...particles",{"_index":390,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.scene.getobjectbyname(scenemanager.event_data_id",{"_index":236,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.scene.remove(...particles",{"_index":398,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.selectedobject",{"_index":2167,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.length",{"_index":2194,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.push",{"_index":2200,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.splice",{"_index":2193,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.name",{"_index":2191,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.setclippingenabled(true",{"_index":2299,"title":{},"body":{"classes/StateManager.html":{}}}],["this.setmainrenderer(renderer",{"_index":1982,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.setupvrcontrols",{"_index":2461,"title":{},"body":{"classes/VRManager.html":{}}}],["this.statemanager",{"_index":2592,"title":{},"body":{"interfaces/Window.html":{}}}],["this.three",{"_index":753,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.eventdatadepthtest(value",{"_index":822,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getobjectposition(name",{"_index":791,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.three.getscenemanager().changeobjectcolor(labelid",{"_index":884,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().changeobjectcolor(name",{"_index":775,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().collectioncolor(collectionname",{"_index":837,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().collectionfilter(collectionname",{"_index":849,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().getobjectposition(name).setx(value",{"_index":795,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.three.getscenemanager().getobjectposition(name).sety(value",{"_index":798,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.three.getscenemanager().getobjectposition(name).setz(value",{"_index":801,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.three.getscenemanager().objectvisibility(labelid",{"_index":1626,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().objectvisibility(name",{"_index":784,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().objectvisibility(typename",{"_index":825,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().removegeometry(name",{"_index":808,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().scaleobject(name",{"_index":789,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.three.getscenemanager().setgeometryopacity(collectionname",{"_index":1607,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().setgeometryopacity(name",{"_index":780,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().wireframegeometries(value",{"_index":761,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().wireframeobjects(collectionname",{"_index":1609,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.togglestate",{"_index":1480,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.toload",{"_index":1380,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.length",{"_index":1362,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.push(id",{"_index":1360,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.sort().join",{"_index":1364,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.ui",{"_index":2541,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addcollection",{"_index":2674,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatafolder",{"_index":2576,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatatypefolder",{"_index":2672,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addgeometry(geom",{"_index":2677,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addgeometry(name",{"_index":2605,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addlabel(labelid",{"_index":2728,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addlabelsfolder",{"_index":2577,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.enablekeyboardcontrols",{"_index":2719,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.init(configuration",{"_index":2547,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.loadeventfolderpmstate",{"_index":2584,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.removelabel(labelid",{"_index":2727,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.updateui",{"_index":2550,"title":{},"body":{"interfaces/Window.html":{}}}],["this.urloptions",{"_index":2335,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('config",{"_index":2347,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('file",{"_index":2343,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('type",{"_index":2344,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('type').tolowercase",{"_index":2345,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get(urloption",{"_index":2379,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.value",{"_index":58,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["this.vractive",{"_index":2462,"title":{},"body":{"classes/VRManager.html":{}}}],["this.vrcamera",{"_index":2475,"title":{},"body":{"classes/VRManager.html":{}}}],["this.vrcamera.name",{"_index":2479,"title":{},"body":{"classes/VRManager.html":{}}}],["this.vrcamera.position.addscaledvector(direction",{"_index":2524,"title":{},"body":{"classes/VRManager.html":{}}}],["this.vrcamera?.getworlddirection(direction",{"_index":2522,"title":{},"body":{"classes/VRManager.html":{}}}],["though",{"_index":1893,"title":{},"body":{"classes/RKHelper.html":{}}}],["thr",{"_index":2654,"title":{},"body":{"interfaces/Window.html":{}}}],["three",{"_index":191,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"dependencies.html":{}}}],["three,js",{"_index":1955,"title":{},"body":{"classes/RendererManager.html":{}}}],["three.extra.min.js",{"_index":2061,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["three.js",{"_index":75,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["three/examples/jsm/exporters/gltfexporter",{"_index":1063,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/exporters/objexporter",{"_index":1061,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/postprocessing/effectcomposer",{"_index":942,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/outlinepass",{"_index":946,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/outlinepass.js",{"_index":2155,"title":{},"body":{"classes/SelectionManager.html":{}}}],["three/examples/jsm/postprocessing/pass",{"_index":947,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/renderpass",{"_index":945,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/webxr/xrcontrollermodelfactory",{"_index":2438,"title":{},"body":{"classes/VRManager.html":{}}}],["threejs",{"_index":567,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{}}}],["threemanager",{"_index":663,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["threemanager(this.infologger",{"_index":2540,"title":{},"body":{"interfaces/Window.html":{}}}],["threeservice",{"_index":1254,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["through",{"_index":133,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["time",{"_index":1021,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["toggle",{"_index":746,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["toggles",{"_index":694,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["toggleselfanddescendants",{"_index":1402,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggleselfanddescendants(value",{"_index":1447,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["togglestate",{"_index":1393,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggling",{"_index":1406,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["tojson",{"_index":2646,"title":{},"body":{"interfaces/Window.html":{}}}],["toload",{"_index":1328,"title":{},"body":{"classes/LoadingManager.html":{}}}],["top",{"_index":459,"title":{},"body":{"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{}}}],["totalitems",{"_index":1373,"title":{},"body":{"classes/LoadingManager.html":{}}}],["totalprogress",{"_index":1369,"title":{},"body":{"classes/LoadingManager.html":{}}}],["touch",{"_index":2122,"title":{},"body":{"classes/SelectionManager.html":{}}}],["touchevent",{"_index":2217,"title":{},"body":{"classes/SelectionManager.html":{}}}],["towards",{"_index":2430,"title":{},"body":{"classes/VRManager.html":{}}}],["track",{"_index":252,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["track.children[0",{"_index":403,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["track.dparams",{"_index":1877,"title":{},"body":{"classes/RKHelper.html":{}}}],["track.pos",{"_index":1875,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackcolor",{"_index":402,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tracking",{"_index":2455,"title":{},"body":{"classes/VRManager.html":{}}}],["trackmlloader",{"_index":3038,"title":{},"body":{"coverage.html":{}}}],["trackparams",{"_index":1666,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["trackparams.pos",{"_index":1690,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["tracks",{"_index":247,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/RKHelper.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["trackscollection",{"_index":1872,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollections",{"_index":1871,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollections[trackscollection",{"_index":1874,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollectionsevent",{"_index":1870,"title":{},"body":{"classes/RKHelper.html":{}}}],["transformations",{"_index":2796,"title":{},"body":{"changelog.html":{}}}],["transforming/changing",{"_index":1793,"title":{},"body":{"classes/PresetView.html":{}}}],["translation",{"_index":137,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{}}}],["transparent",{"_index":382,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["traverse",{"_index":242,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["traversed",{"_index":2139,"title":{},"body":{"classes/SelectionManager.html":{}}}],["tree",{"_index":1436,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["true",{"_index":335,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["truncate",{"_index":1403,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["try",{"_index":1138,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["tryrungekuttastep",{"_index":1140,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tryrungekuttastep(state.stepsize",{"_index":1172,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tube",{"_index":2915,"title":{},"body":{"changelog.html":{}}}],["tubebuffergeometry",{"_index":180,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["tween",{"_index":113,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["tween.easing(easing",{"_index":204,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.easing(tween.easing.quartic.out).start",{"_index":345,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.easing.cubic.out",{"_index":208,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.js",{"_index":76,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.start",{"_index":367,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween",{"_index":269,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(animationclipplane).to",{"_index":365,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(animationsphere).to",{"_index":315,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(particle.material",{"_index":392,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(particle.position",{"_index":395,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(this.activecamera.position).to",{"_index":198,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tweenduration",{"_index":111,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["tweenjs/tween.js",{"_index":192,"title":{},"body":{"classes/AnimationsManager.html":{},"dependencies.html":{}}}],["tweens",{"_index":344,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["two",{"_index":153,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{}}}],["type",{"_index":35,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":3099,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typefolder",{"_index":690,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["typefolder.addchild",{"_index":1603,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["typefolder.addfolder(collectionname",{"_index":832,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["typefolderpm",{"_index":2671,"title":{},"body":{"interfaces/Window.html":{}}}],["typename",{"_index":699,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{}}}],["typeof",{"_index":1507,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["types",{"_index":1485,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typing",{"_index":2873,"title":{},"body":{"changelog.html":{}}}],["ui",{"_index":644,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["ui.ts",{"_index":642,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"coverage.html":{}}}],["ui.ts:109",{"_index":1559,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:12",{"_index":671,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:13",{"_index":1554,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:14",{"_index":675,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:15",{"_index":1553,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:156",{"_index":1556,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:17",{"_index":1551,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:174",{"_index":723,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:185",{"_index":1557,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:187",{"_index":693,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:19",{"_index":1552,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:198",{"_index":1555,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:21",{"_index":1550,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:220",{"_index":698,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:23",{"_index":669,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:241",{"_index":686,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:25",{"_index":667,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:27",{"_index":676,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:284",{"_index":1562,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:30",{"_index":678,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:304",{"_index":714,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:32",{"_index":681,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:334",{"_index":1561,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:34",{"_index":664,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:356",{"_index":709,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:366",{"_index":1567,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:379",{"_index":1564,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:393",{"_index":721,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:42",{"_index":1563,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:55",{"_index":1560,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:56",{"_index":717,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:67",{"_index":707,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:98",{"_index":703,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["uiloop",{"_index":2549,"title":{},"body":{"interfaces/Window.html":{}}}],["uimanager",{"_index":989,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["uimanager(this.graphicslibrary",{"_index":2542,"title":{},"body":{"interfaces/Window.html":{}}}],["uimenu",{"_index":2373,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["uiservice",{"_index":1261,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["undefined",{"_index":672,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["undefined/null",{"_index":1472,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["unique",{"_index":712,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{}}}],["uniquely",{"_index":1275,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["unit",{"_index":2249,"title":{},"body":{"classes/State.html":{},"classes/VRManager.html":{}}}],["unitc",{"_index":2239,"title":{},"body":{"classes/State.html":{}}}],["units",{"_index":1119,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["unreal",{"_index":896,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["until",{"_index":1199,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["up",{"_index":418,"title":{},"body":{"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["update",{"_index":24,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["update(updatedvalue",{"_index":51,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["updateanimationsphere",{"_index":318,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["updateanimationsphere.containspoint",{"_index":327,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["updateanimationsphere.containspoint(obj.position",{"_index":333,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["updated",{"_index":48,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/VRManager.html":{}}}],["updatedvalue",{"_index":53,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["updating",{"_index":46,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{}}}],["upgrade",{"_index":2833,"title":{},"body":{"changelog.html":{}}}],["url",{"_index":506,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["url.createobjecturl(blob",{"_index":3142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["url.indexof('.root",{"_index":2651,"title":{},"body":{"interfaces/Window.html":{}}}],["urloptions",{"_index":2309,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["urloptionsmanager",{"_index":2307,"title":{"classes/URLOptionsManager.html":{}},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["urloptionsmanager(this",{"_index":2553,"title":{},"body":{"interfaces/Window.html":{}}}],["urloptionsmanager.applyoptions",{"_index":2554,"title":{},"body":{"interfaces/Window.html":{}}}],["urlsearchparams",{"_index":2314,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["usage",{"_index":2864,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["use",{"_index":399,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RKHelper.html":{},"classes/ScriptLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":913,"title":{},"body":{"classes/EffectsManager.html":{},"classes/InfoLogger.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["user",{"_index":3134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata",{"_index":2919,"title":{},"body":{"changelog.html":{}}}],["uses",{"_index":588,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"index.html":{}}}],["using",{"_index":74,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["uuid",{"_index":1725,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["v1",{"_index":598,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["v2",{"_index":599,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["val",{"_index":1372,"title":{},"body":{"classes/LoadingManager.html":{},"classes/SelectionManager.html":{}}}],["val.pos.x",{"_index":1903,"title":{},"body":{"classes/RKHelper.html":{}}}],["val.pos.y",{"_index":1904,"title":{},"body":{"classes/RKHelper.html":{}}}],["val.pos.z",{"_index":1905,"title":{},"body":{"classes/RKHelper.html":{}}}],["value",{"_index":12,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1431,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["values?.highvalue",{"_index":1619,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["values?.value",{"_index":1618,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["variable",{"_index":10,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["variable.ts",{"_index":7,"title":{},"body":{"classes/ActiveVariable.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["variable.ts:12",{"_index":42,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:17",{"_index":40,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:23",{"_index":52,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:32",{"_index":44,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:7",{"_index":29,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variables",{"_index":3103,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["varilable",{"_index":2043,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["vector",{"_index":591,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/VRManager.html":{}}}],["vector.applyquaternion(coordinatehelper.atlasquaternion",{"_index":593,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["vector.setfromsphericalcoords(radius",{"_index":592,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["vector2",{"_index":943,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["vector2(window.innerwidth",{"_index":964,"title":{},"body":{"classes/EffectsManager.html":{}}}],["vector3",{"_index":182,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CoordinateHelper.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["vector3().fromarray(hitposition",{"_index":328,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["vector3(0",{"_index":297,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["vector3(metparams.etx",{"_index":1776,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vector3(x",{"_index":1711,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["version",{"_index":2038,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{}}}],["vertex",{"_index":360,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["vertexparams",{"_index":1669,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.color",{"_index":1764,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.uuid",{"_index":1773,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.x",{"_index":1767,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.y",{"_index":1769,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertices",{"_index":358,"title":{},"body":{"classes/AnimationsManager.html":{},"miscellaneous/variables.html":{}}}],["view",{"_index":511,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["view.model",{"_index":531,"title":{},"body":{"interfaces/Configuration.html":{}}}],["view.model.ts",{"_index":1791,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{}}}],["view.model.ts:10",{"_index":1802,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:14",{"_index":1798,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:32",{"_index":1803,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:6",{"_index":1801,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:8",{"_index":1800,"title":{},"body":{"classes/PresetView.html":{}}}],["views",{"_index":529,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["visibilitytoggle",{"_index":876,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["visibilitytoggle.onchange((value",{"_index":878,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["visible",{"_index":308,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["void",{"_index":50,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["vr",{"_index":2385,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["vr_camera",{"_index":2480,"title":{},"body":{"classes/VRManager.html":{}}}],["vractive",{"_index":2398,"title":{},"body":{"classes/VRManager.html":{}}}],["vrcamera",{"_index":2399,"title":{},"body":{"classes/VRManager.html":{}}}],["vrmanager",{"_index":2383,"title":{"classes/VRManager.html":{}},"body":{"classes/VRManager.html":{},"coverage.html":{}}}],["vrmanager.session_type",{"_index":2457,"title":{},"body":{"classes/VRManager.html":{}}}],["wait",{"_index":2087,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["want",{"_index":2232,"title":{},"body":{"classes/SelectionManager.html":{}}}],["webglrenderer",{"_index":908,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["webglrenderers",{"_index":1946,"title":{},"body":{"classes/RendererManager.html":{}}}],["webpack",{"_index":2886,"title":{},"body":{"changelog.html":{}}}],["webxr",{"_index":2442,"title":{},"body":{"classes/VRManager.html":{}}}],["webxr.requestsession",{"_index":2456,"title":{},"body":{"classes/VRManager.html":{}}}],["whether",{"_index":504,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["whose",{"_index":11,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/PhoenixMenuNode.html":{}}}],["widgets",{"_index":2322,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["width",{"_index":1702,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["window",{"_index":2342,"title":{"interfaces/Window.html":{}},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["window.addeventlistener('resize",{"_index":2004,"title":{},"body":{"classes/RendererManager.html":{}}}],["window.eventdisplay",{"_index":2690,"title":{},"body":{"interfaces/Window.html":{}}}],["window.innerheight",{"_index":965,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["window.innerwidth",{"_index":1996,"title":{},"body":{"classes/RendererManager.html":{}}}],["window.location.href",{"_index":2334,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["wipe",{"_index":1896,"title":{},"body":{"classes/RKHelper.html":{}}}],["wireframe",{"_index":745,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["wireframegeometriesmenu",{"_index":758,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["wireframegeometriesmenu.onchange((value",{"_index":760,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["wireframing",{"_index":757,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"changelog.html":{}}}],["without",{"_index":248,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"changelog.html":{},"index.html":{}}}],["work",{"_index":2444,"title":{},"body":{"classes/VRManager.html":{}}}],["workaround",{"_index":260,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["working",{"_index":2901,"title":{},"body":{"changelog.html":{}}}],["works",{"_index":2426,"title":{},"body":{"classes/VRManager.html":{}}}],["wrapper",{"_index":514,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{}}}],["wrong",{"_index":2770,"title":{},"body":{"changelog.html":{}}}],["x",{"_index":199,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixObjects.html":{}}}],["x,y,z",{"_index":512,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixObjects.html":{}}}],["xrcontrollermodelfactory",{"_index":2437,"title":{},"body":{"classes/VRManager.html":{}}}],["y",{"_index":201,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixObjects.html":{}}}],["yarn",{"_index":3072,"title":{},"body":{"index.html":{}}}],["yes",{"_index":36,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{}}}],["z",{"_index":159,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixObjects.html":{}}}],["z0",{"_index":1882,"title":{},"body":{"classes/RKHelper.html":{}}}],["zero",{"_index":2974,"title":{},"body":{"changelog.html":{}}}],["zoom",{"_index":2657,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["zoomfactor",{"_index":2662,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomtime",{"_index":2663,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomto(zoomfactor",{"_index":2665,"title":{},"body":{"interfaces/Window.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ActiveVariable.html":{"url":"classes/ActiveVariable.html","title":"class - ActiveVariable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ActiveVariable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/active-variable.ts\n        \n\n            \n                Description\n            \n            \n                An active variable whose value can be changed and the change can be observed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                callbacks\n                            \n                            \n                                    Public\n                                    Optional\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                onUpdate\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value?: T)\n                    \n                \n                        \n                            \n                                Defined in src/helpers/active-variable.ts:7\n                            \n                        \n\n                \n                    \n                            Create the observable active variable.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Initial value.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            callbacks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CallbackFunction[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/active-variable.ts:17\n                            \n                        \n\n                \n                    \n                        Callbacks to call on update.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/active-variable.ts:12\n                            \n                        \n\n                \n                    \n                        Initial value.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            onUpdate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onUpdate(callback: CallbackFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/active-variable.ts:32\n                \n            \n\n\n            \n                \n                    Call a function on updating the value of variable.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                CallbackFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call with updated value when the variable is updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(updatedValue: T)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/active-variable.ts:23\n                \n            \n\n\n            \n                \n                    Update the value of variable.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    updatedValue\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        New updated value.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export type CallbackFunction = (updatedValue: T) => void;\n\n/**\n * An active variable whose value can be changed and the change can be observed.\n */\nexport class ActiveVariable {\n  /**\n   * Create the observable active variable.\n   * @param value Initial value.\n   */\n  constructor(public value?: T) {}\n\n  /**\n   * Callbacks to call on update.\n   */\n  private callbacks: CallbackFunction[] = [];\n\n  /**\n   * Update the value of variable.\n   * @param updatedValue New updated value.\n   */\n  public update(updatedValue: T) {\n    this.value = updatedValue;\n    this.callbacks.forEach((callback) => callback(updatedValue));\n  }\n\n  /**\n   * Call a function on updating the value of variable.\n   * @param callback Callback to call with updated value when the variable is updated.\n   */\n  public onUpdate(callback: CallbackFunction) {\n    this.callbacks.push(callback);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AnimationsManager.html":{"url":"classes/AnimationsManager.html","title":"class - AnimationsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnimationsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/animations-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing animation related operations using three.js and tween.js.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                animateClippingWithCollision\n                            \n                            \n                                    Public\n                                animateEvent\n                            \n                            \n                                    Public\n                                animateEventWithClipping\n                            \n                            \n                                    Public\n                                animateEventWithCollision\n                            \n                            \n                                    Public\n                                animateThroughEvent\n                            \n                            \n                                    Public\n                                animateWithCollision\n                            \n                            \n                                    Public\n                                collideParticles\n                            \n                            \n                                    Public\n                                getCameraTween\n                            \n                            \n                                    Private\n                                getHitsPositions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scene: Scene, activeCamera: Camera, rendererManager: RendererManager)\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/animations-manager.ts:24\n                            \n                        \n\n                \n                    \n                            Constructor for the animation manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scene\n                                                  \n                                                        \n                                                                    Scene\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Three.js scene containing all the objects and event data.\n\n                                                        \n                                                \n                                                \n                                                        activeCamera\n                                                  \n                                                        \n                                                                    Camera\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Currently active camera.\n\n                                                        \n                                                \n                                                \n                                                        rendererManager\n                                                  \n                                                        \n                                                                        RendererManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Manager for managing event display's renderer related functions.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateClippingWithCollision\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateClippingWithCollision(tweenDuration: number, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/animations-manager.ts:499\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data\nusing clipping planes after particle collison.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateEvent(tweenDuration: number, onEnd?: () => void, onAnimationStart?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/animations-manager.ts:141\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback when all animations have ended.\n\n                                    \n                                \n                                \n                                    onAnimationStart\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback when the first animation starts.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateEventWithClipping\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateEventWithClipping(tweenDuration: number, onEnd?: () => void, onAnimationStart?: () => void, clippingConstant: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/animations-manager.ts:314\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data using clipping planes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                                \n                                    onAnimationStart\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Callback when the first animation starts.\n\n                                    \n                                \n                                \n                                    clippingConstant\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        11000\n                                    \n\n                                    \n                                        Constant for the clipping planes for distance from the origin.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateEventWithCollision\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateEventWithCollision(tweenDuration: number, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/animations-manager.ts:489\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data with particle collison.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateThroughEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateThroughEvent(startPos: number[], tweenDuration: number, onAnimationEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/animations-manager.ts:70\n                \n            \n\n\n            \n                \n                    Animate the camera through the event scene.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    startPos\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Start position of the translation animation.\n\n                                    \n                                \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of each tween in the translation animation.\n\n                                    \n                                \n                                \n                                    onAnimationEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback when the last animation ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateWithCollision\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateWithCollision(animationFunction: (tweenDuration: number,onEnd: function,onAnimationStart: function) => void, tweenDuration: number, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/animations-manager.ts:450\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data with particle collison.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    animationFunction\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Animation function to call after collision.\n\n                                    \n                                \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            collideParticles\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    collideParticles(tweenDuration: number, particleSize: number, distanceFromOrigin: number, particleColor: Color, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/animations-manager.ts:390\n                \n            \n\n\n            \n                \n                    Animate the collision of two particles.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Duration of the particle collision animation tween.\n\n                                    \n                                \n                                \n                                    particleSize\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        10\n                                    \n\n                                    \n                                        Size of the particles.\n\n                                    \n                                \n                                \n                                    distanceFromOrigin\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        5000\n                                    \n\n                                    \n                                        Distance of the particles (along z-axes) from the origin.\n\n                                    \n                                \n                                \n                                    particleColor\n                                    \n                                            Color\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        new Color(0xffffff)\n                                    \n\n                                    \n                                        Color of the particles.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Callback to call when the particle collision ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCameraTween\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraTween(pos: number[], duration: number, easing?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/animations-manager.ts:47\n                \n            \n\n\n            \n                \n                    Get the camera tween for animating camera to a position.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    pos\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        End position of the camera tween.\n\n                                    \n                                \n                                \n                                    duration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1000\n                                    \n\n                                    \n                                        Duration of the tween.\n\n                                    \n                                \n                                \n                                    easing\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Animation easing of the tween if any.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Tween object of the camera animation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getHitsPositions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHitsPositions(positions: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/animations-manager.ts:516\n                \n            \n\n\n            \n                \n                    Get the positions of hits in a multidimensional array\nfrom a single dimensional array.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    positions\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Positions of hits in a single dimensional array.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     [][]\n\n                    \n                    \n                        Positions of hits in a multidimensional array.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { SceneManager } from './scene-manager';\nimport {\n  TubeBufferGeometry,\n  BufferGeometry,\n  Vector3,\n  Color,\n  MeshBasicMaterial,\n  Mesh,\n  SphereBufferGeometry,\n  Sphere,\n  Object3D,\n  BufferAttribute,\n  Scene,\n  Camera,\n  Plane,\n  Group,\n} from 'three';\nimport * as TWEEN from '@tweenjs/tween.js';\nimport { RendererManager } from './renderer-manager';\n\n/**\n * Manager for managing animation related operations using three.js and tween.js.\n */\nexport class AnimationsManager {\n  /**\n   * Constructor for the animation manager.\n   * @param scene Three.js scene containing all the objects and event data.\n   * @param activeCamera Currently active camera.\n   * @param rendererManager Manager for managing event display's renderer related functions.\n   */\n  constructor(\n    private scene: Scene,\n    private activeCamera: Camera,\n    private rendererManager: RendererManager\n  ) {\n    this.animateEvent = this.animateEvent.bind(this);\n    this.animateEventWithClipping = this.animateEventWithClipping.bind(this);\n  }\n\n  /**\n   * Get the camera tween for animating camera to a position.\n   * @param pos End position of the camera tween.\n   * @param duration Duration of the tween.\n   * @param easing Animation easing of the tween if any.\n   * @returns Tween object of the camera animation.\n   */\n  public getCameraTween(\n    pos: number[],\n    duration: number = 1000,\n    easing?: any\n  ): any {\n    const tween = new TWEEN.Tween(this.activeCamera.position).to(\n      { x: pos[0], y: pos[1], z: pos[2] },\n      duration\n    );\n\n    if (easing) {\n      tween.easing(easing);\n    }\n\n    return tween;\n  }\n\n  /**\n   * Animate the camera through the event scene.\n   * @param startPos Start position of the translation animation.\n   * @param tweenDuration Duration of each tween in the translation animation.\n   * @param onAnimationEnd Callback when the last animation ends.\n   */\n  public animateThroughEvent(\n    startPos: number[],\n    tweenDuration: number,\n    onAnimationEnd?: () => void\n  ) {\n    // Move to start\n    const start = this.getCameraTween(startPos, 1000, TWEEN.Easing.Cubic.Out);\n    // Move to position along the detector axis\n    const alongAxisPosition = [0, 0, startPos[2]];\n    const startXAxis = this.getCameraTween(alongAxisPosition, tweenDuration);\n\n    const radius = 500;\n    const numOfSteps = 24;\n    const angle = 3 * Math.PI;\n    const step = angle / numOfSteps;\n\n    let rotationPositions = [];\n    for (let i = 1; i  onAnimationEnd?.());\n    startClone.delay(500);\n\n    start.chain(startXAxis);\n    startXAxis.chain(rotateStart);\n    rotate.chain(end);\n    end.chain(startClone);\n\n    start.start();\n  }\n\n  /**\n   * Animate the propagation and generation of event data.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Callback when all animations have ended.\n   * @param onAnimationStart Callback when the first animation starts.\n   */\n  public animateEvent(\n    tweenDuration: number,\n    onEnd?: () => void,\n    onAnimationStart?: () => void\n  ) {\n    const extraAnimationSphereDuration = tweenDuration * 0.25;\n    tweenDuration *= 0.75;\n\n    const eventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    const animationSphere = new Sphere(new Vector3(), 0);\n    const objectsToAnimateWithSphere: {\n      eventObject: Object3D;\n      position: any;\n    }[] = [];\n\n    const allTweens = [];\n    // Traverse over all event data\n    eventData.traverse((eventObject: any) => {\n      if (eventObject.geometry) {\n        // Animation for extrapolating tracks without changing scale\n        if (eventObject.name === 'Track') {\n          // Check if geometry drawRange count exists\n          let geometryPosCount =\n            eventObject.geometry?.attributes?.position?.count;\n          if (geometryPosCount) {\n            // WORKAROUND\n            // Changing position count for TubeBufferGeometry because\n            // what we get is not the actual and it has Infinity drawRange count\n            if (eventObject.geometry instanceof TubeBufferGeometry) {\n              geometryPosCount *= 6;\n            }\n            if (eventObject.geometry instanceof BufferGeometry) {\n              const oldDrawRangeCount = eventObject.geometry.drawRange.count;\n              eventObject.geometry.setDrawRange(0, 0);\n              const eventObjectTween = new TWEEN.Tween(\n                eventObject.geometry.drawRange\n              ).to(\n                {\n                  count: geometryPosCount,\n                },\n                tweenDuration\n              );\n              eventObjectTween.onComplete(() => {\n                eventObject.geometry.drawRange.count = oldDrawRangeCount;\n              });\n              allTweens.push(eventObjectTween);\n            }\n          }\n        }\n        // Animation for scaling out objects with or without position\n        else if (eventObject.name === 'Jet') {\n          const scaleTween = new TWEEN.Tween({\n            x: 0.01,\n            y: 0.01,\n            z: 0.01,\n          }).to(\n            {\n              x: eventObject.scale.x,\n              y: eventObject.scale.y,\n              z: eventObject.scale.z,\n            },\n            tweenDuration\n          );\n          // Manually updating scale since we need to change position\n          scaleTween.onUpdate((updatedScale: Vector3) => {\n            const previousScale = eventObject.scale.x;\n            eventObject.scale.setScalar(updatedScale.x);\n            // Restoring to original position and then moving again with the current value\n            eventObject.position\n              .divideScalar(previousScale)\n              .multiplyScalar(updatedScale.x);\n          });\n          allTweens.push(scaleTween);\n        } else {\n          const hasPosition = !eventObject.position.equals(\n            new Vector3(0, 0, 0)\n          );\n          let position = hasPosition\n            ? eventObject.position\n            : eventObject.geometry.boundingSphere.center;\n\n          // Edit geometry for hits\n          if (eventObject.name === 'Hit') {\n            position = Array.from(\n              eventObject.geometry.attributes['position'].array\n            );\n            eventObject.geometry.deleteAttribute('position');\n            eventObject.geometry.computeBoundingSphere();\n          } else {\n            // Making the object invisible and will make visible\n            // once the animation sphere reaches the object\n            eventObject.visible = false;\n          }\n\n          objectsToAnimateWithSphere.push({\n            eventObject: eventObject,\n            position: position,\n          });\n        }\n      }\n    });\n\n    // Tween for the animation sphere\n    const animationSphereTween = new TWEEN.Tween(animationSphere).to(\n      { radius: 3000 },\n      tweenDuration\n    );\n\n    const onAnimationSphereUpdate = (updateAnimationSphere: Sphere) => {\n      objectsToAnimateWithSphere.forEach((obj) => {\n        if (obj.eventObject.name === 'Hit') {\n          const geometry = (obj.eventObject as any).geometry;\n\n          const hitsPositions = this.getHitsPositions(obj.position);\n          const reachedHits = hitsPositions.filter((hitPosition) =>\n            updateAnimationSphere.containsPoint(\n              new Vector3().fromArray(hitPosition)\n            )\n          );\n\n          if (reachedHits.length > 0) {\n            geometry.setAttribute(\n              'position',\n              new BufferAttribute(\n                new Float32Array([].concat(...reachedHits)),\n                3\n              )\n            );\n            geometry.computeBoundingSphere();\n          }\n        } else if (updateAnimationSphere.containsPoint(obj.position)) {\n          obj.eventObject.visible = true;\n        }\n      });\n    };\n\n    animationSphereTween.onUpdate(onAnimationSphereUpdate);\n\n    // Animation sphere tween after covering the tracks\n    const animationSphereTweenClone = new TWEEN.Tween(animationSphere).to(\n      { radius: 10000 },\n      extraAnimationSphereDuration\n    );\n    animationSphereTweenClone.onUpdate(onAnimationSphereUpdate);\n\n    animationSphereTween.chain(animationSphereTweenClone);\n\n    allTweens.push(animationSphereTween);\n\n    // Call onAnimationStart when the first tween starts\n    allTweens[0].onStart(() => onAnimationStart?.());\n\n    // Start all tweens\n    for (const tween of allTweens) {\n      tween.easing(TWEEN.Easing.Quartic.Out).start();\n    }\n\n    // Call onEnd when the last tween completes\n    animationSphereTweenClone.onComplete(() => {\n      // Restore all remaining event data items\n      onAnimationSphereUpdate(new Sphere(new Vector3(), Infinity));\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data using clipping planes.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   * @param onAnimationStart Callback when the first animation starts.\n   * @param clippingConstant Constant for the clipping planes for distance from the origin.\n   */\n  public animateEventWithClipping(\n    tweenDuration: number,\n    onEnd?: () => void,\n    onAnimationStart?: () => void,\n    clippingConstant: number = 11000\n  ) {\n    const allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    // Sphere to get spherical set of clipping planes from\n    const sphere = new SphereBufferGeometry(1, 8, 8);\n    // Clipping planes for animation\n    const animationClipPlanes: Plane[] = [];\n\n    // Get clipping planes from the vertices of sphere\n    const position = sphere.attributes.position;\n    const vertex = new Vector3();\n    for (let i = 0; i  {\n      if (eventObject.geometry && eventObject.material) {\n        eventObject.material.clippingPlanes = animationClipPlanes;\n      }\n    });\n\n    const allTweens = [];\n    // Create tweens for the animation clipping planes\n    for (const animationClipPlane of animationClipPlanes) {\n      animationClipPlane.constant = 0;\n      const tween = new TWEEN.Tween(animationClipPlane).to(\n        { constant: clippingConstant },\n        tweenDuration\n      );\n      allTweens.push(tween);\n    }\n\n    allTweens[0].onStart(() => onAnimationStart?.());\n\n    // Start all the tweens\n    for (const tween of allTweens) {\n      tween.start();\n    }\n\n    allTweens[allTweens.length - 1].onComplete(() => {\n      // Revert local clipping of the renderer\n      if (!prevLocalClipping) {\n        this.rendererManager.getMainRenderer().localClippingEnabled = prevLocalClipping /* false */;\n      }\n      // Remove the applied clipping planes from the event data objects\n      allEventData.traverse((eventObject: any) => {\n        if (eventObject.geometry && eventObject.material) {\n          eventObject.material.clippingPlanes = null;\n        }\n      });\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the collision of two particles.\n   * @param tweenDuration Duration of the particle collision animation tween.\n   * @param particleSize Size of the particles.\n   * @param distanceFromOrigin Distance of the particles (along z-axes) from the origin.\n   * @param particleColor Color of the particles.\n   * @param onEnd Callback to call when the particle collision ends.\n   */\n  public collideParticles(\n    tweenDuration: number,\n    particleSize: number = 10,\n    distanceFromOrigin: number = 5000,\n    particleColor: Color = new Color(0xffffff),\n    onEnd?: () => void\n  ) {\n    const particleGeometry = new SphereBufferGeometry(particleSize, 32, 32);\n    const particleMaterial = new MeshBasicMaterial({\n      color: particleColor,\n      transparent: true,\n      opacity: 0,\n    });\n\n    const particle1 = new Mesh(particleGeometry, particleMaterial);\n    const particle2 = particle1.clone() as Mesh;\n\n    particle1.position.setZ(distanceFromOrigin);\n    particle2.position.setZ(-distanceFromOrigin);\n\n    const particles = [particle1, particle2];\n\n    this.scene.add(...particles);\n\n    const particleTweens = [];\n\n    for (const particle of particles) {\n      new TWEEN.Tween(particle.material)\n        .to(\n          {\n            opacity: 1,\n          },\n          300\n        )\n        .start();\n\n      const particleToOrigin = new TWEEN.Tween(particle.position)\n        .to(\n          {\n            z: 0,\n          },\n          tweenDuration\n        )\n        .start();\n\n      particleTweens.push(particleToOrigin);\n    }\n\n    particleTweens[0].onComplete(() => {\n      this.scene.remove(...particles);\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param animationFunction Animation function to call after collision.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateWithCollision(\n    animationFunction: (\n      tweenDuration: number,\n      onEnd?: () => void,\n      onAnimationStart?: () => void\n    ) => void,\n    tweenDuration: number,\n    onEnd?: () => void\n  ) {\n    const allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    // Get the color of the first track to use for colliding particles\n    const track = allEventData.getObjectByName('Track');\n    let trackColor: Color;\n    if (track instanceof Group) {\n      trackColor = (track.children[0] as any)?.material?.color;\n    } else {\n      trackColor = (track as any)?.material.color;\n    }\n\n    // Hide event data to show particles collision\n    if (allEventData) {\n      allEventData.visible = false;\n    }\n\n    this.collideParticles(1500, 30, 5000, trackColor, () => {\n      animationFunction(tweenDuration, onEnd, () => {\n        if (allEventData) {\n          allEventData.visible = true;\n        }\n      });\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateEventWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.animateWithCollision(this.animateEvent, tweenDuration, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data\n   * using clipping planes after particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateClippingWithCollision(\n    tweenDuration: number,\n    onEnd?: () => void\n  ) {\n    this.animateWithCollision(\n      this.animateEventWithClipping,\n      tweenDuration,\n      onEnd\n    );\n  }\n\n  /**\n   * Get the positions of hits in a multidimensional array\n   * from a single dimensional array.\n   * @param positions Positions of hits in a single dimensional array.\n   * @returns Positions of hits in a multidimensional array.\n   */\n  private getHitsPositions(positions: number[]): number[][] {\n    const hitsPositions: number[][] = [];\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CMSObjects.html":{"url":"classes/CMSObjects.html","title":"class - CMSObjects","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CMSObjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/cms-objects.ts\n        \n\n            \n                Description\n            \n            \n                Physics objects that make up an event in CMS that are not a part of PhoenixObjects.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getMuonChamber\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getMuonChamber\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuonChamber(muonChamberParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/cms-objects.ts:25\n                \n            \n\n\n            \n                \n                    Process the Muon Chamber from the given parameters.\nand get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonChamberParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon Chamber.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon Chamber object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Object3D,\n  Group,\n  Mesh,\n  MeshBasicMaterial,\n  EdgesGeometry,\n  LineBasicMaterial,\n  DoubleSide,\n  LineSegments,\n  BufferGeometry,\n  BufferAttribute,\n} from 'three';\nimport { EVENT_DATA_TYPE_COLORS } from '../../helpers/constants';\n\n/**\n * Physics objects that make up an event in CMS that are not a part of {@link PhoenixObjects}.\n */\nexport class CMSObjects {\n  /**\n   * Process the Muon Chamber from the given parameters.\n   * and get it as a geometry.\n   * @param muonChamberParams Parameters of the Muon Chamber.\n   * @returns Muon Chamber object.\n   */\n  public static getMuonChamber(muonChamberParams: any): Object3D {\n    let allFacePositions: number[] = [];\n\n    const addFace3 = (...faces: string[]) => {\n      allFacePositions = allFacePositions.concat(\n        ...faces.map((face) => muonChamberParams[face])\n      );\n    };\n\n    // front\n    addFace3('front_1', 'front_2', 'front_3');\n    addFace3('front_3', 'front_4', 'front_1');\n\n    // back\n    addFace3('back_1', 'back_2', 'back_3');\n    addFace3('back_3', 'back_4', 'back_1');\n\n    // top\n    addFace3('back_1', 'back_2', 'front_2');\n    addFace3('front_2', 'front_1', 'back_1');\n\n    // bottom\n    addFace3('back_4', 'back_3', 'front_3');\n    addFace3('front_3', 'front_4', 'back_4');\n\n    // left\n    addFace3('front_1', 'front_4', 'back_4');\n    addFace3('back_4', 'back_1', 'front_1');\n\n    // right\n    addFace3('front_2', 'back_2', 'back_3');\n    addFace3('back_3', 'front_3', 'front_2');\n\n    let boxBuffer = new BufferGeometry();\n    boxBuffer.attributes.position = new BufferAttribute(\n      new Float32Array(allFacePositions),\n      3\n    );\n    boxBuffer.computeVertexNormals();\n\n    const boxObject = new Mesh(\n      boxBuffer,\n      new MeshBasicMaterial({\n        color: muonChamberParams.color ?? EVENT_DATA_TYPE_COLORS.MuonChambers,\n        transparent: true,\n        opacity: 0.1,\n        side: DoubleSide,\n      })\n    );\n\n    boxObject.userData = Object.assign({}, muonChamberParams);\n    boxObject.name = 'MuonChamber';\n\n    // These are the lines along the box edges\n\n    const boxEdges = new EdgesGeometry(boxBuffer);\n    const lineBoxObject = new LineSegments(\n      boxEdges,\n      new LineBasicMaterial({\n        color: 0xffffff,\n        transparent: true,\n        opacity: 0.7,\n      })\n    );\n\n    const muonChamber = new Group();\n    muonChamber.add(boxObject);\n    muonChamber.add(lineBoxObject);\n\n    muonChamberParams.uuid = boxObject.uuid;\n\n    return muonChamber;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Configuration.html":{"url":"interfaces/Configuration.html","title":"interface - Configuration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Configuration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extras/configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration of the event display.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        allowUrlOptions\n                                \n                                \n                                            Optional\n                                        defaultEventFile\n                                \n                                \n                                            Optional\n                                        defaultView\n                                \n                                \n                                            Optional\n                                        elementId\n                                \n                                \n                                            Optional\n                                        enableDatGUIMenu\n                                \n                                \n                                            Optional\n                                        eventDataLoader\n                                \n                                \n                                            Optional\n                                        phoenixMenuRoot\n                                \n                                \n                                            Optional\n                                        presetViews\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowUrlOptions\n                                    \n                                \n                                \n                                    \n                                        allowUrlOptions:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to allow URL options or not (true by default). \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultEventFile\n                                    \n                                \n                                \n                                    \n                                        defaultEventFile:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default event to load when none given in URL. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultView\n                                    \n                                \n                                \n                                    \n                                        defaultView:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default view [x,y,z]. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elementId\n                                    \n                                \n                                \n                                    \n                                        elementId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    ID of the wrapper element. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableDatGUIMenu\n                                    \n                                \n                                \n                                    \n                                        enableDatGUIMenu:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to enable dat.GUI menu or not. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventDataLoader\n                                    \n                                \n                                \n                                    \n                                        eventDataLoader:         EventDataLoader\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EventDataLoader\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Event data loader responsible for processing and loading event data. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phoenixMenuRoot\n                                    \n                                \n                                \n                                    \n                                        phoenixMenuRoot:         PhoenixMenuNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PhoenixMenuNode\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Root node of the phoenix menu. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        presetViews\n                                    \n                                \n                                \n                                    \n                                        presetViews:         PresetView[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PresetView[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Preset views for switching event display camera. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { PresetView } from './preset-view.model';\nimport { EventDataLoader } from '../loaders/event-data-loader';\nimport { PhoenixMenuNode } from '../managers/ui-manager/phoenix-menu/phoenix-menu-node';\n\n/**\n * Configuration of the event display.\n */\nexport interface Configuration {\n  /** Default view [x,y,z]. */\n  defaultView?: number[];\n  /** Preset views for switching event display camera. */\n  presetViews?: PresetView[];\n  /** Event data loader responsible for processing and loading event data. */\n  eventDataLoader?: EventDataLoader;\n  /** Root node of the phoenix menu. */\n  phoenixMenuRoot?: PhoenixMenuNode;\n  /** Whether to enable dat.GUI menu or not. */\n  enableDatGUIMenu?: boolean;\n  /** ID of the wrapper element. */\n  elementId?: string;\n  /** Default event to load when none given in URL. */\n  defaultEventFile?: { eventFile: string; eventType: string };\n  /** Whether to allow URL options or not (true by default). */\n  allowUrlOptions?: boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CoordinateHelper.html":{"url":"classes/CoordinateHelper.html","title":"class - CoordinateHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CoordinateHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/coordinate-helper.ts\n        \n\n            \n                Description\n            \n            \n                Helper methods for coordinate conversions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                atlasQuaternion\n                            \n                            \n                                    Static\n                                etaPhiToCartesian\n                            \n                            \n                                    Static\n                                etaToTheta\n                            \n                            \n                                    Static\n                                sphericalToCartesian\n                            \n                            \n                                    Static\n                                thetaToEta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            atlasQuaternion\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    atlasQuaternion()\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:69\n                \n            \n\n\n            \n                \n                    Returns the Quaternion to rotate to ATLAS coords.\nTemporary. We will need to make this configurable per experiment.\n\n\n                    \n                        Returns :     Quaternion\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            etaPhiToCartesian\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    etaPhiToCartesian(radius: number, eta: number, phi: number)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:53\n                \n            \n\n\n            \n                \n                    Get cartesian from eta/phi parameters.\nApplies the necessary rotations to move from threejs native to experimental.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    radius\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The radius.\n\n                                    \n                                \n                                \n                                    eta\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Pseudorapidity\n\n                                    \n                                \n                                \n                                    phi\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Phi angle.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Vector3\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            etaToTheta\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    etaToTheta(eta: number)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:13\n                \n            \n\n\n            \n                \n                    Convert pseudorapidity eta to spherical coordinate theta.\nSee definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eta\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Pseudorapidity eta to convert to theta.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        theta in radians\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            sphericalToCartesian\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sphericalToCartesian(radius: number, theta: number, phi: number)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:34\n                \n            \n\n\n            \n                \n                    Get cartesian from spherical parameters.\nApplies the necessary rotations to move from threejs to experimental.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    radius\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The radius.\n\n                                    \n                                \n                                \n                                    theta\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Theta angle.\n\n                                    \n                                \n                                \n                                    phi\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Phi angle.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Vector3\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            thetaToEta\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    thetaToEta(theta: number)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:23\n                \n            \n\n\n            \n                \n                    Convert spherical theta to pseudorapidity eta.\nSee definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    theta\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Angle in radians to convert to pseudorapidity eta.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        pseudorapidity eta\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3, Quaternion } from 'three';\n\n/**\n * Helper methods for coordinate conversions.\n */\nexport class CoordinateHelper {\n  /**\n   * Convert pseudorapidity eta to spherical coordinate theta.\n   * See definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n   * @param eta Pseudorapidity eta to convert to theta.\n   * @returns theta in radians\n   */\n  public static etaToTheta(eta: number): number {\n    return 2 * Math.atan(Math.pow(Math.E, -eta));\n  }\n\n  /**\n   * Convert spherical theta to pseudorapidity eta.\n   * See definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n   * @param theta Angle in radians to convert to pseudorapidity eta.\n   * @returns pseudorapidity eta\n   */\n  public static thetaToEta(theta: number): number {\n    return -Math.log(Math.tan(theta / 2.0));\n  }\n\n  /**\n   * Get cartesian from spherical parameters.\n   * Applies the necessary rotations to move from threejs to experimental.\n   * @param radius The radius.\n   * @param theta Theta angle.\n   * @param phi Phi angle.\n   */\n  public static sphericalToCartesian(\n    radius: number,\n    theta: number,\n    phi: number\n  ): Vector3 {\n    // Threejs uses theta as azimuthal, so need to reverse.\n    let vector = new Vector3();\n    vector.setFromSphericalCoords(radius, theta, phi);\n    vector.applyQuaternion(CoordinateHelper.atlasQuaternion());\n    return vector;\n  }\n\n  /**\n   * Get cartesian from eta/phi parameters.\n   * Applies the necessary rotations to move from threejs native to experimental.\n   * @param radius The radius.\n   * @param eta Pseudorapidity\n   * @param phi Phi angle.\n   */\n  public static etaPhiToCartesian(\n    radius: number,\n    eta: number,\n    phi: number\n  ): Vector3 {\n    let vector = new Vector3();\n    // Threejs uses theta as azimuthal, so need to reverse.\n    vector.setFromSphericalCoords(radius, this.etaToTheta(eta), phi);\n    vector.applyQuaternion(CoordinateHelper.atlasQuaternion());\n    return vector;\n  }\n\n  /**\n   * Returns the Quaternion to rotate to ATLAS coords.\n   * Temporary. We will need to make this configurable per experiment.\n   */\n  public static atlasQuaternion(): Quaternion {\n    // With nothing, we have eta=0 on x, and phi=0 on z\n    // Should be eta=0 on y, and phi=0 on x\n    const v1 = new Vector3(0, 1, 0);\n    const v2 = new Vector3(0, 0, 1);\n    const quaternion = new Quaternion();\n    quaternion.setFromUnitVectors(v1, v2); // This puts eta~infinite on z-axis, eta=0 on  but y-positive is phi=PI (and eta=0 on x)\n    const quaternion2 = new Quaternion();\n    quaternion2.setFromAxisAngle(new Vector3(0, 1, 0), Math.PI / 2.0); // Now have eta = 3.0 on -x, eta =0 on +y, and phi = 0 on +z\n    quaternion.multiply(quaternion2);\n    return quaternion;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Cut.html":{"url":"classes/Cut.html","title":"class - Cut","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Cut\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extras/cut.model.ts\n        \n\n            \n                Description\n            \n            \n                Cut for specifying filters on event data attribute.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                defaultMaxValue\n                            \n                            \n                                    Private\n                                defaultMinValue\n                            \n                            \n                                    Public\n                                field\n                            \n                            \n                                    Public\n                                maxValue\n                            \n                            \n                                    Public\n                                minValue\n                            \n                            \n                                    Public\n                                step\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: string, minValue: number, maxValue: number, step: number)\n                    \n                \n                        \n                            \n                                Defined in src/extras/cut.model.ts:8\n                            \n                        \n\n                \n                    \n                            Create the cut to filter an event data attribute.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the event data attribute to be filtered.\n\n                                                        \n                                                \n                                                \n                                                        minValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Minimum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                                \n                                                        maxValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Maximum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                                \n                                                        step\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Step for each value change.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            defaultMaxValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:8\n                            \n                        \n\n                \n                    \n                        Default maximum allowed value of the event data attribute. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            defaultMinValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:6\n                            \n                        \n\n                \n                    \n                        Default minimum allowed value of the event data attribute. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            field\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:18\n                            \n                        \n\n                \n                    \n                        Name of the event data attribute to be filtered.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            maxValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:20\n                            \n                        \n\n                \n                    \n                        Maximum allowed value of the event data attribute.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            minValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:19\n                            \n                        \n\n                \n                    \n                        Minimum allowed value of the event data attribute.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            step\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:21\n                            \n                        \n\n                \n                    \n                        Step for each value change.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/extras/cut.model.ts:30\n                \n            \n\n\n            \n                \n                    Reset the minimum and maximum value of the cut to default.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Cut {\n  /** Default minimum allowed value of the event data attribute. */\n  private defaultMinValue: number;\n  /** Default maximum allowed value of the event data attribute. */\n  private defaultMaxValue: number;\n\n  /**\n   * Create the cut to filter an event data attribute.\n   * @param field Name of the event data attribute to be filtered.\n   * @param minValue Minimum allowed value of the event data attribute.\n   * @param maxValue Maximum allowed value of the event data attribute.\n   * @param step Step for each value change.\n   */\n  constructor(\n    public field: string,\n    public minValue: number,\n    public maxValue: number,\n    public step: number = 1\n  ) {\n    this.defaultMinValue = minValue;\n    this.defaultMaxValue = maxValue;\n  }\n\n  /**\n   * Reset the minimum and maximum value of the cut to default.\n   */\n  reset() {\n    this.minValue = this.defaultMinValue;\n    this.maxValue = this.defaultMaxValue;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatGUIMenuUI.html":{"url":"classes/DatGUIMenuUI.html","title":"class - DatGUIMenuUI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatGUIMenuUI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/ui-manager/dat-gui-ui.ts\n        \n\n            \n                Description\n            \n            \n                A wrapper class for dat.GUI menu to perform UI related operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                eventFolder\n                            \n                            \n                                    Private\n                                geomFolder\n                            \n                            \n                                    Private\n                                gui\n                            \n                            \n                                    Private\n                                guiParameters\n                            \n                            \n                                    Private\n                                labelsFolder\n                            \n                            \n                                    Private\n                                maxPositionX\n                            \n                            \n                                    Private\n                                maxPositionY\n                            \n                            \n                                    Private\n                                maxPositionZ\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addCollection\n                            \n                            \n                                    Public\n                                addEventDataFolder\n                            \n                            \n                                    Public\n                                addEventDataTypeFolder\n                            \n                            \n                                    Public\n                                addGeometry\n                            \n                            \n                                    Public\n                                addGeomFolder\n                            \n                            \n                                    Public\n                                addLabel\n                            \n                            \n                                    Public\n                                addLabelsFolder\n                            \n                            \n                                    Public\n                                clearDatGUI\n                            \n                            \n                                    Public\n                                removeLabel\n                            \n                            \n                                    Private\n                                removeOBJ\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elementId: string, three: ThreeManager)\n                    \n                \n                        \n                            \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:34\n                            \n                        \n\n                \n                    \n                            Create dat.GUI menu UI with different controls related to detector geometry and event data.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        elementId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                ID of the wrapper element.\n\n                                                        \n                                                \n                                                \n                                                        three\n                                                  \n                                                        \n                                                                        ThreeManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The three manager for managing three.js related operations.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventFolder\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     GUI\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/dat-gui-ui.ts:25\n                            \n                        \n\n                \n                    \n                        dat.GUI menu folder containing event related data. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            geomFolder\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     GUI\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/dat-gui-ui.ts:23\n                            \n                        \n\n                \n                    \n                        dat.GUI menu folder containing geometries data. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            gui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     GUI\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/dat-gui-ui.ts:12\n                            \n                        \n\n                \n                    \n                        dat.GUI menu. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            guiParameters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    rotate: undefined,\n    axis: undefined,\n    lowRes: undefined,\n    eventData: undefined,\n    geometries: undefined,\n    labels: undefined,\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/dat-gui-ui.ts:14\n                            \n                        \n\n                \n                    \n                        Options for the dat.GUI menu. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            labelsFolder\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     GUI\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/dat-gui-ui.ts:27\n                            \n                        \n\n                \n                    \n                        dat.GUI menu folder containing labels. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            maxPositionX\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 4000\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/dat-gui-ui.ts:30\n                            \n                        \n\n                \n                    \n                        Max changeable position of an object along the x-axis. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            maxPositionY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 4000\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/dat-gui-ui.ts:32\n                            \n                        \n\n                \n                    \n                        Max changeable position of an object along the y-axis. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            maxPositionZ\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 4000\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/dat-gui-ui.ts:34\n                            \n                        \n\n                \n                    \n                        Max changeable position of an object along the z-axis. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(typeFolder: GUI, collectionName: string, cuts?: Cut[], collectionColor?: Color)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:241\n                \n            \n\n\n            \n                \n                    Add collection folder and its configurable options to the event data type (tracks, hits etc.) folder.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    typeFolder\n                                    \n                                            GUI\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        dat.GUI menu folder of an event data type.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to be added in the type of event data (tracks, hits etc.).\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Cuts to the collection of event data that are to be made configurable to filter event data.\n\n                                    \n                                \n                                \n                                    collectionColor\n                                    \n                                            Color\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Color of the collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addEventDataFolder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addEventDataFolder()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:187\n                \n            \n\n\n            \n                \n                    Functions for event data toggles like show/hide and depthTest.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addEventDataTypeFolder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addEventDataTypeFolder(typeName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:220\n                \n            \n\n\n            \n                \n                    Add folder for event data type like tracks or hits to the dat.GUI menu.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the type of event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     GUI\n\n                    \n                    \n                        dat.GUI menu's folder for event data type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addGeometry(name: string, color: any, initiallyVisible: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:98\n                \n            \n\n\n            \n                \n                    Adds geometry to the dat.GUI menu's geometry folder and sets up its configurable options.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Name of the geometry.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Color of the geometry.\n\n                                    \n                                \n                                \n                                    initiallyVisible\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        Whether the geometry is initially visible or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addGeomFolder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addGeomFolder()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:67\n                \n            \n\n\n            \n                \n                    Add geometry (detector geometry) folder to the dat.GUI menu.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLabel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabel(labelId: string, removeLabel?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:356\n                \n            \n\n\n            \n                \n                    Add configuration UI for label.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    labelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Unique ID of the label.\n\n                                    \n                                \n                                \n                                    removeLabel\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to remove label from the scene.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLabelsFolder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabelsFolder(configFunctions: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:304\n                \n            \n\n\n            \n                \n                    Add labels folder to dat.GUI menu.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configFunctions\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Functions to attach to the labels folder configuration.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clearDatGUI\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clearDatGUI()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:56\n                \n            \n\n\n            \n                \n                    Clear the dat.GUI menu.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeLabel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLabel(labelId: string, labelItemFolder?: GUI)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:393\n                \n            \n\n\n            \n                \n                    Remove label from UI, scene and event data loader if it exists.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    labelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A unique label ID string.\n\n                                    \n                                \n                                \n                                    labelItemFolder\n                                    \n                                            GUI\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        dat.GUI folder of the label if any.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            removeOBJ\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeOBJ(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:174\n                \n            \n\n\n            \n                \n                    Remove object from the dat.GUI menu.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the object to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     () => void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { GUI } from 'dat.gui';\nimport { Color } from 'three';\nimport { ThreeManager } from '../three-manager';\nimport { SceneManager } from '../three-manager/scene-manager';\nimport { Cut } from '../../extras/cut.model';\n\n/**\n * A wrapper class for dat.GUI menu to perform UI related operations.\n */\nexport class DatGUIMenuUI {\n  /** dat.GUI menu. */\n  private gui: GUI;\n  /** Options for the dat.GUI menu. */\n  private guiParameters = {\n    rotate: undefined,\n    axis: undefined,\n    lowRes: undefined,\n    eventData: undefined,\n    geometries: undefined,\n    labels: undefined,\n  };\n  /** dat.GUI menu folder containing geometries data. */\n  private geomFolder: GUI;\n  /** dat.GUI menu folder containing event related data. */\n  private eventFolder: GUI;\n  /** dat.GUI menu folder containing labels. */\n  private labelsFolder: GUI;\n\n  /** Max changeable position of an object along the x-axis. */\n  private maxPositionX = 4000;\n  /** Max changeable position of an object along the y-axis. */\n  private maxPositionY = 4000;\n  /** Max changeable position of an object along the z-axis. */\n  private maxPositionZ = 4000;\n\n  /**\n   * Create dat.GUI menu UI with different controls related to detector geometry and event data.\n   * @param elementId ID of the wrapper element.\n   * @param three The three manager for managing three.js related operations.\n   */\n  constructor(elementId: string = 'eventDisplay', private three: ThreeManager) {\n    this.gui = new GUI();\n    this.gui.domElement.id = 'gui';\n    this.gui.domElement.style.cssText =\n      'position: absolute; right: 0; top: 2rem; z-index: 11;';\n    const canvas = document.getElementById(elementId) ?? document.body;\n    canvas.appendChild(this.gui.domElement);\n    this.geomFolder = null;\n    this.eventFolder = null;\n    this.labelsFolder = null;\n  }\n\n  /**\n   * Clear the dat.GUI menu.\n   */\n  public clearDatGUI() {\n    const gui = document.getElementById('gui');\n    if (gui != null) {\n      gui.remove();\n    }\n    this.geomFolder = null;\n  }\n\n  /**\n   * Add geometry (detector geometry) folder to the dat.GUI menu.\n   */\n  public addGeomFolder() {\n    if (this.geomFolder === null) {\n      this.geomFolder = this.gui.addFolder(SceneManager.GEOMETRIES_ID);\n    }\n    this.guiParameters.geometries = { show: true, wireframe: false };\n    // A boolean toggle for showing/hiding the geometries is added to the 'Geometry' folder.\n    const showGeometriesMenu = this.geomFolder\n      .add(this.guiParameters.geometries, 'show')\n      .name('Show')\n      .listen();\n    showGeometriesMenu.onChange((value) => {\n      this.three\n        .getSceneManager()\n        .objectVisibility(SceneManager.GEOMETRIES_ID, value);\n    });\n    // A boolean toggle for enabling/disabling the geometries' wireframing.\n    const wireframeGeometriesMenu = this.geomFolder\n      .add(this.guiParameters.geometries, 'wireframe')\n      .name('Wireframe')\n      .listen();\n    wireframeGeometriesMenu.onChange((value) => {\n      this.three.getSceneManager().wireframeGeometries(value);\n    });\n  }\n\n  /**\n   * Adds geometry to the dat.GUI menu's geometry folder and sets up its configurable options.\n   * @param name Name of the geometry.\n   * @param color Color of the geometry.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public addGeometry(\n    name: string,\n    color: any,\n    initiallyVisible: boolean = true\n  ) {\n    // A new folder for the object is added to the 'Geometry' folder\n    this.guiParameters[name] = {\n      show: initiallyVisible,\n      color: color ?? '#000000',\n      x: 0,\n      y: 0,\n      z: 0,\n      detectorOpacity: 1.0,\n      remove: this.removeOBJ(name),\n      scale: 1,\n    };\n\n    const objFolder = this.geomFolder.addFolder(name);\n    // A color picker is added to the object's folder\n    const colorMenu = objFolder\n      .addColor(this.guiParameters[name], 'color')\n      .name('Color');\n    colorMenu.onChange((value) =>\n      this.three.getSceneManager().changeObjectColor(name, value)\n    );\n\n    const opacity = objFolder\n      .add(this.guiParameters[name], 'detectorOpacity', 0.0, 1.0)\n      .name('Opacity');\n    opacity.onFinishChange((newValue) =>\n      this.three.getSceneManager().setGeometryOpacity(name, newValue)\n    );\n\n    // A boolean toggle for showing/hiding the object is added to its folder\n    const showMenu = objFolder\n      .add(this.guiParameters[name], 'show')\n      .name('Show')\n      .listen();\n    showMenu.onChange((value) =>\n      this.three.getSceneManager().objectVisibility(name, value)\n    );\n    // Scale slider\n    const scaleMenu = objFolder\n      .add(this.guiParameters[name], 'scale', 0, 1000)\n      .name('Scale');\n    scaleMenu.onChange((value) => {\n      this.three.getSceneManager().scaleObject(name, value);\n    });\n    // Controls for positioning.\n    // const position = this.three.getObjectPosition(name);\n    objFolder\n      .add(this.guiParameters[name], 'x', -this.maxPositionX, this.maxPositionX)\n      .name('X')\n      .onChange((value) =>\n        this.three.getSceneManager().getObjectPosition(name).setX(value)\n      );\n    objFolder\n      .add(this.guiParameters[name], 'y', -this.maxPositionY, this.maxPositionY)\n      .name('Y')\n      .onChange((value) =>\n        this.three.getSceneManager().getObjectPosition(name).setY(value)\n      );\n    objFolder\n      .add(this.guiParameters[name], 'z', -this.maxPositionZ, this.maxPositionZ)\n      .name('Z')\n      .onChange((value) =>\n        this.three.getSceneManager().getObjectPosition(name).setZ(value)\n      );\n    // Controls for deleting the obj\n    objFolder.add(this.guiParameters[name], 'remove').name('Remove');\n  }\n\n  /**\n   * Remove object from the dat.GUI menu.\n   * @param name Name of the object to be removed.\n   */\n  private removeOBJ(name: string) {\n    return () => {\n      const folder = this.geomFolder.__folders[name];\n      if (folder) {\n        this.geomFolder.removeFolder(folder);\n      }\n      this.three.getSceneManager().removeGeometry(name);\n    };\n  }\n\n  /**\n   * Functions for event data toggles like show/hide and depthTest.\n   */\n  public addEventDataFolder() {\n    // If there is already an event data folder it is deleted and we create a new one.\n    if (this.eventFolder !== null) {\n      this.gui.removeFolder(this.eventFolder);\n    }\n\n    // A new folder for the Event Data is added to the GUI.\n    this.eventFolder = this.gui.addFolder('Event Data');\n    this.guiParameters.eventData = { show: true, depthTest: true };\n    // A boolean toggle for showing/hiding the event data is added to the 'Event Data' folder.\n    const menu = this.eventFolder\n      .add(this.guiParameters.eventData, 'show')\n      .name('Show')\n      .listen();\n    menu.onChange((value) =>\n      this.three\n        .getSceneManager()\n        .objectVisibility(SceneManager.EVENT_DATA_ID, value)\n    );\n\n    // A boolean toggle for enabling/disabling depthTest of event data.\n    const depthTestMenu = this.eventFolder\n      .add(this.guiParameters.eventData, 'depthTest')\n      .name('Depth Test')\n      .listen();\n    depthTestMenu.onChange((value) => this.three.eventDataDepthTest(value));\n  }\n\n  /**\n   * Add folder for event data type like tracks or hits to the dat.GUI menu.\n   * @param typeName Name of the type of event data.\n   * @returns dat.GUI menu's folder for event data type.\n   */\n  public addEventDataTypeFolder(typeName: string): GUI {\n    const typeFolder = this.eventFolder.addFolder(typeName);\n    this.guiParameters.eventData[typeName] = true;\n    const menu = typeFolder\n      .add(this.guiParameters.eventData, typeName)\n      .name('Show')\n      .listen();\n    menu.onChange((value) =>\n      this.three.getSceneManager().objectVisibility(typeName, value)\n    );\n\n    return typeFolder;\n  }\n\n  /**\n   * Add collection folder and its configurable options to the event data type (tracks, hits etc.) folder.\n   * @param typeFolder dat.GUI menu folder of an event data type.\n   * @param collectionName Name of the collection to be added in the type of event data (tracks, hits etc.).\n   * @param cuts Cuts to the collection of event data that are to be made configurable to filter event data.\n   * @param collectionColor Color of the collection.\n   */\n  public addCollection(\n    typeFolder: GUI,\n    collectionName: string,\n    cuts?: Cut[],\n    collectionColor?: Color\n  ) {\n    if (typeFolder) {\n      // A new folder for the collection is added to the 'Event Data' folder\n      this.guiParameters[collectionName] = {\n        show: true,\n        color: 0x000000,\n        resetCut: () =>\n          this.three\n            .getSceneManager()\n            .groupVisibility(collectionName, true, SceneManager.EVENT_DATA_ID),\n      };\n      const collFolder = typeFolder.addFolder(collectionName);\n      // A boolean toggle for showing/hiding the collection is added to its folder\n      const showMenu = collFolder\n        .add(this.guiParameters[collectionName], 'show')\n        .name('Show')\n        .listen();\n      showMenu.onChange((value) =>\n        this.three\n          .getSceneManager()\n          .objectVisibility(collectionName, value, SceneManager.EVENT_DATA_ID)\n      );\n      // A color picker is added to the collection's folder\n      const colorMenu = collFolder\n        .addColor(this.guiParameters[collectionName], 'color')\n        .name('Color');\n      colorMenu.onChange((value) =>\n        this.three.getSceneManager().collectionColor(collectionName, value)\n      );\n      colorMenu.setValue(collectionColor?.getHex());\n      // Cuts menu\n      if (cuts) {\n        const cutsFolder = collFolder.addFolder('Cuts');\n        cutsFolder\n          .add(this.guiParameters[collectionName], 'resetCut')\n          .name('Reset cuts');\n        for (const cut of cuts) {\n          const minCut = cutsFolder\n            .add(cut, 'minValue', cut.minValue, cut.maxValue)\n            .name('min ' + cut.field);\n          minCut.onChange((value) => {\n            this.three.getSceneManager().collectionFilter(collectionName, cuts);\n          });\n          const maxCut = cutsFolder\n            .add(cut, 'maxValue', cut.minValue, cut.maxValue)\n            .name('max ' + cut.field);\n          maxCut.onChange((value) => {\n            this.three.getSceneManager().collectionFilter(collectionName, cuts);\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Add labels folder to dat.GUI menu.\n   * @param configFunctions Functions to attach to the labels folder configuration.\n   */\n  public addLabelsFolder(configFunctions: any) {\n    if (this.labelsFolder !== null) {\n      return;\n    }\n\n    const {\n      onToggle,\n      onSizeChange,\n      onColorChange,\n      onSaveLabels,\n      onLoadLabels,\n    } = configFunctions;\n\n    this.labelsFolder = this.gui.addFolder(SceneManager.LABELS_ID);\n\n    this.guiParameters.labels = {\n      show: true,\n      size: 1,\n      color: '#a8a8a8',\n      saveLabels: onSaveLabels,\n      loadLabels: onLoadLabels,\n    };\n\n    const showMenu = this.labelsFolder\n      .add(this.guiParameters.labels, 'show')\n      .name('Show')\n      .listen();\n    showMenu.onChange(onToggle);\n\n    const labelsSizeMenu = this.labelsFolder\n      .add(this.guiParameters.labels, 'size', 0, 10)\n      .name('Size');\n    labelsSizeMenu.onFinishChange(onSizeChange);\n\n    const colorMenu = this.labelsFolder\n      .addColor(this.guiParameters.labels, 'color')\n      .name('Color');\n    colorMenu.onChange(onColorChange);\n\n    this.labelsFolder\n      .add(this.guiParameters.labels, 'saveLabels')\n      .name('Save Labels');\n    this.labelsFolder\n      .add(this.guiParameters.labels, 'loadLabels')\n      .name('Load Labels');\n  }\n\n  /**\n   * Add configuration UI for label.\n   * @param labelId Unique ID of the label.\n   * @param removeLabel Function to remove label from the scene.\n   */\n  public addLabel(labelId: string, removeLabel?: () => void) {\n    this.guiParameters[labelId] = {\n      show: true,\n      color: 0xafafaf,\n    };\n\n    const labelItem = this.labelsFolder.addFolder(labelId);\n\n    const visibilityToggle = labelItem\n      .add(this.guiParameters[labelId], 'show')\n      .name('Show')\n      .listen();\n    visibilityToggle.onChange((value) => {\n      this.three\n        .getSceneManager()\n        .objectVisibility(labelId, value, SceneManager.LABELS_ID);\n    });\n\n    const colorMenu = labelItem\n      .addColor(this.guiParameters[labelId], 'color')\n      .name('Çolor');\n    colorMenu.onChange((color) =>\n      this.three.getSceneManager().changeObjectColor(labelId, color)\n    );\n\n    this.guiParameters[labelId]['removeLabel'] = () => {\n      removeLabel?.();\n      this.removeLabel(labelId, labelItem);\n    };\n    labelItem.add(this.guiParameters[labelId], 'removeLabel').name('Remove');\n  }\n\n  /**\n   * Remove label from UI, scene and event data loader if it exists.\n   * @param labelId A unique label ID string.\n   * @param labelItemFolder dat.GUI folder of the label if any.\n   */\n  public removeLabel(labelId: string, labelItemFolder?: GUI) {\n    if (!labelItemFolder) {\n      labelItemFolder = this.labelsFolder.__folders[labelId];\n    }\n\n    if (labelItemFolder) {\n      this.labelsFolder.removeFolder(labelItemFolder);\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EffectsManager.html":{"url":"classes/EffectsManager.html","title":"class - EffectsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EffectsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/effects-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing three.js event display effects like outline pass and unreal bloom.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                antialiasing\n                            \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Public\n                                composer\n                            \n                            \n                                    Private\n                                defaultRenderPass\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Private\n                                scene\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addOutlinePassForSelection\n                            \n                            \n                                    Private\n                                antialiasRender\n                            \n                            \n                                    Private\n                                effectsRender\n                            \n                            \n                                    Public\n                                removePass\n                            \n                            \n                                    Public\n                                setAntialiasing\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(camera: Camera, scene: Scene, renderer: WebGLRenderer)\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/effects-manager.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for the effects manager which manages effects and three.js passes.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        camera\n                                                  \n                                                        \n                                                                    Camera\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The camera inside the scene.\n\n                                                        \n                                                \n                                                \n                                                        scene\n                                                  \n                                                        \n                                                                    Scene\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The default scene used for event display.\n\n                                                        \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    WebGLRenderer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The main renderer used by the event display.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            antialiasing\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/effects-manager.ts:20\n                            \n                        \n\n                \n                    \n                        Whether antialiasing is enabled or disabled. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            camera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/effects-manager.ts:14\n                            \n                        \n\n                \n                    \n                        The camera inside the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            composer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EffectComposer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/effects-manager.ts:12\n                            \n                        \n\n                \n                    \n                        Effect composer for effect passes. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            defaultRenderPass\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RenderPass\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/effects-manager.ts:18\n                            \n                        \n\n                \n                    \n                        Render pass for rendering the default scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            render\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/effects-manager.ts:23\n                            \n                        \n\n                \n                    \n                        Render function with (normal render) or without antialias (effects render). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            scene\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Scene\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/effects-manager.ts:16\n                            \n                        \n\n                \n                    \n                        The default scene used for event display. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addOutlinePassForSelection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addOutlinePassForSelection()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/effects-manager.ts:69\n                \n            \n\n\n            \n                \n                    Initialize the outline pass for highlighting hovered over event display elements.\n\n\n                    \n                    \n                    \n                        Returns :     OutlinePass\n\n                    \n                    \n                        OutlinePass for highlighting hovered over event display elements.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            antialiasRender\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    antialiasRender(scene: Scene, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/effects-manager.ts:61\n                \n            \n\n\n            \n                \n                    Render for antialias without the effects composer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The default scene used for event display.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            effectsRender\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    effectsRender(scene: Scene, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/effects-manager.ts:48\n                \n            \n\n\n            \n                \n                    Render the effects composer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The default scene used for event display.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removePass\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removePass(pass: Pass)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/effects-manager.ts:88\n                \n            \n\n\n            \n                \n                    Remove a pass from the effect composer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pass\n                                    \n                                            Pass\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Effect pass to be removed from the effect composer.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setAntialiasing\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setAntialiasing(antialias: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/effects-manager.ts:97\n                \n            \n\n\n            \n                \n                    Set the antialiasing of renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    antialias\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether antialiasing is to enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { Camera, Scene, WebGLRenderer, Vector2, NormalBlending } from 'three';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass';\nimport { Pass } from 'three/examples/jsm/postprocessing/Pass';\n\n/**\n * Manager for managing three.js event display effects like outline pass and unreal bloom.\n */\nexport class EffectsManager {\n  /** Effect composer for effect passes. */\n  public composer: EffectComposer;\n  /** The camera inside the scene. */\n  private camera: Camera;\n  /** The default scene used for event display. */\n  private scene: Scene;\n  /** Render pass for rendering the default scene. */\n  private defaultRenderPass: RenderPass;\n  /** Whether antialiasing is enabled or disabled. */\n  public antialiasing: boolean = true;\n\n  /** Render function with (normal render) or without antialias (effects render). */\n  public render: (scene: Scene, camera: Camera) => void;\n\n  /**\n   * Constructor for the effects manager which manages effects and three.js passes.\n   * @param camera The camera inside the scene.\n   * @param scene The default scene used for event display.\n   * @param renderer The main renderer used by the event display.\n   */\n  constructor(camera: Camera, scene: Scene, renderer: WebGLRenderer) {\n    this.composer = new EffectComposer(renderer);\n    this.camera = camera;\n    this.scene = scene;\n\n    this.defaultRenderPass = new RenderPass(this.scene, this.camera);\n    this.composer.addPass(this.defaultRenderPass);\n\n    // Set the starting render function\n    this.render = this.antialiasing ? this.antialiasRender : this.effectsRender;\n  }\n\n  /**\n   * Render the effects composer.\n   * @param scene The default scene used for event display.\n   * @param camera The camera inside the scene.\n   */\n  private effectsRender(scene: Scene, camera: Camera) {\n    if (this.composer) {\n      this.defaultRenderPass.camera = camera;\n      this.defaultRenderPass.scene = scene;\n      this.composer.render();\n    }\n  }\n\n  /**\n   * Render for antialias without the effects composer.\n   * @param scene The default scene used for event display.\n   * @param camera The camera inside the scene.\n   */\n  private antialiasRender(scene: Scene, camera: Camera) {\n    this.composer.renderer.render(scene, camera);\n  }\n\n  /**\n   * Initialize the outline pass for highlighting hovered over event display elements.\n   * @returns OutlinePass for highlighting hovered over event display elements.\n   */\n  public addOutlinePassForSelection(): OutlinePass {\n    const outlinePass = new OutlinePass(\n      new Vector2(window.innerWidth, window.innerHeight),\n      this.scene,\n      this.camera\n    );\n    outlinePass.overlayMaterial.blending = NormalBlending;\n    outlinePass.visibleEdgeColor.set(0xffff66);\n    outlinePass.visibleEdgeColor.set(0xdf5330);\n\n    this.composer.addPass(outlinePass);\n\n    return outlinePass;\n  }\n\n  /**\n   * Remove a pass from the effect composer.\n   * @param pass Effect pass to be removed from the effect composer.\n   */\n  public removePass(pass: Pass) {\n    const passIndex = this.composer.passes.indexOf(pass);\n    this.composer.passes.splice(passIndex, 1);\n  }\n\n  /**\n   * Set the antialiasing of renderer.\n   * @param antialias Whether antialiasing is to enabled or disabled.\n   */\n  public setAntialiasing(antialias: boolean) {\n    this.antialiasing = antialias;\n    this.render = this.antialiasing ? this.antialiasRender : this.effectsRender;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EventDataLoader.html":{"url":"interfaces/EventDataLoader.html","title":"interface - EventDataLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EventDataLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/event-data-loader.ts\n        \n\n            \n                Description\n            \n            \n                Event data loader for implementing different event data loaders.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    addLabelToEventObject\n                                \n                                \n                                    buildEventData\n                                \n                                \n                                    getCollection\n                                \n                                \n                                    getCollections\n                                \n                                \n                                    getEventMetadata\n                                \n                                \n                                    getEventsList\n                                \n                                \n                                    getLabelsObject\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addLabelToEventObject\n                        \n                        \n                    \n                \n            \n            \n                \naddLabelToEventObject(label: string, collection: string, indexInCollection: number)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:57\n                \n            \n\n\n            \n                \n                    Add label of event object to the labels object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to add to the event object.\n\n                                    \n                                \n                                \n                                    collection\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Collection the event object is a part of.\n\n                                    \n                                \n                                \n                                    indexInCollection\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event object's index in collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A unique label ID string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \nbuildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:17\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Logger for logging event display data..\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \ngetCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:42\n                \n            \n\n\n            \n                \n                    Get all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Key of the collection that will be retrieved.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Object containing all physics objects from the desired collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \ngetCollections()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:35\n                \n            \n\n\n            \n                \n                    Get the different collections for the current stored event.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of strings, each representing a collection of the event displayed.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:48\n                \n            \n\n\n            \n                \n                    Get metadata associated to the displayed event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the displayed event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:29\n                \n            \n\n\n            \n                \n                    Takes an object containing multiple events and returns the keys of these events.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object that contains the different events.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of keys of the different events.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getLabelsObject\n                        \n                        \n                    \n                \n            \n            \n                \ngetLabelsObject()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:67\n                \n            \n\n\n            \n                \n                    Get the object containing labels.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The labels object.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ThreeManager } from '../managers/three-manager';\nimport { UIManager } from '../managers/ui-manager';\nimport { InfoLogger } from '../helpers/info-logger';\n\n/**\n * Event data loader for implementing different event data loaders.\n */\nexport interface EventDataLoader {\n  /**\n   * Takes an object that represents ONE event and takes care of adding\n   * the different objects to the graphic library and the UI controls.\n   * @param eventData Object representing the event.\n   * @param graphicsLibrary Manager containing functionality to draw the 3D objects.\n   * @param ui Manager for showing menus and controls to manipulate the geometries.\n   * @param infoLogger Logger for logging event display data..\n   */\n  buildEventData(\n    eventData: any,\n    graphicsLibrary: ThreeManager,\n    ui: UIManager,\n    infoLogger: InfoLogger\n  ): void;\n\n  /**\n   * Takes an object containing multiple events and returns the keys of these events.\n   * @param eventsData Object that contains the different events.\n   * @returns List of keys of the different events.\n   */\n  getEventsList(eventsData: any): string[];\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  getCollections(): string[];\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  getCollection(collectionName: string): any;\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  getEventMetadata(): any[];\n\n  /**\n   * Add label of event object to the labels object.\n   * @param label Label to add to the event object.\n   * @param collection Collection the event object is a part of.\n   * @param indexInCollection Event object's index in collection.\n   * @returns A unique label ID string.\n   */\n  addLabelToEventObject(\n    label: string,\n    collection: string,\n    indexInCollection: number\n  ): string;\n\n  /**\n   * Get the object containing labels.\n   * @returns The labels object.\n   */\n  getLabelsObject(): object;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExportManager.html":{"url":"classes/ExportManager.html","title":"class - ExportManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExportManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/export-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's export related functionality.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                exportPhoenixScene\n                            \n                            \n                                    Public\n                                exportSceneToOBJ\n                            \n                            \n                                    Private\n                                saveEventDataConfiguration\n                            \n                            \n                                    Private\n                                saveGeometriesConfiguration\n                            \n                            \n                                    Private\n                                saveSceneConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            exportPhoenixScene\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exportPhoenixScene(scene: Scene, eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/export-manager.ts:27\n                \n            \n\n\n            \n                \n                    Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene to be exported.\n\n                                    \n                                \n                                \n                                    eventData\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded event data.\n\n                                    \n                                \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            exportSceneToOBJ\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exportSceneToOBJ(scene: Scene)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/export-manager.ts:14\n                \n            \n\n\n            \n                \n                    Exports scene to OBJ file format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene to be exported.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveEventDataConfiguration\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveEventDataConfiguration(eventData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/export-manager.ts:66\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveGeometriesConfiguration\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveGeometriesConfiguration(geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/export-manager.ts:85\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded geometries.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveSceneConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveSceneConfig(eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/export-manager.ts:52\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded scene including event data and geometries.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Curently loaded event data.\n\n                                    \n                                \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { eventData: {}; geometries: {}; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { OBJExporter } from 'three/examples/jsm/exporters/OBJExporter';\nimport { Scene, Object3D } from 'three';\nimport { GLTFExporter } from 'three/examples/jsm/exporters/GLTFExporter';\nimport { saveFile } from '../../helpers/file';\n\n/**\n * Manager for managing event display's export related functionality.\n */\nexport class ExportManager {\n  /**\n   * Exports scene to OBJ file format.\n   * @param scene The scene to be exported.\n   */\n  public exportSceneToOBJ(scene: Scene) {\n    // Instantiate a exporter\n    const exporter = new OBJExporter();\n    const result = exporter.parse(scene);\n    saveFile(result, 'phoenix-obj.obj', 'text/plain');\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   * @param scene The scene to be exported.\n   * @param eventData Currently loaded event data.\n   * @param geometries Currently loaded geometries.\n   */\n  public exportPhoenixScene(\n    scene: Scene,\n    eventData: Object3D,\n    geometries: Object3D\n  ) {\n    const exporter = new GLTFExporter();\n\n    const sceneConfig = this.saveSceneConfig(eventData, geometries);\n    // Parse the input and generate the glTF output\n    exporter.parse(\n      scene,\n      (result) => {\n        const jsonResult = { sceneConfiguration: sceneConfig, scene: result };\n        const output = JSON.stringify(jsonResult, null, 2);\n        saveFile(output, 'phoenix-scene.phnx', 'text/plain');\n      },\n      null\n    );\n  }\n\n  /**\n   * Save the configuration of the currently loaded scene including event data and geometries.\n   * @param eventData Curently loaded event data.\n   * @param geometries Currently loaded geometries.\n   */\n  private saveSceneConfig(eventData: Object3D, geometries: Object3D) {\n    const eventDataConfig = this.saveEventDataConfiguration(eventData);\n    const geometriesConfig = this.saveGeometriesConfiguration(geometries);\n    const sceneConfig = {\n      eventData: eventDataConfig,\n      geometries: geometriesConfig,\n    };\n    return sceneConfig;\n  }\n\n  /**\n   * Save the configuration of the currently loaded event data.\n   * @param eventData Currently loaded event data.\n   */\n  private saveEventDataConfiguration(eventData: any) {\n    const eventDataConfig = {};\n    for (const objectType of eventData.children) {\n      if (objectType.name) {\n        eventDataConfig[objectType.name] = [];\n        for (const collection of objectType.children) {\n          if (collection.name) {\n            eventDataConfig[objectType.name].push(collection.name);\n          }\n        }\n      }\n    }\n    return eventDataConfig;\n  }\n\n  /**\n   * Save the configuration of the currently loaded geometries.\n   * @param geometries Currently loaded geometries.\n   */\n  private saveGeometriesConfiguration(geometries: Object3D) {\n    const geometriesConfig = [];\n    geometries.children.forEach((object) => {\n      if (object.name !== 'EventData') {\n        geometriesConfig.push(object.name);\n      }\n    });\n    return geometriesConfig;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Field.html":{"url":"classes/Field.html","title":"class - Field","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n            \n                Description\n            \n            \n                Default class to define the field.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(field: Vector3)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:192\n                \n            \n\n\n            \n                \n                    Returns field as a Vector3 in Tesla.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Vector3\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(half_h))\n        .add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir\n        .clone()\n        .add(k1.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir\n        .clone()\n        .add(k2.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(h))\n        .add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir\n        .clone()\n        .add(k3.clone().multiplyScalar(h))\n        .cross(B_last)\n        .multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return (\n        h *\n        (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z))\n      );\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    let fh: number = state.stepSize;\n    let fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(\n      k1\n        .clone()\n        .add(k2)\n        .add(k3)\n        .multiplyScalar(fh2 / 6)\n    );\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(\n      k1\n        .clone()\n        .add(k2.clone().multiplyScalar(2))\n        .add(k3.clone().multiplyScalar(2))\n        .add(k4)\n        .multiplyScalar(fh / 6)\n    );\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3,\n    startDir: Vector3,\n    p: number,\n    q: number,\n    mss: number = -1,\n    plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3; dir: Vector3 }[] {\n    let rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    let result: { pos: Vector3; dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InfoLogger.html":{"url":"classes/InfoLogger.html","title":"class - InfoLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InfoLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/info-logger.ts\n        \n\n            \n                Description\n            \n            \n                Logger for logging event display data\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                infoLoggerList\n                            \n                            \n                                    Private\n                                maxEntries\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                getInfoLoggerList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            infoLoggerList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/info-logger.ts:6\n                            \n                        \n\n                \n                    \n                        List that contains all the info logs \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            maxEntries\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/info-logger.ts:8\n                            \n                        \n\n                \n                    \n                        Max entries to be shown inside the information panel \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(data: string, label?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/info-logger.ts:15\n                \n            \n\n\n            \n                \n                    Add an entry to the info logger\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Data of the info log\n\n                                    \n                                \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Label of the info log\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getInfoLoggerList\n                        \n                        \n                    \n                \n            \n            \n                \ngetInfoLoggerList()\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/info-logger.ts:26\n                \n            \n\n\n            \n                \n                    Get the info logger list being used by the info logger service\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        The info logger list containing log data\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class InfoLogger {\n  /** List that contains all the info logs */\n  private infoLoggerList: any[] = [];\n  /** Max entries to be shown inside the information panel */\n  private maxEntries: number = 10;\n\n  /**\n   * Add an entry to the info logger\n   * @param data Data of the info log\n   * @param label Label of the info log\n   */\n  add(data: string, label?: string) {\n    if (this.infoLoggerList.length > this.maxEntries) {\n      this.infoLoggerList.pop();\n    }\n    this.infoLoggerList.unshift(label ? label + ': ' + data : data);\n  }\n\n  /**\n   * Get the info logger list being used by the info logger service\n   * @returns The info logger list containing log data\n   */\n  getInfoLoggerList(): any[] {\n    return this.infoLoggerList;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LHCbLoader.html":{"url":"classes/LHCbLoader.html","title":"class - LHCbLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LHCbLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/lhcb-loader.ts\n        \n\n            \n                Description\n            \n            \n                PhoenixLoader for processing and loading an LHCb event.\n\n            \n\n            \n                Extends\n            \n            \n                        PhoenixLoader\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                data\n                            \n                            \n                                    Protected\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Protected\n                                labelsObject\n                            \n                            \n                                    Protected\n                                loadingManager\n                            \n                            \n                                    Protected\n                                stateManager\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getEventData\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                process\n                            \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Public\n                                addLabelToEventObject\n                            \n                            \n                                    Protected\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Public\n                                getLabelsObject\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                    Protected\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/loaders/lhcb-loader.ts:8\n                            \n                        \n\n                \n                    \n                            Constructor for the LHCb loader.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/lhcb-loader.ts:8\n                            \n                        \n\n                \n                    \n                        Event data to be processed. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:21\n\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:17\n\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            labelsObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:27\n\n                            \n                        \n\n                \n                    \n                        Object containing event object labels. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            loadingManager\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LoadingManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:23\n\n                            \n                        \n\n                \n                    \n                        Loading manager for loadable resources \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            stateManager\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         StateManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:25\n\n                            \n                        \n\n                \n                    \n                        Loading manager for loadable resources \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:19\n\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventData()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/lhcb-loader.ts:31\n                \n            \n\n\n            \n                \n                    Process and get the event data.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The processed event data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/lhcb-loader.ts:62\n                \n            \n\n\n            \n                \n                    Get LHCb specific metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            process\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    process(data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/lhcb-loader.ts:22\n                \n            \n\n\n            \n                \n                    Set the event data for the loader.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event data as JSON.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group, concatonateObjs: Boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:386\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                                \n                                    concatonateObjs\n                                    \n                                                Boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If true, don't process objects individually, but process as a group (e.g. for point hits).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLabelToEventObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabelToEventObject(label: string, collection: string, indexInCollection: number)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:545\n\n                \n            \n\n\n            \n                \n                    Add label of event object to the labels object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to be saved.\n\n                                    \n                                \n                                \n                                    collection\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Collection the event object is a part of.\n\n                                    \n                                \n                                \n                                    indexInCollection\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event object's index in collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A unique label ID string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, concatonateObjs: boolean, cuts?: Cut[], extendEventDataTypeUI?: (typeFolder?: any,typeFolderPM?: PhoenixMenuNode) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:339\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    concatonateObjs\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        If true, don't process objects individually, but process as a group (e.g. for point hits). Default is false.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                                \n                                    extendEventDataTypeUI\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        A callback to add more options to event data type UI folder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:45\n\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphics library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:121\n\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:97\n\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:490\n\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:81\n\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLabelsObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLabelsObject()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:571\n\n                \n            \n\n\n            \n                \n                    Get the object containing labels.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The labels object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:437\n\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:420\n\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:142\n\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PhoenixLoader } from './phoenix-loader';\n\n/**\n * PhoenixLoader for processing and loading an LHCb event.\n */\nexport class LHCbLoader extends PhoenixLoader {\n  /** Event data to be processed. */\n  private data: any;\n\n  /**\n   * Constructor for the LHCb loader.\n   */\n  constructor() {\n    super();\n    this.data = {};\n  }\n\n  /**\n   * Set the event data for the loader.\n   * @param data Event data as JSON.\n   */\n  public process(data: any) {\n    console.log('Processing event data');\n    this.data = data;\n  }\n\n  /**\n   * Process and get the event data.\n   * @returns The processed event data.\n   */\n  public getEventData(): any {\n    const eventData = {\n      eventNumber: this.data.eventNumber,\n      runNumber: this.data.runNumber,\n      Hits: {},\n      Tracks: {},\n    };\n\n    let part_list = [];\n    const pdata_list = this.data.PARTICLES;\n    if (pdata_list) {\n      for (let j = 0; j \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadingManager.html":{"url":"classes/LoadingManager.html","title":"class - LoadingManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadingManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/loading-manager.ts\n        \n\n            \n                Description\n            \n            \n                Phoenix loading manager for managing loadable items.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                instance\n                            \n                            \n                                    Public\n                                loaded\n                            \n                            \n                                    Private\n                                onLoadCallbacks\n                            \n                            \n                                    Private\n                                onProgressCallbacks\n                            \n                            \n                                    Private\n                                progressItems\n                            \n                            \n                                    Public\n                                toLoad\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addLoadableItem\n                            \n                            \n                                    Public\n                                addLoadListener\n                            \n                            \n                                    Public\n                                addLoadListenerWithCheck\n                            \n                            \n                                    Public\n                                addProgressListener\n                            \n                            \n                                    Public\n                                itemLoaded\n                            \n                            \n                                    Public\n                                onProgress\n                            \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/loading-manager.ts:19\n                            \n                        \n\n                \n                    \n                            Create the singleton Phoenix loading manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            instance\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LoadingManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:6\n                            \n                        \n\n                \n                    \n                        Instance of the loading manager \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            loaded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:11\n                            \n                        \n\n                \n                    \n                        Items loaded \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onLoadCallbacks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     (function)[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:14\n                            \n                        \n\n                \n                    \n                        Callbacks to call on load. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onProgressCallbacks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     (function)[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:16\n                            \n                        \n\n                \n                    \n                        Callbacks to call on progress. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            progressItems\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:19\n                            \n                        \n\n                \n                    \n                        Progress for each named item. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toLoad\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:9\n                            \n                        \n\n                \n                    \n                        Items to load. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLoadableItem\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLoadableItem(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:36\n                \n            \n\n\n            \n                \n                    Add count for a loadable item.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        ID of the item to be loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLoadListener\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLoadListener(callback: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:80\n                \n            \n\n\n            \n                \n                    Add a listener for when all items have loaded.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call when all items have loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLoadListenerWithCheck\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLoadListenerWithCheck(callback: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:89\n                \n            \n\n\n            \n                \n                    Add a listener for when all items have loaded and check if there\nare any items to load when the listener is added.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call when all items have loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addProgressListener\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addProgressListener(callback: (progress: number) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:101\n                \n            \n\n\n            \n                \n                    Add a listener for when an item progress.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call when there is progress.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            itemLoaded\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    itemLoaded(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:44\n                \n            \n\n\n            \n                \n                    Add count for an item is loaded.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        ID of the item loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            onProgress\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onProgress(itemName: string, progress: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:60\n                \n            \n\n\n            \n                \n                    When an item loading progresses.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    itemName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the item with the progress.\n\n                                    \n                                \n                                \n                                    progress\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Progress of the item.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:108\n                \n            \n\n\n            \n                \n                    Reset the loading manager and its items.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class LoadingManager {\n  /** Instance of the loading manager */\n  private static instance: LoadingManager;\n\n  /** Items to load. */\n  public toLoad: string[] = [];\n  /** Items loaded */\n  public loaded: string[] = [];\n\n  /** Callbacks to call on load. */\n  private onLoadCallbacks: (() => void)[] = [];\n  /** Callbacks to call on progress. */\n  private onProgressCallbacks: ((progress: number) => void)[] = [];\n\n  /** Progress for each named item. */\n  private progressItems: { [key: string]: number } = {};\n\n  /**\n   * Create the singleton Phoenix loading manager.\n   * @returns The loading manager instance.\n   */\n  constructor() {\n    if (LoadingManager.instance === undefined) {\n      LoadingManager.instance = this;\n    }\n    return LoadingManager.instance;\n  }\n\n  /**\n   * Add count for a loadable item.\n   * @param id ID of the item to be loaded.\n   */\n  public addLoadableItem(id: string = '') {\n    this.toLoad.push(id);\n  }\n\n  /**\n   * Add count for an item is loaded.\n   * @param id ID of the item loaded.\n   */\n  public itemLoaded(id: string = '') {\n    this.loaded.push(id);\n    if (\n      this.toLoad.length === this.loaded.length &&\n      this.toLoad.sort().join(',') === this.loaded.sort().join(',')\n    ) {\n      this.onLoadCallbacks.forEach((callback) => callback());\n      this.reset();\n    }\n  }\n\n  /**\n   * When an item loading progresses.\n   * @param itemName Name of the item with the progress.\n   * @param progress Progress of the item.\n   */\n  public onProgress(itemName: string, progress: number) {\n    this.progressItems[itemName] = progress;\n\n    let totalProgress = Object.values(this.progressItems).reduce(\n      (acc, val) => acc + val,\n      0\n    );\n    let totalItems = Object.keys(this.progressItems).length;\n\n    const averageProgress = totalProgress / totalItems;\n\n    for (const callback of this.onProgressCallbacks) {\n      callback(averageProgress);\n    }\n  }\n\n  /**\n   * Add a listener for when all items have loaded.\n   * @param callback Callback to call when all items have loaded.\n   */\n  public addLoadListener(callback: () => void) {\n    this.onLoadCallbacks.push(callback);\n  }\n\n  /**\n   * Add a listener for when all items have loaded and check if there\n   * are any items to load when the listener is added.\n   * @param callback Callback to call when all items have loaded.\n   */\n  public addLoadListenerWithCheck(callback: () => void) {\n    if (this.toLoad.length > 0 && this.toLoad.length !== this.loaded.length) {\n      this.onLoadCallbacks.push(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Add a listener for when an item progress.\n   * @param callback Callback to call when there is progress.\n   */\n  public addProgressListener(callback: (progress: number) => void) {\n    this.onProgressCallbacks.push(callback);\n  }\n\n  /**\n   * Reset the loading manager and its items.\n   */\n  public reset() {\n    this.toLoad = [];\n    this.loaded = [];\n    this.onLoadCallbacks = [];\n    this.onProgressCallbacks = [];\n    this.progressItems = {};\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixMenuNode.html":{"url":"classes/PhoenixMenuNode.html","title":"class - PhoenixMenuNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixMenuNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts\n        \n\n            \n                Description\n            \n            \n                A single node of phoenix menu item.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                children\n                            \n                            \n                                childrenActive\n                            \n                            \n                                    Private\n                                childrenToggleState\n                            \n                            \n                                configActive\n                            \n                            \n                                configs\n                            \n                            \n                                icon\n                            \n                            \n                                name\n                            \n                            \n                                nodeLevel\n                            \n                            \n                                onToggle\n                            \n                            \n                                    Private\n                                parent\n                            \n                            \n                                toggleState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addChild\n                            \n                            \n                                addConfig\n                            \n                            \n                                applyConfigState\n                            \n                            \n                                findInTree\n                            \n                            \n                                findInTreeOrCreate\n                            \n                            \n                                getNodeState\n                            \n                            \n                                loadStateFromJSON\n                            \n                            \n                                remove\n                            \n                            \n                                removeChild\n                            \n                            \n                                toggleSelfAndDescendants\n                            \n                            \n                                truncate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, icon?: string, onToggle?: (value?: boolean) => void, children?: PhoenixMenuNode[], configs?: any[], parent?: PhoenixMenuNode)\n                    \n                \n                        \n                            \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:41\n                            \n                        \n\n                \n                    \n                            Create the phoenix menu node.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the node.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Icon of the node.\n\n                                                        \n                                                \n                                                \n                                                        onToggle\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Function on toggling the node.\n\n                                                        \n                                                \n                                                \n                                                        children\n                                                  \n                                                        \n                                                                        PhoenixMenuNode[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Children of the node.\n\n                                                        \n                                                \n                                                \n                                                        configs\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Configuration options in the node.\n\n                                                        \n                                                \n                                                \n                                                        parent\n                                                  \n                                                        \n                                                                        PhoenixMenuNode\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Parent of the node.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:25\n                            \n                        \n\n                \n                    \n                        Children of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            childrenActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:39\n                            \n                        \n\n                \n                    \n                        If the node children are active or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            childrenToggleState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:36\n                            \n                        \n\n                \n                    \n                        Previous toggle state of child nodes. This is so that the\nprevious state of child can be restored if we toggle the parent back on.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            configActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:41\n                            \n                        \n\n                \n                    \n                        If the node configuration options are active or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            configs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:27\n                            \n                        \n\n                \n                    \n                        Configuration options in the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            icon\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:19\n                            \n                        \n\n                \n                    \n                        Icon of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:17\n                            \n                        \n\n                \n                    \n                        Name of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nodeLevel\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:29\n                            \n                        \n\n                \n                    \n                        Level of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onToggle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:21\n                            \n                        \n\n                \n                    \n                        Function on toggling the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            parent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:31\n                            \n                        \n\n                \n                    \n                        Parent of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toggleState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:23\n                            \n                        \n\n                \n                    \n                        If the node toggle state is true or false. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addChild\n                        \n                        \n                    \n                \n            \n            \n                \naddChild(name: string, onToggle?: (value?: boolean) => void, icon?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:75\n                \n            \n\n\n            \n                \n                    Add a child to the phoenix menu item.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the child.\n\n                                    \n                                \n                                \n                                    onToggle\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function on toggling the child.\n\n                                    \n                                \n                                \n                                    icon\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Icon of the child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The child node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addConfig\n                        \n                        \n                    \n                \n            \n            \n                \naddConfig(type: PhoenixMenuConfig, options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:124\n                \n            \n\n\n            \n                \n                    Add a config to the phoenix menu item.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                PhoenixMenuConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Type of configuration.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Options for the config.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The current node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            applyConfigState\n                        \n                        \n                    \n                \n            \n            \n                \napplyConfigState(config: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:157\n                \n            \n\n\n            \n                \n                    Apply the current values of config by calling the change function.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Config whose values are to be applied.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findInTree\n                        \n                        \n                    \n                \n            \n            \n                \nfindInTree(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:247\n                \n            \n\n\n            \n                \n                    Find a node in the tree by name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the node to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The found node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findInTreeOrCreate\n                        \n                        \n                    \n                \n            \n            \n                \nfindInTreeOrCreate(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:265\n                \n            \n\n\n            \n                \n                    Find a node in the tree by name or create one.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the node to find or create.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The found or created node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNodeState\n                        \n                        \n                    \n                \n            \n            \n                \ngetNodeState()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:180\n                \n            \n\n\n            \n                \n                    Get current state of the node as an object.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        State of the node as an object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadStateFromJSON\n                        \n                        \n                    \n                \n            \n            \n                \nloadStateFromJSON(json: string | object)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:201\n                \n            \n\n\n            \n                \n                    Load the state of the phoenix menu node from JSON.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    json\n                                    \n                                            string | object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        JSON containing the phoenix menu node state.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:101\n                \n            \n\n\n            \n                \n                    Remove the current node.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeChild\n                        \n                        \n                    \n                \n            \n            \n                \nremoveChild(child: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:92\n                \n            \n\n\n            \n                \n                    Remove a child node.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The child node to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The current node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleSelfAndDescendants\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleSelfAndDescendants(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:137\n                \n            \n\n\n            \n                \n                    Function for toggling the current and all child nodes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the node itself and descendants are to be made true or false.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            truncate\n                        \n                        \n                    \n                \n            \n            \n                \ntruncate()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:114\n                \n            \n\n\n            \n                \n                    Remove all children.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export type PhoenixMenuConfig =\n  | 'checkbox'\n  | 'slider'\n  | 'button'\n  | 'label'\n  | 'color'\n  | 'rangeSlider';\n\n/**\n * A single node of phoenix menu item.\n */\nexport class PhoenixMenuNode {\n  /** Name of the node. */\n  name: string;\n  /** Icon of the node. */\n  icon: string;\n  /** Function on toggling the node. */\n  onToggle: (value: boolean) => void;\n  /** If the node toggle state is true or false. */\n  toggleState: boolean = true;\n  /** Children of the node. */\n  children: PhoenixMenuNode[] = [];\n  /** Configuration options in the node. */\n  configs: any[] = [];\n  /** Level of the node. */\n  nodeLevel: number = 0;\n  /** Parent of the node. */\n  private parent: PhoenixMenuNode;\n  /**\n   * Previous toggle state of child nodes. This is so that the\n   * previous state of child can be restored if we toggle the parent back on.\n   * */\n  private childrenToggleState = {};\n\n  /** If the node children are active or not. */\n  childrenActive: boolean = false;\n  /** If the node configuration options are active or not. */\n  configActive: boolean = false;\n\n  /**\n   * Create the phoenix menu node.\n   * @param name Name of the node.\n   * @param icon Icon of the node.\n   * @param onToggle Function on toggling the node.\n   * @param children Children of the node.\n   * @param configs Configuration options in the node.\n   * @param parent Parent of the node.\n   */\n  constructor(\n    name: string,\n    icon?: string,\n    onToggle?: (value: boolean) => void,\n    children?: PhoenixMenuNode[],\n    configs?: any[],\n    parent?: PhoenixMenuNode\n  ) {\n    this.name = name;\n    this.icon = icon;\n    this.onToggle = onToggle;\n    if (children) this.children = children;\n    if (configs) this.configs = configs;\n    if (parent) this.parent = parent;\n  }\n\n  /**\n   * Add a child to the phoenix menu item.\n   * @param name Name of the child.\n   * @param onToggle Function on toggling the child.\n   * @param icon Icon of the child.\n   * @returns The child node.\n   */\n  addChild(\n    name: string,\n    onToggle?: (value: boolean) => void,\n    icon?: string\n  ): PhoenixMenuNode {\n    const child = new PhoenixMenuNode(name, icon, onToggle);\n    child.parent = this;\n    child.nodeLevel = this.nodeLevel + 1;\n    this.children.push(child);\n    return child;\n  }\n\n  /**\n   * Remove a child node.\n   * @param child The child node to be removed.\n   * @returns The current node.\n   */\n  removeChild(child: PhoenixMenuNode): PhoenixMenuNode {\n    const childIndex = this.children.indexOf(child);\n    this.children.splice(childIndex, 1);\n    return this;\n  }\n\n  /**\n   * Remove the current node.\n   */\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    } else {\n      console.error(\n        'Cannot delete root node of phoenix menu. Set it to undefined/null instead.'\n      );\n    }\n  }\n\n  /**\n   * Remove all children.\n   */\n  truncate() {\n    this.children = [];\n  }\n\n  /**\n   * Add a config to the phoenix menu item.\n   * @param type Type of configuration.\n   * @param options Options for the config.\n   * @returns The current node.\n   */\n  addConfig(type: PhoenixMenuConfig, options: any): PhoenixMenuNode {\n    let configOptions = { type };\n    Object.assign(configOptions, options);\n    const configsLength = this.configs.push(configOptions);\n    // Apply the values of config\n    this.applyConfigState(this.configs[configsLength - 1]);\n    return this;\n  }\n\n  /**\n   * Function for toggling the current and all child nodes.\n   * @param value If the node itself and descendants are to be made true or false.\n   */\n  toggleSelfAndDescendants(value: boolean) {\n    this.onToggle?.(value);\n    this.toggleState = value;\n    for (const child of this.children) {\n      if (!value) {\n        // Save previous toggle state of children and toggle them false\n        this.childrenToggleState[child.name] = child.toggleState;\n        child.toggleSelfAndDescendants(value);\n      } else {\n        // Restore previous toggle state of children\n        child.toggleState = this.childrenToggleState[child.name];\n        child.toggleSelfAndDescendants(child.toggleState);\n      }\n    }\n  }\n\n  /**\n   * Apply the current values of config by calling the change function.\n   * @param config Config whose values are to be applied.\n   */\n  applyConfigState(config: any) {\n    // Apply configs of different config types - manual\n    if (config.type === 'checkbox' && config?.['isChecked']) {\n      config.onChange?.(config?.['isChecked']);\n    } else if (config.type === 'color' && config?.['color']) {\n      config.onChange?.(config?.['color']);\n    } else if (config.type === 'slider' && config?.['value']) {\n      config.onChange?.(config?.['value']);\n    } else if (\n      config.type === 'rangeSlider' &&\n      config?.['value'] !== undefined\n    ) {\n      config.onChange?.({\n        value: config?.['value'],\n        highValue: config?.['highValue'],\n      });\n    }\n  }\n\n  /**\n   * Get current state of the node as an object.\n   * @returns State of the node as an object.\n   */\n  getNodeState(): object {\n    const phoenixNodeJSON: object = {};\n\n    phoenixNodeJSON['name'] = this.name;\n    phoenixNodeJSON['nodeLevel'] = this.nodeLevel;\n    phoenixNodeJSON['toggleState'] = this.toggleState;\n    phoenixNodeJSON['childrenActive'] = this.childrenActive;\n    phoenixNodeJSON['configs'] = this.configs;\n    phoenixNodeJSON['children'] = [];\n\n    for (const child of this.children) {\n      phoenixNodeJSON['children'].push(child.getNodeState());\n    }\n\n    return phoenixNodeJSON;\n  }\n\n  /**\n   * Load the state of the phoenix menu node from JSON.\n   * @param json JSON containing the phoenix menu node state.\n   */\n  loadStateFromJSON(json: string | object) {\n    let jsonObject: any;\n    if (typeof json === 'string') {\n      jsonObject = JSON.parse(json);\n    } else {\n      jsonObject = json;\n    }\n\n    this.childrenActive = jsonObject['childrenActive'];\n    this.toggleState = jsonObject['toggleState'];\n    this.onToggle?.(this.toggleState);\n\n    for (const configState of jsonObject['configs']) {\n      const nodeConfig = this.configs.find(\n        (nodeConfig) =>\n          nodeConfig.type === configState['type'] &&\n          nodeConfig.label === configState['label']\n      );\n\n      if (nodeConfig) {\n        for (const prop in configState) {\n          nodeConfig[prop] = configState[prop];\n        }\n\n        this.applyConfigState(nodeConfig);\n      }\n    }\n\n    for (const childState of jsonObject['children']) {\n      const nodeChild = this.children.filter(\n        (nodeChild) =>\n          nodeChild.name === childState.name &&\n          nodeChild.nodeLevel === childState.nodeLevel\n      )[0];\n\n      if (nodeChild) {\n        nodeChild.loadStateFromJSON(childState);\n      }\n    }\n  }\n\n  /**\n   * Find a node in the tree by name.\n   * @param name Name of the node to find.\n   * @returns The found node.\n   */\n  findInTree(name: string): PhoenixMenuNode {\n    if (this.name === name) {\n      return this;\n    } else {\n      for (const child of this.children) {\n        const nodeFound = child.findInTree(name);\n        if (nodeFound) {\n          return nodeFound;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find a node in the tree by name or create one.\n   * @param name Name of the node to find or create.\n   * @returns The found or created node.\n   */\n  findInTreeOrCreate(name: string): PhoenixMenuNode {\n    let prevNode: PhoenixMenuNode = this;\n    name.split('>').forEach((nodeName) => {\n      nodeName = nodeName.trim();\n      const nodeFound = prevNode.findInTree(nodeName);\n      // const nodeFound = prevNode.children.find(child => child.name === nodeName);\n\n      prevNode = nodeFound ? nodeFound : prevNode.addChild(nodeName, () => {});\n    });\n    return prevNode;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixMenuUI.html":{"url":"classes/PhoenixMenuUI.html","title":"class - PhoenixMenuUI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixMenuUI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts\n        \n\n            \n                Description\n            \n            \n                A wrapper class for Phoenix menu to perform UI related operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                eventFolder\n                            \n                            \n                                    Private\n                                eventFolderState\n                            \n                            \n                                    Private\n                                geomFolder\n                            \n                            \n                                    Private\n                                labelsFolder\n                            \n                            \n                                    Private\n                                phoenixMenu\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addCollection\n                            \n                            \n                                    Public\n                                addEventDataFolder\n                            \n                            \n                                    Public\n                                addEventDataTypeFolder\n                            \n                            \n                                    Public\n                                addGeometry\n                            \n                            \n                                    Public\n                                addGeomFolder\n                            \n                            \n                                    Public\n                                addLabel\n                            \n                            \n                                    Public\n                                addLabelsFolder\n                            \n                            \n                                    Public\n                                clearPhoenixMenu\n                            \n                            \n                                    Public\n                                loadEventFolderState\n                            \n                            \n                                    Public\n                                removeLabelNode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(phoenixMenu: PhoenixMenuNode, three: ThreeManager)\n                    \n                \n                        \n                            \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:21\n                            \n                        \n\n                \n                    \n                            Create Phoenix menu UI with different controls related to detector geometry and event data.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        phoenixMenu\n                                                  \n                                                        \n                                                                        PhoenixMenuNode\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        three\n                                                  \n                                                        \n                                                                        ThreeManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The three manager for managing three.js related operations.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventFolder\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:17\n                            \n                        \n\n                \n                    \n                        Phoenix menu node containing event related data. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventFolderState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:19\n                            \n                        \n\n                \n                    \n                        State of the Phoenix menu node containing event related data. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            geomFolder\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:15\n                            \n                        \n\n                \n                    \n                        Phoenix menu node containing geometries data \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            labelsFolder\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:21\n                            \n                        \n\n                \n                    \n                        Phoenix menu node containing labels. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            phoenixMenu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:13\n                            \n                        \n\n                \n                    \n                        Root node of the phoenix menu. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(typeFolder: PhoenixMenuNode, collectionName: string, cuts?: Cut[], collectionColor?: Color)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:198\n                \n            \n\n\n            \n                \n                    Add collection node and its configurable options to the event data type (tracks, hits etc.) node.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    typeFolder\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Phoenix menu node of an event data type.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to be added in the type of event data (tracks, hits etc.).\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Cuts to the collection of event data that are to be made configurable to filter event data.\n\n                                    \n                                \n                                \n                                    collectionColor\n                                    \n                                            Color\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Default color of the collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addEventDataFolder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addEventDataFolder()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:156\n                \n            \n\n\n            \n                \n                    Functions for event data toggles like show/hide and depthTest.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addEventDataTypeFolder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addEventDataTypeFolder(typeName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:185\n                \n            \n\n\n            \n                \n                    Add folder for event data type like tracks or hits to the Phoenix menu.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the type of event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        Phoenix menu's folder for event data type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addGeometry(name: string, color: any, menuNodeName?: string, initiallyVisible: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:109\n                \n            \n\n\n            \n                \n                    Adds geometry to the dat.GUI menu's geometry folder and sets up its configurable options.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Name of the geometry.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Color of the geometry.\n\n                                    \n                                \n                                \n                                    menuNodeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Name of the node in Phoenix menu to add the geometry to.\n\n                                    \n                                \n                                \n                                    initiallyVisible\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        Whether the geometry is initially visible or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addGeomFolder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addGeomFolder()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:55\n                \n            \n\n\n            \n                \n                    Add geometry (detector geometry) folder to the Phoenix menu.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLabel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabel(labelId: string, removeLabel?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:334\n                \n            \n\n\n            \n                \n                    Add configuration UI for label.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    labelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Unique ID of the label.\n\n                                    \n                                \n                                \n                                    removeLabel\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to remove label from the scene.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLabelsFolder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabelsFolder(configFunctions: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:284\n                \n            \n\n\n            \n                \n                    Add labels folder to Phoenix menu.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configFunctions\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Functions to attach to the labels folder configuration.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clearPhoenixMenu\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clearPhoenixMenu()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:42\n                \n            \n\n\n            \n                \n                    Clear the Phoenix menu.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            loadEventFolderState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadEventFolderState()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:379\n                \n            \n\n\n            \n                \n                    Load previous state of the event data folder in Phoenix menu if any.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeLabelNode\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLabelNode(labelId: string, labelNode?: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:366\n                \n            \n\n\n            \n                \n                    Remove label from UI, scene and event data loader if it exists.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    labelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A unique label ID string.\n\n                                    \n                                \n                                \n                                    labelNode\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Phoenix menu node of the label if any.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { SceneManager } from '../../three-manager/scene-manager';\nimport { ThreeManager } from '../../three-manager';\nimport { PhoenixMenuNode } from './phoenix-menu-node';\nimport { Color } from 'three';\nimport { Cut } from '../../../extras/cut.model';\nimport { PrettySymbols } from '../../../helpers/pretty-symbols';\n\n/**\n * A wrapper class for Phoenix menu to perform UI related operations.\n */\nexport class PhoenixMenuUI {\n  /** Root node of the phoenix menu. */\n  private phoenixMenu: PhoenixMenuNode;\n  /** Phoenix menu node containing geometries data */\n  private geomFolder: PhoenixMenuNode;\n  /** Phoenix menu node containing event related data. */\n  private eventFolder: PhoenixMenuNode;\n  /** State of the Phoenix menu node containing event related data. */\n  private eventFolderState: any;\n  /** Phoenix menu node containing labels. */\n  private labelsFolder: PhoenixMenuNode;\n\n  /**\n   * Create Phoenix menu UI with different controls related to detector geometry and event data.\n   * @param three The three manager for managing three.js related operations.\n   */\n  constructor(phoenixMenu: PhoenixMenuNode, private three: ThreeManager) {\n    if (this.phoenixMenu) {\n      this.phoenixMenu.truncate();\n      this.phoenixMenu = undefined;\n    }\n    this.phoenixMenu = phoenixMenu;\n\n    this.geomFolder = null;\n    this.eventFolder = null;\n    this.labelsFolder = null;\n  }\n\n  /**\n   * Clear the Phoenix menu.\n   */\n  public clearPhoenixMenu() {\n    if (this.phoenixMenu) {\n      this.phoenixMenu.truncate();\n      this.phoenixMenu = undefined;\n    }\n    this.geomFolder = null;\n    this.eventFolder = null;\n    this.labelsFolder = null;\n  }\n\n  /**\n   * Add geometry (detector geometry) folder to the Phoenix menu.\n   */\n  public addGeomFolder() {\n    // Phoenix menu\n    if (this.geomFolder === null) {\n      this.geomFolder = this.phoenixMenu.addChild(\n        'Detector',\n        (value: boolean) => {\n          this.three\n            .getSceneManager()\n            .groupVisibility(SceneManager.GEOMETRIES_ID, value);\n        },\n        'perspective'\n      );\n    }\n    this.geomFolder\n      .addConfig('checkbox', {\n        label: 'Wireframe',\n        isChecked: false,\n        onChange: (value: boolean) => {\n          this.three.getSceneManager().wireframeGeometries(value);\n        },\n      })\n      .addConfig('slider', {\n        label: 'Opacity',\n        min: 0,\n        max: 1,\n        step: 0.01,\n        allowCustomValue: true,\n        onChange: (value: number) => {\n          this.three\n            .getSceneManager()\n            .setGeometryOpacity(SceneManager.GEOMETRIES_ID, value);\n        },\n      })\n      .addConfig('slider', {\n        label: 'Scale',\n        min: 0,\n        max: 20,\n        step: 0.01,\n        allowCustomValue: true,\n        onChange: (scale: number) => {\n          this.three\n            .getSceneManager()\n            .scaleObject(SceneManager.GEOMETRIES_ID, scale);\n        },\n      });\n  }\n\n  /**\n   * Adds geometry to the dat.GUI menu's geometry folder and sets up its configurable options.\n   * @param name Name of the geometry.\n   * @param color Color of the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public addGeometry(\n    name: string,\n    color: any,\n    menuNodeName?: string,\n    initiallyVisible: boolean = true\n  ) {\n    let parentNode: PhoenixMenuNode = this.geomFolder;\n    if (menuNodeName) {\n      parentNode = this.geomFolder.findInTreeOrCreate(menuNodeName);\n    }\n\n    const objFolder = parentNode.addChild(name, (value: boolean) => {\n      this.three.getSceneManager().objectVisibility(name, value);\n    });\n\n    objFolder.toggleState = initiallyVisible;\n\n    objFolder\n      .addConfig('color', {\n        label: 'Color',\n        color: color ? `#${new Color(color).getHexString()}` : undefined,\n        onChange: (value: any) => {\n          this.three.getSceneManager().changeObjectColor(name, value);\n        },\n      })\n      .addConfig('slider', {\n        label: 'Opacity',\n        min: 0,\n        max: 1,\n        step: 0.05,\n        allowCustomValue: true,\n        onChange: (opacity: number) => {\n          this.three.getSceneManager().setGeometryOpacity(name, opacity);\n        },\n      })\n      .addConfig('button', {\n        label: 'Remove',\n        onClick: () => {\n          objFolder.remove();\n          this.three.getSceneManager().removeGeometry(name);\n        },\n      });\n  }\n\n  /**\n   * Functions for event data toggles like show/hide and depthTest.\n   */\n  public addEventDataFolder() {\n    // Phoenix menu\n    if (this.eventFolder !== null) {\n      this.eventFolderState = this.eventFolder.getNodeState();\n      this.eventFolder.remove();\n    }\n    this.eventFolder = this.phoenixMenu.addChild(\n      'Event Data',\n      (value: boolean) => {\n        this.three\n          .getSceneManager()\n          .groupVisibility(SceneManager.EVENT_DATA_ID, value);\n      },\n      'event-folder'\n    );\n    this.eventFolder.addConfig('checkbox', {\n      label: 'Depth Test',\n      isChecked: true,\n      onChange: (value: boolean) => {\n        this.three.eventDataDepthTest(value);\n      },\n    });\n  }\n\n  /**\n   * Add folder for event data type like tracks or hits to the Phoenix menu.\n   * @param typeName Name of the type of event data.\n   * @returns Phoenix menu's folder for event data type.\n   */\n  public addEventDataTypeFolder(typeName: string): PhoenixMenuNode {\n    return this.eventFolder.addChild(typeName, (value: boolean) => {\n      this.three.getSceneManager().objectVisibility(typeName, value);\n    });\n  }\n\n  /**\n   * Add collection node and its configurable options to the event data type (tracks, hits etc.) node.\n   * @param typeFolder Phoenix menu node of an event data type.\n   * @param collectionName Name of the collection to be added in the type of event data (tracks, hits etc.).\n   * @param cuts Cuts to the collection of event data that are to be made configurable to filter event data.\n   * @param collectionColor Default color of the collection.\n   */\n  public addCollection(\n    typeFolder: PhoenixMenuNode,\n    collectionName: string,\n    cuts?: Cut[],\n    collectionColor?: Color\n  ) {\n    const collectionNode = typeFolder.addChild(\n      collectionName,\n      (value: boolean) => {\n        this.three\n          .getSceneManager()\n          .objectVisibility(collectionName, value, SceneManager.EVENT_DATA_ID);\n      }\n    );\n\n    collectionNode.addConfig('color', {\n      label: 'Color',\n      color: collectionColor\n        ? `#${collectionColor?.getHexString()}`\n        : undefined,\n      onChange: (value: any) => {\n        this.three.getSceneManager().collectionColor(collectionName, value);\n      },\n    });\n\n    collectionNode.addConfig('slider', {\n      label: 'Opacity',\n      min: 0.1,\n      step: 0.1,\n      max: 1,\n      onChange: (value: number) => {\n        this.three.getSceneManager().setGeometryOpacity(collectionName, value);\n      },\n    });\n\n    collectionNode.addConfig('checkbox', {\n      label: 'Wireframe',\n      onChange: (value: boolean) =>\n        this.three.getSceneManager().wireframeObjects(collectionName, value),\n    });\n\n    if (cuts) {\n      collectionNode\n        .addConfig('label', {\n          label: 'Cuts',\n        })\n        .addConfig('button', {\n          label: 'Reset cuts',\n          onClick: () => {\n            this.three\n              .getSceneManager()\n              .groupVisibility(\n                collectionName,\n                true,\n                SceneManager.EVENT_DATA_ID\n              );\n\n            for (const cut of cuts) {\n              cut.reset();\n            }\n          },\n        });\n\n      // Add range sliders for cuts\n      for (const cut of cuts) {\n        collectionNode.addConfig('rangeSlider', {\n          label: PrettySymbols.getPrettySymbol(cut.field),\n          min: cut.minValue,\n          max: cut.maxValue,\n          step: cut.step,\n          value: cut.minValue,\n          highValue: cut.maxValue,\n          onChange: (values: any) => {\n            cut.minValue = values?.value;\n            cut.maxValue = values?.highValue;\n            this.three.getSceneManager().collectionFilter(collectionName, cuts);\n          },\n        });\n      }\n    }\n  }\n\n  /**\n   * Add labels folder to Phoenix menu.\n   * @param configFunctions Functions to attach to the labels folder configuration.\n   */\n  public addLabelsFolder(configFunctions: any) {\n    if (this.labelsFolder !== null) {\n      return;\n    }\n\n    const {\n      onToggle,\n      onSizeChange,\n      onColorChange,\n      onSaveLabels,\n      onLoadLabels,\n    } = configFunctions;\n\n    this.labelsFolder = this.phoenixMenu.addChild(\n      SceneManager.LABELS_ID,\n      onToggle,\n      'info'\n    );\n\n    this.labelsFolder.addConfig('slider', {\n      label: 'Size',\n      min: 0,\n      max: 10,\n      step: 0.01,\n      allowCustomValue: true,\n      onChange: onSizeChange,\n    });\n\n    this.labelsFolder.addConfig('color', {\n      label: 'Color',\n      color: '#a8a8a8',\n      onChange: onColorChange,\n    });\n\n    this.labelsFolder.addConfig('button', {\n      label: 'Save Labels',\n      onClick: onSaveLabels,\n    });\n\n    this.labelsFolder.addConfig('button', {\n      label: 'Load Labels',\n      onClick: onLoadLabels,\n    });\n  }\n\n  /**\n   * Add configuration UI for label.\n   * @param labelId Unique ID of the label.\n   * @param removeLabel Function to remove label from the scene.\n   */\n  public addLabel(labelId: string, removeLabel?: () => void) {\n    let labelNode = this.labelsFolder.children.find(\n      (phoenixMenuNode) => phoenixMenuNode.name === labelId\n    );\n    if (!labelNode) {\n      labelNode = this.labelsFolder.addChild(labelId, (value) => {\n        this.three.getSceneManager().objectVisibility(labelId, value);\n      });\n\n      labelNode.addConfig('color', {\n        label: 'Color',\n        color: '#a8a8a8',\n        onChange: (value: any) => {\n          this.three.getSceneManager().changeObjectColor(labelId, value);\n        },\n      });\n\n      labelNode.addConfig('button', {\n        label: 'Remove',\n        onClick: () => {\n          removeLabel?.();\n          this.removeLabelNode(labelId, labelNode);\n        },\n      });\n    }\n  }\n\n  /**\n   * Remove label from UI, scene and event data loader if it exists.\n   * @param labelId A unique label ID string.\n   * @param labelNode Phoenix menu node of the label if any.\n   */\n  public removeLabelNode(labelId: string, labelNode?: PhoenixMenuNode) {\n    if (!labelNode) {\n      labelNode = this.labelsFolder?.children.find(\n        (singleLabelNode) => singleLabelNode.name === labelId\n      );\n    }\n\n    labelNode?.remove();\n  }\n\n  /**\n   * Load previous state of the event data folder in Phoenix menu if any.\n   */\n  public loadEventFolderState() {\n    if (this.eventFolderState) {\n      this.eventFolder.loadStateFromJSON(this.eventFolderState);\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixObjects.html":{"url":"classes/PhoenixObjects.html","title":"class - PhoenixObjects","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixObjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/phoenix-objects.ts\n        \n\n            \n                Description\n            \n            \n                Physics objects that make up an event in Phoenix.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getCluster\n                            \n                            \n                                    Static\n                                getHits\n                            \n                            \n                                    Static\n                                getJet\n                            \n                            \n                                    Static\n                                getMissingEnergy\n                            \n                            \n                                    Static\n                                getTrack\n                            \n                            \n                                    Static\n                                getVertex\n                            \n                            \n                                    Private\n                                    Static\n                                hitsToLines\n                            \n                            \n                                    Private\n                                    Static\n                                hitsToPoints\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getCluster\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCluster(clusterParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:334\n                \n            \n\n\n            \n                \n                    Process the CLuster from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    clusterParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Cluster.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Cluster object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getHits\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHits(hitsParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:196\n                \n            \n\n\n            \n                \n                    Process the Hits from the given parameters and get them as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hitsParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Either an array of positions, or of Hit objects. If objects, they must contain 'pos', the array of [x,y,z] positions,\nCan optionally contain extraInfo, which will be added to the resultant hit.\ntype tells Phoenix how to draw this - currently can be Point (default), or Line.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Hits object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getJet\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getJet(jetParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:129\n                \n            \n\n\n            \n                \n                    Process the Jet from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jetParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Jet.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Jet object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getMissingEnergy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMissingEnergy(metParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:409\n                \n            \n\n\n            \n                \n                    Process the Vertex from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    metParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Vertex.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        MET object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getTrack\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTrack(trackParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:39\n                \n            \n\n\n            \n                \n                    Process the Track from the given parameters (and positions)\nand get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    trackParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Track.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Track object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getVertex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVertex(vertexParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:383\n                \n            \n\n\n            \n                \n                    Process the Vertex from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    vertexParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Vertex.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Vertex object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            hitsToLines\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hitsToLines(pointPos: any, hitsParams: any, hitParamsClone: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:305\n                \n            \n\n\n            \n                \n                    Get a Lines object from Hits parameters.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pointPos\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Position of the HIt.\n\n                                    \n                                \n                                \n                                    hitsParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Hit.\n\n                                    \n                                \n                                \n                                    hitParamsClone\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Cloned parameters of the Hit to avoid object references.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        A 3D object of type LineSegments.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            hitsToPoints\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hitsToPoints(pointPos: any, hitsParams: any, hitParamsClone: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:275\n                \n            \n\n\n            \n                \n                    Get a Points object from Hits parameters.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pointPos\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Position of the point.\n\n                                    \n                                \n                                \n                                    hitsParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Hit.\n\n                                    \n                                \n                                \n                                    hitParamsClone\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Cloned parameters of the Hit to avoid object references.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        A 3D object of type Points.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Vector3,\n  Object3D,\n  CatmullRomCurve3,\n  TubeBufferGeometry,\n  MeshToonMaterial,\n  Mesh,\n  BufferGeometry,\n  LineBasicMaterial,\n  Line,\n  Group,\n  Quaternion,\n  CylinderBufferGeometry,\n  MeshBasicMaterial,\n  BufferAttribute,\n  PointsMaterial,\n  Points,\n  BoxBufferGeometry,\n  MeshPhongMaterial,\n  SphereBufferGeometry,\n  LineSegments,\n  LineDashedMaterial,\n  Spherical,\n} from 'three';\nimport { EVENT_DATA_TYPE_COLORS } from '../../helpers/constants';\nimport { RKHelper } from '../../helpers/rk-helper';\nimport { CoordinateHelper } from '../../helpers/coordinate-helper';\n\n/**\n * Physics objects that make up an event in Phoenix.\n */\nexport class PhoenixObjects {\n  /**\n   * Process the Track from the given parameters (and positions)\n   * and get it as a geometry.\n   * @param trackParams Parameters of the Track.\n   * @returns Track object.\n   */\n  public static getTrack(trackParams: any): Object3D {\n    let positions = trackParams.pos;\n    if (!positions) {\n      return;\n    }\n\n    // Track with too few points are extrapolated with RungeKutta\n    if (positions.length  3000) return false;\n          if (Math.sqrt(pos.x * pos.x + pos.y * pos.y) > 1100) return false;\n\n          return true;\n        };\n\n        positions = RKHelper.extrapolateTrackPositions(trackParams, inBounds);\n      }\n    }\n\n    // Check again, in case there was an issue with the extrapolation.\n    if (positions.length  3000) {\n      length = 3000;\n    }\n    const width = length * 0.1;\n\n    const sphi = Math.sin(phi);\n    const cphi = Math.cos(phi);\n    const stheta = Math.sin(theta);\n    const ctheta = Math.cos(theta);\n    //\n    const translation = new Vector3(\n      0.5 * length * cphi * stheta,\n      0.5 * length * sphi * stheta,\n      0.5 * length * ctheta\n    );\n\n    const x = cphi * stheta;\n    const y = sphi * stheta;\n    const z = ctheta;\n    const v1 = new Vector3(0, 1, 0);\n    const v2 = new Vector3(x, y, z);\n    const quaternion = new Quaternion();\n    quaternion.setFromUnitVectors(v1, v2);\n\n    const geometry = new CylinderBufferGeometry(\n      width,\n      1,\n      length,\n      50,\n      50,\n      false\n    ); // Cone\n\n    const material = new MeshBasicMaterial({\n      color: jetParams.color ?? EVENT_DATA_TYPE_COLORS.Jets,\n      opacity: 0.3,\n      transparent: true,\n    });\n    material.opacity = 0.5;\n    const mesh = new Mesh(geometry, material);\n    mesh.position.copy(translation);\n    mesh.quaternion.copy(quaternion);\n    mesh.userData = Object.assign({}, jetParams);\n    mesh.name = 'Jet';\n    // Setting uuid for selection from collections info\n    jetParams.uuid = mesh.uuid;\n\n    return mesh;\n  }\n\n  /**\n   * Process the Hits from the given parameters and get them as a geometry.\n   * @param hitsParams Either an array of positions, or of Hit objects. If objects, they must contain 'pos', the array of [x,y,z] positions,\n   * Can optionally contain extraInfo, which will be added to the resultant hit.\n   * `type` tells Phoenix how to draw this - currently can be Point (default), or Line.\n   * @returns Hits object.\n   */\n  public static getHits(hitsParams: any): Object3D {\n    let hitsParamsClone: any;\n    let positions: any[];\n    let type: string = 'Point'; // Default is point and 3 coordinates per hit\n    let coordlength = 3;\n    let isSimpleArray = false;\n\n    // if (typeof hitsParams === 'object' && !Array.isArray(hitsParams)) {\n    //   positions = [hitsParams.pos];\n    //   hitsParamsClone = hitsParams;\n    // } else {\n    //   positions = hitsParams;\n    //   hitsParamsClone = { pos: hitsParams };\n    // }\n\n    if (hitsParams.length > 0) {\n      // Peek at first one. Would be better to make these properties of the collections.\n      const first = hitsParams[0];\n      if (Array.isArray(first)) {\n        isSimpleArray = true;\n        hitsParamsClone = { pos: hitsParams };\n      } else {\n        hitsParamsClone = hitsParams;\n        if ('type' in first) {\n          type = first.type;\n        }\n      }\n    } else {\n      console.log('No hits! Aborting from getHits.');\n      return new Object3D();\n    }\n\n    // Lines need 6 coords\n    if (type === 'Line') {\n      coordlength = 6;\n    }\n\n    // attributes\n    let hitLength = hitsParams.length * coordlength;\n    if (isSimpleArray) length = hitLength; // These are already arrays\n    const pointPos = new Float32Array(hitLength);\n    let i = 0;\n    for (const hit of hitsParams) {\n      for (let j = 0; j  maxR2) {\n      position.setLength(\n        (position.length() * Math.sqrt(maxR2)) / Math.sqrt(cylRadius2)\n      );\n    }\n\n    if (Math.abs(position.z) > maxZ) {\n      position.setLength((position.length() * maxZ) / position.z);\n    }\n\n    cube.position.copy(position);\n\n    cube.lookAt(new Vector3(0, 0, 0));\n    cube.userData = Object.assign({}, clusterParams);\n    cube.name = 'Cluster';\n    // Setting uuid for selection from collections info\n    clusterParams.uuid = cube.uuid;\n\n    return cube;\n  }\n\n  /**\n   * Process the Vertex from the given parameters and get it as a geometry.\n   * @param vertexParams Parameters for the Vertex.\n   * @returns Vertex object.\n   */\n  public static getVertex(vertexParams: any): Object3D {\n    // geometry\n    const geometry = new SphereBufferGeometry(3);\n    // material\n    const material = new MeshPhongMaterial({\n      color: vertexParams.color ?? EVENT_DATA_TYPE_COLORS.Vertices,\n    });\n    // object\n    const sphere = new Mesh(geometry, material);\n    sphere.position.x = vertexParams.x;\n    sphere.position.y = vertexParams.y;\n    sphere.position.z = vertexParams.y;\n\n    sphere.userData = Object.assign({}, vertexParams);\n    sphere.name = 'Vertex';\n    // Setting uuid for selection from collections info\n    vertexParams.uuid = sphere.uuid;\n\n    return sphere;\n  }\n\n  /**\n   * Process the Vertex from the given parameters and get it as a geometry.\n   * @param metParams Parameters for the Vertex.\n   * @returns MET object.\n   */\n  public static getMissingEnergy(metParams: any): Object3D {\n    // geometry\n    const points = [];\n    points.push(new Vector3(0, 0, 0));\n    points.push(new Vector3(metParams.etx, metParams.ety, 0));\n\n    const geometry = new BufferGeometry().setFromPoints(points);\n\n    // material\n    const material = new LineDashedMaterial({\n      linewidth: 2,\n      dashSize: 2,\n      color: metParams.color ?? EVENT_DATA_TYPE_COLORS.MissingEnergy,\n    });\n    // object\n    const object = new Line(geometry, material);\n    object.computeLineDistances();\n    object.userData = Object.assign({}, metParams);\n    object.name = 'Missing Energy';\n    // Setting uuid for selection from collections info\n    metParams.uuid = object.uuid;\n\n    return object;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresetView.html":{"url":"classes/PresetView.html","title":"class - PresetView","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresetView\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extras/preset-view.model.ts\n        \n\n            \n                Description\n            \n            \n                Preset view for easily transforming/changing camera position to a specified position.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraPos\n                            \n                            \n                                    Public\n                                icon\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                setView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getIconURL\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, cameraPos: number[], icon: string)\n                    \n                \n                        \n                            \n                                Defined in src/extras/preset-view.model.ts:14\n                            \n                        \n\n                \n                    \n                            Create a preset view.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the preset view.\n\n                                                        \n                                                \n                                                \n                                                        cameraPos\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Position to which the camera is to be set.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Icon of the preset view (to describe the view angle).\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cameraPos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:8\n                            \n                        \n\n                \n                    \n                        Position to which the camera is to be set. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            icon\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:6\n                            \n                        \n\n                \n                    \n                        Icon of the preset view (to describe the view angle). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:10\n                            \n                        \n\n                \n                    \n                        Name of the preset view. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setView\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:14\n                            \n                        \n\n                \n                    \n                        Set the preset view.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIconURL\n                        \n                        \n                    \n                \n            \n            \n                \ngetIconURL()\n                \n            \n\n\n            \n                \n                    Defined in src/extras/preset-view.model.ts:32\n                \n            \n\n\n            \n                \n                    Get the URL of the preset view icon.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Icon URL.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class PresetView {\n  /** Icon of the preset view (to describe the view angle). */\n  public icon: string;\n  /** Position to which the camera is to be set. */\n  public cameraPos: number[];\n  /** Name of the preset view. */\n  public name: string;\n  /**\n   * Set the preset view.\n   */\n  setView: () => void;\n\n  /**\n   * Create a preset view.\n   * @param name Name of the preset view.\n   * @param cameraPos Position to which the camera is to be set.\n   * @param icon Icon of the preset view (to describe the view angle).\n   */\n  constructor(name: string, cameraPos: number[], icon: string) {\n    this.name = name;\n    this.cameraPos = cameraPos;\n    this.icon = icon;\n  }\n\n  /**\n   * Get the URL of the preset view icon.\n   * @returns Icon URL.\n   */\n  getIconURL(): string {\n    return 'assets/preset-views/' + this.icon + '.svg#' + this.icon;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrettySymbols.html":{"url":"classes/PrettySymbols.html","title":"class - PrettySymbols","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrettySymbols\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/pretty-symbols.ts\n        \n\n            \n                Description\n            \n            \n                Helper for pretty symbols functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                symbols\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getPrettyParams\n                            \n                            \n                                    Static\n                                getPrettySymbol\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            symbols\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    θ: ['theta'],\n    ϕ: ['phi'],\n    pT: ['pt'],\n    '𝛘2': ['chi2'],\n    η: ['eta'],\n    q: ['charge'],\n    NDOF: ['ndof'],\n    DOF: ['dof'],\n    Energy: ['energy'],\n    ET: ['et'],\n    '|p|': ['momentum', 'mom'],\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/pretty-symbols.ts:6\n                            \n                        \n\n                \n                    \n                        Pretty symbols for object params. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getPrettyParams\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrettyParams(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/pretty-symbols.ts:37\n                \n            \n\n\n            \n                \n                    Get pretty printed parameters of an object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object parameters to be pretty printed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        New pretty printed parameterss.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getPrettySymbol\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrettySymbol(param: string)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/pretty-symbols.ts:24\n                \n            \n\n\n            \n                \n                    Get pretty symbol of a parameter.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    param\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameter of a physics object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class PrettySymbols {\n  /** Pretty symbols for object params. */\n  public static readonly symbols: { [key: string]: string[] } = {\n    θ: ['theta'],\n    ϕ: ['phi'],\n    pT: ['pt'],\n    '𝛘2': ['chi2'],\n    η: ['eta'],\n    q: ['charge'],\n    NDOF: ['ndof'],\n    DOF: ['dof'],\n    Energy: ['energy'],\n    ET: ['et'],\n    '|p|': ['momentum', 'mom'],\n  };\n\n  /**\n   * Get pretty symbol of a parameter.\n   * @param param Parameter of a physics object.\n   */\n  public static getPrettySymbol(param: string) {\n    const prettySymbol = Object.keys(PrettySymbols.symbols).find((symbol) =>\n      PrettySymbols.symbols[symbol].includes(param)\n    );\n\n    return prettySymbol ? prettySymbol : param;\n  }\n\n  /**\n   * Get pretty printed parameters of an object.\n   * @param params Object parameters to be pretty printed.\n   * @returns New pretty printed parameterss.\n   */\n  public static getPrettyParams(params: { [key: string]: any }): object {\n    // Create a copy of the params so we don't overwrite the original object\n    const paramsCopy = Object.assign({}, params);\n    // Go through all the parameters\n    for (const paramKey of Object.keys(paramsCopy)) {\n      // Get the pretty printed symbol\n      const symbol = PrettySymbols.getPrettySymbol(paramKey);\n      // If we do get a symbol\n      if (symbol !== paramKey) {\n        // Add a parameter with pretty printed symbol\n        paramsCopy[symbol] = paramsCopy[paramKey];\n        delete paramsCopy[paramKey];\n      }\n    }\n\n    // Delete 'pos' since it's too long and not needed\n    delete paramsCopy['pos'];\n\n    // Pretty print the dparams if any\n    if (paramsCopy?.dparams) {\n      const prettyDParams: object = {};\n\n      prettyDParams['θ'] = paramsCopy.dparams[3];\n      prettyDParams['ϕ'] = paramsCopy.dparams[2];\n      prettyDParams['|p|'] = Math.abs(1 / paramsCopy.dparams[4]);\n      prettyDParams['q'] = Math.sign(1 / paramsCopy.dparams[4]);\n      prettyDParams['d0'] = paramsCopy.dparams[0];\n      prettyDParams['z0'] = paramsCopy.dparams[1];\n\n      delete paramsCopy.dparams;\n\n      return { ...paramsCopy, ...prettyDParams };\n    }\n\n    return paramsCopy;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RKHelper.html":{"url":"classes/RKHelper.html","title":"class - RKHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RKHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/rk-helper.ts\n        \n\n            \n                Description\n            \n            \n                Helper methods for RungeKutta functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                extrapolateTrackPositions\n                            \n                            \n                                    Static\n                                getTracksWithRungeKutta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            extrapolateTrackPositions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    extrapolateTrackPositions(track: literal type, inbounds: (pos: Vector3) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/rk-helper.ts:32\n                \n            \n\n\n            \n                \n                    Extrapolate tracks using RungeKutta propagator.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    track\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Track which is to be extrapolated.\n\n                                    \n                                \n                                \n                                    inbounds\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        () => true\n                                    \n\n                                    \n                                        Function which returns true until the passed position\nis out of bounds, when it returns false. Default just always returns true.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An array of track positions.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getTracksWithRungeKutta\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTracksWithRungeKutta(tracksCollectionsEvent: any)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/rk-helper.ts:12\n                \n            \n\n\n            \n                \n                    Get extrapolated tracks using RungeKutta.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tracksCollectionsEvent\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event containing tracks collections.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { RungeKutta } from './runge-kutta';\nimport { Vector3 } from 'three';\n\n/**\n * Helper methods for RungeKutta functions.\n */\nexport class RKHelper {\n  /**\n   * Get extrapolated tracks using RungeKutta.\n   * @param tracksCollectionsEvent Event containing tracks collections.\n   */\n  public static getTracksWithRungeKutta(tracksCollectionsEvent: any) {\n    const tracksCollections = Object.assign({}, tracksCollectionsEvent);\n    const Tracks = {};\n    for (const tracksCollection of Object.keys(tracksCollections)) {\n      for (const track of tracksCollections[tracksCollection]) {\n        track.pos = RKHelper.extrapolateTrackPositions(track);\n      }\n    }\n\n    return Tracks;\n  }\n\n  /**\n   * Extrapolate tracks using RungeKutta propagator.\n   * @param track Track which is to be extrapolated.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false. Default just always returns true.\n   * @returns An array of track positions.\n\n   */\n  public static extrapolateTrackPositions(\n    track: { dparams: any },\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): any {\n    const dparams = track.dparams;\n    // ATLAS uses mm, MeV\n    let d0 = dparams[0],\n      z0 = dparams[1],\n      phi = dparams[2],\n      theta = dparams[3],\n      qop = dparams[4];\n\n    let p: number;\n    if (qop !== 0) {\n      p = Math.abs(1 / qop);\n    } else {\n      p = 0;\n    }\n    const q = Math.round(p * qop);\n\n    // ATLAS definition of momentum, so probably so move this calc there.\n    let globalMomentum = new Vector3(\n      p * Math.cos(phi) * Math.sin(theta),\n      p * Math.sin(phi) * Math.sin(theta),\n      p * Math.cos(theta)\n    );\n\n    // Cannot use setFromSphericalCoordinates since ATLAS and threejs use\n    // different phi & theta definitions (though both are right-handed)\n    let startPos = new Vector3(-d0 * Math.sin(phi), d0 * Math.cos(phi), z0);\n\n    // Wipe existing positions\n    let positions: number[][] = [];\n    positions.push([startPos.x, startPos.y, startPos.z]);\n\n    const startDir = globalMomentum.clone();\n    startDir.normalize();\n\n    // if (p  [\n      val.pos.x,\n      val.pos.y,\n      val.pos.z,\n    ]);\n\n    return positions.concat(extrapolatedPos);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RendererManager.html":{"url":"classes/RendererManager.html","title":"class - RendererManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RendererManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/renderer-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's renderer related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fixedOverlay\n                            \n                            \n                                    Private\n                                mainRenderer\n                            \n                            \n                                    Private\n                                overlayRenderer\n                            \n                            \n                                    Private\n                                renderers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addRenderer\n                            \n                            \n                                    Private\n                                containsObject\n                            \n                            \n                                    Public\n                                getLocalClipping\n                            \n                            \n                                getMainRenderer\n                            \n                            \n                                getOverlayRenderer\n                            \n                            \n                                getRenderers\n                            \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Private\n                                initRenderer\n                            \n                            \n                                isFixedOverlay\n                            \n                            \n                                    Public\n                                removeControls\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                setFixOverlay\n                            \n                            \n                                    Public\n                                setLocalClippingEnabled\n                            \n                            \n                                setMainRenderer\n                            \n                            \n                                    Public\n                                setOverlayRenderer\n                            \n                            \n                                setRenderers\n                            \n                            \n                                    Public\n                                swapRenderers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/renderer-manager.ts:14\n                            \n                        \n\n                \n                    \n                            Create the renderer manager by initializing the main renderer.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            fixedOverlay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/renderer-manager.ts:14\n                            \n                        \n\n                \n                    \n                        If the overlay is fixed or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            mainRenderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/renderer-manager.ts:8\n                            \n                        \n\n                \n                    \n                        Main renderer to be used by the event display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            overlayRenderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/renderer-manager.ts:10\n                            \n                        \n\n                \n                    \n                        Overlay renderer for rendering a secondary overlay canvas. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            renderers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/renderer-manager.ts:12\n                            \n                        \n\n                \n                    \n                        A list of all available/created renderers. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:152\n                \n            \n\n\n            \n                \n                    Add a renderer to the available renderers list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three.js WebGLRenderer to be added.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            containsObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    containsObject(obj: WebGLRenderer, list: WebGLRenderer[])\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:186\n                \n            \n\n\n            \n                \n                    Check if the list of available renderers contains a renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    obj\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The renderer to be checked for containment.\n\n                                    \n                                \n                                \n                                    list\n                                    \n                                            WebGLRenderer[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of available renderers.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If the list contains the renderer or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLocalClipping\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLocalClipping()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:209\n                \n            \n\n\n            \n                \n                    Get if the local clipping for the first renderer is enabled or disabled.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        If the renderer local clipping is enabled or disabled.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMainRenderer\n                        \n                        \n                    \n                \n            \n            \n                \ngetMainRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:126\n                \n            \n\n\n            \n                \n                    Get the main renderer.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer\n\n                    \n                    \n                        The main renderer.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOverlayRenderer\n                        \n                        \n                    \n                \n            \n            \n                \ngetOverlayRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:134\n                \n            \n\n\n            \n                \n                    Get the renderer used for overlay.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer\n\n                    \n                    \n                        The overlay renderer.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRenderers\n                        \n                        \n                    \n                \n            \n            \n                \ngetRenderers()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:142\n                \n            \n\n\n            \n                \n                    Get all the available renderers.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer[]\n\n                    \n                    \n                        A list of three.js WebGLRenderers\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init(elementId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:33\n                \n            \n\n\n            \n                \n                    Initialize the renderer manager by setting up the main renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    elementId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'eventDisplay'\n                                    \n\n                                    \n                                        ID of the wrapper element.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            initRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initRenderer(elementId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:63\n                \n            \n\n\n            \n                \n                    Set up the renderer with the DOM.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    elementId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the wrapper element.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isFixedOverlay\n                        \n                        \n                    \n                \n            \n            \n                \nisFixedOverlay()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:219\n                \n            \n\n\n            \n                \n                    Check if the overlay is fixed or not.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If the overlay is fixed or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeControls\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeControls(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:162\n                \n            \n\n\n            \n                \n                    Remove a renderer from the available renderers list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three,js WebGLRenderer to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            render\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    render(scene: Scene, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:45\n                \n            \n\n\n            \n                \n                    Render the overlay.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event display scene to render.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Camera for render.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setFixOverlay\n                        \n                        \n                    \n                \n            \n            \n                \nsetFixOverlay(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:227\n                \n            \n\n\n            \n                \n                    Set if the overlay is to be fixed or not.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the overlay is to be fixed or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setLocalClippingEnabled\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setLocalClippingEnabled(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:199\n                \n            \n\n\n            \n                \n                    Set if local clipping is to be enabled or disabled for all the available renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the local clipping is to be enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setMainRenderer\n                        \n                        \n                    \n                \n            \n            \n                \nsetMainRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:96\n                \n            \n\n\n            \n                \n                    Set the main renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three.js WebGLRenderer.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setOverlayRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setOverlayRenderer(overlayCanvas: HTMLCanvasElement)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:104\n                \n            \n\n\n            \n                \n                    Set the renderer for overlay event display view.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    overlayCanvas\n                                    \n                                            HTMLCanvasElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Canvas on which the overlay is to be rendered.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setRenderers\n                        \n                        \n                    \n                \n            \n            \n                \nsetRenderers(renderers: WebGLRenderer[])\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:118\n                \n            \n\n\n            \n                \n                    Set the available renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderers\n                                    \n                                            WebGLRenderer[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of three.js WebGLRenderers.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            swapRenderers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:174\n                \n            \n\n\n            \n                \n                    Swap any two renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    rendererA\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer A to be swapped with renderer B.\n\n                                    \n                                \n                                \n                                    rendererB\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer B to be swapped with renderer A.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebGLRenderer, Scene, Camera } from 'three';\n\n/**\n * Manager for managing event display's renderer related functions.\n */\nexport class RendererManager {\n  /** Main renderer to be used by the event display. */\n  private mainRenderer: WebGLRenderer = null;\n  /** Overlay renderer for rendering a secondary overlay canvas. */\n  private overlayRenderer: WebGLRenderer = null;\n  /** A list of all available/created renderers. */\n  private renderers: WebGLRenderer[] = [];\n  /** If the overlay is fixed or not. */\n  private fixedOverlay: boolean;\n\n  /**\n   * Create the renderer manager by initializing the main renderer.\n   */\n  constructor() {\n    const renderer: WebGLRenderer = new WebGLRenderer({\n      antialias: true,\n      powerPreference: 'high-performance',\n    });\n\n    this.addRenderer(renderer);\n    this.setMainRenderer(renderer);\n  }\n\n  /**\n   * Initialize the renderer manager by setting up the main renderer.\n   * @param elementId ID of the wrapper element.\n   */\n  public init(elementId: string = 'eventDisplay') {\n    // Reset the animation loop\n    this.getMainRenderer().setAnimationLoop(null);\n    // Main renderer for current browsers\n    this.initRenderer(elementId);\n  }\n\n  /**\n   * Render the overlay.\n   * @param scene The event display scene to render.\n   * @param camera Camera for render.\n   */\n  public render(scene: Scene, camera: Camera) {\n    if (this.getOverlayRenderer()) {\n      if (!this.getOverlayRenderer().domElement.hidden) {\n        const sceneColor = scene.background;\n        scene.background = null;\n\n        if (!this.isFixedOverlay()) {\n          this.getOverlayRenderer().render(scene, camera);\n        }\n        scene.background = sceneColor;\n      }\n    }\n  }\n\n  /**\n   * Set up the renderer with the DOM.\n   * @param elementId ID of the wrapper element.\n   */\n  private initRenderer(elementId: string) {\n    let canvasWrapper = document.getElementById(elementId);\n    if (!canvasWrapper) {\n      canvasWrapper = document.body;\n    }\n\n    const rendererWidth = () =>\n      canvasWrapper.offsetWidth > 0\n        ? canvasWrapper.offsetWidth\n        : window.innerWidth;\n    const rendererHeight = () =>\n      canvasWrapper.offsetHeight > 0\n        ? canvasWrapper.offsetHeight\n        : window.innerHeight;\n\n    const mainRenderer = this.getMainRenderer();\n    mainRenderer.setSize(rendererWidth(), rendererHeight(), false);\n    mainRenderer.setPixelRatio(window.devicePixelRatio);\n    mainRenderer.domElement.id = 'three-canvas';\n\n    canvasWrapper.appendChild(this.getMainRenderer().domElement);\n\n    window.addEventListener('resize', () => {\n      mainRenderer.setSize(rendererWidth(), rendererHeight());\n    });\n  }\n\n  // SET/GET\n\n  /**\n   * Set the main renderer.\n   * @param renderer Three.js WebGLRenderer.\n   */\n  setMainRenderer(renderer: WebGLRenderer) {\n    this.mainRenderer = renderer;\n  }\n\n  /**\n   * Set the renderer for overlay event display view.\n   * @param overlayCanvas Canvas on which the overlay is to be rendered.\n   */\n  public setOverlayRenderer(overlayCanvas: HTMLCanvasElement): void {\n    const overlayRenderer: WebGLRenderer = new WebGLRenderer({\n      canvas: overlayCanvas,\n      antialias: false,\n      alpha: true,\n    });\n    this.addRenderer(overlayRenderer);\n    this.overlayRenderer = overlayRenderer;\n  }\n\n  /**\n   * Set the available renderers.\n   * @param renderers List of three.js WebGLRenderers.\n   */\n  setRenderers(renderers: WebGLRenderer[]) {\n    this.renderers = renderers;\n  }\n\n  /**\n   * Get the main renderer.\n   * @returns The main renderer.\n   */\n  getMainRenderer(): WebGLRenderer {\n    return this.mainRenderer;\n  }\n\n  /**\n   * Get the renderer used for overlay.\n   * @returns The overlay renderer.\n   */\n  getOverlayRenderer(): WebGLRenderer {\n    return this.overlayRenderer;\n  }\n\n  /**\n   * Get all the available renderers.\n   * @returns A list of three.js WebGLRenderers\n   */\n  getRenderers(): WebGLRenderer[] {\n    return this.renderers;\n  }\n\n  // FUNCTIONS\n\n  /**\n   * Add a renderer to the available renderers list.\n   * @param renderer Three.js WebGLRenderer to be added.\n   */\n  public addRenderer(renderer: WebGLRenderer) {\n    if (!this.containsObject(renderer, this.renderers)) {\n      this.renderers.push(renderer);\n    }\n  }\n\n  /**\n   * Remove a renderer from the available renderers list.\n   * @param renderer Three,js WebGLRenderer to be removed.\n   */\n  public removeControls(renderer: WebGLRenderer) {\n    const index: number = this.renderers.indexOf(renderer);\n    if (index > -1) {\n      this.renderers.splice(index, 1);\n    }\n  }\n\n  /**\n   * Swap any two renderers.\n   * @param rendererA Renderer A to be swapped with renderer B.\n   * @param rendererB Renderer B to be swapped with renderer A.\n   */\n  public swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer) {\n    const temp: WebGLRenderer = rendererA;\n    rendererA = rendererB;\n    rendererB = temp;\n  }\n\n  /**\n   * Check if the list of available renderers contains a renderer.\n   * @param obj The renderer to be checked for containment.\n   * @param list List of available renderers.\n   * @returns If the list contains the renderer or not.\n   */\n  private containsObject(obj: WebGLRenderer, list: WebGLRenderer[]): boolean {\n    for (const object of list) {\n      if (object === obj) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set if local clipping is to be enabled or disabled for all the available renderers.\n   * @param value If the local clipping is to be enabled or disabled.\n   */\n  public setLocalClippingEnabled(value: boolean) {\n    for (const renderer of this.renderers) {\n      renderer.localClippingEnabled = value;\n    }\n  }\n\n  /**\n   * Get if the local clipping for the first renderer is enabled or disabled.\n   * @returns If the renderer local clipping is enabled or disabled.\n   */\n  public getLocalClipping() {\n    if (this.renderers.length > 0) {\n      return this.renderers[0].localClippingEnabled;\n    }\n  }\n\n  /**\n   * Check if the overlay is fixed or not.\n   * @returns If the overlay is fixed or not.\n   */\n  isFixedOverlay(): boolean {\n    return this.fixedOverlay;\n  }\n\n  /**\n   * Set if the overlay is to be fixed or not.\n   * @param value If the overlay is to be fixed or not.\n   */\n  setFixOverlay(value: boolean) {\n    this.fixedOverlay = value;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RungeKutta.html":{"url":"classes/RungeKutta.html","title":"class - RungeKutta","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RungeKutta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n            \n                Description\n            \n            \n                Class for performing Runge-Kutta operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                propagate\n                            \n                            \n                                    Static\n                                step\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            propagate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    propagate(startPos: Vector3, startDir: Vector3, p: number, q: number, mss: number, plength: number, inbounds: (pos: Vector3) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:126\n                \n            \n\n\n            \n                \n                    Propagate using the given properties by performing the Runge-Kutta steps.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    startPos\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Starting position in 3D space.\n\n                                    \n                                \n                                \n                                    startDir\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Starting direction in 3D space.\n\n                                    \n                                \n                                \n                                    p\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Momentum.\n\n                                    \n                                \n                                \n                                    q\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Charge.\n\n                                    \n                                \n                                \n                                    mss\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        -1\n                                    \n\n                                    \n                                        Max step size.\n\n                                    \n                                \n                                \n                                    plength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1000\n                                    \n\n                                    \n                                        Path length.\n\n                                    \n                                \n                                \n                                    inbounds\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        () => true\n                                    \n\n                                    \n                                        Function which returns true until the passed position\nis out of bounds, when it returns false.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type[]\n\n                    \n                    \n                        An array containing position and direction at that position calculated\nthrough the Runge-Kutta steps.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            step\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    step(state: State)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:12\n                \n            \n\n\n            \n                \n                    Perform a Runge-Kutta step for the given state.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                State\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State at which the step is to be performed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The computed step size.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(half_h))\n        .add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir\n        .clone()\n        .add(k1.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir\n        .clone()\n        .add(k2.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(h))\n        .add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir\n        .clone()\n        .add(k3.clone().multiplyScalar(h))\n        .cross(B_last)\n        .multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return (\n        h *\n        (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z))\n      );\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    let fh: number = state.stepSize;\n    let fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(\n      k1\n        .clone()\n        .add(k2)\n        .add(k3)\n        .multiplyScalar(fh2 / 6)\n    );\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(\n      k1\n        .clone()\n        .add(k2.clone().multiplyScalar(2))\n        .add(k3.clone().multiplyScalar(2))\n        .add(k4)\n        .multiplyScalar(fh / 6)\n    );\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3,\n    startDir: Vector3,\n    p: number,\n    q: number,\n    mss: number = -1,\n    plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3; dir: Vector3 }[] {\n    let rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    let result: { pos: Vector3; dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScriptLoader.html":{"url":"classes/ScriptLoader.html","title":"class - ScriptLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScriptLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/script-loader.ts\n        \n\n            \n                Description\n            \n            \n                Script loader for dynamically loading external scripts.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Async\n                                loadJSRootScripts\n                            \n                            \n                                    Static\n                                loadScript\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            Async\n                            loadJSRootScripts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadJSRootScripts(jsrootVersion: string)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/script-loader.ts:15\n                \n            \n\n\n            \n                \n                    Synchronously load all JSRoot scripts. ONLY CALL ONCE.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    jsrootVersion\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'latest'\n                                    \n\n                                    \n                                        Version of JSROOT to use. Defaults to latest.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        Promise resolved with JSROOT global varilable.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            loadScript\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadScript(scriptURL: string, scriptFor?: string, parentElement: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/script-loader.ts:46\n                \n            \n\n\n            \n                \n                    Load a script dynamically from a URL.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    scriptURL\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        URL of the script to be loaded.\n\n                                    \n                                \n                                \n                                    scriptFor\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Optional data attribute to identify what the script is for. [data-scriptFor]\n\n                                    \n                                \n                                \n                                    parentElement\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        document.getElementsByTagName('head')[0]\n                                    \n\n                                    \n                                        Parent element to which the script is to be appended.\nDefaults to  tag.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise for the script load.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { LoadingManager } from '../managers/loading-manager';\n\n/** Global JSROOT variable for accessing functions after loading JSRoot scripts. */\ndeclare const JSROOT: any;\n\n/**\n * Script loader for dynamically loading external scripts.\n */\nexport class ScriptLoader {\n  /**\n   * Synchronously load all JSRoot scripts. ONLY CALL ONCE.\n   * @param jsrootVersion Version of JSROOT to use. Defaults to latest.\n   * @returns Promise resolved with JSROOT global varilable.\n   */\n  public static async loadJSRootScripts(\n    jsrootVersion: string = 'latest'\n  ): Promise {\n    const loadingManager = new LoadingManager();\n    loadingManager.addLoadableItem('jsroot_scripts');\n\n    const JSROOT_CDN_URL = `https://cdn.jsdelivr.net/npm/jsroot@${jsrootVersion}/scripts/`;\n    const allScripts = [\n      'JSRoot.core.js',\n      'three.extra.min.js',\n      'JSRoot.csg.js',\n      'JSRoot.painter.js',\n      'JSRoot.geom.js',\n    ];\n    for (const script of allScripts) {\n      await ScriptLoader.loadScript(JSROOT_CDN_URL + script, 'JSROOT');\n    }\n\n    loadingManager.itemLoaded('jsroot_scripts');\n\n    return JSROOT;\n  }\n\n  /**\n   * Load a script dynamically from a URL.\n   * @param scriptURL URL of the script to be loaded.\n   * @param scriptFor Optional data attribute to identify what the script is for. `[data-scriptFor]`\n   * @param parentElement Parent element to which the script is to be appended.\n   * Defaults to `` tag.\n   * @returns Promise for the script load.\n   */\n  public static loadScript(\n    scriptURL: string,\n    scriptFor?: string,\n    parentElement: HTMLElement = document.getElementsByTagName('head')[0]\n  ): Promise {\n    const loadingManager = new LoadingManager();\n    loadingManager.addLoadableItem('single_script');\n\n    return new Promise((resolve, reject) => {\n      const scriptExists = document.querySelectorAll(\n        'script[src=\"' + scriptURL + '\"]'\n      );\n\n      // If no script exists - add one\n      if (scriptExists.length === 0) {\n        const scriptElement = document.createElement('script');\n        scriptElement.type = 'text/javascript';\n        scriptElement.src = scriptURL;\n        if (scriptFor) {\n          scriptElement.setAttribute('data-scriptfor', scriptFor);\n        }\n\n        scriptElement.addEventListener('load', () => {\n          scriptElement.setAttribute('data-loaded', 'true');\n          resolve();\n          loadingManager.itemLoaded('single_script');\n        });\n        scriptElement.onerror = (event) => {\n          console.error('ERROR LOADING SCRIPT: ', event);\n          reject();\n          loadingManager.itemLoaded('single_script');\n        };\n\n        parentElement.appendChild(scriptElement);\n      } else {\n        // If script has already loaded then resolve else wait for it to load\n        if (scriptExists[0].dataset.loaded === 'true') {\n          resolve();\n          loadingManager.itemLoaded('single_script');\n        } else {\n          scriptExists[0].addEventListener('load', () => {\n            resolve();\n            loadingManager.itemLoaded('single_script');\n          });\n        }\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectionManager.html":{"url":"classes/SelectionManager.html","title":"class - SelectionManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectionManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/selection-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's selection related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeObject\n                            \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Private\n                                effectsManager\n                            \n                            \n                                    Private\n                                ignoreList\n                            \n                            \n                                    Private\n                                infoLogger\n                            \n                            \n                                    Private\n                                isInit\n                            \n                            \n                                    Private\n                                onDocumentMouseDown\n                            \n                            \n                                    Private\n                                onTouchDown\n                            \n                            \n                                    Private\n                                onTouchMove\n                            \n                            \n                                    Private\n                                outlinePass\n                            \n                            \n                                    Private\n                                preSelectionAntialias\n                            \n                            \n                                    Private\n                                scene\n                            \n                            \n                                    Private\n                                selectedObject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                disableSelecting\n                            \n                            \n                                    Private\n                                enableSelecting\n                            \n                            \n                                    Public\n                                getActiveObjectId\n                            \n                            \n                                    Public\n                                highlightObject\n                            \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Private\n                                intersectObject\n                            \n                            \n                                    Public\n                                setSelectedObject\n                            \n                            \n                                    Public\n                                setSelecting\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/selection-manager.ts:43\n                            \n                        \n\n                \n                    \n                            Constructor for the selection manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            activeObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new ActiveVariable('')\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/selection-manager.ts:30\n                            \n                        \n\n                \n                    \n                        The currently selected object which is observable for changes. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            camera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/selection-manager.ts:24\n                            \n                        \n\n                \n                    \n                        The camera inside the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            effectsManager\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EffectsManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/selection-manager.ts:38\n                            \n                        \n\n                \n                    \n                        Manager for managing three.js event display effects like outline pass and unreal bloom. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ignoreList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/selection-manager.ts:32\n                            \n                        \n\n                \n                    \n                        Objects to be ignored on hovering over the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            infoLogger\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         InfoLogger\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/selection-manager.ts:41\n                            \n                        \n\n                \n                    \n                        Service for logging data to the information panel. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            isInit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/selection-manager.ts:22\n                            \n                        \n\n                \n                    \n                        Is initialized. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onDocumentMouseDown\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/selection-manager.ts:158\n                            \n                        \n\n                \n                    \n                        Function to call on mouse click when object selection is enabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onTouchDown\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/selection-manager.ts:207\n                            \n                        \n\n                \n                    \n                        Function to call on touch when object selection is enabled.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        event\n                                                        \n                                                                Event containing touch data.\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onTouchMove\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/selection-manager.ts:145\n                            \n                        \n\n                \n                    \n                        Function to call on mouse move when object selection is enabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            outlinePass\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     OutlinePass\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/selection-manager.ts:36\n                            \n                        \n\n                \n                    \n                        Outline pass for highlighting the hovered over event display elements. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            preSelectionAntialias\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/selection-manager.ts:43\n                            \n                        \n\n                \n                    \n                        Performance mode value before enabling selection. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            scene\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Scene\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/selection-manager.ts:26\n                            \n                        \n\n                \n                    \n                        The scene used for event display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            selectedObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/selection-manager.ts:28\n                            \n                        \n\n                \n                    \n                        Object used to display the information of the selected 3D object. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            disableSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    disableSelecting()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:128\n                \n            \n\n\n            \n                \n                    Disable selecting of event display elements and remove mouse move and click events.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            enableSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    enableSelecting()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:111\n                \n            \n\n\n            \n                \n                    Enable selecting of event display elements and set mouse move and click events.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getActiveObjectId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getActiveObjectId()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:94\n                \n            \n\n\n            \n                \n                    Get the uuid of the currently selected object.\n\n\n                    \n                    \n                    \n                        Returns :         ActiveVariable\n\n                    \n                    \n                        uuid of the currently selected object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightObject(uuid: string, objectsGroup: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:241\n                \n            \n\n\n            \n                \n                    Highlight the object with the given uuid by giving it an outline.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        uuid of the object.\n\n                                    \n                                \n                                \n                                    objectsGroup\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group of objects to be traversed for finding the object\nwith the given uuid.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init(camera: Camera, scene: Scene, effectsManager: EffectsManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:65\n                \n            \n\n\n            \n                \n                    Initialize the selection manager.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene used for event display.\n\n                                    \n                                \n                                \n                                    effectsManager\n                                    \n                                                EffectsManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager for managing three.js event display effects\nlike outline pass and unreal bloom.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            intersectObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    intersectObject(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:218\n                \n            \n\n\n            \n                \n                    Check if any object intersects on mouse move.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event containing data of the mouse move.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Intersected or hovered over object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSelectedObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSelectedObject(selectedObject: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:83\n                \n            \n\n\n            \n                \n                    Set the currently selected object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selectedObject\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The currently selected object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSelecting(enable: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:102\n                \n            \n\n\n            \n                \n                    Set if selecting is to be enabled or disabled.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    enable\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If selecting is to be enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Vector2,\n  Raycaster,\n  Camera,\n  Scene,\n  Object3D,\n  DirectionalLight,\n  AmbientLight,\n  AxesHelper,\n} from 'three';\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass.js';\nimport { InfoLogger } from '../../helpers/info-logger';\nimport { EffectsManager } from './effects-manager';\nimport { PrettySymbols } from '../../helpers/pretty-symbols';\nimport { ActiveVariable } from '../../helpers/active-variable';\n\n/**\n * Manager for managing event display's selection related functions.\n */\nexport class SelectionManager {\n  /** Is initialized. */\n  private isInit: boolean;\n  /** The camera inside the scene. */\n  private camera: Camera;\n  /** The scene used for event display. */\n  private scene: Scene;\n  /** Object used to display the information of the selected 3D object. */\n  private selectedObject: { name: string; attributes: any[] };\n  /** The currently selected object which is observable for changes. */\n  private activeObject = new ActiveVariable('');\n  /** Objects to be ignored on hovering over the scene. */\n  private ignoreList: string[];\n\n  // Post processing\n  /** Outline pass for highlighting the hovered over event display elements. */\n  private outlinePass: OutlinePass;\n  /** Manager for managing three.js event display effects like outline pass and unreal bloom. */\n  private effectsManager: EffectsManager;\n\n  /** Service for logging data to the information panel. */\n  private infoLogger: InfoLogger;\n  /** Performance mode value before enabling selection. */\n  private preSelectionAntialias: boolean;\n\n  /**\n   * Constructor for the selection manager.\n   */\n  constructor() {\n    this.isInit = false;\n    this.ignoreList = [\n      new AmbientLight().type,\n      new DirectionalLight().type,\n      new AxesHelper().type,\n    ];\n  }\n\n  /**\n   * Initialize the selection manager.\n   * @param camera The camera inside the scene.\n   * @param scene The scene used for event display.\n   * @param effectsManager Manager for managing three.js event display effects\n   * like outline pass and unreal bloom.\n   * @param infoLogger Service for logging data to the information panel.\n   */\n  public init(\n    camera: Camera,\n    scene: Scene,\n    effectsManager: EffectsManager,\n    infoLogger: InfoLogger\n  ) {\n    this.camera = camera;\n    this.scene = scene;\n    this.isInit = true;\n    this.infoLogger = infoLogger;\n    this.effectsManager = effectsManager;\n    this.outlinePass = this.effectsManager.addOutlinePassForSelection();\n  }\n\n  /**\n   * Set the currently selected object.\n   * @param selectedObject The currently selected object.\n   */\n  public setSelectedObject(selectedObject: {\n    name: string;\n    attributes: any[];\n  }) {\n    this.selectedObject = selectedObject;\n  }\n\n  /**\n   * Get the uuid of the currently selected object.\n   * @returns uuid of the currently selected object.\n   */\n  public getActiveObjectId(): ActiveVariable {\n    return this.activeObject;\n  }\n\n  /**\n   * Set if selecting is to be enabled or disabled.\n   * @param enable If selecting is to be enabled or disabled.\n   */\n  public setSelecting(enable: boolean) {\n    if (this.isInit) {\n      enable ? this.enableSelecting() : this.disableSelecting();\n    }\n  }\n\n  /**\n   * Enable selecting of event display elements and set mouse move and click events.\n   */\n  private enableSelecting() {\n    document\n      .getElementById('three-canvas')\n      .addEventListener('mousemove', this.onTouchMove, true);\n    document\n      .getElementById('three-canvas')\n      .addEventListener('click', this.onDocumentMouseDown, true);\n    document\n      .getElementById('three-canvas')\n      .addEventListener('touchstart', this.onTouchDown);\n    this.preSelectionAntialias = this.effectsManager.antialiasing;\n    this.effectsManager.setAntialiasing(false);\n  }\n\n  /**\n   * Disable selecting of event display elements and remove mouse move and click events.\n   */\n  private disableSelecting() {\n    document\n      .getElementById('three-canvas')\n      .removeEventListener('mousemove', this.onTouchMove, true);\n    document\n      .getElementById('three-canvas')\n      .removeEventListener('click', this.onDocumentMouseDown, true);\n    document\n      .getElementById('three-canvas')\n      .removeEventListener('touchstart', this.onTouchDown);\n    this.outlinePass.selectedObjects = [];\n    this.effectsManager.setAntialiasing(this.preSelectionAntialias);\n  }\n\n  /**\n   * Function to call on mouse move when object selection is enabled.\n   */\n  private onTouchMove = (event: any) => {\n    const intersectedObject = this.intersectObject(event);\n    if (intersectedObject) {\n      if (this.ignoreList.includes(intersectedObject.type)) {\n        return;\n      }\n      this.outlinePass.selectedObjects = [intersectedObject];\n    }\n  };\n\n  /**\n   * Function to call on mouse click when object selection is enabled.\n   */\n  private onDocumentMouseDown = () => {\n    const intersectedObject = this.outlinePass.selectedObjects[0];\n    if (intersectedObject) {\n      this.selectedObject.name = intersectedObject.name;\n      this.selectedObject.attributes.splice(\n        0,\n        this.selectedObject.attributes.length\n      );\n\n      this.activeObject.update(intersectedObject.uuid);\n\n      const prettyParams = PrettySymbols.getPrettyParams(\n        intersectedObject.userData\n      );\n\n      for (const key of Object.keys(prettyParams)) {\n        this.selectedObject.attributes.push({\n          attributeName: key,\n          attributeValue: prettyParams[key],\n        });\n      }\n\n      // Process properties of the selected object\n      const props = Object.keys(intersectedObject.userData)\n        .map((key) => {\n          // Only take properties that are a string or number (no arrays or objects)\n          if (\n            ['string', 'number'].includes(\n              typeof intersectedObject.userData[key]\n            )\n          ) {\n            return key + '=' + intersectedObject.userData[key];\n          }\n        })\n        .filter((val) => val);\n      // Build the log text and add to the logger\n      const log =\n        intersectedObject.name +\n        (props.length > 0 ? ' with ' + props.join(', ') : '');\n      if (log) {\n        this.infoLogger.add(log, 'Clicked');\n      }\n    }\n  };\n\n  /**\n   * Function to call on touch when object selection is enabled.\n   * @param event Event containing touch data.\n   */\n  private onTouchDown = (event: TouchEvent) => {\n    event.preventDefault();\n    this.onTouchMove(event.targetTouches[0]);\n    this.onDocumentMouseDown();\n  };\n\n  /**\n   * Check if any object intersects on mouse move.\n   * @param event Event containing data of the mouse move.\n   * @returns Intersected or hovered over object.\n   */\n  private intersectObject(event: any): Object3D {\n    event.preventDefault?.();\n    const mouse = new Vector2();\n    const rendererElement = this.effectsManager.composer.renderer.domElement;\n    mouse.x = (event.clientX / rendererElement.clientWidth) * 2 - 1;\n    mouse.y = -(event.clientY / rendererElement.clientHeight) * 2 + 1;\n    const raycaster = new Raycaster();\n    raycaster.setFromCamera(mouse, this.camera);\n    raycaster.params.Line.threshold = 3;\n    const intersects = raycaster.intersectObjects(this.scene.children, true);\n\n    if (intersects.length > 0) {\n      // We want the closest one\n      return intersects[0].object;\n    }\n  }\n\n  /**\n   * Highlight the object with the given uuid by giving it an outline.\n   * @param uuid uuid of the object.\n   * @param objectsGroup Group of objects to be traversed for finding the object\n   * with the given uuid.\n   */\n  public highlightObject(uuid: string, objectsGroup: Object3D) {\n    const object = objectsGroup.getObjectByProperty('uuid', uuid);\n    if (object) {\n      this.outlinePass.selectedObjects = [object];\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/State.html":{"url":"classes/State.html","title":"class - State","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  State\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n            \n                Description\n            \n            \n                State of the particle.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dir\n                            \n                            \n                                maxStepSize\n                            \n                            \n                                p\n                            \n                            \n                                pathLength\n                            \n                            \n                                pos\n                            \n                            \n                                q\n                            \n                            \n                                stepSize\n                            \n                            \n                                unitC\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dir\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Vector3\n\n                        \n                    \n                    \n                        \n                            Default value : new Vector3(0, 0, 0)\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:170\n                            \n                        \n\n                \n                    \n                        Direction. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            maxStepSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:180\n                            \n                        \n\n                \n                    \n                        Max step size. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            p\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:172\n                            \n                        \n\n                \n                    \n                        Momentum. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pathLength\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:182\n                            \n                        \n\n                \n                    \n                        Path length.. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Vector3\n\n                        \n                    \n                    \n                        \n                            Default value : new Vector3(0, 0, 0)\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:168\n                            \n                        \n\n                \n                    \n                        Position. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            q\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:174\n                            \n                        \n\n                \n                    \n                        Charge. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            stepSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1000\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:178\n                            \n                        \n\n                \n                    \n                        Step size. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            unitC\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 3.3333\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:176\n                            \n                        \n\n                \n                    \n                        Unit. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(half_h))\n        .add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir\n        .clone()\n        .add(k1.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir\n        .clone()\n        .add(k2.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(h))\n        .add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir\n        .clone()\n        .add(k3.clone().multiplyScalar(h))\n        .cross(B_last)\n        .multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return (\n        h *\n        (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z))\n      );\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    let fh: number = state.stepSize;\n    let fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(\n      k1\n        .clone()\n        .add(k2)\n        .add(k3)\n        .multiplyScalar(fh2 / 6)\n    );\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(\n      k1\n        .clone()\n        .add(k2.clone().multiplyScalar(2))\n        .add(k3.clone().multiplyScalar(2))\n        .add(k4)\n        .multiplyScalar(fh / 6)\n    );\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3,\n    startDir: Vector3,\n    p: number,\n    q: number,\n    mss: number = -1,\n    plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3; dir: Vector3 }[] {\n    let rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    let result: { pos: Vector3; dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StateManager.html":{"url":"classes/StateManager.html","title":"class - StateManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StateManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/state-manager.ts\n        \n\n            \n                Description\n            \n            \n                A singleton manager for managing the scene's state.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                activeCamera\n                            \n                            \n                                clippingAngle\n                            \n                            \n                                clippingEnabled\n                            \n                            \n                                eventDisplay\n                            \n                            \n                                eventMetadata\n                            \n                            \n                                    Private\n                                    Static\n                                instance\n                            \n                            \n                                phoenixMenuRoot\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getInstance\n                            \n                            \n                                loadStateFromJSON\n                            \n                            \n                                saveStateAsJSON\n                            \n                            \n                                setCamera\n                            \n                            \n                                setClippingAngle\n                            \n                            \n                                setClippingEnabled\n                            \n                            \n                                setEventDisplay\n                            \n                            \n                                setPhoenixMenuRoot\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/state-manager.ts:27\n                            \n                        \n\n                \n                    \n                            Create the state manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            activeCamera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:20\n                            \n                        \n\n                \n                    \n                        The active camera. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clippingAngle\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new ActiveVariable(0)\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:18\n                            \n                        \n\n                \n                    \n                        Angle of the clipping. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clippingEnabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new ActiveVariable(false)\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:16\n                            \n                        \n\n                \n                    \n                        Whether the clipping is enabled or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            eventDisplay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EventDisplay\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:22\n                            \n                        \n\n                \n                    \n                        The event display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            eventMetadata\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    runNumber: '000',\n    eventNumber: '000',\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:24\n                            \n                        \n\n                \n                    \n                        Current loaded event's metadata. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            instance\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         StateManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:12\n                            \n                        \n\n                \n                    \n                        Instance of the state manager. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phoenixMenuRoot\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:14\n                            \n                        \n\n                \n                    \n                        Root node of the phoenix menu. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getInstance\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInstance()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:44\n                \n            \n\n\n            \n                \n                    Get the instance of state manager.\n\n\n                    \n                    \n                    \n                        Returns :         StateManager\n\n                    \n                    \n                        The state manager instance.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadStateFromJSON\n                        \n                        \n                    \n                \n            \n            \n                \nloadStateFromJSON(json: string | object)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:97\n                \n            \n\n\n            \n                \n                    Load the state from JSON.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    json\n                                    \n                                            string | object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        JSON for state.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            saveStateAsJSON\n                        \n                        \n                    \n                \n            \n            \n                \nsaveStateAsJSON()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:78\n                \n            \n\n\n            \n                \n                    Save the state of the event display as JSON.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setCamera\n                        \n                        \n                    \n                \n            \n            \n                \nsetCamera(camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:139\n                \n            \n\n\n            \n                \n                    Set the scene camera for state.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setClippingAngle\n                        \n                        \n                    \n                \n            \n            \n                \nsetClippingAngle(angle: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:131\n                \n            \n\n\n            \n                \n                    Set the angle of clipping.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    angle\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Angle fo clipping.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setClippingEnabled\n                        \n                        \n                    \n                \n            \n            \n                \nsetClippingEnabled(clipping: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:123\n                \n            \n\n\n            \n                \n                    Set the state of clipping.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    clipping\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether the clipping is enabled or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setEventDisplay\n                        \n                        \n                    \n                \n            \n            \n                \nsetEventDisplay(eventDisplay: EventDisplay)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:147\n                \n            \n\n\n            \n                \n                    Set the event display.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventDisplay\n                                    \n                                                EventDisplay\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event display.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setPhoenixMenuRoot\n                        \n                        \n                    \n                \n            \n            \n                \nsetPhoenixMenuRoot(phoenixMenuRoot: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:52\n                \n            \n\n\n            \n                \n                    Set the root node of Phoenix menu.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    phoenixMenuRoot\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Phoenix menu root node.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventDisplay } from '../event-display';\nimport { Camera } from 'three';\nimport { PhoenixMenuNode } from './ui-manager/phoenix-menu/phoenix-menu-node';\nimport { loadFile, saveFile } from '../helpers/file';\nimport { ActiveVariable } from '../helpers/active-variable';\n\n/**\n * A singleton manager for managing the scene's state.\n */\nexport class StateManager {\n  /** Instance of the state manager. */\n  private static instance: StateManager;\n  /** Root node of the phoenix menu. */\n  phoenixMenuRoot: PhoenixMenuNode;\n  /** Whether the clipping is enabled or not. */\n  clippingEnabled = new ActiveVariable(false);\n  /** Angle of the clipping. */\n  clippingAngle = new ActiveVariable(0);\n  /** The active camera. */\n  activeCamera: Camera;\n  /** The event display. */\n  eventDisplay: EventDisplay;\n  /** Current loaded event's metadata. */\n  eventMetadata: { runNumber: string; eventNumber: string } = {\n    runNumber: '000',\n    eventNumber: '000',\n  };\n\n  /**\n   * Create the state manager.\n   * @returns The state manager instance.\n   */\n  constructor() {\n    if (StateManager.instance === undefined) {\n      StateManager.instance = this;\n    }\n    return StateManager.instance;\n  }\n\n  /**\n   * Get the instance of state manager.\n   * @returns The state manager instance.\n   */\n  static getInstance(): StateManager {\n    return StateManager.instance;\n  }\n\n  /**\n   * Set the root node of Phoenix menu.\n   * @param phoenixMenuRoot Phoenix menu root node.\n   */\n  setPhoenixMenuRoot(phoenixMenuRoot: PhoenixMenuNode) {\n    this.phoenixMenuRoot = phoenixMenuRoot;\n\n    if (this.phoenixMenuRoot) {\n      // Add save and load config buttons to the root node\n      this.phoenixMenuRoot\n        .addConfig('button', {\n          label: 'Save state',\n          onClick: () => {\n            this.saveStateAsJSON();\n          },\n        })\n        .addConfig('button', {\n          label: 'Load state',\n          onClick: () => {\n            loadFile((data) => {\n              this.loadStateFromJSON(JSON.parse(data));\n            });\n          },\n        });\n    }\n  }\n\n  /**\n   * Save the state of the event display as JSON.\n   */\n  saveStateAsJSON() {\n    const state: object = {\n      phoenixMenu: this.phoenixMenuRoot.getNodeState(),\n      eventDisplay: {\n        cameraPosition: this.activeCamera.position.toArray(),\n        clippingAngle: this.clippingEnabled ? this.clippingAngle : null,\n      },\n    };\n\n    saveFile(\n      JSON.stringify(state),\n      `run${this.eventMetadata.runNumber}_evt${this.eventMetadata.eventNumber}.json`\n    );\n  }\n\n  /**\n   * Load the state from JSON.\n   * @param json JSON for state.\n   */\n  loadStateFromJSON(json: string | object) {\n    const jsonData: object = typeof json === 'string' ? JSON.parse(json) : json;\n\n    if (jsonData['phoenixMenu']) {\n      this.phoenixMenuRoot.loadStateFromJSON(jsonData['phoenixMenu']);\n      this.phoenixMenuRoot.configActive = false;\n    }\n\n    if (jsonData['eventDisplay']) {\n      this.activeCamera.position.fromArray(\n        jsonData['eventDisplay']?.['cameraPosition']\n      );\n      if (jsonData['eventDisplay']?.['clippingAngle']) {\n        this.setClippingEnabled(true);\n        this.eventDisplay.getUIManager().setClipping(true);\n        this.eventDisplay\n          .getUIManager()\n          .rotateClipping(jsonData['eventDisplay']['clippingAngle']);\n      }\n    }\n  }\n\n  /**\n   * Set the state of clipping.\n   * @param clipping Whether the clipping is enabled or not.\n   */\n  setClippingEnabled(clipping: boolean) {\n    this.clippingEnabled.update(clipping);\n  }\n\n  /**\n   * Set the angle of clipping.\n   * @param angle Angle fo clipping.\n   */\n  setClippingAngle(angle: number) {\n    this.clippingAngle.update(angle);\n  }\n\n  /**\n   * Set the scene camera for state.\n   * @param camera The camera.\n   */\n  setCamera(camera: Camera) {\n    this.activeCamera = camera;\n  }\n\n  /**\n   * Set the event display.\n   * @param eventDisplay The event display.\n   */\n  setEventDisplay(eventDisplay: EventDisplay) {\n    this.eventDisplay = eventDisplay;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/URLOptionsManager.html":{"url":"classes/URLOptionsManager.html","title":"class - URLOptionsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  URLOptionsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/url-options-manager.ts\n        \n\n            \n                Description\n            \n            \n                A manager for managing options given through URL.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                urlOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                applyEventOptions\n                            \n                            \n                                    Public\n                                applyHideWidgetsOptions\n                            \n                            \n                                    Public\n                                applyOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventDisplay: EventDisplay, configuration: Configuration)\n                    \n                \n                        \n                            \n                                Defined in src/managers/url-options-manager.ts:22\n                            \n                        \n\n                \n                    \n                            Constructor for the URL options manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        eventDisplay\n                                                  \n                                                        \n                                                                        EventDisplay\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The Phoenix event display.\n\n                                                        \n                                                \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        Configuration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Configuration of the event display.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            urlOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     URLSearchParams\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/url-options-manager.ts:22\n                            \n                        \n\n                \n                    \n                        Variable containing all URL search parameters. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            applyEventOptions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    applyEventOptions(defaultEventPath?: string, defaultEventType?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:57\n                \n            \n\n\n            \n                \n                    Initialize the event display with event data and configuration from URL.\n(Only JiveXML and JSON)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    defaultEventPath\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Default event path to fallback to if none in URL.\n\n                                    \n                                \n                                \n                                    defaultEventType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Default event type to fallback to if none in URL.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            applyHideWidgetsOptions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    applyHideWidgetsOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:128\n                \n            \n\n\n            \n                \n                    Hide all overlay widgets if \"hideWidgets\" option from the URL is true.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            applyOptions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    applyOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:42\n                \n            \n\n\n            \n                \n                    Initialize and apply all URL options on page load.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { JiveXMLLoader } from '../loaders/jivexml-loader';\nimport { PhoenixLoader } from '../loaders/phoenix-loader';\nimport { Configuration } from '../extras/configuration';\nimport { EventDisplay } from '../event-display';\nimport { StateManager } from './state-manager';\n\n/**\n * Model for Phoenix URL options.\n */\nexport const phoenixURLOptions = {\n  file: '',\n  type: '',\n  config: '',\n  hideWidgets: false,\n};\n\n/**\n * A manager for managing options given through URL.\n */\nexport class URLOptionsManager {\n  /** Variable containing all URL search parameters. */\n  private urlOptions: URLSearchParams;\n\n  /**\n   * Constructor for the URL options manager.\n   * @param eventDisplay The Phoenix event display.\n   * @param configuration Configuration of the event display.\n   */\n  constructor(\n    private eventDisplay: EventDisplay,\n    private configuration: Configuration\n  ) {\n    const locationHref = window.location.href;\n    this.urlOptions = new URLSearchParams(\n      locationHref.substr(locationHref.lastIndexOf('?'))\n    );\n  }\n\n  /**\n   * Initialize and apply all URL options on page load.\n   */\n  public applyOptions() {\n    // Initialize event with data from URL if there is any\n    this.applyEventOptions(\n      this.configuration.defaultEventFile?.eventFile,\n      this.configuration.defaultEventFile?.eventType\n    );\n    this.applyHideWidgetsOptions();\n  }\n\n  /**\n   * Initialize the event display with event data and configuration from URL.\n   * (Only JiveXML and JSON)\n   * @param defaultEventPath Default event path to fallback to if none in URL.\n   * @param defaultEventType Default event type to fallback to if none in URL.\n   */\n  public applyEventOptions(\n    defaultEventPath?: string,\n    defaultEventType?: string\n  ) {\n    if (!('fetch' in window)) {\n      return;\n    }\n\n    let file: string, type: string;\n\n    if (!this.urlOptions.get('file') || !this.urlOptions.get('type')) {\n      file = defaultEventPath;\n      type = defaultEventType;\n    } else {\n      file = this.urlOptions.get('file');\n      type = this.urlOptions.get('type').toLowerCase();\n    }\n\n    // Load config from URL\n    const loadConfig = () => {\n      if (this.urlOptions.get('config')) {\n        this.eventDisplay.getLoadingManager().addLoadableItem('url_config');\n        fetch(this.urlOptions.get('config'))\n          .then((res) => res.json())\n          .then((jsonState) => {\n            const stateManager = new StateManager();\n            stateManager.loadStateFromJSON(jsonState);\n          })\n          .finally(() => {\n            this.eventDisplay.getLoadingManager().itemLoaded('url_config');\n          });\n      }\n    };\n\n    // Load event file from URL\n    if (file && type) {\n      this.eventDisplay.getLoadingManager().addLoadableItem('url_event');\n      fetch(file)\n        .then((res) => (type === 'jivexml' ? res.text() : res.json()))\n        .then((res: object | string) => {\n          if (type === 'jivexml') {\n            const loader = new JiveXMLLoader();\n            this.configuration.eventDataLoader = loader;\n            // Parse the JSON to extract events and their data\n            loader.process(res);\n            const eventData = loader.getEventData();\n            this.eventDisplay.buildEventDataFromJSON(eventData);\n          } else {\n            this.configuration.eventDataLoader = new PhoenixLoader();\n            this.eventDisplay.parsePhoenixEvents(res);\n          }\n        })\n        .catch((error) => {\n          this.eventDisplay\n            .getInfoLogger()\n            .add('Could not find the file specified in URL.', 'Error');\n          console.error('Could not find the file specified in URL.', error);\n        })\n        .finally(() => {\n          // Load config from URL after loading the event\n          loadConfig();\n          this.eventDisplay.getLoadingManager().itemLoaded('url_event');\n        });\n    } else {\n      loadConfig();\n    }\n  }\n\n  /**\n   * Hide all overlay widgets if \"hideWidgets\" option from the URL is true.\n   */\n  public applyHideWidgetsOptions() {\n    const hideWidgetsOptions = {\n      hideWidgets: [\n        'mainLogo', // Main logo\n        'uiMenu', // UI menu\n        'experimentInfo', // Experiment info\n        'phoenixMenu', // Phoenix menu\n        'statsElement', // Stats at the bottom left\n        'gui', // dat.GUI menu\n      ],\n    };\n\n    Object.entries(hideWidgetsOptions).forEach(([urlOption, idsToHide]) => {\n      if (this.urlOptions.get(urlOption) === 'true') {\n        idsToHide.forEach((singleId) => {\n          document\n            .getElementById(singleId)\n            ?.style.setProperty('display', 'none');\n        });\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VRManager.html":{"url":"classes/VRManager.html","title":"class - VRManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VRManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/vr-manager.ts\n        \n\n            \n                Description\n            \n            \n                VR manager for VR related operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraGroup\n                            \n                            \n                                    Private\n                                controller1\n                            \n                            \n                                    Private\n                                controller2\n                            \n                            \n                                    Private\n                                controllerGrip1\n                            \n                            \n                                    Private\n                                controllerGrip2\n                            \n                            \n                                    Private\n                                currentVRSession\n                            \n                            \n                                    Private\n                                onControllerSelectEnd\n                            \n                            \n                                    Private\n                                onControllerSelectStart\n                            \n                            \n                                    Private\n                                onSessionEnded\n                            \n                            \n                                    Private\n                                onVRSessionEnded\n                            \n                            \n                                    Private\n                                onVRSessionStarted\n                            \n                            \n                                    Private\n                                renderer\n                            \n                            \n                                    Static\n                                    Readonly\n                                SESSION_TYPE\n                            \n                            \n                                    Private\n                                vrActive\n                            \n                            \n                                    Public\n                                vrCamera\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                endVRSession\n                            \n                            \n                                    Public\n                                getCameraGroup\n                            \n                            \n                                    Public\n                                getVRCamera\n                            \n                            \n                                    Public\n                                isVRActive\n                            \n                            \n                                    Private\n                                moveInDirection\n                            \n                            \n                                    Private\n                                setupVRControls\n                            \n                            \n                                    Public\n                                setVRSession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cameraGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Group\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:31\n                            \n                        \n\n                \n                    \n                        Group containing the the camera for VR. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            controller1\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:36\n                            \n                        \n\n                \n                    \n                        The VR controller for movement. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            controller2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:38\n                            \n                        \n\n                \n                    \n                        The VR controller for movement. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            controllerGrip1\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:40\n                            \n                        \n\n                \n                    \n                        The VR controller representation \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            controllerGrip2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:42\n                            \n                        \n\n                \n                    \n                        The VR controller representation \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            currentVRSession\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:27\n                            \n                        \n\n                \n                    \n                        Currently active VR session. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onControllerSelectEnd\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:47\n                            \n                        \n\n                \n                    \n                        Listener for when the \"Select Start\" button is released. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onControllerSelectStart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:45\n                            \n                        \n\n                \n                    \n                        Listener for when the \"Select Start\" button is pushed. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onSessionEnded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:29\n                            \n                        \n\n                \n                    \n                        Callback to call when the VR session ends. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onVRSessionEnded\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:100\n                            \n                        \n\n                \n                    \n                        Callback when the VR session ends.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onVRSessionStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:90\n                            \n                        \n\n                \n                    \n                        Callback for when the VR session is started.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        session\n                                                        \n                                                                The VR session.\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            renderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:25\n                            \n                        \n\n                \n                    \n                        Renderer to set the VR session for. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            SESSION_TYPE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'immersive-vr'\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:21\n                            \n                        \n\n                \n                    \n                        Session type to use for VR. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            vrActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:23\n                            \n                        \n\n                \n                    \n                        Whether the VR is currently active or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            vrCamera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:33\n                            \n                        \n\n                \n                    \n                        The camera used by VR. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            endVRSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    endVRSession()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/vr-manager.ts:122\n                \n            \n\n\n            \n                \n                    End the current VR session.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCameraGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraGroup(camera?: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/vr-manager.ts:140\n                \n            \n\n\n            \n                \n                    Get the group containing the camera for VR.\nVR camera works by adding a Group with Camera to the scene.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Camera which is to be cloned for VR use.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Group\n\n                    \n                    \n                        The camera group used in VR mode.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getVRCamera\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVRCamera()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/vr-manager.ts:162\n                \n            \n\n\n            \n                \n                    Get the camera used by VR.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The camera used by VR.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isVRActive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isVRActive()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/vr-manager.ts:130\n                \n            \n\n\n            \n                \n                    Is the VR currently active or not.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        A boolean for whether the VR is active or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            moveInDirection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    moveInDirection(direction: Vector3, stepDistance: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/vr-manager.ts:241\n                \n            \n\n\n            \n                \n                    Move the camera in the given direction.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    direction\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Direction to move towards.\n\n                                    \n                                \n                                \n                                    stepDistance\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Distance to move by.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            setupVRControls\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setupVRControls()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/vr-manager.ts:169\n                \n            \n\n\n            \n                \n                    Set up VR controls for moving around the event display.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setVRSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setVRSession(renderer: WebGLRenderer, onSessionStarted?: () => void, onSessionEnded?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/vr-manager.ts:55\n                \n            \n\n\n            \n                \n                    Set and configure the VR session.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer to set the VR session for.\n\n                                    \n                                \n                                \n                                    onSessionStarted\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the VR session starts.\n\n                                    \n                                \n                                \n                                    onSessionEnded\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the VR session ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebGLRenderer,\n  Group,\n  Camera,\n  Vector3,\n  BufferGeometry,\n  Line,\n} from 'three';\nimport { XRControllerModelFactory } from 'three/examples/jsm/webxr/XRControllerModelFactory';\n\n// NOTE: This was created on 29/08/2020\n// It might get outdated given how WebXR is still a work in progress\n\n// LAST UPDATED ON 28/11/2020\n\n/**\n * VR manager for VR related operations.\n */\nexport class VRManager {\n  /** Session type to use for VR. */\n  static readonly SESSION_TYPE: string = 'immersive-vr';\n  /** Whether the VR is currently active or not. */\n  private vrActive: boolean = false;\n  /** Renderer to set the VR session for. */\n  private renderer: WebGLRenderer;\n  /** Currently active VR session. */\n  private currentVRSession: any = null;\n  /** Callback to call when the VR session ends. */\n  private onSessionEnded: () => void;\n  /** Group containing the the camera for VR. */\n  public cameraGroup: Group;\n  /** The camera used by VR. */\n  public vrCamera: Camera;\n\n  /** The VR controller for movement. */\n  private controller1: any;\n  /** The VR controller for movement. */\n  private controller2: any;\n  /** The VR controller representation */\n  private controllerGrip1: any;\n  /** The VR controller representation */\n  private controllerGrip2: any;\n\n  /** Listener for when the \"Select Start\" button is pushed. */\n  private onControllerSelectStart: () => void;\n  /** Listener for when the \"Select Start\" button is released. */\n  private onControllerSelectEnd: () => void;\n\n  /**\n   * Set and configure the VR session.\n   * @param renderer Renderer to set the VR session for.\n   * @param onSessionStarted Callback to call when the VR session starts.\n   * @param onSessionEnded Callback to call when the VR session ends.\n   */\n  public setVRSession(\n    renderer: WebGLRenderer,\n    onSessionStarted?: () => void,\n    onSessionEnded?: () => void\n  ) {\n    this.renderer = renderer;\n    this.onSessionEnded = onSessionEnded;\n\n    const webXR = (navigator as any)?.xr;\n\n    if (webXR) {\n      const sessionInit = {\n        optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking'],\n      };\n\n      (webXR.requestSession(\n        VRManager.SESSION_TYPE,\n        sessionInit\n      ) as Promise)\n        .then((session: any) => {\n          this.onVRSessionStarted(session);\n          onSessionStarted?.();\n        })\n        .catch((error: any) => {\n          console.log('VR Error:', error);\n        });\n\n      this.setupVRControls();\n    }\n  }\n\n  /**\n   * Callback for when the VR session is started.\n   * @param session The VR session.\n   */\n  private onVRSessionStarted = (session: any) => {\n    this.vrActive = true;\n    session.addEventListener('end', this.onVRSessionEnded);\n    this.renderer.xr.setSession(session);\n    this.currentVRSession = session;\n  };\n\n  /**\n   * Callback when the VR session ends.\n   */\n  private onVRSessionEnded = () => {\n    this.onSessionEnded?.();\n\n    this.vrActive = false;\n    this.currentVRSession?.removeEventListener('end', this.onVRSessionEnded);\n    this.currentVRSession = null;\n\n    this.controller1?.removeEventListener(\n      'selectstart',\n      this.onControllerSelectStart\n    );\n    this.controller1?.removeEventListener(\n      'selectend',\n      this.onControllerSelectEnd\n    );\n\n    this.cameraGroup = undefined;\n  };\n\n  /**\n   * End the current VR session.\n   */\n  public endVRSession() {\n    this.currentVRSession?.end();\n  }\n\n  /**\n   * Is the VR currently active or not.\n   * @returns A boolean for whether the VR is active or not.\n   */\n  public isVRActive(): boolean {\n    return this.vrActive;\n  }\n\n  /**\n   * Get the group containing the camera for VR.\n   * VR camera works by adding a Group with Camera to the scene.\n   * @param camera Camera which is to be cloned for VR use.\n   * @returns The camera group used in VR mode.\n   */\n  public getCameraGroup(camera?: Camera): Group {\n    // Set up the camera position in the VR - Adding a group with camera does it\n    if (!this.cameraGroup) {\n      this.cameraGroup = new Group();\n    }\n    if (camera && this.vrActive) {\n      this.vrCamera = this.renderer.xr\n        .getCamera(new Camera())\n        .copy(camera.clone() as Camera);\n      this.vrCamera.name = 'VR_CAMERA';\n\n      this.cameraGroup.position.copy(this.vrCamera.position);\n      this.cameraGroup.add(this.vrCamera);\n    }\n\n    return this.cameraGroup;\n  }\n\n  /**\n   * Get the camera used by VR.\n   * @returns The camera used by VR.\n   */\n  public getVRCamera() {\n    return this.vrCamera;\n  }\n\n  /**\n   * Set up VR controls for moving around the event display.\n   */\n  private setupVRControls() {\n    // Get the controllers\n    this.controller1 = this.renderer.xr.getController(0);\n    this.getCameraGroup().add(this.controller1);\n    this.controller2 = this.renderer.xr.getController(1);\n    this.getCameraGroup().add(this.controller2);\n\n    const controllerModelFactory = new XRControllerModelFactory();\n    this.controllerGrip1 = this.renderer.xr.getControllerGrip(0);\n    this.controllerGrip1.add(\n      controllerModelFactory.createControllerModel(this.controllerGrip1)\n    );\n    this.getCameraGroup().add(this.controllerGrip1);\n\n    this.controllerGrip2 = this.renderer.xr.getControllerGrip(1);\n    this.controllerGrip2.add(\n      controllerModelFactory.createControllerModel(this.controllerGrip2)\n    );\n    this.getCameraGroup().add(this.controllerGrip2);\n\n    const geometry = new BufferGeometry().setFromPoints([\n      new Vector3(0, 0, 0),\n      new Vector3(0, 0, -1),\n    ]);\n\n    const line = new Line(geometry);\n    line.name = 'line';\n    line.scale.z = 50;\n\n    this.controller1.add(line.clone());\n    this.controller2.add(line.clone());\n\n    // Set up movement\n\n    // Distance for a single step\n    const stepDistance = 30;\n    // Unit vector in camera direction\n    const direction = new Vector3();\n    // Interval ID for the movement interval\n    let intervalId: NodeJS.Timeout;\n\n    this.onControllerSelectStart = () => {\n      console.log(\n        'Select: c1 position ' + this.controller1.position.toArray().join(', ')\n      );\n      console.log(\n        'Select: CG position ' + this.cameraGroup.position.toArray().join(', ')\n      );\n\n      // Start movement in camera direction\n      intervalId = setInterval(() => {\n        this.moveInDirection(direction, stepDistance);\n      }, 20);\n    };\n\n    this.onControllerSelectEnd = () => {\n      // Stop the movement\n      clearInterval(intervalId);\n    };\n\n    this.controller1.addEventListener(\n      'selectstart',\n      this.onControllerSelectStart\n    );\n    this.controller1.addEventListener('selectend', this.onControllerSelectEnd);\n  }\n\n  /**\n   * Move the camera in the given direction.\n   * @param direction Direction to move towards.\n   * @param stepDistance Distance to move by.\n   */\n  private moveInDirection(direction: Vector3, stepDistance: number) {\n    // Get the direction the controller is facing\n    //! this.controller.getWorldDirection(direction);\n\n    // Get direction the camera is facing\n    this.vrCamera?.getWorldDirection(direction);\n\n    // Move the camera in the given direction\n    this.cameraGroup.position.addScaledVector(direction, stepDistance);\n    this.vrCamera.position.addScaledVector(direction, stepDistance);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Window.html":{"url":"interfaces/Window.html","title":"interface - Window","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Window\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event-display.ts\n        \n\n            \n                Description\n            \n            \n                Window interface for adding objects to the window object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        EventDisplay\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        EventDisplay\n                                    \n                                \n                                \n                                    \n                                        EventDisplay:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    EventDisplay object containing event display related functions. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ThreeManager } from './managers/three-manager';\nimport { UIManager } from './managers/ui-manager';\nimport { InfoLogger } from './helpers/info-logger';\nimport { Configuration } from './extras/configuration';\nimport { StateManager } from './managers/state-manager';\nimport { LoadingManager } from './managers/loading-manager';\nimport { URLOptionsManager } from './managers/url-options-manager';\nimport { ActiveVariable } from './helpers/active-variable';\n\ndeclare global {\n  /**\n   * Window interface for adding objects to the window object.\n   */\n  interface Window {\n    /** EventDisplay object containing event display related functions. */\n    EventDisplay: any;\n  }\n}\n\n/**\n * Phoenix event display class for managing detector geometries and event data.\n */\nexport class EventDisplay {\n  /** Configuration for preset views and event data loader. */\n  private configuration: Configuration;\n  /** An object containing event data. */\n  private eventsData: any;\n  /** Array containing callbacks to be called when events change. */\n  private onEventsChange: ((events: any) => void)[] = [];\n  /** Array containing callbacks to be called when the displayed event changes. */\n  private onDisplayedEventChange: ((nowDisplayingEvent: any) => void)[] = [];\n  /** Three manager for three.js operations. */\n  private graphicsLibrary: ThreeManager;\n  /** Info logger for storing event display logs. */\n  private infoLogger: InfoLogger;\n  /** UI manager for UI menu. */\n  private ui: UIManager;\n  /** Loading manager for loadable resources */\n  private loadingManager: LoadingManager;\n  /** State manager for managing event display state. */\n  private stateManager: StateManager;\n\n  /**\n   * Create the Phoenix event display and intitialize all the elements.\n   * @param configuration Configuration used to customize different aspects.\n   */\n  constructor(configuration?: Configuration) {\n    this.loadingManager = new LoadingManager();\n    this.infoLogger = new InfoLogger();\n    this.graphicsLibrary = new ThreeManager(this.infoLogger);\n    this.ui = new UIManager(this.graphicsLibrary);\n    if (configuration) {\n      this.init(configuration);\n    }\n  }\n\n  /**\n   * Initialize all the Phoenix event display elements.\n   * @param configuration Configuration used to customize different aspects.\n   */\n  public init(configuration: Configuration) {\n    this.configuration = configuration;\n\n    // Initialize the three manager with configuration\n    this.graphicsLibrary.init(configuration);\n    // Initialize the UI with configuration\n    this.ui.init(configuration);\n    // Set up for the state manager\n    this.getStateManager().setEventDisplay(this);\n\n    // Animate loop\n    const uiLoop = () => {\n      this.ui.updateUI();\n    };\n    this.graphicsLibrary.setAnimationLoop(uiLoop);\n\n    // Process and apply URL options\n    if (configuration.allowUrlOptions !== false) {\n      const urlOptionsManager = new URLOptionsManager(this, configuration);\n      urlOptionsManager.applyOptions();\n    }\n\n    // Allow adding elements through console\n    this.enableEventDisplayConsole();\n    // Allow keyboard controls\n    this.enableKeyboardControls();\n  }\n\n  /**\n   * Initialize VR.\n   * @param onSessionEnded Callback when the VR session ends.\n   */\n  public initVR(onSessionEnded?: () => void) {\n    this.graphicsLibrary.initVRSession(onSessionEnded);\n  }\n\n  /**\n   * End VR and remove VR settings.\n   */\n  public endVR() {\n    this.graphicsLibrary.endVRSession();\n  }\n\n  /**\n   * Receives an object containing all the eventKeys and saves it.\n   * Then it loads by default the first event.\n   * @param eventsData Object containing the event data.\n   * @returns Array of strings containing the keys of the eventsData object.\n   */\n  public parsePhoenixEvents(eventsData: any): string[] {\n    this.eventsData = eventsData;\n    const eventKeys = this.configuration.eventDataLoader.getEventsList(\n      eventsData\n    );\n    this.loadEvent(eventKeys[0]);\n    this.onEventsChange.forEach((callback) => callback(eventKeys));\n    return eventKeys;\n  }\n\n  /**\n   * Receives an object containing one event and builds the different collections\n   * of physics objects.\n   * @param eventData Object containing the event data.\n   */\n  public buildEventDataFromJSON(eventData: any) {\n    // Creating UI folder\n    this.ui.addEventDataFolder();\n    this.ui.addLabelsFolder();\n    // Clearing existing event data\n    this.graphicsLibrary.clearEventData();\n    // Build data and add to scene\n    this.configuration.eventDataLoader.buildEventData(\n      eventData,\n      this.graphicsLibrary,\n      this.ui,\n      this.infoLogger\n    );\n    this.onDisplayedEventChange.forEach((callback) => callback(eventData));\n    // Reload the event data state in Phoenix menu\n    this.ui.loadEventFolderPMState();\n  }\n\n  /**\n   * Receives a string representing the key of an event and loads\n   * the event associated with that key.\n   * @param eventKey String that represents the event in the eventsData object.\n   */\n  public loadEvent(eventKey: any) {\n    const event = this.eventsData[eventKey];\n\n    if (event) {\n      this.buildEventDataFromJSON(event);\n    }\n  }\n\n  /**\n   * Get the three manager responsible for three.js functions.\n   * @returns The three.js manager.\n   */\n  public getThreeManager() {\n    return this.graphicsLibrary;\n  }\n\n  /**\n   * Get the UI manager responsible for UI related functions.\n   * @returns The UI manager.\n   */\n  public getUIManager() {\n    return this.ui;\n  }\n\n  /**\n   * Get the info logger containing event display logs.\n   * @returns The info logger instance being used by the event display.\n   */\n  public getInfoLogger() {\n    return this.infoLogger;\n  }\n\n  /**\n   * Get the loading manager for managing loadable items.\n   * @returns The loading manager.\n   */\n  public getLoadingManager() {\n    return this.loadingManager;\n  }\n\n  /**\n   * Get the state manager that manages event display's state.\n   * @returns The state manager.\n   */\n  public getStateManager() {\n    if (!this.stateManager) {\n      this.stateManager = new StateManager();\n    }\n    return this.stateManager;\n  }\n\n  // **********************\n  // * LOADING GEOMETRIES *\n  // **********************\n\n  /**\n   * Loads an OBJ (.obj) geometry from the given filename\n   * and adds it to the dat.GUI menu.\n   * @param filename Path to the geometry.\n   * @param name Name given to the geometry.\n   * @param color Color to initialize the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param doubleSided If true, render both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   * @param setFlat Whether object should be flat-shaded or not.\n   * @returns Promise for loading the geometry.\n   */\n  public loadOBJGeometry(\n    filename: string,\n    name: string,\n    color: any,\n    menuNodeName?: string,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true,\n    setFlat: boolean = true\n  ): Promise {\n    this.loadingManager.addLoadableItem(`obj_geom_${name}`);\n    this.ui.addGeometry(name, color, menuNodeName, initiallyVisible);\n    this.infoLogger.add(name, 'Loaded OBJ geometry');\n    return this.graphicsLibrary.loadOBJGeometry(\n      filename,\n      name,\n      color,\n      doubleSided,\n      initiallyVisible,\n      setFlat\n    );\n  }\n\n  /**\n   * Parses and loads an OBJ geometry from the given content\n   * and adds it to the dat.GUI menu.\n   * @param content Content of the OBJ geometry.\n   * @param name Name given to the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public parseOBJGeometry(\n    content: string,\n    name: string,\n    menuNodeName?: string,\n    initiallyVisible: boolean = true\n  ) {\n    this.loadingManager.addLoadableItem(`parse_obj_${name}`);\n    this.graphicsLibrary.parseOBJGeometry(content, name, initiallyVisible);\n    this.ui.addGeometry(name, 0x000fff, menuNodeName, initiallyVisible);\n  }\n\n  /**\n   * Exports scene to OBJ file format.\n   */\n  public exportToOBJ() {\n    this.graphicsLibrary.exportSceneToOBJ();\n    this.infoLogger.add('Exported scene to OBJ');\n  }\n\n  /**\n   * Parse and load an event from the Phoenix file format (.phnx).\n   * @param input Content containing the JSON with event data\n   * and other configuration.\n   * @returns Promise for loading the geometry.\n   */\n  public parsePhoenixDisplay(input: any): Promise {\n    const phoenixScene = JSON.parse(input);\n\n    if (phoenixScene.sceneConfiguration && phoenixScene.scene) {\n      // Creating UI folder\n      this.ui.addEventDataFolder();\n      this.ui.addLabelsFolder();\n      // Clearing existing event data\n      this.graphicsLibrary.clearEventData();\n      // Add to scene\n      this.loadSceneConfiguration(phoenixScene.sceneConfiguration);\n\n      this.loadingManager.addLoadableItem(`parse_phnx_${name}`);\n      return this.graphicsLibrary.parsePhnxScene(phoenixScene.scene);\n    }\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   */\n  public exportPhoenixDisplay() {\n    this.graphicsLibrary.exportPhoenixScene();\n  }\n\n  /**\n   * Parses and loads a geometry in GLTF (.gltf) format.\n   * @param input Data of the GLTF (.gltf) file.\n   * @param name Name given to the geometry.\n   * @returns Promise for loading the geometry.\n   */\n  public parseGLTFGeometry(\n    input: string | ArrayBuffer,\n    name: string\n  ): Promise {\n    this.loadingManager.addLoadableItem(`parse_gltf_${name}`);\n    this.ui.addGeometry(name, undefined);\n    this.infoLogger.add(name, 'Parsed GLTF geometry');\n    return this.graphicsLibrary.parseGLTFGeometry(input, name);\n  }\n\n  /**\n   * Loads a GLTF (.gltf) scene/geometry from the given URL.\n   * and adds it to the dat.GUI menu.\n   * @param url URL to the GLTF (.gltf) file.\n   * @param name Name of the loaded scene/geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   * @returns Promise for loading the geometry.\n   */\n  public loadGLTFGeometry(\n    url: any,\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    initiallyVisible: boolean = true\n  ): Promise {\n    this.loadingManager.addLoadableItem(`gltf_geom_${name}`);\n    this.ui.addGeometry(name, undefined, menuNodeName, initiallyVisible);\n    this.infoLogger.add(name, 'Loaded GLTF geometry');\n    return this.graphicsLibrary.loadGLTFGeometry(\n      url,\n      name,\n      scale,\n      initiallyVisible\n    );\n  }\n\n  /**\n   * Loads geometries from JSON.\n   * @param json JSON or URL to JSON file of the geometry.\n   * @param name Name of the geometry or group of geometries.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   * @returns Promise for loading the geometry.\n   */\n  public loadJSONGeometry(\n    json: string | object,\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true\n  ): Promise {\n    this.loadingManager.addLoadableItem(`json_geom_${name}`);\n    this.ui.addGeometry(name, undefined, menuNodeName, initiallyVisible);\n    this.infoLogger.add(name, 'Loaded JSON geometry');\n    return this.graphicsLibrary.loadJSONGeometry(\n      json,\n      name,\n      scale,\n      doubleSided,\n      initiallyVisible\n    );\n  }\n\n  /**\n   * Load JSON geometry from JSRoot.\n   * @param JSROOT JSRoot object containing all the JSROOT functions.\n   * @param url URL of the JSRoot geometry file.\n   * @param name Name of the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public loadRootJSONGeometry(\n    JSROOT: any,\n    url: string,\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true\n  ) {\n    this.loadingManager.addLoadableItem('root_json_geom');\n    JSROOT.NewHttpRequest(url, 'object', (obj: any) => {\n      this.loadJSONGeometry(\n        JSROOT.GEO.build(obj, { dflt_colors: true }).toJSON(),\n        name,\n        menuNodeName,\n        scale,\n        doubleSided,\n        initiallyVisible\n      );\n      this.loadingManager.itemLoaded('root_json_geom');\n    }).send();\n  }\n\n  /**\n   * Load ROOT geometry from JSRoot.\n   * @param JSROOT JSRoot object containing all the JSROOT functions.\n   * @param url URL of the JSRoot file.\n   * @param objectName Name of the object inside the \".root\" file.\n   * @param name Name of the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public loadRootGeometry(\n    JSROOT: any,\n    url: string,\n    objectName: string,\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true\n  ) {\n    if (url.indexOf('.root') > 0) {\n      JSROOT.openFile(url).then((file: any) => {\n        file.readObject(objectName).then((obj: any) => {\n          this.loadJSONGeometry(\n            JSROOT.GEO.build(obj, { dflt_colors: true }).toJSON(),\n            name,\n            menuNodeName,\n            scale,\n            doubleSided,\n            initiallyVisible\n          );\n        });\n      });\n    }\n  }\n\n  /**\n   * Build Geometry from thr passed parameters, where\n   * @param parameters\n   */\n  public buildGeometryFromParameters(parameters: any): void {\n    this.graphicsLibrary.addGeometryFromParameters(parameters);\n  }\n\n  /**\n   * Zoom all the cameras by a specific zoom factor.\n   * The factor may either be greater (zoom in) or smaller (zoom out) than 1.\n   * @param zoomFactor The factor to zoom by.\n   * @param zoomTime The time it takes for a zoom animation to complete.\n   */\n  public zoomTo(zoomFactor: number, zoomTime: number) {\n    this.graphicsLibrary.zoomTo(zoomFactor, zoomTime);\n  }\n\n  /**\n   * Processes event data and geometry for Loading the scene\n   * from Phoenix file format (.phnx).\n   * @param sceneConfiguration Scene configuration containingevent data and detector geometry.\n   */\n  private loadSceneConfiguration(sceneConfiguration: {\n    eventData: {};\n    geometries: [];\n  }) {\n    for (const objectType of Object.keys(sceneConfiguration.eventData)) {\n      const { typeFolder, typeFolderPM } = this.ui.addEventDataTypeFolder(\n        objectType\n      );\n      const collections = sceneConfiguration.eventData[objectType];\n      for (const collection of collections) {\n        this.ui.addCollection({ typeFolder, typeFolderPM }, collection);\n      }\n    }\n\n    for (const geom of sceneConfiguration.geometries) {\n      this.ui.addGeometry(geom, '#ffffff');\n    }\n  }\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  public getCollection(collectionName: string) {\n    return this.configuration.eventDataLoader.getCollection(collectionName);\n  }\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  public getCollections(): string[] {\n    return this.configuration.eventDataLoader.getCollections();\n  }\n\n  /**\n   * Add a callback to onDisplayedEventChange array to call\n   * the callback on changes to the displayed event.\n   * @param callback Callback to be added to the onDisplayedEventChange array.\n   */\n  public listenToDisplayedEventChange(callback: (event) => any) {\n    this.onDisplayedEventChange.push(callback);\n  }\n\n  /**\n   * Add a callback to onEventsChange array to call\n   * the callback on changes to the events.\n   * @param callback Callback to be added to the onEventsChange array.\n   */\n  public listenToLoadedEventsChange(callback: (events) => any) {\n    this.onEventsChange.push(callback);\n  }\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  public getEventMetadata(): any[] {\n    return this.configuration.eventDataLoader.getEventMetadata();\n  }\n\n  /**\n   * Enables calling specified event display methods in console.\n   */\n  private enableEventDisplayConsole() {\n    // Defining an EventDisplay object in window to access methods through console\n    window.EventDisplay = {\n      loadGLTFGeometry: (sceneUrl: string, name: string) => {\n        this.loadGLTFGeometry(sceneUrl, name);\n      },\n      loadOBJGeometry: (\n        filename: string,\n        name: string,\n        colour: any,\n        menuNodeName: string,\n        doubleSided: boolean\n      ) => {\n        this.loadOBJGeometry(filename, name, colour, menuNodeName, doubleSided);\n      },\n      loadJSONGeometry: (\n        json: string | object,\n        name: string,\n        menuNodeName: string,\n        scale?: number,\n        doubleSided?: boolean,\n        initiallyVisible: boolean = true\n      ) => {\n        this.loadJSONGeometry(\n          json,\n          name,\n          menuNodeName,\n          scale,\n          doubleSided,\n          initiallyVisible\n        );\n      },\n      buildGeometryFromParameters: (parameters: object) =>\n        this.buildGeometryFromParameters(parameters),\n    };\n  }\n\n  /**\n   * Sets the renderer to be used to render the event display on the overlayed canvas.\n   * @param overlayCanvas An HTML canvas on which the overlay renderer is to be set.\n   */\n  public setOverlayRenderer(overlayCanvas: HTMLCanvasElement) {\n    this.graphicsLibrary.setOverlayRenderer(overlayCanvas);\n  }\n\n  /**\n   * Initializes the object which will show information of the selected geometry/event data.\n   * @param selectedObject Object to display the data.\n   */\n  public allowSelection(selectedObject: { name: string; attributes: any[] }) {\n    this.graphicsLibrary.setSelectedObjectDisplay(selectedObject);\n  }\n\n  /**\n   * Toggles the ability of selecting geometries/event data by clicking on the screen.\n   * @param enable Value to enable or disable the functionality.\n   */\n  public enableSelecting(enable: boolean) {\n    this.graphicsLibrary.enableSelecting(enable);\n  }\n\n  /**\n   * Fixes the camera position of the overlay view.\n   * @param fixed Whether the overlay view is to be fixed or not.\n   */\n  public fixOverlayView(fixed: boolean) {\n    this.graphicsLibrary.fixOverlayView(fixed);\n  }\n\n  /**\n   * Get the uuid of the currently selected object.\n   * @returns uuid of the currently selected object.\n   */\n  public getActiveObjectId(): ActiveVariable {\n    return this.graphicsLibrary.getActiveObjectId();\n  }\n\n  /**\n   * Move the camera to look at the object with the given uuid\n   * and highlight it.\n   * @param uuid uuid of the object.\n   */\n  public lookAtObject(uuid: string) {\n    this.graphicsLibrary.lookAtObject(uuid);\n    this.graphicsLibrary.highlightObject(uuid);\n  }\n\n  /**\n   * Highlight the object with the given uuid by giving it an outline.\n   * @param uuid uuid of the object.\n   */\n  public highlightObject(uuid: string) {\n    this.graphicsLibrary.highlightObject(uuid);\n  }\n\n  /**\n   * Enable keyboard controls for the event display.\n   */\n  public enableKeyboardControls() {\n    this.ui.enableKeyboardControls();\n    this.graphicsLibrary.enableKeyboardControls();\n  }\n\n  /**\n   * Animate the camera through the event scene.\n   * @param startPos Start position of the translation animation.\n   * @param tweenDuration Duration of each tween in the translation animation.\n   * @param onAnimationEnd Callback when the last animation ends.\n   */\n  public animateThroughEvent(\n    startPos: number[],\n    tweenDuration: number,\n    onAnimationEnd?: () => void\n  ) {\n    this.graphicsLibrary.animateThroughEvent(\n      startPos,\n      tweenDuration,\n      onAnimationEnd\n    );\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateEventWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.graphicsLibrary.animateEventWithCollision(tweenDuration, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data\n   * using clipping planes after particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateClippingWithCollision(\n    tweenDuration: number,\n    onEnd?: () => void\n  ) {\n    this.graphicsLibrary.animateClippingWithCollision(tweenDuration, onEnd);\n  }\n\n  /**\n   * Add label to a 3D object.\n   * @param label Label to add to the event object.\n   * @param collection Collection the event object is a part of.\n   * @param indexInCollection Event object's index in collection.\n   * @param uuid UUID of the three.js object.\n   */\n  public addLabelToObject(\n    label: string,\n    collection: string,\n    indexInCollection: number,\n    uuid: string\n  ) {\n    const labelId = this.configuration.eventDataLoader.addLabelToEventObject(\n      label,\n      collection,\n      indexInCollection\n    );\n\n    // Remove the label if the string is empty\n    if (!label) {\n      this.ui.removeLabel(labelId, true);\n      return;\n    }\n\n    this.ui.addLabel(labelId);\n    this.graphicsLibrary.addLabelToObject(label, uuid, labelId);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file.\nSee Conventional Commits for commit guidelines.\n1.7.0 (2021-04-21)\nBug Fixes\n\nevent-display: attempt to improve the output of the track extension by removing close hits (5bdc562)\nevent-display: fix drawing of hits (db3ca8b)\nevent-display: handle older json hit format again (edcd567)\n\n1.6.0 (2021-04-18)\nBug Fixes\n\napp: add sphericalToCartesian method (bbea6b0)\nevent-display: add back in geometrical limits for clusters (0b95e5b)\nevent-display: add eta and phi cuts for tracks (f8a0080)\nevent-display: add missing docs (c9781e5)\nevent-display: add missing documentation (236bdf4)\nevent-display: calocluster eta position was wrong. (66cbbc0)\nevent-display: cleanup JixeXML loader (6a834e8)\nevent-display: prettier fixes (7528ee0)\nevent-display: run prettier (again) (f279898)\nevent-display: use BufferGeometry for CMS objects with new three.js update (b8e88b8)\n\nFeatures\n\napp: bind clipping state with UI menu (40bbba0)\napp: complete dialog for share link and embed (50c2584)\napp: setup link share form (b10bb7a)\nevent-display: ability to remove geometry in Phoenix menu (7d90d72)\nevent-display: ability to scale CaloClusters (ff666e2)\nevent-display: add ability to scale clusters in just one direction (5a562ab), closes #257\nevent-display: add coordinate helper (57e438f)\nevent-display: add guidelines and simplify some coordinate transformations (56f94f0)\nevent-display: Add missing energy (6ef17d0)\nevent-display: add opacity and wireframe for CaloClusters (85d4a14)\nevent-display: add support for HitLines (455f536)\nevent-display: add types for dat.GUI (7632a18)\nevent-display: create an active observable variable (854e543)\nevent-display: improve grid lines (ca3cc2f)\nevent-display: improve handling of UI menus in UI manager (b7a324a)\nevent-display: introduce new URL options and improve handling them (f7cd6b4)\nevent-display: JiveXML : add support for more hit types (bbcdf0c)\nevent-display: keep state of event data folder on event switch (b52282f)\nevent-display: make Phoenix available in browser without a namespace (5389282)\nevent-display: move opacity and wireframing to collection level (6486982)\nevent-display: options for CaloClusters (68cd7ad)\nevent-display: Remove LineHits and use hits to extend tracks (30b5160)\nevent-display: restructure phoenix-event-display (2e16371)\nevent-display: separate dat.GUI UI menu (29093a2)\nevent-display: separate Phoenix menu UI from UI manager (5743adc)\nevent-display: split dat.GUI menu options (45a0123)\nevent-display: start splitting UI manager (56ff275)\nevent-display: use run and event number and file name for config json (03a1de4)\nupgrade all packages except three.js (8e2eff4)\nupgrade three.js except for CMSObjects (0b2dd8a)\n\n1.5.0 (2021-03-24)\nBug Fixes\n\nevent-display: catch VR request session error (d2874b8)\nevent-display: fix jsroot loading root file (8cbcaa5)\nevent-display: handle tracks with no positions (3b1991c)\nevent-display: improve renderer init (a8f8353)\nevent-display: remove optimize controls function (266af04)\nevent-display: remove redundant import (359d353)\nevent-display: use per physics object color and not collection color (ac0c4f1)\nremove JSROOT source files from repo (7bcd7ba)\n\nFeatures\n\napp: ability to import ig archive in CMS (9540af5)\napp: Add more realistic geometry for ATLAS (d207bad)\nevent-display: allow resize and improve tests and drop improving CPU usage (a474af2)\nevent-display: resize canvas with window resize (5ea04f1)\nevent-display: update to use CDN for JSROOT (2fa310f)\nevent-display: use latest version of JSROOT (fbd584e)\n\n1.4.0 (2021-02-16)\nBug Fixes\n\nevent-display: disable keyboard controls when typing (4f80bd6)\nevent-display: improve object selection from uuid and label input (3475836)\nevent-display: persist toggle state of phoenix menu node children (e96136b)\nevent-display: remove rollup config and fix globalThis usage (e6f69a0)\n\nFeatures\n\nevent-display: ability to add 3D label text (c9d4880)\nevent-display: add labels configuration to dat.GUI menu (d677089)\nevent-display: add labels to UI configuration (d90e3a6)\nevent-display: add size and color options for labels (3ce675f)\nevent-display: better handling of labels object (e10a68d)\nevent-display: complete setup with webpack for browser (3f6367f)\nevent-display: complete support to save and load labels (2219a3e)\nevent-display: create a url options manager for url options (fe0b2e6)\nevent-display: create generic function for getting object position (8d7b160)\nevent-display: delete label on empty value and change add label icon (3756330)\nevent-display: make label always look at camera (0837334)\nevent-display: set up add label to object functions (db261a6)\nevent-display: setup webpack for browser bundle (dc05ed9)\nevent-display: support to hide widgets through URL (cb2ec40)\nevent-display: use optional chaining for hide widgets url option (c991e54)\nevent-display: Use types for phoenix menu configuration (79e6d7c)\nevent-display: working labels object (60269f7)\nUpdate Angular and all packages to latest (f4c2e31)\n\n1.3.0 (2021-01-16)\nBug Fixes\n\nevent-display: assign the right name to geometry (b7e8da0)\nevent-display: code improvements (f94c0e4)\nevent-display: fix parsing of GLTF geometry (dc5d489)\nevent-display: improve code for hiding tube tracks (e9f1bc9)\nevent-display: minor script fix (5139c6e)\nevent-display: remove color from obj file userdata (8ba94e7)\nevent-display: revert jasmine spec files (dc140dd)\nevent-display: try fixing CMSLoader tests (789da8b)\n\nFeatures\n\nevent-display: display size on selection (6943f79)\nevent-display: hide tube tracks on zoom (7d606b2)\n\n1.2.0 (2020-12-06)\nBug Fixes\n\nevent-display: add Edward's controller set up (a6a1c19)\nevent-display: changes to animation loop for VR (37df19f)\nevent-display: finally fix VR completely (4764196)\nevent-display: fix applying multiple cuts at the same time (8f3e8e1)\nevent-display: fix applying state for range slider (c36a222)\nevent-display: fix loading and add default view to experiments (ab8feb4)\nevent-display: initialize cuts with correct values (e297c98)\nevent-display: make it possible to flat shade (dcf6cec)\nevent-display: optimal animation loop set up (da3ead5)\nevent-display: optimal render for effects manager (1975d70)\nevent-display: reset clipping on init (029d526)\nevent-display: stop animation loop on home (c39ecd3)\nevent-display: update configuration in tests (18f8db2)\n\nFeatures\n\napp: add toggle for screenshot mode (22a1ec8)\napp: make loader generic (ff10477)\napp: set up performance mode with selection (947f6bf)\napp: use event display loader in Angular component (25b2a9d)\nevent-display: ability to add geometry to a menu folder (30b0383)\nevent-display: ability to initialize event display without init (69d3f75)\nevent-display: add ability to add parametrised geometry (04dc545)\nevent-display: add and set up loading manager (5f0f942)\nevent-display: handle loading better (9474565)\nevent-display: make loading functions return Promise for async await (4262a1b)\nevent-display: performance mode and antialias support (d3920c4)\nevent-display: support for toggling antialiasing (48130b2)\nevent-display: use object to simplify configuration (4b10452)\n\n1.1.0 (2020-11-07)\nBug Fixes\n\napp: cut filter failed if value return was zero (0a26fea)\napp: cut should be pT, not mom (73b7c27)\napp: fix attribute pipe (0980379)\napp: fix tests (f87c587)\napp: pT should always be positive (3918159)\nevent-display: add optional chaining to CMS event info (fixes tests) (5283e9a)\nevent-display: fix geometry too big in overlay view (c7a35db)\nevent-display: fix URL event not working with hash routes (9eb21f5)\nevent-display: Formatted correctly (b46c49f)\nevent-display: use optional chaining in CMS loader (cfb1b6a)\nVR: Fix bugged scene in VR mode (9efd9ca)\n\nFeatures\n\napp: Option to load config from URL in ATLAS (1906976)\napp: phoenix-ui-components library (17909eb)\napp: yet another MAJOR refactoring (1261358)\nevent-display: add defaultView to configuration (612205c)\nevent-display: implicitly load event data from URL (9e3dc20)\nevent-display: state manager for managing event display state for save and load (7d1ca22)\n\n1.0.2 (2020-10-05)\n\nComplete deployment set up (399ac77)\n\n1.0.1 (2020-10-05)\nNote: Version bump only for package phoenix-event-display\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/event-display.ts\n            \n            class\n            EventDisplay\n            \n                100 %\n                (53/53)\n            \n        \n        \n            \n                \n                src/event-display.ts\n            \n            interface\n            Window\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/extras/configuration.ts\n            \n            interface\n            Configuration\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/extras/cut.model.ts\n            \n            class\n            Cut\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/extras/preset-view.model.ts\n            \n            class\n            PresetView\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/helpers/active-variable.ts\n            \n            class\n            ActiveVariable\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/helpers/constants.ts\n            \n            variable\n            EVENT_DATA_TYPE_COLORS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/coordinate-helper.ts\n            \n            class\n            CoordinateHelper\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/helpers/file.ts\n            \n            variable\n            loadFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/file.ts\n            \n            variable\n            saveFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/info-logger.ts\n            \n            class\n            InfoLogger\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/helpers/pretty-symbols.ts\n            \n            class\n            PrettySymbols\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/helpers/rk-helper.ts\n            \n            class\n            RKHelper\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            Field\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            RungeKutta\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            State\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/loaders/cms-loader.ts\n            \n            class\n            CMSLoader\n            \n                100 %\n                (34/34)\n            \n        \n        \n            \n                \n                src/loaders/event-data-loader.ts\n            \n            interface\n            EventDataLoader\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/loaders/jivexml-loader.ts\n            \n            class\n            JiveXMLLoader\n            \n                100 %\n                (38/38)\n            \n        \n        \n            \n                \n                src/loaders/jsroot-event-loader.ts\n            \n            class\n            JSRootEventLoader\n            \n                100 %\n                (28/28)\n            \n        \n        \n            \n                \n                src/loaders/lhcb-loader.ts\n            \n            class\n            LHCbLoader\n            \n                100 %\n                (24/24)\n            \n        \n        \n            \n                \n                src/loaders/objects/cms-objects.ts\n            \n            class\n            CMSObjects\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/loaders/objects/phoenix-objects.ts\n            \n            class\n            PhoenixObjects\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/loaders/phoenix-loader.ts\n            \n            class\n            PhoenixLoader\n            \n                100 %\n                (20/20)\n            \n        \n        \n            \n                \n                src/loaders/script-loader.ts\n            \n            class\n            ScriptLoader\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/loaders/script-loader.ts\n            \n            variable\n            JSROOT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/loaders/trackml-loader.ts\n            \n            class\n            TrackmlLoader\n            \n                100 %\n                (27/27)\n            \n        \n        \n            \n                \n                src/managers/loading-manager.ts\n            \n            class\n            LoadingManager\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/managers/state-manager.ts\n            \n            class\n            StateManager\n            \n                100 %\n                (17/17)\n            \n        \n        \n            \n                \n                src/managers/three-manager/animations-manager.ts\n            \n            class\n            AnimationsManager\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/managers/three-manager/controls-manager.ts\n            \n            class\n            ControlsManager\n            \n                100 %\n                (36/36)\n            \n        \n        \n            \n                \n                src/managers/three-manager/effects-manager.ts\n            \n            class\n            EffectsManager\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/managers/three-manager/export-manager.ts\n            \n            class\n            ExportManager\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/managers/three-manager/import-manager.ts\n            \n            class\n            ImportManager\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                src/managers/three-manager/index.ts\n            \n            class\n            ThreeManager\n            \n                100 %\n                (61/61)\n            \n        \n        \n            \n                \n                src/managers/three-manager/renderer-manager.ts\n            \n            class\n            RendererManager\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/managers/three-manager/scene-manager.ts\n            \n            class\n            SceneManager\n            \n                100 %\n                (43/43)\n            \n        \n        \n            \n                \n                src/managers/three-manager/selection-manager.ts\n            \n            class\n            SelectionManager\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/managers/three-manager/vr-manager.ts\n            \n            class\n            VRManager\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/dat-gui-ui.ts\n            \n            class\n            DatGUIMenuUI\n            \n                100 %\n                (20/20)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/index.ts\n            \n            class\n            UIManager\n            \n                100 %\n                (38/38)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts\n            \n            class\n            PhoenixMenuNode\n            \n                100 %\n                (24/24)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts\n            \n            class\n            PhoenixMenuUI\n            \n                100 %\n                (17/17)\n            \n        \n        \n            \n                \n                src/managers/url-options-manager.ts\n            \n            class\n            URLOptionsManager\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/managers/url-options-manager.ts\n            \n            variable\n            phoenixURLOptions\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @tweenjs/tween.js : ^17.4.0\n        \n            dat.gui : ^0.7.7\n        \n            jszip : ^3.6.0\n        \n            stats-js : ^1.0.1\n        \n            three : ^0.127.0\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nPhoenix event display\n\n\n\nA highly modular and API driven experiment independent event display that uses three.js for processing and presenting detector geometry and event data.\nTo use in your application, install the package.\nnpm install phoenix-event-display\n# or\nyarn add phoenix-event-displayUsage\nAs a module\nTo create a simple event display.\n// Import required classes\nimport { EventDisplay, PhoenixLoader } from 'phoenix-event-display';\n\n// Create the event display\nconst eventDisplay = new EventDisplay();\n\n// Define the configuration\nconst configuration = {\n  elementId: '',\n  eventDataLoader: new PhoenixLoader() // or some other event data loader\n  // ... other configuration options\n};\n\n// Initialize the event display with the configuration\neventDisplay.init(configuration);\n\n// Load and parse event data in Phoenix format and display it\nfetch('path/to/event-data.json')\n  .then((res) => res.json())\n  .then((res) => {\n    eventDisplay.parsePhoenixEvents(res);\n  });\n\n// Load detector geometry\neventDisplay.loadOBJGeometry('path/to/geometry.obj', 'Detector OBJ', 0x8c8c8c /* color */);\nAs a standalone bundle\nPhoenix can be bundled and used directly in the HTML as a script. You can either use the CDN or build from source.\nTo build Phoenix as a bundle.\nyarn build:bundleThis will generate a file phoenix.min.js in the ./dist/bundle directory which can be included in your HTML code.\nWithout building, you can include the bundle directly from CDN.\n\n  \n    ...\n  \n\n  \n\n    \n\n    \n\n    \n      // Create the event display\n      const eventDisplay = new EventDisplay();\n\n      // Define the configuration\n      const configuration = {\n        elementId: 'eventDisplay',\n        eventDataLoader: new PhoenixLoader() // or some other event data loader\n        // ... other configuration options\n      };\n\n      // Initialize the event display with the configuration\n      eventDisplay.init(configuration);\n\n      // ... other event display functions\n    \n\n  \nExamples\n\nUsage in Angular (as a service)\nUsage in React\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    37 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CallbackFunction   (src/.../active-variable.ts)\n                        \n                        \n                            PhoenixMenuConfig   (src/.../phoenix-menu-node.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/helpers/active-variable.ts\n    \n    \n        \n            \n                \n                    \n                    CallbackFunction\n                \n            \n            \n                \n                    Callback function type. \n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts\n    \n    \n        \n            \n                \n                    \n                    PhoenixMenuConfig\n                \n            \n            \n                \n                    Configuration types for PhoenixMenuNode.\n\n                \n            \n            \n                \n                        \"checkbox\" | \"slider\" | \"button\" | \"label\" | \"color\" | \"rangeSlider\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EVENT_DATA_TYPE_COLORS   (src/.../constants.ts)\n                        \n                        \n                            JSROOT   (src/.../script-loader.ts)\n                        \n                        \n                            loadFile   (src/.../file.ts)\n                        \n                        \n                            phoenixURLOptions   (src/.../url-options-manager.ts)\n                        \n                        \n                            saveFile   (src/.../file.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/helpers/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EVENT_DATA_TYPE_COLORS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  Hits: new Color(0xff0000),\n  Tracks: new Color(0xff0000),\n  Jets: new Color(0x2194ce),\n  CaloClusters: new Color(0xffd166),\n  MuonChambers: new Color(0xff0000),\n  Vertices: new Color(0xffd166),\n  MissingEnergy: new Color(0xffffff),\n}\n                        \n                    \n\n                \n                    \n                        Colors of different event data types. \n\n                    \n                \n\n            \n        \n\n    src/loaders/script-loader.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            JSROOT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n                \n                    \n                        Global JSROOT variable for accessing functions after loading JSRoot scripts. \n\n                    \n                \n\n            \n        \n\n    src/helpers/file.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            loadFile\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  onFileRead: (data: string) => void,\n  contentType: string = 'application/json'\n) => {\n  // Create a mock input file element and use that to read the file\n  let inputFile = document.createElement('input');\n  inputFile.type = 'file';\n  inputFile.accept = contentType;\n  inputFile.onchange = (e: any) => {\n    const configFile = e.target?.files[0];\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      onFileRead?.(e.target.result.toString());\n\n      inputFile.remove();\n      inputFile = null;\n    };\n    reader.readAsText(configFile);\n  };\n  inputFile.click();\n}\n                        \n                    \n\n                \n                    \n                        Load a file from user by mocking an input element.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            saveFile\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  data: string,\n  fileName: string,\n  contentType: string = 'application/json'\n) => {\n  const blob = new Blob([data], { type: contentType });\n  const tempAnchor = document.createElement('a');\n  tempAnchor.style.display = 'none';\n  tempAnchor.href = URL.createObjectURL(blob);\n  tempAnchor.download = fileName;\n  tempAnchor.click();\n  tempAnchor.remove();\n}\n                        \n                    \n\n                \n                    \n                        Save and download file with the given data.\n\n                    \n                \n\n            \n        \n\n    src/managers/url-options-manager.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            phoenixURLOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  file: '',\n  type: '',\n  config: '',\n  hideWidgets: false,\n}\n                        \n                    \n\n                \n                    \n                        Model for Phoenix URL options.\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
