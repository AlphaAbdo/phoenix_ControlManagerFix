var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/ARManager.html",[0,0.279,1,2.32]],["body/classes/ARManager.html",[0,0.272,1,3.11,2,0.312,3,0.221,4,0.192,5,0.137,6,2.42,7,5.22,8,1.023,9,0.458,10,4.243,11,1.359,12,1.596,13,1.943,14,3.456,15,3.868,16,0.137,17,0.616,18,2.126,19,5.282,20,1.303,21,5.282,22,3.948,23,4.478,24,1.134,25,3.456,26,4.621,27,3.456,28,3.825,29,2.879,30,3.456,31,3.456,32,3.456,33,0.473,34,4.25,35,3.237,36,3.456,37,4.624,38,3.948,39,3.456,40,3.948,41,3.456,42,0.743,43,3.366,44,2.263,45,2.584,46,5.686,47,0.709,48,2.516,49,1.021,50,0.61,51,0.025,52,0.553,53,0.227,54,0.514,55,1.963,56,1.166,57,0.731,58,0.731,59,0.955,60,2.854,61,2.219,62,2.834,63,3.948,64,3.237,65,4.624,66,1.32,67,4.624,68,3.456,69,0.961,70,4.624,71,1.239,72,4.624,73,2.08,74,2.264,75,3.456,76,2.834,77,3.343,78,4.624,79,1.596,80,0.72,81,3.92,82,2.854,83,3.911,84,2.219,85,2.42,86,5.055,87,2.854,88,1.162,89,3.911,90,1.414,91,2.854,92,1.943,93,2.234,94,1.175,95,2.854,96,2.838,97,2.376,98,3.485,99,3.237,100,2.854,101,1.711,102,2.854,103,0.536,104,2.264,105,2.264,106,2.516,107,0.743,108,2.854,109,2.854,110,2.235,111,3.366,112,0.888,113,3.456,114,3.92,115,2.834,116,4.624,117,0.999,118,2.854,119,2.854,120,2.063,121,1.239,122,2.516,123,2.854,124,2.516,125,1.752,126,1.945,127,2.516,128,1.895,129,2.854,130,2.516,131,3.456,132,2.516,133,2.264,134,0.593,135,0.65,136,1.895,137,2.063,138,2.264,139,2.063,140,2.854,141,2.516,142,2.516,143,1.09,144,2.516,145,2.516,146,2.516,147,2.063,148,1.626,149,2.264,150,3.366,151,0.25,152,0.474,153,4.478,154,2.854,155,3.366,156,4.624,157,3.366,158,5.282,159,3.366,160,2.516,161,0.448,162,3.366,163,2.854,164,3.366,165,1.752,166,2.516,167,3.366,168,1.596,169,2.063,170,3.366,171,5.282,172,3.366,173,2.516,174,3.366,175,2.264,176,3.366,177,3.366,178,3.366,179,2.854,180,2.516,181,3.366,182,2.516,183,3.366,184,3.366,185,0.012,186,0.016,187,0.012]],["title/classes/ActiveVariable.html",[0,0.279,188,1.942]],["body/classes/ActiveVariable.html",[0,0.372,2,0.426,3,0.302,4,0.263,5,0.188,9,0.477,16,0.188,17,0.755,20,1.269,24,1.15,33,0.58,42,1.015,47,0.674,49,1.251,50,0.629,51,0.025,52,0.57,53,0.221,54,0.549,57,0.564,58,0.877,93,3.097,94,1.17,96,2.885,97,3.017,103,0.473,112,0.886,126,1.693,149,4.51,151,0.422,152,0.512,185,0.016,186,0.02,187,0.016,188,3.19,189,5.013,190,3.437,191,3.132,192,4.804,193,5.666,194,3.19,195,5.666,196,4.922,197,5.666,198,4.109,199,4.598,200,5.818,201,4.598,202,4.236,203,6.142,204,5.685,205,4.598,206,4.598,207,5.666,208,4.598,209,4.804,210,5.666,211,4.598,212,6.412,213,0.817,214,4.598,215,4.598,216,4.598,217,4.598,218,4.598]],["title/interfaces/AnimationPreset.html",[219,1.552,220,2.32]],["body/interfaces/AnimationPreset.html",[0,0.187,3,0.152,4,0.132,5,0.094,6,0.91,8,0.704,9,0.172,11,1.134,12,1.217,13,0.973,16,0.094,17,0.47,20,0.986,24,0.972,29,2.063,42,0.778,44,1.822,45,2.134,49,0.511,51,0.026,53,0.185,54,0.398,55,1.217,58,0.284,59,0.882,69,1.219,71,0.945,73,1.042,77,1.835,79,2.258,84,0.973,85,1.386,88,0.582,90,0.973,92,0.973,93,1.119,94,1.061,96,2.311,97,2.609,98,2.617,101,0.75,103,0.294,107,1.054,112,0.912,117,1.138,120,1.419,121,0.853,133,2.872,134,0.536,135,0.447,136,1.304,148,1.703,151,0.262,152,0.573,161,0.309,168,1.868,169,1.419,173,3.192,185,0.008,186,0.012,187,0.008,194,1.304,209,1.964,213,0.955,219,1.042,220,2.872,221,1.419,222,1.731,223,4.606,224,2.161,225,5.625,226,5.41,227,3.774,228,2.161,229,3.995,230,0.865,231,4.528,232,5.581,233,1.217,234,5.939,235,2.404,236,5.773,237,3.526,238,1.985,239,3.62,240,2.161,241,2.311,242,2.636,243,2.636,244,1.964,245,4.915,246,1.985,247,2.636,248,2.989,249,1.964,250,3.21,251,1.217,252,2.404,253,2.316,254,1.964,255,1.794,256,1.337,257,2.989,258,1.419,259,0.704,260,2.316,261,2.316,262,3.526,263,2.316,264,1.964,265,1.835,266,2.316,267,2.161,268,0.866,269,2.316,270,2.872,271,2.316,272,2.872,273,2.316,274,3.454,275,2.316,276,2.316,277,4.205,278,1.119,279,2.161,280,2.636,281,5.736,282,3.62,283,1.964,284,1.985,285,2.316,286,2.316,287,2.372,288,1.419,289,1.558,290,2.316,291,1.782,292,2.316,293,2.316,294,2.316,295,3.192,296,2.316,297,3.526,298,1.964,299,2.372,300,2.372,301,1.964,302,1.119,303,2.316,304,2.316,305,2.316,306,2.316,307,2.316,308,2.316,309,2.316,310,4.354,311,4.354,312,5.642,313,3.839,314,4.354,315,5.798,316,2.484,317,2.316,318,3.526,319,2.316,320,2.316,321,1.205,322,4.27,323,2.316,324,3.526,325,2.316,326,4.27,327,4.773,328,2.316,329,1.731,330,2.316,331,5.136,332,2.316,333,1.481,334,2.372,335,3.526,336,4.773,337,3.454,338,2.316,339,1.119,340,1.921,341,3.526,342,4.046,343,1.419,344,4.773,345,2.316,346,1.964,347,2.316,348,3.526,349,4.27,350,1.419,351,3.526,352,3.526,353,2.316,354,2.316,355,3.526,356,2.316,357,2.316,358,2.316,359,2.316,360,1.119,361,1.731,362,2.316,363,3.526,364,2.316,365,2.316,366,2.316,367,1.558,368,2.316,369,2.316,370,2.316,371,2.316,372,1.731,373,1.731,374,1.731,375,3.526,376,2.316,377,2.316,378,2.316,379,3.526,380,2.316,381,1.304,382,2.316,383,2.316,384,2.484,385,2.636,386,2.316,387,2.316,388,2.316,389,2.316,390,2.316,391,2.316,392,1.419,393,2.372,394,1.964,395,2.316,396,2.316,397,2.316,398,2.316,399,3.526,400,1.964,401,2.316,402,2.316,403,2.316,404,2.316,405,2.316,406,2.316,407,3.526,408,2.316,409,2.316,410,2.316,411,2.316,412,2.316,413,2.316,414,2.316,415,2.316,416,2.316,417,2.316,418,2.316,419,2.316,420,2.316,421,2.316,422,2.316,423,2.316,424,2.316,425,2.316,426,3.526,427,4.27,428,2.316,429,2.316,430,2.316,431,1.964,432,2.316,433,1.558,434,2.316,435,3.64,436,4.915,437,4.27,438,3.526,439,2.989,440,3.526,441,2.316,442,2.316,443,4.773,444,1.964,445,2.316,446,2.372,447,4.27,448,1.419,449,2.316,450,1.304,451,3.526,452,3.526,453,2.316,454,2.316,455,2.316,456,2.316,457,2.316,458,2.316,459,2.316,460,1.964,461,1.731,462,3.526,463,2.316,464,1.042,465,1.731,466,2.316,467,1.964,468,5.798,469,4.044,470,3.526,471,1.119,472,4.27,473,2.316,474,4.27,475,2.316,476,3.526,477,1.964,478,2.316,479,2.316,480,3.526,481,3.526,482,1.985,483,3.526,484,2.316,485,3.526,486,2.316,487,2.316,488,2.316,489,2.316,490,2.316,491,2.316,492,2.316,493,2.316,494,2.316,495,2.316,496,2.316,497,2.316,498,3.62,499,3.526,500,2.316,501,2.316,502,2.316,503,4.773,504,2.316,505,2.316,506,2.316,507,1.731,508,1.304,509,3.526,510,2.316,511,1.964,512,2.316,513,1.964,514,2.316,515,1.964,516,2.316,517,3.526,518,2.306,519,2.161,520,3.526,521,2.316,522,1.558,523,2.316,524,2.316,525,2.316,526,3.526,527,2.316,528,2.316,529,2.316,530,3.526,531,2.316,532,3.526,533,2.316,534,2.316,535,2.316,536,2.316,537,2.316]],["title/classes/CMSObjects.html",[0,0.279,538,2.32]],["body/classes/CMSObjects.html",[0,0.362,2,0.415,3,0.294,4,0.256,5,0.183,9,0.415,16,0.183,18,2.095,24,0.75,33,0.57,47,0.458,50,0.669,51,0.025,52,0.415,53,0.147,54,0.373,59,1.151,68,3.346,69,1.591,80,0.697,85,2.19,103,0.465,117,0.75,134,0.626,135,0.864,143,1.805,151,0.333,152,0.373,161,0.596,168,1.924,169,3.415,185,0.016,186,0.019,187,0.016,213,0.993,230,0.742,240,3.415,242,4.166,243,4.166,246,3.417,247,4.166,255,2.341,268,0.816,287,3.011,300,3.011,340,2.508,392,3.415,482,3.138,538,3.749,539,4.725,540,3.346,541,2.9,542,2.508,543,4.725,544,3.749,545,3.415,546,5.573,547,5.573,548,4.476,549,3.415,550,5.648,551,6.662,552,6.069,553,4.476,554,4.725,555,5.573,556,4.725,557,3.011,558,3.795,559,3.795,560,5.573,561,4.476,562,4.476,563,4.476,564,4.476,565,4.476,566,4.476,567,5.573,568,6.069,569,6.069,570,5.573,571,6.069,572,6.069,573,3.346,574,5.573,575,6.069,576,6.069,577,5.573,578,6.069,579,6.069,580,5.573,581,3.795,582,5.573,583,3.795,584,3.346,585,5.573,586,4.476,587,4.476,588,4.476,589,4.476,590,4.476,591,4.476,592,3.011,593,4.476,594,4.476,595,3.011,596,4.476,597,6.069,598,3.346,599,3.795,600,4.476,601,5.573,602,4.476,603,4.476,604,3.795,605,4.476,606,4.476,607,4.476,608,4.476,609,4.476]],["title/classes/ColorManager.html",[0,0.279,610,2.32]],["body/classes/ColorManager.html",[0,0.315,2,0.361,3,0.255,4,0.222,5,0.159,6,2.524,8,1.183,9,0.478,11,1.445,12,1.76,16,0.159,24,1.125,33,0.522,42,0.859,44,2.081,47,0.641,49,1.125,50,0.641,51,0.026,52,0.64,53,0.206,54,0.522,55,2.082,56,0.859,58,0.739,69,1.721,76,3.123,80,1.07,85,2.003,94,1.174,101,1.651,103,0.503,112,0.903,117,0.652,134,0.572,135,0.751,136,3.685,151,0.29,152,0.554,154,3.3,168,2.467,185,0.014,186,0.018,187,0.014,230,0.803,251,1.76,255,2.821,256,1.331,259,1.55,268,0.83,333,2.141,339,2.462,448,2.385,450,3.2,604,3.3,610,3.428,611,3.936,612,4.056,613,3.428,614,5.097,615,5.683,616,5.097,617,3.892,618,3.892,619,3.81,620,5.097,621,3.3,622,4.056,623,2.913,624,2.886,625,3.406,626,5.097,627,3.428,628,5.097,629,3.892,630,3.81,631,3.892,632,5.112,633,6.03,634,4.321,635,2.909,636,5.097,637,3.428,638,5.097,639,5.097,640,5.097,641,3.428,642,5.097,643,3.892,644,5.097,645,3.123,646,4.321,647,3.892,648,3.892,649,3.892,650,3.892,651,3.892,652,5.097,653,5.097,654,5.097,655,5.097,656,3.81,657,5.097,658,5.097,659,5.097,660,3.892,661,3.892,662,3.892,663,3.892,664,3.892,665,5.097,666,5.097,667,3.3,668,2.909,669,3.892,670,3.892,671,3.892,672,3.892,673,3.892,674,3.892,675,3.892]],["title/classes/ColorOptions.html",[0,0.279,676,2.32]],["body/classes/ColorOptions.html",[0,0.202,2,0.231,3,0.164,4,0.142,5,0.102,9,0.394,11,0.985,12,1.286,16,0.102,17,0.496,20,1.469,33,0.381,42,0.823,47,0.681,49,0.823,50,0.632,51,0.026,52,0.595,53,0.215,54,0.413,55,1.286,56,0.55,57,0.707,58,0.828,59,1.095,61,1.566,66,1.274,69,1.848,71,1.653,73,1.121,76,3.035,80,0.866,85,1.754,88,0.937,92,2.081,103,0.529,107,0.55,112,0.89,117,0.748,126,0.918,134,0.556,135,0.719,151,0.277,152,0.481,161,0.66,168,2.474,185,0.009,186,0.013,187,0.009,230,0.807,235,2.098,255,2.081,256,1.362,259,1.506,268,0.607,291,1.73,302,1.204,333,1.566,339,2.156,343,1.527,450,3.247,508,2.098,519,1.527,610,3.878,611,4.12,612,3.002,613,3.331,624,2.337,625,2.323,630,1.863,634,3.159,645,3.035,676,2.506,677,3.482,678,1.676,679,2.119,680,4.463,681,4.463,682,3.784,683,4.463,684,4.463,685,4.463,686,4.953,687,4.953,688,4.953,689,3.726,690,3.726,691,4.953,692,4.953,693,4.953,694,4.953,695,3.726,696,2.492,697,4.953,698,2.688,699,4.953,700,4.31,701,2.492,702,2.098,703,0.998,704,3.159,705,4.716,706,2.382,707,4.199,708,3.785,709,3.726,710,3.027,711,3.726,712,4.423,713,3.726,714,4.716,715,3.843,716,4.953,717,3.726,718,3.726,719,3.159,720,3.726,721,2.492,722,3.159,723,6.172,724,2.492,725,4.31,726,2.492,727,2.492,728,3.002,729,2.506,730,2.492,731,1.643,732,2.156,733,5.302,734,3.784,735,2.393,736,3.726,737,2.492,738,3.726,739,2.492,740,3.331,741,3.249,742,2.492,743,2.492,744,2.492,745,3.726,746,2.492,747,3.702,748,3.726,749,3.336,750,4.495,751,4.495,752,4.463,753,5.302,754,4.463,755,3.726,756,2.492,757,5.302,758,2.081,759,2.492,760,2.492,761,2.492,762,2.492,763,2.786,764,3.726,765,5.928,766,2.492,767,3.726,768,3.726,769,1.403,770,1.863,771,1.676,772,1.403,773,1.527,774,2.113,775,3.566,776,4.953,777,2.492,778,2.492,779,2.492,780,4.463,781,2.337,782,2.492,783,1.677,784,4.495,785,2.492,786,2.492,787,1.863,788,2.492,789,2.113,790,2.492,791,2.492,792,2.492,793,2.492,794,2.492,795,2.492,796,2.492,797,3.726,798,5.563,799,2.492,800,2.492,801,2.492,802,3.726,803,3.726,804,2.492,805,2.492,806,2.492,807,2.492,808,3.726,809,2.492,810,4.463,811,4.463,812,3.726,813,1.676,814,1.676,815,2.113,816,1.863,817,1.527,818,2.113,819,2.113,820,2.492,821,2.492,822,2.492,823,2.492,824,2.492,825,4.463,826,3.726,827,3.726,828,2.113,829,3.726,830,3.726,831,3.726,832,2.492,833,2.492,834,2.492,835,2.492,836,2.492,837,1.121,838,2.492,839,2.113,840,2.492,841,2.492,842,2.492,843,2.492,844,3.726,845,3.159,846,2.492]],["title/interfaces/Configuration.html",[219,1.552,847,1.191]],["body/interfaces/Configuration.html",[3,0.299,4,0.26,5,0.186,9,0.339,16,0.186,17,0.75,45,2.074,51,0.025,53,0.229,54,0.593,56,1.477,57,0.82,59,1.163,61,2.684,62,3.451,66,1.608,80,1.022,117,1.025,134,0.687,143,1.824,151,0.339,165,2.931,185,0.016,186,0.02,187,0.016,219,2.048,221,2.79,224,3.748,230,0.926,233,1.944,256,1.45,619,4.21,679,1.713,698,3.087,731,2.417,732,2.954,772,2.563,847,2.206,848,3.86,849,2.206,850,6.39,851,6.39,852,5.417,853,4.298,854,6.39,855,4.198,856,5.417,857,6.39,858,4.21,859,3.325,860,2.074,861,4.21,862,3.451,863,4.775,864,2.721,865,3.788,866,3.171,867,2.721,868,2.569,869,3.451,870,2.721,871,4.298,872,4.21,873,5.632,874,4.553,875,4.553,876,3.403,877,2.563,878,4.553,879,4.553]],["title/classes/CoordinateHelper.html",[0,0.279,880,1.942]],["body/classes/CoordinateHelper.html",[0,0.295,2,0.338,3,0.239,4,0.208,5,0.149,9,0.469,16,0.149,18,2.404,24,1.027,33,0.601,47,0.645,50,0.678,51,0.025,52,0.568,53,0.202,54,0.511,56,0.804,71,1.474,103,0.559,117,1.199,134,0.409,135,0.703,151,0.271,152,0.546,161,0.84,185,0.013,186,0.017,187,0.013,213,0.909,241,2.897,268,0.789,270,3.952,272,3.7,274,3.7,284,3.308,289,2.45,291,1.799,295,5.005,299,4.503,301,3.088,367,3.952,381,3.097,392,2.99,444,5.344,637,3.281,813,3.281,837,1.639,880,2.747,881,5.458,882,2.723,883,2.99,884,4.391,885,4.879,886,4.879,887,5.875,888,5.5,889,4.879,890,4.663,891,4.879,892,3.643,893,4.28,894,3.643,895,4.879,896,4.879,897,4.879,898,4.879,899,4.313,900,3.643,901,5.5,902,3.643,903,5.618,904,4.136,905,4.136,906,4.879,907,3.647,908,3.647,909,2.747,910,3.643,911,4.711,912,3.643,913,5.875,914,4.879,915,5.875,916,5.875,917,5.875,918,6.304,919,4.879,920,5.875,921,6.801,922,4.879,923,3.643,924,5.547,925,4.981,926,5.875,927,4.981,928,5.875,929,5.875,930,3.643,931,3.643,932,4.879,933,3.643,934,4.879,935,3.643,936,3.643,937,3.643,938,4.879,939,3.647,940,4.879,941,4.981,942,4.879,943,4.879,944,3.643,945,3.643,946,5.875,947,4.879,948,3.088,949,4.136,950,3.088,951,3.643,952,3.643,953,3.088,954,3.643,955,3.643,956,3.643,957,3.643,958,3.643,959,3.643]],["title/classes/Cut.html",[0,0.279,960,1.795]],["body/classes/Cut.html",[0,0.353,2,0.405,3,0.286,4,0.249,5,0.178,9,0.408,16,0.178,17,0.731,20,1.367,24,1.17,33,0.561,42,1.211,47,0.696,49,1.211,50,0.447,51,0.025,52,0.584,53,0.221,54,0.364,57,0.823,58,0.867,71,1.47,80,0.98,103,0.364,112,0.629,117,1.186,151,0.325,152,0.525,185,0.015,186,0.019,187,0.015,194,3.378,230,0.943,235,3.378,256,1.562,302,3.312,750,5.696,751,5.696,960,3.496,961,3.7,962,3.7,963,3.7,964,5.29,965,5.999,966,5.999,967,4.362,968,5.696,969,5.696,970,4.057,971,4.364,972,5.485,973,3.69,974,5.999,975,6.905,976,4.364,977,4.364,978,4.364,979,4.364,980,4.364,981,4.364,982,5.485,983,5.485,984,4.364,985,4.364]],["title/classes/DatGUIMenuUI.html",[0,0.279,986,2.579]],["body/classes/DatGUIMenuUI.html",[0,0.323,2,0.193,3,0.137,4,0.119,5,0.085,9,0.428,11,0.996,12,1.934,13,1.896,16,0.133,17,0.433,20,1.398,24,1.131,33,0.333,42,0.46,44,1.462,47,0.666,49,0.882,50,0.573,51,0.026,52,0.611,53,0.223,54,0.467,55,1.122,56,1.27,57,0.6,58,0.766,59,1.216,61,1.365,68,1.557,69,1.762,71,0.87,73,0.937,77,2.079,79,1.934,80,1.035,88,1.303,90,2.353,94,0.825,103,0.5,107,0.46,112,0.865,117,0.67,126,1.661,134,0.549,135,1.111,136,1.173,151,0.155,152,0.531,161,0.532,166,1.557,168,2.313,180,2.429,182,1.557,185,0.007,186,0.011,187,0.007,213,0.706,230,0.907,251,1.122,256,1.513,259,1.372,267,1.276,268,0.832,270,3.035,272,3.035,274,3.291,287,3.487,288,2.765,289,3.767,291,1.48,321,1.691,333,2.178,340,2.91,343,1.991,384,2.698,393,2.185,464,2.436,471,1.57,482,1.173,508,3.429,522,2.185,542,1.462,584,1.557,613,3.035,624,2.472,625,2.348,677,3.408,679,1.576,702,3.908,703,1.577,731,2.499,735,2.504,781,2.559,783,2.741,817,1.276,847,1.558,853,2.185,864,2.504,865,3.035,866,1.829,867,3.311,868,1.365,904,2.754,907,3.875,960,2.546,968,1.766,969,1.766,973,2.185,986,2.429,987,5.552,988,5.223,989,1.557,990,1.829,991,2.706,992,3.386,993,3.386,994,3.994,995,3.386,996,3.994,997,3.994,998,3.994,999,2.986,1000,3.825,1001,2.754,1002,3.386,1003,3.825,1004,2.754,1005,2.754,1006,4.512,1007,4.59,1008,3.249,1009,3.249,1010,2.541,1011,3.249,1012,1.691,1013,2.348,1014,2.083,1015,2.083,1016,2.919,1017,2.083,1018,3.249,1019,3.606,1020,1.766,1021,2.083,1022,5.184,1023,2.083,1024,5.184,1025,2.083,1026,1.766,1027,3.733,1028,2.083,1029,3.373,1030,3.642,1031,3.376,1032,2.083,1033,2.429,1034,2.754,1035,4.148,1036,2.754,1037,2.083,1038,2.986,1039,3.825,1040,1.766,1041,3.657,1042,2.083,1043,2.185,1044,2.429,1045,2.429,1046,2.083,1047,2.754,1048,2.083,1049,3.373,1050,3.035,1051,2.754,1052,2.083,1053,3.386,1054,2.754,1055,2.083,1056,2.754,1057,3.249,1058,5.414,1059,2.083,1060,3.249,1061,2.083,1062,2.185,1063,1.557,1064,1.766,1065,1.006,1066,2.083,1067,2.083,1068,2.083,1069,2.083,1070,2.083,1071,1.766,1072,1.276,1073,1.766,1074,2.083,1075,4.395,1076,4.148,1077,4.748,1078,2.083,1079,2.083,1080,2.083,1081,2.083,1082,2.429,1083,3.875,1084,4.512,1085,2.083,1086,3.249,1087,5.414,1088,5.755,1089,2.083,1090,4.148,1091,4.148,1092,2.083,1093,3.249,1094,1.766,1095,2.083,1096,2.083,1097,2.083,1098,1.766,1099,2.083,1100,2.083,1101,3.249,1102,3.249,1103,2.083,1104,4.748,1105,2.083,1106,3.249,1107,4.512,1108,2.083,1109,3.994,1110,3.249,1111,1.766,1112,5.184,1113,2.083,1114,2.083,1115,2.083,1116,1.766,1117,2.083,1118,3.994,1119,3.249,1120,1.766,1121,1.401,1122,2.083,1123,2.083,1124,2.083,1125,2.083,1126,2.083,1127,2.083,1128,3.249,1129,2.083,1130,3.994,1131,2.083,1132,3.249,1133,2.083,1134,2.083,1135,3.249,1136,2.083,1137,2.083,1138,2.083,1139,1.173,1140,2.083,1141,2.083,1142,2.083,1143,2.083,1144,1.766,1145,1.557,1146,2.083,1147,0.937,1148,2.083,1149,2.083,1150,2.083,1151,3.994,1152,3.249,1153,2.083,1154,2.083,1155,2.083,1156,1.766,1157,2.083,1158,1.766,1159,2.083,1160,2.083,1161,1.766,1162,2.083,1163,2.083,1164,3.249,1165,2.083,1166,3.249,1167,2.083,1168,4.512,1169,2.083,1170,3.994,1171,1.766,1172,1.766,1173,2.083,1174,2.083,1175,2.083,1176,2.083,1177,4.512,1178,2.083,1179,2.083,1180,2.083,1181,3.249,1182,2.754,1183,2.754,1184,2.083,1185,3.249,1186,2.083,1187,2.754,1188,2.083,1189,2.083,1190,2.083,1191,1.557,1192,1.766,1193,1.766,1194,2.754,1195,2.754,1196,2.083,1197,2.083,1198,1.766,1199,3.249,1200,3.249,1201,4.512,1202,2.083,1203,2.083,1204,2.083,1205,2.083,1206,2.083,1207,2.083,1208,2.083,1209,2.083,1210,2.083,1211,2.083,1212,4.512,1213,2.083,1214,2.083,1215,2.083,1216,2.083,1217,2.083,1218,2.083,1219,2.083,1220,2.083,1221,1.766,1222,2.083,1223,2.083,1224,2.083,1225,2.083,1226,2.083,1227,2.083]],["title/classes/EffectsManager.html",[0,0.279,1228,2.32]],["body/classes/EffectsManager.html",[0,0.272,2,0.311,3,0.22,4,0.192,5,0.137,6,2.656,8,1.02,9,0.458,11,1.254,16,0.137,17,0.615,20,1.412,24,1.16,29,3.101,33,0.472,42,1.164,44,2.329,45,2.635,47,0.687,50,0.609,51,0.025,52,0.552,53,0.219,54,0.497,55,1.961,56,1.314,57,0.816,58,0.411,59,0.953,61,2.386,71,0.899,94,1.173,99,3.48,101,1.708,103,0.513,110,2.591,112,0.859,134,0.669,135,0.648,151,0.25,152,0.543,161,0.447,185,0.012,186,0.016,187,0.012,213,0.819,230,0.915,251,1.593,268,0.566,329,4.245,334,3.82,464,2.076,623,3.101,635,2.508,710,2.229,849,2.371,1062,3.104,1228,3.104,1229,5.73,1230,5.017,1231,4.245,1232,5.822,1233,3.912,1234,3.912,1235,5.522,1236,6.759,1237,5.273,1238,4.619,1239,5.679,1240,4.614,1241,4.614,1242,4.614,1243,4.614,1244,4.614,1245,3.104,1246,3.912,1247,5.679,1248,3.449,1249,3.82,1250,4.245,1251,2.056,1252,5.273,1253,2.508,1254,6.592,1255,5.273,1256,2.845,1257,3.449,1258,4.614,1259,4.711,1260,2.508,1261,3.356,1262,4.814,1263,4.814,1264,4.245,1265,5.442,1266,4.614,1267,3.356,1268,4.614,1269,2.845,1270,4.614,1271,3.356,1272,4.614,1273,2.845,1274,3.356,1275,2.845,1276,4.614,1277,3.356,1278,3.356,1279,3.356,1280,4.614,1281,3.356,1282,4.471,1283,3.912,1284,3.356,1285,3.356,1286,3.356,1287,2.257,1288,4.614,1289,5.273,1290,4.614,1291,4.614,1292,3.356,1293,3.356,1294,3.356,1295,3.356,1296,3.356,1297,2.845,1298,3.356,1299,3.356,1300,3.356,1301,3.356,1302,3.356,1303,3.356,1304,3.356]],["title/interfaces/EventDataLoader.html",[219,1.552,855,2.114]],["body/interfaces/EventDataLoader.html",[3,0.367,4,0.215,5,0.154,9,0.461,11,1.405,16,0.228,33,0.51,47,0.664,50,0.609,51,0.025,52,0.552,53,0.204,54,0.497,69,2.019,80,1.091,88,1.657,103,0.579,112,0.719,117,0.937,121,1.836,125,2.595,134,0.628,151,0.28,152,0.557,185,0.013,186,0.017,187,0.013,219,1.694,221,2.308,228,3.056,230,0.951,233,1.3,235,2.808,255,2.769,256,1.525,321,2.91,541,2.595,544,3.355,623,2.409,624,2.926,625,2.595,627,4.004,645,3.056,703,1.595,706,2.198,749,3.728,758,2.095,773,3.648,781,2.803,817,3.056,849,1.722,855,3.056,864,2.409,868,2.095,876,2.815,909,2.808,991,3.074,1010,3.352,1012,3.505,1013,3.098,1016,2.808,1019,3.9,1050,3.355,1147,2.244,1305,5.588,1306,2.308,1307,4.988,1308,4.988,1309,4.741,1310,4.741,1311,4.228,1312,4.45,1313,4.45,1314,4.228,1315,5.047,1316,3.193,1317,4.45,1318,3.766,1319,3.193,1320,4.45,1321,4.004,1322,3.43,1323,3.766,1324,4.757,1325,3.728,1326,4.228,1327,4.988,1328,3.728,1329,3.355,1330,3.728,1331,4.228,1332,3.728,1333,4.228,1334,3.761,1335,3.355,1336,3.728,1337,3.766,1338,4.228,1339,4.228,1340,3.766,1341,2.808,1342,3.648,1343,4.228,1344,5.395,1345,3.766,1346,4.004,1347,3.355,1348,4.228,1349,3.766,1350,4.228,1351,4.433,1352,3.728,1353,3.355,1354,3.766,1355,3.193,1356,2.815]],["title/classes/ExportManager.html",[0,0.279,1357,2.579]],["body/classes/ExportManager.html",[0,0.306,2,0.351,3,0.248,4,0.216,5,0.229,6,2.504,8,1.15,9,0.474,11,1.104,12,1.727,16,0.154,20,1.379,24,1.068,33,0.512,44,2.3,47,0.635,50,0.635,51,0.025,52,0.575,53,0.204,54,0.517,66,1.702,90,2.102,92,2.928,103,0.517,112,0.722,134,0.67,135,0.73,151,0.417,152,0.55,161,0.747,185,0.021,186,0.017,187,0.013,213,0.722,230,0.911,246,3.923,251,1.727,256,1.488,258,3.066,268,0.843,321,3.536,624,1.59,668,2.828,837,1.702,847,2.278,860,1.842,1016,3.992,1139,2.817,1251,2.319,1329,3.365,1357,3.74,1358,5.402,1359,5.605,1360,5.003,1361,5.003,1362,5.003,1363,5.003,1364,3.784,1365,2.828,1366,5.056,1367,3.655,1368,4.242,1369,4.242,1370,4.242,1371,3.74,1372,5.964,1373,3.948,1374,5.003,1375,5.003,1376,3.784,1377,3.588,1378,5.003,1379,3.784,1380,5.003,1381,3.208,1382,3.74,1383,5.003,1384,5.003,1385,3.784,1386,5.003,1387,3.784,1388,2.545,1389,3.208,1390,3.784,1391,5.605,1392,3.784,1393,3.784,1394,3.784,1395,5.003,1396,5.964,1397,3.784,1398,2.545,1399,2.545,1400,3.208,1401,2.828,1402,4.242,1403,3.784,1404,3.784,1405,3.208,1406,3.784,1407,3.784,1408,3.784,1409,5.964,1410,3.784,1411,5.964,1412,3.784,1413,3.208,1414,3.784,1415,3.784,1416,3.784,1417,3.784,1418,3.784,1419,3.784,1420,3.784,1421,3.784]],["title/classes/Field.html",[0,0.279,967,2.32]],["body/classes/Field.html",[0,0.447,2,0.341,3,0.242,4,0.21,5,0.15,9,0.274,13,1.547,16,0.15,17,0.49,18,2.037,33,0.503,47,0.377,50,0.377,51,0.026,52,0.341,53,0.121,54,0.307,56,0.813,57,0.451,59,1.015,71,0.986,79,2.183,88,0.925,94,0.76,103,0.528,107,0.813,117,1.142,121,1.355,134,0.413,135,0.711,143,1.591,148,1.778,151,0.274,152,0.547,161,0.654,185,0.017,186,0.017,187,0.013,198,2.256,213,0.531,238,2.073,241,3.17,252,2.073,265,2.877,267,2.256,268,0.829,278,1.778,279,3.389,302,3.055,316,1.916,350,3.615,360,1.778,446,3.304,471,2.671,518,1.778,708,2.766,715,3.113,735,1.778,758,2.064,814,2.476,837,2.845,967,3.968,990,2.073,1287,3.304,1422,3.304,1423,2.476,1424,3.121,1425,3.681,1426,3.681,1427,3.681,1428,3.672,1429,4.512,1430,4.512,1431,1.916,1432,2.537,1433,2.752,1434,2.752,1435,2.752,1436,3.968,1437,3.615,1438,2.752,1439,2.752,1440,2.752,1441,4.134,1442,2.752,1443,2.752,1444,2.752,1445,2.752,1446,4.41,1447,4.133,1448,3.672,1449,3.672,1450,4.825,1451,4.902,1452,4.41,1453,3.615,1454,2.752,1455,2.752,1456,2.752,1457,4.964,1458,2.752,1459,2.476,1460,4.902,1461,2.752,1462,2.752,1463,4.595,1464,5.014,1465,2.752,1466,4.825,1467,2.752,1468,2.752,1469,2.752,1470,3.672,1471,2.752,1472,3.672,1473,4.133,1474,2.752,1475,2.752,1476,2.752,1477,2.752,1478,2.752,1479,2.752,1480,2.752,1481,2.752,1482,2.752,1483,2.752,1484,2.752,1485,2.752,1486,2.752,1487,2.752,1488,2.752,1489,2.752,1490,2.073,1491,2.752,1492,4.133,1493,3.672,1494,2.752,1495,4.133,1496,2.476,1497,4.133,1498,3.672,1499,2.752,1500,2.752,1501,2.752,1502,2.752,1503,2.752,1504,2.752,1505,2.752,1506,2.752,1507,2.752,1508,2.752,1509,2.752,1510,3.672,1511,3.672,1512,3.672,1513,4.133,1514,2.766,1515,4.133,1516,3.672,1517,2.256,1518,3.304,1519,2.476,1520,2.256,1521,2.256,1522,3.672,1523,2.752,1524,2.752,1525,2.752,1526,2.752,1527,2.752,1528,2.752,1529,2.752]],["title/classes/InfoLogger.html",[0,0.279,1322,1.795]],["body/classes/InfoLogger.html",[0,0.379,2,0.434,3,0.467,4,0.267,5,0.191,9,0.426,16,0.191,17,0.763,20,1.391,33,0.587,47,0.66,50,0.479,51,0.025,52,0.434,53,0.204,54,0.391,57,0.702,58,0.702,73,2.578,80,1.049,88,1.44,103,0.517,110,2.252,112,0.675,117,0.961,126,1.724,151,0.348,152,0.478,161,0.624,185,0.016,186,0.02,187,0.016,230,0.624,256,1.532,623,2.768,703,1.729,735,2.768,781,2.866,849,1.617,1322,2.982,1334,4.667,1335,3.15,1342,4.128,1353,3.854,1530,5.612,1531,3.97,1532,6.192,1533,6.192,1534,6.452,1535,4.683,1536,4.858,1537,4.683,1538,5.73,1539,5.73,1540,3.854,1541,4.284,1542,5.73,1543,4.683,1544,5.73,1545,5.035,1546,4.683,1547,4.858,1548,3.854,1549,4.683,1550,4.683,1551,4.683,1552,4.683,1553,4.683]],["title/classes/LHCbLoader.html",[0,0.279,1554,2.579]],["body/classes/LHCbLoader.html",[0,0.244,2,0.279,3,0.281,4,0.172,5,0.123,9,0.49,11,0.944,12,1.476,14,3.197,16,0.174,17,0.57,20,1.347,24,1.154,26,4.499,33,0.438,42,1.263,47,0.711,50,0.68,51,0.025,52,0.616,53,0.232,54,0.544,55,1.039,56,1.196,57,0.61,58,0.61,59,0.883,66,1.42,69,1.982,77,2.977,80,1.068,85,2.403,86,5.127,88,1.57,92,1.265,94,1.263,96,1.354,101,1.385,103,0.565,107,0.944,112,0.917,117,0.834,125,1.566,126,1.574,134,0.338,143,1.98,151,0.224,152,0.251,185,0.01,186,0.015,187,0.01,228,1.845,230,0.944,233,1.476,246,1.695,255,2.74,256,1.54,259,1.3,268,0.61,291,0.859,321,2.977,333,2.403,367,2.025,384,2.588,465,2.25,541,1.566,544,2.025,545,1.845,549,3.895,550,4.217,623,1.454,624,2.828,625,2.588,627,2.876,641,2.876,645,1.845,679,1.512,698,1.454,702,1.695,703,1.333,706,1.183,731,1.831,741,2.621,758,1.265,781,2.569,817,1.845,847,1.476,849,1.476,864,1.454,867,2.066,868,2.497,869,2.621,870,2.616,909,1.695,927,2.552,960,2.225,963,2.552,990,2.408,991,2.954,999,3.197,1010,2.801,1012,2.225,1013,2.225,1016,1.695,1019,3.319,1027,2.621,1029,3.197,1030,2.876,1038,3.197,1043,3.346,1050,2.025,1147,1.924,1306,1.845,1309,3.625,1310,3.625,1311,3.625,1312,3.718,1313,3.718,1314,3.625,1315,4.217,1316,2.552,1317,3.197,1319,2.552,1320,4.048,1321,3.346,1322,2.818,1324,3.197,1325,2.25,1326,2.552,1328,2.25,1329,2.025,1330,2.25,1331,2.552,1332,2.25,1333,2.552,1335,2.025,1336,2.25,1341,3.346,1342,3.506,1346,2.876,1347,2.025,1348,2.552,1352,2.25,1353,3.346,1367,1.845,1371,2.25,1453,2.621,1540,2.025,1541,2.25,1548,3.346,1554,3.197,1555,4.85,1556,4.682,1557,5.721,1558,4.276,1559,2.801,1560,2.801,1561,5.416,1562,4.276,1563,4.276,1564,3.625,1565,4.276,1566,4.276,1567,4.276,1568,5.721,1569,3.01,1570,3.01,1571,3.01,1572,3.01,1573,3.01,1574,3.197,1575,3.625,1576,3.01,1577,3.01,1578,3.01,1579,3.01,1580,3.01,1581,2.25,1582,4.276,1583,3.01,1584,2.408,1585,3.01,1586,5.416,1587,4.276,1588,5.416,1589,3.01,1590,3.01,1591,3.01,1592,2.552,1593,4.276,1594,4.276,1595,2.552,1596,3.625,1597,4.276,1598,4.974,1599,3.01,1600,3.01,1601,4.276,1602,3.01,1603,3.01,1604,3.718,1605,3.718,1606,3.01,1607,2.552,1608,3.01,1609,3.625,1610,4.276,1611,3.01,1612,3.01,1613,2.552,1614,3.01,1615,3.01,1616,3.01,1617,3.01,1618,5.721,1619,3.01,1620,3.01,1621,2.552,1622,3.01,1623,3.01,1624,3.01,1625,2.552,1626,3.01,1627,2.552,1628,3.01,1629,3.01,1630,3.01,1631,3.01,1632,3.01,1633,3.01,1634,2.552,1635,2.552,1636,3.01,1637,3.01,1638,3.01,1639,4.276,1640,3.01,1641,2.552,1642,3.01,1643,2.552,1644,3.01,1645,3.01,1646,4.276,1647,3.01,1648,3.625]],["title/classes/LoadingManager.html",[0,0.279,1559,1.942]],["body/classes/LoadingManager.html",[0,0.275,2,0.315,3,0.223,4,0.194,5,0.138,8,1.032,9,0.47,11,1.421,16,0.138,17,0.62,18,1.831,20,1.389,24,1.186,33,0.476,42,1.171,47,0.697,49,1.027,50,0.632,51,0.026,52,0.573,53,0.223,54,0.515,57,0.775,58,0.775,66,1.514,74,3.128,80,1.061,94,1.235,96,3.081,97,2.973,103,0.537,112,0.988,117,1.06,147,4.273,151,0.253,152,0.527,161,0.452,185,0.012,186,0.016,187,0.012,196,4.266,233,1.172,235,2.619,251,1.172,268,0.699,291,1.514,339,2.247,342,4.838,433,4.645,703,1.77,706,1.334,729,4.153,783,1.527,860,2.273,864,3.248,870,3.192,970,3.783,1031,2.619,1251,2.08,1260,2.537,1373,3.915,1559,3.213,1574,3.966,1649,5.804,1650,5.305,1651,5.305,1652,5.305,1653,5.305,1654,4.651,1655,4.651,1656,4.651,1657,4.651,1658,4.651,1659,4.651,1660,3.943,1661,3.395,1662,3.395,1663,4.651,1664,5.875,1665,3.395,1666,4.651,1667,2.878,1668,4.651,1669,2.537,1670,5.457,1671,4.651,1672,3.395,1673,4.651,1674,2.878,1675,4.651,1676,3.395,1677,4.651,1678,3.395,1679,4.651,1680,2.878,1681,5.305,1682,3.395,1683,4.651,1684,3.395,1685,3.395,1686,2.878,1687,5.305,1688,4.651,1689,3.395,1690,3.395,1691,3.395,1692,3.395,1693,4.651,1694,3.395,1695,4.651,1696,3.943,1697,4.651,1698,3.395,1699,3.395,1700,4.651,1701,3.395,1702,4.651,1703,3.395,1704,3.395,1705,3.395,1706,3.395,1707,3.395]],["title/classes/PhoenixMenuNode.html",[0,0.279,698,1.667]],["body/classes/PhoenixMenuNode.html",[0,0.191,2,0.219,3,0.155,4,0.135,5,0.096,9,0.453,16,0.096,17,0.477,20,1.126,33,0.366,42,0.79,47,0.692,49,1.203,50,0.623,51,0.026,52,0.648,53,0.227,54,0.498,56,1.415,57,0.694,58,0.804,59,1.126,66,1.811,69,1.478,71,1.157,75,4.075,76,3.174,80,1.071,88,0.899,93,2.329,94,1.311,101,0.765,103,0.547,107,1.318,112,0.878,117,0.6,121,2.309,126,2.085,134,0.265,139,2.193,151,0.176,152,0.547,161,0.754,165,1.229,168,1.492,185,0.008,186,0.012,187,0.008,192,3.034,194,2.015,200,4.086,213,0.341,233,1.492,268,0.793,291,1.233,431,2.002,464,2.739,465,2.675,519,2.193,522,2.407,573,2.675,624,0.992,656,5.116,677,3.529,679,1.949,698,3.297,703,1.291,706,1.698,712,3.242,731,2.57,732,3.463,763,4.551,772,3.818,783,1.062,816,1.765,845,3.034,847,2.014,860,1.317,877,3.818,1012,1.229,1062,2.407,1083,4.464,1121,1.588,1147,1.61,1191,4.743,1377,1.33,1432,2.561,1584,3.284,1664,4.621,1708,2.002,1709,5.629,1710,4.32,1711,4.32,1712,4.32,1713,4.963,1714,4.32,1715,5.482,1716,4.32,1717,4.32,1718,4.32,1719,3.578,1720,3.578,1721,3.578,1722,4.82,1723,3.034,1724,3.578,1725,3.578,1726,4.82,1727,2.002,1728,3.578,1729,4.945,1730,2.361,1731,2.361,1732,2.361,1733,4.086,1734,3.578,1735,3.663,1736,2.361,1737,2.361,1738,2.361,1739,2.361,1740,3.034,1741,2.361,1742,2.361,1743,2.361,1744,2.361,1745,2.361,1746,2.361,1747,4.32,1748,2.361,1749,3.302,1750,3.578,1751,2.361,1752,3.034,1753,3.578,1754,2.361,1755,4.945,1756,4.82,1757,4.82,1758,3.578,1759,2.361,1760,2.361,1761,3.034,1762,2.361,1763,2.361,1764,3.578,1765,2.361,1766,3.578,1767,2.361,1768,3.578,1769,3.578,1770,2.361,1771,2.002,1772,2.675,1773,3.663,1774,2.002,1775,2.361,1776,5.18,1777,3.578,1778,3.578,1779,2.361,1780,2.361,1781,2.361,1782,3.578,1783,2.361,1784,2.361,1785,2.361,1786,2.361,1787,2.361,1788,2.361,1789,1.765,1790,2.361,1791,2.361,1792,2.361,1793,2.361,1794,2.361,1795,2.361,1796,4.32,1797,3.578,1798,3.578,1799,2.361,1800,2.361,1801,2.361,1802,4.82,1803,2.002,1804,2.361,1805,2.361,1806,2.361,1807,2.361,1808,2.361,1809,2.361,1810,4.32,1811,2.361,1812,2.002,1813,2.361,1814,2.002,1815,2.361,1816,3.578,1817,2.361,1818,2.361,1819,2.361,1820,2.361,1821,3.578,1822,2.361,1823,2.361,1824,2.361,1825,4.32,1826,1.588,1827,2.002,1828,2.361,1829,2.361,1830,2.361,1831,3.578,1832,2.361,1833,4.32,1834,2.361,1835,2.361,1836,2.361,1837,2.361,1838,2.361,1839,2.361,1840,2.361,1841,2.361,1842,2.361,1843,2.361,1844,2.361,1845,4.32,1846,2.361,1847,2.361,1848,2.361,1849,2.361,1850,2.361,1851,2.361,1852,5.663,1853,2.361,1854,4.32,1855,2.361,1856,3.578,1857,2.361,1858,2.361,1859,2.361,1860,2.361,1861,2.361]],["title/classes/PhoenixMenuUI.html",[0,0.279,1862,2.579]],["body/classes/PhoenixMenuUI.html",[0,0.337,2,0.206,3,0.224,4,0.127,5,0.091,9,0.426,11,1.031,12,2.069,13,1.963,16,0.091,17,0.455,20,1.359,24,1.149,33,0.35,42,0.491,44,1.513,47,0.665,49,0.754,50,0.567,51,0.026,52,0.606,53,0.223,54,0.463,55,1.18,56,1.224,57,0.51,58,0.836,59,1.182,61,1.436,66,1.976,71,1.115,73,1,75,2.554,77,2.166,80,1.03,88,1.438,90,2.466,94,0.86,103,0.509,107,0.491,112,0.879,126,1.856,134,0.623,135,1.133,136,1.252,151,0.165,152,0.533,161,0.455,165,1.778,168,2.324,173,3.111,180,2.554,182,1.662,185,0.008,186,0.012,187,0.008,213,0.493,230,0.917,251,1.18,256,1.523,259,1.619,268,0.701,288,3.09,291,1.439,302,2.572,333,2.404,340,2.942,343,2.094,384,2.77,393,2.298,464,2.395,471,1.074,482,2.839,522,2.298,542,1.538,592,2.298,613,3.391,624,2.404,625,2.77,637,1.495,676,3.729,677,3.403,679,1.822,682,2.897,698,3.226,700,2.554,702,3.6,703,1.678,707,1.885,714,1.885,719,1.885,731,2.6,732,3.212,734,4.513,735,2.572,769,1.252,770,1.662,771,1.495,772,3.682,781,2.879,783,1.873,784,5.244,787,3.769,828,3.961,847,1.613,860,1.532,864,2.257,865,2.298,867,1.651,868,1.436,877,3.682,907,3.979,960,2.77,970,1.362,973,2.298,989,1.662,990,1.924,991,2.764,992,3.529,993,3.529,995,3.529,999,3.111,1000,3.961,1001,2.897,1002,3.529,1003,3.961,1004,2.897,1005,2.897,1007,4.275,1010,2.63,1012,1.778,1013,1.778,1016,1.924,1019,3.507,1020,1.885,1026,1.885,1027,3.839,1029,3.492,1030,2.8,1031,1.924,1033,2.554,1034,2.897,1035,2.897,1036,2.897,1038,2.554,1039,3.961,1040,1.885,1041,3.769,1043,2.298,1044,2.554,1045,2.554,1047,2.897,1049,3.979,1050,3.142,1051,2.897,1053,3.529,1054,2.897,1056,2.897,1063,1.662,1064,1.885,1075,4.513,1076,3.961,1077,3.961,1082,2.554,1090,4.513,1091,4.513,1098,1.885,1104,2.897,1111,1.885,1116,1.885,1120,1.885,1144,1.885,1156,1.885,1158,1.885,1161,1.885,1171,1.885,1182,3.529,1183,3.529,1187,1.885,1191,2.554,1192,2.897,1193,2.897,1194,2.897,1195,2.897,1198,2.897,1221,1.885,1377,1.252,1432,1.836,1581,1.662,1749,1.157,1814,3.529,1862,2.554,1863,4.162,1864,3.769,1865,4.672,1866,4.672,1867,3.417,1868,3.417,1869,3.417,1870,2.223,1871,2.223,1872,2.223,1873,2.223,1874,2.223,1875,2.223,1876,2.223,1877,4.275,1878,2.223,1879,2.223,1880,2.223,1881,2.223,1882,2.223,1883,2.223,1884,3.417,1885,5.992,1886,2.223,1887,5.042,1888,3.417,1889,4.162,1890,2.223,1891,2.223,1892,2.223,1893,3.417,1894,4.162,1895,2.223,1896,1.885,1897,2.223,1898,3.417,1899,2.223,1900,2.223,1901,2.223,1902,2.223,1903,2.223,1904,2.223,1905,2.897,1906,2.223,1907,3.417,1908,2.223,1909,2.223,1910,2.223,1911,2.223,1912,2.223,1913,2.223,1914,3.417,1915,2.223,1916,2.223,1917,2.223,1918,2.223,1919,2.223,1920,2.223,1921,2.223,1922,2.223,1923,3.417,1924,2.223,1925,2.223,1926,2.223,1927,2.223,1928,1.885,1929,2.223,1930,2.223,1931,2.223,1932,2.223,1933,2.223,1934,2.223,1935,2.223,1936,2.223,1937,2.223,1938,3.417,1939,2.223,1940,2.223,1941,2.223,1942,2.223,1943,2.223,1944,2.223,1945,2.223,1946,2.223,1947,2.223,1948,2.223,1949,2.223,1950,2.223]],["title/classes/PhoenixObjects.html",[0,0.279,545,2.114]],["body/classes/PhoenixObjects.html",[0,0.195,2,0.224,3,0.374,4,0.138,5,0.098,9,0.455,16,0.098,17,0.321,18,2.347,20,1.006,24,0.921,33,0.372,47,0.615,50,0.716,51,0.026,52,0.557,53,0.218,54,0.501,57,0.597,59,0.904,66,1.492,69,1.94,71,0.974,73,1.085,79,1.682,80,0.375,84,1.013,85,1.719,92,1.838,103,0.541,107,0.802,125,1.254,134,0.547,135,0.465,139,1.477,143,2.084,151,0.179,152,0.458,161,0.782,168,1.897,169,1.477,185,0.008,186,0.013,187,0.008,213,0.998,227,3.751,230,0.484,239,2.043,240,1.477,241,1.968,242,2.717,243,3.27,244,2.043,245,3.081,246,3.729,247,1.802,248,3.081,255,2.308,265,2.535,268,0.87,270,1.621,272,2.444,274,3.515,280,2.717,287,1.621,289,1.621,291,1.747,295,2.717,300,2.942,316,2.276,333,1.013,337,4.04,339,1.164,340,3.025,350,2.227,360,1.164,361,4.387,367,2.444,372,1.802,373,1.802,374,1.802,381,2.742,384,2.967,385,4.647,392,2.681,448,1.477,450,3.5,471,1.756,482,1.357,508,1.357,518,2.353,540,1.802,541,1.891,542,1.635,545,2.227,549,3.905,554,3.081,556,3.081,557,1.621,558,2.043,592,2.444,595,3.695,598,2.717,599,4.431,623,1.756,646,3.709,667,3.081,668,2.717,703,0.646,758,1.527,783,1.085,837,2.566,863,3.709,880,1.357,883,2.227,893,1.477,899,2.985,903,4.129,905,2.043,908,1.802,911,2.444,948,2.043,949,3.081,950,2.043,1027,1.477,1031,2.463,1145,1.802,1147,1.968,1330,3.27,1341,3.093,1431,1.254,1453,3.367,1496,3.276,1514,1.357,1517,3.81,1648,3.081,1826,1.621,1951,5.188,1952,3.634,1953,4.375,1954,3.634,1955,3.634,1956,3.634,1957,3.634,1958,3.634,1959,3.634,1960,3.634,1961,2.41,1962,2.41,1963,4.129,1964,3.634,1965,3.634,1966,2.41,1967,4.375,1968,5.226,1969,4.375,1970,4.375,1971,4.375,1972,4.387,1973,6.372,1974,3.634,1975,2.41,1976,4.375,1977,3.634,1978,2.41,1979,4.375,1980,3.634,1981,3.634,1982,2.41,1983,4.375,1984,4.375,1985,4.871,1986,4.871,1987,3.634,1988,2.41,1989,4.375,1990,3.634,1991,2.41,1992,4.375,1993,2.41,1994,4.871,1995,2.41,1996,4.375,1997,2.41,1998,2.41,1999,5.226,2000,2.41,2001,3.634,2002,3.634,2003,2.41,2004,2.41,2005,3.634,2006,1.477,2007,2.41,2008,2.41,2009,2.41,2010,2.043,2011,2.41,2012,2.41,2013,3.634,2014,2.41,2015,2.41,2016,2.41,2017,2.41,2018,1.802,2019,2.41,2020,2.043,2021,2.41,2022,2.41,2023,2.717,2024,3.634,2025,2.41,2026,2.41,2027,2.41,2028,5.402,2029,3.634,2030,4.375,2031,4.871,2032,3.709,2033,2.41,2034,3.081,2035,2.41,2036,1.802,2037,2.41,2038,2.41,2039,2.41,2040,3.634,2041,3.634,2042,3.634,2043,2.41,2044,2.41,2045,2.043,2046,4.871,2047,2.41,2048,2.41,2049,4.657,2050,4.107,2051,3.515,2052,2.41,2053,2.41,2054,2.41,2055,2.41,2056,2.41,2057,3.634,2058,2.41,2059,3.27,2060,2.043,2061,2.043,2062,3.634,2063,2.41,2064,2.41,2065,4.375,2066,2.41,2067,4.375,2068,2.41,2069,5.226,2070,2.41,2071,4.375,2072,2.41,2073,3.081,2074,2.41,2075,2.41,2076,2.41,2077,3.081,2078,2.41,2079,2.41,2080,2.41,2081,2.41,2082,2.41,2083,2.41,2084,2.41,2085,2.41,2086,2.41,2087,2.41,2088,2.41,2089,5.226,2090,2.41,2091,4.375,2092,4.375,2093,2.41,2094,2.41,2095,3.634,2096,2.41,2097,2.043,2098,2.41,2099,2.41,2100,2.41,2101,2.41,2102,2.41,2103,3.634,2104,2.043,2105,2.41,2106,2.41,2107,2.41,2108,2.41,2109,2.41,2110,2.41,2111,3.634,2112,3.634,2113,2.41,2114,2.41,2115,2.41,2116,2.41,2117,2.41,2118,2.41,2119,2.41,2120,2.41,2121,2.41,2122,2.41,2123,2.41,2124,2.41,2125,2.41,2126,2.41,2127,2.41,2128,2.41,2129,3.634,2130,3.634,2131,2.41,2132,2.41,2133,2.41,2134,2.41,2135,2.41,2136,2.41,2137,2.41,2138,2.41,2139,2.41,2140,2.41,2141,2.41,2142,2.41,2143,2.41,2144,2.41,2145,2.41,2146,2.41,2147,2.41,2148,2.41,2149,2.41,2150,2.41,2151,2.41,2152,2.41,2153,2.41,2154,2.41,2155,2.41,2156,2.41,2157,3.634,2158,2.41,2159,2.41,2160,2.41,2161,2.41,2162,2.41,2163,3.634,2164,2.41,2165,2.41,2166,2.41,2167,2.41,2168,2.41,2169,2.41,2170,2.043,2171,2.41,2172,2.043,2173,2.41,2174,2.41]],["title/classes/PresetView.html",[0,0.279,871,2.32]],["body/classes/PresetView.html",[0,0.369,2,0.423,3,0.299,4,0.26,5,0.186,9,0.419,16,0.186,17,0.751,24,1.158,33,0.577,42,1.006,45,2.418,47,0.685,49,1.244,50,0.466,51,0.025,52,0.648,53,0.216,54,0.38,79,2.31,80,1.093,94,0.941,101,2.167,103,0.47,112,0.657,117,1.101,151,0.339,152,0.51,161,0.607,185,0.016,186,0.02,187,0.016,224,4.345,299,4.299,859,3.326,862,4.381,871,3.79,872,3.406,1713,5.313,1727,4.777,1773,3.863,1774,5.186,2175,5.749,2176,3.863,2177,4.556,2178,4.556,2179,3.406,2180,6.851,2181,6.118,2182,6.391,2183,5.635,2184,6.391,2185,4.556,2186,4.556,2187,4.556,2188,4.556,2189,4.556,2190,4.556,2191,4.556]],["title/classes/PrettySymbols.html",[0,0.279,769,1.942]],["body/classes/PrettySymbols.html",[0,0.341,2,0.391,3,0.277,4,0.241,5,0.172,9,0.439,16,0.172,17,0.715,18,2.353,22,4.415,24,0.99,33,0.55,47,0.605,49,0.931,50,0.683,51,0.025,52,0.498,53,0.22,54,0.448,57,0.517,58,0.517,69,1.945,80,1.051,103,0.493,151,0.314,152,0.536,161,0.787,185,0.015,186,0.019,187,0.015,213,0.774,233,2.146,259,1.283,265,2.195,268,0.787,278,2.038,372,3.153,541,2.794,595,2.838,641,4.414,703,1.13,706,2.443,708,3.023,715,3.023,769,3.023,771,4.414,775,3.611,819,3.576,837,2.416,839,3.576,883,2.585,893,3.29,899,3.29,911,3.611,1436,3.611,1437,3.29,1596,3.576,1789,4.647,2059,4.647,2060,5.442,2061,5.271,2192,5.271,2193,3.576,2194,7.007,2195,5.369,2196,5.369,2197,5.271,2198,5.369,2199,6.217,2200,6.217,2201,4.219,2202,5.369,2203,4.219,2204,6.75,2205,5.369,2206,5.369,2207,4.219,2208,6.668,2209,5.906,2210,4.219,2211,4.219,2212,4.219,2213,4.219,2214,5.906,2215,3.576,2216,5.369,2217,4.219,2218,4.219,2219,4.219,2220,5.369,2221,4.219,2222,4.219,2223,4.219,2224,4.219,2225,4.219,2226,3.576,2227,4.219,2228,6.217,2229,4.219,2230,4.219,2231,4.219,2232,5.369,2233,4.219,2234,4.219,2235,4.219,2236,4.219,2237,4.219,2238,4.219]],["title/classes/RKHelper.html",[0,0.279,2006,2.114]],["body/classes/RKHelper.html",[0,0.34,2,0.39,3,0.276,4,0.24,5,0.171,9,0.462,16,0.171,18,2.351,24,0.988,33,0.635,47,0.603,50,0.603,51,0.025,52,0.547,53,0.211,54,0.492,56,1.37,57,0.761,58,0.515,59,1.325,79,2.143,88,1.346,94,1.325,103,0.573,107,1.471,110,2.105,112,0.606,134,0.662,135,0.811,151,0.313,152,0.518,161,0.854,185,0.015,186,0.019,187,0.015,227,3.282,230,0.714,233,1.849,241,2.95,252,3.496,259,1.629,265,3.231,268,0.835,333,2.834,337,4.537,339,2.588,360,2.848,400,3.563,518,2.588,595,2.827,813,2.827,815,3.563,816,4.004,880,2.366,882,3.142,883,3.613,884,3.142,893,2.576,899,3.282,939,3.142,1341,3.016,1429,2.827,1430,2.827,1431,3.467,1441,2.827,1518,4.176,1519,3.603,1520,3.282,1521,3.93,2006,3.282,2010,5.263,2018,4.004,2226,4.541,2239,5.263,2240,5.896,2241,4.541,2242,5.356,2243,4.203,2244,4.203,2245,5.356,2246,5.356,2247,6.412,2248,5.356,2249,4.203,2250,5.356,2251,5.356,2252,5.356,2253,5.356,2254,5.356,2255,4.203,2256,5.896,2257,4.203,2258,4.203,2259,4.203,2260,5.356,2261,4.203,2262,4.203,2263,4.203,2264,4.203,2265,4.203,2266,4.203,2267,4.203,2268,4.203,2269,4.203,2270,4.203,2271,4.203,2272,4.203,2273,4.203,2274,4.203,2275,4.203,2276,4.203,2277,4.203,2278,4.203,2279,4.203,2280,4.203]],["title/classes/RendererManager.html",[0,0.279,250,2.32]],["body/classes/RendererManager.html",[0,0.211,2,0.242,3,0.171,4,0.149,5,0.106,6,2.688,8,0.793,9,0.481,11,1.249,12,1.331,16,0.187,17,0.514,20,1.384,24,1.15,29,3.461,33,0.395,42,1.012,44,1.946,45,2.33,47,0.698,49,0.851,50,0.656,51,0.026,52,0.594,53,0.218,54,0.534,55,2.074,56,1.414,57,0.621,58,0.765,59,1.046,63,2.882,64,4.204,69,1.1,71,1.033,80,0.881,90,2.271,99,4.358,101,2.075,103,0.571,107,1.012,110,1.991,112,0.924,117,0.437,121,0.96,134,0.293,135,0.744,151,0.194,152,0.549,161,0.78,166,1.95,185,0.009,186,0.013,187,0.009,213,0.556,223,1.755,230,0.8,250,2.593,251,1.331,258,2.363,259,1.394,268,0.765,291,1.309,316,2.006,339,2.447,435,3.682,461,4.491,464,1.735,467,3.268,542,2.279,703,1.033,710,1.862,728,4.392,849,1.953,853,3.407,862,2.363,864,2.447,865,3.407,866,2.852,970,1.599,1031,2.171,1062,2.593,1065,1.862,1072,3.467,1073,2.212,1139,2.582,1238,4.041,1248,4.838,1249,4.041,1250,4.491,1251,2.363,1253,1.95,1257,2.882,1259,2.882,1273,2.212,1297,2.212,1342,4.162,1353,3.407,2049,3.268,2281,5.798,2282,4.586,2283,5.065,2284,5.405,2285,6.86,2286,3.855,2287,3.855,2288,5.065,2289,5.065,2290,5.065,2291,5.065,2292,2.882,2293,3.855,2294,5.065,2295,3.855,2296,3.855,2297,3.855,2298,3.855,2299,3.855,2300,3.855,2301,3.855,2302,3.855,2303,5.291,2304,2.609,2305,2.609,2306,3.855,2307,3.855,2308,3.855,2309,2.609,2310,3.855,2311,2.609,2312,3.855,2313,3.855,2314,2.609,2315,2.609,2316,2.609,2317,2.609,2318,5.065,2319,3.855,2320,2.609,2321,3.855,2322,2.609,2323,2.609,2324,3.855,2325,2.609,2326,3.855,2327,3.855,2328,2.609,2329,3.855,2330,2.609,2331,3.855,2332,2.609,2333,3.855,2334,3.268,2335,3.887,2336,2.609,2337,3.887,2338,3.855,2339,3.855,2340,2.609,2341,3.855,2342,5.657,2343,2.609,2344,3.855,2345,5.065,2346,5.065,2347,5.065,2348,3.855,2349,2.609,2350,2.609,2351,1.95,2352,2.609,2353,2.609,2354,1.95,2355,2.609,2356,2.609,2357,2.609,2358,2.609,2359,2.609,2360,3.855,2361,4.586,2362,2.609,2363,2.609,2364,4.586,2365,2.609,2366,3.855,2367,2.609,2368,4.586,2369,3.855,2370,2.609,2371,3.855,2372,2.609,2373,2.609,2374,2.609,2375,2.609,2376,2.609,2377,3.855,2378,2.609,2379,3.855,2380,5.065,2381,2.609,2382,2.609,2383,2.609,2384,2.609,2385,3.855,2386,2.609,2387,2.609,2388,2.609,2389,3.855]],["title/classes/RungeKutta.html",[0,0.279,1431,1.795]],["body/classes/RungeKutta.html",[0,0.431,2,0.317,3,0.224,4,0.195,5,0.139,9,0.396,13,1.962,16,0.139,17,0.622,18,2.135,33,0.478,47,0.478,50,0.478,51,0.026,52,0.433,53,0.175,54,0.39,56,0.754,57,0.419,58,0.419,59,1.182,71,1.251,79,2.283,88,1.174,94,1.099,103,0.546,107,1.175,112,0.493,117,1.173,121,1.257,134,0.384,135,0.659,143,1.853,148,1.65,151,0.254,152,0.538,161,0.622,185,0.016,186,0.016,187,0.012,198,2.093,213,0.493,233,1.179,238,2.629,241,3.155,252,2.629,265,2.977,267,2.862,268,0.818,278,2.571,279,3.506,302,3.252,316,1.777,350,3.506,360,2.571,446,3.141,471,2.894,518,2.256,708,2.996,715,3.221,735,2.256,758,2.404,814,3.141,837,2.783,990,2.629,1287,3.848,1422,3.58,1423,2.297,1428,4.277,1429,4.609,1430,4.609,1431,2.43,1432,2.645,1433,3.491,1434,3.491,1435,3.491,1436,4.16,1437,3.79,1438,2.553,1439,2.553,1440,2.553,1441,4.03,1442,2.553,1443,2.553,1444,2.553,1445,2.553,1446,4.277,1447,3.978,1448,3.491,1449,3.491,1450,4.733,1451,4.819,1452,4.277,1453,3.506,1454,2.553,1455,2.553,1456,2.553,1457,4.888,1458,2.553,1459,2.297,1460,4.819,1461,2.553,1462,2.553,1463,4.478,1464,4.944,1465,2.553,1466,4.733,1467,2.553,1468,2.553,1469,2.553,1470,3.491,1471,2.553,1472,3.491,1473,3.978,1474,2.553,1475,2.553,1476,2.553,1477,2.553,1478,2.553,1479,2.553,1480,2.553,1481,2.553,1482,2.553,1483,2.553,1484,2.553,1485,2.553,1486,2.553,1487,2.553,1488,2.553,1489,2.553,1490,1.923,1491,2.553,1492,3.978,1493,3.491,1494,2.553,1495,3.978,1496,2.297,1497,3.978,1498,3.491,1499,2.553,1500,2.553,1501,2.553,1502,2.553,1503,2.553,1504,2.553,1505,2.553,1506,2.553,1507,2.553,1508,2.553,1509,2.553,1510,4.478,1511,4.478,1512,4.277,1513,4.478,1514,3.221,1515,4.478,1516,4.277,1517,2.862,1518,3.848,1519,3.141,1520,2.862,1521,3.261,1522,3.491,1523,2.553,1524,2.553,1525,2.553,1526,2.553,1527,2.553,1528,2.553,1529,2.553,2390,3.415,2391,3.415,2392,3.415]],["title/classes/ScriptLoader.html",[0,0.279,2393,2.579]],["body/classes/ScriptLoader.html",[0,0.333,2,0.381,3,0.27,4,0.235,5,0.168,9,0.434,11,0.907,16,0.168,18,2.25,24,0.885,33,0.54,35,3.575,47,0.54,50,0.54,51,0.025,52,0.49,53,0.174,54,0.514,57,0.647,58,0.647,59,1.091,80,1.056,84,2.218,97,2.376,103,0.514,126,1.513,134,0.461,151,0.306,152,0.514,161,0.703,175,2.764,185,0.014,186,0.018,187,0.014,191,1.849,213,0.842,230,0.703,256,1.359,259,1.25,268,0.823,291,1.173,343,2.519,394,4.476,703,1.101,859,3.204,860,2.44,866,2.973,868,2.218,870,2.974,964,3.947,1145,3.072,1147,1.849,1306,2.519,1373,3.467,1559,3.586,1592,4.476,1715,4.476,2393,3.947,2394,4.361,2395,5.272,2396,6.157,2397,5.28,2398,5.399,2399,5.834,2400,5.834,2401,4.11,2402,4.11,2403,5.28,2404,4.219,2405,5.834,2406,5.22,2407,4.476,2408,6.368,2409,5.019,2410,5.28,2411,4.361,2412,5.28,2413,4.11,2414,6.783,2415,6.157,2416,5.834,2417,4.11,2418,5.834,2419,6.368,2420,5.28,2421,5.28,2422,3.484,2423,3.484,2424,3.484,2425,4.11,2426,4.11,2427,4.11,2428,5.28,2429,4.11,2430,4.11,2431,4.11,2432,4.11,2433,4.11,2434,4.11,2435,4.11,2436,4.11,2437,4.11,2438,5.28,2439,4.11,2440,4.11,2441,4.11,2442,4.11,2443,4.11,2444,4.11,2445,4.11,2446,4.11,2447,4.11,2448,5.28,2449,4.11,2450,6.157,2451,6.157,2452,4.11,2453,4.11,2454,4.11,2455,4.11,2456,4.11,2457,4.11]],["title/classes/SelectionManager.html",[0,0.279,2458,2.579]],["body/classes/SelectionManager.html",[0,0.203,2,0.233,3,0.165,4,0.143,5,0.102,6,2.676,8,0.764,9,0.43,11,1.386,12,1.294,16,0.102,17,0.662,20,1.466,24,1.096,33,0.384,42,1.174,44,2.213,45,2.44,47,0.694,48,1.878,50,0.571,51,0.026,52,0.551,53,0.218,54,0.444,55,1.717,56,1.276,57,0.609,58,0.684,59,1.153,62,3.26,69,1.994,71,1.004,80,0.946,85,1.473,88,1.25,92,2.598,94,1.153,97,2.511,101,1.808,103,0.516,107,0.555,110,2.193,112,0.805,117,0.421,128,2.111,134,0.627,135,0.485,143,1.723,151,0.187,152,0.516,161,0.662,185,0.009,186,0.013,187,0.009,188,2.995,191,1.13,202,2.802,213,0.834,230,0.915,233,1.548,246,3.142,251,1.926,255,2.235,256,1.312,258,2.297,259,1.14,268,0.769,284,3.482,291,1.28,300,1.69,329,4.171,339,1.811,464,1.687,549,1.54,621,2.13,622,2.522,623,2.402,632,4.216,703,0.673,706,1.763,710,1.811,740,4.321,758,1.575,769,1.415,770,1.878,771,1.69,837,1.687,849,2.273,869,1.54,1072,3.419,1147,1.13,1228,4.362,1230,3.977,1231,4.541,1232,4.901,1233,4.51,1234,4.51,1249,4.159,1250,3.717,1262,3.178,1263,4.216,1264,4.171,1265,4.73,1275,3.178,1282,3.178,1283,2.13,1322,3.375,1334,2.522,1335,3.345,1351,3.345,1356,1.878,1540,3.753,1541,3.717,1545,3.352,1548,3.345,1667,2.13,1669,1.878,1680,2.13,1696,2.13,1826,1.69,2023,2.802,2050,4.847,2051,4.362,2104,2.13,2292,3.352,2351,2.802,2458,2.802,2459,5.772,2460,4.485,2461,4.485,2462,4.485,2463,4.485,2464,4.485,2465,4.485,2466,4.485,2467,4.73,2468,4.973,2469,4.973,2470,4.216,2471,3.749,2472,3.749,2473,3.749,2474,3.749,2475,3.178,2476,2.512,2477,2.13,2478,2.512,2479,3.749,2480,3.749,2481,2.512,2482,3.749,2483,2.512,2484,6.425,2485,5.58,2486,2.512,2487,4.973,2488,2.512,2489,3.749,2490,3.749,2491,2.13,2492,2.13,2493,2.512,2494,2.802,2495,5.038,2496,2.13,2497,3.178,2498,2.512,2499,3.178,2500,3.178,2501,3.749,2502,3.749,2503,2.512,2504,2.512,2505,3.749,2506,2.512,2507,4.485,2508,3.749,2509,3.749,2510,3.749,2511,2.512,2512,4.485,2513,2.512,2514,2.512,2515,2.512,2516,2.512,2517,1.878,2518,2.512,2519,4.485,2520,2.512,2521,2.512,2522,2.512,2523,2.512,2524,2.13,2525,2.512,2526,2.512,2527,2.512,2528,2.512,2529,2.512,2530,2.512,2531,2.512,2532,4.73,2533,5.58,2534,2.512,2535,3.749,2536,2.512,2537,4.485,2538,2.512,2539,3.749,2540,2.512,2541,2.512,2542,2.512,2543,2.512,2544,2.512,2545,2.512,2546,4.485,2547,2.512,2548,5.32,2549,2.512,2550,2.512,2551,2.512,2552,2.512,2553,3.749,2554,2.512,2555,2.512,2556,2.512,2557,2.512,2558,2.512,2559,2.512,2560,2.512,2561,2.512,2562,2.512,2563,2.512,2564,2.512,2565,2.512,2566,2.512,2567,2.512,2568,2.512,2569,2.512,2570,3.749,2571,2.512,2572,1.878,2573,2.13,2574,2.512,2575,2.512,2576,2.512,2577,2.512,2578,2.512,2579,3.749,2580,2.512,2581,2.512,2582,2.512,2583,2.512,2584,2.512,2585,2.512,2586,2.512,2587,2.512,2588,2.512,2589,2.512,2590,2.512,2591,2.512,2592,2.512,2593,2.512,2594,2.512,2595,2.512,2596,2.512]],["title/classes/State.html",[0,0.279,1432,1.356]],["body/classes/State.html",[0,0.382,2,0.322,3,0.228,4,0.198,5,0.142,9,0.258,13,1.459,16,0.142,17,0.715,18,1.631,47,0.662,51,0.026,53,0.213,56,0.767,57,0.793,58,0.793,59,0.976,71,1.265,73,1.563,79,2.196,88,0.873,94,0.717,103,0.481,107,0.767,117,1.165,121,1.279,134,0.39,135,0.67,143,1.53,148,1.678,151,0.258,152,0.54,161,0.629,185,0.016,186,0.016,187,0.012,198,2.128,213,0.774,238,2.66,241,3.136,252,1.955,265,3.136,267,2.895,268,0.821,278,1.678,279,3.29,291,1.774,302,3.126,316,1.807,350,3.53,360,1.678,381,2.66,446,3.177,469,2.596,471,2.911,518,1.678,708,3.022,715,3.244,735,2.282,758,1.984,814,2.336,837,2.797,990,1.955,1287,3.177,1422,4.414,1423,2.336,1428,3.531,1429,4.463,1430,4.463,1431,1.807,1432,2.579,1433,2.596,1434,2.596,1435,2.596,1436,4.181,1437,3.809,1438,2.596,1439,2.596,1440,2.596,1441,4.053,1442,2.596,1443,2.596,1444,2.596,1445,2.596,1446,4.306,1447,4.013,1448,3.531,1449,3.531,1450,4.754,1451,4.838,1452,4.306,1453,3.53,1454,2.596,1455,2.596,1456,2.596,1457,4.905,1458,2.596,1459,2.336,1460,4.838,1461,2.596,1462,2.596,1463,4.504,1464,4.96,1465,2.596,1466,4.754,1467,2.596,1468,2.596,1469,2.596,1470,3.531,1471,2.596,1472,3.531,1473,4.013,1474,2.596,1475,2.596,1476,2.596,1477,2.596,1478,2.596,1479,2.596,1480,2.596,1481,2.596,1482,2.596,1483,2.596,1484,2.596,1485,2.596,1486,2.596,1487,2.596,1488,2.596,1489,2.596,1490,1.955,1491,2.596,1492,4.013,1493,3.531,1494,2.596,1495,4.013,1496,2.336,1497,4.013,1498,3.531,1499,2.596,1500,2.596,1501,2.596,1502,2.596,1503,2.596,1504,2.596,1505,2.596,1506,2.596,1507,2.596,1508,2.596,1509,2.596,1510,3.531,1511,3.531,1512,3.531,1513,4.013,1514,3.022,1515,4.013,1516,3.531,1517,2.895,1518,3.177,1519,2.336,1520,2.128,1521,2.128,1522,4.306,1523,2.596,1524,2.596,1525,2.596,1526,2.596,1527,2.596,1528,2.596,1529,2.596,2597,4.724,2598,4.724,2599,4.724,2600,4.724,2601,3.473,2602,3.473,2603,3.473,2604,3.473,2605,3.473,2606,3.473,2607,3.473,2608,3.473,2609,3.473,2610,2.944]],["title/classes/StateManager.html",[0,0.279,1560,1.942]],["body/classes/StateManager.html",[0,0.271,2,0.31,3,0.219,4,0.191,5,0.136,8,1.017,9,0.468,11,1.468,16,0.136,17,0.613,18,2.122,20,1.087,33,0.471,42,1.162,44,1.491,45,2.515,47,0.703,48,2.499,49,1.016,50,0.629,51,0.026,52,0.57,53,0.224,54,0.513,56,1.162,57,0.645,58,0.645,61,2.382,66,1.754,80,1.014,90,1.405,93,2.224,101,2.134,103,0.55,107,0.738,112,0.908,117,0.882,121,1.695,134,0.668,135,0.645,151,0.249,152,0.513,161,0.613,165,3.276,185,0.012,186,0.016,187,0.012,188,1.883,191,1.504,213,0.818,230,0.867,233,1.817,251,1.589,257,4.462,268,0.564,299,4.314,435,4.165,635,2.499,698,2.969,703,0.896,706,2.069,729,4.431,731,2.318,732,3.099,772,1.883,781,1.934,783,1.504,787,3.441,849,2.247,856,5.21,860,2.088,877,1.883,991,1.615,1065,3.263,1249,3.814,1251,2.049,1253,2.499,1256,2.835,1260,2.499,1346,3.096,1365,2.499,1373,2.592,1377,3.193,1381,2.835,1388,3.096,1389,2.835,1432,2.762,1560,3.46,1584,3.709,1641,4.462,1643,4.462,1660,3.902,1723,3.902,1749,1.74,1761,3.902,1826,2.249,1827,2.835,1864,2.499,1905,3.902,2477,2.835,2517,2.499,2611,5.844,2612,4.603,2613,5.67,2614,5.263,2615,5.263,2616,5.67,2617,5.67,2618,4.603,2619,4.603,2620,4.603,2621,4.603,2622,4.603,2623,4.603,2624,4.603,2625,5.67,2626,4.603,2627,3.344,2628,3.344,2629,3.344,2630,4.603,2631,3.344,2632,4.603,2633,3.344,2634,4.603,2635,4.603,2636,3.344,2637,4.603,2638,3.344,2639,4.603,2640,2.499,2641,5.67,2642,5.67,2643,3.344,2644,3.344,2645,3.344,2646,3.344,2647,3.344,2648,2.835,2649,3.344,2650,3.344,2651,3.344,2652,3.344,2653,3.344,2654,3.344,2655,3.344,2656,3.344,2657,3.344,2658,3.344,2659,3.344,2660,3.344,2661,3.344,2662,3.344,2663,3.344,2664,3.902,2665,2.835,2666,3.344,2667,3.344,2668,3.344,2669,3.344]],["title/classes/URLOptionsManager.html",[0,0.279,2670,2.32]],["body/classes/URLOptionsManager.html",[0,0.267,2,0.306,3,0.343,4,0.189,5,0.265,8,1.004,9,0.42,11,1.307,16,0.135,17,0.608,20,1.321,24,1.122,33,0.467,42,1.245,47,0.642,50,0.606,51,0.026,52,0.485,53,0.225,54,0.436,57,0.691,58,0.559,59,1.264,62,2.796,64,3.456,66,1.69,80,1.042,88,1.147,103,0.494,107,1.007,112,0.854,126,1.68,134,0.665,143,1.478,151,0.339,152,0.494,161,0.44,185,0.012,186,0.016,187,0.012,191,2.053,213,0.814,230,0.913,233,1.575,238,2.569,251,1.575,256,1.245,268,0.784,278,2.204,321,1.718,507,4.78,518,2.204,581,3.869,583,3.869,679,2.074,706,1.793,710,2.86,712,3.069,731,2.354,741,3.919,747,3.411,773,2.796,847,2.311,849,2.166,859,3.685,860,2.179,861,4.425,866,2.569,867,2.204,868,2.37,870,1.595,909,2.569,988,3.411,991,2.204,1065,3.031,1245,3.069,1248,3.411,1351,2.221,1398,2.221,1432,1.298,1490,2.569,1556,3.069,1560,2.944,1584,2.944,1749,2.721,1755,3.869,1864,3.411,2179,3.411,2475,2.799,2532,3.869,2664,2.799,2670,3.069,2671,4.78,2672,5.229,2673,5.64,2674,5.229,2675,5.64,2676,5.64,2677,4.563,2678,3.302,2679,5.229,2680,4.563,2681,3.302,2682,4.782,2683,4.216,2684,5.19,2685,3.302,2686,5.92,2687,3.302,2688,4.782,2689,5.64,2690,5.64,2691,2.799,2692,4.563,2693,4.563,2694,3.302,2695,6.122,2696,4.563,2697,3.869,2698,3.302,2699,3.302,2700,2.799,2701,2.799,2702,2.468,2703,3.302,2704,3.302,2705,3.302,2706,3.302,2707,3.302,2708,3.302,2709,3.302,2710,3.302,2711,3.302,2712,3.302,2713,2.024,2714,4.563,2715,3.302,2716,3.302,2717,5.229,2718,3.302,2719,3.302,2720,3.302,2721,4.433,2722,3.869,2723,3.302,2724,3.302,2725,3.869,2726,3.302,2727,3.302,2728,3.302,2729,3.302,2730,4.563,2731,3.302,2732,3.302,2733,3.302,2734,3.302,2735,3.302,2736,2.799,2737,2.799,2738,3.302,2739,3.302,2740,3.302,2741,4.563,2742,4.563,2743,4.563,2744,4.563,2745,4.563,2746,4.563,2747,3.869,2748,4.563,2749,3.302,2750,3.302,2751,4.563,2752,3.302,2753,3.302,2754,3.302,2755,3.302,2756,3.302,2757,3.302]],["title/classes/VRManager.html",[0,0.279,2758,2.32]],["body/classes/VRManager.html",[0,0.241,2,0.276,3,0.195,4,0.17,5,0.121,6,2.557,8,0.904,9,0.424,11,1.257,12,1.463,13,1.781,14,3.169,15,3.804,16,0.121,17,0.565,18,1.706,20,1.436,22,3.693,23,4.188,24,1.111,25,3.169,26,4.519,27,3.169,28,4.097,29,3.009,30,3.169,31,3.169,32,3.169,33,0.434,34,4.026,35,2.598,36,3.169,38,3.693,39,3.169,40,3.693,41,3.693,42,1.091,44,0.963,45,2.521,47,0.71,49,0.936,50,0.551,51,0.025,52,0.499,53,0.226,54,0.475,56,0.656,57,0.605,58,0.605,60,2.52,61,1.249,71,0.796,74,2,79,1.463,80,0.66,81,3.594,82,2.52,83,3.87,84,2.075,85,2.326,86,4.953,87,2.52,88,1.065,89,3.823,90,1.249,91,2.52,92,1.781,93,2.048,94,1.223,95,2.52,96,2.802,97,2.562,98,3.489,99,3.489,100,2.52,101,2.017,102,2.52,103,0.529,104,2,105,2,106,2.222,107,0.656,108,2.52,109,2.52,110,2.117,112,0.938,113,2.222,114,2.52,115,1.822,117,0.828,119,2.52,120,1.822,121,1.095,122,2.222,123,2.52,124,2.222,125,1.547,126,1.819,127,2.222,128,1.674,129,2.52,130,2.222,131,4.256,132,3.169,133,2.851,134,0.555,135,0.574,137,1.822,138,2,139,1.822,141,2.222,142,2.222,143,1.745,144,2.222,145,2.222,146,2.222,147,1.822,148,1.436,149,2,151,0.221,152,0.475,153,4.188,160,2.222,163,2.52,179,2.52,185,0.01,186,0.015,187,0.01,213,0.854,229,3.83,230,0.565,240,1.822,241,2.562,268,0.698,284,3.43,291,1.41,302,1.436,340,1.338,373,3.169,381,2.387,439,4.188,461,2.222,511,2.52,519,1.822,542,2.223,849,1.463,864,1.436,941,2.52,1013,2.206,1245,2,1514,3.699,1670,4.566,1896,2.52,1972,3.693,2020,3.594,2077,2.52,2170,2.52,2491,2.52,2492,3.594,2610,2.52,2758,2.851,2759,5.515,2760,4.311,2761,4.94,2762,4.94,2763,4.94,2764,4.94,2765,4.94,2766,4.94,2767,4.239,2768,5.386,2769,5.373,2770,6.228,2771,2.52,2772,5.386,2773,5.018,2774,4.566,2775,4.239,2776,4.239,2777,4.239,2778,6.228,2779,2.973,2780,4.239,2781,2.973,2782,2.973,2783,4.239,2784,2.973,2785,4.239,2786,2.973,2787,2.973,2788,2.973,2789,2.973,2790,4.239,2791,2.973,2792,2.973,2793,2.973,2794,2.973,2795,2.973,2796,4.239,2797,4.239,2798,4.94,2799,2.973,2800,4.94,2801,2.973,2802,2.973,2803,2.973,2804,2.973,2805,2.973,2806,2.973,2807,2.973,2808,2.973,2809,2.973,2810,2.973,2811,2.973,2812,2.973,2813,2.973,2814,2.973,2815,2.973,2816,2.973,2817,2.973,2818,2.973,2819,2.973,2820,2.973,2821,2.973,2822,2.973,2823,2.973,2824,4.239,2825,4.239,2826,2.973,2827,2.973,2828,2.973,2829,2.973,2830,2.973,2831,2.973,2832,2.973,2833,2.52,2834,2.973,2835,2.973,2836,2.973,2837,4.239,2838,2.973,2839,2.973,2840,2.973,2841,2.973]],["title/interfaces/Window.html",[219,1.552,2713,2.114]],["body/interfaces/Window.html",[0,0.231,3,0.297,4,0.101,5,0.229,9,0.132,10,1.752,11,1.416,12,1.24,13,0.745,16,0.117,17,0.381,20,1.184,24,1.149,28,2.416,29,1.381,33,0.293,44,1.857,45,1.517,49,0.391,50,0.368,51,0.026,52,0.637,53,0.118,55,1.423,56,1.361,57,0.217,58,0.217,59,1.207,61,2.222,62,2.201,64,2.201,66,1.695,69,1.906,71,0.475,77,3.267,79,0.987,80,1.072,83,2.023,84,2.03,85,0.697,88,1.532,89,2.32,92,1.201,94,0.742,96,2.523,97,2.034,98,2.201,101,0.926,103,0.509,107,0.391,110,1.62,112,0.763,117,0.979,120,1.086,121,0.653,125,1.869,134,0.63,135,0.693,137,2.77,143,1.714,148,0.856,151,0.132,152,0.591,161,0.821,165,1.488,168,1.561,185,0.006,186,0.01,187,0.006,188,1.609,191,0.797,194,0.998,196,2.137,213,0.697,219,1.616,220,2.416,221,1.086,222,1.325,223,3.674,224,1.752,227,1.086,228,1.752,229,1.192,230,0.921,231,2.137,232,3.045,235,1.609,236,3.045,238,0.998,251,1.24,252,0.998,255,1.899,256,1.386,258,1.086,259,1.47,264,2.423,268,0.703,277,3.379,278,2.184,279,2.201,280,2.137,281,4.097,282,3.045,283,1.503,284,0.998,288,1.752,291,0.506,310,2.423,311,2.423,312,4.63,313,2.137,314,2.423,316,0.922,321,1.869,340,3.099,360,0.856,393,3.251,433,1.192,435,1.086,436,1.503,464,1.286,469,2.137,498,2.423,508,0.998,513,1.503,515,1.503,518,2.456,541,1.488,542,0.797,544,1.192,549,1.086,619,2.137,622,2.416,623,1.381,624,2.409,625,0.922,627,1.923,645,1.752,679,1.092,702,1.609,703,1.565,706,1.998,710,2.184,712,1.192,729,1.192,731,2.111,732,2.335,740,2.416,749,1.325,758,0.745,773,1.086,781,2.136,783,1.616,817,1.086,847,2.168,849,2.05,858,2.137,859,3.09,860,1.517,862,1.752,867,1.735,868,0.745,870,2.709,872,1.325,876,1.325,909,0.998,962,4.097,991,2.639,1010,1.609,1012,2.145,1013,1.488,1016,2.545,1030,1.923,1031,1.609,1033,1.325,1041,4.876,1043,2.416,1044,1.325,1045,3.613,1049,2.137,1065,2.555,1072,1.752,1139,2.978,1147,0.797,1231,1.325,1238,1.923,1246,1.503,1264,2.685,1312,1.325,1313,1.325,1317,2.685,1320,1.325,1321,1.923,1322,2.145,1324,1.325,1325,1.325,1329,1.192,1334,2.772,1336,1.325,1338,1.503,1339,1.503,1341,2.32,1342,1.086,1343,2.423,1344,3.833,1346,1.923,1347,1.192,1351,2.772,1352,3.379,1355,3.045,1356,1.325,1366,2.423,1367,2.77,1368,1.503,1369,1.503,1370,1.503,1371,1.325,1373,2.32,1382,1.325,1398,1.192,1399,2.416,1401,4.192,1405,1.503,1413,1.503,1432,1.998,1520,1.086,1536,2.423,1540,1.192,1547,1.503,1559,2.32,1560,2.32,1574,2.137,1575,1.503,1581,1.325,1584,3.228,1613,2.423,1634,3.045,1635,2.423,1752,1.503,1877,5.472,2023,1.325,2028,3.494,2032,2.423,2036,3.613,2045,3.494,2051,3.929,2179,1.325,2215,1.503,2303,2.423,2334,1.503,2335,1.503,2337,1.503,2354,1.325,2404,3.58,2409,4.192,2411,1.325,2422,1.503,2424,1.503,2467,1.503,2470,1.503,2494,1.325,2495,1.503,2497,1.503,2499,2.423,2500,1.503,2517,1.325,2524,3.045,2572,2.137,2665,1.503,2670,1.923,2700,1.503,2713,3.115,2737,1.503,2760,2.526,2842,1.503,2843,1.503,2844,1.772,2845,1.772,2846,1.192,2847,2.859,2848,3.592,2849,3.592,2850,1.772,2851,1.772,2852,1.772,2853,2.859,2854,2.859,2855,1.772,2856,2.859,2857,3.592,2858,1.772,2859,3.592,2860,1.772,2861,1.772,2862,1.772,2863,1.772,2864,1.772,2865,1.772,2866,1.772,2867,1.772,2868,1.772,2869,1.772,2870,1.772,2871,1.772,2872,1.772,2873,3.592,2874,1.772,2875,2.423,2876,1.772,2877,1.772,2878,1.772,2879,1.772,2880,1.772,2881,1.772,2882,3.592,2883,1.772,2884,5.084,2885,1.772,2886,1.772,2887,1.772,2888,1.772,2889,1.772,2890,1.772,2891,1.772,2892,1.772,2893,2.859,2894,2.859,2895,2.859,2896,2.859,2897,2.859,2898,1.772,2899,1.772,2900,1.772,2901,1.772,2902,1.772,2903,1.772,2904,1.772,2905,1.772,2906,1.772,2907,1.772,2908,1.772,2909,1.772,2910,3.592,2911,3.833,2912,4.833,2913,4.833,2914,4.833,2915,4.833,2916,6.163,2917,4.121,2918,3.592,2919,1.503,2920,1.772,2921,2.859,2922,1.772,2923,4.521,2924,4.121,2925,1.772,2926,4.521,2927,1.772,2928,1.772,2929,1.772,2930,1.772,2931,1.772,2932,1.772,2933,1.772,2934,2.859,2935,1.772,2936,1.772,2937,1.772,2938,1.772,2939,1.772,2940,1.772,2941,1.772,2942,1.772,2943,1.772,2944,1.772,2945,1.772,2946,1.772,2947,1.772,2948,1.772,2949,1.772,2950,2.859,2951,2.859,2952,1.772,2953,1.772,2954,3.592,2955,2.859,2956,1.772,2957,1.772,2958,1.772,2959,1.772,2960,1.772,2961,3.592,2962,2.859,2963,2.859,2964,2.859,2965,1.772,2966,1.772,2967,2.859,2968,1.772,2969,1.772,2970,1.772,2971,1.772,2972,1.772,2973,1.772,2974,1.772,2975,1.772,2976,3.592,2977,1.772,2978,1.772,2979,1.772,2980,3.592,2981,1.503,2982,1.772,2983,1.772,2984,1.772,2985,1.772,2986,1.772,2987,1.772,2988,1.772,2989,1.772,2990,1.772,2991,1.772,2992,1.772,2993,1.772,2994,1.772,2995,1.772,2996,1.772,2997,1.772,2998,1.772,2999,1.772,3000,1.772,3001,1.772,3002,1.772,3003,1.772,3004,1.772,3005,1.772,3006,1.772,3007,1.772,3008,1.772,3009,2.859,3010,1.772,3011,1.772,3012,1.772,3013,1.772,3014,1.772,3015,1.503,3016,1.772,3017,1.772,3018,1.772,3019,1.772,3020,1.772,3021,1.503,3022,1.772,3023,1.772,3024,1.772,3025,1.772,3026,1.772,3027,1.503,3028,1.772,3029,1.772,3030,1.772,3031,1.503,3032,1.772,3033,1.772,3034,2.859,3035,1.772,3036,1.772,3037,1.772,3038,1.772,3039,1.772,3040,1.772,3041,1.772,3042,1.772,3043,1.772,3044,1.772,3045,1.503,3046,1.772,3047,1.772,3048,1.772]],["title/classes/XRManager.html",[0,0.279,15,1.942]],["body/classes/XRManager.html",[0,0.263,2,0.301,3,0.213,4,0.186,5,0.132,6,2.675,8,0.988,9,0.438,10,3.606,11,1.236,12,1.558,13,1.895,15,2.54,16,0.132,17,0.601,20,0.671,24,1.156,25,3.875,26,4.682,27,3.875,28,4.284,29,3.197,30,4.186,31,3.875,32,3.875,33,0.462,34,4.186,35,3.177,36,3.372,38,4.186,39,3.372,40,4.186,41,3.875,42,0.996,44,1.461,45,2.611,47,0.693,49,0.996,50,0.573,51,0.026,52,0.519,53,0.223,54,0.521,56,0.996,57,0.553,58,0.553,59,0.671,61,1.895,74,2.185,79,1.121,80,0.506,83,3.993,84,1.895,85,2.675,88,1.408,89,4.053,90,2.178,92,2.353,93,2.706,94,1.157,96,2.947,97,2.74,98,3.732,99,3.732,101,2.024,103,0.546,104,3.035,105,3.487,106,3.372,107,1.144,110,2.503,112,0.919,113,3.372,115,2.765,118,2.754,120,2.765,121,1.661,122,3.372,124,3.372,125,2.697,126,1.908,127,3.372,128,2.54,130,2.428,131,4.399,132,3.372,133,3.035,134,0.365,135,0.627,137,3.432,138,2.185,139,1.991,140,2.754,141,2.428,142,2.428,143,1.052,144,3.875,145,2.428,146,2.428,147,1.991,148,1.569,149,2.185,151,0.336,152,0.521,160,2.428,161,0.601,175,2.185,185,0.011,186,0.016,187,0.011,213,0.651,241,1.462,268,0.635,291,0.927,381,1.829,542,1.462,592,2.185,679,0.988,706,1.277,774,2.754,783,1.462,1245,2.185,1269,2.754,1365,2.428,1490,2.54,1669,2.428,1674,2.754,2496,2.754,2648,2.754,2691,2.754,2736,2.754,2760,3.606,2771,2.754,2846,4.577,3049,3.248,3050,4.512,3051,5.183,3052,3.248,3053,3.248,3054,4.512,3055,3.248,3056,3.248,3057,4.512,3058,3.248,3059,3.248,3060,4.512,3061,4.512,3062,4.512,3063,3.248,3064,3.248,3065,3.248,3066,3.248,3067,5.183,3068,3.248,3069,3.248,3070,3.248,3071,4.512,3072,3.248,3073,3.248,3074,5.601,3075,3.248,3076,4.512,3077,3.248,3078,3.248,3079,3.248,3080,3.248,3081,3.248,3082,3.248,3083,3.248,3084,3.248]],["title/changelog.html",[115,1.767,3085,2.156,3086,2.884]],["body/changelog.html",[0,0.395,1,1.219,3,0.274,4,0.104,5,0.17,10,3.602,11,1.353,15,1.639,17,0.486,29,0.876,35,1.111,42,0.805,44,1.353,45,1.072,49,1.133,51,0.013,52,0.27,53,0.096,54,0.304,55,1.259,57,0.357,58,0.447,63,2.726,64,2.559,66,1.814,69,1.522,73,1.31,76,1.784,77,2.776,79,1.259,83,1.021,84,2.774,89,1.639,93,0.876,94,0.753,101,1.662,105,3.881,110,0.712,117,0.7,128,2.575,134,0.513,138,1.219,147,2.235,161,0.388,165,0.943,168,2.363,169,1.111,175,1.219,185,0.006,186,0.01,187,0.006,191,0.816,194,1.639,198,3.269,202,1.355,213,0.526,223,3.451,224,2.235,227,1.111,228,1.111,229,1.958,230,0.971,231,1.355,240,1.111,251,0.626,255,1.921,256,1.009,259,0.885,277,1.355,278,0.876,284,1.021,298,1.537,313,1.355,333,2.509,334,2.453,337,3.284,340,2.308,346,1.537,360,0.876,361,1.355,374,2.176,384,2.173,385,2.726,392,3.144,433,2.453,435,1.784,448,1.784,450,2.053,460,1.537,464,2.308,471,1.406,482,1.639,507,2.726,508,1.639,538,1.219,541,0.943,542,2.197,543,3.54,559,3.877,573,1.355,584,1.355,598,1.355,612,2.453,622,2.808,624,2.155,630,1.355,637,1.219,641,1.219,656,3.65,679,2.059,702,1.639,703,1.886,710,1.406,715,3.099,722,1.537,725,2.176,728,1.958,731,2.398,732,2.577,735,0.876,740,1.958,741,3.536,747,2.726,758,0.762,763,2.176,775,1.219,781,2.051,813,1.958,818,1.537,847,1.686,849,2.515,852,1.537,858,1.355,859,3.15,860,2.079,862,1.784,867,2.017,868,2.155,869,1.784,870,2.209,880,2.053,883,2.559,884,2.176,890,1.537,893,1.111,899,1.111,908,1.355,911,2.808,925,1.537,953,1.537,960,2.38,964,1.355,970,1.111,973,1.219,991,2.96,1013,1.515,1019,2.992,1027,2.802,1065,0.876,1071,1.537,1072,1.111,1082,1.355,1083,2.176,1094,1.537,1121,1.219,1139,1.021,1147,0.816,1172,3.092,1230,1.355,1235,1.537,1238,1.219,1257,2.726,1259,1.355,1328,1.355,1332,1.355,1341,2.351,1347,1.958,1350,1.537,1367,1.111,1373,2.053,1377,1.639,1382,1.355,1399,1.219,1401,1.355,1402,2.468,1432,2.096,1437,1.111,1459,1.219,1490,1.639,1514,1.021,1517,1.111,1521,1.111,1545,1.355,1564,1.537,1584,1.639,1595,1.537,1604,2.176,1605,2.726,1607,2.468,1621,2.468,1625,3.877,1627,2.468,1709,1.537,1713,1.355,1729,1.537,1733,3.092,1740,1.537,1749,2.541,1772,4.114,1789,1.355,1928,3.092,1963,3.092,1972,2.176,2006,1.111,2018,1.355,2034,2.468,2036,1.355,2050,2.726,2051,1.219,2059,2.726,2073,1.537,2097,4.139,2172,3.54,2197,3.877,2241,1.537,2292,2.726,2351,2.176,2354,2.726,2395,1.355,2404,2.559,2406,2.468,2407,2.468,2409,1.355,2494,1.355,2573,1.537,2682,2.468,2683,4.629,2688,4.522,2713,1.784,2725,1.537,2758,1.219,2760,2.992,2769,1.537,2833,1.537,2875,1.537,2919,1.537,2981,4.139,3021,4.522,3027,5.301,3031,1.537,3045,1.537,3085,1.355,3087,1.813,3088,1.813,3089,1.813,3090,1.813,3091,1.813,3092,1.813,3093,2.911,3094,1.813,3095,5.647,3096,2.911,3097,2.911,3098,6.054,3099,6.736,3100,4.573,3101,1.813,3102,1.813,3103,1.813,3104,1.813,3105,1.813,3106,1.813,3107,1.813,3108,1.813,3109,4.882,3110,1.813,3111,1.813,3112,1.813,3113,2.911,3114,1.813,3115,2.911,3116,1.813,3117,1.813,3118,1.813,3119,1.813,3120,4.666,3121,1.813,3122,1.813,3123,6.306,3124,4.882,3125,1.813,3126,5.131,3127,3.54,3128,1.813,3129,3.647,3130,1.813,3131,3.647,3132,1.813,3133,6.717,3134,1.813,3135,1.813,3136,2.911,3137,1.813,3138,1.813,3139,1.813,3140,1.813,3141,3.647,3142,1.813,3143,1.813,3144,1.813,3145,1.813,3146,1.813,3147,1.813,3148,1.813,3149,1.813,3150,2.911,3151,1.813,3152,3.647,3153,1.813,3154,1.813,3155,1.813,3156,1.813,3157,1.813,3158,1.813,3159,1.813,3160,4.573,3161,1.813,3162,1.813,3163,1.813,3164,1.813,3165,1.813,3166,1.813,3167,1.813,3168,3.647,3169,1.813,3170,1.813,3171,1.813,3172,1.813,3173,3.647,3174,1.813,3175,1.813,3176,1.813,3177,4.882,3178,1.813,3179,1.813,3180,1.813,3181,1.813,3182,1.813,3183,1.813,3184,1.813,3185,2.911,3186,3.647,3187,2.911,3188,2.911,3189,3.647,3190,4.573,3191,3.647,3192,3.647,3193,3.647,3194,1.813,3195,2.911,3196,2.911,3197,2.911,3198,1.813,3199,1.813,3200,4.175,3201,3.647,3202,2.911,3203,1.813,3204,1.813,3205,2.911,3206,2.911,3207,2.911,3208,1.813,3209,1.813,3210,1.813,3211,1.813,3212,1.813,3213,1.813,3214,3.647,3215,3.647,3216,3.647,3217,3.647,3218,3.647,3219,3.647,3220,1.813,3221,1.813,3222,1.813,3223,1.813,3224,2.911,3225,3.647,3226,3.647,3227,3.647,3228,1.813,3229,3.647,3230,2.911,3231,3.647,3232,3.647,3233,3.647,3234,2.911,3235,3.647,3236,3.647,3237,3.092,3238,4.175,3239,3.647,3240,3.647,3241,4.882,3242,3.647,3243,3.647,3244,1.813,3245,1.813,3246,3.647,3247,2.911,3248,2.911,3249,2.911,3250,3.647,3251,3.647,3252,2.911,3253,2.468,3254,2.911,3255,1.813,3256,4.175,3257,3.647,3258,1.813,3259,2.911,3260,1.813,3261,2.911,3262,1.813,3263,1.813,3264,1.813,3265,1.813,3266,1.813,3267,1.813,3268,1.813,3269,1.813,3270,1.813,3271,1.813,3272,1.813,3273,1.813,3274,1.813,3275,1.813,3276,1.813,3277,1.813,3278,1.813,3279,1.813,3280,1.537,3281,1.813,3282,1.813,3283,1.813,3284,1.813,3285,1.813,3286,1.813,3287,1.813,3288,1.813,3289,1.813,3290,1.813,3291,1.813,3292,1.813,3293,1.813,3294,2.911,3295,1.813,3296,1.813,3297,1.813,3298,1.813,3299,1.813,3300,1.813,3301,1.813,3302,1.813,3303,1.813,3304,1.813,3305,1.813,3306,1.813,3307,4.882,3308,1.813,3309,1.813,3310,1.813,3311,1.813,3312,1.813,3313,1.813,3314,1.813,3315,1.813,3316,1.813,3317,1.813,3318,1.813,3319,1.813,3320,1.813,3321,3.647,3322,1.813,3323,1.813,3324,1.813,3325,1.813,3326,1.813,3327,1.813,3328,1.813,3329,1.813,3330,2.911,3331,1.813,3332,1.813,3333,1.813,3334,1.813,3335,1.813,3336,1.813,3337,1.813,3338,1.813,3339,1.813,3340,1.813,3341,1.813,3342,1.813,3343,1.813,3344,1.813,3345,1.813,3346,1.813,3347,1.813,3348,1.813,3349,1.813,3350,1.813,3351,2.911,3352,1.813,3353,1.813,3354,1.813,3355,1.813,3356,1.813,3357,1.813,3358,1.813,3359,3.647,3360,1.813,3361,1.813,3362,1.813,3363,2.468,3364,1.813,3365,1.813,3366,1.537,3367,1.813,3368,1.813,3369,1.813,3370,1.813,3371,1.813,3372,1.813,3373,1.813,3374,1.813,3375,1.813,3376,1.813,3377,1.813,3378,1.813,3379,1.813,3380,1.813,3381,1.813,3382,1.813,3383,2.911,3384,1.813,3385,1.813,3386,1.813,3387,2.911,3388,1.813,3389,1.813,3390,2.911,3391,1.813,3392,1.813,3393,1.537,3394,1.813,3395,1.813,3396,3.647,3397,1.813,3398,1.813,3399,1.813,3400,1.813,3401,1.813,3402,1.813,3403,1.813,3404,1.813,3405,1.813,3406,1.813,3407,1.813,3408,1.813,3409,1.813,3410,1.813,3411,1.813,3412,1.813,3413,1.813,3414,1.813,3415,1.813,3416,1.537,3417,1.813,3418,1.813,3419,1.813,3420,1.813,3421,4.175,3422,1.813,3423,1.813,3424,1.813,3425,1.813,3426,1.813,3427,1.813,3428,2.911,3429,1.813,3430,1.813,3431,1.813,3432,1.813,3433,1.813,3434,1.813,3435,1.813,3436,1.813,3437,2.911,3438,1.813,3439,1.813,3440,1.813,3441,1.813,3442,1.813,3443,1.813,3444,1.813,3445,1.813,3446,1.813,3447,1.813,3448,1.813,3449,1.813,3450,1.813,3451,1.813,3452,1.813,3453,1.813,3454,1.813,3455,1.813,3456,1.813,3457,1.813,3458,1.813,3459,1.813,3460,1.813,3461,1.813,3462,1.813,3463,1.813,3464,1.813,3465,1.813,3466,1.813,3467,1.813,3468,1.813,3469,1.813,3470,1.813,3471,1.813,3472,1.813,3473,1.813,3474,1.813,3475,1.813,3476,1.813,3477,1.813,3478,1.813,3479,1.813,3480,1.813,3481,1.813,3482,1.813,3483,1.813,3484,1.813,3485,1.813,3486,1.813,3487,1.813,3488,1.813,3489,1.813,3490,1.813,3491,1.813,3492,1.813,3493,1.813,3494,1.813,3495,1.537,3496,1.813,3497,1.355]],["title/coverage.html",[3498,3.986]],["body/coverage.html",[0,0.586,1,2.742,5,0.166,6,2.743,7,3.456,8,2.143,15,2.295,51,0.025,53,0.134,136,2.295,185,0.014,186,0.018,187,0.014,188,2.295,189,3.047,190,3.047,191,2.858,213,0.588,219,2.762,220,2.742,222,3.927,230,0.543,250,2.742,254,3.456,256,0.9,538,2.742,539,3.456,540,3.927,545,2.498,557,2.742,610,2.742,611,3.219,676,2.742,677,3.306,678,2.742,679,1.597,698,1.969,731,1.934,769,2.295,772,2.958,847,1.407,848,3.456,855,2.498,871,2.742,877,2.958,880,2.295,881,3.456,882,3.927,960,2.122,961,3.456,967,2.742,986,3.047,987,3.456,988,3.047,989,3.927,1010,2.295,1063,3.047,1065,1.969,1228,2.742,1229,3.456,1305,3.456,1306,4.15,1321,2.742,1322,2.122,1357,3.047,1358,3.456,1388,2.742,1422,3.909,1423,3.909,1431,2.122,1432,1.602,1530,3.456,1531,3.456,1554,3.047,1555,3.456,1556,2.742,1559,2.295,1560,2.295,1649,3.456,1686,6.159,1708,3.456,1862,3.047,1951,3.456,2006,2.498,2175,3.456,2176,3.456,2192,3.456,2193,3.456,2239,3.456,2281,3.456,2393,3.047,2394,3.927,2404,2.498,2458,3.047,2459,3.456,2611,3.456,2640,3.047,2670,2.742,2671,3.927,2697,3.456,2702,3.047,2713,2.498,2758,2.742,2759,3.456,2842,4.453,2843,4.453,2846,2.742,3280,3.456,3416,3.456,3498,3.456,3499,4.077,3500,4.077,3501,4.077,3502,5.812,3503,5.812,3504,5.253,3505,5.812,3506,3.456,3507,6.352,3508,4.453,3509,4.077,3510,5.812,3511,5.253,3512,4.077,3513,4.077,3514,5.253,3515,4.077,3516,4.077,3517,4.077,3518,4.077,3519,4.077,3520,5.812,3521,4.077,3522,4.077,3523,4.077,3524,4.077,3525,4.077,3526,4.077,3527,5.253,3528,4.077,3529,4.077,3530,5.253,3531,4.077,3532,4.077,3533,4.077,3534,4.077,3535,4.077,3536,4.077,3537,4.077,3538,5.253,3539,4.077,3540,5.253,3541,4.077,3542,4.077,3543,4.077,3544,4.077,3545,4.077,3546,4.077]],["title/dependencies.html",[3497,2.156,3547,3.516]],["body/dependencies.html",[51,0.025,135,1.071,185,0.019,186,0.022,187,0.019,249,4.704,867,2.681,2747,4.704,3495,4.704,3547,4.704,3548,5.549,3549,5.549,3550,5.549,3551,5.549,3552,5.549,3553,5.549]],["title/miscellaneous/enumerations.html",[3554,1.624,3555,3.516]],["body/miscellaneous/enumerations.html",[6,2.12,8,1.895,10,3.82,16,0.22,51,0.024,53,0.178,58,0.843,83,3.037,89,3.037,137,3.82,185,0.019,186,0.022,187,0.019,230,0.718,256,1.191,450,3.509,611,3.305,612,3.628,677,2.807,678,4.193,679,1.64,700,4.659,708,3.509,728,3.628,773,3.305,775,4.193,2760,3.82,2846,3.628,3554,3.037,3555,4.572,3556,4.572,3557,5.393]],["title/index.html",[16,0.118,115,1.767,3085,2.156]],["body/index.html",[2,0.437,4,0.269,5,0.192,49,1.371,51,0.025,55,1.628,66,1.95,84,2.417,104,3.171,110,1.853,134,0.646,168,1.628,185,0.016,186,0.02,187,0.016,213,0.933,230,0.948,256,1.428,259,1.433,268,0.793,288,3.806,334,3.171,340,2.589,679,1.75,703,1.263,704,3.997,710,2.78,789,3.997,847,2.38,849,2.424,853,3.87,855,3.526,860,2.118,868,2.417,869,2.889,909,2.654,939,3.524,1065,3.259,1139,2.654,1367,2.889,1398,3.171,1400,3.997,1424,4.878,1548,3.171,1556,4.177,2395,3.524,2572,4.301,2721,4.878,2722,3.997,3015,4.878,3120,3.997,3127,3.997,3237,3.997,3363,4.878,3366,4.878,3393,5.265,3497,3.524,3558,4.714,3559,4.714,3560,4.714,3561,4.714,3562,4.714,3563,4.714,3564,5.754,3565,4.714,3566,5.754,3567,4.714,3568,4.714,3569,4.714,3570,5.754,3571,4.714,3572,4.714,3573,4.714,3574,4.714,3575,4.714,3576,4.714,3577,4.714,3578,5.754,3579,4.714,3580,4.714,3581,4.714,3582,4.714,3583,4.714,3584,4.714,3585,4.714]],["title/modules.html",[3586,3.986]],["body/modules.html",[51,0.022,185,0.02,186,0.022,187,0.02,3586,4.78]],["title/overview.html",[3587,3.986]],["body/overview.html",[2,0.521,51,0.022,185,0.02,186,0.022,187,0.02,221,3.442,3587,4.761,3588,5.616,3589,5.616]],["title/miscellaneous/typealiases.html",[3554,1.624,3590,4.148]],["body/miscellaneous/typealiases.html",[16,0.203,51,0.021,53,0.236,66,1.999,94,1.227,96,2.236,128,2.799,168,2.051,185,0.017,186,0.021,187,0.017,189,3.715,190,4.441,204,5.037,233,2.194,519,3.641,611,3.046,677,3.092,678,3.996,679,1.511,705,5.037,731,2.579,732,3.335,741,3.641,781,2.088,847,1.716,877,2.799,924,4.214,1121,3.343,1609,5.037,1735,5.037,1749,3.622,1771,5.037,1803,4.214,1812,4.214,2773,4.214,2774,4.214,3554,2.799,3556,4.214,3591,4.97,3592,4.97,3593,5.941,3594,7.041,3595,7.071,3596,5.941,3597,5.941,3598,5.941,3599,5.941,3600,5.941,3601,6.355,3602,4.97,3603,4.97,3604,4.97]],["title/miscellaneous/variables.html",[3554,1.624,3605,3.516]],["body/miscellaneous/variables.html",[5,0.274,8,1.735,16,0.19,49,1.027,51,0.025,53,0.218,57,0.789,58,0.789,66,1.328,69,1.629,80,1.029,84,1.954,90,1.954,107,1.26,112,0.671,143,1.507,185,0.016,186,0.02,187,0.016,191,2.093,213,1.006,230,0.62,256,1.421,259,1.414,268,0.789,333,1.954,384,2.421,448,2.85,477,3.943,557,3.839,679,1.877,725,3.477,859,2.421,860,1.712,861,3.477,866,3.213,870,2.247,1012,2.421,1306,3.497,1377,2.619,1388,3.839,1399,3.839,1604,3.477,1605,3.477,1749,2.421,1772,3.477,2394,3.477,2398,3.943,2404,3.945,2411,3.477,2423,3.943,2640,4.266,2671,3.477,2683,3.477,2684,3.943,2701,3.943,2702,4.266,2911,4.838,3253,3.943,3506,3.943,3508,3.943,3554,2.619,3605,3.943,3606,4.651,3607,4.651,3608,5.707,3609,4.651,3610,6.174,3611,4.651,3612,5.707,3613,4.651,3614,4.651,3615,4.651,3616,4.651,3617,6.438,3618,5.707,3619,4.651,3620,4.651,3621,5.707,3622,4.651,3623,4.651,3624,4.651,3625,4.651,3626,5.707,3627,4.651,3628,4.651,3629,4.651,3630,4.651,3631,4.651,3632,4.651,3633,4.651,3634,4.651,3635,4.651,3636,4.651,3637,4.651,3638,4.651,3639,4.651,3640,4.651,3641,4.651,3642,4.651,3643,4.651,3644,4.651,3645,4.651,3646,4.651,3647,4.651,3648,4.651]]],"invertedIndex":[["",{"_index":51,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":291,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["0.0",{"_index":1113,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["0.0002",{"_index":1494,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["0.01",{"_index":173,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/PhoenixMenuUI.html":{}}}],["0.05",{"_index":1904,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["0.1",{"_index":592,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/XRManager.html":{}}}],["0.130.1",{"_index":3553,"title":{},"body":{"dependencies.html":{}}}],["0.2",{"_index":2064,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0.22",{"_index":2123,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0.25",{"_index":319,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["0.3",{"_index":2081,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0.5",{"_index":1496,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["0.7",{"_index":605,"title":{},"body":{"classes/CMSObjects.html":{}}}],["0.7.7",{"_index":3549,"title":{},"body":{"dependencies.html":{}}}],["0.75",{"_index":320,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["000",{"_index":2625,"title":{},"body":{"classes/StateManager.html":{}}}],["000000",{"_index":1100,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["000ab78",{"_index":3185,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":3259,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":3370,"title":{},"body":{"changelog.html":{}}}],["029d526",{"_index":3440,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":3097,"title":{},"body":{"changelog.html":{}}}],["037af62",{"_index":3145,"title":{},"body":{"changelog.html":{}}}],["03a1de4",{"_index":3337,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":3261,"title":{},"body":{"changelog.html":{}}}],["04dc545",{"_index":3453,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":3256,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":3141,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":3461,"title":{},"body":{"changelog.html":{}}}],["07/07/2021",{"_index":150,"title":{},"body":{"classes/ARManager.html":{}}}],["07d8633",{"_index":3162,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":3096,"title":{},"body":{"changelog.html":{}}}],["0837334",{"_index":3391,"title":{},"body":{"changelog.html":{}}}],["08c8e00",{"_index":3122,"title":{},"body":{"changelog.html":{}}}],["0980379",{"_index":3467,"title":{},"body":{"changelog.html":{}}}],["0a26fea",{"_index":3464,"title":{},"body":{"changelog.html":{}}}],["0b2dd8a",{"_index":3339,"title":{},"body":{"changelog.html":{}}}],["0b95e5b",{"_index":3277,"title":{},"body":{"changelog.html":{}}}],["0x000000",{"_index":1163,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["0x000fff",{"_index":2930,"title":{},"body":{"interfaces/Window.html":{}}}],["0x8c8c8c",{"_index":3575,"title":{},"body":{"index.html":{}}}],["0xafafaf",{"_index":1211,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["0xffffff",{"_index":604,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ColorManager.html":{}}}],["1",{"_index":71,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["1.0",{"_index":1102,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["1.0.1",{"_index":3495,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["1.0.2",{"_index":3492,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":3460,"title":{},"body":{"changelog.html":{}}}],["1.2.0",{"_index":3420,"title":{},"body":{"changelog.html":{}}}],["1.3.0",{"_index":3401,"title":{},"body":{"changelog.html":{}}}],["1.4.0",{"_index":3369,"title":{},"body":{"changelog.html":{}}}],["1.5.0",{"_index":3340,"title":{},"body":{"changelog.html":{}}}],["1.6.0",{"_index":3271,"title":{},"body":{"changelog.html":{}}}],["1.7.0",{"_index":3260,"title":{},"body":{"changelog.html":{}}}],["1.8.0",{"_index":3258,"title":{},"body":{"changelog.html":{}}}],["1.9.0",{"_index":3255,"title":{},"body":{"changelog.html":{}}}],["1/1",{"_index":3507,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":73,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/InfoLogger.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/State.html":{},"changelog.html":{}}}],["10/10",{"_index":3521,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1686,"title":{},"body":{"classes/LoadingManager.html":{},"coverage.html":{}}}],["1000",{"_index":267,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["10000",{"_index":422,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["11",{"_index":1071,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"changelog.html":{}}}],["1100",{"_index":2261,"title":{},"body":{"classes/RKHelper.html":{}}}],["11000",{"_index":442,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["12",{"_index":3422,"title":{},"body":{"changelog.html":{}}}],["12/12",{"_index":3529,"title":{},"body":{"coverage.html":{}}}],["124a272",{"_index":3213,"title":{},"body":{"changelog.html":{}}}],["1261358",{"_index":3487,"title":{},"body":{"changelog.html":{}}}],["13/13",{"_index":3534,"title":{},"body":{"coverage.html":{}}}],["14e4cbb",{"_index":3180,"title":{},"body":{"changelog.html":{}}}],["15/15",{"_index":3527,"title":{},"body":{"coverage.html":{}}}],["15dd07c",{"_index":3170,"title":{},"body":{"changelog.html":{}}}],["16",{"_index":3257,"title":{},"body":{"changelog.html":{}}}],["16/16",{"_index":3537,"title":{},"body":{"coverage.html":{}}}],["16ea0df",{"_index":3108,"title":{},"body":{"changelog.html":{}}}],["17.4.0",{"_index":3548,"title":{},"body":{"dependencies.html":{}}}],["17/17",{"_index":3528,"title":{},"body":{"coverage.html":{}}}],["17909eb",{"_index":3483,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":3272,"title":{},"body":{"changelog.html":{}}}],["18/18",{"_index":3544,"title":{},"body":{"coverage.html":{}}}],["18f8db2",{"_index":3443,"title":{},"body":{"changelog.html":{}}}],["19/19",{"_index":3530,"title":{},"body":{"coverage.html":{}}}],["1906976",{"_index":3481,"title":{},"body":{"changelog.html":{}}}],["1975d70",{"_index":3439,"title":{},"body":{"changelog.html":{}}}],["1].foreach((chargevalue",{"_index":808,"title":{},"body":{"classes/ColorOptions.html":{}}}],["1].oncomplete",{"_index":459,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["1a01248",{"_index":3193,"title":{},"body":{"changelog.html":{}}}],["1a17e99",{"_index":3232,"title":{},"body":{"changelog.html":{}}}],["1af6ae2",{"_index":3197,"title":{},"body":{"changelog.html":{}}}],["1dd0431",{"_index":3204,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":837,"title":{},"body":{"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{}}}],["2.0",{"_index":938,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["2.0.0",{"_index":3184,"title":{},"body":{"changelog.html":{}}}],["2.1.0",{"_index":3140,"title":{},"body":{"changelog.html":{}}}],["2.2.0",{"_index":3094,"title":{},"body":{"changelog.html":{}}}],["2/2",{"_index":3502,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1896,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"classes/VRManager.html":{}}}],["20/06/2021",{"_index":2788,"title":{},"body":{"classes/VRManager.html":{}}}],["20/20",{"_index":3542,"title":{},"body":{"coverage.html":{}}}],["2000",{"_index":530,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["2020",{"_index":3421,"title":{},"body":{"changelog.html":{}}}],["2021",{"_index":3095,"title":{},"body":{"changelog.html":{}}}],["20ef288",{"_index":3219,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":3262,"title":{},"body":{"changelog.html":{}}}],["21/21",{"_index":3523,"title":{},"body":{"coverage.html":{}}}],["2219a3e",{"_index":3385,"title":{},"body":{"changelog.html":{}}}],["22a1ec8",{"_index":3445,"title":{},"body":{"changelog.html":{}}}],["23/23",{"_index":3540,"title":{},"body":{"coverage.html":{}}}],["236bdf4",{"_index":3281,"title":{},"body":{"changelog.html":{}}}],["2371f75",{"_index":3244,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":298,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["24/24",{"_index":3520,"title":{},"body":{"coverage.html":{}}}],["257",{"_index":3301,"title":{},"body":{"changelog.html":{}}}],["25b2a9d",{"_index":3449,"title":{},"body":{"changelog.html":{}}}],["266af04",{"_index":3347,"title":{},"body":{"changelog.html":{}}}],["26eff0e",{"_index":3130,"title":{},"body":{"changelog.html":{}}}],["2700aaf",{"_index":3167,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":3142,"title":{},"body":{"changelog.html":{}}}],["28/06/2021",{"_index":140,"title":{},"body":{"classes/ARManager.html":{},"classes/XRManager.html":{}}}],["28/28",{"_index":3526,"title":{},"body":{"coverage.html":{}}}],["289",{"_index":3192,"title":{},"body":{"changelog.html":{}}}],["29/06/2021",{"_index":3055,"title":{},"body":{"classes/XRManager.html":{}}}],["29/08/2020",{"_index":2787,"title":{},"body":{"classes/VRManager.html":{}}}],["29/29",{"_index":3519,"title":{},"body":{"coverage.html":{}}}],["29093a2",{"_index":3331,"title":{},"body":{"changelog.html":{}}}],["2c97f5c",{"_index":3220,"title":{},"body":{"changelog.html":{}}}],["2e16371",{"_index":3329,"title":{},"body":{"changelog.html":{}}}],["2e52c22",{"_index":3236,"title":{},"body":{"changelog.html":{}}}],["2fa310f",{"_index":3367,"title":{},"body":{"changelog.html":{}}}],["2rem",{"_index":1070,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["3",{"_index":300,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{}}}],["3.0",{"_index":958,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["3.3333",{"_index":2608,"title":{},"body":{"classes/State.html":{}}}],["3.6.0",{"_index":3551,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":3511,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":511,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{}}}],["300",{"_index":492,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["3000",{"_index":400,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/RKHelper.html":{}}}],["3017ca9",{"_index":3159,"title":{},"body":{"changelog.html":{}}}],["303187a",{"_index":3208,"title":{},"body":{"changelog.html":{}}}],["3041166",{"_index":3248,"title":{},"body":{"changelog.html":{}}}],["30b0383",{"_index":3450,"title":{},"body":{"changelog.html":{}}}],["30b5160",{"_index":3327,"title":{},"body":{"changelog.html":{}}}],["32",{"_index":480,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["33/33",{"_index":3513,"title":{},"body":{"coverage.html":{}}}],["336",{"_index":3114,"title":{},"body":{"changelog.html":{}}}],["3475836",{"_index":3373,"title":{},"body":{"changelog.html":{}}}],["34d9b2c",{"_index":3125,"title":{},"body":{"changelog.html":{}}}],["359d353",{"_index":3349,"title":{},"body":{"changelog.html":{}}}],["36/36",{"_index":3533,"title":{},"body":{"coverage.html":{}}}],["36486b8",{"_index":3132,"title":{},"body":{"changelog.html":{}}}],["3756330",{"_index":3389,"title":{},"body":{"changelog.html":{}}}],["37df19f",{"_index":3425,"title":{},"body":{"changelog.html":{}}}],["38/38",{"_index":3543,"title":{},"body":{"coverage.html":{}}}],["3839578",{"_index":3247,"title":{},"body":{"changelog.html":{}}}],["39/39",{"_index":3516,"title":{},"body":{"coverage.html":{}}}],["3918159",{"_index":3469,"title":{},"body":{"changelog.html":{}}}],["39241a4",{"_index":3105,"title":{},"body":{"changelog.html":{}}}],["399ac77",{"_index":3494,"title":{},"body":{"changelog.html":{}}}],["3b1991c",{"_index":3345,"title":{},"body":{"changelog.html":{}}}],["3ce675f",{"_index":3381,"title":{},"body":{"changelog.html":{}}}],["3d",{"_index":758,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["3daabc5",{"_index":3155,"title":{},"body":{"changelog.html":{}}}],["3e5d80d",{"_index":3194,"title":{},"body":{"changelog.html":{}}}],["3f6367f",{"_index":3384,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":3589,"title":{},"body":{"overview.html":{}}}],["4/4",{"_index":3510,"title":{},"body":{"coverage.html":{}}}],["4000",{"_index":1022,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["40bbba0",{"_index":3292,"title":{},"body":{"changelog.html":{}}}],["41",{"_index":3588,"title":{},"body":{"overview.html":{}}}],["41/41",{"_index":3541,"title":{},"body":{"coverage.html":{}}}],["4262a1b",{"_index":3456,"title":{},"body":{"changelog.html":{}}}],["455f536",{"_index":3309,"title":{},"body":{"changelog.html":{}}}],["45a0123",{"_index":3334,"title":{},"body":{"changelog.html":{}}}],["4603dbc",{"_index":3106,"title":{},"body":{"changelog.html":{}}}],["46b8aee",{"_index":3137,"title":{},"body":{"changelog.html":{}}}],["4764196",{"_index":3427,"title":{},"body":{"changelog.html":{}}}],["48130b2",{"_index":3458,"title":{},"body":{"changelog.html":{}}}],["4acca1a",{"_index":3251,"title":{},"body":{"changelog.html":{}}}],["4b10452",{"_index":3459,"title":{},"body":{"changelog.html":{}}}],["4f80bd6",{"_index":3372,"title":{},"body":{"changelog.html":{}}}],["5/5",{"_index":3509,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":2077,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/VRManager.html":{}}}],["500",{"_index":296,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["5000",{"_index":476,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["50000",{"_index":736,"title":{},"body":{"classes/ColorOptions.html":{}}}],["50c2584",{"_index":3295,"title":{},"body":{"changelog.html":{}}}],["50fc5f7",{"_index":3165,"title":{},"body":{"changelog.html":{}}}],["5139c6e",{"_index":3410,"title":{},"body":{"changelog.html":{}}}],["5283e9a",{"_index":3470,"title":{},"body":{"changelog.html":{}}}],["5334996",{"_index":3161,"title":{},"body":{"changelog.html":{}}}],["5389282",{"_index":3323,"title":{},"body":{"changelog.html":{}}}],["54/54",{"_index":3501,"title":{},"body":{"coverage.html":{}}}],["56c6eff",{"_index":3218,"title":{},"body":{"changelog.html":{}}}],["56f94f0",{"_index":3304,"title":{},"body":{"changelog.html":{}}}],["56ff275",{"_index":3336,"title":{},"body":{"changelog.html":{}}}],["5743adc",{"_index":3332,"title":{},"body":{"changelog.html":{}}}],["57e438f",{"_index":3302,"title":{},"body":{"changelog.html":{}}}],["5894cac",{"_index":3172,"title":{},"body":{"changelog.html":{}}}],["595d9e5",{"_index":3240,"title":{},"body":{"changelog.html":{}}}],["5a562ab",{"_index":3300,"title":{},"body":{"changelog.html":{}}}],["5a8fe9f",{"_index":3254,"title":{},"body":{"changelog.html":{}}}],["5bdc562",{"_index":3266,"title":{},"body":{"changelog.html":{}}}],["5ea04f1",{"_index":3365,"title":{},"body":{"changelog.html":{}}}],["5f0f942",{"_index":3454,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":350,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["6/6",{"_index":3505,"title":{},"body":{"coverage.html":{}}}],["60269f7",{"_index":3399,"title":{},"body":{"changelog.html":{}}}],["6085f50",{"_index":3215,"title":{},"body":{"changelog.html":{}}}],["612205c",{"_index":3488,"title":{},"body":{"changelog.html":{}}}],["62ae417",{"_index":3148,"title":{},"body":{"changelog.html":{}}}],["6486982",{"_index":3324,"title":{},"body":{"changelog.html":{}}}],["65/65",{"_index":3539,"title":{},"body":{"coverage.html":{}}}],["66cbbc0",{"_index":3284,"title":{},"body":{"changelog.html":{}}}],["689da29",{"_index":3188,"title":{},"body":{"changelog.html":{}}}],["68cd7ad",{"_index":3325,"title":{},"body":{"changelog.html":{}}}],["68f3d45",{"_index":3230,"title":{},"body":{"changelog.html":{}}}],["6943f79",{"_index":3418,"title":{},"body":{"changelog.html":{}}}],["69d3f75",{"_index":3451,"title":{},"body":{"changelog.html":{}}}],["6a834e8",{"_index":3287,"title":{},"body":{"changelog.html":{}}}],["6cd5d53",{"_index":3226,"title":{},"body":{"changelog.html":{}}}],["6dbd797",{"_index":3196,"title":{},"body":{"changelog.html":{}}}],["6e919e1",{"_index":3221,"title":{},"body":{"changelog.html":{}}}],["6ef17d0",{"_index":3305,"title":{},"body":{"changelog.html":{}}}],["7/7",{"_index":3504,"title":{},"body":{"coverage.html":{}}}],["717304e",{"_index":3146,"title":{},"body":{"changelog.html":{}}}],["73b7c27",{"_index":3465,"title":{},"body":{"changelog.html":{}}}],["7528ee0",{"_index":3288,"title":{},"body":{"changelog.html":{}}}],["7632a18",{"_index":3310,"title":{},"body":{"changelog.html":{}}}],["789da8b",{"_index":3417,"title":{},"body":{"changelog.html":{}}}],["79e6d7c",{"_index":3398,"title":{},"body":{"changelog.html":{}}}],["7b839e3",{"_index":3151,"title":{},"body":{"changelog.html":{}}}],["7bcd7ba",{"_index":3353,"title":{},"body":{"changelog.html":{}}}],["7d1ca22",{"_index":3491,"title":{},"body":{"changelog.html":{}}}],["7d2eb64",{"_index":3245,"title":{},"body":{"changelog.html":{}}}],["7d606b2",{"_index":3419,"title":{},"body":{"changelog.html":{}}}],["7d90d72",{"_index":3298,"title":{},"body":{"changelog.html":{}}}],["7e9c733",{"_index":3110,"title":{},"body":{"changelog.html":{}}}],["7f35fdb",{"_index":3102,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":446,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["8/8",{"_index":3514,"title":{},"body":{"coverage.html":{}}}],["854e543",{"_index":3311,"title":{},"body":{"changelog.html":{}}}],["8559830",{"_index":3250,"title":{},"body":{"changelog.html":{}}}],["85d4a14",{"_index":3306,"title":{},"body":{"changelog.html":{}}}],["867d28a",{"_index":3135,"title":{},"body":{"changelog.html":{}}}],["872f708",{"_index":3243,"title":{},"body":{"changelog.html":{}}}],["8a0c0b1",{"_index":3217,"title":{},"body":{"changelog.html":{}}}],["8b994a7",{"_index":3199,"title":{},"body":{"changelog.html":{}}}],["8ba94e7",{"_index":3411,"title":{},"body":{"changelog.html":{}}}],["8cbcaa5",{"_index":3344,"title":{},"body":{"changelog.html":{}}}],["8d7b160",{"_index":3388,"title":{},"body":{"changelog.html":{}}}],["8e2eff4",{"_index":3338,"title":{},"body":{"changelog.html":{}}}],["8e7396f",{"_index":3178,"title":{},"body":{"changelog.html":{}}}],["8f3e8e1",{"_index":3429,"title":{},"body":{"changelog.html":{}}}],["9/9",{"_index":3503,"title":{},"body":{"coverage.html":{}}}],["90aea3c",{"_index":3225,"title":{},"body":{"changelog.html":{}}}],["9222e04",{"_index":3242,"title":{},"body":{"changelog.html":{}}}],["9474565",{"_index":3455,"title":{},"body":{"changelog.html":{}}}],["947f6bf",{"_index":3447,"title":{},"body":{"changelog.html":{}}}],["9540af5",{"_index":3356,"title":{},"body":{"changelog.html":{}}}],["9908cc9",{"_index":3233,"title":{},"body":{"changelog.html":{}}}],["9a6c243",{"_index":3134,"title":{},"body":{"changelog.html":{}}}],["9a79692",{"_index":3249,"title":{},"body":{"changelog.html":{}}}],["9a88331",{"_index":3128,"title":{},"body":{"changelog.html":{}}}],["9e3dc20",{"_index":3490,"title":{},"body":{"changelog.html":{}}}],["9eb21f5",{"_index":3475,"title":{},"body":{"changelog.html":{}}}],["9efd9ca",{"_index":3480,"title":{},"body":{"changelog.html":{}}}],["9f4cf7c",{"_index":3112,"title":{},"body":{"changelog.html":{}}}],["_hitparamsclone",{"_index":1994,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["a411631",{"_index":3228,"title":{},"body":{"changelog.html":{}}}],["a474af2",{"_index":3364,"title":{},"body":{"changelog.html":{}}}],["a5481e1",{"_index":3182,"title":{},"body":{"changelog.html":{}}}],["a5eaa34",{"_index":3139,"title":{},"body":{"changelog.html":{}}}],["a6a1c19",{"_index":3424,"title":{},"body":{"changelog.html":{}}}],["a821e42",{"_index":3149,"title":{},"body":{"changelog.html":{}}}],["a8a8a8",{"_index":1198,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["a8f8353",{"_index":3346,"title":{},"body":{"changelog.html":{}}}],["ab8feb4",{"_index":3432,"title":{},"body":{"changelog.html":{}}}],["ability",{"_index":3021,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["aborting",{"_index":2102,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["absolute",{"_index":1069,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ac0c4f1",{"_index":3350,"title":{},"body":{"changelog.html":{}}}],["acc",{"_index":1695,"title":{},"body":{"classes/LoadingManager.html":{}}}],["access",{"_index":3005,"title":{},"body":{"interfaces/Window.html":{}}}],["accessing",{"_index":2423,"title":{},"body":{"classes/ScriptLoader.html":{},"miscellaneous/variables.html":{}}}],["active",{"_index":93,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["activecamera",{"_index":257,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/StateManager.html":{}}}],["activeobject",{"_index":2460,"title":{},"body":{"classes/SelectionManager.html":{}}}],["activevariable",{"_index":188,"title":{"classes/ActiveVariable.html":{}},"body":{"classes/ActiveVariable.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["activevariable(0",{"_index":2623,"title":{},"body":{"classes/StateManager.html":{}}}],["activevariable(false",{"_index":2624,"title":{},"body":{"classes/StateManager.html":{}}}],["actual",{"_index":347,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["add",{"_index":703,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["add('could",{"_index":2738,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["add(cut",{"_index":1181,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(data",{"_index":1542,"title":{},"body":{"classes/InfoLogger.html":{}}}],["add(k1.clone().multiplyscalar(h2",{"_index":1468,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k1.clone().multiplyscalar(half_h",{"_index":1471,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k2",{"_index":1501,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k2.clone().multiplyscalar(2",{"_index":1505,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k2.clone().multiplyscalar(half_h",{"_index":1475,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3",{"_index":1502,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3.clone().multiplyscalar(2",{"_index":1506,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3.clone().multiplyscalar(h",{"_index":1481,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3.clone().multiplyscalar(h2",{"_index":1478,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k4",{"_index":1507,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(state.dir.clone().multiplyscalar(h",{"_index":1477,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(state.dir.clone().multiplyscalar(half_h",{"_index":1467,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(this.guiparameters.eventdata",{"_index":1151,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(this.guiparameters.geometries",{"_index":1086,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(this.guiparameters.labels",{"_index":1201,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(this.guiparameters[collectionname",{"_index":1170,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(this.guiparameters[labelid",{"_index":1215,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(this.guiparameters[name",{"_index":1112,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["addchild",{"_index":1717,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addchild(name",{"_index":1744,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addcollection",{"_index":999,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{}}}],["addcollection(objectcollection",{"_index":1585,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["addcollection(typefolder",{"_index":1026,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addcolor(this.guiparameters.labels",{"_index":1206,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["addcolor(this.guiparameters[collectionname",{"_index":1173,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["addcolor(this.guiparameters[labelid",{"_index":1218,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["addcolor(this.guiparameters[name",{"_index":1108,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["addconfig",{"_index":1718,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addconfig('button",{"_index":1905,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{}}}],["addconfig('checkbox",{"_index":1892,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["addconfig('color",{"_index":1902,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["addconfig('label",{"_index":1925,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["addconfig('slider",{"_index":1894,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["addconfig(type",{"_index":1746,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["added",{"_index":1031,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["addeventdatafolder",{"_index":1000,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addeventdatatypefolder",{"_index":1001,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addeventdatatypefolder(typename",{"_index":1036,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addeventlistener('click",{"_index":2536,"title":{},"body":{"classes/SelectionManager.html":{}}}],["addeventlistener('mousemove",{"_index":2534,"title":{},"body":{"classes/SelectionManager.html":{}}}],["addeventlistener('touchstart",{"_index":2538,"title":{},"body":{"classes/SelectionManager.html":{}}}],["addface3",{"_index":561,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('back_1",{"_index":574,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('back_3",{"_index":577,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('back_4",{"_index":582,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('front_1",{"_index":567,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('front_2",{"_index":580,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('front_3",{"_index":570,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addgeometry",{"_index":1002,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addgeometry(name",{"_index":1040,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addgeomfolder",{"_index":1003,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["adding",{"_index":125,"title":{},"body":{"classes/ARManager.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["addlabel",{"_index":1004,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addlabel(labelid",{"_index":1047,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addlabelsfolder",{"_index":1005,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addlabelsfolder(configfunctions",{"_index":1051,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addlabeltoeventobject",{"_index":1309,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["addlabeltoeventobject(label",{"_index":1316,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["addlabeltoobject",{"_index":3043,"title":{},"body":{"interfaces/Window.html":{}}}],["addloadableitem",{"_index":1654,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadableitem(id",{"_index":1666,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistener",{"_index":1655,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistener(callback",{"_index":1668,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistenerwithcheck",{"_index":1656,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistenerwithcheck(callback",{"_index":1671,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addobjecttype",{"_index":1562,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["addobjecttype(object",{"_index":1600,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["addoutlinepassforselection",{"_index":1239,"title":{},"body":{"classes/EffectsManager.html":{}}}],["addprogresslistener",{"_index":1657,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addprogresslistener(callback",{"_index":1673,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addrenderer",{"_index":2286,"title":{},"body":{"classes/RendererManager.html":{}}}],["addrenderer(renderer",{"_index":2308,"title":{},"body":{"classes/RendererManager.html":{}}}],["adds",{"_index":1043,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["addscaleoptions",{"_index":1563,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["addscaleoptions(configkey",{"_index":1608,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["ae76d4a",{"_index":3169,"title":{},"body":{"changelog.html":{}}}],["again",{"_index":374,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["against",{"_index":640,"title":{},"body":{"classes/ColorManager.html":{}}}],["aliases",{"_index":3591,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allcolorbyoptions",{"_index":680,"title":{},"body":{"classes/ColorOptions.html":{}}}],["alleventdata",{"_index":443,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alleventdata.getobjectbyname('track",{"_index":502,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alleventdata.traverse((eventobject",{"_index":466,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alleventdata.visible",{"_index":509,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["allfacepositions",{"_index":560,"title":{},"body":{"classes/CMSObjects.html":{}}}],["allfacepositions.concat",{"_index":563,"title":{},"body":{"classes/CMSObjects.html":{}}}],["allow",{"_index":858,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["allowcustomvalue",{"_index":828,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{}}}],["allowed",{"_index":975,"title":{},"body":{"classes/Cut.html":{}}}],["allowing",{"_index":1368,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["allowselection(selectedobject",{"_index":3019,"title":{},"body":{"interfaces/Window.html":{}}}],["allowurloptions",{"_index":850,"title":{},"body":{"interfaces/Configuration.html":{}}}],["allscripts",{"_index":2428,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["alltweens",{"_index":327,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens.push(animationspheretween",{"_index":425,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens.push(eventobjecttween",{"_index":358,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens.push(scaletween",{"_index":378,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens.push(tween",{"_index":456,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens[0].onstart",{"_index":426,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens[alltweens.length",{"_index":458,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["along",{"_index":287,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixObjects.html":{}}}],["alongaxisposition",{"_index":290,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alpha",{"_index":2348,"title":{},"body":{"classes/RendererManager.html":{}}}],["already",{"_index":1145,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/ScriptLoader.html":{}}}],["always",{"_index":3390,"title":{},"body":{"changelog.html":{}}}],["ambientlight",{"_index":2514,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ambientlight().type",{"_index":2521,"title":{},"body":{"classes/SelectionManager.html":{}}}],["angle",{"_index":299,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/PresetView.html":{},"classes/StateManager.html":{}}}],["angles",{"_index":896,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["anglesaresane",{"_index":886,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["anglesaresane(theta",{"_index":892,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["angular",{"_index":3127,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["animate",{"_index":277,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["animateclippingwithcollision",{"_index":515,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["animateevent",{"_index":317,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animateeventafterinterval",{"_index":225,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animateeventwithclipping",{"_index":441,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animateeventwithcollision(tweenduration",{"_index":513,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["animatepreset(animationpreset",{"_index":3039,"title":{},"body":{"interfaces/Window.html":{}}}],["animatethroughevent",{"_index":283,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["animatewithcollision",{"_index":500,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animating",{"_index":264,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["animation",{"_index":223,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["animationclipplane",{"_index":453,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationclipplane.constant",{"_index":454,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationclipplanes",{"_index":447,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationfunction",{"_index":499,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationfunction(tweenduration",{"_index":512,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationpreset",{"_index":220,"title":{"interfaces/AnimationPreset.html":{}},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["animations",{"_index":313,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["animationsmanager",{"_index":254,"title":{},"body":{"interfaces/AnimationPreset.html":{},"coverage.html":{}}}],["animationsphere",{"_index":323,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretween",{"_index":398,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretween.chain(animationspheretweenclone",{"_index":424,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretween.onupdate(onanimationsphereupdate",{"_index":419,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretweenclone",{"_index":421,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretweenclone.oncomplete",{"_index":430,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretweenclone.onupdate(onanimationsphereupdate",{"_index":423,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["another",{"_index":3484,"title":{},"body":{"changelog.html":{}}}],["antialias",{"_index":1259,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"changelog.html":{}}}],["antialiasing",{"_index":1235,"title":{},"body":{"classes/EffectsManager.html":{},"changelog.html":{}}}],["antialiasrender",{"_index":1240,"title":{},"body":{"classes/EffectsManager.html":{}}}],["antialiasrender(scene",{"_index":1266,"title":{},"body":{"classes/EffectsManager.html":{}}}],["any).geometry",{"_index":406,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["any)?.material.color",{"_index":506,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["any)?.material?.color",{"_index":505,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["any)?.xr",{"_index":3059,"title":{},"body":{"classes/XRManager.html":{}}}],["api",{"_index":3559,"title":{},"body":{"index.html":{}}}],["app",{"_index":3133,"title":{},"body":{"changelog.html":{}}}],["appended",{"_index":2421,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["application",{"_index":3563,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":3618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applied",{"_index":465,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{}}}],["applies",{"_index":915,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["apply",{"_index":712,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["applychargecoloroptions",{"_index":686,"title":{},"body":{"classes/ColorOptions.html":{}}}],["applyconfigstate",{"_index":1719,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["applyconfigstate(config",{"_index":1750,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["applyembedoption",{"_index":2673,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyeventoptions",{"_index":2674,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyeventoptions(defaulteventpath",{"_index":2685,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyhidewidgetsoptions",{"_index":2675,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applying",{"_index":3428,"title":{},"body":{"changelog.html":{}}}],["applymomcoloroptions",{"_index":687,"title":{},"body":{"classes/ColorOptions.html":{}}}],["applyoptions",{"_index":2676,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyvertexcoloroptions",{"_index":688,"title":{},"body":{"classes/ColorOptions.html":{}}}],["ar",{"_index":10,"title":{},"body":{"classes/ARManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["archive",{"_index":3355,"title":{},"body":{"changelog.html":{}}}],["armanager",{"_index":1,"title":{"classes/ARManager.html":{}},"body":{"classes/ARManager.html":{},"changelog.html":{},"coverage.html":{}}}],["armanager.enabledomoverlay",{"_index":162,"title":{},"body":{"classes/ARManager.html":{}}}],["around",{"_index":2783,"title":{},"body":{"classes/VRManager.html":{}}}],["array",{"_index":518,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["array.from",{"_index":386,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["array.isarray(first",{"_index":2099,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["array.isarray(hitsparams",{"_index":2093,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["arraybuffer",{"_index":2946,"title":{},"body":{"interfaces/Window.html":{}}}],["arrays",{"_index":2104,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{}}}],["aspects",{"_index":2854,"title":{},"body":{"interfaces/Window.html":{}}}],["assets/preset",{"_index":2190,"title":{},"body":{"classes/PresetView.html":{}}}],["assign",{"_index":3402,"title":{},"body":{"changelog.html":{}}}],["associated",{"_index":645,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["async",{"_index":35,"title":{},"body":{"classes/ARManager.html":{},"classes/ScriptLoader.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["atlas",{"_index":813,"title":{},"body":{"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["atlasquaternion",{"_index":887,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["attach",{"_index":1054,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["attempt",{"_index":3186,"title":{},"body":{"changelog.html":{}}}],["attribute",{"_index":964,"title":{},"body":{"classes/Cut.html":{},"classes/ScriptLoader.html":{},"changelog.html":{}}}],["attributename",{"_index":2562,"title":{},"body":{"classes/SelectionManager.html":{}}}],["attributes",{"_index":2023,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["attributevalue",{"_index":2563,"title":{},"body":{"classes/SelectionManager.html":{}}}],["available",{"_index":728,"title":{},"body":{"classes/ColorOptions.html":{},"classes/RendererManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["available/created",{"_index":2307,"title":{},"body":{"classes/RendererManager.html":{}}}],["averageprogress",{"_index":1699,"title":{},"body":{"classes/LoadingManager.html":{}}}],["await",{"_index":175,"title":{},"body":{"classes/ARManager.html":{},"classes/ScriptLoader.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["axes",{"_index":473,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["axeshelper",{"_index":2515,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axeshelper().type",{"_index":2523,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axis",{"_index":289,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixObjects.html":{}}}],["azimuthal",{"_index":901,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["b",{"_index":2347,"title":{},"body":{"classes/RendererManager.html":{}}}],["b10bb7a",{"_index":3297,"title":{},"body":{"changelog.html":{}}}],["b46c49f",{"_index":3477,"title":{},"body":{"changelog.html":{}}}],["b52282f",{"_index":3320,"title":{},"body":{"changelog.html":{}}}],["b7a324a",{"_index":3314,"title":{},"body":{"changelog.html":{}}}],["b7e8da0",{"_index":3403,"title":{},"body":{"changelog.html":{}}}],["b8e88b8",{"_index":3290,"title":{},"body":{"changelog.html":{}}}],["b_first",{"_index":1454,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["b_last",{"_index":1449,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["b_middle",{"_index":1448,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["back",{"_index":573,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["back_1",{"_index":579,"title":{},"body":{"classes/CMSObjects.html":{}}}],["back_2",{"_index":575,"title":{},"body":{"classes/CMSObjects.html":{}}}],["back_3",{"_index":576,"title":{},"body":{"classes/CMSObjects.html":{}}}],["back_4",{"_index":578,"title":{},"body":{"classes/CMSObjects.html":{}}}],["background",{"_index":3136,"title":{},"body":{"changelog.html":{}}}],["based",{"_index":747,"title":{},"body":{"classes/ColorOptions.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["bb41683",{"_index":3158,"title":{},"body":{"changelog.html":{}}}],["bbcdf0c",{"_index":3317,"title":{},"body":{"changelog.html":{}}}],["bbea6b0",{"_index":3274,"title":{},"body":{"changelog.html":{}}}],["become",{"_index":141,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["before",{"_index":2489,"title":{},"body":{"classes/SelectionManager.html":{}}}],["being",{"_index":1547,"title":{},"body":{"classes/InfoLogger.html":{},"interfaces/Window.html":{}}}],["better",{"_index":2097,"title":{},"body":{"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["big",{"_index":3471,"title":{},"body":{"changelog.html":{}}}],["bind",{"_index":3291,"title":{},"body":{"changelog.html":{}}}],["blob",{"_index":3638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blob([data",{"_index":3639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["block",{"_index":2752,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["bloom",{"_index":1234,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["boolean",{"_index":56,"title":{},"body":{"classes/ARManager.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["both",{"_index":2045,"title":{},"body":{"classes/PhoenixObjects.html":{},"interfaces/Window.html":{}}}],["bottom",{"_index":581,"title":{},"body":{"classes/CMSObjects.html":{},"classes/URLOptionsManager.html":{}}}],["bounded",{"_index":2791,"title":{},"body":{"classes/VRManager.html":{}}}],["bounds",{"_index":1521,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["box",{"_index":599,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["box.position.copy(boxposition",{"_index":2141,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["boxbuffer",{"_index":585,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffer.attributes.position",{"_index":586,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffer.computevertexnormals",{"_index":588,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffergeometry",{"_index":2004,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["boxbuffergeometry(size",{"_index":2126,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["boxedges",{"_index":601,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject",{"_index":589,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.name",{"_index":596,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.userdata",{"_index":594,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.uuid",{"_index":609,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxposition",{"_index":2138,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["browser",{"_index":3321,"title":{},"body":{"changelog.html":{}}}],["browsers",{"_index":2356,"title":{},"body":{"classes/RendererManager.html":{}}}],["bufferattribute",{"_index":247,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["buffergeometry",{"_index":240,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["buffergeometry().setfrompoints",{"_index":2819,"title":{},"body":{"classes/VRManager.html":{}}}],["buffergeometry().setfrompoints(points",{"_index":2166,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["buffergeometry().setfrompoints(vertices",{"_index":2039,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["bug",{"_index":3098,"title":{},"body":{"changelog.html":{}}}],["bugged",{"_index":3479,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":2572,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["build:bundlethis",{"_index":3579,"title":{},"body":{"index.html":{}}}],["buildeventdata",{"_index":1310,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["buildeventdata(eventdata",{"_index":1319,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["buildeventdatafromjson(eventdata",{"_index":2892,"title":{},"body":{"interfaces/Window.html":{}}}],["buildgeometryfromparameters",{"_index":3011,"title":{},"body":{"interfaces/Window.html":{}}}],["buildgeometryfromparameters(parameters",{"_index":2973,"title":{},"body":{"interfaces/Window.html":{}}}],["building",{"_index":3583,"title":{},"body":{"index.html":{}}}],["builds",{"_index":2891,"title":{},"body":{"interfaces/Window.html":{}}}],["bump",{"_index":3496,"title":{},"body":{"changelog.html":{}}}],["bundle",{"_index":3393,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["bundled",{"_index":3577,"title":{},"body":{"index.html":{}}}],["button",{"_index":2774,"title":{},"body":{"classes/VRManager.html":{},"miscellaneous/typealiases.html":{}}}],["buttons",{"_index":2643,"title":{},"body":{"classes/StateManager.html":{}}}],["c1",{"_index":2827,"title":{},"body":{"classes/VRManager.html":{}}}],["c36a222",{"_index":3430,"title":{},"body":{"changelog.html":{}}}],["c39ecd3",{"_index":3442,"title":{},"body":{"changelog.html":{}}}],["c446567",{"_index":3246,"title":{},"body":{"changelog.html":{}}}],["c7a35db",{"_index":3472,"title":{},"body":{"changelog.html":{}}}],["c897ab3",{"_index":3138,"title":{},"body":{"changelog.html":{}}}],["c92d65f",{"_index":3201,"title":{},"body":{"changelog.html":{}}}],["c9781e5",{"_index":3279,"title":{},"body":{"changelog.html":{}}}],["c991e54",{"_index":3397,"title":{},"body":{"changelog.html":{}}}],["c9d4880",{"_index":3378,"title":{},"body":{"changelog.html":{}}}],["ca3cc2f",{"_index":3313,"title":{},"body":{"changelog.html":{}}}],["calculate",{"_index":2056,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["calculated",{"_index":814,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["calculation",{"_index":3195,"title":{},"body":{"changelog.html":{}}}],["call",{"_index":97,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["callback",{"_index":96,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/typealiases.html":{}}}],["callback(averageprogress",{"_index":1701,"title":{},"body":{"classes/LoadingManager.html":{}}}],["callback(eventdata",{"_index":2900,"title":{},"body":{"interfaces/Window.html":{}}}],["callback(eventkeys",{"_index":2890,"title":{},"body":{"interfaces/Window.html":{}}}],["callback(updatedvalue",{"_index":217,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["callbackfunction",{"_index":204,"title":{},"body":{"classes/ActiveVariable.html":{},"miscellaneous/typealiases.html":{}}}],["callbacks",{"_index":196,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/LoadingManager.html":{},"interfaces/Window.html":{}}}],["called",{"_index":2847,"title":{},"body":{"interfaces/Window.html":{}}}],["calling",{"_index":1752,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{}}}],["calocells",{"_index":1984,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["calocells.cellsize",{"_index":2124,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["calocells.color",{"_index":2131,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["calocells.energy",{"_index":2122,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["calocells.plane",{"_index":2125,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["calocells.pos",{"_index":2121,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["calocells.uuid",{"_index":2149,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["calocluster",{"_index":3282,"title":{},"body":{"changelog.html":{}}}],["caloclusters",{"_index":1605,"title":{},"body":{"classes/LHCbLoader.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["calorimeter",{"_index":1986,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["camera",{"_index":45,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["camera.near",{"_index":159,"title":{},"body":{"classes/ARManager.html":{}}}],["cameragroup",{"_index":25,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["cameranear",{"_index":72,"title":{},"body":{"classes/ARManager.html":{}}}],["camerapos",{"_index":2180,"title":{},"body":{"classes/PresetView.html":{}}}],["cameraposition",{"_index":2648,"title":{},"body":{"classes/StateManager.html":{},"classes/XRManager.html":{}}}],["cameras",{"_index":2975,"title":{},"body":{"interfaces/Window.html":{}}}],["canvas",{"_index":1072,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["canvas.appendchild(this.gui.domelement",{"_index":1074,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["canvaswrapper",{"_index":2364,"title":{},"body":{"classes/RendererManager.html":{}}}],["canvaswrapper.appendchild(this.getmainrenderer().domelement",{"_index":2374,"title":{},"body":{"classes/RendererManager.html":{}}}],["canvaswrapper.offsetheight",{"_index":2369,"title":{},"body":{"classes/RendererManager.html":{}}}],["canvaswrapper.offsetwidth",{"_index":2366,"title":{},"body":{"classes/RendererManager.html":{}}}],["care",{"_index":1326,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["cartesian",{"_index":913,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["case",{"_index":2016,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["catch",{"_index":3341,"title":{},"body":{"changelog.html":{}}}],["catch((error",{"_index":2736,"title":{},"body":{"classes/URLOptionsManager.html":{},"classes/XRManager.html":{}}}],["catmullromcurve3",{"_index":2000,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["catmullromcurve3(points",{"_index":2025,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cb2ec40",{"_index":3395,"title":{},"body":{"changelog.html":{}}}],["cb68283",{"_index":3227,"title":{},"body":{"changelog.html":{}}}],["cc04d5a",{"_index":3234,"title":{},"body":{"changelog.html":{}}}],["cdn",{"_index":3366,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["cfb1b6a",{"_index":3478,"title":{},"body":{"changelog.html":{}}}],["cg",{"_index":2829,"title":{},"body":{"classes/VRManager.html":{}}}],["chaining",{"_index":3396,"title":{},"body":{"changelog.html":{}}}],["chamber",{"_index":551,"title":{},"body":{"classes/CMSObjects.html":{}}}],["change",{"_index":194,"title":{},"body":{"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/Cut.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["changeable",{"_index":1024,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["changed",{"_index":193,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["changelog",{"_index":3086,"title":{"changelog.html":{}},"body":{}}],["changes",{"_index":622,"title":{},"body":{"classes/ColorManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["changing",{"_index":335,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["charge",{"_index":708,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"miscellaneous/enumerations.html":{}}}],["chargecolors",{"_index":681,"title":{},"body":{"classes/ColorOptions.html":{}}}],["chargevalue",{"_index":765,"title":{},"body":{"classes/ColorOptions.html":{}}}],["check",{"_index":339,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/LoadingManager.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["checkbox",{"_index":1803,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["checked",{"_index":2312,"title":{},"body":{"classes/RendererManager.html":{}}}],["checking",{"_index":1489,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["checks",{"_index":895,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["chi2",{"_index":2198,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["child",{"_index":656,"title":{},"body":{"classes/ColorManager.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["child.findintree(name",{"_index":1853,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.name",{"_index":1860,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.nodelevel",{"_index":1781,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.parent",{"_index":1780,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.toggleselfanddescendants(child.togglestate",{"_index":1800,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.toggleselfanddescendants(value",{"_index":1799,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.togglestate",{"_index":1798,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.traverse((object",{"_index":658,"title":{},"body":{"classes/ColorManager.html":{}}}],["childindex",{"_index":1784,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["children",{"_index":1709,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["childrenactive",{"_index":1710,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childrentogglestate",{"_index":1711,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate",{"_index":1843,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate.name",{"_index":1848,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate.nodelevel",{"_index":1850,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["class",{"_index":0,"title":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"index.html":{},"overview.html":{}}}],["clean",{"_index":3143,"title":{},"body":{"changelog.html":{}}}],["cleanup",{"_index":3285,"title":{},"body":{"changelog.html":{}}}],["clear",{"_index":1056,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["cleardatgui",{"_index":1006,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["clearing",{"_index":2895,"title":{},"body":{"interfaces/Window.html":{}}}],["clearinterval(intervalid",{"_index":2834,"title":{},"body":{"classes/VRManager.html":{}}}],["clearphoenixmenu",{"_index":1865,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["click",{"_index":2485,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicked",{"_index":2577,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicking",{"_index":3023,"title":{},"body":{"interfaces/Window.html":{}}}],["clipping",{"_index":435,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["clippingangle",{"_index":2613,"title":{},"body":{"classes/StateManager.html":{}}}],["clippingconstant",{"_index":437,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["clippingenabled",{"_index":2614,"title":{},"body":{"classes/StateManager.html":{}}}],["clone",{"_index":1466,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["cloned",{"_index":127,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["close",{"_index":3265,"title":{},"body":{"changelog.html":{}}}],["closes",{"_index":3113,"title":{},"body":{"changelog.html":{}}}],["closest",{"_index":2594,"title":{},"body":{"classes/SelectionManager.html":{}}}],["cluster",{"_index":1963,"title":{},"body":{"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["clusterparams",{"_index":1964,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusterparams.uuid",{"_index":2118,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusters",{"_index":1627,"title":{},"body":{"classes/LHCbLoader.html":{},"changelog.html":{}}}],["cms",{"_index":543,"title":{},"body":{"classes/CMSObjects.html":{},"changelog.html":{}}}],["cmsloader",{"_index":3416,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["cmsobjects",{"_index":538,"title":{"classes/CMSObjects.html":{}},"body":{"classes/CMSObjects.html":{},"changelog.html":{},"coverage.html":{}}}],["code",{"_index":3120,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["collection",{"_index":624,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["collection's",{"_index":1172,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"changelog.html":{}}}],["collection.name",{"_index":1418,"title":{},"body":{"classes/ExportManager.html":{}}}],["collectioncolor",{"_index":613,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["collectioncolor(collectionname",{"_index":620,"title":{},"body":{"classes/ColorManager.html":{}}}],["collectioncolor?.gethexstring",{"_index":782,"title":{},"body":{"classes/ColorOptions.html":{}}}],["collectioncolorrandom",{"_index":614,"title":{},"body":{"classes/ColorManager.html":{}}}],["collectioncolorrandom(collectionname",{"_index":628,"title":{},"body":{"classes/ColorManager.html":{}}}],["collectionfolder",{"_index":697,"title":{},"body":{"classes/ColorOptions.html":{}}}],["collectionfolder.addchild('color",{"_index":779,"title":{},"body":{"classes/ColorOptions.html":{}}}],["collectionfolder.name",{"_index":777,"title":{},"body":{"classes/ColorOptions.html":{}}}],["collectionname",{"_index":625,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["collectionnode",{"_index":1914,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["collectionnode.addchild('cut",{"_index":1924,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["collectionnode.addchild('draw",{"_index":1917,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["collections",{"_index":1341,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["collfolder",{"_index":1168,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["collfolder.addfolder('cuts",{"_index":1178,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["collideparticles",{"_index":475,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["colliding",{"_index":501,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["collision",{"_index":231,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["collisionduration",{"_index":226,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["collison",{"_index":498,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["color",{"_index":168,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["color(0x2194ce",{"_index":3611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xff0000",{"_index":3610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xffd166",{"_index":3612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xfff69a",{"_index":3615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xffffff",{"_index":477,"title":{},"body":{"interfaces/AnimationPreset.html":{},"miscellaneous/variables.html":{}}}],["color(color).gethexstring",{"_index":1903,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["color)?.set(color",{"_index":660,"title":{},"body":{"classes/ColorManager.html":{}}}],["color)?.set(math.random",{"_index":661,"title":{},"body":{"classes/ColorManager.html":{}}}],["colorbymomentum",{"_index":689,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbymomentum(minormax",{"_index":745,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoption",{"_index":705,"title":{},"body":{"classes/ColorOptions.html":{},"miscellaneous/typealiases.html":{}}}],["colorbyoption.initialize",{"_index":796,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoption.name",{"_index":802,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoptionkeys",{"_index":700,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{},"miscellaneous/enumerations.html":{}}}],["colorbyoptionkeys.charge",{"_index":707,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{}}}],["colorbyoptionkeys.mom",{"_index":714,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{}}}],["colorbyoptionkeys.vertex",{"_index":719,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{}}}],["colorbyoptions",{"_index":682,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{}}}],["colorbyoptions.push",{"_index":1934,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["colorbyoptionstoinclude",{"_index":699,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoptionstoinclude.includes(colorbyoption.key",{"_index":793,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoptionstoinclude?.length",{"_index":790,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colored",{"_index":767,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorfortracksvertex",{"_index":669,"title":{},"body":{"classes/ColorManager.html":{}}}],["coloring",{"_index":612,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["colormanager",{"_index":610,"title":{"classes/ColorManager.html":{}},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"coverage.html":{}}}],["colormenu",{"_index":1107,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["colormenu.onchange((color",{"_index":1220,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["colormenu.onchange((value",{"_index":1110,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["colormenu.onchange(oncolorchange",{"_index":1207,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["colormenu.setvalue(collectioncolor?.gethex",{"_index":1175,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["colorobjectsbyproperty",{"_index":615,"title":{},"body":{"classes/ColorManager.html":{}}}],["colorobjectsbyproperty(color",{"_index":631,"title":{},"body":{"classes/ColorManager.html":{}}}],["coloroptions",{"_index":676,"title":{"classes/ColorOptions.html":{}},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{},"coverage.html":{}}}],["coloroptionsfolder",{"_index":683,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colors",{"_index":725,"title":{},"body":{"classes/ColorOptions.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["colortracksbyvertex",{"_index":616,"title":{},"body":{"classes/ColorManager.html":{}}}],["colortracksbyvertex(collectionname",{"_index":642,"title":{},"body":{"classes/ColorManager.html":{}}}],["colour",{"_index":3009,"title":{},"body":{"interfaces/Window.html":{}}}],["combine",{"_index":3163,"title":{},"body":{"changelog.html":{}}}],["commit",{"_index":3092,"title":{},"body":{"changelog.html":{}}}],["commits",{"_index":3091,"title":{},"body":{"changelog.html":{}}}],["common",{"_index":3166,"title":{},"body":{"changelog.html":{}}}],["complete",{"_index":2981,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["completely",{"_index":3426,"title":{},"body":{"changelog.html":{}}}],["completes",{"_index":429,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["component",{"_index":3448,"title":{},"body":{"changelog.html":{}}}],["components",{"_index":3482,"title":{},"body":{"changelog.html":{}}}],["composer",{"_index":1236,"title":{},"body":{"classes/EffectsManager.html":{}}}],["compound",{"_index":1621,"title":{},"body":{"classes/LHCbLoader.html":{},"changelog.html":{}}}],["computed",{"_index":1434,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["concatonateobjs",{"_index":1588,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["cone",{"_index":2078,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["coner",{"_index":3115,"title":{},"body":{"changelog.html":{}}}],["config",{"_index":1749,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["config.group",{"_index":845,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{}}}],["config.hidden",{"_index":846,"title":{},"body":{"classes/ColorOptions.html":{}}}],["config.onchange",{"_index":1813,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['color",{"_index":1809,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['ischecked",{"_index":1805,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['value",{"_index":1811,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.type",{"_index":1802,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['color",{"_index":1806,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['highvalue",{"_index":1815,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['ischecked",{"_index":1804,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['value",{"_index":1810,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configactive",{"_index":1712,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configbutton",{"_index":3593,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configcheckbox",{"_index":3596,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configcolor",{"_index":3597,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configfile",{"_index":3627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configfunctions",{"_index":1053,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["configkey",{"_index":1612,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["configlabel",{"_index":1609,"title":{},"body":{"classes/LHCbLoader.html":{},"miscellaneous/typealiases.html":{}}}],["configrangeslider",{"_index":3598,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configs",{"_index":763,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["configselect",{"_index":3599,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configslength",{"_index":1792,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configslider",{"_index":3600,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configstate",{"_index":1831,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate['label",{"_index":1838,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate['type",{"_index":1836,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate[prop",{"_index":1841,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configurable",{"_index":907,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["configuration",{"_index":847,"title":{"interfaces/Configuration.html":{}},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["configuration.allowurloptions",{"_index":2870,"title":{},"body":{"interfaces/Window.html":{}}}],["configurations",{"_index":733,"title":{},"body":{"classes/ColorOptions.html":{}}}],["configure",{"_index":132,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["console",{"_index":2873,"title":{},"body":{"interfaces/Window.html":{}}}],["console.error",{"_index":1788,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["console.error('could",{"_index":2739,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["console.error('error",{"_index":2453,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["console.error(`${xrtype.touppercase",{"_index":3066,"title":{},"body":{"classes/XRManager.html":{}}}],["console.log",{"_index":2020,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/VRManager.html":{}}}],["console.log('no",{"_index":2101,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["console.log('processing",{"_index":1640,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["const",{"_index":268,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":438,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["constructor",{"_index":42,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["constructor(camera",{"_index":1244,"title":{},"body":{"classes/EffectsManager.html":{}}}],["constructor(colormanager",{"_index":696,"title":{},"body":{"classes/ColorOptions.html":{}}}],["constructor(configuration",{"_index":2855,"title":{},"body":{"interfaces/Window.html":{}}}],["constructor(elementid",{"_index":1009,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["constructor(eventdisplay",{"_index":2678,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["constructor(field",{"_index":971,"title":{},"body":{"classes/Cut.html":{}}}],["constructor(name",{"_index":1727,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["constructor(phoenixmenu",{"_index":1868,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["constructor(private",{"_index":154,"title":{},"body":{"classes/ARManager.html":{},"classes/ColorManager.html":{}}}],["constructor(public",{"_index":214,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["constructor(scene",{"_index":43,"title":{},"body":{"classes/ARManager.html":{}}}],["constructor(scenemanager",{"_index":617,"title":{},"body":{"classes/ColorManager.html":{}}}],["constructor(sessiontype",{"_index":3049,"title":{},"body":{"classes/XRManager.html":{}}}],["constructor(value",{"_index":199,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["contain",{"_index":1968,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["containing",{"_index":88,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["containingevent",{"_index":2985,"title":{},"body":{"interfaces/Window.html":{}}}],["containment",{"_index":2313,"title":{},"body":{"classes/RendererManager.html":{}}}],["contains",{"_index":1353,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/RendererManager.html":{}}}],["containsobject",{"_index":2287,"title":{},"body":{"classes/RendererManager.html":{}}}],["containsobject(obj",{"_index":2310,"title":{},"body":{"classes/RendererManager.html":{}}}],["content",{"_index":2926,"title":{},"body":{"interfaces/Window.html":{}}}],["contenttype",{"_index":3617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["continue",{"_index":2251,"title":{},"body":{"classes/RKHelper.html":{}}}],["controller",{"_index":2769,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["controller1",{"_index":2761,"title":{},"body":{"classes/VRManager.html":{}}}],["controller2",{"_index":2762,"title":{},"body":{"classes/VRManager.html":{}}}],["controllergrip1",{"_index":2763,"title":{},"body":{"classes/VRManager.html":{}}}],["controllergrip2",{"_index":2764,"title":{},"body":{"classes/VRManager.html":{}}}],["controllermodelfactory",{"_index":2808,"title":{},"body":{"classes/VRManager.html":{}}}],["controllermodelfactory.createcontrollermodel(this.controllergrip1",{"_index":2812,"title":{},"body":{"classes/VRManager.html":{}}}],["controllermodelfactory.createcontrollermodel(this.controllergrip2",{"_index":2817,"title":{},"body":{"classes/VRManager.html":{}}}],["controllers",{"_index":2801,"title":{},"body":{"classes/VRManager.html":{}}}],["controls",{"_index":1013,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["controlsmanager",{"_index":3532,"title":{},"body":{"coverage.html":{}}}],["conventional",{"_index":3090,"title":{},"body":{"changelog.html":{}}}],["conversions",{"_index":885,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["convert",{"_index":924,"title":{},"body":{"classes/CoordinateHelper.html":{},"miscellaneous/typealiases.html":{}}}],["coordinate",{"_index":884,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["coordinatehelper",{"_index":880,"title":{"classes/CoordinateHelper.html":{}},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"changelog.html":{},"coverage.html":{}}}],["coordinatehelper.etatotheta(eta",{"_index":2058,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["coordinates",{"_index":2090,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["coordlength",{"_index":2091,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["coords",{"_index":905,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["copy",{"_index":2212,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["copy(camera.clone",{"_index":3079,"title":{},"body":{"classes/XRManager.html":{}}}],["correct",{"_index":3433,"title":{},"body":{"changelog.html":{}}}],["correctly",{"_index":3150,"title":{},"body":{"changelog.html":{}}}],["count",{"_index":342,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/LoadingManager.html":{}}}],["coverage",{"_index":3498,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covering",{"_index":420,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["cphi",{"_index":2067,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cpu",{"_index":3362,"title":{},"body":{"changelog.html":{}}}],["create",{"_index":49,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["created",{"_index":139,"title":{},"body":{"classes/ARManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["creating",{"_index":2032,"title":{},"body":{"classes/PhoenixObjects.html":{},"interfaces/Window.html":{}}}],["cross(b_last",{"_index":1482,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["cross(b_middle",{"_index":1472,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["ctheta",{"_index":2071,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube",{"_index":2120,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.lookat(new",{"_index":2115,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.name",{"_index":2117,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.position.copy(position",{"_index":2114,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.userdata",{"_index":2116,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.uuid",{"_index":2119,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["curently",{"_index":1383,"title":{},"body":{"classes/ExportManager.html":{}}}],["current",{"_index":121,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["currently",{"_index":92,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["currentxrsession",{"_index":27,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["curve",{"_index":2024,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["curve.getpoints(50",{"_index":2037,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["custom",{"_index":639,"title":{},"body":{"classes/ColorManager.html":{}}}],["customcheck",{"_index":633,"title":{},"body":{"classes/ColorManager.html":{}}}],["customcheck(object.userdata",{"_index":650,"title":{},"body":{"classes/ColorManager.html":{}}}],["customize",{"_index":2853,"title":{},"body":{"interfaces/Window.html":{}}}],["cut",{"_index":960,"title":{"classes/Cut.html":{}},"body":{"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"changelog.html":{},"coverage.html":{}}}],["cut.field",{"_index":1185,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["cut.maxvalue",{"_index":1183,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["cut.minvalue",{"_index":1182,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["cut.reset",{"_index":1927,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["cut.step",{"_index":1931,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["cuts",{"_index":1027,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["cuts.length",{"_index":1922,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["cutsfolder",{"_index":1177,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["cutsoptionsnode",{"_index":1923,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["cutsoptionsnode.addconfig('rangeslider",{"_index":1929,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["cylinderbuffergeometry",{"_index":2002,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["d",{"_index":2137,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["d0",{"_index":2271,"title":{},"body":{"classes/RKHelper.html":{}}}],["d207bad",{"_index":3358,"title":{},"body":{"changelog.html":{}}}],["d2874b8",{"_index":3343,"title":{},"body":{"changelog.html":{}}}],["d2e0547",{"_index":3224,"title":{},"body":{"changelog.html":{}}}],["d3920c4",{"_index":3457,"title":{},"body":{"changelog.html":{}}}],["d4b62c2",{"_index":3117,"title":{},"body":{"changelog.html":{}}}],["d677089",{"_index":3379,"title":{},"body":{"changelog.html":{}}}],["d90e3a6",{"_index":3380,"title":{},"body":{"changelog.html":{}}}],["da3ead5",{"_index":3438,"title":{},"body":{"changelog.html":{}}}],["dashsize",{"_index":2167,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["dat.gui",{"_index":867,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"dependencies.html":{}}}],["data",{"_index":256,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["data.json",{"_index":3572,"title":{},"body":{"index.html":{}}}],["datguimenuui",{"_index":986,"title":{"classes/DatGUIMenuUI.html":{}},"body":{"classes/DatGUIMenuUI.html":{},"coverage.html":{}}}],["db261a6",{"_index":3392,"title":{},"body":{"changelog.html":{}}}],["db3ca8b",{"_index":3268,"title":{},"body":{"changelog.html":{}}}],["dc05ed9",{"_index":3394,"title":{},"body":{"changelog.html":{}}}],["dc140dd",{"_index":3414,"title":{},"body":{"changelog.html":{}}}],["dc5d489",{"_index":3406,"title":{},"body":{"changelog.html":{}}}],["dc7d74a",{"_index":3121,"title":{},"body":{"changelog.html":{}}}],["dcf6cec",{"_index":3436,"title":{},"body":{"changelog.html":{}}}],["debug",{"_index":3179,"title":{},"body":{"changelog.html":{}}}],["debugging",{"_index":3189,"title":{},"body":{"changelog.html":{}}}],["declare",{"_index":2424,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["default",{"_index":57,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["defaulteventfile",{"_index":851,"title":{},"body":{"interfaces/Configuration.html":{}}}],["defaulteventpath",{"_index":2689,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["defaulteventtype",{"_index":2686,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["defaultmaxvalue",{"_index":965,"title":{},"body":{"classes/Cut.html":{}}}],["defaultminvalue",{"_index":966,"title":{},"body":{"classes/Cut.html":{}}}],["defaultrenderpass",{"_index":1237,"title":{},"body":{"classes/EffectsManager.html":{}}}],["defaults",{"_index":2408,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["defaultview",{"_index":852,"title":{},"body":{"interfaces/Configuration.html":{},"changelog.html":{}}}],["define",{"_index":1424,"title":{},"body":{"classes/Field.html":{},"index.html":{}}}],["defined",{"_index":47,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["defining",{"_index":3004,"title":{},"body":{"interfaces/Window.html":{}}}],["definition",{"_index":926,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["delete",{"_index":1789,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"changelog.html":{}}}],["deleted",{"_index":1146,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["deleting",{"_index":1138,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["dependencies",{"_index":3547,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["deployment",{"_index":3493,"title":{},"body":{"changelog.html":{}}}],["depth",{"_index":1912,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["depthtest",{"_index":1035,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["depthtestmenu",{"_index":1154,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["depthtestmenu.onchange((value",{"_index":1157,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["descendants",{"_index":1769,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["describe",{"_index":2184,"title":{},"body":{"classes/PresetView.html":{}}}],["description",{"_index":9,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["desired",{"_index":1339,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["detector",{"_index":288,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{},"index.html":{}}}],["detectoropacity",{"_index":1101,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["determine",{"_index":3116,"title":{},"body":{"changelog.html":{}}}],["df425ee",{"_index":3209,"title":{},"body":{"changelog.html":{}}}],["df9ce07",{"_index":3191,"title":{},"body":{"changelog.html":{}}}],["dfe8e8d",{"_index":3176,"title":{},"body":{"changelog.html":{}}}],["dflt_colors",{"_index":2963,"title":{},"body":{"interfaces/Window.html":{}}}],["dialog",{"_index":3293,"title":{},"body":{"changelog.html":{}}}],["different",{"_index":1012,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["differently",{"_index":3171,"title":{},"body":{"changelog.html":{}}}],["dimensional",{"_index":520,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["dir",{"_index":1522,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["direction",{"_index":1514,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["directionallight",{"_index":2513,"title":{},"body":{"classes/SelectionManager.html":{}}}],["directionallight().type",{"_index":2522,"title":{},"body":{"classes/SelectionManager.html":{}}}],["directly",{"_index":3578,"title":{},"body":{"index.html":{}}}],["directory",{"_index":3582,"title":{},"body":{"index.html":{}}}],["disable",{"_index":2494,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["disabled",{"_index":1250,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["disableselecting",{"_index":2468,"title":{},"body":{"classes/SelectionManager.html":{}}}],["display",{"_index":849,"title":{},"body":{"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["display's",{"_index":258,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ExportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["display.ts",{"_index":2843,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["displayed",{"_index":1344,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["displayusage",{"_index":3567,"title":{},"body":{"index.html":{}}}],["dist/bundle",{"_index":3581,"title":{},"body":{"index.html":{}}}],["distance",{"_index":439,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{}}}],["distancefromorigin",{"_index":472,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["divide",{"_index":3235,"title":{},"body":{"changelog.html":{}}}],["dividescalar(previousscale",{"_index":376,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["docs",{"_index":3160,"title":{},"body":{"changelog.html":{}}}],["document",{"_index":2532,"title":{},"body":{"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{}}}],["document.body",{"_index":166,"title":{},"body":{"classes/ARManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{}}}],["document.body.style.removeproperty('background",{"_index":177,"title":{},"body":{"classes/ARManager.html":{}}}],["document.body.style.setproperty('background",{"_index":167,"title":{},"body":{"classes/ARManager.html":{}}}],["document.createelement('a",{"_index":3641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document.createelement('input",{"_index":3622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document.createelement('script",{"_index":2444,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["document.getelementbyid('gui",{"_index":1078,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["document.getelementbyid(elementid",{"_index":1073,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{}}}],["document.getelementsbytagname('head')[0",{"_index":2420,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["document.queryselectorall",{"_index":2440,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["documentation",{"_index":3280,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["documented",{"_index":3089,"title":{},"body":{"changelog.html":{}}}],["dof",{"_index":2200,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["dom",{"_index":63,"title":{},"body":{"classes/ARManager.html":{},"classes/RendererManager.html":{},"changelog.html":{}}}],["domoverlay",{"_index":164,"title":{},"body":{"classes/ARManager.html":{}}}],["don't",{"_index":1596,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PrettySymbols.html":{}}}],["dosplay",{"_index":3252,"title":{},"body":{"changelog.html":{}}}],["doubleside",{"_index":555,"title":{},"body":{"classes/CMSObjects.html":{}}}],["doublesided",{"_index":2916,"title":{},"body":{"interfaces/Window.html":{}}}],["download",{"_index":3648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dparams",{"_index":2226,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["dparams[0",{"_index":2272,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[1",{"_index":2274,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[2",{"_index":2275,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[3",{"_index":2276,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[4",{"_index":815,"title":{},"body":{"classes/ColorOptions.html":{},"classes/RKHelper.html":{}}}],["draw",{"_index":1330,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{}}}],["drawing",{"_index":3267,"title":{},"body":{"changelog.html":{}}}],["drawoptionsnode",{"_index":1916,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["drawoptionsnode.addconfig('checkbox",{"_index":1920,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["drawoptionsnode.addconfig('slider",{"_index":1918,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["drawrange",{"_index":341,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["driven",{"_index":3560,"title":{},"body":{"index.html":{}}}],["drop",{"_index":3360,"title":{},"body":{"changelog.html":{}}}],["duration",{"_index":232,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["dynamically",{"_index":2396,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["e",{"_index":3626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e.g",{"_index":1598,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["e.target?.files[0",{"_index":3628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e07725a",{"_index":3223,"title":{},"body":{"changelog.html":{}}}],["e10a68d",{"_index":3382,"title":{},"body":{"changelog.html":{}}}],["e297c98",{"_index":3434,"title":{},"body":{"changelog.html":{}}}],["e6f69a0",{"_index":3377,"title":{},"body":{"changelog.html":{}}}],["e96136b",{"_index":3374,"title":{},"body":{"changelog.html":{}}}],["e9f1bc9",{"_index":3408,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":235,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/LoadingManager.html":{},"interfaces/Window.html":{}}}],["easily",{"_index":2177,"title":{},"body":{"classes/PresetView.html":{}}}],["easing",{"_index":234,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["edcd567",{"_index":3270,"title":{},"body":{"changelog.html":{}}}],["edges",{"_index":600,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry",{"_index":553,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry(boxbuffer",{"_index":602,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edit",{"_index":383,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["edward's",{"_index":3423,"title":{},"body":{"changelog.html":{}}}],["effect",{"_index":1254,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectcomposer",{"_index":1252,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectcomposer(renderer",{"_index":1281,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effects",{"_index":1230,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["effectsmanager",{"_index":1228,"title":{"classes/EffectsManager.html":{}},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["effectsrender",{"_index":1241,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectsrender(scene",{"_index":1268,"title":{},"body":{"classes/EffectsManager.html":{}}}],["electron",{"_index":1622,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["element",{"_index":866,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["elementid",{"_index":853,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{},"index.html":{}}}],["elements",{"_index":1264,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["embed",{"_index":2683,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["empty",{"_index":3045,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["enable",{"_index":62,"title":{},"body":{"classes/ARManager.html":{},"interfaces/Configuration.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["enabled",{"_index":1249,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["enabledatguimenu",{"_index":854,"title":{},"body":{"interfaces/Configuration.html":{}}}],["enabledomoverlay",{"_index":19,"title":{},"body":{"classes/ARManager.html":{}}}],["enableeventdisplayconsole",{"_index":3003,"title":{},"body":{"interfaces/Window.html":{}}}],["enablekeyboardcontrols",{"_index":3035,"title":{},"body":{"interfaces/Window.html":{}}}],["enables",{"_index":3002,"title":{},"body":{"interfaces/Window.html":{}}}],["enableselecting",{"_index":2469,"title":{},"body":{"classes/SelectionManager.html":{}}}],["enableselecting(enable",{"_index":3025,"title":{},"body":{"interfaces/Window.html":{}}}],["enabling",{"_index":2490,"title":{},"body":{"classes/SelectionManager.html":{}}}],["enabling/disabling",{"_index":1093,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["end",{"_index":120,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["end.chain(startclone",{"_index":308,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["ended",{"_index":314,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["ends",{"_index":98,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["endxr(xrsessiontype",{"_index":2880,"title":{},"body":{"interfaces/Window.html":{}}}],["endxrsession",{"_index":38,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["energy",{"_index":2059,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"changelog.html":{}}}],["entries",{"_index":1538,"title":{},"body":{"classes/InfoLogger.html":{}}}],["entry",{"_index":1544,"title":{},"body":{"classes/InfoLogger.html":{}}}],["enum",{"_index":774,"title":{},"body":{"classes/ColorOptions.html":{},"classes/XRManager.html":{}}}],["enumerations",{"_index":3555,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equal",{"_index":768,"title":{},"body":{"classes/ColorOptions.html":{}}}],["equatorial",{"_index":900,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["error",{"_index":1490,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["error_estimate",{"_index":1492,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["errors",{"_index":3211,"title":{},"body":{"changelog.html":{}}}],["estimate",{"_index":1491,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["et",{"_index":2061,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{}}}],["eta",{"_index":911,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"changelog.html":{}}}],["eta/phi",{"_index":914,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["eta=0",{"_index":946,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etaphitocartesian",{"_index":888,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etaphitocartesian(radius",{"_index":910,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etatotheta",{"_index":889,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etatotheta(eta",{"_index":922,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["eta~infinite",{"_index":952,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etc",{"_index":1029,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{}}}],["even",{"_index":2035,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["event",{"_index":230,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["event's",{"_index":2626,"title":{},"body":{"classes/StateManager.html":{}}}],["event.clientx",{"_index":2584,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.clienty",{"_index":2587,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.preventdefault",{"_index":2579,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event_data_type_colors",{"_index":557,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["event_data_type_colors.jets",{"_index":2080,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["event_data_type_colors.missingenergy",{"_index":2169,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["event_data_type_colors.muonchambers",{"_index":591,"title":{},"body":{"classes/CMSObjects.html":{}}}],["event_data_type_colors.planarcalocells",{"_index":2132,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["event_data_type_colors.vertices",{"_index":2153,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["eventdata",{"_index":321,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["eventdata.children",{"_index":1414,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdata.traverse((eventobject",{"_index":330,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventdataconfig",{"_index":1409,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name",{"_index":1416,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name].push(collection.name",{"_index":1419,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataloader",{"_index":855,"title":{"interfaces/EventDataLoader.html":{}},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"coverage.html":{},"index.html":{}}}],["eventdisplay",{"_index":1065,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["eventdisplay.init(configuration",{"_index":3570,"title":{},"body":{"index.html":{}}}],["eventdisplay.loadobjgeometry('path/to/geometry.obj",{"_index":3574,"title":{},"body":{"index.html":{}}}],["eventdisplay.parsephoenixevents(res",{"_index":3573,"title":{},"body":{"index.html":{}}}],["eventfile",{"_index":878,"title":{},"body":{"interfaces/Configuration.html":{}}}],["eventfolder",{"_index":992,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["eventfolderstate",{"_index":1863,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["eventkey",{"_index":2903,"title":{},"body":{"interfaces/Window.html":{}}}],["eventkeys",{"_index":2882,"title":{},"body":{"interfaces/Window.html":{}}}],["eventmetadata",{"_index":2615,"title":{},"body":{"classes/StateManager.html":{}}}],["eventnumber",{"_index":1641,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/StateManager.html":{}}}],["eventobject",{"_index":326,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry",{"_index":331,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.attributes['position'].array",{"_index":387,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.boundingsphere.center",{"_index":382,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.computeboundingsphere",{"_index":389,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.deleteattribute('position",{"_index":388,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.drawrange",{"_index":356,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.drawrange.count",{"_index":352,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.setdrawrange(0",{"_index":353,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry?.attributes?.position?.count",{"_index":345,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.material",{"_index":451,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.material.clippingplanes",{"_index":452,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.name",{"_index":336,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.position",{"_index":375,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.position.equals",{"_index":380,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.scale.setscalar(updatedscale.x",{"_index":370,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.scale.x",{"_index":363,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.scale.y",{"_index":364,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.scale.z",{"_index":365,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.visible",{"_index":396,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobjecttween",{"_index":354,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobjecttween.oncomplete",{"_index":357,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["events",{"_index":1351,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["eventsdata",{"_index":1352,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["eventtype",{"_index":879,"title":{},"body":{"interfaces/Configuration.html":{}}}],["examples",{"_index":3584,"title":{},"body":{"index.html":{}}}],["except",{"_index":3129,"title":{},"body":{"changelog.html":{}}}],["existing",{"_index":2896,"title":{},"body":{"interfaces/Window.html":{}}}],["exists",{"_index":343,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/ScriptLoader.html":{}}}],["experiment",{"_index":909,"title":{},"body":{"classes/CoordinateHelper.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["experimental",{"_index":920,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["experimentinfo",{"_index":2745,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["experiments",{"_index":3431,"title":{},"body":{"changelog.html":{}}}],["export",{"_index":151,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["exported",{"_index":1372,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter",{"_index":1391,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse",{"_index":1403,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse(scene",{"_index":1392,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportmanager",{"_index":1357,"title":{"classes/ExportManager.html":{}},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["exportphoenixdisplay",{"_index":2943,"title":{},"body":{"interfaces/Window.html":{}}}],["exportphoenixscene",{"_index":1359,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportphoenixscene(scene",{"_index":1364,"title":{},"body":{"classes/ExportManager.html":{}}}],["exports",{"_index":1366,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["exportscenetoobj",{"_index":1360,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportscenetoobj(scene",{"_index":1374,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporttoobj",{"_index":2931,"title":{},"body":{"interfaces/Window.html":{}}}],["expressed",{"_index":1637,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["extend",{"_index":3168,"title":{},"body":{"changelog.html":{}}}],["extendeventdatatypeui",{"_index":1601,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["extends",{"_index":14,"title":{},"body":{"classes/ARManager.html":{},"classes/LHCbLoader.html":{},"classes/VRManager.html":{}}}],["extension",{"_index":3263,"title":{},"body":{"changelog.html":{}}}],["external",{"_index":2397,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["extra",{"_index":1932,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["extraanimationsphereduration",{"_index":318,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["extract",{"_index":2731,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["extrainfo",{"_index":1969,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["extrapolate",{"_index":2245,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolated",{"_index":2010,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["extrapolatetrackpositions",{"_index":2240,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolatetrackpositions(track",{"_index":2243,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolating",{"_index":332,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["extrapolation",{"_index":2018,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["extrapolationlimit",{"_index":2241,"title":{},"body":{"classes/RKHelper.html":{},"changelog.html":{}}}],["extrapolationlimit(pos",{"_index":2248,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolator",{"_index":2250,"title":{},"body":{"classes/RKHelper.html":{}}}],["extras/configuration",{"_index":2700,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["extras/cut.model",{"_index":1064,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["f1d2cef",{"_index":3229,"title":{},"body":{"changelog.html":{}}}],["f279898",{"_index":3289,"title":{},"body":{"changelog.html":{}}}],["f41920b",{"_index":3207,"title":{},"body":{"changelog.html":{}}}],["f4c2e31",{"_index":3400,"title":{},"body":{"changelog.html":{}}}],["f7cd6b4",{"_index":3316,"title":{},"body":{"changelog.html":{}}}],["f87c587",{"_index":3468,"title":{},"body":{"changelog.html":{}}}],["f8a0080",{"_index":3278,"title":{},"body":{"changelog.html":{}}}],["f94c0e4",{"_index":3404,"title":{},"body":{"changelog.html":{}}}],["faces",{"_index":562,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces.map((face",{"_index":564,"title":{},"body":{"classes/CMSObjects.html":{}}}],["facing",{"_index":2837,"title":{},"body":{"classes/VRManager.html":{}}}],["factor",{"_index":2976,"title":{},"body":{"interfaces/Window.html":{}}}],["failed",{"_index":3462,"title":{},"body":{"changelog.html":{}}}],["fallback",{"_index":2690,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["false",{"_index":107,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/variables.html":{}}}],["fbd584e",{"_index":3368,"title":{},"body":{"changelog.html":{}}}],["fdd492a",{"_index":3183,"title":{},"body":{"changelog.html":{}}}],["fe0b2e6",{"_index":3386,"title":{},"body":{"changelog.html":{}}}],["features",{"_index":105,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["fetch",{"_index":2712,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["fetch('path/to/event",{"_index":3571,"title":{},"body":{"index.html":{}}}],["fetch(file",{"_index":2728,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["fetch(this.urloptions.get('config",{"_index":2720,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["few",{"_index":2009,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["ff0000",{"_index":723,"title":{},"body":{"classes/ColorOptions.html":{}}}],["ff10477",{"_index":3446,"title":{},"body":{"changelog.html":{}}}],["ff666e2",{"_index":3299,"title":{},"body":{"changelog.html":{}}}],["ffffff",{"_index":2994,"title":{},"body":{"interfaces/Window.html":{}}}],["fh",{"_index":1497,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["fh2",{"_index":1498,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field",{"_index":967,"title":{"classes/Field.html":{}},"body":{"classes/Cut.html":{},"classes/Field.html":{},"coverage.html":{}}}],["field.get(pos1",{"_index":1469,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field.get(pos2",{"_index":1479,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field.get(state.pos",{"_index":1455,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["file.readobject(objectname).then((obj",{"_index":2971,"title":{},"body":{"interfaces/Window.html":{}}}],["filename",{"_index":2911,"title":{},"body":{"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["filereader",{"_index":3630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["files",{"_index":3351,"title":{},"body":{"changelog.html":{}}}],["filter",{"_index":973,"title":{},"body":{"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["filter((val",{"_index":2571,"title":{},"body":{"classes/SelectionManager.html":{}}}],["filtered",{"_index":974,"title":{},"body":{"classes/Cut.html":{}}}],["filters",{"_index":963,"title":{},"body":{"classes/Cut.html":{},"classes/LHCbLoader.html":{}}}],["finally",{"_index":2725,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["find",{"_index":1755,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/URLOptionsManager.html":{}}}],["finding",{"_index":2502,"title":{},"body":{"classes/SelectionManager.html":{}}}],["findintree",{"_index":1720,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintree(name",{"_index":1753,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintreeorcreate",{"_index":1721,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintreeorcreate(name",{"_index":1758,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["first",{"_index":316,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["first.type",{"_index":2100,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["firsttween",{"_index":526,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["firsttween.start",{"_index":537,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["fix",{"_index":3099,"title":{},"body":{"changelog.html":{}}}],["fixed",{"_index":2303,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["fixedoverlay",{"_index":2282,"title":{},"body":{"classes/RendererManager.html":{}}}],["fixes",{"_index":3027,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["fixing",{"_index":3415,"title":{},"body":{"changelog.html":{}}}],["fixme",{"_index":1624,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["fixoverlayview(fixed",{"_index":3028,"title":{},"body":{"interfaces/Window.html":{}}}],["flat",{"_index":2919,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["float32array([].concat(...reachedhits",{"_index":415,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["float32array(allfacepositions",{"_index":587,"title":{},"body":{"classes/CMSObjects.html":{}}}],["float32array(hitlength",{"_index":2105,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["floor",{"_index":2790,"title":{},"body":{"classes/VRManager.html":{}}}],["fo",{"_index":2634,"title":{},"body":{"classes/StateManager.html":{}}}],["folder",{"_index":702,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["folders",{"_index":2915,"title":{},"body":{"interfaces/Window.html":{}}}],["foreach((groupname",{"_index":183,"title":{},"body":{"classes/ARManager.html":{}}}],["form",{"_index":3296,"title":{},"body":{"changelog.html":{}}}],["format",{"_index":1367,"title":{},"body":{"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["formatted",{"_index":3476,"title":{},"body":{"changelog.html":{}}}],["forming",{"_index":237,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["found",{"_index":1757,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["front",{"_index":566,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_1",{"_index":572,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_2",{"_index":568,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_3",{"_index":569,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_4",{"_index":571,"title":{},"body":{"classes/CMSObjects.html":{}}}],["function",{"_index":94,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["functionality",{"_index":1329,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["functions",{"_index":259,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["general",{"_index":3174,"title":{},"body":{"changelog.html":{}}}],["generalize",{"_index":3239,"title":{},"body":{"changelog.html":{}}}],["generate",{"_index":1400,"title":{},"body":{"classes/ExportManager.html":{},"index.html":{}}}],["generation",{"_index":311,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["generic",{"_index":3387,"title":{},"body":{"changelog.html":{}}}],["geom",{"_index":2991,"title":{},"body":{"interfaces/Window.html":{}}}],["geometrical",{"_index":3275,"title":{},"body":{"changelog.html":{}}}],["geometries",{"_index":1016,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["geometries.children.foreach((object",{"_index":1420,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometries/event",{"_index":3022,"title":{},"body":{"interfaces/Window.html":{}}}],["geometriesconfig",{"_index":1411,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometriesconfig.push(object.name",{"_index":1421,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometry",{"_index":340,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["geometry.computeboundingsphere",{"_index":416,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["geometry.setattribute",{"_index":414,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["geometry/event",{"_index":3018,"title":{},"body":{"interfaces/Window.html":{}}}],["geometryposcount",{"_index":344,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["geomfolder",{"_index":993,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["get(field",{"_index":1425,"title":{},"body":{"classes/Field.html":{}}}],["getactiveobjectid",{"_index":2470,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["getcamera(new",{"_index":3078,"title":{},"body":{"classes/XRManager.html":{}}}],["getcameragroup",{"_index":39,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["getcameragroup(camera",{"_index":122,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["getcameratween",{"_index":266,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["getcluster",{"_index":1952,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcluster(clusterparams",{"_index":1961,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcollection",{"_index":1311,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["getcollection(collectionname",{"_index":1336,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["getcollections",{"_index":1312,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["getcompound",{"_index":1564,"title":{},"body":{"classes/LHCbLoader.html":{},"changelog.html":{}}}],["getcompound(params",{"_index":1619,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["getelementbyid('embedmenu",{"_index":2750,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["getelementbyid('three",{"_index":2533,"title":{},"body":{"classes/SelectionManager.html":{}}}],["getelementbyid(singleid",{"_index":2757,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["geteventdata",{"_index":1561,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["geteventmetadata",{"_index":1313,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["geteventslist",{"_index":1314,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["geteventslist(eventsdata",{"_index":1348,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["gethits",{"_index":1953,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gethits(hitsparams",{"_index":1965,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gethitspositions(positions",{"_index":521,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["geticonurl",{"_index":2182,"title":{},"body":{"classes/PresetView.html":{}}}],["getinfologger",{"_index":2737,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["getinfologgerlist",{"_index":1534,"title":{},"body":{"classes/InfoLogger.html":{}}}],["getinstance",{"_index":2616,"title":{},"body":{"classes/StateManager.html":{}}}],["getjet",{"_index":1954,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getjet(jetparams",{"_index":1974,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getlabelsobject",{"_index":1315,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["getloadingmanager",{"_index":2908,"title":{},"body":{"interfaces/Window.html":{}}}],["getlocalclipping",{"_index":2288,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmainrenderer",{"_index":2289,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmissingenergy",{"_index":1955,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getmissingenergy(metparams",{"_index":1977,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getmomentum",{"_index":690,"title":{},"body":{"classes/ColorOptions.html":{}}}],["getmomentum(objectparams",{"_index":755,"title":{},"body":{"classes/ColorOptions.html":{}}}],["getmuon",{"_index":3175,"title":{},"body":{"changelog.html":{}}}],["getmuonchamber",{"_index":546,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getmuonchamber(muonchamberparams",{"_index":547,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getnodestate",{"_index":1722,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["getobject",{"_index":1586,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["getobjectbyname(collectionname",{"_index":655,"title":{},"body":{"classes/ColorManager.html":{}}}],["getobjectbyname(scenemanager.event_data_id",{"_index":654,"title":{},"body":{"classes/ColorManager.html":{}}}],["getobjecttypecollections",{"_index":1565,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["getobjecttypecollections(object",{"_index":1630,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["getoverlayrenderer",{"_index":2290,"title":{},"body":{"classes/RendererManager.html":{}}}],["getplanarcalocell",{"_index":1956,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getplanarcalocell(calocells",{"_index":1981,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getprettyparams",{"_index":2195,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettyparams(params",{"_index":2202,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettysymbol",{"_index":2196,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettysymbol(param",{"_index":2206,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getrenderers",{"_index":2291,"title":{},"body":{"classes/RendererManager.html":{}}}],["getscene",{"_index":653,"title":{},"body":{"classes/ColorManager.html":{}}}],["getscenemanager",{"_index":1091,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["getstatemanager",{"_index":2909,"title":{},"body":{"interfaces/Window.html":{}}}],["getthreemanager",{"_index":2907,"title":{},"body":{"interfaces/Window.html":{}}}],["getting",{"_index":3085,"title":{"changelog.html":{},"index.html":{}},"body":{"changelog.html":{}}}],["gettrack",{"_index":1957,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gettrack(trackparams",{"_index":1987,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gettrackswithrungekutta",{"_index":2242,"title":{},"body":{"classes/RKHelper.html":{}}}],["gettrackswithrungekutta(trackscollectionsevent",{"_index":2254,"title":{},"body":{"classes/RKHelper.html":{}}}],["getuimanager",{"_index":2665,"title":{},"body":{"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["getvertex",{"_index":1958,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getvertex(vertexparams",{"_index":1990,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getxrcamera",{"_index":40,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["given",{"_index":143,"title":{},"body":{"classes/ARManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/variables.html":{}}}],["giving",{"_index":2500,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["global",{"_index":2411,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["globalthis",{"_index":3376,"title":{},"body":{"changelog.html":{}}}],["gltf",{"_index":1401,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["gltfexporter",{"_index":1386,"title":{},"body":{"classes/ExportManager.html":{}}}],["go",{"_index":2215,"title":{},"body":{"classes/PrettySymbols.html":{},"interfaces/Window.html":{}}}],["graphic",{"_index":1327,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["graphics",{"_index":1615,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["graphicslibrary",{"_index":1320,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["greater",{"_index":2977,"title":{},"body":{"interfaces/Window.html":{}}}],["grid",{"_index":3312,"title":{},"body":{"changelog.html":{}}}],["group",{"_index":85,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["groupnotselected",{"_index":844,"title":{},"body":{"classes/ColorOptions.html":{}}}],["groupvisibility",{"_index":1926,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["groupvisibility(collectionname",{"_index":1167,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["groupvisibility(scenemanager.event_data_id",{"_index":1910,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["groupvisibility(scenemanager.geometries_id",{"_index":1890,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["gui",{"_index":988,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/URLOptionsManager.html":{},"coverage.html":{}}}],["gui,typefolderpm",{"_index":1602,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["gui.remove",{"_index":1079,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["guidelines",{"_index":3093,"title":{},"body":{"changelog.html":{}}}],["guiparameters",{"_index":994,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["h",{"_index":1460,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["h).cross(b_last",{"_index":1480,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["h2",{"_index":1446,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["half_h",{"_index":1447,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["half_h).cross(b_middle",{"_index":1470,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["hand",{"_index":2792,"title":{},"body":{"classes/VRManager.html":{}}}],["handle",{"_index":1625,"title":{},"body":{"classes/LHCbLoader.html":{},"changelog.html":{}}}],["handles",{"_index":1593,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["handling",{"_index":3124,"title":{},"body":{"changelog.html":{}}}],["hash",{"_index":3473,"title":{},"body":{"changelog.html":{}}}],["hasposition",{"_index":379,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["helper",{"_index":883,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["helper.ts",{"_index":882,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"coverage.html":{}}}],["helper.ts:13",{"_index":894,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:14",{"_index":2249,"title":{},"body":{"classes/RKHelper.html":{}}}],["helper.ts:24",{"_index":2255,"title":{},"body":{"classes/RKHelper.html":{}}}],["helper.ts:25",{"_index":923,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:35",{"_index":933,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:44",{"_index":2244,"title":{},"body":{"classes/RKHelper.html":{}}}],["helper.ts:46",{"_index":931,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:65",{"_index":912,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:81",{"_index":902,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helpers/active",{"_index":2517,"title":{},"body":{"classes/SelectionManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["helpers/constants",{"_index":558,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["helpers/coordinate",{"_index":2008,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["helpers/file",{"_index":1389,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{}}}],["helpers/info",{"_index":1356,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["helpers/pretty",{"_index":770,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{},"classes/SelectionManager.html":{}}}],["helpers/rk",{"_index":2007,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["here",{"_index":927,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/LHCbLoader.html":{}}}],["hex",{"_index":626,"title":{},"body":{"classes/ColorManager.html":{}}}],["hide",{"_index":507,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["hideidswithurloption",{"_index":2677,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["hideidswithurloption(urloptionwithids",{"_index":2693,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["hidewidgets",{"_index":2684,"title":{},"body":{"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["hidewidgetsoptions",{"_index":2741,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["hiding",{"_index":3407,"title":{},"body":{"changelog.html":{}}}],["hierarchy",{"_index":2913,"title":{},"body":{"interfaces/Window.html":{}}}],["high",{"_index":2350,"title":{},"body":{"classes/RendererManager.html":{}}}],["highlight",{"_index":2499,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highlighting",{"_index":1262,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["highlightobject",{"_index":2471,"title":{},"body":{"classes/SelectionManager.html":{}}}],["highlightobject(uuid",{"_index":2497,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highly",{"_index":3237,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["highvalue",{"_index":1814,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{}}}],["hit",{"_index":385,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["hitlength",{"_index":2103,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitlines",{"_index":3308,"title":{},"body":{"changelog.html":{}}}],["hits",{"_index":384,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["hitsparams",{"_index":1973,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparams.length",{"_index":2095,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparams.pos",{"_index":2094,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparams[0",{"_index":2098,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparamsclone",{"_index":2089,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitspositions",{"_index":407,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["hitspositions.filter((hitposition",{"_index":410,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["hitstolines",{"_index":1959,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitstolines(pointpos",{"_index":1993,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitstopoints",{"_index":1960,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitstopoints(pointpos",{"_index":1997,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["home",{"_index":3441,"title":{},"body":{"changelog.html":{}}}],["hovered",{"_index":1263,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["hovering",{"_index":2480,"title":{},"body":{"classes/SelectionManager.html":{}}}],["html",{"_index":3015,"title":{},"body":{"interfaces/Window.html":{},"index.html":{}}}],["htmlcanvaselement",{"_index":2335,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["htmlelement",{"_index":2416,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["https://cdn.jsdelivr.net/npm/jsroot@${jsrootversion}/scripts",{"_index":2427,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["https://en.wikipedia.org/wiki/pseudorapidity",{"_index":928,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["icon",{"_index":1713,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"changelog.html":{}}}],["id",{"_index":864,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["identifier",{"_index":3499,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1592,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/ScriptLoader.html":{}}}],["ids",{"_index":2695,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["idstohide",{"_index":2754,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["idstohide.foreach((singleid",{"_index":2756,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["ig",{"_index":3354,"title":{},"body":{"changelog.html":{}}}],["ignore",{"_index":1807,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["ignored",{"_index":2479,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ignorelist",{"_index":2461,"title":{},"body":{"classes/SelectionManager.html":{}}}],["immersive",{"_index":81,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["implement",{"_index":3241,"title":{},"body":{"changelog.html":{}}}],["implementing",{"_index":1307,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["implicitly",{"_index":3489,"title":{},"body":{"changelog.html":{}}}],["import",{"_index":134,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"index.html":{}}}],["importmanager",{"_index":3536,"title":{},"body":{"coverage.html":{}}}],["improve",{"_index":3123,"title":{},"body":{"changelog.html":{}}}],["improvement",{"_index":3231,"title":{},"body":{"changelog.html":{}}}],["improvements",{"_index":3200,"title":{},"body":{"changelog.html":{}}}],["improving",{"_index":3361,"title":{},"body":{"changelog.html":{}}}],["inbounds",{"_index":1518,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["include",{"_index":704,"title":{},"body":{"classes/ColorOptions.html":{},"index.html":{}}}],["included",{"_index":789,"title":{},"body":{"classes/ColorOptions.html":{},"index.html":{}}}],["including",{"_index":1382,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["increase",{"_index":3111,"title":{},"body":{"changelog.html":{}}}],["independent",{"_index":3561,"title":{},"body":{"index.html":{}}}],["index",{"_index":16,"title":{"index.html":{}},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexincollection",{"_index":1317,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["individually",{"_index":1597,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["infinity",{"_index":348,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["infologger",{"_index":1322,"title":{"classes/InfoLogger.html":{}},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["infologgerlist",{"_index":1532,"title":{},"body":{"classes/InfoLogger.html":{}}}],["information",{"_index":1540,"title":{},"body":{"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["inherited",{"_index":86,"title":{},"body":{"classes/ARManager.html":{},"classes/LHCbLoader.html":{},"classes/VRManager.html":{}}}],["init",{"_index":2292,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["init(camera",{"_index":2503,"title":{},"body":{"classes/SelectionManager.html":{}}}],["init(configuration",{"_index":2862,"title":{},"body":{"interfaces/Window.html":{}}}],["init(elementid",{"_index":2319,"title":{},"body":{"classes/RendererManager.html":{}}}],["initchargecoloroptions",{"_index":691,"title":{},"body":{"classes/ColorOptions.html":{}}}],["initcolorbyoptions",{"_index":692,"title":{},"body":{"classes/ColorOptions.html":{}}}],["initial",{"_index":203,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["initialize",{"_index":710,"title":{},"body":{"classes/ColorOptions.html":{},"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["initialized",{"_index":2482,"title":{},"body":{"classes/SelectionManager.html":{}}}],["initializes",{"_index":3017,"title":{},"body":{"interfaces/Window.html":{}}}],["initializing",{"_index":2302,"title":{},"body":{"classes/RendererManager.html":{}}}],["initially",{"_index":1045,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["initiallyvisible",{"_index":1041,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["initmomcoloroptions",{"_index":693,"title":{},"body":{"classes/ColorOptions.html":{}}}],["initrenderer",{"_index":2293,"title":{},"body":{"classes/RendererManager.html":{}}}],["initrenderer(elementid",{"_index":2321,"title":{},"body":{"classes/RendererManager.html":{}}}],["initxr(xrsessiontype",{"_index":2877,"title":{},"body":{"interfaces/Window.html":{}}}],["input",{"_index":1399,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["inputfile",{"_index":3621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.accept",{"_index":3624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.click",{"_index":3635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.onchange",{"_index":3625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.remove",{"_index":3633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.type",{"_index":3623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inside",{"_index":623,"title":{},"body":{"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["install",{"_index":3564,"title":{},"body":{"index.html":{}}}],["instance",{"_index":729,"title":{},"body":{"classes/ColorOptions.html":{},"classes/LoadingManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["instanceof",{"_index":349,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["instantiate",{"_index":1390,"title":{},"body":{"classes/ExportManager.html":{}}}],["instead",{"_index":1791,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["integrator",{"_index":1445,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["interface",{"_index":219,"title":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["interfaces",{"_index":221,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["intersected",{"_index":2508,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject",{"_index":2548,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.name",{"_index":2553,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.userdata",{"_index":2559,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.userdata[key",{"_index":2570,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersection",{"_index":3604,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["intersectobject",{"_index":2472,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject(event",{"_index":2505,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects",{"_index":2507,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects.length",{"_index":2592,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects[0].object",{"_index":2595,"title":{},"body":{"classes/SelectionManager.html":{}}}],["interval",{"_index":2824,"title":{},"body":{"classes/VRManager.html":{}}}],["intervalid",{"_index":2825,"title":{},"body":{"classes/VRManager.html":{}}}],["intitialize",{"_index":2852,"title":{},"body":{"interfaces/Window.html":{}}}],["introduce",{"_index":3315,"title":{},"body":{"changelog.html":{}}}],["invisible",{"_index":391,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["ischecked",{"_index":1893,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["isfixedoverlay",{"_index":2294,"title":{},"body":{"classes/RendererManager.html":{}}}],["isinit",{"_index":2462,"title":{},"body":{"classes/SelectionManager.html":{}}}],["issimplearray",{"_index":2092,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["issue",{"_index":2017,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["issues",{"_index":3119,"title":{},"body":{"changelog.html":{}}}],["it's",{"_index":2221,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["item",{"_index":1664,"title":{},"body":{"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{}}}],["itemloaded",{"_index":1658,"title":{},"body":{"classes/LoadingManager.html":{}}}],["itemloaded(id",{"_index":1675,"title":{},"body":{"classes/LoadingManager.html":{}}}],["items",{"_index":433,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/LoadingManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["itself",{"_index":1768,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["j",{"_index":1648,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{}}}],["jasmine",{"_index":3412,"title":{},"body":{"changelog.html":{}}}],["jet",{"_index":361,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["jetparams",{"_index":1976,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams.color",{"_index":2079,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams.coner",{"_index":2074,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams.energy",{"_index":2062,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams.et",{"_index":2063,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams.eta",{"_index":2054,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams.phi",{"_index":2055,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams.theta",{"_index":2057,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams.uuid",{"_index":2087,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jets",{"_index":1604,"title":{},"body":{"classes/LHCbLoader.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["jive",{"_index":3103,"title":{},"body":{"changelog.html":{}}}],["jivexml",{"_index":2688,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["jivexmlloader",{"_index":2697,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{}}}],["jixexml",{"_index":3286,"title":{},"body":{"changelog.html":{}}}],["js",{"_index":3552,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":1584,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["json.parse(input",{"_index":2937,"title":{},"body":{"interfaces/Window.html":{}}}],["json.parse(json",{"_index":1827,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["json.stringify(jsonresult",{"_index":1406,"title":{},"body":{"classes/ExportManager.html":{}}}],["json.stringify(state",{"_index":2652,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata",{"_index":2654,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay",{"_index":2658,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']?.['cameraposition",{"_index":2660,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']?.['clippingangle",{"_index":2661,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['phoenixmenu",{"_index":2655,"title":{},"body":{"classes/StateManager.html":{}}}],["jsonobject",{"_index":1825,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['children",{"_index":1844,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['childrenactive",{"_index":1828,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['configs",{"_index":1832,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['togglestate",{"_index":1829,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonresult",{"_index":1404,"title":{},"body":{"classes/ExportManager.html":{}}}],["jsroot",{"_index":2404,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jsroot.core.js",{"_index":2429,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsroot.csg.js",{"_index":2431,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsroot.geo.build(obj",{"_index":2962,"title":{},"body":{"interfaces/Window.html":{}}}],["jsroot.geom.js",{"_index":2433,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsroot.newhttprequest(url",{"_index":2960,"title":{},"body":{"interfaces/Window.html":{}}}],["jsroot.openfile(url).then((file",{"_index":2970,"title":{},"body":{"interfaces/Window.html":{}}}],["jsroot.painter.js",{"_index":2432,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsroot_cdn_url",{"_index":2426,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsrooteventloader",{"_index":3518,"title":{},"body":{"coverage.html":{}}}],["jsrootversion",{"_index":2405,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jszip",{"_index":3550,"title":{},"body":{"dependencies.html":{}}}],["k1",{"_index":1457,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k1.clone().sub(k2).sub(k3).add(k4",{"_index":1484,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k2",{"_index":1450,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k3",{"_index":1451,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k4",{"_index":1452,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k4).lpnorm",{"_index":1485,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["keep",{"_index":3318,"title":{},"body":{"changelog.html":{}}}],["key",{"_index":706,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["keyboard",{"_index":2875,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["keys",{"_index":773,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"miscellaneous/enumerations.html":{}}}],["kutta",{"_index":1430,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["kutta.ts",{"_index":1423,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["kutta.ts:12",{"_index":2392,"title":{},"body":{"classes/RungeKutta.html":{}}}],["kutta.ts:126",{"_index":2391,"title":{},"body":{"classes/RungeKutta.html":{}}}],["kutta.ts:168",{"_index":2605,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:170",{"_index":2601,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:172",{"_index":2603,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:174",{"_index":2606,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:176",{"_index":2609,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:178",{"_index":2607,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:180",{"_index":2602,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:182",{"_index":2604,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:192",{"_index":1426,"title":{},"body":{"classes/Field.html":{}}}],["label",{"_index":781,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["labelid",{"_index":1049,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["labelitem",{"_index":1212,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["labelitem.add(this.guiparameters[labelid",{"_index":1224,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["labelitemfolder",{"_index":1058,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["labelnode",{"_index":1885,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["labelnode.addconfig('button",{"_index":1944,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["labelnode.addconfig('color",{"_index":1943,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["labelnode?.remove",{"_index":1949,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["labels",{"_index":1019,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["labelsfolder",{"_index":995,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["labelsobject",{"_index":1558,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["labelssizemenu",{"_index":1203,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["labelssizemenu.onfinishchange(onsizechange",{"_index":1205,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["last",{"_index":148,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["later",{"_index":1369,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["latest",{"_index":2406,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{}}}],["left",{"_index":583,"title":{},"body":{"classes/CMSObjects.html":{},"classes/URLOptionsManager.html":{}}}],["length",{"_index":1517,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["level",{"_index":1740,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["lhcb",{"_index":1557,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["lhcbloader",{"_index":1554,"title":{"classes/LHCbLoader.html":{}},"body":{"classes/LHCbLoader.html":{},"coverage.html":{}}}],["library",{"_index":1328,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"changelog.html":{}}}],["limit",{"_index":3157,"title":{},"body":{"changelog.html":{}}}],["limits",{"_index":3276,"title":{},"body":{"changelog.html":{}}}],["line",{"_index":1972,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["line(geometry",{"_index":2170,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/VRManager.html":{}}}],["line(linegeometry",{"_index":2043,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["line.name",{"_index":2820,"title":{},"body":{"classes/VRManager.html":{}}}],["line.scale.z",{"_index":2821,"title":{},"body":{"classes/VRManager.html":{}}}],["linebasicmaterial",{"_index":554,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["lineboxobject",{"_index":603,"title":{},"body":{"classes/CMSObjects.html":{}}}],["linedashedmaterial",{"_index":2005,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["linegeometry",{"_index":2038,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["linehit",{"_index":338,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["linehits",{"_index":3326,"title":{},"body":{"changelog.html":{}}}],["linematerial",{"_index":2040,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["lineobject",{"_index":2042,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["lineobject.name",{"_index":2044,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["lines",{"_index":598,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["linesegments",{"_index":556,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["linewidth",{"_index":2041,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["link",{"_index":559,"title":{},"body":{"classes/CMSObjects.html":{},"changelog.html":{}}}],["linked",{"_index":1626,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["linkedtrackcollection",{"_index":665,"title":{},"body":{"classes/ColorManager.html":{}}}],["linkedtracks",{"_index":666,"title":{},"body":{"classes/ColorManager.html":{}}}],["linkedtracks.foreach((trackindex",{"_index":673,"title":{},"body":{"classes/ColorManager.html":{}}}],["linting",{"_index":3118,"title":{},"body":{"changelog.html":{}}}],["list",{"_index":1342,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["listen",{"_index":1088,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["listener",{"_index":1670,"title":{},"body":{"classes/LoadingManager.html":{},"classes/VRManager.html":{}}}],["listentodisplayedeventchange(callback",{"_index":2997,"title":{},"body":{"interfaces/Window.html":{}}}],["listentoloadedeventschange(callback",{"_index":2999,"title":{},"body":{"interfaces/Window.html":{}}}],["literal",{"_index":233,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":860,"title":{},"body":{"interfaces/Configuration.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/ScriptLoader.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["loadable",{"_index":1574,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"interfaces/Window.html":{}}}],["loadconfig",{"_index":2717,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loaded",{"_index":1373,"title":{},"body":{"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["loader",{"_index":868,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["loader.geteventdata",{"_index":2733,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loader.process(res",{"_index":2732,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loader.ts",{"_index":1306,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/ScriptLoader.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loader.ts:15",{"_index":2402,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loader.ts:17",{"_index":1323,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:22",{"_index":1583,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loader.ts:29",{"_index":1349,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:31",{"_index":1579,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loader.ts:35",{"_index":1340,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:42",{"_index":1337,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:46",{"_index":2417,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loader.ts:48",{"_index":1345,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:57",{"_index":1318,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:67",{"_index":1354,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:8",{"_index":1567,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loaders",{"_index":1308,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loaders/event",{"_index":875,"title":{},"body":{"interfaces/Configuration.html":{}}}],["loaders/jivexml",{"_index":2698,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loaders/phoenix",{"_index":2699,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loadevent(eventkey",{"_index":2904,"title":{},"body":{"interfaces/Window.html":{}}}],["loadeventfolderstate",{"_index":1866,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["loadfile",{"_index":2640,"title":{},"body":{"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loadfile((data",{"_index":2645,"title":{},"body":{"classes/StateManager.html":{}}}],["loadgltfgeometry",{"_index":2951,"title":{},"body":{"interfaces/Window.html":{}}}],["loading",{"_index":870,"title":{},"body":{"interfaces/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["loadingmanager",{"_index":1559,"title":{"classes/LoadingManager.html":{}},"body":{"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["loadingmanager.addloadableitem('jsroot_scripts",{"_index":2425,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadingmanager.addloadableitem('single_script",{"_index":2436,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadingmanager.instance",{"_index":1681,"title":{},"body":{"classes/LoadingManager.html":{}}}],["loadingmanager.itemloaded('jsroot_scripts",{"_index":2435,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadingmanager.itemloaded('single_script",{"_index":2451,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadjsongeometry",{"_index":2955,"title":{},"body":{"interfaces/Window.html":{}}}],["loadjsrootscripts",{"_index":2399,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadjsrootscripts(jsrootversion",{"_index":2401,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadlabels",{"_index":1200,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["loadobjecttypes",{"_index":1566,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loadobjecttypes(eventdata",{"_index":1632,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loadobjgeometry",{"_index":2921,"title":{},"body":{"interfaces/Window.html":{}}}],["loadrootgeometry",{"_index":2968,"title":{},"body":{"interfaces/Window.html":{}}}],["loadrootjsongeometry",{"_index":2958,"title":{},"body":{"interfaces/Window.html":{}}}],["loads",{"_index":2884,"title":{},"body":{"interfaces/Window.html":{}}}],["loadsceneconfiguration(sceneconfiguration",{"_index":2986,"title":{},"body":{"interfaces/Window.html":{}}}],["loadscript",{"_index":2400,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadscript(scripturl",{"_index":2413,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadstatefromjson",{"_index":1723,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["loadstatefromjson(json",{"_index":1761,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["local",{"_index":461,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["location",{"_index":2252,"title":{},"body":{"classes/RKHelper.html":{}}}],["locationhref",{"_index":2703,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["locationhref.substr(locationhref.lastindexof",{"_index":2706,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["log",{"_index":1545,"title":{},"body":{"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["logger",{"_index":1334,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["logger.ts",{"_index":1531,"title":{},"body":{"classes/InfoLogger.html":{},"coverage.html":{}}}],["logger.ts:15",{"_index":1543,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:26",{"_index":1546,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:6",{"_index":1535,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:8",{"_index":1537,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logging",{"_index":1335,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/SelectionManager.html":{}}}],["logo",{"_index":2743,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["logs",{"_index":1536,"title":{},"body":{"classes/InfoLogger.html":{},"interfaces/Window.html":{}}}],["long",{"_index":2222,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["longer",{"_index":3156,"title":{},"body":{"changelog.html":{}}}],["look",{"_index":3031,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["lookatobject(uuid",{"_index":3032,"title":{},"body":{"interfaces/Window.html":{}}}],["loop",{"_index":2354,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["lowres",{"_index":1018,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["made",{"_index":522,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{}}}],["main",{"_index":1248,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/URLOptionsManager.html":{}}}],["mainlogo",{"_index":2742,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["mainrenderer",{"_index":2283,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.domelement.id",{"_index":2373,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.setpixelratio(window.devicepixelratio",{"_index":2372,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.setsize(rendererwidth",{"_index":2371,"title":{},"body":{"classes/RendererManager.html":{}}}],["major",{"_index":3485,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":392,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["making",{"_index":390,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["manage",{"_index":3181,"title":{},"body":{"changelog.html":{}}}],["manager",{"_index":11,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["manager.ts",{"_index":8,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["manager.ts:10",{"_index":2305,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:102",{"_index":2511,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:104",{"_index":1674,"title":{},"body":{"classes/LoadingManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:105",{"_index":2336,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:11",{"_index":1662,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:111",{"_index":1680,"title":{},"body":{"classes/LoadingManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:119",{"_index":2340,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:12",{"_index":1253,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:126",{"_index":2636,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:127",{"_index":2315,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:128",{"_index":2493,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:130",{"_index":2691,"title":{},"body":{"classes/URLOptionsManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:134",{"_index":2633,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:135",{"_index":2316,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:14",{"_index":1251,"title":{},"body":{"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:142",{"_index":2631,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:143",{"_index":2317,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:145",{"_index":2488,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:148",{"_index":2681,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:149",{"_index":2779,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:15",{"_index":82,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:150",{"_index":2638,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:153",{"_index":2309,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:158",{"_index":2483,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:16",{"_index":1260,"title":{},"body":{"classes/EffectsManager.html":{},"classes/LoadingManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:163",{"_index":2325,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:17",{"_index":60,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:173",{"_index":2694,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:175",{"_index":2343,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:18",{"_index":1256,"title":{},"body":{"classes/EffectsManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:187",{"_index":2311,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:19",{"_index":74,"title":{},"body":{"classes/ARManager.html":{},"classes/LoadingManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:20",{"_index":635,"title":{},"body":{"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:200",{"_index":2332,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:207",{"_index":2486,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:21",{"_index":2771,"title":{},"body":{"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:210",{"_index":2314,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:218",{"_index":2506,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:22",{"_index":48,"title":{},"body":{"classes/ARManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:220",{"_index":2323,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:228",{"_index":2330,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:23",{"_index":1245,"title":{},"body":{"classes/EffectsManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:24",{"_index":2477,"title":{},"body":{"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:241",{"_index":2498,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:25",{"_index":3053,"title":{},"body":{"classes/XRManager.html":{}}}],["manager.ts:26",{"_index":2491,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:27",{"_index":1365,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:28",{"_index":2492,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:29",{"_index":3052,"title":{},"body":{"classes/XRManager.html":{}}}],["manager.ts:30",{"_index":2476,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:31",{"_index":3050,"title":{},"body":{"classes/XRManager.html":{}}}],["manager.ts:32",{"_index":2478,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:34",{"_index":2320,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:36",{"_index":1667,"title":{},"body":{"classes/LoadingManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:38",{"_index":621,"title":{},"body":{"classes/ColorManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:41",{"_index":2481,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:43",{"_index":2475,"title":{},"body":{"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{}}}],["manager.ts:44",{"_index":2627,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:45",{"_index":1676,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:46",{"_index":2328,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:48",{"_index":1269,"title":{},"body":{"classes/EffectsManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:52",{"_index":1381,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:55",{"_index":629,"title":{},"body":{"classes/ColorManager.html":{}}}],["manager.ts:59",{"_index":2687,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:6",{"_index":1661,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:61",{"_index":1267,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:63",{"_index":1678,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:64",{"_index":2322,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:65",{"_index":2504,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:66",{"_index":1376,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:69",{"_index":1261,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:7",{"_index":618,"title":{},"body":{"classes/ColorManager.html":{}}}],["manager.ts:72",{"_index":643,"title":{},"body":{"classes/ColorManager.html":{}}}],["manager.ts:73",{"_index":118,"title":{},"body":{"classes/ARManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:77",{"_index":2782,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:78",{"_index":2629,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:8",{"_index":2304,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:83",{"_index":1669,"title":{},"body":{"classes/LoadingManager.html":{},"classes/SelectionManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:85",{"_index":1379,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:88",{"_index":1271,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:9",{"_index":1665,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:92",{"_index":1672,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:94",{"_index":2496,"title":{},"body":{"classes/SelectionManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:97",{"_index":1273,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:99",{"_index":2628,"title":{},"body":{"classes/StateManager.html":{}}}],["manager/animations",{"_index":222,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["manager/ar",{"_index":7,"title":{},"body":{"classes/ARManager.html":{},"coverage.html":{}}}],["manager/color",{"_index":611,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["manager/controls",{"_index":3531,"title":{},"body":{"coverage.html":{}}}],["manager/dat",{"_index":987,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"coverage.html":{}}}],["manager/effects",{"_index":1229,"title":{},"body":{"classes/EffectsManager.html":{},"coverage.html":{}}}],["manager/export",{"_index":1358,"title":{},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["manager/import",{"_index":3535,"title":{},"body":{"coverage.html":{}}}],["manager/index.ts",{"_index":3538,"title":{},"body":{"coverage.html":{}}}],["manager/phoenix",{"_index":877,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["manager/renderer",{"_index":2281,"title":{},"body":{"classes/RendererManager.html":{},"coverage.html":{}}}],["manager/scene",{"_index":1063,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"coverage.html":{}}}],["manager/selection",{"_index":2459,"title":{},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["manager/vr",{"_index":2759,"title":{},"body":{"classes/VRManager.html":{},"coverage.html":{}}}],["manager/xr",{"_index":2846,"title":{},"body":{"interfaces/Window.html":{},"classes/XRManager.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["managers/loading",{"_index":2422,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["managers/state",{"_index":2844,"title":{},"body":{"interfaces/Window.html":{}}}],["managers/three",{"_index":1355,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["managers/ui",{"_index":876,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["managers/url",{"_index":2845,"title":{},"body":{"interfaces/Window.html":{}}}],["manages",{"_index":1246,"title":{},"body":{"classes/EffectsManager.html":{},"interfaces/Window.html":{}}}],["managing",{"_index":251,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["manipulate",{"_index":1333,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["manual",{"_index":1801,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["manually",{"_index":366,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["many",{"_index":3198,"title":{},"body":{"changelog.html":{}}}],["map((key",{"_index":2567,"title":{},"body":{"classes/SelectionManager.html":{}}}],["match",{"_index":3147,"title":{},"body":{"changelog.html":{}}}],["matching",{"_index":186,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":2028,"title":{},"body":{"classes/PhoenixObjects.html":{},"interfaces/Window.html":{}}}],["material.opacity",{"_index":2082,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.abs(1",{"_index":839,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PrettySymbols.html":{}}}],["math.abs(position.z",{"_index":2111,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.abs(returnvec.x",{"_index":1486,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.abs(returnvec.y",{"_index":1487,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.abs(returnvec.z",{"_index":1488,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.atan(math.pow(math.e",{"_index":936,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["math.cos(phi",{"_index":2068,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.cos(theta",{"_index":2072,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.log(math.tan(theta",{"_index":937,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["math.pi",{"_index":301,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{}}}],["math.pow(fh",{"_index":1499,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.sign(1",{"_index":819,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PrettySymbols.html":{}}}],["math.sin(jetparams.coner",{"_index":2075,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.sin(phi",{"_index":2066,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.sin(theta",{"_index":2070,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.sqrt(cylradius2",{"_index":2110,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.sqrt(maxr2",{"_index":2109,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.sqrt(pos.x",{"_index":2258,"title":{},"body":{"classes/RKHelper.html":{}}}],["max",{"_index":735,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["maxcut",{"_index":1188,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["maxcut.onchange((value",{"_index":1190,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["maxentries",{"_index":1533,"title":{},"body":{"classes/InfoLogger.html":{}}}],["maximum",{"_index":751,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Cut.html":{}}}],["maxpositionx",{"_index":996,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["maxpositiony",{"_index":997,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["maxpositionz",{"_index":998,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["maxr2",{"_index":2106,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["maxstepsize",{"_index":2597,"title":{},"body":{"classes/State.html":{}}}],["maxvalue",{"_index":968,"title":{},"body":{"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{}}}],["maxz",{"_index":2112,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["menu",{"_index":731,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["menu's",{"_index":1039,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["menu.onchange((value",{"_index":1152,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["menu/config",{"_index":3602,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["menu/phoenix",{"_index":772,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"coverage.html":{}}}],["menunodename",{"_index":1877,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["menus",{"_index":1332,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"changelog.html":{}}}],["mesh",{"_index":243,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["mesh(geometry",{"_index":2031,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh(particlegeometry",{"_index":484,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["mesh.name",{"_index":2086,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.position.copy(translation",{"_index":2083,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.quaternion.copy(quaternion",{"_index":2084,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.userdata",{"_index":2085,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.uuid",{"_index":2088,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["meshbasicmaterial",{"_index":242,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["meshphongmaterial",{"_index":646,"title":{},"body":{"classes/ColorManager.html":{},"classes/PhoenixObjects.html":{}}}],["meshtoonmaterial",{"_index":2001,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["met",{"_index":1980,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["metadata",{"_index":1346,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["method",{"_index":3273,"title":{},"body":{"changelog.html":{}}}],["methods",{"_index":33,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["metparams",{"_index":1979,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["metparams.color",{"_index":2168,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["metparams.ety",{"_index":2165,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["metparams.uuid",{"_index":2173,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mev",{"_index":2270,"title":{},"body":{"classes/RKHelper.html":{}}}],["mid",{"_index":753,"title":{},"body":{"classes/ColorOptions.html":{}}}],["min",{"_index":734,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{}}}],["min/max",{"_index":738,"title":{},"body":{"classes/ColorOptions.html":{}}}],["mincut",{"_index":1180,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["mincut.onchange((value",{"_index":1186,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["minimum",{"_index":750,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Cut.html":{}}}],["minor",{"_index":3409,"title":{},"body":{"changelog.html":{}}}],["minormax",{"_index":754,"title":{},"body":{"classes/ColorOptions.html":{}}}],["minvalue",{"_index":969,"title":{},"body":{"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{}}}],["misc",{"_index":3210,"title":{},"body":{"changelog.html":{}}}],["miscellaneous",{"_index":3554,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":2172,"title":{},"body":{"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["missingenergy",{"_index":3614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mm",{"_index":2269,"title":{},"body":{"classes/RKHelper.html":{}}}],["mock",{"_index":3619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mocking",{"_index":3637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":128,"title":{},"body":{"classes/ARManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["model",{"_index":2701,"title":{},"body":{"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["modular",{"_index":3558,"title":{},"body":{"index.html":{}}}],["module",{"_index":3568,"title":{},"body":{"index.html":{}}}],["modules",{"_index":3586,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["mom",{"_index":775,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PrettySymbols.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["momcolors",{"_index":684,"title":{},"body":{"classes/ColorOptions.html":{}}}],["momentum",{"_index":715,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["momvalue",{"_index":823,"title":{},"body":{"classes/ColorOptions.html":{}}}],["momvalue.color",{"_index":832,"title":{},"body":{"classes/ColorOptions.html":{}}}],["more",{"_index":1607,"title":{},"body":{"classes/LHCbLoader.html":{},"changelog.html":{}}}],["mouse",{"_index":2484,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.x",{"_index":2583,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.y",{"_index":2586,"title":{},"body":{"classes/SelectionManager.html":{}}}],["move",{"_index":284,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["moveindirection",{"_index":2767,"title":{},"body":{"classes/VRManager.html":{}}}],["moveindirection(direction",{"_index":2777,"title":{},"body":{"classes/VRManager.html":{}}}],["movement",{"_index":2770,"title":{},"body":{"classes/VRManager.html":{}}}],["moving",{"_index":373,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixObjects.html":{},"classes/VRManager.html":{}}}],["mss",{"_index":1515,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multidimensional",{"_index":517,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["multiple",{"_index":1350,"title":{},"body":{"interfaces/EventDataLoader.html":{},"changelog.html":{}}}],["multiplyscalar(fh",{"_index":1508,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multiplyscalar(fh2",{"_index":1503,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multiplyscalar(qop",{"_index":1473,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multiplyscalar(updatedscale.x",{"_index":377,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["muon",{"_index":550,"title":{},"body":{"classes/CMSObjects.html":{},"classes/LHCbLoader.html":{}}}],["muonchamber",{"_index":597,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(boxobject",{"_index":606,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(lineboxobject",{"_index":607,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams",{"_index":552,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams.color",{"_index":590,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams.uuid",{"_index":608,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams[face",{"_index":565,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchambers",{"_index":3613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":52,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["name('color",{"_index":1109,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('depth",{"_index":1155,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('load",{"_index":1209,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('max",{"_index":1189,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('min",{"_index":1184,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('opacity",{"_index":1114,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('random",{"_index":1176,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('reset",{"_index":1179,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('save",{"_index":1208,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('scale",{"_index":1123,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('show",{"_index":1087,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('size",{"_index":1204,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('wireframe",{"_index":1096,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('x",{"_index":1129,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('y",{"_index":1133,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('z",{"_index":1136,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('çolor",{"_index":1219,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name.split('>').foreach((nodename",{"_index":1855,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["named",{"_index":1663,"title":{},"body":{"classes/LoadingManager.html":{}}}],["names",{"_index":1618,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["namespace",{"_index":3322,"title":{},"body":{"changelog.html":{}}}],["naming",{"_index":1606,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["native",{"_index":919,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["navigator",{"_index":3058,"title":{},"body":{"classes/XRManager.html":{}}}],["ndof",{"_index":2199,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["near",{"_index":78,"title":{},"body":{"classes/ARManager.html":{}}}],["necessary",{"_index":916,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["need",{"_index":367,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{}}}],["needed",{"_index":2223,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["needing",{"_index":3154,"title":{},"body":{"changelog.html":{}}}],["new",{"_index":213,"title":{},"body":{"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newcolorbyoption",{"_index":804,"title":{},"body":{"classes/ColorOptions.html":{}}}],["newcolorbyoption?.apply",{"_index":807,"title":{},"body":{"classes/ColorOptions.html":{}}}],["newcolorbyoption?.key",{"_index":806,"title":{},"body":{"classes/ColorOptions.html":{}}}],["newvalue",{"_index":1117,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ng",{"_index":3144,"title":{},"body":{"changelog.html":{}}}],["node",{"_index":732,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["node.ts",{"_index":1708,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"coverage.html":{}}}],["node.ts:10",{"_index":1737,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:105",{"_index":1770,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:115",{"_index":1748,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:12",{"_index":1741,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:129",{"_index":1767,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:14",{"_index":1743,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:149",{"_index":1751,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:16",{"_index":1730,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:173",{"_index":1760,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:18",{"_index":1736,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:194",{"_index":1762,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:20",{"_index":1739,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:22",{"_index":1742,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:240",{"_index":1754,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:258",{"_index":1759,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:27",{"_index":1732,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:30",{"_index":1731,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:32",{"_index":1728,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:66",{"_index":1745,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:8",{"_index":1738,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:83",{"_index":1765,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:92",{"_index":1763,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild",{"_index":1845,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.loadstatefromjson(childstate",{"_index":1851,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.name",{"_index":1847,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.nodelevel",{"_index":1849,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig",{"_index":1833,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig.label",{"_index":1837,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig.type",{"_index":1835,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig[prop",{"_index":1840,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodefound",{"_index":1852,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodejs.timeout",{"_index":2826,"title":{},"body":{"classes/VRManager.html":{}}}],["nodelevel",{"_index":1714,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodename",{"_index":1856,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodename.trim",{"_index":1857,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodes",{"_index":1733,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["none",{"_index":861,"title":{},"body":{"interfaces/Configuration.html":{},"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["normal",{"_index":1258,"title":{},"body":{"classes/EffectsManager.html":{}}}],["normalblending",{"_index":1276,"title":{},"body":{"classes/EffectsManager.html":{}}}],["notable",{"_index":3087,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":138,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["nothing",{"_index":945,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["now",{"_index":957,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["nowdisplayingevent",{"_index":2850,"title":{},"body":{"interfaces/Window.html":{}}}],["npm",{"_index":3565,"title":{},"body":{"index.html":{}}}],["null",{"_index":90,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":117,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["number'].includes",{"_index":2569,"title":{},"body":{"classes/SelectionManager.html":{}}}],["numofsteps",{"_index":297,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["obj",{"_index":1139,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/ExportManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["obj.eventobject",{"_index":405,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["obj.eventobject.name",{"_index":404,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["obj.eventobject.visible",{"_index":418,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["obj.obj",{"_index":1394,"title":{},"body":{"classes/ExportManager.html":{}}}],["object",{"_index":69,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["object's",{"_index":817,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["object(s",{"_index":638,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.assign",{"_index":595,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["object.computelinedistances",{"_index":2171,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["object.entries(this.momcolors).foreach(([key",{"_index":822,"title":{},"body":{"classes/ColorOptions.html":{}}}],["object.entries(urloptionwithids).foreach(([urloption",{"_index":2753,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["object.keys(intersectedobject.userdata",{"_index":2566,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(paramscopy",{"_index":2217,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["object.keys(prettyparams",{"_index":2560,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(prettysymbols.symbols).find((symbol",{"_index":2210,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["object.keys(sceneconfiguration.eventdata",{"_index":2987,"title":{},"body":{"interfaces/Window.html":{}}}],["object.keys(this.progressitems).length",{"_index":1698,"title":{},"body":{"classes/LoadingManager.html":{}}}],["object.keys(trackscollections",{"_index":2264,"title":{},"body":{"classes/RKHelper.html":{}}}],["object.material.color.set(color",{"_index":651,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.material?.color",{"_index":649,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.name",{"_index":668,"title":{},"body":{"classes/ColorManager.html":{},"classes/ExportManager.html":{},"classes/PhoenixObjects.html":{}}}],["object.userdata",{"_index":667,"title":{},"body":{"classes/ColorManager.html":{},"classes/PhoenixObjects.html":{}}}],["object.uuid",{"_index":2174,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["object.values(collection.children",{"_index":657,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.values(this.progressitems).reduce",{"_index":1694,"title":{},"body":{"classes/LoadingManager.html":{}}}],["object3d",{"_index":246,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{}}}],["object['material",{"_index":670,"title":{},"body":{"classes/ColorManager.html":{}}}],["object['material']?.color",{"_index":659,"title":{},"body":{"classes/ColorManager.html":{}}}],["objectcollection",{"_index":1590,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["objectcolor",{"_index":2029,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objectgroup",{"_index":1587,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["objectname",{"_index":2967,"title":{},"body":{"interfaces/Window.html":{}}}],["objectparams",{"_index":757,"title":{},"body":{"classes/ColorOptions.html":{}}}],["objectparams?.charge",{"_index":821,"title":{},"body":{"classes/ColorOptions.html":{}}}],["objectparams?.dparams?.[4",{"_index":838,"title":{},"body":{"classes/ColorOptions.html":{}}}],["objectparams?.mom",{"_index":841,"title":{},"body":{"classes/ColorOptions.html":{}}}],["objects",{"_index":255,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["objects.traverse((object",{"_index":648,"title":{},"body":{"classes/ColorManager.html":{}}}],["objects.ts",{"_index":540,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["objects.ts:134",{"_index":1975,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:198",{"_index":1966,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:25",{"_index":548,"title":{},"body":{"classes/CMSObjects.html":{}}}],["objects.ts:277",{"_index":1998,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:309",{"_index":1995,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:340",{"_index":1962,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:38",{"_index":1988,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:392",{"_index":1982,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:448",{"_index":1991,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:474",{"_index":1978,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objectsgroup",{"_index":632,"title":{},"body":{"classes/ColorManager.html":{},"classes/SelectionManager.html":{}}}],["objectsgroup.getobjectbyproperty('uuid",{"_index":2596,"title":{},"body":{"classes/SelectionManager.html":{}}}],["objectstoanimatewithsphere",{"_index":325,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["objectstoanimatewithsphere.foreach((obj",{"_index":403,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["objectstoanimatewithsphere.push",{"_index":397,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["objecttype",{"_index":1413,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["objecttype.children",{"_index":1417,"title":{},"body":{"classes/ExportManager.html":{}}}],["objecttype.name",{"_index":1415,"title":{},"body":{"classes/ExportManager.html":{}}}],["objectuserdata",{"_index":634,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{}}}],["objectvisibility(collectionname",{"_index":1171,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["objectvisibility(labelid",{"_index":1217,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["objectvisibility(scenemanager.event_data_id",{"_index":1153,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["objectvisibility(scenemanager.geometries_id",{"_index":1092,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["objexporter",{"_index":1384,"title":{},"body":{"classes/ExportManager.html":{}}}],["objfolder",{"_index":1104,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["objfolder.add(this.guiparameters[name",{"_index":1140,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["objfolder.remove",{"_index":1906,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["objfolder.togglestate",{"_index":1901,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["objs",{"_index":3153,"title":{},"body":{"changelog.html":{}}}],["observable",{"_index":202,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["observed",{"_index":195,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["olddrawrangecount",{"_index":351,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["older",{"_index":3269,"title":{},"body":{"changelog.html":{}}}],["omit",{"_index":1747,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["onanimationend",{"_index":282,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["onanimationsphereupdate",{"_index":401,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["onanimationsphereupdate(new",{"_index":434,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["onanimationstart",{"_index":315,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["once",{"_index":394,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ScriptLoader.html":{}}}],["onchange",{"_index":784,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{}}}],["onchange((value",{"_index":1130,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["onclick",{"_index":787,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{}}}],["oncolorchange",{"_index":1193,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["oncontrollerselectend",{"_index":2765,"title":{},"body":{"classes/VRManager.html":{}}}],["oncontrollerselectstart",{"_index":2766,"title":{},"body":{"classes/VRManager.html":{}}}],["ondisplayedeventchange",{"_index":2849,"title":{},"body":{"interfaces/Window.html":{}}}],["ondocumentmousedown",{"_index":2463,"title":{},"body":{"classes/SelectionManager.html":{}}}],["one",{"_index":1147,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["onend",{"_index":312,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["oneventschange",{"_index":2848,"title":{},"body":{"interfaces/Window.html":{}}}],["onfileread",{"_index":3616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onfileread?.(e.target.result.tostring",{"_index":3632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onloadcallbacks",{"_index":1650,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onloadlabels",{"_index":1195,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["onlyselectedcolorbyoption",{"_index":694,"title":{},"body":{"classes/ColorOptions.html":{}}}],["onprogress",{"_index":1659,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onprogress(id",{"_index":1677,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onprogresscallbacks",{"_index":1651,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onsavelabels",{"_index":1194,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["onsessionended",{"_index":28,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["onsessionstarted",{"_index":131,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["onsizechange",{"_index":1192,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["ontoggle",{"_index":1191,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{}}}],["ontouchdown",{"_index":2464,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ontouchmove",{"_index":2465,"title":{},"body":{"classes/SelectionManager.html":{}}}],["onupdate",{"_index":197,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["onupdate(callback",{"_index":207,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["onxrsessionended",{"_index":34,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["onxrsessionstarted",{"_index":36,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["onxrsessionstarted(session",{"_index":113,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["opacity",{"_index":482,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["opacity.onfinishchange((newvalue",{"_index":1115,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["operations",{"_index":13,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["optimal",{"_index":3437,"title":{},"body":{"changelog.html":{}}}],["optimize",{"_index":3238,"title":{},"body":{"changelog.html":{}}}],["option",{"_index":741,"title":{},"body":{"classes/ColorOptions.html":{},"classes/LHCbLoader.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["optional",{"_index":54,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["optionalfeatures",{"_index":163,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["optionally",{"_index":1967,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["options",{"_index":679,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["options.ts",{"_index":678,"title":{},"body":{"classes/ColorOptions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["options.ts:124",{"_index":760,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:150",{"_index":759,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:176",{"_index":742,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:193",{"_index":766,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:207",{"_index":761,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:246",{"_index":743,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:256",{"_index":746,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:26",{"_index":726,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:28",{"_index":727,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:282",{"_index":756,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:293",{"_index":744,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:30",{"_index":739,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:300",{"_index":762,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:32",{"_index":730,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:35",{"_index":721,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:57",{"_index":724,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:65",{"_index":737,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:74",{"_index":701,"title":{},"body":{"classes/ColorOptions.html":{}}}],["origin",{"_index":440,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["original",{"_index":372,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{}}}],["otherwise",{"_index":816,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"classes/RKHelper.html":{}}}],["out",{"_index":360,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["outdated",{"_index":142,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["outer",{"_index":2127,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["outerbox",{"_index":2130,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["outerbox.add(box",{"_index":2136,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["outerbox.name",{"_index":2148,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["outerbox.quaternion.copy(qrot",{"_index":2146,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["outerbox.userdata",{"_index":2147,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["outerbox.uuid",{"_index":2150,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["outline",{"_index":1231,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["outlinepass",{"_index":1265,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["outlinepass.overlaymaterial.blending",{"_index":1298,"title":{},"body":{"classes/EffectsManager.html":{}}}],["outlinepass.visibleedgecolor.set(0xdf5330",{"_index":1300,"title":{},"body":{"classes/EffectsManager.html":{}}}],["outlinepass.visibleedgecolor.set(0xffff66",{"_index":1299,"title":{},"body":{"classes/EffectsManager.html":{}}}],["output",{"_index":1402,"title":{},"body":{"classes/ExportManager.html":{},"changelog.html":{}}}],["outter",{"_index":2133,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["over",{"_index":329,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["overlay",{"_index":64,"title":{},"body":{"classes/ARManager.html":{},"classes/RendererManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["overlaycanvas",{"_index":2337,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["overlayed",{"_index":3014,"title":{},"body":{"interfaces/Window.html":{}}}],["overlayrenderer",{"_index":2284,"title":{},"body":{"classes/RendererManager.html":{}}}],["overlays",{"_index":67,"title":{},"body":{"classes/ARManager.html":{}}}],["overridden",{"_index":1808,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["override",{"_index":153,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["overview",{"_index":3587,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":2213,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["p",{"_index":1437,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["package",{"_index":3497,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"index.html":{}}}],["packages",{"_index":3126,"title":{},"body":{"changelog.html":{}}}],["page",{"_index":2692,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["panel",{"_index":1541,"title":{},"body":{"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/SelectionManager.html":{}}}],["param",{"_index":152,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["parameter",{"_index":2060,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{}}}],["parameters",{"_index":50,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["parameterss",{"_index":2205,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parametrised",{"_index":3452,"title":{},"body":{"changelog.html":{}}}],["paramkey",{"_index":2216,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["params",{"_index":641,"title":{},"body":{"classes/ColorManager.html":{},"classes/LHCbLoader.html":{},"classes/PrettySymbols.html":{},"changelog.html":{}}}],["paramscopy",{"_index":2214,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams",{"_index":2238,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[0",{"_index":2235,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[1",{"_index":2237,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[2",{"_index":2230,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[3",{"_index":2229,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[4",{"_index":2232,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy?.dparams",{"_index":2227,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy['pos",{"_index":2224,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy[paramkey",{"_index":2220,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy[symbol",{"_index":2219,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parent",{"_index":1715,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{}}}],["parentelement",{"_index":2415,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["parentelement.appendchild(scriptelement",{"_index":2454,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["parentnode",{"_index":1898,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["parentnode.addchild(name",{"_index":1900,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["parse",{"_index":1398,"title":{},"body":{"classes/ExportManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["parsed",{"_index":2948,"title":{},"body":{"interfaces/Window.html":{}}}],["parsefloat(objectparams?.dparams?.[4",{"_index":840,"title":{},"body":{"classes/ColorOptions.html":{}}}],["parsegltfgeometry",{"_index":2945,"title":{},"body":{"interfaces/Window.html":{}}}],["parseint(objectparams?.dparams?.[4",{"_index":820,"title":{},"body":{"classes/ColorOptions.html":{}}}],["parseobjgeometry",{"_index":2927,"title":{},"body":{"interfaces/Window.html":{}}}],["parsephoenixdisplay(input",{"_index":2935,"title":{},"body":{"interfaces/Window.html":{}}}],["parsephoenixevents(eventsdata",{"_index":2885,"title":{},"body":{"interfaces/Window.html":{}}}],["parses",{"_index":1635,"title":{},"body":{"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["parsing",{"_index":3405,"title":{},"body":{"changelog.html":{}}}],["part",{"_index":544,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["part_list",{"_index":1645,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["particle",{"_index":469,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["particle1",{"_index":483,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particle1.clone",{"_index":486,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particle1.position.setz(distancefromorigin",{"_index":487,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particle2",{"_index":485,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particle2.position.setz",{"_index":488,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particlecolor",{"_index":474,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particlegeometry",{"_index":478,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particlematerial",{"_index":481,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particles",{"_index":468,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particlesize",{"_index":470,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particletoorigin",{"_index":493,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particletweens",{"_index":490,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particletweens.push(particletoorigin",{"_index":495,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particletweens[0].oncomplete",{"_index":496,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["pass",{"_index":1232,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["passed",{"_index":1520,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["passes",{"_index":1247,"title":{},"body":{"classes/EffectsManager.html":{}}}],["passindex",{"_index":1302,"title":{},"body":{"classes/EffectsManager.html":{}}}],["path",{"_index":238,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["pathlength",{"_index":2598,"title":{},"body":{"classes/State.html":{}}}],["pdata_list",{"_index":1646,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["peek",{"_index":2096,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["per",{"_index":908,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["perform",{"_index":990,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["performance",{"_index":2351,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["performed",{"_index":1433,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["performing",{"_index":1428,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["persist",{"_index":3202,"title":{},"body":{"changelog.html":{}}}],["perspective",{"_index":1891,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["perspectivecamera",{"_index":46,"title":{},"body":{"classes/ARManager.html":{}}}],["phi",{"_index":893,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["phi=0",{"_index":947,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["phi=pi",{"_index":954,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["phnx",{"_index":2934,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenix",{"_index":66,"title":{},"body":{"classes/ARManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["phoenix.min.js",{"_index":3580,"title":{},"body":{"index.html":{}}}],["phoenixloader",{"_index":1556,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/URLOptionsManager.html":{},"coverage.html":{},"index.html":{}}}],["phoenixloader:123",{"_index":1616,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:144",{"_index":1633,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:19",{"_index":1570,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:21",{"_index":1577,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:23",{"_index":1569,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:25",{"_index":1573,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:27",{"_index":1576,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:29",{"_index":1572,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:388",{"_index":1603,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:439",{"_index":1589,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:47",{"_index":1614,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:473",{"_index":1631,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:491",{"_index":1620,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:62",{"_index":1580,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:625",{"_index":1599,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:651",{"_index":1629,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:662",{"_index":1611,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:83",{"_index":1628,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:99",{"_index":1617,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixmenu",{"_index":1864,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{}}}],["phoenixmenuconfig",{"_index":1735,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["phoenixmenuconfigs",{"_index":1771,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["phoenixmenunode",{"_index":698,"title":{"classes/PhoenixMenuNode.html":{}},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"coverage.html":{}}}],["phoenixmenunode(name",{"_index":1779,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixmenunode.name",{"_index":1940,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["phoenixmenuroot",{"_index":856,"title":{},"body":{"interfaces/Configuration.html":{},"classes/StateManager.html":{}}}],["phoenixmenuui",{"_index":1862,"title":{"classes/PhoenixMenuUI.html":{}},"body":{"classes/PhoenixMenuUI.html":{},"coverage.html":{}}}],["phoenixnodejson",{"_index":1816,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['children",{"_index":1823,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['children'].push(child.getnodestate",{"_index":1824,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['childrenactive",{"_index":1820,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['configs",{"_index":1822,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['name",{"_index":1817,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['nodelevel",{"_index":1818,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['togglestate",{"_index":1819,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixobjects",{"_index":545,"title":{"classes/PhoenixObjects.html":{}},"body":{"classes/CMSObjects.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["phoenixscene",{"_index":2936,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.scene",{"_index":2939,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.sceneconfiguration",{"_index":2938,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixurloptions",{"_index":2702,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["photon",{"_index":1623,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["physics",{"_index":541,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["pi",{"_index":898,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["picker",{"_index":1106,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["pipe",{"_index":3466,"title":{},"body":{"changelog.html":{}}}],["place",{"_index":2128,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["planar",{"_index":1985,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["planarcalocell",{"_index":1983,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["planarcalocells",{"_index":3253,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["planarcalorimeters",{"_index":3206,"title":{},"body":{"changelog.html":{}}}],["plane",{"_index":248,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixObjects.html":{}}}],["plane[3",{"_index":2140,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["planes",{"_index":436,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["playground",{"_index":3101,"title":{},"body":{"changelog.html":{}}}],["plength",{"_index":1516,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["point",{"_index":1453,"title":{},"body":{"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pointpos",{"_index":1996,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["points",{"_index":1999,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["points.push(new",{"_index":2163,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsmaterial",{"_index":2003,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos",{"_index":265,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos.x",{"_index":2259,"title":{},"body":{"classes/RKHelper.html":{}}}],["pos.y",{"_index":2260,"title":{},"body":{"classes/RKHelper.html":{}}}],["pos.z",{"_index":2257,"title":{},"body":{"classes/RKHelper.html":{}}}],["pos1",{"_index":1465,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos2",{"_index":1476,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos[0",{"_index":271,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["pos[1",{"_index":273,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["pos[2",{"_index":275,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["position",{"_index":79,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["position.length",{"_index":2108,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["position.setlength",{"_index":2107,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["position.setlength((position.length",{"_index":2113,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["position.slice(0",{"_index":2139,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["positioning",{"_index":1126,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["positions",{"_index":227,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["positions.concat(extrapolatedpos",{"_index":2280,"title":{},"body":{"classes/RKHelper.html":{}}}],["positions.length",{"_index":2019,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["positions.slice(1).foreach",{"_index":533,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["positions[0].duration",{"_index":529,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["positions[0].easing",{"_index":531,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["positions[0].position",{"_index":528,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["positive",{"_index":953,"title":{},"body":{"classes/CoordinateHelper.html":{},"changelog.html":{}}}],["possible",{"_index":722,"title":{},"body":{"classes/ColorOptions.html":{},"changelog.html":{}}}],["post",{"_index":2518,"title":{},"body":{"classes/SelectionManager.html":{}}}],["powerpreference",{"_index":2349,"title":{},"body":{"classes/RendererManager.html":{}}}],["preselectionantialias",{"_index":2466,"title":{},"body":{"classes/SelectionManager.html":{}}}],["presenting",{"_index":3562,"title":{},"body":{"index.html":{}}}],["preset",{"_index":224,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["presetview",{"_index":871,"title":{"classes/PresetView.html":{}},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"coverage.html":{}}}],["presetviews",{"_index":857,"title":{},"body":{"interfaces/Configuration.html":{}}}],["prettier",{"_index":3190,"title":{},"body":{"changelog.html":{}}}],["pretty",{"_index":2194,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams",{"_index":2228,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['d0",{"_index":2234,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['q",{"_index":2233,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['z0",{"_index":2236,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['|p",{"_index":2231,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettyparams",{"_index":2557,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettyparams[key",{"_index":2564,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettysymbol",{"_index":2209,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettysymbols",{"_index":769,"title":{"classes/PrettySymbols.html":{}},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{},"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["prettysymbols.getprettyparams",{"_index":2558,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettysymbols.getprettysymbol('charge",{"_index":709,"title":{},"body":{"classes/ColorOptions.html":{}}}],["prettysymbols.getprettysymbol('charge')}=${chargevalue",{"_index":809,"title":{},"body":{"classes/ColorOptions.html":{}}}],["prettysymbols.getprettysymbol('mom",{"_index":716,"title":{},"body":{"classes/ColorOptions.html":{}}}],["prettysymbols.getprettysymbol(cut.field",{"_index":1930,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["prettysymbols.getprettysymbol(paramkey",{"_index":2218,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettysymbols.symbols[symbol].includes(param",{"_index":2211,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["previous",{"_index":75,"title":{},"body":{"classes/ARManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{}}}],["previousscale",{"_index":369,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["previoustween",{"_index":532,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["previoustween.chain(tween",{"_index":535,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["previoustween.oncomplete(onend",{"_index":536,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["previousvalues",{"_index":21,"title":{},"body":{"classes/ARManager.html":{}}}],["prevlocalclipping",{"_index":462,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["prevnode",{"_index":1854,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.addchild(nodename",{"_index":1861,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.children.find(child",{"_index":1859,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.findintree(nodename",{"_index":1858,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["print",{"_index":2225,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["printed",{"_index":2204,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["private",{"_index":20,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["process",{"_index":549,"title":{},"body":{"classes/CMSObjects.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["process(data",{"_index":1582,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["processed",{"_index":1568,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["processes",{"_index":2984,"title":{},"body":{"interfaces/Window.html":{}}}],["processing",{"_index":869,"title":{},"body":{"interfaces/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/SelectionManager.html":{},"changelog.html":{},"index.html":{}}}],["progress",{"_index":147,"title":{},"body":{"classes/ARManager.html":{},"classes/LoadingManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["progresses",{"_index":1679,"title":{},"body":{"classes/LoadingManager.html":{}}}],["progressitems",{"_index":1652,"title":{},"body":{"classes/LoadingManager.html":{}}}],["project",{"_index":3088,"title":{},"body":{"changelog.html":{}}}],["promise",{"_index":2409,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["promise((resolve",{"_index":2437,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["prop",{"_index":1839,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["propagate",{"_index":1510,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["propagate(startpos",{"_index":2390,"title":{},"body":{"classes/RungeKutta.html":{}}}],["propagation",{"_index":310,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["propagator",{"_index":2246,"title":{},"body":{"classes/RKHelper.html":{}}}],["proper",{"_index":2129,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["properly",{"_index":3205,"title":{},"body":{"changelog.html":{}}}],["properties",{"_index":17,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["property",{"_index":748,"title":{},"body":{"classes/ColorOptions.html":{}}}],["property's",{"_index":636,"title":{},"body":{"classes/ColorManager.html":{}}}],["props",{"_index":2565,"title":{},"body":{"classes/SelectionManager.html":{}}}],["props.join",{"_index":2575,"title":{},"body":{"classes/SelectionManager.html":{}}}],["props.length",{"_index":2574,"title":{},"body":{"classes/SelectionManager.html":{}}}],["protected",{"_index":26,"title":{},"body":{"classes/ARManager.html":{},"classes/LHCbLoader.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["pseudorapidity",{"_index":921,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["pt",{"_index":2197,"title":{},"body":{"classes/PrettySymbols.html":{},"changelog.html":{}}}],["public",{"_index":24,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["purposes",{"_index":2135,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pushed",{"_index":2776,"title":{},"body":{"classes/VRManager.html":{}}}],["put",{"_index":2033,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["puts",{"_index":951,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["q",{"_index":1436,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["qop",{"_index":1441,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["qrot",{"_index":2143,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["qrot.setfromunitvectors",{"_index":2144,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["quaternion",{"_index":903,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["quaternion.multiply(quaternion2",{"_index":959,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["quaternion.setfromunitvectors(v1",{"_index":950,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["quaternion2",{"_index":955,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["quaternion2.setfromaxisangle(new",{"_index":956,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["radians",{"_index":929,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["radius",{"_index":295,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["random",{"_index":630,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"changelog.html":{}}}],["randomcolor",{"_index":1164,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["randomly",{"_index":644,"title":{},"body":{"classes/ColorManager.html":{}}}],["range",{"_index":637,"title":{},"body":{"classes/ColorManager.html":{},"classes/CoordinateHelper.html":{},"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["rangeslider",{"_index":1812,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["ratio",{"_index":1438,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["raycaster",{"_index":2512,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.intersectobjects(this.scene.children",{"_index":2591,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.params.line.threshold",{"_index":2590,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.setfromcamera(mouse",{"_index":2589,"title":{},"body":{"classes/SelectionManager.html":{}}}],["reachedhits",{"_index":409,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["reachedhits.length",{"_index":413,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["reaches",{"_index":395,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["react",{"_index":3585,"title":{},"body":{"index.html":{}}}],["read",{"_index":3620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reader",{"_index":3629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reader.onload",{"_index":3631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reader.readastext(configfile",{"_index":3634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["readonly",{"_index":22,"title":{},"body":{"classes/ARManager.html":{},"classes/PrettySymbols.html":{},"classes/VRManager.html":{}}}],["realistic",{"_index":3357,"title":{},"body":{"changelog.html":{}}}],["receives",{"_index":1634,"title":{},"body":{"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["reconstruct",{"_index":1636,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["reconstructing",{"_index":1594,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["recover",{"_index":1370,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["redundant",{"_index":3348,"title":{},"body":{"changelog.html":{}}}],["refactor",{"_index":3173,"title":{},"body":{"changelog.html":{}}}],["refactoring",{"_index":3486,"title":{},"body":{"changelog.html":{}}}],["reject",{"_index":2438,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["related",{"_index":12,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["released",{"_index":2775,"title":{},"body":{"classes/VRManager.html":{}}}],["reload",{"_index":2901,"title":{},"body":{"interfaces/Window.html":{}}}],["remaining",{"_index":432,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["remove",{"_index":464,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["remove').name('remove",{"_index":1141,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["removechild",{"_index":1724,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["removechild(child",{"_index":1764,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["removecontrols",{"_index":2295,"title":{},"body":{"classes/RendererManager.html":{}}}],["removecontrols(renderer",{"_index":2324,"title":{},"body":{"classes/RendererManager.html":{}}}],["removed",{"_index":1062,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{}}}],["removeeventlistener('click",{"_index":2544,"title":{},"body":{"classes/SelectionManager.html":{}}}],["removeeventlistener('mousemove",{"_index":2543,"title":{},"body":{"classes/SelectionManager.html":{}}}],["removeeventlistener('touchstart",{"_index":2545,"title":{},"body":{"classes/SelectionManager.html":{}}}],["removelabel",{"_index":1007,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["removelabel').name('remove",{"_index":1225,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["removelabel(labelid",{"_index":1057,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["removelabelnode",{"_index":1867,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["removelabelnode(labelid",{"_index":1884,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["removeobj",{"_index":1008,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["removeobj(name",{"_index":1060,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["removepass",{"_index":1242,"title":{},"body":{"classes/EffectsManager.html":{}}}],["removepass(pass",{"_index":1270,"title":{},"body":{"classes/EffectsManager.html":{}}}],["removing",{"_index":3264,"title":{},"body":{"changelog.html":{}}}],["render",{"_index":1238,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["render(scene",{"_index":2327,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendered",{"_index":2338,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderer",{"_index":29,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["renderer.localclippingenabled",{"_index":2386,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderera",{"_index":2345,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererb",{"_index":2342,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererelement",{"_index":2581,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererelement.clientheight",{"_index":2588,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererelement.clientwidth",{"_index":2585,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererheight",{"_index":2368,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderermanager",{"_index":250,"title":{"classes/RendererManager.html":{}},"body":{"interfaces/AnimationPreset.html":{},"classes/RendererManager.html":{},"coverage.html":{}}}],["renderers",{"_index":2285,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererwidth",{"_index":2365,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendering",{"_index":1257,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"changelog.html":{}}}],["renderpass",{"_index":1255,"title":{},"body":{"classes/EffectsManager.html":{}}}],["renderpass(this.scene",{"_index":1285,"title":{},"body":{"classes/EffectsManager.html":{}}}],["renders",{"_index":2954,"title":{},"body":{"interfaces/Window.html":{}}}],["repeating",{"_index":3164,"title":{},"body":{"changelog.html":{}}}],["repo",{"_index":3352,"title":{},"body":{"changelog.html":{}}}],["representation",{"_index":2772,"title":{},"body":{"classes/VRManager.html":{}}}],["representing",{"_index":627,"title":{},"body":{"classes/ColorManager.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["represents",{"_index":1325,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["request",{"_index":3342,"title":{},"body":{"changelog.html":{}}}],["requesting",{"_index":106,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["requestsession(`immersive",{"_index":3063,"title":{},"body":{"classes/XRManager.html":{}}}],["required",{"_index":104,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"index.html":{}}}],["res.json",{"_index":2722,"title":{},"body":{"classes/URLOptionsManager.html":{},"index.html":{}}}],["res.text",{"_index":2729,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["reset",{"_index":970,"title":{},"body":{"classes/Cut.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"changelog.html":{}}}],["resetcut",{"_index":1166,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["resize",{"_index":3359,"title":{},"body":{"changelog.html":{}}}],["resolve",{"_index":2450,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["resolved",{"_index":2410,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["resources",{"_index":1575,"title":{},"body":{"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["responsible",{"_index":619,"title":{},"body":{"classes/ColorManager.html":{},"interfaces/Configuration.html":{},"interfaces/Window.html":{}}}],["restore",{"_index":431,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixMenuNode.html":{}}}],["restored",{"_index":1734,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["restoring",{"_index":371,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["restructure",{"_index":3328,"title":{},"body":{"changelog.html":{}}}],["result",{"_index":185,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["resultant",{"_index":1970,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["results",{"_index":187,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":1338,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["return",{"_index":161,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["returns",{"_index":103,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["returnvec",{"_index":1483,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["reverse",{"_index":940,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["revert",{"_index":460,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["right",{"_index":584,"title":{},"body":{"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"changelog.html":{}}}],["rk",{"_index":3214,"title":{},"body":{"changelog.html":{}}}],["rkhelper",{"_index":2006,"title":{"classes/RKHelper.html":{}},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"changelog.html":{},"coverage.html":{}}}],["rkhelper.extrapolatetrackpositions(track",{"_index":2267,"title":{},"body":{"classes/RKHelper.html":{}}}],["rkhelper.extrapolatetrackpositions(trackparams",{"_index":2014,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["rkhelper.extrapolationlimit",{"_index":2247,"title":{},"body":{"classes/RKHelper.html":{}}}],["rkstate",{"_index":1523,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.dir",{"_index":1525,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.maxstepsize",{"_index":1528,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.p",{"_index":1526,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.pathlength",{"_index":1529,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.pos",{"_index":1524,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.q",{"_index":1527,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["robustness",{"_index":3187,"title":{},"body":{"changelog.html":{}}}],["rollup",{"_index":3375,"title":{},"body":{"changelog.html":{}}}],["root",{"_index":165,"title":{},"body":{"classes/ARManager.html":{},"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["rotate",{"_index":904,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{}}}],["rotate.chain(end",{"_index":307,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["rotateclipping(jsondata['eventdisplay']['clippingangle",{"_index":2666,"title":{},"body":{"classes/StateManager.html":{}}}],["rotation",{"_index":2134,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["rotationpositions",{"_index":303,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["rotations",{"_index":917,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["routes",{"_index":3474,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":1347,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["run${this.eventmetadata.runnumber}_evt${this.eventmetadata.eventnumber}.json",{"_index":2653,"title":{},"body":{"classes/StateManager.html":{}}}],["runge",{"_index":1429,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rungekutta",{"_index":1431,"title":{"classes/RungeKutta.html":{}},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["runnumber",{"_index":1643,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/StateManager.html":{}}}],["same",{"_index":1595,"title":{},"body":{"classes/LHCbLoader.html":{},"changelog.html":{}}}],["sample",{"_index":3222,"title":{},"body":{"changelog.html":{}}}],["save",{"_index":1377,"title":{},"body":{"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["saved",{"_index":1371,"title":{},"body":{"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["saveeventdataconfiguration",{"_index":1361,"title":{},"body":{"classes/ExportManager.html":{}}}],["saveeventdataconfiguration(eventdata",{"_index":1375,"title":{},"body":{"classes/ExportManager.html":{}}}],["savefile",{"_index":1388,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["savefile(output",{"_index":1407,"title":{},"body":{"classes/ExportManager.html":{}}}],["savefile(result",{"_index":1393,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration",{"_index":1362,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration(geometries",{"_index":1378,"title":{},"body":{"classes/ExportManager.html":{}}}],["savelabels",{"_index":1199,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["saves",{"_index":2883,"title":{},"body":{"interfaces/Window.html":{}}}],["savesceneconfig",{"_index":1363,"title":{},"body":{"classes/ExportManager.html":{}}}],["savesceneconfig(eventdata",{"_index":1380,"title":{},"body":{"classes/ExportManager.html":{}}}],["savestateasjson",{"_index":2617,"title":{},"body":{"classes/StateManager.html":{}}}],["scale",{"_index":77,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["scalefunction",{"_index":1610,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["scalemenu",{"_index":1122,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["scalemenu.onchange((value",{"_index":1124,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["scaleobject(scenemanager.geometries_id",{"_index":1897,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["scalescene",{"_index":37,"title":{},"body":{"classes/ARManager.html":{}}}],["scalescene(scale",{"_index":116,"title":{},"body":{"classes/ARManager.html":{}}}],["scaletween",{"_index":362,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["scaletween.onupdate((updatedscale",{"_index":368,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["scaling",{"_index":359,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["scene",{"_index":44,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["scene's",{"_index":2612,"title":{},"body":{"classes/StateManager.html":{}}}],["scene.background",{"_index":2361,"title":{},"body":{"classes/RendererManager.html":{}}}],["scene.getobjectbyname('vertices",{"_index":663,"title":{},"body":{"classes/ColorManager.html":{}}}],["scene.getobjectbyname(linkedtrackcollection",{"_index":672,"title":{},"body":{"classes/ColorManager.html":{}}}],["scene.phnx",{"_index":1408,"title":{},"body":{"classes/ExportManager.html":{}}}],["scene.scale.x",{"_index":157,"title":{},"body":{"classes/ARManager.html":{}}}],["scene/geometry",{"_index":2950,"title":{},"body":{"interfaces/Window.html":{}}}],["scenecolor",{"_index":2360,"title":{},"body":{"classes/RendererManager.html":{}}}],["sceneconfig",{"_index":1396,"title":{},"body":{"classes/ExportManager.html":{}}}],["sceneconfiguration",{"_index":1405,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["sceneconfiguration.eventdata[objecttype",{"_index":2989,"title":{},"body":{"interfaces/Window.html":{}}}],["sceneconfiguration.geometries",{"_index":2992,"title":{},"body":{"interfaces/Window.html":{}}}],["scenemanager",{"_index":136,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"coverage.html":{}}}],["scenemanager.event_data_id",{"_index":180,"title":{},"body":{"classes/ARManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["scenemanager.geometries_id",{"_index":181,"title":{},"body":{"classes/ARManager.html":{}}}],["scenemanager.labels_id",{"_index":182,"title":{},"body":{"classes/ARManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["scenescale",{"_index":70,"title":{},"body":{"classes/ARManager.html":{}}}],["sceneurl",{"_index":3007,"title":{},"body":{"interfaces/Window.html":{}}}],["screen",{"_index":3024,"title":{},"body":{"interfaces/Window.html":{}}}],["screenshot",{"_index":3444,"title":{},"body":{"changelog.html":{}}}],["script",{"_index":2395,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{},"index.html":{}}}],["script[src",{"_index":2441,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement",{"_index":2443,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.addeventlistener('load",{"_index":2449,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.onerror",{"_index":2452,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.setattribute('data",{"_index":2448,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.src",{"_index":2447,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.type",{"_index":2445,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists",{"_index":2439,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists.length",{"_index":2442,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists[0].addeventlistener('load",{"_index":2457,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists[0].dataset.loaded",{"_index":2456,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptfor",{"_index":2414,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptloader",{"_index":2393,"title":{"classes/ScriptLoader.html":{}},"body":{"classes/ScriptLoader.html":{},"coverage.html":{}}}],["scriptloader.loadscript(jsroot_cdn_url",{"_index":2434,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scripts",{"_index":2398,"title":{},"body":{"classes/ScriptLoader.html":{},"miscellaneous/variables.html":{}}}],["scripturl",{"_index":2419,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["search",{"_index":2680,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["second",{"_index":1462,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["secondary",{"_index":2306,"title":{},"body":{"classes/RendererManager.html":{}}}],["see",{"_index":925,"title":{},"body":{"classes/CoordinateHelper.html":{},"changelog.html":{}}}],["select",{"_index":2773,"title":{},"body":{"classes/VRManager.html":{},"miscellaneous/typealiases.html":{}}}],["selected",{"_index":740,"title":{},"body":{"classes/ColorOptions.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["selectedcolorbyoption",{"_index":685,"title":{},"body":{"classes/ColorOptions.html":{}}}],["selectedobject",{"_index":2467,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selectend",{"_index":2799,"title":{},"body":{"classes/VRManager.html":{}}}],["selecting",{"_index":2495,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selection",{"_index":2050,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["selectionmanager",{"_index":2458,"title":{"classes/SelectionManager.html":{}},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["selectstart",{"_index":2797,"title":{},"body":{"classes/VRManager.html":{}}}],["send",{"_index":2966,"title":{},"body":{"interfaces/Window.html":{}}}],["separate",{"_index":3330,"title":{},"body":{"changelog.html":{}}}],["separated",{"_index":752,"title":{},"body":{"classes/ColorOptions.html":{}}}],["separator",{"_index":2912,"title":{},"body":{"interfaces/Window.html":{}}}],["service",{"_index":1548,"title":{},"body":{"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/SelectionManager.html":{},"index.html":{}}}],["session",{"_index":83,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["session.addeventlistener('end",{"_index":3068,"title":{},"body":{"classes/XRManager.html":{}}}],["session_type",{"_index":23,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["sessioninit",{"_index":30,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["sessiontype",{"_index":3051,"title":{},"body":{"classes/XRManager.html":{}}}],["set",{"_index":101,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["set/get",{"_index":2376,"title":{},"body":{"classes/RendererManager.html":{}}}],["setantialiasing",{"_index":1243,"title":{},"body":{"classes/EffectsManager.html":{}}}],["setantialiasing(antialias",{"_index":1272,"title":{},"body":{"classes/EffectsManager.html":{}}}],["setcamera",{"_index":2618,"title":{},"body":{"classes/StateManager.html":{}}}],["setcamera(camera",{"_index":2630,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingangle",{"_index":2619,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingangle(angle",{"_index":2632,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingenabled",{"_index":2620,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingenabled(clipping",{"_index":2635,"title":{},"body":{"classes/StateManager.html":{}}}],["seteventdisplay",{"_index":2621,"title":{},"body":{"classes/StateManager.html":{}}}],["seteventdisplay(eventdisplay",{"_index":2637,"title":{},"body":{"classes/StateManager.html":{}}}],["setfixoverlay",{"_index":2296,"title":{},"body":{"classes/RendererManager.html":{}}}],["setfixoverlay(value",{"_index":2329,"title":{},"body":{"classes/RendererManager.html":{}}}],["setflat",{"_index":2918,"title":{},"body":{"interfaces/Window.html":{}}}],["setgeometryopacity(scenemanager.geometries_id",{"_index":1895,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["setinterval",{"_index":2831,"title":{},"body":{"classes/VRManager.html":{}}}],["setlocalclippingenabled",{"_index":2297,"title":{},"body":{"classes/RendererManager.html":{}}}],["setlocalclippingenabled(value",{"_index":2331,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer",{"_index":2298,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer(renderer",{"_index":2333,"title":{},"body":{"classes/RendererManager.html":{}}}],["setoverlayrenderer",{"_index":2299,"title":{},"body":{"classes/RendererManager.html":{}}}],["setoverlayrenderer(overlaycanvas",{"_index":2334,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["setphoenixmenuroot",{"_index":2622,"title":{},"body":{"classes/StateManager.html":{}}}],["setphoenixmenuroot(phoenixmenuroot",{"_index":2639,"title":{},"body":{"classes/StateManager.html":{}}}],["setrenderers",{"_index":2300,"title":{},"body":{"classes/RendererManager.html":{}}}],["setrenderers(renderers",{"_index":2339,"title":{},"body":{"classes/RendererManager.html":{}}}],["sets",{"_index":1044,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["setselectedobject",{"_index":2473,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselectedobject(selectedobject",{"_index":2509,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting",{"_index":2474,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting(enable",{"_index":2510,"title":{},"body":{"classes/SelectionManager.html":{}}}],["settimeout",{"_index":524,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["setting",{"_index":2049,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{}}}],["settings",{"_index":2879,"title":{},"body":{"interfaces/Window.html":{}}}],["setup",{"_index":3177,"title":{},"body":{"changelog.html":{}}}],["setupvrcontrols",{"_index":2768,"title":{},"body":{"classes/VRManager.html":{}}}],["setview",{"_index":2181,"title":{},"body":{"classes/PresetView.html":{}}}],["setxrsession",{"_index":41,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["setxrsession(renderer",{"_index":130,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["shade",{"_index":3435,"title":{},"body":{"changelog.html":{}}}],["shaded",{"_index":2920,"title":{},"body":{"interfaces/Window.html":{}}}],["sharable",{"_index":3216,"title":{},"body":{"changelog.html":{}}}],["share",{"_index":3294,"title":{},"body":{"changelog.html":{}}}],["shouldcolorbycharge",{"_index":695,"title":{},"body":{"classes/ColorOptions.html":{}}}],["shouldcolorbycharge(objectparams",{"_index":764,"title":{},"body":{"classes/ColorOptions.html":{}}}],["show",{"_index":508,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["show/hide",{"_index":1034,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["showgeometriesmenu",{"_index":1085,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["showgeometriesmenu.onchange((value",{"_index":1089,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["showing",{"_index":1331,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["showing/hiding",{"_index":1084,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["showmenu",{"_index":1118,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["showmenu.onchange((value",{"_index":1119,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["showmenu.onchange(ontoggle",{"_index":1202,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["shown",{"_index":1539,"title":{},"body":{"classes/InfoLogger.html":{}}}],["shows",{"_index":65,"title":{},"body":{"classes/ARManager.html":{}}}],["si",{"_index":1439,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["side",{"_index":593,"title":{},"body":{"classes/CMSObjects.html":{}}}],["sides",{"_index":2917,"title":{},"body":{"interfaces/Window.html":{}}}],["simple",{"_index":3569,"title":{},"body":{"index.html":{}}}],["simplify",{"_index":3152,"title":{},"body":{"changelog.html":{}}}],["single",{"_index":519,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{},"miscellaneous/typealiases.html":{}}}],["singlelabelnode",{"_index":1947,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["singlelabelnode.name",{"_index":1948,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["singleton",{"_index":1660,"title":{},"body":{"classes/LoadingManager.html":{},"classes/StateManager.html":{}}}],["size",{"_index":471,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["slider",{"_index":1121,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["sliders",{"_index":1928,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["slidervalue",{"_index":829,"title":{},"body":{"classes/ColorOptions.html":{}}}],["smaller",{"_index":2978,"title":{},"body":{"interfaces/Window.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"index.html":{}}}],["space",{"_index":1512,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["spec",{"_index":3413,"title":{},"body":{"changelog.html":{}}}],["specific",{"_index":1581,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["specified",{"_index":2179,"title":{},"body":{"classes/PresetView.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["specifying",{"_index":962,"title":{},"body":{"classes/Cut.html":{},"interfaces/Window.html":{}}}],["sphere",{"_index":245,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixObjects.html":{}}}],["sphere(new",{"_index":324,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["sphere.attributes.position",{"_index":449,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["sphere.name",{"_index":2160,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.position.x",{"_index":2154,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.position.y",{"_index":2156,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.position.z",{"_index":2158,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.userdata",{"_index":2159,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.uuid",{"_index":2162,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["spherebuffergeometry",{"_index":244,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixObjects.html":{}}}],["spherebuffergeometry(1",{"_index":445,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["spherebuffergeometry(3",{"_index":2151,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["spherebuffergeometry(particlesize",{"_index":479,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["spherical",{"_index":444,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{}}}],["sphericaltocartesian",{"_index":890,"title":{},"body":{"classes/CoordinateHelper.html":{},"changelog.html":{}}}],["sphericaltocartesian(radius",{"_index":930,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["sphi",{"_index":2065,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["split",{"_index":3333,"title":{},"body":{"changelog.html":{}}}],["splitting",{"_index":3335,"title":{},"body":{"changelog.html":{}}}],["src/.../active",{"_index":3592,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../color",{"_index":3556,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../config",{"_index":3594,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../constants.ts",{"_index":3606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../file.ts",{"_index":3608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../script",{"_index":3607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../url",{"_index":3609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../xr",{"_index":3557,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/event",{"_index":2842,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["src/extras/configuration.ts",{"_index":848,"title":{},"body":{"interfaces/Configuration.html":{},"coverage.html":{}}}],["src/extras/cut.model.ts",{"_index":961,"title":{},"body":{"classes/Cut.html":{},"coverage.html":{}}}],["src/extras/cut.model.ts:18",{"_index":977,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:19",{"_index":979,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:20",{"_index":978,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:21",{"_index":980,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:30",{"_index":981,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:6",{"_index":976,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:8",{"_index":972,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/preset",{"_index":2175,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{}}}],["src/helpers/active",{"_index":189,"title":{},"body":{"classes/ActiveVariable.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/helpers/constants.ts",{"_index":3506,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/coordinate",{"_index":881,"title":{},"body":{"classes/CoordinateHelper.html":{},"coverage.html":{}}}],["src/helpers/file.ts",{"_index":3508,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/info",{"_index":1530,"title":{},"body":{"classes/InfoLogger.html":{},"coverage.html":{}}}],["src/helpers/pretty",{"_index":2192,"title":{},"body":{"classes/PrettySymbols.html":{},"coverage.html":{}}}],["src/helpers/rk",{"_index":2239,"title":{},"body":{"classes/RKHelper.html":{},"coverage.html":{}}}],["src/helpers/runge",{"_index":1422,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["src/loaders/cms",{"_index":3512,"title":{},"body":{"coverage.html":{}}}],["src/loaders/event",{"_index":1305,"title":{},"body":{"interfaces/EventDataLoader.html":{},"coverage.html":{}}}],["src/loaders/jivexml",{"_index":3515,"title":{},"body":{"coverage.html":{}}}],["src/loaders/jsroot",{"_index":3517,"title":{},"body":{"coverage.html":{}}}],["src/loaders/lhcb",{"_index":1555,"title":{},"body":{"classes/LHCbLoader.html":{},"coverage.html":{}}}],["src/loaders/objects/cms",{"_index":539,"title":{},"body":{"classes/CMSObjects.html":{},"coverage.html":{}}}],["src/loaders/objects/phoenix",{"_index":1951,"title":{},"body":{"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["src/loaders/phoenix",{"_index":3522,"title":{},"body":{"coverage.html":{}}}],["src/loaders/script",{"_index":2394,"title":{},"body":{"classes/ScriptLoader.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/loaders/trackml",{"_index":3524,"title":{},"body":{"coverage.html":{}}}],["src/managers/loading",{"_index":1649,"title":{},"body":{"classes/LoadingManager.html":{},"coverage.html":{}}}],["src/managers/state",{"_index":2611,"title":{},"body":{"classes/StateManager.html":{},"coverage.html":{}}}],["src/managers/three",{"_index":6,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/managers/ui",{"_index":677,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/managers/url",{"_index":2671,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["standalone",{"_index":3576,"title":{},"body":{"index.html":{}}}],["start",{"_index":229,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["start.chain(startxaxis",{"_index":305,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["start.start",{"_index":309,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["startclone.delay(500",{"_index":304,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["startdir",{"_index":1513,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["started",{"_index":115,"title":{"changelog.html":{},"index.html":{}},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["starting",{"_index":1287,"title":{},"body":{"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["startpos",{"_index":279,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["startpos[2",{"_index":292,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["starts",{"_index":133,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["startxaxis",{"_index":293,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["startxaxis.chain(rotatestart",{"_index":306,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["state",{"_index":1432,"title":{"classes/State.html":{}},"body":{"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["state.dir",{"_index":1464,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.add",{"_index":1504,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().cross(b_first).multiplyscalar(qop",{"_index":1458,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.cross(b_first",{"_index":1456,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.normalize",{"_index":1509,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.p",{"_index":1444,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos",{"_index":1463,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos.add(state.dir.clone().multiplyscalar(fh)).add",{"_index":1500,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.q",{"_index":1442,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.stepsize",{"_index":1495,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.unitc",{"_index":1443,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["statemanager",{"_index":1560,"title":{"classes/StateManager.html":{}},"body":{"classes/LHCbLoader.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["statemanager.instance",{"_index":2641,"title":{},"body":{"classes/StateManager.html":{}}}],["statemanager.loadstatefromjson(jsonstate",{"_index":2724,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["statements",{"_index":3500,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":18,"title":{},"body":{"classes/ARManager.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/Field.html":{},"classes/LoadingManager.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["stats",{"_index":2747,"title":{},"body":{"classes/URLOptionsManager.html":{},"dependencies.html":{}}}],["statselement",{"_index":2746,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["step",{"_index":302,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/Field.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["step(state",{"_index":1435,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["stepdistance",{"_index":2778,"title":{},"body":{"classes/VRManager.html":{}}}],["steps",{"_index":1511,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["stepsize",{"_index":2599,"title":{},"body":{"classes/State.html":{}}}],["stheta",{"_index":2069,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["still",{"_index":145,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["stop",{"_index":2833,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["stored",{"_index":749,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["storing",{"_index":2851,"title":{},"body":{"interfaces/Window.html":{}}}],["string",{"_index":80,"title":{},"body":{"classes/ARManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":1343,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["style.setproperty('display",{"_index":2751,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["styles",{"_index":3212,"title":{},"body":{"changelog.html":{}}}],["sub",{"_index":2914,"title":{},"body":{"interfaces/Window.html":{}}}],["super",{"_index":1638,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["super(xrsessiontype.ar",{"_index":155,"title":{},"body":{"classes/ARManager.html":{}}}],["super(xrsessiontype.vr",{"_index":2789,"title":{},"body":{"classes/VRManager.html":{}}}],["super.onxrsessionended",{"_index":179,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["super.onxrsessionstarted(session",{"_index":176,"title":{},"body":{"classes/ARManager.html":{}}}],["super.setxrsession(renderer",{"_index":2794,"title":{},"body":{"classes/VRManager.html":{}}}],["support",{"_index":3307,"title":{},"body":{"changelog.html":{}}}],["svg",{"_index":2191,"title":{},"body":{"classes/PresetView.html":{}}}],["swap",{"_index":2344,"title":{},"body":{"classes/RendererManager.html":{}}}],["swapped",{"_index":2346,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers",{"_index":2301,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers(renderera",{"_index":2341,"title":{},"body":{"classes/RendererManager.html":{}}}],["switch",{"_index":3319,"title":{},"body":{"changelog.html":{}}}],["switching",{"_index":873,"title":{},"body":{"interfaces/Configuration.html":{}}}],["symbol",{"_index":2208,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols",{"_index":771,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{},"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{}}}],["symbols.ts",{"_index":2193,"title":{},"body":{"classes/PrettySymbols.html":{},"coverage.html":{}}}],["symbols.ts:24",{"_index":2207,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols.ts:37",{"_index":2203,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols.ts:6",{"_index":2201,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["synchronously",{"_index":2403,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["t",{"_index":200,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/PhoenixMenuNode.html":{}}}],["table",{"_index":3546,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3545,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":2418,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["take",{"_index":2568,"title":{},"body":{"classes/SelectionManager.html":{}}}],["takes",{"_index":1324,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["tells",{"_index":1971,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["temp",{"_index":2385,"title":{},"body":{"classes/RendererManager.html":{}}}],["tempanchor",{"_index":3640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.click",{"_index":3646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.download",{"_index":3645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.href",{"_index":3643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.remove",{"_index":3647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.style.display",{"_index":3642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["temporary",{"_index":906,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["tesla",{"_index":1427,"title":{},"body":{"classes/Field.html":{}}}],["test",{"_index":1156,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["tested",{"_index":2253,"title":{},"body":{"classes/RKHelper.html":{}}}],["tests",{"_index":3109,"title":{},"body":{"changelog.html":{}}}],["text",{"_index":2573,"title":{},"body":{"classes/SelectionManager.html":{},"changelog.html":{}}}],["text/javascript",{"_index":2446,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["text/plain",{"_index":1395,"title":{},"body":{"classes/ExportManager.html":{}}}],["then((jsonstate",{"_index":2723,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["then((res",{"_index":2721,"title":{},"body":{"classes/URLOptionsManager.html":{},"index.html":{}}}],["then((session",{"_index":3064,"title":{},"body":{"classes/XRManager.html":{}}}],["theta",{"_index":899,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["thetafrompos",{"_index":2022,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["thetatoeta",{"_index":891,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["thetatoeta(theta",{"_index":932,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["third",{"_index":1474,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["this.activecamera",{"_index":2669,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activecamera.position.fromarray",{"_index":2659,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activecamera.position.toarray",{"_index":2649,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activeobject",{"_index":2529,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.activeobject.update(intersectedobject.uuid",{"_index":2556,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.addrenderer(overlayrenderer",{"_index":2378,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.addrenderer(renderer",{"_index":2352,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.allcolorbyoptions.filter((colorbyoption",{"_index":792,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.animateevent",{"_index":260,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animateevent.bind(this",{"_index":261,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animateeventwithclipping",{"_index":262,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animateeventwithclipping.bind(this",{"_index":263,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animateeventwithcollision(collisionduration",{"_index":525,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animatewithcollision",{"_index":516,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animatewithcollision(this.animateevent",{"_index":514,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.antialiasing",{"_index":1289,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.antialiasrender",{"_index":1290,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.applychargecoloroptions.bind(this",{"_index":713,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.applyconfigstate(nodeconfig",{"_index":1842,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.applyconfigstate(this.configs[configslength",{"_index":1794,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.applyembedoption",{"_index":2711,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.applyeventoptions",{"_index":2707,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.applyhidewidgetsoptions",{"_index":2710,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.applymomcoloroptions.bind(this",{"_index":718,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.applyvertexcoloroptions.bind(this",{"_index":720,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.buildeventdatafromjson(event",{"_index":2906,"title":{},"body":{"interfaces/Window.html":{}}}],["this.buildgeometryfromparameters(parameters",{"_index":3012,"title":{},"body":{"interfaces/Window.html":{}}}],["this.callbacks.foreach((callback",{"_index":216,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["this.callbacks.push(callback",{"_index":218,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["this.camera",{"_index":1282,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["this.camera.near",{"_index":171,"title":{},"body":{"classes/ARManager.html":{}}}],["this.cameragroup",{"_index":3074,"title":{},"body":{"classes/XRManager.html":{}}}],["this.cameragroup.add(this.xrcamera",{"_index":3084,"title":{},"body":{"classes/XRManager.html":{}}}],["this.cameragroup.position.addscaledvector(direction",{"_index":2840,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.position.copy(cameraposition",{"_index":3083,"title":{},"body":{"classes/XRManager.html":{}}}],["this.cameragroup.position.toarray().join",{"_index":2830,"title":{},"body":{"classes/VRManager.html":{}}}],["this.camerapos",{"_index":2189,"title":{},"body":{"classes/PresetView.html":{}}}],["this.chargecolors[chargevalue",{"_index":810,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.children",{"_index":1776,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.filter",{"_index":1846,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.indexof(child",{"_index":1785,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.push(child",{"_index":1783,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.splice(childindex",{"_index":1786,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.childrenactive",{"_index":1821,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.childrentogglestate[child.name",{"_index":1797,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.clippingangle.update(angle",{"_index":2668,"title":{},"body":{"classes/StateManager.html":{}}}],["this.clippingangle.value",{"_index":2651,"title":{},"body":{"classes/StateManager.html":{}}}],["this.clippingenabled.update(clipping",{"_index":2667,"title":{},"body":{"classes/StateManager.html":{}}}],["this.clippingenabled.value",{"_index":2650,"title":{},"body":{"classes/StateManager.html":{}}}],["this.collectionname",{"_index":776,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.collideparticles(1500",{"_index":510,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.colorbymomentum('max",{"_index":831,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbymomentum('min",{"_index":830,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbymomentum(key",{"_index":834,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions",{"_index":791,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions.find",{"_index":805,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions.foreach((colorbyoption",{"_index":795,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions.map((colorbyoption",{"_index":801,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions[0].key",{"_index":799,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colormanager.collectioncolor(this.collectionname",{"_index":785,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colormanager.collectioncolorrandom(this.collectionname",{"_index":788,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colormanager.colorobjectsbyproperty",{"_index":811,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colormanager.colortracksbyvertex(this.collectionname",{"_index":842,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder",{"_index":778,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder.addconfig('button",{"_index":786,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder.addconfig('color",{"_index":780,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder.addconfig('select",{"_index":800,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder.addconfig('slider",{"_index":824,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder.configs.foreach((config",{"_index":843,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.composer",{"_index":1280,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.addpass(outlinepass",{"_index":1301,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.addpass(this.defaultrenderpass",{"_index":1286,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.passes.indexof(pass",{"_index":1303,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.passes.splice(passindex",{"_index":1304,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.render",{"_index":1294,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.renderer.render(scene",{"_index":1295,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.configs",{"_index":1777,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configs.find",{"_index":1834,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configs.push",{"_index":1793,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configuration",{"_index":2863,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.defaulteventfile?.eventfile",{"_index":2708,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.configuration.defaulteventfile?.eventtype",{"_index":2709,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.configuration.eventdataloader",{"_index":2730,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.configuration.eventdataloader.addlabeltoeventobject",{"_index":3044,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.buildeventdata",{"_index":2898,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.getcollection(collectionname",{"_index":2995,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.getcollections",{"_index":2996,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.geteventmetadata",{"_index":3001,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.geteventslist(eventsdata",{"_index":2887,"title":{},"body":{"interfaces/Window.html":{}}}],["this.containsobject(renderer",{"_index":2381,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.controller.getworlddirection(direction",{"_index":2838,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1",{"_index":2802,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.add(line.clone",{"_index":2822,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.addeventlistener",{"_index":2835,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.addeventlistener('selectend",{"_index":2836,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.position.toarray().join",{"_index":2828,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1?.removeeventlistener",{"_index":2796,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller2",{"_index":2805,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller2.add(line.clone",{"_index":2823,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip1",{"_index":2809,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip1.add",{"_index":2811,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip2",{"_index":2814,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip2.add",{"_index":2816,"title":{},"body":{"classes/VRManager.html":{}}}],["this.currentxrsession",{"_index":3071,"title":{},"body":{"classes/XRManager.html":{}}}],["this.currentxrsession.removeeventlistener('end",{"_index":3072,"title":{},"body":{"classes/XRManager.html":{}}}],["this.currentxrsession?.end",{"_index":3075,"title":{},"body":{"classes/XRManager.html":{}}}],["this.data",{"_index":1639,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.eventnumber",{"_index":1642,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.particles",{"_index":1647,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.runnumber",{"_index":1644,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.defaultmaxvalue",{"_index":983,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultminvalue",{"_index":982,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultrenderpass",{"_index":1284,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.defaultrenderpass.camera",{"_index":1292,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.defaultrenderpass.scene",{"_index":1293,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.disableselecting",{"_index":2531,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager",{"_index":2525,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.addoutlinepassforselection",{"_index":2527,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.antialiasing",{"_index":2541,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.composer.renderer.domelement",{"_index":2582,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.setantialiasing(false",{"_index":2542,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.setantialiasing(this.preselectionantialias",{"_index":2547,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsrender",{"_index":1291,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.enableeventdisplayconsole",{"_index":2874,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enablekeyboardcontrols",{"_index":2876,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enableselecting",{"_index":2530,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.etatotheta(eta",{"_index":944,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["this.eventdisplay",{"_index":2664,"title":{},"body":{"classes/StateManager.html":{},"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.buildeventdatafromjson(eventdata",{"_index":2734,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().addloadableitem('url_config",{"_index":2719,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().addloadableitem('url_event",{"_index":2727,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().itemloaded('url_config",{"_index":2726,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().itemloaded('url_event",{"_index":2740,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getuimanager().setclipping(true",{"_index":2663,"title":{},"body":{"classes/StateManager.html":{}}}],["this.eventdisplay.parsephoenixevents(res",{"_index":2735,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventfolder",{"_index":1076,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.eventfolder.addchild(typename",{"_index":1913,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventfolder.addconfig('checkbox",{"_index":1911,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventfolder.addfolder(typename",{"_index":1159,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.eventfolder.getnodestate",{"_index":1908,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventfolder.loadstatefromjson(this.eventfolderstate",{"_index":1950,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventfolder.remove",{"_index":1909,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventfolderstate",{"_index":1907,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventsdata",{"_index":2886,"title":{},"body":{"interfaces/Window.html":{}}}],["this.eventsdata[eventkey",{"_index":2905,"title":{},"body":{"interfaces/Window.html":{}}}],["this.fixedoverlay",{"_index":2389,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.geomfolder",{"_index":1075,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.geomfolder.__folders[name",{"_index":1142,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.geomfolder.addfolder(name",{"_index":1105,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.geomfolder.findintreeorcreate(menunodename",{"_index":1899,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.geomfolder.removefolder(folder",{"_index":1143,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.getcameragroup().add(this.controller1",{"_index":2804,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controller2",{"_index":2807,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controllergrip1",{"_index":2813,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controllergrip2",{"_index":2818,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameratween",{"_index":527,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.getcameratween(alongaxisposition",{"_index":294,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.getcameratween(position",{"_index":534,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.getcameratween(startpos",{"_index":285,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.gethitspositions(obj.position",{"_index":408,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.getmainrenderer",{"_index":2370,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmainrenderer().setanimationloop(null",{"_index":2355,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmomentum(objectparams",{"_index":836,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.getoverlayrenderer",{"_index":2358,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().domelement.hidden",{"_index":2359,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().render(scene",{"_index":2363,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getstatemanager().seteventdisplay(this",{"_index":2866,"title":{},"body":{"interfaces/Window.html":{}}}],["this.getthreemanager().getscenemanager().getscene",{"_index":3013,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary",{"_index":2857,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.addgeometryfromparameters(parameters",{"_index":2974,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.addlabeltoobject(label",{"_index":3048,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animateclippingwithcollision(tweenduration",{"_index":3042,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animateeventwithcollision(tweenduration",{"_index":3041,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animatepreset(animationpreset",{"_index":3040,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animatethroughevent",{"_index":3038,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.cleareventdata",{"_index":2897,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enablekeyboardcontrols",{"_index":3037,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enableselecting(enable",{"_index":3026,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.endxrsession(xrsessiontype",{"_index":2881,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportphoenixscene",{"_index":2944,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportscenetoobj",{"_index":2932,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.fixoverlayview(fixed",{"_index":3029,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.getactiveobjectid",{"_index":3030,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.highlightobject(uuid",{"_index":3034,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.init(configuration",{"_index":2864,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.initxrsession(xrsessiontype",{"_index":2878,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadgltfgeometry",{"_index":2953,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadjsongeometry",{"_index":2957,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadobjgeometry",{"_index":2925,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.lookatobject(uuid",{"_index":3033,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsegltfgeometry(input",{"_index":2949,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parseobjgeometry(content",{"_index":2929,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsephnxscene(phoenixscene.scene",{"_index":2942,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setanimationloop(uiloop",{"_index":2869,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setoverlayrenderer(overlaycanvas",{"_index":3016,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setselectedobjectdisplay(selectedobject",{"_index":3020,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.zoomto(zoomfactor",{"_index":2983,"title":{},"body":{"interfaces/Window.html":{}}}],["this.gui",{"_index":1066,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.addfolder('event",{"_index":1149,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.addfolder(scenemanager.geometries_id",{"_index":1080,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.addfolder(scenemanager.labels_id",{"_index":1196,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.domelement.id",{"_index":1067,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.domelement.style.csstext",{"_index":1068,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.removefolder(this.eventfolder",{"_index":1148,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters.eventdata",{"_index":1150,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters.eventdata[typename",{"_index":1160,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters.geometries",{"_index":1081,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters.labels",{"_index":1197,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters[collectionname",{"_index":1162,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters[labelid",{"_index":1210,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters[labelid]['removelabel",{"_index":1222,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters[name",{"_index":1099,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.hideidswithurloption(hidewidgetsoptions",{"_index":2748,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.icon",{"_index":1774,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["this.ignorelist",{"_index":2520,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ignorelist.includes(intersectedobject.type",{"_index":2550,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.infologger",{"_index":2524,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["this.infologger.add('exported",{"_index":2933,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologger.add(log",{"_index":2576,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.infologger.add(name",{"_index":2924,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologgerlist",{"_index":1553,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.length",{"_index":1549,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.pop",{"_index":1551,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.unshift(label",{"_index":1552,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.init(configuration",{"_index":2861,"title":{},"body":{"interfaces/Window.html":{}}}],["this.initchargecoloroptions.bind(this",{"_index":711,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.initcolorbyoptions",{"_index":794,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.initmomcoloroptions.bind(this",{"_index":717,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.initrenderer(elementid",{"_index":2357,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.intersectobject(event",{"_index":2549,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.isfixedoverlay",{"_index":2362,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.isinit",{"_index":2519,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.labelsfolder",{"_index":1077,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.__folders[labelid",{"_index":1226,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.labelsfolder.addchild(labelid",{"_index":1941,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.addconfig('button",{"_index":1938,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.addconfig('color",{"_index":1937,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.addconfig('slider",{"_index":1936,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.addfolder(labelid",{"_index":1213,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.labelsfolder.children.find",{"_index":1939,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.removefolder(labelitemfolder",{"_index":1227,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.labelsfolder?.children.find",{"_index":1946,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.loaded",{"_index":1705,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.length",{"_index":1688,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.push(id",{"_index":1684,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.sort().join",{"_index":1690,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loadevent(eventkeys[0",{"_index":2888,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadgltfgeometry(sceneurl",{"_index":3008,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager",{"_index":2856,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem('root_json_geom",{"_index":2959,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`gltf_geom_${name",{"_index":2952,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`json_geom_${name",{"_index":2956,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`obj_geom_${name",{"_index":2922,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_gltf_${name",{"_index":2947,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_obj_${name",{"_index":2928,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_phnx_${name",{"_index":2941,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded('root_json_geom",{"_index":2965,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadjsongeometry",{"_index":2961,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadobjgeometry(filename",{"_index":3010,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadsceneconfiguration(phoenixscene.sceneconfiguration",{"_index":2940,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadstatefromjson(json.parse(data",{"_index":2646,"title":{},"body":{"classes/StateManager.html":{}}}],["this.mainrenderer",{"_index":2377,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.maxentries",{"_index":1550,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.maxpositionx",{"_index":1128,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.maxpositiony",{"_index":1132,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.maxpositionz",{"_index":1135,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.maxvalue",{"_index":985,"title":{},"body":{"classes/Cut.html":{}}}],["this.minvalue",{"_index":984,"title":{},"body":{"classes/Cut.html":{}}}],["this.momcolors.max.value",{"_index":826,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.momcolors.min.value",{"_index":825,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.momcolors[key].color",{"_index":833,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.momcolors[key].value",{"_index":827,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.momcolors[minormax].color",{"_index":835,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.moveindirection(direction",{"_index":2832,"title":{},"body":{"classes/VRManager.html":{}}}],["this.name",{"_index":1773,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["this.nodelevel",{"_index":1782,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.oncontrollerselectend",{"_index":2800,"title":{},"body":{"classes/VRManager.html":{}}}],["this.oncontrollerselectstart",{"_index":2798,"title":{},"body":{"classes/VRManager.html":{}}}],["this.ondisplayedeventchange.foreach((callback",{"_index":2899,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondisplayedeventchange.push(callback",{"_index":2998,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondocumentmousedown",{"_index":2537,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.oneventschange.foreach((callback",{"_index":2889,"title":{},"body":{"interfaces/Window.html":{}}}],["this.oneventschange.push(callback",{"_index":3000,"title":{},"body":{"interfaces/Window.html":{}}}],["this.onloadcallbacks",{"_index":1706,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onloadcallbacks.foreach((callback",{"_index":1691,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onloadcallbacks.push(callback",{"_index":1702,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onlyselectedcolorbyoption",{"_index":797,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.onprogress(id",{"_index":1685,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onprogresscallbacks",{"_index":1700,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onprogresscallbacks.push(callback",{"_index":1703,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onsessionended",{"_index":3057,"title":{},"body":{"classes/XRManager.html":{}}}],["this.ontoggle",{"_index":1775,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontoggle?.(this.togglestate",{"_index":1830,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontoggle?.(value",{"_index":1795,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontouchdown",{"_index":2539,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ontouchmove",{"_index":2535,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ontouchmove(event.targettouches[0",{"_index":2580,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.onxrsessionended",{"_index":3073,"title":{},"body":{"classes/XRManager.html":{}}}],["this.onxrsessionended.bind(this",{"_index":3069,"title":{},"body":{"classes/XRManager.html":{}}}],["this.onxrsessionstarted.bind(this)(session",{"_index":3065,"title":{},"body":{"classes/XRManager.html":{}}}],["this.outlinepass",{"_index":2526,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects",{"_index":2546,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects[0",{"_index":2551,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.overlayrenderer",{"_index":2379,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.parent",{"_index":1778,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.parent.removechild(this",{"_index":1787,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.phoenixmenu",{"_index":1887,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.phoenixmenu.addchild",{"_index":1889,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.phoenixmenu.truncate",{"_index":1888,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.phoenixmenuroot",{"_index":2642,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.configactive",{"_index":2657,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.getnodestate",{"_index":2647,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.loadstatefromjson(jsondata['phoenixmenu",{"_index":2656,"title":{},"body":{"classes/StateManager.html":{}}}],["this.preselectionantialias",{"_index":2540,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.previousvalues.cameranear",{"_index":158,"title":{},"body":{"classes/ARManager.html":{}}}],["this.previousvalues.scenescale",{"_index":156,"title":{},"body":{"classes/ARManager.html":{}}}],["this.progressitems",{"_index":1707,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.progressitems[id",{"_index":1683,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.removelabel(labelid",{"_index":1223,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.removelabelnode(labelid",{"_index":1945,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.removeobj(name",{"_index":1103,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.render",{"_index":1288,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.renderer",{"_index":3056,"title":{},"body":{"classes/XRManager.html":{}}}],["this.renderer.xr",{"_index":3077,"title":{},"body":{"classes/XRManager.html":{}}}],["this.renderer.xr.getcontroller(0",{"_index":2803,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontroller(1",{"_index":2806,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontrollergrip(0",{"_index":2810,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontrollergrip(1",{"_index":2815,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.setreferencespacetype('local",{"_index":174,"title":{},"body":{"classes/ARManager.html":{}}}],["this.renderer.xr.setsession(session",{"_index":3070,"title":{},"body":{"classes/XRManager.html":{}}}],["this.renderermanager.getmainrenderer().localclippingenabled",{"_index":463,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.renderers",{"_index":2380,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.indexof(renderer",{"_index":2383,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.length",{"_index":2387,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.push(renderer",{"_index":2382,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.splice(index",{"_index":2384,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers[0].localclippingenabled",{"_index":2388,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.reset",{"_index":1692,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.saveeventdataconfiguration(eventdata",{"_index":1410,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savegeometriesconfiguration(geometries",{"_index":1412,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savesceneconfig(eventdata",{"_index":1397,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savestateasjson",{"_index":2644,"title":{},"body":{"classes/StateManager.html":{}}}],["this.scalescene(0.00001",{"_index":172,"title":{},"body":{"classes/ARManager.html":{}}}],["this.scalescene(this.previousvalues.scenescale",{"_index":178,"title":{},"body":{"classes/ARManager.html":{}}}],["this.scene",{"_index":1283,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["this.scene.add(...particles",{"_index":489,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.scene.getobjectbyname(groupname)?.scale.setscalar(scale",{"_index":184,"title":{},"body":{"classes/ARManager.html":{}}}],["this.scene.getobjectbyname(scenemanager.event_data_id",{"_index":322,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.scene.getobjectbyname(scenemanager.event_data_id).visible",{"_index":523,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.scene.remove(...particles",{"_index":497,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.scene.scale.x",{"_index":170,"title":{},"body":{"classes/ARManager.html":{}}}],["this.scenemanager",{"_index":652,"title":{},"body":{"classes/ColorManager.html":{}}}],["this.scenemanager.getscene",{"_index":662,"title":{},"body":{"classes/ColorManager.html":{}}}],["this.scenemanager.getscene().getobjectbyname(objectsgroup",{"_index":647,"title":{},"body":{"classes/ColorManager.html":{}}}],["this.selectedcolorbyoption",{"_index":798,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.selectedobject",{"_index":2528,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.length",{"_index":2555,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.push",{"_index":2561,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.splice",{"_index":2554,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.name",{"_index":2552,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.sessioninit",{"_index":160,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["this.sessiontype",{"_index":3061,"title":{},"body":{"classes/XRManager.html":{}}}],["this.setclippingenabled(true",{"_index":2662,"title":{},"body":{"classes/StateManager.html":{}}}],["this.setmainrenderer(renderer",{"_index":2353,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.setupvrcontrols",{"_index":2795,"title":{},"body":{"classes/VRManager.html":{}}}],["this.shouldcolorbycharge(objectuserdata",{"_index":812,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.statemanager",{"_index":2910,"title":{},"body":{"interfaces/Window.html":{}}}],["this.three",{"_index":1090,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.eventdatadepthtest(value",{"_index":1158,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getcolormanager",{"_index":1935,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.three.getcolormanager().collectioncolor(collectionname",{"_index":1174,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.three.getcolormanager().collectioncolorrandom(collectionname",{"_index":1165,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.three.getobjectposition(name",{"_index":1127,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.three.getscenemanager().changeobjectcolor(labelid",{"_index":1221,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().changeobjectcolor(name",{"_index":1111,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().collectionfilter(collectionname",{"_index":1187,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().getobjectposition(name).setx(value",{"_index":1131,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.three.getscenemanager().getobjectposition(name).sety(value",{"_index":1134,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.three.getscenemanager().getobjectposition(name).setz(value",{"_index":1137,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.three.getscenemanager().objectvisibility(labelid",{"_index":1942,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().objectvisibility(name",{"_index":1120,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().objectvisibility(typename",{"_index":1161,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().removegeometry(name",{"_index":1144,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().scaleobject(name",{"_index":1125,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.three.getscenemanager().setgeometryopacity(collectionname",{"_index":1919,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().setgeometryopacity(name",{"_index":1116,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().wireframegeometries(value",{"_index":1098,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().wireframeobjects(collectionname",{"_index":1921,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.togglestate",{"_index":1796,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.toload",{"_index":1704,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.length",{"_index":1687,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.push(id",{"_index":1682,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.sort().join",{"_index":1689,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.ui",{"_index":2859,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addcollection",{"_index":2990,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatafolder",{"_index":2893,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatatypefolder(objecttype",{"_index":2988,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addgeometry(geom",{"_index":2993,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addgeometry(name",{"_index":2923,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addlabel(labelid",{"_index":3047,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addlabelsfolder",{"_index":2894,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.enablekeyboardcontrols",{"_index":3036,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.init(configuration",{"_index":2865,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.loadeventfolderpmstate",{"_index":2902,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.removelabel(labelid",{"_index":3046,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.updateui",{"_index":2868,"title":{},"body":{"interfaces/Window.html":{}}}],["this.urloptions",{"_index":2705,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('config",{"_index":2718,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('embed",{"_index":2749,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('file",{"_index":2714,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('type",{"_index":2715,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('type').tolowercase",{"_index":2716,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get(urloption",{"_index":2755,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.value",{"_index":215,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["this.xractive",{"_index":3067,"title":{},"body":{"classes/XRManager.html":{}}}],["this.xrcamera",{"_index":3076,"title":{},"body":{"classes/XRManager.html":{}}}],["this.xrcamera.name",{"_index":3080,"title":{},"body":{"classes/XRManager.html":{}}}],["this.xrcamera.position",{"_index":3082,"title":{},"body":{"classes/XRManager.html":{}}}],["this.xrcamera.position.addscaledvector(direction",{"_index":2841,"title":{},"body":{"classes/VRManager.html":{}}}],["this.xrcamera?.getworlddirection(direction",{"_index":2839,"title":{},"body":{"classes/VRManager.html":{}}}],["thr",{"_index":2972,"title":{},"body":{"interfaces/Window.html":{}}}],["three",{"_index":135,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"dependencies.html":{}}}],["three,js",{"_index":2326,"title":{},"body":{"classes/RendererManager.html":{}}}],["three.extra.min.js",{"_index":2430,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["three.js",{"_index":55,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["three/examples/jsm/exporters/gltfexporter",{"_index":1387,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/exporters/objexporter",{"_index":1385,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/postprocessing/effectcomposer",{"_index":1274,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/outlinepass",{"_index":1278,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/outlinepass.js",{"_index":2516,"title":{},"body":{"classes/SelectionManager.html":{}}}],["three/examples/jsm/postprocessing/pass",{"_index":1279,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/renderpass",{"_index":1277,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/webxr/xrcontrollermodelfactory",{"_index":2786,"title":{},"body":{"classes/VRManager.html":{}}}],["threejs",{"_index":918,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["threemanager",{"_index":1010,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["threemanager(this.infologger",{"_index":2858,"title":{},"body":{"interfaces/Window.html":{}}}],["threeservice",{"_index":1571,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["through",{"_index":278,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["throwing",{"_index":3107,"title":{},"body":{"changelog.html":{}}}],["time",{"_index":228,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["tmp1",{"_index":935,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["tmp2",{"_index":934,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["toggle",{"_index":1083,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["toggled",{"_index":3203,"title":{},"body":{"changelog.html":{}}}],["toggles",{"_index":1033,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["toggleselfanddescendants",{"_index":1725,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggleselfanddescendants(value",{"_index":1766,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["togglestate",{"_index":1716,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggling",{"_index":1729,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["tojson",{"_index":2964,"title":{},"body":{"interfaces/Window.html":{}}}],["toload",{"_index":1653,"title":{},"body":{"classes/LoadingManager.html":{}}}],["top",{"_index":68,"title":{},"body":{"classes/ARManager.html":{},"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{}}}],["totalitems",{"_index":1697,"title":{},"body":{"classes/LoadingManager.html":{}}}],["totalprogress",{"_index":1693,"title":{},"body":{"classes/LoadingManager.html":{}}}],["touch",{"_index":2487,"title":{},"body":{"classes/SelectionManager.html":{}}}],["touchevent",{"_index":2578,"title":{},"body":{"classes/SelectionManager.html":{}}}],["towards",{"_index":2780,"title":{},"body":{"classes/VRManager.html":{}}}],["track",{"_index":337,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["track.children[0",{"_index":504,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["track.dparams",{"_index":2268,"title":{},"body":{"classes/RKHelper.html":{}}}],["track.pos",{"_index":2266,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackcollection",{"_index":671,"title":{},"body":{"classes/ColorManager.html":{}}}],["trackcollection.children[trackindex].traverse((trackobject",{"_index":674,"title":{},"body":{"classes/ColorManager.html":{}}}],["trackcolor",{"_index":503,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tracking",{"_index":2793,"title":{},"body":{"classes/VRManager.html":{}}}],["trackmlloader",{"_index":3525,"title":{},"body":{"coverage.html":{}}}],["trackobject",{"_index":2046,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["trackobject.add(lineobject",{"_index":2048,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["trackobject.add(tubeobject",{"_index":2047,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["trackobject?.['material']?.color?.set(colorfortracksvertex",{"_index":675,"title":{},"body":{"classes/ColorManager.html":{}}}],["trackparams",{"_index":1989,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["trackparams.dparams",{"_index":2012,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["trackparams.dparams[3",{"_index":2021,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["trackparams.extended",{"_index":2015,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["trackparams.pos",{"_index":2013,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["trackparams.pos?.length",{"_index":2011,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["trackparams.uuid",{"_index":2052,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["tracks",{"_index":333,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["trackscollection",{"_index":2263,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollections",{"_index":2262,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollections[trackscollection",{"_index":2265,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollectionsevent",{"_index":2256,"title":{},"body":{"classes/RKHelper.html":{}}}],["transformations",{"_index":3303,"title":{},"body":{"changelog.html":{}}}],["transforming",{"_index":2142,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["transforming/changing",{"_index":2178,"title":{},"body":{"classes/PresetView.html":{}}}],["translation",{"_index":280,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{}}}],["transparent",{"_index":169,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["traverse",{"_index":328,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["traversed",{"_index":2501,"title":{},"body":{"classes/SelectionManager.html":{}}}],["tree",{"_index":1756,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["true",{"_index":59,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["truncate",{"_index":1726,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["try",{"_index":1459,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["tryrungekuttastep",{"_index":1461,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tryrungekuttastep(state.stepsize",{"_index":1493,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tube",{"_index":2034,"title":{},"body":{"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["tubebuffergeometry",{"_index":239,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixObjects.html":{}}}],["tubebuffergeometry(curve",{"_index":2027,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["tubegeometry",{"_index":2026,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["tubeobject",{"_index":2030,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["tubeobject.uuid",{"_index":2053,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["tween",{"_index":236,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["tween.easing(easing",{"_index":276,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.easing(tween.easing.quartic.out).start",{"_index":428,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.easing.cubic.out",{"_index":286,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.js",{"_index":253,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.start",{"_index":457,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.tween",{"_index":355,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.tween(animationclipplane).to",{"_index":455,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.tween(animationsphere).to",{"_index":399,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.tween(particle.material",{"_index":491,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.tween(particle.position",{"_index":494,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.tween(this.activecamera.position).to",{"_index":269,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tweenduration",{"_index":281,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["tweenjs/tween.js",{"_index":249,"title":{},"body":{"interfaces/AnimationPreset.html":{},"dependencies.html":{}}}],["tweens",{"_index":427,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["two",{"_index":467,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/RendererManager.html":{}}}],["type",{"_index":53,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":3590,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typefolder",{"_index":1030,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["typefolder.addchild",{"_index":1915,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["typefolder.addfolder(collectionname",{"_index":1169,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["typefolder.name",{"_index":1933,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["typefolderpm",{"_index":1613,"title":{},"body":{"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["typename",{"_index":1038,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{}}}],["typeof",{"_index":1826,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["types",{"_index":1772,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["types.ts",{"_index":3595,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["typing",{"_index":3371,"title":{},"body":{"changelog.html":{}}}],["ui",{"_index":991,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["ui.ts",{"_index":989,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"coverage.html":{}}}],["ui.ts:112",{"_index":1878,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:12",{"_index":1017,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:14",{"_index":1020,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["ui.ts:159",{"_index":1875,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:16",{"_index":1872,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:174",{"_index":1061,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:18",{"_index":1870,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:187",{"_index":1032,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:188",{"_index":1876,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:20",{"_index":1871,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:201",{"_index":1874,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:22",{"_index":1873,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:220",{"_index":1037,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:23",{"_index":1015,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:24",{"_index":1869,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:241",{"_index":1028,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:25",{"_index":1014,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:27",{"_index":1021,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:299",{"_index":1881,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:30",{"_index":1023,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:313",{"_index":1052,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:32",{"_index":1025,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:34",{"_index":1011,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:349",{"_index":1880,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:365",{"_index":1048,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:381",{"_index":1886,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:394",{"_index":1883,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:402",{"_index":1059,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:45",{"_index":1882,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:56",{"_index":1055,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:58",{"_index":1879,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:67",{"_index":1046,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:98",{"_index":1042,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["uiloop",{"_index":2867,"title":{},"body":{"interfaces/Window.html":{}}}],["uimanager",{"_index":1321,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["uimanager(this.graphicslibrary",{"_index":2860,"title":{},"body":{"interfaces/Window.html":{}}}],["uimenu",{"_index":2744,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["uiservice",{"_index":1578,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["undefined",{"_index":783,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["undefined/null",{"_index":1790,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["union",{"_index":3603,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["uniontointersection",{"_index":3601,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["unique",{"_index":1050,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{}}}],["uniquely",{"_index":1591,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["unit",{"_index":2610,"title":{},"body":{"classes/State.html":{},"classes/VRManager.html":{}}}],["unitc",{"_index":2600,"title":{},"body":{"classes/State.html":{}}}],["units",{"_index":1440,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["unreal",{"_index":1233,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["until",{"_index":1519,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["up",{"_index":542,"title":{},"body":{"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["update",{"_index":198,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["update(updatedvalue",{"_index":210,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["updateanimationsphere",{"_index":402,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["updateanimationsphere.containspoint",{"_index":411,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["updateanimationsphere.containspoint(obj.position",{"_index":417,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["updated",{"_index":149,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["updatedcolorbyoption",{"_index":803,"title":{},"body":{"classes/ColorOptions.html":{}}}],["updatedvalue",{"_index":212,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["updating",{"_index":209,"title":{},"body":{"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{}}}],["upgrade",{"_index":3131,"title":{},"body":{"changelog.html":{}}}],["url",{"_index":859,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["url.createobjecturl(blob",{"_index":3644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["url.indexof('.root",{"_index":2969,"title":{},"body":{"interfaces/Window.html":{}}}],["urloptions",{"_index":2672,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["urloptionsmanager",{"_index":2670,"title":{"classes/URLOptionsManager.html":{}},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["urloptionsmanager(this",{"_index":2871,"title":{},"body":{"interfaces/Window.html":{}}}],["urloptionsmanager.applyoptions",{"_index":2872,"title":{},"body":{"interfaces/Window.html":{}}}],["urloptionwithids",{"_index":2696,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["urlsearchparams",{"_index":2679,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["usage",{"_index":3363,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["use",{"_index":84,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/PhoenixObjects.html":{},"classes/ScriptLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":110,"title":{},"body":{"classes/ARManager.html":{},"classes/EffectsManager.html":{},"classes/InfoLogger.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"index.html":{}}}],["user",{"_index":3636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata",{"_index":818,"title":{},"body":{"classes/ColorOptions.html":{},"changelog.html":{}}}],["uses",{"_index":939,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"index.html":{}}}],["using",{"_index":252,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["uuid",{"_index":2051,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["v1",{"_index":948,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["v2",{"_index":949,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["val",{"_index":1696,"title":{},"body":{"classes/LoadingManager.html":{},"classes/SelectionManager.html":{}}}],["val.pos.x",{"_index":2277,"title":{},"body":{"classes/RKHelper.html":{}}}],["val.pos.y",{"_index":2278,"title":{},"body":{"classes/RKHelper.html":{}}}],["val.pos.z",{"_index":2279,"title":{},"body":{"classes/RKHelper.html":{}}}],["value",{"_index":58,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":76,"title":{},"body":{"classes/ARManager.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["variable",{"_index":191,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["variable.ts",{"_index":190,"title":{},"body":{"classes/ActiveVariable.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["variable.ts:12",{"_index":206,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:17",{"_index":205,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:23",{"_index":211,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:32",{"_index":208,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:7",{"_index":201,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variables",{"_index":3605,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["varilable",{"_index":2412,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["vector",{"_index":941,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/VRManager.html":{}}}],["vector.applyquaternion(coordinatehelper.atlasquaternion",{"_index":943,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["vector.setfromsphericalcoords(radius",{"_index":942,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["vector2",{"_index":1275,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["vector2(window.innerwidth",{"_index":1296,"title":{},"body":{"classes/EffectsManager.html":{}}}],["vector3",{"_index":241,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["vector3().fromarray(hitposition",{"_index":412,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["vector3(...plane.slice(0",{"_index":2145,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vector3(0",{"_index":381,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{},"classes/State.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["vector3(metparams.etx",{"_index":2164,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vector3(x",{"_index":2076,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["version",{"_index":2407,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{}}}],["vertex",{"_index":450,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["vertexparams",{"_index":1992,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.color",{"_index":2152,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.uuid",{"_index":2161,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.x",{"_index":2155,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.y",{"_index":2157,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertices",{"_index":448,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["vertices.traverse((object",{"_index":664,"title":{},"body":{"classes/ColorManager.html":{}}}],["view",{"_index":862,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["view.model",{"_index":874,"title":{},"body":{"interfaces/Configuration.html":{}}}],["view.model.ts",{"_index":2176,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{}}}],["view.model.ts:10",{"_index":2187,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:14",{"_index":2183,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:32",{"_index":2188,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:6",{"_index":2186,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:8",{"_index":2185,"title":{},"body":{"classes/PresetView.html":{}}}],["views",{"_index":872,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["visibilitytoggle",{"_index":1214,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["visibilitytoggle.onchange((value",{"_index":1216,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["visible",{"_index":393,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["void",{"_index":112,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/variables.html":{}}}],["vr",{"_index":2760,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["vrmanager",{"_index":2758,"title":{"classes/VRManager.html":{}},"body":{"classes/VRManager.html":{},"changelog.html":{},"coverage.html":{}}}],["wait",{"_index":2455,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["want",{"_index":2593,"title":{},"body":{"classes/SelectionManager.html":{}}}],["webglrenderer",{"_index":99,"title":{},"body":{"classes/ARManager.html":{},"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["webglrenderers",{"_index":2318,"title":{},"body":{"classes/RendererManager.html":{}}}],["webpack",{"_index":3383,"title":{},"body":{"changelog.html":{}}}],["webxr",{"_index":144,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["whether",{"_index":61,"title":{},"body":{"classes/ARManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["whose",{"_index":192,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/PhoenixMenuNode.html":{}}}],["widgets",{"_index":2682,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["width",{"_index":2073,"title":{},"body":{"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["window",{"_index":2713,"title":{"interfaces/Window.html":{}},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["window.addeventlistener('resize",{"_index":2375,"title":{},"body":{"classes/RendererManager.html":{}}}],["window.eventdisplay",{"_index":3006,"title":{},"body":{"interfaces/Window.html":{}}}],["window.innerheight",{"_index":1297,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["window.innerwidth",{"_index":2367,"title":{},"body":{"classes/RendererManager.html":{}}}],["window.location.href",{"_index":2704,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["wireframe",{"_index":1082,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["wireframegeometriesmenu",{"_index":1095,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["wireframegeometriesmenu.onchange((value",{"_index":1097,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["wireframing",{"_index":1094,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"changelog.html":{}}}],["within",{"_index":897,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["without",{"_index":334,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/EffectsManager.html":{},"changelog.html":{},"index.html":{}}}],["work",{"_index":146,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["workaround",{"_index":346,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["working",{"_index":3100,"title":{},"body":{"changelog.html":{}}}],["works",{"_index":124,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["wrapper",{"_index":865,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{}}}],["wrong",{"_index":3283,"title":{},"body":{"changelog.html":{}}}],["x",{"_index":270,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixObjects.html":{}}}],["x,y,z",{"_index":863,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixObjects.html":{}}}],["xml",{"_index":3104,"title":{},"body":{"changelog.html":{}}}],["xr",{"_index":89,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["xr_camera",{"_index":3081,"title":{},"body":{"classes/XRManager.html":{}}}],["xractive",{"_index":31,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["xrcamera",{"_index":32,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["xrcontrollermodelfactory",{"_index":2785,"title":{},"body":{"classes/VRManager.html":{}}}],["xrmanager",{"_index":15,"title":{"classes/XRManager.html":{}},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{}}}],["xrmanager:104",{"_index":123,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:130",{"_index":129,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:19",{"_index":108,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:21",{"_index":102,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:23",{"_index":100,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:25",{"_index":91,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:27",{"_index":95,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:29",{"_index":87,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:31",{"_index":109,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:48",{"_index":114,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:61",{"_index":2781,"title":{},"body":{"classes/VRManager.html":{}}}],["xrmanager:62",{"_index":111,"title":{},"body":{"classes/ARManager.html":{}}}],["xrmanager:73",{"_index":2784,"title":{},"body":{"classes/VRManager.html":{}}}],["xrmanager:94",{"_index":119,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrsessioninit",{"_index":3054,"title":{},"body":{"classes/XRManager.html":{}}}],["xrsessiontype",{"_index":137,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/enumerations.html":{}}}],["xrsessiontype.vr",{"_index":3062,"title":{},"body":{"classes/XRManager.html":{}}}],["xrtype",{"_index":3060,"title":{},"body":{"classes/XRManager.html":{}}}],["y",{"_index":272,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixObjects.html":{}}}],["yarn",{"_index":3566,"title":{},"body":{"index.html":{}}}],["yes",{"_index":126,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["z",{"_index":274,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixObjects.html":{}}}],["z0",{"_index":2273,"title":{},"body":{"classes/RKHelper.html":{}}}],["zero",{"_index":3463,"title":{},"body":{"changelog.html":{}}}],["zoom",{"_index":2036,"title":{},"body":{"classes/PhoenixObjects.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["zoomfactor",{"_index":2979,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomtime",{"_index":2980,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomto(zoomfactor",{"_index":2982,"title":{},"body":{"interfaces/Window.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ARManager.html":{"url":"classes/ARManager.html","title":"class - ARManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ARManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/ar-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                AR manager for AR related operations.\n\n            \n\n            \n                Extends\n            \n            \n                        XRManager\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                enableDomOverlay\n                            \n                            \n                                    Private\n                                previousValues\n                            \n                            \n                                    Static\n                                    Readonly\n                                SESSION_TYPE\n                            \n                            \n                                    Public\n                                cameraGroup\n                            \n                            \n                                    Protected\n                                currentXRSession\n                            \n                            \n                                    Protected\n                                onSessionEnded\n                            \n                            \n                                    Protected\n                                renderer\n                            \n                            \n                                    Protected\n                                sessionInit\n                            \n                            \n                                    Protected\n                                xrActive\n                            \n                            \n                                    Public\n                                xrCamera\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                onXRSessionEnded\n                            \n                            \n                                    Protected\n                                    Async\n                                onXRSessionStarted\n                            \n                            \n                                    Private\n                                scaleScene\n                            \n                            \n                                    Public\n                                endXRSession\n                            \n                            \n                                    Public\n                                getCameraGroup\n                            \n                            \n                                    Public\n                                getXRCamera\n                            \n                            \n                                    Public\n                                setXRSession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scene: Scene, camera: PerspectiveCamera)\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/ar-manager.ts:22\n                            \n                        \n\n                \n                    \n                            Create the AR manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scene\n                                                  \n                                                        \n                                                                    Scene\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The three.js scene.\n\n                                                        \n                                                \n                                                \n                                                        camera\n                                                  \n                                                        \n                                                                    PerspectiveCamera\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Camera in the scene.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        enableDomOverlay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/ar-manager.ts:17\n                        \n                    \n\n            \n                \n                    Whether to enable DOM overlay which shows Phoenix overlays on top of the AR scene.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        previousValues\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    sceneScale: 1,\n    cameraNear: 10,\n  }\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/ar-manager.ts:19\n                        \n                    \n\n            \n                \n                    Previous values of scene scale, camera near and camera position.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        SESSION_TYPE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'immersive-ar'\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/ar-manager.ts:15\n                        \n                    \n\n            \n                \n                    Session type to use for AR.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cameraGroup\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Group\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:29\n\n                        \n                    \n\n            \n                \n                    Group containing the the camera for XR.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        currentXRSession\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:25\n\n                        \n                    \n\n            \n                \n                    Currently active XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onSessionEnded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:27\n\n                        \n                    \n\n            \n                \n                    Callback to call when the XR session ends.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:23\n\n                        \n                    \n\n            \n                \n                    Renderer to set the XR session for.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        sessionInit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:21\n\n                        \n                    \n\n            \n                \n                    Returns required and optional features when requesting an XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        xrActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:19\n\n                        \n                    \n\n            \n                \n                    Whether the XR is currently active or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        xrCamera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:31\n\n                        \n                    \n\n            \n                \n                    The camera used by XR.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        onXRSessionEnded\n                        \n                    \n                \n            \n            \n                \n                    \n                    onXRSessionEnded()\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:62\n\n                \n            \n\n\n            \n                \n                    Callback when the AR session ends.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        onXRSessionStarted\n                        \n                    \n                \n            \n            \n                \n                    \n                    onXRSessionStarted(session: any)\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:48\n\n                \n            \n\n\n            \n                \n                    Callback for when the AR session is started.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The AR session.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        scaleScene\n                        \n                    \n                \n            \n            \n                \n                    \n                    scaleScene(scale: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/ar-manager.ts:73\n                \n            \n\n\n            \n                \n                    Scale the three.js scene.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scale\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Number to scale the scene to.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        endXRSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    endXRSession()\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:94\n\n                \n            \n\n\n            \n                \n                    End the current XR session.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCameraGroup\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraGroup(camera?: Camera)\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:104\n\n                \n            \n\n\n            \n                \n                    Get the group containing the camera for XR.\nXR camera works by adding a Group with Camera to the scene.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Camera which is to be cloned for XR use.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Group\n\n                    \n                    \n                        The camera group used in XR mode.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getXRCamera\n                        \n                    \n                \n            \n            \n                \n                    \n                    getXRCamera()\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:130\n\n                \n            \n\n\n            \n                \n                    Get the camera used by XR.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The camera used by XR.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setXRSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    setXRSession(renderer: WebGLRenderer, onSessionStarted?: () => void, onSessionEnded?: () => void)\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:48\n\n                \n            \n\n\n            \n                \n                    Set and configure the XR session.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer to set the XR session for.\n\n                                    \n                                \n                                \n                                    onSessionStarted\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the XR session starts.\n\n                                    \n                                \n                                \n                                    onSessionEnded\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the XR session ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PerspectiveCamera, Scene } from 'three';\nimport { SceneManager } from './scene-manager';\nimport { XRManager, XRSessionType } from './xr-manager';\n\n// NOTE: This was created on 28/06/2021\n// It might become outdated given how WebXR is still a work in progress\n\n// LAST UPDATED ON 07/07/2021\n\n/**\n * AR manager for AR related operations.\n */\nexport class ARManager extends XRManager {\n  /** Session type to use for AR. */\n  static readonly SESSION_TYPE: string = 'immersive-ar';\n  /** Whether to enable DOM overlay which shows Phoenix overlays on top of the AR scene. */\n  public static enableDomOverlay: boolean = true;\n  /** Previous values of scene scale, camera near and camera position. */\n  private previousValues = {\n    sceneScale: 1,\n    cameraNear: 10,\n  };\n\n  /**\n   * Create the AR manager.\n   * @param scene The three.js scene.\n   * @param camera Camera in the scene.\n   * @override\n   */\n  constructor(private scene: Scene, private camera: PerspectiveCamera) {\n    super(XRSessionType.AR);\n\n    this.previousValues.sceneScale = scene.scale.x;\n    this.previousValues.cameraNear = camera.near;\n    this.sessionInit = () => {\n      return ARManager.enableDomOverlay ? {\n        optionalFeatures: ['dom-overlay'],\n        domOverlay: { root: document.body },\n      } : {};\n    }\n  }\n\n  /**\n   * Callback for when the AR session is started.\n   * @param session The AR session.\n   * @override\n   */\n  protected async onXRSessionStarted(session: any) {\n    document.body.style.setProperty('background-color', 'transparent');\n    this.previousValues.sceneScale = this.scene.scale.x;\n    this.previousValues.cameraNear = this.camera.near;\n    this.scaleScene(0.00001);\n    this.camera.near = 0.01;\n    this.renderer.xr.setReferenceSpaceType('local');\n    await super.onXRSessionStarted(session);\n  }\n\n  /**\n   * Callback when the AR session ends.\n   * @override\n   */\n  protected onXRSessionEnded() {\n    document.body.style.removeProperty('background-color');\n    this.scaleScene(this.previousValues.sceneScale);\n    this.camera.near = this.previousValues.cameraNear;\n    super.onXRSessionEnded();\n  }\n\n  /**\n   * Scale the three.js scene.\n   * @param scale Number to scale the scene to.\n   */\n  private scaleScene(scale: number) {\n    [\n      SceneManager.EVENT_DATA_ID,\n      SceneManager.GEOMETRIES_ID,\n      SceneManager.LABELS_ID,\n    ].forEach((groupName) => {\n      this.scene.getObjectByName(groupName)?.scale.setScalar(scale);\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ActiveVariable.html":{"url":"classes/ActiveVariable.html","title":"class - ActiveVariable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ActiveVariable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/active-variable.ts\n        \n\n\n            \n                Description\n            \n            \n                An active variable whose value can be changed and the change can be observed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                callbacks\n                            \n                            \n                                    Public\n                                    Optional\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                onUpdate\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value?: T)\n                    \n                \n                        \n                            \n                                Defined in src/helpers/active-variable.ts:7\n                            \n                        \n\n                \n                    \n                            Create the observable active variable.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Initial value.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        callbacks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CallbackFunction[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/helpers/active-variable.ts:17\n                        \n                    \n\n            \n                \n                    Callbacks to call on update.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                    \n                        \n                                Defined in src/helpers/active-variable.ts:12\n                        \n                    \n\n            \n                \n                    Initial value.\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        onUpdate\n                        \n                    \n                \n            \n            \n                \n                    \n                    onUpdate(callback: CallbackFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/active-variable.ts:32\n                \n            \n\n\n            \n                \n                    Call a function on updating the value of variable.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                CallbackFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call with updated value when the variable is updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(updatedValue: T)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/active-variable.ts:23\n                \n            \n\n\n            \n                \n                    Update the value of variable.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    updatedValue\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        New updated value.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export type CallbackFunction = (updatedValue: T) => void;\n\n/**\n * An active variable whose value can be changed and the change can be observed.\n */\nexport class ActiveVariable {\n  /**\n   * Create the observable active variable.\n   * @param value Initial value.\n   */\n  constructor(public value?: T) {}\n\n  /**\n   * Callbacks to call on update.\n   */\n  private callbacks: CallbackFunction[] = [];\n\n  /**\n   * Update the value of variable.\n   * @param updatedValue New updated value.\n   */\n  public update(updatedValue: T) {\n    this.value = updatedValue;\n    this.callbacks.forEach((callback) => callback(updatedValue));\n  }\n\n  /**\n   * Call a function on updating the value of variable.\n   * @param callback Callback to call with updated value when the variable is updated.\n   */\n  public onUpdate(callback: CallbackFunction) {\n    this.callbacks.push(callback);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AnimationPreset.html":{"url":"interfaces/AnimationPreset.html","title":"interface - AnimationPreset","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AnimationPreset\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/animations-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Type for animation preset.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            animateEventAfterInterval\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            collisionDuration\n                                        \n                                \n                                \n                                        \n                                            positions\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        animateEventAfterInterval\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        animateEventAfterInterval:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Time after which to start the event collision animation.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        collisionDuration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        collisionDuration:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Duration of the event collision.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        positions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        positions:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Positions with duration and easing of each tween forming a path.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { SceneManager } from './scene-manager';\nimport {\n  TubeBufferGeometry,\n  BufferGeometry,\n  Vector3,\n  Color,\n  MeshBasicMaterial,\n  Mesh,\n  SphereBufferGeometry,\n  Sphere,\n  Object3D,\n  BufferAttribute,\n  Scene,\n  Camera,\n  Plane,\n  Group,\n} from 'three';\nimport * as TWEEN from '@tweenjs/tween.js';\nimport { RendererManager } from './renderer-manager';\n\n/** Type for animation preset. */\nexport interface AnimationPreset {\n  /** Positions with duration and easing of each tween forming a path. */\n  positions: { position: number[]; duration: number; easing?: any }[];\n  /** Time after which to start the event collision animation. */\n  animateEventAfterInterval?: number;\n  /** Duration of the event collision. */\n  collisionDuration?: number;\n}\n\n/**\n * Manager for managing animation related operations using three.js and tween.js.\n */\nexport class AnimationsManager {\n  /**\n   * Constructor for the animation manager.\n   * @param scene Three.js scene containing all the objects and event data.\n   * @param activeCamera Currently active camera.\n   * @param rendererManager Manager for managing event display's renderer related functions.\n   */\n  constructor(\n    private scene: Scene,\n    private activeCamera: Camera,\n    private rendererManager: RendererManager\n  ) {\n    this.animateEvent = this.animateEvent.bind(this);\n    this.animateEventWithClipping = this.animateEventWithClipping.bind(this);\n  }\n\n  /**\n   * Get the camera tween for animating camera to a position.\n   * @param pos End position of the camera tween.\n   * @param duration Duration of the tween.\n   * @param easing Animation easing of the tween if any.\n   * @returns Tween object of the camera animation.\n   */\n  public getCameraTween(\n    pos: number[],\n    duration: number = 1000,\n    easing?: any\n  ): any {\n    const tween = new TWEEN.Tween(this.activeCamera.position).to(\n      { x: pos[0], y: pos[1], z: pos[2] },\n      duration\n    );\n\n    if (easing) {\n      tween.easing(easing);\n    }\n\n    return tween;\n  }\n\n  /**\n   * Animate the camera through the event scene.\n   * @param startPos Start position of the translation animation.\n   * @param tweenDuration Duration of each tween in the translation animation.\n   * @param onAnimationEnd Callback when the last animation ends.\n   */\n  public animateThroughEvent(\n    startPos: number[],\n    tweenDuration: number,\n    onAnimationEnd?: () => void\n  ) {\n    // Move to start\n    const start = this.getCameraTween(startPos, 1000, TWEEN.Easing.Cubic.Out);\n    // Move to position along the detector axis\n    const alongAxisPosition = [0, 0, startPos[2]];\n    const startXAxis = this.getCameraTween(alongAxisPosition, tweenDuration);\n\n    const radius = 500;\n    const numOfSteps = 24;\n    const angle = 3 * Math.PI;\n    const step = angle / numOfSteps;\n\n    const rotationPositions = [];\n    for (let i = 1; i  onAnimationEnd?.());\n    startClone.delay(500);\n\n    start.chain(startXAxis);\n    startXAxis.chain(rotateStart);\n    rotate.chain(end);\n    end.chain(startClone);\n\n    start.start();\n  }\n\n  /**\n   * Animate the propagation and generation of event data.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Callback when all animations have ended.\n   * @param onAnimationStart Callback when the first animation starts.\n   */\n  public animateEvent(\n    tweenDuration: number,\n    onEnd?: () => void,\n    onAnimationStart?: () => void\n  ) {\n    const extraAnimationSphereDuration = tweenDuration * 0.25;\n    tweenDuration *= 0.75;\n\n    const eventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    const animationSphere = new Sphere(new Vector3(), 0);\n    const objectsToAnimateWithSphere: {\n      eventObject: Object3D;\n      position: any;\n    }[] = [];\n\n    const allTweens = [];\n    // Traverse over all event data\n    eventData.traverse((eventObject: any) => {\n      if (eventObject.geometry) {\n        // Animation for extrapolating tracks without changing scale\n        if (eventObject.name === 'Track' || eventObject.name === 'LineHit') {\n          // Check if geometry drawRange count exists\n          let geometryPosCount =\n            eventObject.geometry?.attributes?.position?.count;\n          if (geometryPosCount) {\n            // WORKAROUND\n            // Changing position count for TubeBufferGeometry because\n            // what we get is not the actual and it has Infinity drawRange count\n            if (eventObject.geometry instanceof TubeBufferGeometry) {\n              geometryPosCount *= 6;\n            }\n            if (eventObject.geometry instanceof BufferGeometry) {\n              const oldDrawRangeCount = eventObject.geometry.drawRange.count;\n              eventObject.geometry.setDrawRange(0, 0);\n              const eventObjectTween = new TWEEN.Tween(\n                eventObject.geometry.drawRange\n              ).to(\n                {\n                  count: geometryPosCount,\n                },\n                tweenDuration\n              );\n              eventObjectTween.onComplete(() => {\n                eventObject.geometry.drawRange.count = oldDrawRangeCount;\n              });\n              allTweens.push(eventObjectTween);\n            }\n          }\n        }\n        // Animation for scaling out objects with or without position\n        else if (eventObject.name === 'Jet') {\n          const scaleTween = new TWEEN.Tween({\n            x: 0.01,\n            y: 0.01,\n            z: 0.01,\n          }).to(\n            {\n              x: eventObject.scale.x,\n              y: eventObject.scale.y,\n              z: eventObject.scale.z,\n            },\n            tweenDuration\n          );\n          // Manually updating scale since we need to change position\n          scaleTween.onUpdate((updatedScale: Vector3) => {\n            const previousScale = eventObject.scale.x;\n            eventObject.scale.setScalar(updatedScale.x);\n            // Restoring to original position and then moving again with the current value\n            eventObject.position\n              .divideScalar(previousScale)\n              .multiplyScalar(updatedScale.x);\n          });\n          allTweens.push(scaleTween);\n        } else {\n          const hasPosition = !eventObject.position.equals(\n            new Vector3(0, 0, 0)\n          );\n          let position = hasPosition\n            ? eventObject.position\n            : eventObject.geometry.boundingSphere.center;\n\n          // Edit geometry for hits\n          if (eventObject.name === 'Hit') {\n            position = Array.from(\n              eventObject.geometry.attributes['position'].array\n            );\n            eventObject.geometry.deleteAttribute('position');\n            eventObject.geometry.computeBoundingSphere();\n          } else {\n            // Making the object invisible and will make visible\n            // once the animation sphere reaches the object\n            eventObject.visible = false;\n          }\n\n          objectsToAnimateWithSphere.push({\n            eventObject: eventObject,\n            position: position,\n          });\n        }\n      }\n    });\n\n    // Tween for the animation sphere\n    const animationSphereTween = new TWEEN.Tween(animationSphere).to(\n      { radius: 3000 },\n      tweenDuration\n    );\n\n    const onAnimationSphereUpdate = (updateAnimationSphere: Sphere) => {\n      objectsToAnimateWithSphere.forEach((obj) => {\n        if (obj.eventObject.name === 'Hit') {\n          const geometry = (obj.eventObject as any).geometry;\n\n          const hitsPositions = this.getHitsPositions(obj.position);\n          const reachedHits = hitsPositions.filter((hitPosition) =>\n            updateAnimationSphere.containsPoint(\n              new Vector3().fromArray(hitPosition)\n            )\n          );\n\n          if (reachedHits.length > 0) {\n            geometry.setAttribute(\n              'position',\n              new BufferAttribute(\n                new Float32Array([].concat(...reachedHits)),\n                3\n              )\n            );\n            geometry.computeBoundingSphere();\n          }\n        } else if (updateAnimationSphere.containsPoint(obj.position)) {\n          obj.eventObject.visible = true;\n        }\n      });\n    };\n\n    animationSphereTween.onUpdate(onAnimationSphereUpdate);\n\n    // Animation sphere tween after covering the tracks\n    const animationSphereTweenClone = new TWEEN.Tween(animationSphere).to(\n      { radius: 10000 },\n      extraAnimationSphereDuration\n    );\n    animationSphereTweenClone.onUpdate(onAnimationSphereUpdate);\n\n    animationSphereTween.chain(animationSphereTweenClone);\n\n    allTweens.push(animationSphereTween);\n\n    // Call onAnimationStart when the first tween starts\n    allTweens[0].onStart(() => onAnimationStart?.());\n\n    // Start all tweens\n    for (const tween of allTweens) {\n      tween.easing(TWEEN.Easing.Quartic.Out).start();\n    }\n\n    // Call onEnd when the last tween completes\n    animationSphereTweenClone.onComplete(() => {\n      // Restore all remaining event data items\n      onAnimationSphereUpdate(new Sphere(new Vector3(), Infinity));\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data using clipping planes.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   * @param onAnimationStart Callback when the first animation starts.\n   * @param clippingConstant Constant for the clipping planes for distance from the origin.\n   */\n  public animateEventWithClipping(\n    tweenDuration: number,\n    onEnd?: () => void,\n    onAnimationStart?: () => void,\n    clippingConstant: number = 11000\n  ) {\n    const allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    // Sphere to get spherical set of clipping planes from\n    const sphere = new SphereBufferGeometry(1, 8, 8);\n    // Clipping planes for animation\n    const animationClipPlanes: Plane[] = [];\n\n    // Get clipping planes from the vertices of sphere\n    const position = sphere.attributes.position;\n    const vertex = new Vector3();\n    for (let i = 0; i  {\n      if (eventObject.geometry && eventObject.material) {\n        eventObject.material.clippingPlanes = animationClipPlanes;\n      }\n    });\n\n    const allTweens = [];\n    // Create tweens for the animation clipping planes\n    for (const animationClipPlane of animationClipPlanes) {\n      animationClipPlane.constant = 0;\n      const tween = new TWEEN.Tween(animationClipPlane).to(\n        { constant: clippingConstant },\n        tweenDuration\n      );\n      allTweens.push(tween);\n    }\n\n    allTweens[0].onStart(() => onAnimationStart?.());\n\n    // Start all the tweens\n    for (const tween of allTweens) {\n      tween.start();\n    }\n\n    allTweens[allTweens.length - 1].onComplete(() => {\n      // Revert local clipping of the renderer\n      if (!prevLocalClipping) {\n        this.rendererManager.getMainRenderer().localClippingEnabled =\n          prevLocalClipping /* false */;\n      }\n      // Remove the applied clipping planes from the event data objects\n      allEventData.traverse((eventObject: any) => {\n        if (eventObject.geometry && eventObject.material) {\n          eventObject.material.clippingPlanes = null;\n        }\n      });\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the collision of two particles.\n   * @param tweenDuration Duration of the particle collision animation tween.\n   * @param particleSize Size of the particles.\n   * @param distanceFromOrigin Distance of the particles (along z-axes) from the origin.\n   * @param particleColor Color of the particles.\n   * @param onEnd Callback to call when the particle collision ends.\n   */\n  public collideParticles(\n    tweenDuration: number,\n    particleSize: number = 10,\n    distanceFromOrigin: number = 5000,\n    particleColor: Color = new Color(0xffffff),\n    onEnd?: () => void\n  ) {\n    const particleGeometry = new SphereBufferGeometry(particleSize, 32, 32);\n    const particleMaterial = new MeshBasicMaterial({\n      color: particleColor,\n      transparent: true,\n      opacity: 0,\n    });\n\n    const particle1 = new Mesh(particleGeometry, particleMaterial);\n    const particle2 = particle1.clone() as Mesh;\n\n    particle1.position.setZ(distanceFromOrigin);\n    particle2.position.setZ(-distanceFromOrigin);\n\n    const particles = [particle1, particle2];\n\n    this.scene.add(...particles);\n\n    const particleTweens = [];\n\n    for (const particle of particles) {\n      new TWEEN.Tween(particle.material)\n        .to(\n          {\n            opacity: 1,\n          },\n          300\n        )\n        .start();\n\n      const particleToOrigin = new TWEEN.Tween(particle.position)\n        .to(\n          {\n            z: 0,\n          },\n          tweenDuration\n        )\n        .start();\n\n      particleTweens.push(particleToOrigin);\n    }\n\n    particleTweens[0].onComplete(() => {\n      this.scene.remove(...particles);\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param animationFunction Animation function to call after collision.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateWithCollision(\n    animationFunction: (\n      tweenDuration: number,\n      onEnd?: () => void,\n      onAnimationStart?: () => void\n    ) => void,\n    tweenDuration: number,\n    onEnd?: () => void\n  ) {\n    const allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    // Get the color of the first track to use for colliding particles\n    const track = allEventData.getObjectByName('Track');\n    let trackColor: Color;\n    if (track instanceof Group) {\n      trackColor = (track.children[0] as any)?.material?.color;\n    } else {\n      trackColor = (track as any)?.material.color;\n    }\n\n    // Hide event data to show particles collision\n    if (allEventData) {\n      allEventData.visible = false;\n    }\n\n    this.collideParticles(1500, 30, 5000, trackColor, () => {\n      animationFunction(tweenDuration, onEnd, () => {\n        if (allEventData) {\n          allEventData.visible = true;\n        }\n      });\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateEventWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.animateWithCollision(this.animateEvent, tweenDuration, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data\n   * using clipping planes after particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateClippingWithCollision(\n    tweenDuration: number,\n    onEnd?: () => void\n  ) {\n    this.animateWithCollision(\n      this.animateEventWithClipping,\n      tweenDuration,\n      onEnd\n    );\n  }\n\n  /**\n   * Get the positions of hits in a multidimensional array\n   * from a single dimensional array.\n   * @param positions Positions of hits in a single dimensional array.\n   * @returns Positions of hits in a multidimensional array.\n   */\n  private getHitsPositions(positions: number[]): number[][] {\n    const hitsPositions: number[][] = [];\n    for (let i = 0; i  void) {\n    const { positions, animateEventAfterInterval, collisionDuration } =\n      animationPreset;\n\n    if (animateEventAfterInterval && collisionDuration) {\n      // Will be made visible after collision animation ends.\n      this.scene.getObjectByName(SceneManager.EVENT_DATA_ID).visible = false;\n      setTimeout(() => {\n        this.animateEventWithCollision(collisionDuration);\n      }, animateEventAfterInterval);\n    }\n\n    const firstTween = this.getCameraTween(\n      positions[0].position,\n      positions[0].duration ?? 2000,\n      positions[0].easing\n    );\n\n    let previousTween = firstTween;\n    positions.slice(1).forEach(({ position, duration, easing }) => {\n      const tween = this.getCameraTween(position, duration ?? 2000, easing);\n      previousTween.chain(tween);\n      previousTween = tween;\n    });\n    previousTween.onComplete(onEnd);\n\n    firstTween.start();\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CMSObjects.html":{"url":"classes/CMSObjects.html","title":"class - CMSObjects","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CMSObjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/cms-objects.ts\n        \n\n\n            \n                Description\n            \n            \n                Physics objects that make up an event in CMS that are not a part of PhoenixObjects.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getMuonChamber\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getMuonChamber\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuonChamber(muonChamberParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/cms-objects.ts:25\n                \n            \n\n\n            \n                \n                    Process the Muon Chamber from the given parameters.\nand get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonChamberParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon Chamber.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon Chamber object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Object3D,\n  Group,\n  Mesh,\n  MeshBasicMaterial,\n  EdgesGeometry,\n  LineBasicMaterial,\n  DoubleSide,\n  LineSegments,\n  BufferGeometry,\n  BufferAttribute,\n} from 'three';\nimport { EVENT_DATA_TYPE_COLORS } from '../../helpers/constants';\n\n/**\n * Physics objects that make up an event in CMS that are not a part of {@link PhoenixObjects}.\n */\nexport class CMSObjects {\n  /**\n   * Process the Muon Chamber from the given parameters.\n   * and get it as a geometry.\n   * @param muonChamberParams Parameters of the Muon Chamber.\n   * @returns Muon Chamber object.\n   */\n  public static getMuonChamber(muonChamberParams: any): Object3D {\n    let allFacePositions: number[] = [];\n\n    const addFace3 = (...faces: string[]) => {\n      allFacePositions = allFacePositions.concat(\n        ...faces.map((face) => muonChamberParams[face])\n      );\n    };\n\n    // front\n    addFace3('front_1', 'front_2', 'front_3');\n    addFace3('front_3', 'front_4', 'front_1');\n\n    // back\n    addFace3('back_1', 'back_2', 'back_3');\n    addFace3('back_3', 'back_4', 'back_1');\n\n    // top\n    addFace3('back_1', 'back_2', 'front_2');\n    addFace3('front_2', 'front_1', 'back_1');\n\n    // bottom\n    addFace3('back_4', 'back_3', 'front_3');\n    addFace3('front_3', 'front_4', 'back_4');\n\n    // left\n    addFace3('front_1', 'front_4', 'back_4');\n    addFace3('back_4', 'back_1', 'front_1');\n\n    // right\n    addFace3('front_2', 'back_2', 'back_3');\n    addFace3('back_3', 'front_3', 'front_2');\n\n    const boxBuffer = new BufferGeometry();\n    boxBuffer.attributes.position = new BufferAttribute(\n      new Float32Array(allFacePositions),\n      3\n    );\n    boxBuffer.computeVertexNormals();\n\n    const boxObject = new Mesh(\n      boxBuffer,\n      new MeshBasicMaterial({\n        color: muonChamberParams.color ?? EVENT_DATA_TYPE_COLORS.MuonChambers,\n        transparent: true,\n        opacity: 0.1,\n        side: DoubleSide,\n      })\n    );\n\n    boxObject.userData = Object.assign({}, muonChamberParams);\n    boxObject.name = 'MuonChamber';\n\n    // These are the lines along the box edges\n\n    const boxEdges = new EdgesGeometry(boxBuffer);\n    const lineBoxObject = new LineSegments(\n      boxEdges,\n      new LineBasicMaterial({\n        color: 0xffffff,\n        transparent: true,\n        opacity: 0.7,\n      })\n    );\n\n    const muonChamber = new Group();\n    muonChamber.add(boxObject);\n    muonChamber.add(lineBoxObject);\n\n    muonChamberParams.uuid = boxObject.uuid;\n\n    return muonChamber;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ColorManager.html":{"url":"classes/ColorManager.html","title":"class - ColorManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ColorManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/color-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Color manager for three.js functions related to coloring of objects.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                collectionColor\n                            \n                            \n                                    Public\n                                collectionColorRandom\n                            \n                            \n                                colorObjectsByProperty\n                            \n                            \n                                    Public\n                                colorTracksByVertex\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sceneManager: SceneManager)\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/color-manager.ts:7\n                            \n                        \n\n                \n                    \n                            Create the coloring manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sceneManager\n                                                  \n                                                        \n                                                                        SceneManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The scene manager responsible for managing the three.js scene.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        collectionColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    collectionColor(collectionName: string, color: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/color-manager.ts:38\n                \n            \n\n\n            \n                \n                    Changes the color of all objects inside an event data collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Hex value representing the color.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        collectionColorRandom\n                        \n                    \n                \n            \n            \n                \n                    \n                    collectionColorRandom(collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/color-manager.ts:55\n                \n            \n\n\n            \n                \n                    Changes the color of all objects inside an event data collection to some random color.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        colorObjectsByProperty\n                        \n                    \n                \n            \n            \n                \ncolorObjectsByProperty(color: any, objectsGroup: string, customCheck: (objectUserData: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/color-manager.ts:20\n                \n            \n\n\n            \n                \n                    Color objects by a property's value or range.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Color to set for the object.\n\n                                    \n                                \n                                \n                                    objectsGroup\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the object(s) group to color.\n\n                                    \n                                \n                                \n                                    customCheck\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to custom check values against object params.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        colorTracksByVertex\n                        \n                    \n                \n            \n            \n                \n                    \n                    colorTracksByVertex(collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/color-manager.ts:72\n                \n            \n\n\n            \n                \n                    Randomly color tracks by the vertex they are associated with.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Color, MeshPhongMaterial } from 'three';\nimport { SceneManager } from './scene-manager';\n\n/**\n * Color manager for three.js functions related to coloring of objects.\n */\nexport class ColorManager {\n  /**\n   * Create the coloring manager.\n   * @param sceneManager The scene manager responsible for managing the three.js scene.\n   */\n  constructor(private sceneManager: SceneManager) {}\n\n  /**\n   * Color objects by a property's value or range.\n   * @param color Color to set for the object.\n   * @param objectsGroup Name of the object(s) group to color.\n   * @param customCheck Function to custom check values against object params.\n   */\n  colorObjectsByProperty(\n    color: any,\n    objectsGroup: string,\n    customCheck: (objectUserData: any) => boolean\n  ) {\n    const objects = this.sceneManager.getScene().getObjectByName(objectsGroup);\n    objects.traverse((object: any) => {\n      if (object.material?.color && customCheck(object.userData)) {\n        object.material.color.set(color);\n      }\n    });\n  }\n\n  /**\n   * Changes the color of all objects inside an event data collection.\n   * @param collectionName Name of the collection.\n   * @param color Hex value representing the color.\n   */\n  public collectionColor(collectionName: string, color: any) {\n    const collection = this.sceneManager\n      .getScene()\n      .getObjectByName(SceneManager.EVENT_DATA_ID)\n      .getObjectByName(collectionName);\n\n    for (const child of Object.values(collection.children)) {\n      child.traverse((object) => {\n        (object['material']?.color as Color)?.set(color);\n      });\n    }\n  }\n\n  /**\n   * Changes the color of all objects inside an event data collection to some random color.\n   * @param collectionName Name of the collection.\n   */\n  public collectionColorRandom(collectionName: string) {\n    const collection = this.sceneManager\n      .getScene()\n      .getObjectByName(SceneManager.EVENT_DATA_ID)\n      .getObjectByName(collectionName);\n\n    for (const child of Object.values(collection.children)) {\n      child.traverse((object) => {\n        (object['material']?.color as Color)?.set(Math.random() * 0xffffff);\n      });\n    }\n  }\n\n  /**\n   * Randomly color tracks by the vertex they are associated with.\n   * @param collectionName Name of the collection.\n   */\n  public colorTracksByVertex(collectionName: string) {\n    const scene = this.sceneManager.getScene();\n    const vertices = scene.getObjectByName('Vertices');\n    vertices.traverse((object) => {\n      const { linkedTrackCollection, linkedTracks } = object.userData;\n\n      if (\n        object.name === 'Vertex' &&\n        linkedTrackCollection === collectionName &&\n        linkedTracks\n      ) {\n        const colorForTracksVertex = (object['material'] as MeshPhongMaterial)\n          .color;\n        const trackCollection = scene.getObjectByName(linkedTrackCollection);\n\n        linkedTracks.forEach((trackIndex: number) => {\n          trackCollection.children[trackIndex].traverse((trackObject) => {\n            trackObject?.['material']?.color?.set(colorForTracksVertex);\n          });\n        });\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ColorOptions.html":{"url":"classes/ColorOptions.html","title":"class - ColorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ColorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/ui-manager/color-options.ts\n        \n\n\n            \n                Description\n            \n            \n                Color options with functions to color event data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                allColorByOptions\n                            \n                            \n                                    Private\n                                chargeColors\n                            \n                            \n                                    Private\n                                collectionName\n                            \n                            \n                                    Private\n                                colorByOptions\n                            \n                            \n                                    Private\n                                colorOptionsFolder\n                            \n                            \n                                    Private\n                                momColors\n                            \n                            \n                                    Private\n                                selectedColorByOption\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                applyChargeColorOptions\n                            \n                            \n                                    Private\n                                applyMomColorOptions\n                            \n                            \n                                    Private\n                                applyVertexColorOptions\n                            \n                            \n                                    Private\n                                colorByMomentum\n                            \n                            \n                                    Private\n                                getMomentum\n                            \n                            \n                                    Private\n                                initChargeColorOptions\n                            \n                            \n                                    Private\n                                initColorByOptions\n                            \n                            \n                                    Private\n                                initMomColorOptions\n                            \n                            \n                                    Private\n                                onlySelectedColorByOption\n                            \n                            \n                                    Private\n                                shouldColorByCharge\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorManager: ColorManager, collectionFolder: PhoenixMenuNode, collectionColor: Color, colorByOptionsToInclude?: ColorByOptionKeys[])\n                    \n                \n                        \n                            \n                                Defined in src/managers/ui-manager/color-options.ts:74\n                            \n                        \n\n                \n                    \n                            Create the color options.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        colorManager\n                                                  \n                                                        \n                                                                        ColorManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Color manager for three.js functions related to coloring of objects.\n\n                                                        \n                                                \n                                                \n                                                        collectionFolder\n                                                  \n                                                        \n                                                                        PhoenixMenuNode\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Collection folder to add the color by options to.\n\n                                                        \n                                                \n                                                \n                                                        collectionColor\n                                                  \n                                                        \n                                                                    Color\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        colorByOptionsToInclude\n                                                  \n                                                        \n                                                                        ColorByOptionKeys[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Options to include for this collection to color event data by.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        allColorByOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ColorByOption[]\n\n                    \n                \n                \n                    \n                        Default value : [\n    {\n      key: ColorByOptionKeys.CHARGE,\n      name: 'Charge ' + PrettySymbols.getPrettySymbol('charge'),\n      initialize: this.initChargeColorOptions.bind(this),\n      apply: this.applyChargeColorOptions.bind(this),\n    },\n    {\n      key: ColorByOptionKeys.MOM,\n      name: 'Momentum ' + PrettySymbols.getPrettySymbol('mom'),\n      initialize: this.initMomColorOptions.bind(this),\n      apply: this.applyMomColorOptions.bind(this),\n    },\n    {\n      key: ColorByOptionKeys.VERTEX,\n      name: 'Vertex',\n      apply: this.applyVertexColorOptions.bind(this),\n    },\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:35\n                        \n                    \n\n            \n                \n                    All color by options possible.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        chargeColors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    '-1': '#ff0000',\n    '0': '#ff0000',\n    '1': '#ff0000',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:57\n                        \n                    \n\n            \n                \n                    Default values for colors for color by charge.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        collectionName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:26\n                        \n                    \n\n            \n                \n                    Collection name of the event data type.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        colorByOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ColorByOption[]\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:28\n                        \n                    \n\n            \n                \n                    Available options to color by in this instance of color options.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        colorOptionsFolder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:32\n                        \n                    \n\n            \n                \n                    Phoenix menu node containing color configurations.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        momColors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    min: {\n      value: 0,\n      color: '#ff0000',\n    },\n    max: {\n      value: 50000,\n      color: '#ff0000',\n    },\n  }\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:65\n                        \n                    \n\n            \n                \n                    Default values for colors and min/max for color by momentum.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedColorByOption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ColorByOptionKeys\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:30\n                        \n                    \n\n            \n                \n                    Currently selected option to color by.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        applyChargeColorOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyChargeColorOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:176\n                \n            \n\n\n            \n                \n                    Apply charge color options.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        applyMomColorOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyMomColorOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:246\n                \n            \n\n\n            \n                \n                    Apply momentum color options.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        applyVertexColorOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyVertexColorOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:293\n                \n            \n\n\n            \n                \n                    Apply color by vertex to tracks.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        colorByMomentum\n                        \n                    \n                \n            \n            \n                \n                    \n                    colorByMomentum(minOrMax: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:256\n                \n            \n\n\n            \n                \n                    Color event data based on the momentum property of each object.\nThis is to apply the stored momentum colors for minimum and maximum separated at the mid value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    minOrMax\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the momentum to color objects by is minimum or maximum momentum.\nThis is to apply the stored momentum colors for minimum and maximum separated at the mid value.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getMomentum\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMomentum(objectParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:282\n                \n            \n\n\n            \n                \n                    Get momentum from object parameters.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters associated to the 3D object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        THe momentum value.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        initChargeColorOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    initChargeColorOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:150\n                \n            \n\n\n            \n                \n                    Initialize charge color options.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        initColorByOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    initColorByOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:124\n                \n            \n\n\n            \n                \n                    Initialize the color options.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        initMomColorOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    initMomColorOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:207\n                \n            \n\n\n            \n                \n                    Initialize momentum color options.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        onlySelectedColorByOption\n                        \n                    \n                \n            \n            \n                \n                    \n                    onlySelectedColorByOption()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:300\n                \n            \n\n\n            \n                \n                    Show configs of only the currently selected color by option.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        shouldColorByCharge\n                        \n                    \n                \n            \n            \n                \n                    \n                    shouldColorByCharge(objectParams: any, chargeValue: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:193\n                \n            \n\n\n            \n                \n                    Check if object should be colored based on charge value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object parameters associated to the 3D object.\n\n                                    \n                                \n                                \n                                    chargeValue\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value of charge (-1, 0, 1).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Whether the charge is equal to the value.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Color } from 'three';\nimport { PrettySymbols } from '../../helpers/pretty-symbols';\nimport { ColorManager } from '../three-manager/color-manager';\nimport { PhoenixMenuNode } from './phoenix-menu/phoenix-menu-node';\n\n/** Keys for options available for coloring event data by. */\nexport enum ColorByOptionKeys {\n  CHARGE = 'charge',\n  MOM = 'mom',\n  VERTEX = 'vertex',\n}\n\n/** Type for a single color by option. */\ntype ColorByOption = {\n  key: ColorByOptionKeys;\n  name: string;\n  initialize?: () => void;\n  apply?: () => void;\n};\n\n/**\n * Color options with functions to color event data.\n */\nexport class ColorOptions {\n  /** Collection name of the event data type. */\n  private collectionName: string;\n  /** Available options to color by in this instance of color options. */\n  private colorByOptions: ColorByOption[];\n  /** Currently selected option to color by. */\n  private selectedColorByOption: ColorByOptionKeys;\n  /** Phoenix menu node containing color configurations. */\n  private colorOptionsFolder: PhoenixMenuNode;\n\n  /** All color by options possible. */\n  private allColorByOptions: ColorByOption[] = [\n    {\n      key: ColorByOptionKeys.CHARGE,\n      name: 'Charge ' + PrettySymbols.getPrettySymbol('charge'),\n      initialize: this.initChargeColorOptions.bind(this),\n      apply: this.applyChargeColorOptions.bind(this),\n    },\n    {\n      key: ColorByOptionKeys.MOM,\n      name: 'Momentum ' + PrettySymbols.getPrettySymbol('mom'),\n      initialize: this.initMomColorOptions.bind(this),\n      apply: this.applyMomColorOptions.bind(this),\n    },\n    {\n      key: ColorByOptionKeys.VERTEX,\n      name: 'Vertex',\n      apply: this.applyVertexColorOptions.bind(this),\n    },\n  ];\n\n  // Charge options.\n  /** Default values for colors for color by charge. */\n  private chargeColors = {\n    '-1': '#ff0000',\n    '0': '#ff0000',\n    '1': '#ff0000',\n  };\n\n  // Momentum options.\n  /** Default values for colors and min/max for color by momentum. */\n  private momColors = {\n    min: {\n      value: 0,\n      color: '#ff0000',\n    },\n    max: {\n      value: 50000,\n      color: '#ff0000',\n    },\n  };\n\n  /**\n   * Create the color options.\n   * @param colorManager Color manager for three.js functions related to coloring of objects.\n   * @param collectionFolder Collection folder to add the color by options to.\n   * @param colorByOptionsToInclude Options to include for this collection to color event data by.\n   */\n  constructor(\n    private colorManager: ColorManager,\n    collectionFolder: PhoenixMenuNode,\n    collectionColor: Color,\n    colorByOptionsToInclude?: ColorByOptionKeys[]\n  ) {\n    this.collectionName = collectionFolder.name;\n    this.colorOptionsFolder = collectionFolder.addChild('Color Options');\n\n    this.colorOptionsFolder.addConfig('color', {\n      label: 'Color',\n      color: collectionColor\n        ? `#${collectionColor?.getHexString()}`\n        : undefined,\n      onChange: (value) =>\n        this.colorManager.collectionColor(this.collectionName, value),\n    });\n\n    this.colorOptionsFolder.addConfig('button', {\n      label: 'Random',\n      onClick: () =>\n        this.colorManager.collectionColorRandom(this.collectionName),\n    });\n\n    // Check which color by options are to be included.\n\n    if (colorByOptionsToInclude?.length > 0) {\n      this.colorByOptions = this.allColorByOptions.filter((colorByOption) =>\n        colorByOptionsToInclude.includes(colorByOption.key)\n      );\n\n      this.initColorByOptions();\n      this.colorByOptions.forEach((colorByOption) =>\n        colorByOption.initialize?.()\n      );\n      this.onlySelectedColorByOption();\n    }\n  }\n\n  /**\n   * Initialize the color options.\n   */\n  private initColorByOptions() {\n    this.selectedColorByOption = this.colorByOptions[0].key;\n\n    // Configurations\n\n    this.colorOptionsFolder.addConfig('select', {\n      label: 'Color by',\n      options: this.colorByOptions.map((colorByOption) => colorByOption.name),\n      onChange: (updatedColorByOption) => {\n        const newColorByOption = this.colorByOptions.find(\n          (colorByOption) => colorByOption.name === updatedColorByOption\n        );\n\n        this.selectedColorByOption = newColorByOption?.key;\n        newColorByOption?.apply?.();\n\n        this.onlySelectedColorByOption();\n      },\n    });\n  }\n\n  // Charge options.\n\n  /**\n   * Initialize charge color options.\n   */\n  private initChargeColorOptions() {\n    // Charge configurations\n    [-1, 0, 1].forEach((chargeValue) => {\n      this.colorOptionsFolder.addConfig('color', {\n        label: `${PrettySymbols.getPrettySymbol('charge')}=${chargeValue}`,\n        group: ColorByOptionKeys.CHARGE,\n        color: this.chargeColors[chargeValue],\n        onChange: (color) => {\n          this.chargeColors[chargeValue] = color;\n\n          if (this.selectedColorByOption === ColorByOptionKeys.CHARGE) {\n            this.colorManager.colorObjectsByProperty(\n              color,\n              this.collectionName,\n              (objectUserData) =>\n                this.shouldColorByCharge(objectUserData, chargeValue)\n            );\n          }\n        },\n      });\n    });\n  }\n\n  /**\n   * Apply charge color options.\n   */\n  private applyChargeColorOptions() {\n    [-1, 0, 1].forEach((chargeValue) => {\n      this.colorManager.colorObjectsByProperty(\n        this.chargeColors[chargeValue],\n        this.collectionName,\n        (objectUserData) =>\n          this.shouldColorByCharge(objectUserData, chargeValue)\n      );\n    });\n  }\n\n  /**\n   * Check if object should be colored based on charge value.\n   * @param objectParams Object parameters associated to the 3D object.\n   * @param chargeValue Value of charge (-1, 0, 1).\n   * @returns Whether the charge is equal to the value.\n   */\n  private shouldColorByCharge(objectParams: any, chargeValue: number) {\n    // For ATLAS data, the charge is calculated from dparams[4] otherwise it exists as an object's userData\n    if (Math.sign(1 / parseInt(objectParams?.dparams?.[4])) === chargeValue) {\n      return true;\n    } else if (objectParams?.charge === chargeValue) {\n      return true;\n    }\n  }\n\n  // Momentum options.\n\n  /**\n   * Initialize momentum color options.\n   */\n  private initMomColorOptions() {\n    // Momentum configurations\n    Object.entries(this.momColors).forEach(([key, momValue]) => {\n      this.colorOptionsFolder.addConfig('slider', {\n        label: PrettySymbols.getPrettySymbol('mom') + ' ' + key,\n        group: ColorByOptionKeys.MOM,\n        min: this.momColors.min.value,\n        max: this.momColors.max.value,\n        value: this.momColors[key].value,\n        step: 10,\n        allowCustomValue: true,\n        onChange: (sliderValue) => {\n          this.momColors[key].value = sliderValue;\n\n          if (this.selectedColorByOption === ColorByOptionKeys.MOM) {\n            this.colorByMomentum('min');\n            this.colorByMomentum('max');\n          }\n        },\n      });\n\n      this.colorOptionsFolder.addConfig('color', {\n        label: PrettySymbols.getPrettySymbol('mom') + ' ' + key + ' color',\n        group: ColorByOptionKeys.MOM,\n        color: momValue.color,\n        onChange: (color) => {\n          this.momColors[key].color = color;\n\n          if (this.selectedColorByOption === ColorByOptionKeys.MOM) {\n            this.colorByMomentum(key);\n          }\n        },\n      });\n    });\n  }\n\n  /**\n   * Apply momentum color options.\n   */\n  private applyMomColorOptions() {\n    this.colorByMomentum('min');\n    this.colorByMomentum('max');\n  }\n\n  /**\n   * Color event data based on the momentum property of each object.\n   * @param minOrMax If the momentum to color objects by is minimum or maximum momentum.\n   * This is to apply the stored momentum colors for minimum and maximum separated at the mid value.\n   */\n  private colorByMomentum(minOrMax: string) {\n    this.colorManager.colorObjectsByProperty(\n      this.momColors[minOrMax].color,\n      this.collectionName,\n      (objectParams) => {\n        const mom = this.getMomentum(objectParams);\n        const mid = (this.momColors.min.value + this.momColors.max.value) / 2;\n\n        if (minOrMax === 'max' && mom > mid && mom  this.momColors.min.value\n        ) {\n          return true;\n        }\n      }\n    );\n  }\n\n  /**\n   * Get momentum from object parameters.\n   * @param objectParams Parameters associated to the 3D object.\n   * @returns THe momentum value.\n   */\n  private getMomentum(objectParams: any) {\n    return objectParams?.dparams?.[4]\n      ? Math.abs(1 / parseFloat(objectParams?.dparams?.[4]))\n      : objectParams?.mom;\n  }\n\n  // Vertex options.\n\n  /**\n   * Apply color by vertex to tracks.\n   */\n  private applyVertexColorOptions() {\n    this.colorManager.colorTracksByVertex(this.collectionName);\n  }\n\n  /**\n   * Show configs of only the currently selected color by option.\n   */\n  private onlySelectedColorByOption() {\n    this.colorOptionsFolder.configs.forEach((config) => {\n      const groupNotSelected =\n        config.group !== undefined &&\n        config.group !== this.selectedColorByOption;\n\n      config.hidden = groupNotSelected ? true : false;\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Configuration.html":{"url":"interfaces/Configuration.html","title":"interface - Configuration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Configuration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extras/configuration.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration of the event display.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowUrlOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            defaultEventFile\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            defaultView\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            elementId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            enableDatGUIMenu\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            eventDataLoader\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            phoenixMenuRoot\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            presetViews\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowUrlOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowUrlOptions:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to allow URL options or not (true by default).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultEventFile\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultEventFile:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default event to load when none given in URL.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultView\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultView:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default view [x,y,z].\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elementId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        elementId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    ID of the wrapper element.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableDatGUIMenu\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableDatGUIMenu:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to enable dat.GUI menu or not.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventDataLoader\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        eventDataLoader:         EventDataLoader\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EventDataLoader\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Event data loader responsible for processing and loading event data.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phoenixMenuRoot\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phoenixMenuRoot:         PhoenixMenuNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PhoenixMenuNode\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Root node of the phoenix menu.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        presetViews\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        presetViews:         PresetView[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PresetView[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Preset views for switching event display camera.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { PresetView } from './preset-view.model';\nimport { EventDataLoader } from '../loaders/event-data-loader';\nimport { PhoenixMenuNode } from '../managers/ui-manager/phoenix-menu/phoenix-menu-node';\n\n/**\n * Configuration of the event display.\n */\nexport interface Configuration {\n  /** Default view [x,y,z]. */\n  defaultView?: number[];\n  /** Preset views for switching event display camera. */\n  presetViews?: PresetView[];\n  /** Event data loader responsible for processing and loading event data. */\n  eventDataLoader?: EventDataLoader;\n  /** Root node of the phoenix menu. */\n  phoenixMenuRoot?: PhoenixMenuNode;\n  /** Whether to enable dat.GUI menu or not. */\n  enableDatGUIMenu?: boolean;\n  /** ID of the wrapper element. */\n  elementId?: string;\n  /** Default event to load when none given in URL. */\n  defaultEventFile?: { eventFile: string; eventType: string };\n  /** Whether to allow URL options or not (true by default). */\n  allowUrlOptions?: boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CoordinateHelper.html":{"url":"classes/CoordinateHelper.html","title":"class - CoordinateHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CoordinateHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/coordinate-helper.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper methods for coordinate conversions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                anglesAreSane\n                            \n                            \n                                    Static\n                                atlasQuaternion\n                            \n                            \n                                    Static\n                                etaPhiToCartesian\n                            \n                            \n                                    Static\n                                etaToTheta\n                            \n                            \n                                    Static\n                                sphericalToCartesian\n                            \n                            \n                                    Static\n                                thetaToEta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        anglesAreSane\n                        \n                    \n                \n            \n            \n                \n                    \n                    anglesAreSane(theta: number, phi: number)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:13\n                \n            \n\n\n            \n                \n                    Checks if angles are within range: -PI \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    theta\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        equatorial angle\n\n                                    \n                                \n                                \n                                    phi\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        azimuthal angle\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        atlasQuaternion\n                        \n                    \n                \n            \n            \n                \n                    \n                    atlasQuaternion()\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:81\n                \n            \n\n\n            \n                \n                    Returns the Quaternion to rotate to ATLAS coords.\nTemporary. We will need to make this configurable per experiment.\n\n\n                    \n                        Returns :     Quaternion\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        etaPhiToCartesian\n                        \n                    \n                \n            \n            \n                \n                    \n                    etaPhiToCartesian(radius: number, eta: number, phi: number)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:65\n                \n            \n\n\n            \n                \n                    Get cartesian from eta/phi parameters.\nApplies the necessary rotations to move from threejs native to experimental.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    radius\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The radius.\n\n                                    \n                                \n                                \n                                    eta\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Pseudorapidity\n\n                                    \n                                \n                                \n                                    phi\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Phi angle.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Vector3\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        etaToTheta\n                        \n                    \n                \n            \n            \n                \n                    \n                    etaToTheta(eta: number)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:25\n                \n            \n\n\n            \n                \n                    Convert pseudorapidity eta to spherical coordinate theta.\nSee definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eta\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Pseudorapidity eta to convert to theta.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        theta in radians\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        sphericalToCartesian\n                        \n                    \n                \n            \n            \n                \n                    \n                    sphericalToCartesian(radius: number, theta: number, phi: number)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:46\n                \n            \n\n\n            \n                \n                    Get cartesian from spherical parameters.\nApplies the necessary rotations to move from threejs to experimental.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    radius\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The radius.\n\n                                    \n                                \n                                \n                                    theta\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Theta angle.\n\n                                    \n                                \n                                \n                                    phi\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Phi angle.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Vector3\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        thetaToEta\n                        \n                    \n                \n            \n            \n                \n                    \n                    thetaToEta(theta: number)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:35\n                \n            \n\n\n            \n                \n                    Convert spherical theta to pseudorapidity eta.\nSee definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    theta\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Angle in radians to convert to pseudorapidity eta.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        pseudorapidity eta\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3, Quaternion } from 'three';\n\n/**\n * Helper methods for coordinate conversions.\n */\nexport class CoordinateHelper {\n  /**\n   * Checks if angles are within range: -PI  phi;\n    const tmp2 = 0  theta;\n    return tmp1 && tmp2;\n  }\n\n  /**\n   * Convert pseudorapidity eta to spherical coordinate theta.\n   * See definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n   * @param eta Pseudorapidity eta to convert to theta.\n   * @returns theta in radians\n   */\n  public static etaToTheta(eta: number): number {\n    return 2 * Math.atan(Math.pow(Math.E, -eta));\n  }\n\n  /**\n   * Convert spherical theta to pseudorapidity eta.\n   * See definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n   * @param theta Angle in radians to convert to pseudorapidity eta.\n   * @returns pseudorapidity eta\n   */\n  public static thetaToEta(theta: number): number {\n    return -Math.log(Math.tan(theta / 2.0));\n  }\n\n  /**\n   * Get cartesian from spherical parameters.\n   * Applies the necessary rotations to move from threejs to experimental.\n   * @param radius The radius.\n   * @param theta Theta angle.\n   * @param phi Phi angle.\n   */\n  public static sphericalToCartesian(\n    radius: number,\n    theta: number,\n    phi: number\n  ): Vector3 {\n    // Threejs uses theta as azimuthal, so need to reverse.\n    const vector = new Vector3();\n    vector.setFromSphericalCoords(radius, theta, phi);\n    vector.applyQuaternion(CoordinateHelper.atlasQuaternion());\n    return vector;\n  }\n\n  /**\n   * Get cartesian from eta/phi parameters.\n   * Applies the necessary rotations to move from threejs native to experimental.\n   * @param radius The radius.\n   * @param eta Pseudorapidity\n   * @param phi Phi angle.\n   */\n  public static etaPhiToCartesian(\n    radius: number,\n    eta: number,\n    phi: number\n  ): Vector3 {\n    const vector = new Vector3();\n    // Threejs uses theta as azimuthal, so need to reverse.\n    vector.setFromSphericalCoords(radius, this.etaToTheta(eta), phi);\n    vector.applyQuaternion(CoordinateHelper.atlasQuaternion());\n    return vector;\n  }\n\n  /**\n   * Returns the Quaternion to rotate to ATLAS coords.\n   * Temporary. We will need to make this configurable per experiment.\n   */\n  public static atlasQuaternion(): Quaternion {\n    // With nothing, we have eta=0 on x, and phi=0 on z\n    // Should be eta=0 on y, and phi=0 on x\n    const v1 = new Vector3(0, 1, 0);\n    const v2 = new Vector3(0, 0, 1);\n    const quaternion = new Quaternion();\n    quaternion.setFromUnitVectors(v1, v2); // This puts eta~infinite on z-axis, eta=0 on  but y-positive is phi=PI (and eta=0 on x)\n    const quaternion2 = new Quaternion();\n    quaternion2.setFromAxisAngle(new Vector3(0, 1, 0), Math.PI / 2.0); // Now have eta = 3.0 on -x, eta =0 on +y, and phi = 0 on +z\n    quaternion.multiply(quaternion2);\n    return quaternion;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Cut.html":{"url":"classes/Cut.html","title":"class - Cut","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Cut\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extras/cut.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Cut for specifying filters on event data attribute.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                defaultMaxValue\n                            \n                            \n                                    Private\n                                defaultMinValue\n                            \n                            \n                                    Public\n                                field\n                            \n                            \n                                    Public\n                                maxValue\n                            \n                            \n                                    Public\n                                minValue\n                            \n                            \n                                    Public\n                                step\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: string, minValue: number, maxValue: number, step: number)\n                    \n                \n                        \n                            \n                                Defined in src/extras/cut.model.ts:8\n                            \n                        \n\n                \n                    \n                            Create the cut to filter an event data attribute.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the event data attribute to be filtered.\n\n                                                        \n                                                \n                                                \n                                                        minValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Minimum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                                \n                                                        maxValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Maximum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                                \n                                                        step\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Step for each value change.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        defaultMaxValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/extras/cut.model.ts:8\n                        \n                    \n\n            \n                \n                    Default maximum allowed value of the event data attribute.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        defaultMinValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/extras/cut.model.ts:6\n                        \n                    \n\n            \n                \n                    Default minimum allowed value of the event data attribute.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        field\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/extras/cut.model.ts:18\n                        \n                    \n\n            \n                \n                    Name of the event data attribute to be filtered.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        maxValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/extras/cut.model.ts:20\n                        \n                    \n\n            \n                \n                    Maximum allowed value of the event data attribute.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        minValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/extras/cut.model.ts:19\n                        \n                    \n\n            \n                \n                    Minimum allowed value of the event data attribute.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        step\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/extras/cut.model.ts:21\n                        \n                    \n\n            \n                \n                    Step for each value change.\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        reset\n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/extras/cut.model.ts:30\n                \n            \n\n\n            \n                \n                    Reset the minimum and maximum value of the cut to default.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Cut {\n  /** Default minimum allowed value of the event data attribute. */\n  private defaultMinValue: number;\n  /** Default maximum allowed value of the event data attribute. */\n  private defaultMaxValue: number;\n\n  /**\n   * Create the cut to filter an event data attribute.\n   * @param field Name of the event data attribute to be filtered.\n   * @param minValue Minimum allowed value of the event data attribute.\n   * @param maxValue Maximum allowed value of the event data attribute.\n   * @param step Step for each value change.\n   */\n  constructor(\n    public field: string,\n    public minValue: number,\n    public maxValue: number,\n    public step: number = 1\n  ) {\n    this.defaultMinValue = minValue;\n    this.defaultMaxValue = maxValue;\n  }\n\n  /**\n   * Reset the minimum and maximum value of the cut to default.\n   */\n  reset() {\n    this.minValue = this.defaultMinValue;\n    this.maxValue = this.defaultMaxValue;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatGUIMenuUI.html":{"url":"classes/DatGUIMenuUI.html","title":"class - DatGUIMenuUI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatGUIMenuUI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/ui-manager/dat-gui-ui.ts\n        \n\n\n            \n                Description\n            \n            \n                A wrapper class for dat.GUI menu to perform UI related operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                eventFolder\n                            \n                            \n                                    Private\n                                geomFolder\n                            \n                            \n                                    Private\n                                gui\n                            \n                            \n                                    Private\n                                guiParameters\n                            \n                            \n                                    Private\n                                labelsFolder\n                            \n                            \n                                    Private\n                                maxPositionX\n                            \n                            \n                                    Private\n                                maxPositionY\n                            \n                            \n                                    Private\n                                maxPositionZ\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addCollection\n                            \n                            \n                                    Public\n                                addEventDataFolder\n                            \n                            \n                                    Public\n                                addEventDataTypeFolder\n                            \n                            \n                                    Public\n                                addGeometry\n                            \n                            \n                                    Public\n                                addGeomFolder\n                            \n                            \n                                    Public\n                                addLabel\n                            \n                            \n                                    Public\n                                addLabelsFolder\n                            \n                            \n                                    Public\n                                clearDatGUI\n                            \n                            \n                                    Public\n                                removeLabel\n                            \n                            \n                                    Private\n                                removeOBJ\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elementId: string, three: ThreeManager)\n                    \n                \n                        \n                            \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:34\n                            \n                        \n\n                \n                    \n                            Create dat.GUI menu UI with different controls related to detector geometry and event data.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        elementId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                ID of the wrapper element.\n\n                                                        \n                                                \n                                                \n                                                        three\n                                                  \n                                                        \n                                                                        ThreeManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The three manager for managing three.js related operations.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        eventFolder\n                        \n                    \n                \n            \n                \n                    \n                        Type :     GUI\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:25\n                        \n                    \n\n            \n                \n                    dat.GUI menu folder containing event related data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        geomFolder\n                        \n                    \n                \n            \n                \n                    \n                        Type :     GUI\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:23\n                        \n                    \n\n            \n                \n                    dat.GUI menu folder containing geometries data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        gui\n                        \n                    \n                \n            \n                \n                    \n                        Type :     GUI\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:12\n                        \n                    \n\n            \n                \n                    dat.GUI menu.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        guiParameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    rotate: undefined,\n    axis: undefined,\n    lowRes: undefined,\n    eventData: undefined,\n    geometries: undefined,\n    labels: undefined,\n  }\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:14\n                        \n                    \n\n            \n                \n                    Options for the dat.GUI menu.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        labelsFolder\n                        \n                    \n                \n            \n                \n                    \n                        Type :     GUI\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:27\n                        \n                    \n\n            \n                \n                    dat.GUI menu folder containing labels.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        maxPositionX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 4000\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:30\n                        \n                    \n\n            \n                \n                    Max changeable position of an object along the x-axis.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        maxPositionY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 4000\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:32\n                        \n                    \n\n            \n                \n                    Max changeable position of an object along the y-axis.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        maxPositionZ\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 4000\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:34\n                        \n                    \n\n            \n                \n                    Max changeable position of an object along the z-axis.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addCollection\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(typeFolder: GUI, collectionName: string, cuts?: Cut[], collectionColor?: Color)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:241\n                \n            \n\n\n            \n                \n                    Add collection folder and its configurable options to the event data type (tracks, hits etc.) folder.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    typeFolder\n                                    \n                                            GUI\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        dat.GUI menu folder of an event data type.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to be added in the type of event data (tracks, hits etc.).\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Cuts to the collection of event data that are to be made configurable to filter event data.\n\n                                    \n                                \n                                \n                                    collectionColor\n                                    \n                                            Color\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Color of the collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addEventDataFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    addEventDataFolder()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:187\n                \n            \n\n\n            \n                \n                    Functions for event data toggles like show/hide and depthTest.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addEventDataTypeFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    addEventDataTypeFolder(typeName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:220\n                \n            \n\n\n            \n                \n                    Add folder for event data type like tracks or hits to the dat.GUI menu.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the type of event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     GUI\n\n                    \n                    \n                        dat.GUI menu's folder for event data type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addGeometry\n                        \n                    \n                \n            \n            \n                \n                    \n                    addGeometry(name: string, color: any, initiallyVisible: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:98\n                \n            \n\n\n            \n                \n                    Adds geometry to the dat.GUI menu's geometry folder and sets up its configurable options.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Name of the geometry.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Color of the geometry.\n\n                                    \n                                \n                                \n                                    initiallyVisible\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        Whether the geometry is initially visible or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addGeomFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    addGeomFolder()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:67\n                \n            \n\n\n            \n                \n                    Add geometry (detector geometry) folder to the dat.GUI menu.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addLabel\n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabel(labelId: string, removeLabel?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:365\n                \n            \n\n\n            \n                \n                    Add configuration UI for label.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    labelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Unique ID of the label.\n\n                                    \n                                \n                                \n                                    removeLabel\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to remove label from the scene.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addLabelsFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabelsFolder(configFunctions: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:313\n                \n            \n\n\n            \n                \n                    Add labels folder to dat.GUI menu.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configFunctions\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Functions to attach to the labels folder configuration.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clearDatGUI\n                        \n                    \n                \n            \n            \n                \n                    \n                    clearDatGUI()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:56\n                \n            \n\n\n            \n                \n                    Clear the dat.GUI menu.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeLabel\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLabel(labelId: string, labelItemFolder?: GUI)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:402\n                \n            \n\n\n            \n                \n                    Remove label from UI, scene and event data loader if it exists.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    labelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A unique label ID string.\n\n                                    \n                                \n                                \n                                    labelItemFolder\n                                    \n                                            GUI\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        dat.GUI folder of the label if any.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        removeOBJ\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeOBJ(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:174\n                \n            \n\n\n            \n                \n                    Remove object from the dat.GUI menu.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the object to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     () => void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { GUI } from 'dat.gui';\nimport { Color } from 'three';\nimport { ThreeManager } from '../three-manager';\nimport { SceneManager } from '../three-manager/scene-manager';\nimport { Cut } from '../../extras/cut.model';\n\n/**\n * A wrapper class for dat.GUI menu to perform UI related operations.\n */\nexport class DatGUIMenuUI {\n  /** dat.GUI menu. */\n  private gui: GUI;\n  /** Options for the dat.GUI menu. */\n  private guiParameters = {\n    rotate: undefined,\n    axis: undefined,\n    lowRes: undefined,\n    eventData: undefined,\n    geometries: undefined,\n    labels: undefined,\n  };\n  /** dat.GUI menu folder containing geometries data. */\n  private geomFolder: GUI;\n  /** dat.GUI menu folder containing event related data. */\n  private eventFolder: GUI;\n  /** dat.GUI menu folder containing labels. */\n  private labelsFolder: GUI;\n\n  /** Max changeable position of an object along the x-axis. */\n  private maxPositionX = 4000;\n  /** Max changeable position of an object along the y-axis. */\n  private maxPositionY = 4000;\n  /** Max changeable position of an object along the z-axis. */\n  private maxPositionZ = 4000;\n\n  /**\n   * Create dat.GUI menu UI with different controls related to detector geometry and event data.\n   * @param elementId ID of the wrapper element.\n   * @param three The three manager for managing three.js related operations.\n   */\n  constructor(elementId: string = 'eventDisplay', private three: ThreeManager) {\n    this.gui = new GUI();\n    this.gui.domElement.id = 'gui';\n    this.gui.domElement.style.cssText =\n      'position: absolute; right: 0; top: 2rem; z-index: 11;';\n    const canvas = document.getElementById(elementId) ?? document.body;\n    canvas.appendChild(this.gui.domElement);\n    this.geomFolder = null;\n    this.eventFolder = null;\n    this.labelsFolder = null;\n  }\n\n  /**\n   * Clear the dat.GUI menu.\n   */\n  public clearDatGUI() {\n    const gui = document.getElementById('gui');\n    if (gui != null) {\n      gui.remove();\n    }\n    this.geomFolder = null;\n  }\n\n  /**\n   * Add geometry (detector geometry) folder to the dat.GUI menu.\n   */\n  public addGeomFolder() {\n    if (this.geomFolder === null) {\n      this.geomFolder = this.gui.addFolder(SceneManager.GEOMETRIES_ID);\n    }\n    this.guiParameters.geometries = { show: true, wireframe: false };\n    // A boolean toggle for showing/hiding the geometries is added to the 'Geometry' folder.\n    const showGeometriesMenu = this.geomFolder\n      .add(this.guiParameters.geometries, 'show')\n      .name('Show')\n      .listen();\n    showGeometriesMenu.onChange((value) => {\n      this.three\n        .getSceneManager()\n        .objectVisibility(SceneManager.GEOMETRIES_ID, value);\n    });\n    // A boolean toggle for enabling/disabling the geometries' wireframing.\n    const wireframeGeometriesMenu = this.geomFolder\n      .add(this.guiParameters.geometries, 'wireframe')\n      .name('Wireframe')\n      .listen();\n    wireframeGeometriesMenu.onChange((value) => {\n      this.three.getSceneManager().wireframeGeometries(value);\n    });\n  }\n\n  /**\n   * Adds geometry to the dat.GUI menu's geometry folder and sets up its configurable options.\n   * @param name Name of the geometry.\n   * @param color Color of the geometry.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public addGeometry(\n    name: string,\n    color: any,\n    initiallyVisible: boolean = true\n  ) {\n    // A new folder for the object is added to the 'Geometry' folder\n    this.guiParameters[name] = {\n      show: initiallyVisible,\n      color: color ?? '#000000',\n      x: 0,\n      y: 0,\n      z: 0,\n      detectorOpacity: 1.0,\n      remove: this.removeOBJ(name),\n      scale: 1,\n    };\n\n    const objFolder = this.geomFolder.addFolder(name);\n    // A color picker is added to the object's folder\n    const colorMenu = objFolder\n      .addColor(this.guiParameters[name], 'color')\n      .name('Color');\n    colorMenu.onChange((value) =>\n      this.three.getSceneManager().changeObjectColor(name, value)\n    );\n\n    const opacity = objFolder\n      .add(this.guiParameters[name], 'detectorOpacity', 0.0, 1.0)\n      .name('Opacity');\n    opacity.onFinishChange((newValue) =>\n      this.three.getSceneManager().setGeometryOpacity(name, newValue)\n    );\n\n    // A boolean toggle for showing/hiding the object is added to its folder\n    const showMenu = objFolder\n      .add(this.guiParameters[name], 'show')\n      .name('Show')\n      .listen();\n    showMenu.onChange((value) =>\n      this.three.getSceneManager().objectVisibility(name, value)\n    );\n    // Scale slider\n    const scaleMenu = objFolder\n      .add(this.guiParameters[name], 'scale', 0, 1000)\n      .name('Scale');\n    scaleMenu.onChange((value) => {\n      this.three.getSceneManager().scaleObject(name, value);\n    });\n    // Controls for positioning.\n    // const position = this.three.getObjectPosition(name);\n    objFolder\n      .add(this.guiParameters[name], 'x', -this.maxPositionX, this.maxPositionX)\n      .name('X')\n      .onChange((value) =>\n        this.three.getSceneManager().getObjectPosition(name).setX(value)\n      );\n    objFolder\n      .add(this.guiParameters[name], 'y', -this.maxPositionY, this.maxPositionY)\n      .name('Y')\n      .onChange((value) =>\n        this.three.getSceneManager().getObjectPosition(name).setY(value)\n      );\n    objFolder\n      .add(this.guiParameters[name], 'z', -this.maxPositionZ, this.maxPositionZ)\n      .name('Z')\n      .onChange((value) =>\n        this.three.getSceneManager().getObjectPosition(name).setZ(value)\n      );\n    // Controls for deleting the obj\n    objFolder.add(this.guiParameters[name], 'remove').name('Remove');\n  }\n\n  /**\n   * Remove object from the dat.GUI menu.\n   * @param name Name of the object to be removed.\n   */\n  private removeOBJ(name: string) {\n    return () => {\n      const folder = this.geomFolder.__folders[name];\n      if (folder) {\n        this.geomFolder.removeFolder(folder);\n      }\n      this.three.getSceneManager().removeGeometry(name);\n    };\n  }\n\n  /**\n   * Functions for event data toggles like show/hide and depthTest.\n   */\n  public addEventDataFolder() {\n    // If there is already an event data folder it is deleted and we create a new one.\n    if (this.eventFolder !== null) {\n      this.gui.removeFolder(this.eventFolder);\n    }\n\n    // A new folder for the Event Data is added to the GUI.\n    this.eventFolder = this.gui.addFolder('Event Data');\n    this.guiParameters.eventData = { show: true, depthTest: true };\n    // A boolean toggle for showing/hiding the event data is added to the 'Event Data' folder.\n    const menu = this.eventFolder\n      .add(this.guiParameters.eventData, 'show')\n      .name('Show')\n      .listen();\n    menu.onChange((value) =>\n      this.three\n        .getSceneManager()\n        .objectVisibility(SceneManager.EVENT_DATA_ID, value)\n    );\n\n    // A boolean toggle for enabling/disabling depthTest of event data.\n    const depthTestMenu = this.eventFolder\n      .add(this.guiParameters.eventData, 'depthTest')\n      .name('Depth Test')\n      .listen();\n    depthTestMenu.onChange((value) => this.three.eventDataDepthTest(value));\n  }\n\n  /**\n   * Add folder for event data type like tracks or hits to the dat.GUI menu.\n   * @param typeName Name of the type of event data.\n   * @returns dat.GUI menu's folder for event data type.\n   */\n  public addEventDataTypeFolder(typeName: string): GUI {\n    const typeFolder = this.eventFolder.addFolder(typeName);\n    this.guiParameters.eventData[typeName] = true;\n    const menu = typeFolder\n      .add(this.guiParameters.eventData, typeName)\n      .name('Show')\n      .listen();\n    menu.onChange((value) =>\n      this.three.getSceneManager().objectVisibility(typeName, value)\n    );\n\n    return typeFolder;\n  }\n\n  /**\n   * Add collection folder and its configurable options to the event data type (tracks, hits etc.) folder.\n   * @param typeFolder dat.GUI menu folder of an event data type.\n   * @param collectionName Name of the collection to be added in the type of event data (tracks, hits etc.).\n   * @param cuts Cuts to the collection of event data that are to be made configurable to filter event data.\n   * @param collectionColor Color of the collection.\n   */\n  public addCollection(\n    typeFolder: GUI,\n    collectionName: string,\n    cuts?: Cut[],\n    collectionColor?: Color\n  ) {\n    if (typeFolder) {\n      // A new folder for the collection is added to the 'Event Data' folder\n      this.guiParameters[collectionName] = {\n        show: true,\n        color: 0x000000,\n        randomColor: () =>\n          this.three.getColorManager().collectionColorRandom(collectionName),\n        resetCut: () =>\n          this.three\n            .getSceneManager()\n            .groupVisibility(collectionName, true, SceneManager.EVENT_DATA_ID),\n      };\n      const collFolder = typeFolder.addFolder(collectionName);\n\n      // A boolean toggle for showing/hiding the collection is added to its folder\n      const showMenu = collFolder\n        .add(this.guiParameters[collectionName], 'show')\n        .name('Show')\n        .listen();\n      showMenu.onChange((value) =>\n        this.three\n          .getSceneManager()\n          .objectVisibility(collectionName, value, SceneManager.EVENT_DATA_ID)\n      );\n\n      // A color picker is added to the collection's folder\n      const colorMenu = collFolder\n        .addColor(this.guiParameters[collectionName], 'color')\n        .name('Color');\n      colorMenu.onChange((value) =>\n        this.three.getColorManager().collectionColor(collectionName, value)\n      );\n      colorMenu.setValue(collectionColor?.getHex());\n      collFolder\n        .add(this.guiParameters[collectionName], 'randomColor')\n        .name('Random Color');\n\n      // Cuts menu\n      if (cuts) {\n        const cutsFolder = collFolder.addFolder('Cuts');\n        cutsFolder\n          .add(this.guiParameters[collectionName], 'resetCut')\n          .name('Reset cuts');\n\n        for (const cut of cuts) {\n          const minCut = cutsFolder\n            .add(cut, 'minValue', cut.minValue, cut.maxValue)\n            .name('min ' + cut.field);\n          minCut.onChange((value) => {\n            this.three.getSceneManager().collectionFilter(collectionName, cuts);\n          });\n          const maxCut = cutsFolder\n            .add(cut, 'maxValue', cut.minValue, cut.maxValue)\n            .name('max ' + cut.field);\n          maxCut.onChange((value) => {\n            this.three.getSceneManager().collectionFilter(collectionName, cuts);\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Add labels folder to dat.GUI menu.\n   * @param configFunctions Functions to attach to the labels folder configuration.\n   */\n  public addLabelsFolder(configFunctions: any) {\n    if (this.labelsFolder !== null) {\n      return;\n    }\n\n    const {\n      onToggle,\n      onSizeChange,\n      onColorChange,\n      onSaveLabels,\n      onLoadLabels,\n    } = configFunctions;\n\n    this.labelsFolder = this.gui.addFolder(SceneManager.LABELS_ID);\n\n    this.guiParameters.labels = {\n      show: true,\n      size: 1,\n      color: '#a8a8a8',\n      saveLabels: onSaveLabels,\n      loadLabels: onLoadLabels,\n    };\n\n    const showMenu = this.labelsFolder\n      .add(this.guiParameters.labels, 'show')\n      .name('Show')\n      .listen();\n    showMenu.onChange(onToggle);\n\n    const labelsSizeMenu = this.labelsFolder\n      .add(this.guiParameters.labels, 'size', 0, 10)\n      .name('Size');\n    labelsSizeMenu.onFinishChange(onSizeChange);\n\n    const colorMenu = this.labelsFolder\n      .addColor(this.guiParameters.labels, 'color')\n      .name('Color');\n    colorMenu.onChange(onColorChange);\n\n    this.labelsFolder\n      .add(this.guiParameters.labels, 'saveLabels')\n      .name('Save Labels');\n    this.labelsFolder\n      .add(this.guiParameters.labels, 'loadLabels')\n      .name('Load Labels');\n  }\n\n  /**\n   * Add configuration UI for label.\n   * @param labelId Unique ID of the label.\n   * @param removeLabel Function to remove label from the scene.\n   */\n  public addLabel(labelId: string, removeLabel?: () => void) {\n    this.guiParameters[labelId] = {\n      show: true,\n      color: 0xafafaf,\n    };\n\n    const labelItem = this.labelsFolder.addFolder(labelId);\n\n    const visibilityToggle = labelItem\n      .add(this.guiParameters[labelId], 'show')\n      .name('Show')\n      .listen();\n    visibilityToggle.onChange((value) => {\n      this.three\n        .getSceneManager()\n        .objectVisibility(labelId, value, SceneManager.LABELS_ID);\n    });\n\n    const colorMenu = labelItem\n      .addColor(this.guiParameters[labelId], 'color')\n      .name('Çolor');\n    colorMenu.onChange((color) =>\n      this.three.getSceneManager().changeObjectColor(labelId, color)\n    );\n\n    this.guiParameters[labelId]['removeLabel'] = () => {\n      removeLabel?.();\n      this.removeLabel(labelId, labelItem);\n    };\n    labelItem.add(this.guiParameters[labelId], 'removeLabel').name('Remove');\n  }\n\n  /**\n   * Remove label from UI, scene and event data loader if it exists.\n   * @param labelId A unique label ID string.\n   * @param labelItemFolder dat.GUI folder of the label if any.\n   */\n  public removeLabel(labelId: string, labelItemFolder?: GUI) {\n    if (!labelItemFolder) {\n      labelItemFolder = this.labelsFolder.__folders[labelId];\n    }\n\n    if (labelItemFolder) {\n      this.labelsFolder.removeFolder(labelItemFolder);\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EffectsManager.html":{"url":"classes/EffectsManager.html","title":"class - EffectsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EffectsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/effects-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Manager for managing three.js event display effects like outline pass and unreal bloom.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                antialiasing\n                            \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Public\n                                composer\n                            \n                            \n                                    Private\n                                defaultRenderPass\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Private\n                                scene\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addOutlinePassForSelection\n                            \n                            \n                                    Private\n                                antialiasRender\n                            \n                            \n                                    Private\n                                effectsRender\n                            \n                            \n                                    Public\n                                removePass\n                            \n                            \n                                    Public\n                                setAntialiasing\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(camera: Camera, scene: Scene, renderer: WebGLRenderer)\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/effects-manager.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for the effects manager which manages effects and three.js passes.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        camera\n                                                  \n                                                        \n                                                                    Camera\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The camera inside the scene.\n\n                                                        \n                                                \n                                                \n                                                        scene\n                                                  \n                                                        \n                                                                    Scene\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The default scene used for event display.\n\n                                                        \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    WebGLRenderer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The main renderer used by the event display.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        antialiasing\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:20\n                        \n                    \n\n            \n                \n                    Whether antialiasing is enabled or disabled.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        camera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:14\n                        \n                    \n\n            \n                \n                    The camera inside the scene.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        composer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EffectComposer\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:12\n                        \n                    \n\n            \n                \n                    Effect composer for effect passes.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        defaultRenderPass\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RenderPass\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:18\n                        \n                    \n\n            \n                \n                    Render pass for rendering the default scene.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        render\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:23\n                        \n                    \n\n            \n                \n                    Render function with (normal render) or without antialias (effects render).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        scene\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Scene\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:16\n                        \n                    \n\n            \n                \n                    The default scene used for event display.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addOutlinePassForSelection\n                        \n                    \n                \n            \n            \n                \n                    \n                    addOutlinePassForSelection()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/effects-manager.ts:69\n                \n            \n\n\n            \n                \n                    Initialize the outline pass for highlighting hovered over event display elements.\n\n\n                    \n                    \n                    \n                        Returns :     OutlinePass\n\n                    \n                    \n                        OutlinePass for highlighting hovered over event display elements.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        antialiasRender\n                        \n                    \n                \n            \n            \n                \n                    \n                    antialiasRender(scene: Scene, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/effects-manager.ts:61\n                \n            \n\n\n            \n                \n                    Render for antialias without the effects composer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The default scene used for event display.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        effectsRender\n                        \n                    \n                \n            \n            \n                \n                    \n                    effectsRender(scene: Scene, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/effects-manager.ts:48\n                \n            \n\n\n            \n                \n                    Render the effects composer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The default scene used for event display.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removePass\n                        \n                    \n                \n            \n            \n                \n                    \n                    removePass(pass: Pass)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/effects-manager.ts:88\n                \n            \n\n\n            \n                \n                    Remove a pass from the effect composer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pass\n                                    \n                                            Pass\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Effect pass to be removed from the effect composer.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setAntialiasing\n                        \n                    \n                \n            \n            \n                \n                    \n                    setAntialiasing(antialias: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/effects-manager.ts:97\n                \n            \n\n\n            \n                \n                    Set the antialiasing of renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    antialias\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether antialiasing is to enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { Camera, Scene, WebGLRenderer, Vector2, NormalBlending } from 'three';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass';\nimport { Pass } from 'three/examples/jsm/postprocessing/Pass';\n\n/**\n * Manager for managing three.js event display effects like outline pass and unreal bloom.\n */\nexport class EffectsManager {\n  /** Effect composer for effect passes. */\n  public composer: EffectComposer;\n  /** The camera inside the scene. */\n  private camera: Camera;\n  /** The default scene used for event display. */\n  private scene: Scene;\n  /** Render pass for rendering the default scene. */\n  private defaultRenderPass: RenderPass;\n  /** Whether antialiasing is enabled or disabled. */\n  public antialiasing: boolean = true;\n\n  /** Render function with (normal render) or without antialias (effects render). */\n  public render: (scene: Scene, camera: Camera) => void;\n\n  /**\n   * Constructor for the effects manager which manages effects and three.js passes.\n   * @param camera The camera inside the scene.\n   * @param scene The default scene used for event display.\n   * @param renderer The main renderer used by the event display.\n   */\n  constructor(camera: Camera, scene: Scene, renderer: WebGLRenderer) {\n    this.composer = new EffectComposer(renderer);\n    this.camera = camera;\n    this.scene = scene;\n\n    this.defaultRenderPass = new RenderPass(this.scene, this.camera);\n    this.composer.addPass(this.defaultRenderPass);\n\n    // Set the starting render function\n    this.render = this.antialiasing ? this.antialiasRender : this.effectsRender;\n  }\n\n  /**\n   * Render the effects composer.\n   * @param scene The default scene used for event display.\n   * @param camera The camera inside the scene.\n   */\n  private effectsRender(scene: Scene, camera: Camera) {\n    if (this.composer) {\n      this.defaultRenderPass.camera = camera;\n      this.defaultRenderPass.scene = scene;\n      this.composer.render();\n    }\n  }\n\n  /**\n   * Render for antialias without the effects composer.\n   * @param scene The default scene used for event display.\n   * @param camera The camera inside the scene.\n   */\n  private antialiasRender(scene: Scene, camera: Camera) {\n    this.composer.renderer.render(scene, camera);\n  }\n\n  /**\n   * Initialize the outline pass for highlighting hovered over event display elements.\n   * @returns OutlinePass for highlighting hovered over event display elements.\n   */\n  public addOutlinePassForSelection(): OutlinePass {\n    const outlinePass = new OutlinePass(\n      new Vector2(window.innerWidth, window.innerHeight),\n      this.scene,\n      this.camera\n    );\n    outlinePass.overlayMaterial.blending = NormalBlending;\n    outlinePass.visibleEdgeColor.set(0xffff66);\n    outlinePass.visibleEdgeColor.set(0xdf5330);\n\n    this.composer.addPass(outlinePass);\n\n    return outlinePass;\n  }\n\n  /**\n   * Remove a pass from the effect composer.\n   * @param pass Effect pass to be removed from the effect composer.\n   */\n  public removePass(pass: Pass) {\n    const passIndex = this.composer.passes.indexOf(pass);\n    this.composer.passes.splice(passIndex, 1);\n  }\n\n  /**\n   * Set the antialiasing of renderer.\n   * @param antialias Whether antialiasing is to enabled or disabled.\n   */\n  public setAntialiasing(antialias: boolean) {\n    this.antialiasing = antialias;\n    this.render = this.antialiasing ? this.antialiasRender : this.effectsRender;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EventDataLoader.html":{"url":"interfaces/EventDataLoader.html","title":"interface - EventDataLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EventDataLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/event-data-loader.ts\n        \n\n\n            \n                Description\n            \n            \n                Event data loader for implementing different event data loaders.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        addLabelToEventObject\n                                    \n                                \n                                \n                                    \n                                        buildEventData\n                                    \n                                \n                                \n                                    \n                                        getCollection\n                                    \n                                \n                                \n                                    \n                                        getCollections\n                                    \n                                \n                                \n                                    \n                                        getEventMetadata\n                                    \n                                \n                                \n                                    \n                                        getEventsList\n                                    \n                                \n                                \n                                    \n                                        getLabelsObject\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addLabelToEventObject\n                        \n                    \n                \n            \n            \n                \naddLabelToEventObject(label: string, collection: string, indexInCollection: number)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:57\n                \n            \n\n\n            \n                \n                    Add label of event object to the labels object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to add to the event object.\n\n                                    \n                                \n                                \n                                    collection\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Collection the event object is a part of.\n\n                                    \n                                \n                                \n                                    indexInCollection\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event object's index in collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A unique label ID string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildEventData\n                        \n                    \n                \n            \n            \n                \nbuildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:17\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Logger for logging event display data..\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCollection\n                        \n                    \n                \n            \n            \n                \ngetCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:42\n                \n            \n\n\n            \n                \n                    Get all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Key of the collection that will be retrieved.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Object containing all physics objects from the desired collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCollections\n                        \n                    \n                \n            \n            \n                \ngetCollections()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:35\n                \n            \n\n\n            \n                \n                    Get the different collections for the current stored event.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of strings, each representing a collection of the event displayed.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEventMetadata\n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:48\n                \n            \n\n\n            \n                \n                    Get metadata associated to the displayed event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the displayed event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEventsList\n                        \n                    \n                \n            \n            \n                \ngetEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:29\n                \n            \n\n\n            \n                \n                    Takes an object containing multiple events and returns the keys of these events.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object that contains the different events.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of keys of the different events.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLabelsObject\n                        \n                    \n                \n            \n            \n                \ngetLabelsObject()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:67\n                \n            \n\n\n            \n                \n                    Get the object containing labels.\n\n\n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        The labels object.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ThreeManager } from '../managers/three-manager';\nimport { UIManager } from '../managers/ui-manager';\nimport { InfoLogger } from '../helpers/info-logger';\n\n/**\n * Event data loader for implementing different event data loaders.\n */\nexport interface EventDataLoader {\n  /**\n   * Takes an object that represents ONE event and takes care of adding\n   * the different objects to the graphic library and the UI controls.\n   * @param eventData Object representing the event.\n   * @param graphicsLibrary Manager containing functionality to draw the 3D objects.\n   * @param ui Manager for showing menus and controls to manipulate the geometries.\n   * @param infoLogger Logger for logging event display data..\n   */\n  buildEventData(\n    eventData: any,\n    graphicsLibrary: ThreeManager,\n    ui: UIManager,\n    infoLogger: InfoLogger\n  ): void;\n\n  /**\n   * Takes an object containing multiple events and returns the keys of these events.\n   * @param eventsData Object that contains the different events.\n   * @returns List of keys of the different events.\n   */\n  getEventsList(eventsData: any): string[];\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  getCollections(): string[];\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  getCollection(collectionName: string): any;\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  getEventMetadata(): any[];\n\n  /**\n   * Add label of event object to the labels object.\n   * @param label Label to add to the event object.\n   * @param collection Collection the event object is a part of.\n   * @param indexInCollection Event object's index in collection.\n   * @returns A unique label ID string.\n   */\n  addLabelToEventObject(\n    label: string,\n    collection: string,\n    indexInCollection: number\n  ): string;\n\n  /**\n   * Get the object containing labels.\n   * @returns The labels object.\n   */\n  getLabelsObject(): { [key: string]: any };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExportManager.html":{"url":"classes/ExportManager.html","title":"class - ExportManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExportManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/export-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Manager for managing event display's export related functionality.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                exportPhoenixScene\n                            \n                            \n                                    Public\n                                exportSceneToOBJ\n                            \n                            \n                                    Private\n                                saveEventDataConfiguration\n                            \n                            \n                                    Private\n                                saveGeometriesConfiguration\n                            \n                            \n                                    Private\n                                saveSceneConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        exportPhoenixScene\n                        \n                    \n                \n            \n            \n                \n                    \n                    exportPhoenixScene(scene: Scene, eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/export-manager.ts:27\n                \n            \n\n\n            \n                \n                    Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene to be exported.\n\n                                    \n                                \n                                \n                                    eventData\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded event data.\n\n                                    \n                                \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        exportSceneToOBJ\n                        \n                    \n                \n            \n            \n                \n                    \n                    exportSceneToOBJ(scene: Scene)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/export-manager.ts:14\n                \n            \n\n\n            \n                \n                    Exports scene to OBJ file format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene to be exported.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        saveEventDataConfiguration\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveEventDataConfiguration(eventData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/export-manager.ts:66\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        saveGeometriesConfiguration\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveGeometriesConfiguration(geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/export-manager.ts:85\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded geometries.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        saveSceneConfig\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveSceneConfig(eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/export-manager.ts:52\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded scene including event data and geometries.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Curently loaded event data.\n\n                                    \n                                \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { eventData: {}; geometries: {}; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { OBJExporter } from 'three/examples/jsm/exporters/OBJExporter';\nimport { Scene, Object3D } from 'three';\nimport { GLTFExporter } from 'three/examples/jsm/exporters/GLTFExporter';\nimport { saveFile } from '../../helpers/file';\n\n/**\n * Manager for managing event display's export related functionality.\n */\nexport class ExportManager {\n  /**\n   * Exports scene to OBJ file format.\n   * @param scene The scene to be exported.\n   */\n  public exportSceneToOBJ(scene: Scene) {\n    // Instantiate a exporter\n    const exporter = new OBJExporter();\n    const result = exporter.parse(scene);\n    saveFile(result, 'phoenix-obj.obj', 'text/plain');\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   * @param scene The scene to be exported.\n   * @param eventData Currently loaded event data.\n   * @param geometries Currently loaded geometries.\n   */\n  public exportPhoenixScene(\n    scene: Scene,\n    eventData: Object3D,\n    geometries: Object3D\n  ) {\n    const exporter = new GLTFExporter();\n\n    const sceneConfig = this.saveSceneConfig(eventData, geometries);\n    // Parse the input and generate the glTF output\n    exporter.parse(\n      scene,\n      (result) => {\n        const jsonResult = { sceneConfiguration: sceneConfig, scene: result };\n        const output = JSON.stringify(jsonResult, null, 2);\n        saveFile(output, 'phoenix-scene.phnx', 'text/plain');\n      },\n      null\n    );\n  }\n\n  /**\n   * Save the configuration of the currently loaded scene including event data and geometries.\n   * @param eventData Curently loaded event data.\n   * @param geometries Currently loaded geometries.\n   */\n  private saveSceneConfig(eventData: Object3D, geometries: Object3D) {\n    const eventDataConfig = this.saveEventDataConfiguration(eventData);\n    const geometriesConfig = this.saveGeometriesConfiguration(geometries);\n    const sceneConfig = {\n      eventData: eventDataConfig,\n      geometries: geometriesConfig,\n    };\n    return sceneConfig;\n  }\n\n  /**\n   * Save the configuration of the currently loaded event data.\n   * @param eventData Currently loaded event data.\n   */\n  private saveEventDataConfiguration(eventData: any) {\n    const eventDataConfig = {};\n    for (const objectType of eventData.children) {\n      if (objectType.name) {\n        eventDataConfig[objectType.name] = [];\n        for (const collection of objectType.children) {\n          if (collection.name) {\n            eventDataConfig[objectType.name].push(collection.name);\n          }\n        }\n      }\n    }\n    return eventDataConfig;\n  }\n\n  /**\n   * Save the configuration of the currently loaded geometries.\n   * @param geometries Currently loaded geometries.\n   */\n  private saveGeometriesConfiguration(geometries: Object3D) {\n    const geometriesConfig = [];\n    geometries.children.forEach((object) => {\n      if (object.name !== 'EventData') {\n        geometriesConfig.push(object.name);\n      }\n    });\n    return geometriesConfig;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Field.html":{"url":"classes/Field.html","title":"class - Field","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n\n            \n                Description\n            \n            \n                 Default class to define the field.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(field: Vector3)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:192\n                \n            \n\n\n            \n                \n                    Returns field as a Vector3 in Tesla.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Vector3\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(half_h))\n        .add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir\n        .clone()\n        .add(k1.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir\n        .clone()\n        .add(k2.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(h))\n        .add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir\n        .clone()\n        .add(k3.clone().multiplyScalar(h))\n        .cross(B_last)\n        .multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return (\n        h *\n        (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z))\n      );\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    const fh: number = state.stepSize;\n    const fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(\n      k1\n        .clone()\n        .add(k2)\n        .add(k3)\n        .multiplyScalar(fh2 / 6)\n    );\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(\n      k1\n        .clone()\n        .add(k2.clone().multiplyScalar(2))\n        .add(k3.clone().multiplyScalar(2))\n        .add(k4)\n        .multiplyScalar(fh / 6)\n    );\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3,\n    startDir: Vector3,\n    p: number,\n    q: number,\n    mss: number = -1,\n    plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3; dir: Vector3 }[] {\n    const rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    const result: { pos: Vector3; dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InfoLogger.html":{"url":"classes/InfoLogger.html","title":"class - InfoLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InfoLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/info-logger.ts\n        \n\n\n            \n                Description\n            \n            \n                Logger for logging event display data\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                infoLoggerList\n                            \n                            \n                                    Private\n                                maxEntries\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                getInfoLoggerList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        infoLoggerList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/helpers/info-logger.ts:6\n                        \n                    \n\n            \n                \n                    List that contains all the info logs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        maxEntries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                    \n                        \n                                Defined in src/helpers/info-logger.ts:8\n                        \n                    \n\n            \n                \n                    Max entries to be shown inside the information panel\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(data: string, label?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/info-logger.ts:15\n                \n            \n\n\n            \n                \n                    Add an entry to the info logger\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Data of the info log\n\n                                    \n                                \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Label of the info log\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInfoLoggerList\n                        \n                    \n                \n            \n            \n                \ngetInfoLoggerList()\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/info-logger.ts:26\n                \n            \n\n\n            \n                \n                    Get the info logger list being used by the info logger service\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        The info logger list containing log data\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class InfoLogger {\n  /** List that contains all the info logs */\n  private infoLoggerList: any[] = [];\n  /** Max entries to be shown inside the information panel */\n  private maxEntries: number = 10;\n\n  /**\n   * Add an entry to the info logger\n   * @param data Data of the info log\n   * @param label Label of the info log\n   */\n  add(data: string, label?: string) {\n    if (this.infoLoggerList.length > this.maxEntries) {\n      this.infoLoggerList.pop();\n    }\n    this.infoLoggerList.unshift(label ? label + ': ' + data : data);\n  }\n\n  /**\n   * Get the info logger list being used by the info logger service\n   * @returns The info logger list containing log data\n   */\n  getInfoLoggerList(): any[] {\n    return this.infoLoggerList;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LHCbLoader.html":{"url":"classes/LHCbLoader.html","title":"class - LHCbLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LHCbLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/lhcb-loader.ts\n        \n\n\n            \n                Description\n            \n            \n                PhoenixLoader for processing and loading an LHCb event.\n\n            \n\n            \n                Extends\n            \n            \n                        PhoenixLoader\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                data\n                            \n                            \n                                    Protected\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Protected\n                                labelsObject\n                            \n                            \n                                    Protected\n                                loadingManager\n                            \n                            \n                                    Protected\n                                stateManager\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getEventData\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                process\n                            \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Public\n                                addLabelToEventObject\n                            \n                            \n                                    Protected\n                                addObjectType\n                            \n                            \n                                    Public\n                                addScaleOptions\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                    Protected\n                                getCompound\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Public\n                                getLabelsObject\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                    Protected\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/loaders/lhcb-loader.ts:8\n                            \n                        \n\n                \n                    \n                            Constructor for the LHCb loader.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/lhcb-loader.ts:8\n                        \n                    \n\n            \n                \n                    Event data to be processed.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        eventData\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                Inherited from         PhoenixLoader\n\n                            \n                        \n                    \n                        \n                                Defined in         PhoenixLoader:23\n\n                        \n                    \n\n            \n                \n                    Event data processed by the loader.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        graphicsLibrary\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ThreeManager\n\n                    \n                \n                        \n                            \n                                Inherited from         PhoenixLoader\n\n                            \n                        \n                    \n                        \n                                Defined in         PhoenixLoader:19\n\n                        \n                    \n\n            \n                \n                    ThreeService to perform three.js related functions.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        labelsObject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                        \n                            \n                                Inherited from         PhoenixLoader\n\n                            \n                        \n                    \n                        \n                                Defined in         PhoenixLoader:29\n\n                        \n                    \n\n            \n                \n                    Object containing event object labels.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        loadingManager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LoadingManager\n\n                    \n                \n                        \n                            \n                                Inherited from         PhoenixLoader\n\n                            \n                        \n                    \n                        \n                                Defined in         PhoenixLoader:25\n\n                        \n                    \n\n            \n                \n                    Loading manager for loadable resources\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        stateManager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StateManager\n\n                    \n                \n                        \n                            \n                                Inherited from         PhoenixLoader\n\n                            \n                        \n                    \n                        \n                                Defined in         PhoenixLoader:27\n\n                        \n                    \n\n            \n                \n                    Loading manager for loadable resources\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        ui\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UIManager\n\n                    \n                \n                        \n                            \n                                Inherited from         PhoenixLoader\n\n                            \n                        \n                    \n                        \n                                Defined in         PhoenixLoader:21\n\n                        \n                    \n\n            \n                \n                    UIService to perform UI related functions.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getEventData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventData()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/lhcb-loader.ts:31\n                \n            \n\n\n            \n                \n                    Process and get the event data.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The processed event data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEventMetadata\n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:62\n\n                \n            \n\n\n            \n                \n                    Get LHCb specific metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        process\n                        \n                    \n                \n            \n            \n                \n                    \n                    process(data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/lhcb-loader.ts:22\n                \n            \n\n\n            \n                \n                    Set the event data for the loader.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event data as JSON.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        addCollection\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group, concatonateObjs: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:439\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                                \n                                    concatonateObjs\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If true, don't process objects individually, but process as a group (e.g. for point hits).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addLabelToEventObject\n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabelToEventObject(label: string, collection: string, indexInCollection: number)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:625\n\n                \n            \n\n\n            \n                \n                    Add label of event object to the labels object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to be saved.\n\n                                    \n                                \n                                \n                                    collection\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Collection the event object is a part of.\n\n                                    \n                                \n                                \n                                    indexInCollection\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event object's index in collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A unique label ID string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        addObjectType\n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, concatonateObjs: boolean, cuts?: Cut[], extendEventDataTypeUI?: (typeFolder?: GUI,typeFolderPM?: PhoenixMenuNode) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:388\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    concatonateObjs\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        If true, don't process objects individually, but process as a group (e.g. for point hits). Default is false.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                                \n                                    extendEventDataTypeUI\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        A callback to add more options to event data type UI folder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addScaleOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    addScaleOptions(configKey: string, configLabel: string, scaleFunction: (value: number) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:662\n\n                \n            \n\n\n            \n                \n                    Get function to add options to scale event object type by.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Key of the scale configuration option (for dat.GUI menu).\n\n                                    \n                                \n                                \n                                    configLabel\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label of the scale configuration option.\n\n                                    \n                                \n                                \n                                    scaleFunction\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to scale the objects by.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     (typeFolder: any, typeFolderPM: any) => void\n\n                    \n                    \n                        Function which adds scale options to Phoenix menu and dat.GUI menu.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        buildEventData\n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:47\n\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphics library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCollection\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:123\n\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCollections\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:99\n\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        getCompound\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCompound(params: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:491\n\n                \n            \n\n\n            \n                \n                    Process the compound object (e.g. Muon, Electron, Photon) from the given parameters and get it as a group.\nFIXME. This is currently here and not in PhoenixObjects because we need to handle linked objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getEventsList\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:83\n\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getLabelsObject\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLabelsObject()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:651\n\n                \n            \n\n\n            \n                \n                    Get the object containing labels.\n\n\n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        The labels object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getObjectTypeCollections\n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:473\n\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        loadObjectTypes\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:144\n\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PhoenixLoader } from './phoenix-loader';\n\n/**\n * PhoenixLoader for processing and loading an LHCb event.\n */\nexport class LHCbLoader extends PhoenixLoader {\n  /** Event data to be processed. */\n  private data: any;\n\n  /**\n   * Constructor for the LHCb loader.\n   */\n  constructor() {\n    super();\n    this.data = {};\n  }\n\n  /**\n   * Set the event data for the loader.\n   * @param data Event data as JSON.\n   */\n  public process(data: any) {\n    console.log('Processing event data');\n    this.data = data;\n  }\n\n  /**\n   * Process and get the event data.\n   * @returns The processed event data.\n   */\n  public getEventData(): any {\n    const eventData = {\n      eventNumber: this.data.eventNumber,\n      runNumber: this.data.runNumber,\n      Hits: {},\n      Tracks: {},\n    };\n\n    const part_list = [];\n    const pdata_list = this.data.PARTICLES;\n    if (pdata_list) {\n      for (let j = 0; j \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadingManager.html":{"url":"classes/LoadingManager.html","title":"class - LoadingManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadingManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/loading-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Phoenix loading manager for managing loadable items.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                instance\n                            \n                            \n                                    Public\n                                loaded\n                            \n                            \n                                    Private\n                                onLoadCallbacks\n                            \n                            \n                                    Private\n                                onProgressCallbacks\n                            \n                            \n                                    Private\n                                progressItems\n                            \n                            \n                                    Public\n                                toLoad\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addLoadableItem\n                            \n                            \n                                    Public\n                                addLoadListener\n                            \n                            \n                                    Public\n                                addLoadListenerWithCheck\n                            \n                            \n                                    Public\n                                addProgressListener\n                            \n                            \n                                    Public\n                                itemLoaded\n                            \n                            \n                                    Public\n                                onProgress\n                            \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/loading-manager.ts:19\n                            \n                        \n\n                \n                    \n                            Create the singleton Phoenix loading manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        instance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LoadingManager\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:6\n                        \n                    \n\n            \n                \n                    Instance of the loading manager\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        loaded\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:11\n                        \n                    \n\n            \n                \n                    Items loaded\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onLoadCallbacks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     (function)[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:14\n                        \n                    \n\n            \n                \n                    Callbacks to call on load.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onProgressCallbacks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     (function)[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:16\n                        \n                    \n\n            \n                \n                    Callbacks to call on progress.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        progressItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:19\n                        \n                    \n\n            \n                \n                    Progress for each named item.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        toLoad\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:9\n                        \n                    \n\n            \n                \n                    Items to load.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addLoadableItem\n                        \n                    \n                \n            \n            \n                \n                    \n                    addLoadableItem(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:36\n                \n            \n\n\n            \n                \n                    Add count for a loadable item.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        ID of the item to be loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addLoadListener\n                        \n                    \n                \n            \n            \n                \n                    \n                    addLoadListener(callback: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:83\n                \n            \n\n\n            \n                \n                    Add a listener for when all items have loaded.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call when all items have loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addLoadListenerWithCheck\n                        \n                    \n                \n            \n            \n                \n                    \n                    addLoadListenerWithCheck(callback: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:92\n                \n            \n\n\n            \n                \n                    Add a listener for when all items have loaded and check if there\nare any items to load when the listener is added.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call when all items have loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addProgressListener\n                        \n                    \n                \n            \n            \n                \n                    \n                    addProgressListener(callback: (progress: number) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:104\n                \n            \n\n\n            \n                \n                    Add a listener for when an item progress.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call when there is progress.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        itemLoaded\n                        \n                    \n                \n            \n            \n                \n                    \n                    itemLoaded(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:45\n                \n            \n\n\n            \n                \n                    Add count for an item is loaded.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        ID of the item loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        onProgress\n                        \n                    \n                \n            \n            \n                \n                    \n                    onProgress(id: string, progress: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:63\n                \n            \n\n\n            \n                \n                    When an item loading progresses.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the item with the progress.\n\n                                    \n                                \n                                \n                                    progress\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Progress of the item.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        reset\n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:111\n                \n            \n\n\n            \n                \n                    Reset the loading manager and its items.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class LoadingManager {\n  /** Instance of the loading manager */\n  private static instance: LoadingManager;\n\n  /** Items to load. */\n  public toLoad: string[] = [];\n  /** Items loaded */\n  public loaded: string[] = [];\n\n  /** Callbacks to call on load. */\n  private onLoadCallbacks: (() => void)[] = [];\n  /** Callbacks to call on progress. */\n  private onProgressCallbacks: ((progress: number) => void)[] = [];\n\n  /** Progress for each named item. */\n  private progressItems: { [key: string]: number } = {};\n\n  /**\n   * Create the singleton Phoenix loading manager.\n   * @returns The loading manager instance.\n   */\n  constructor() {\n    if (LoadingManager.instance === undefined) {\n      LoadingManager.instance = this;\n    }\n    return LoadingManager.instance;\n  }\n\n  /**\n   * Add count for a loadable item.\n   * @param id ID of the item to be loaded.\n   */\n  public addLoadableItem(id: string = '') {\n    this.toLoad.push(id);\n    this.progressItems[id] = 0;\n  }\n\n  /**\n   * Add count for an item is loaded.\n   * @param id ID of the item loaded.\n   */\n  public itemLoaded(id: string = '') {\n    this.loaded.push(id);\n    this.onProgress(id, 100);\n\n    if (\n      this.toLoad.length === this.loaded.length &&\n      this.toLoad.sort().join(',') === this.loaded.sort().join(',')\n    ) {\n      this.onLoadCallbacks.forEach((callback) => callback());\n      this.reset();\n    }\n  }\n\n  /**\n   * When an item loading progresses.\n   * @param id ID of the item with the progress.\n   * @param progress Progress of the item.\n   */\n  public onProgress(id: string, progress: number) {\n    this.progressItems[id] = progress;\n\n    const totalProgress = Object.values(this.progressItems).reduce(\n      (acc, val) => acc + val,\n      0\n    );\n    const totalItems = Object.keys(this.progressItems).length;\n\n    const averageProgress = totalProgress / totalItems;\n\n    for (const callback of this.onProgressCallbacks) {\n      callback(averageProgress);\n    }\n  }\n\n  /**\n   * Add a listener for when all items have loaded.\n   * @param callback Callback to call when all items have loaded.\n   */\n  public addLoadListener(callback: () => void) {\n    this.onLoadCallbacks.push(callback);\n  }\n\n  /**\n   * Add a listener for when all items have loaded and check if there\n   * are any items to load when the listener is added.\n   * @param callback Callback to call when all items have loaded.\n   */\n  public addLoadListenerWithCheck(callback: () => void) {\n    if (this.toLoad.length > 0 && this.toLoad.length !== this.loaded.length) {\n      this.onLoadCallbacks.push(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Add a listener for when an item progress.\n   * @param callback Callback to call when there is progress.\n   */\n  public addProgressListener(callback: (progress: number) => void) {\n    this.onProgressCallbacks.push(callback);\n  }\n\n  /**\n   * Reset the loading manager and its items.\n   */\n  public reset() {\n    this.toLoad = [];\n    this.loaded = [];\n    this.onLoadCallbacks = [];\n    this.onProgressCallbacks = [];\n    this.progressItems = {};\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixMenuNode.html":{"url":"classes/PhoenixMenuNode.html","title":"class - PhoenixMenuNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixMenuNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts\n        \n\n\n            \n                Description\n            \n            \n                A single node of phoenix menu item.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                children\n                            \n                            \n                                childrenActive\n                            \n                            \n                                    Private\n                                childrenToggleState\n                            \n                            \n                                configActive\n                            \n                            \n                                configs\n                            \n                            \n                                icon\n                            \n                            \n                                name\n                            \n                            \n                                nodeLevel\n                            \n                            \n                                onToggle\n                            \n                            \n                                    Private\n                                parent\n                            \n                            \n                                toggleState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addChild\n                            \n                            \n                                addConfig\n                            \n                            \n                                applyConfigState\n                            \n                            \n                                findInTree\n                            \n                            \n                                findInTreeOrCreate\n                            \n                            \n                                getNodeState\n                            \n                            \n                                loadStateFromJSON\n                            \n                            \n                                remove\n                            \n                            \n                                removeChild\n                            \n                            \n                                toggleSelfAndDescendants\n                            \n                            \n                                truncate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, icon?: string, onToggle?: (value?: boolean) => void, children?: PhoenixMenuNode[], configs?: any[], parent?: PhoenixMenuNode)\n                    \n                \n                        \n                            \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:32\n                            \n                        \n\n                \n                    \n                            Create the phoenix menu node.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the node.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Icon of the node.\n\n                                                        \n                                                \n                                                \n                                                        onToggle\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Function on toggling the node.\n\n                                                        \n                                                \n                                                \n                                                        children\n                                                  \n                                                        \n                                                                        PhoenixMenuNode[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Children of the node.\n\n                                                        \n                                                \n                                                \n                                                        configs\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Configuration options in the node.\n\n                                                        \n                                                \n                                                \n                                                        parent\n                                                  \n                                                        \n                                                                        PhoenixMenuNode\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Parent of the node.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:16\n                        \n                    \n\n            \n                \n                    Children of the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        childrenActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:30\n                        \n                    \n\n            \n                \n                    If the node children are active or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        childrenToggleState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:27\n                        \n                    \n\n            \n                \n                    Previous toggle state of child nodes. This is so that the\nprevious state of child can be restored if we toggle the parent back on.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:32\n                        \n                    \n\n            \n                \n                    If the node configuration options are active or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuConfig[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:18\n                        \n                    \n\n            \n                \n                    Configuration options in the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:10\n                        \n                    \n\n            \n                \n                    Icon of the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:8\n                        \n                    \n\n            \n                \n                    Name of the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodeLevel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:20\n                        \n                    \n\n            \n                \n                    Level of the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onToggle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:12\n                        \n                    \n\n            \n                \n                    Function on toggling the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:22\n                        \n                    \n\n            \n                \n                    Parent of the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:14\n                        \n                    \n\n            \n                \n                    If the node toggle state is true or false.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addChild\n                        \n                    \n                \n            \n            \n                \naddChild(name: string, onToggle?: (value?: boolean) => void, icon?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:66\n                \n            \n\n\n            \n                \n                    Add a child to the phoenix menu item.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the child.\n\n                                    \n                                \n                                \n                                    onToggle\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function on toggling the child.\n\n                                    \n                                \n                                \n                                    icon\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Icon of the child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The child node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addConfig\n                        \n                    \n                \n            \n            \n                \naddConfig(type: T, options: Omit)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:115\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Add a config to the phoenix menu item.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Type of configuration.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                            Omit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Options for the config.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The current node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        applyConfigState\n                        \n                    \n                \n            \n            \n                \napplyConfigState(config: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:149\n                \n            \n\n\n            \n                \n                    Apply the current values of config by calling the change function.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Config whose values are to be applied.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findInTree\n                        \n                    \n                \n            \n            \n                \nfindInTree(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:240\n                \n            \n\n\n            \n                \n                    Find a node in the tree by name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the node to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The found node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findInTreeOrCreate\n                        \n                    \n                \n            \n            \n                \nfindInTreeOrCreate(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:258\n                \n            \n\n\n            \n                \n                    Find a node in the tree by name or create one.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the node to find or create.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The found or created node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeState\n                        \n                    \n                \n            \n            \n                \ngetNodeState()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:173\n                \n            \n\n\n            \n                \n                    Get current state of the node as an object.\n\n\n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        State of the node as an object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadStateFromJSON\n                        \n                    \n                \n            \n            \n                \nloadStateFromJSON(json: string | literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:194\n                \n            \n\n\n            \n                \n                    Load the state of the phoenix menu node from JSON.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    json\n                                    \n                                            string | literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        JSON containing the phoenix menu node state.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:92\n                \n            \n\n\n            \n                \n                    Remove the current node.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeChild\n                        \n                    \n                \n            \n            \n                \nremoveChild(child: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:83\n                \n            \n\n\n            \n                \n                    Remove a child node.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The child node to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The current node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleSelfAndDescendants\n                        \n                    \n                \n            \n            \n                \ntoggleSelfAndDescendants(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:129\n                \n            \n\n\n            \n                \n                    Function for toggling the current and all child nodes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the node itself and descendants are to be made true or false.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        truncate\n                        \n                    \n                \n            \n            \n                \ntruncate()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:105\n                \n            \n\n\n            \n                \n                    Remove all children.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PhoenixMenuConfig, PhoenixMenuConfigs } from './config-types';\n\n/**\n * A single node of phoenix menu item.\n */\nexport class PhoenixMenuNode {\n  /** Name of the node. */\n  name: string;\n  /** Icon of the node. */\n  icon: string;\n  /** Function on toggling the node. */\n  onToggle: (value: boolean) => void;\n  /** If the node toggle state is true or false. */\n  toggleState: boolean = true;\n  /** Children of the node. */\n  children: PhoenixMenuNode[] = [];\n  /** Configuration options in the node. */\n  configs: PhoenixMenuConfig[] = [];\n  /** Level of the node. */\n  nodeLevel: number = 0;\n  /** Parent of the node. */\n  private parent: PhoenixMenuNode;\n  /**\n   * Previous toggle state of child nodes. This is so that the\n   * previous state of child can be restored if we toggle the parent back on.\n   * */\n  private childrenToggleState = {};\n\n  /** If the node children are active or not. */\n  childrenActive: boolean = false;\n  /** If the node configuration options are active or not. */\n  configActive: boolean = false;\n\n  /**\n   * Create the phoenix menu node.\n   * @param name Name of the node.\n   * @param icon Icon of the node.\n   * @param onToggle Function on toggling the node.\n   * @param children Children of the node.\n   * @param configs Configuration options in the node.\n   * @param parent Parent of the node.\n   */\n  constructor(\n    name: string,\n    icon?: string,\n    onToggle?: (value: boolean) => void,\n    children?: PhoenixMenuNode[],\n    configs?: any[],\n    parent?: PhoenixMenuNode\n  ) {\n    this.name = name;\n    this.icon = icon;\n    this.onToggle = onToggle;\n    if (children) this.children = children;\n    if (configs) this.configs = configs;\n    if (parent) this.parent = parent;\n  }\n\n  /**\n   * Add a child to the phoenix menu item.\n   * @param name Name of the child.\n   * @param onToggle Function on toggling the child.\n   * @param icon Icon of the child.\n   * @returns The child node.\n   */\n  addChild(\n    name: string,\n    onToggle?: (value: boolean) => void,\n    icon?: string\n  ): PhoenixMenuNode {\n    const child = new PhoenixMenuNode(name, icon, onToggle);\n    child.parent = this;\n    child.nodeLevel = this.nodeLevel + 1;\n    this.children.push(child);\n    return child;\n  }\n\n  /**\n   * Remove a child node.\n   * @param child The child node to be removed.\n   * @returns The current node.\n   */\n  removeChild(child: PhoenixMenuNode): PhoenixMenuNode {\n    const childIndex = this.children.indexOf(child);\n    this.children.splice(childIndex, 1);\n    return this;\n  }\n\n  /**\n   * Remove the current node.\n   */\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    } else {\n      console.error(\n        'Cannot delete root node of phoenix menu. Set it to undefined/null instead.'\n      );\n    }\n  }\n\n  /**\n   * Remove all children.\n   */\n  truncate() {\n    this.children = [];\n  }\n\n  /**\n   * Add a config to the phoenix menu item.\n   * @param type Type of configuration.\n   * @param options Options for the config.\n   * @returns The current node.\n   */\n  addConfig(\n    type: T,\n    options: Omit\n  ): PhoenixMenuNode {\n    const configsLength = this.configs.push({ type, ...options });\n    // Apply the values of config\n    this.applyConfigState(this.configs[configsLength - 1]);\n    return this;\n  }\n\n  /**\n   * Function for toggling the current and all child nodes.\n   * @param value If the node itself and descendants are to be made true or false.\n   */\n  toggleSelfAndDescendants(value: boolean) {\n    this.onToggle?.(value);\n    this.toggleState = value;\n    for (const child of this.children) {\n      if (!value) {\n        // Save previous toggle state of children and toggle them false\n        this.childrenToggleState[child.name] = child.toggleState;\n        child.toggleSelfAndDescendants(value);\n      } else {\n        // Restore previous toggle state of children\n        child.toggleState = this.childrenToggleState[child.name];\n        child.toggleSelfAndDescendants(child.toggleState);\n      }\n    }\n  }\n\n  /**\n   * Apply the current values of config by calling the change function.\n   * @param config Config whose values are to be applied.\n   */\n  applyConfigState(config: any) {\n    // Apply configs of different config types - manual\n    if (config.type === 'checkbox' && config?.['isChecked']) {\n      config.onChange?.(config?.['isChecked']);\n    } else if (config.type === 'color' && config?.['color'] && !config.group) {\n      // Ignore color by options with `!config.group`, otherwise the collection color is overridden\n      config.onChange?.(config?.['color']);\n    } else if (config.type === 'slider' && config?.['value']) {\n      config.onChange?.(config?.['value']);\n    } else if (\n      config.type === 'rangeSlider' &&\n      config?.['value'] !== undefined\n    ) {\n      config.onChange?.({\n        value: config?.['value'],\n        highValue: config?.['highValue'],\n      });\n    }\n  }\n\n  /**\n   * Get current state of the node as an object.\n   * @returns State of the node as an object.\n   */\n  getNodeState(): { [key: string]: any } {\n    const phoenixNodeJSON: { [key: string]: any } = {};\n\n    phoenixNodeJSON['name'] = this.name;\n    phoenixNodeJSON['nodeLevel'] = this.nodeLevel;\n    phoenixNodeJSON['toggleState'] = this.toggleState;\n    phoenixNodeJSON['childrenActive'] = this.childrenActive;\n    phoenixNodeJSON['configs'] = this.configs;\n    phoenixNodeJSON['children'] = [];\n\n    for (const child of this.children) {\n      phoenixNodeJSON['children'].push(child.getNodeState());\n    }\n\n    return phoenixNodeJSON;\n  }\n\n  /**\n   * Load the state of the phoenix menu node from JSON.\n   * @param json JSON containing the phoenix menu node state.\n   */\n  loadStateFromJSON(json: string | { [key: string]: any }) {\n    let jsonObject: any;\n    if (typeof json === 'string') {\n      jsonObject = JSON.parse(json);\n    } else {\n      jsonObject = json;\n    }\n\n    this.childrenActive = jsonObject['childrenActive'];\n    this.toggleState = jsonObject['toggleState'];\n    this.onToggle?.(this.toggleState);\n\n    for (const configState of jsonObject['configs']) {\n      const nodeConfig = this.configs.find(\n        (nodeConfig) =>\n          nodeConfig.type === configState['type'] &&\n          nodeConfig.label === configState['label']\n      );\n\n      if (nodeConfig) {\n        for (const prop in configState) {\n          nodeConfig[prop] = configState[prop];\n        }\n\n        this.applyConfigState(nodeConfig);\n      }\n    }\n\n    for (const childState of jsonObject['children']) {\n      const nodeChild = this.children.filter(\n        (nodeChild) =>\n          nodeChild.name === childState.name &&\n          nodeChild.nodeLevel === childState.nodeLevel\n      )[0];\n\n      if (nodeChild) {\n        nodeChild.loadStateFromJSON(childState);\n      }\n    }\n  }\n\n  /**\n   * Find a node in the tree by name.\n   * @param name Name of the node to find.\n   * @returns The found node.\n   */\n  findInTree(name: string): PhoenixMenuNode {\n    if (this.name === name) {\n      return this;\n    } else {\n      for (const child of this.children) {\n        const nodeFound = child.findInTree(name);\n        if (nodeFound) {\n          return nodeFound;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find a node in the tree by name or create one.\n   * @param name Name of the node to find or create.\n   * @returns The found or created node.\n   */\n  findInTreeOrCreate(name: string): PhoenixMenuNode {\n    let prevNode: PhoenixMenuNode = this;\n    name.split('>').forEach((nodeName) => {\n      nodeName = nodeName.trim();\n      const nodeFound = prevNode.findInTree(nodeName);\n      // const nodeFound = prevNode.children.find(child => child.name === nodeName);\n\n      prevNode = nodeFound ? nodeFound : prevNode.addChild(nodeName, () => {});\n    });\n    return prevNode;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixMenuUI.html":{"url":"classes/PhoenixMenuUI.html","title":"class - PhoenixMenuUI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixMenuUI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts\n        \n\n\n            \n                Description\n            \n            \n                A wrapper class for Phoenix menu to perform UI related operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                colorOptions\n                            \n                            \n                                    Private\n                                eventFolder\n                            \n                            \n                                    Private\n                                eventFolderState\n                            \n                            \n                                    Private\n                                geomFolder\n                            \n                            \n                                    Private\n                                labelsFolder\n                            \n                            \n                                    Private\n                                phoenixMenu\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addCollection\n                            \n                            \n                                    Public\n                                addEventDataFolder\n                            \n                            \n                                    Public\n                                addEventDataTypeFolder\n                            \n                            \n                                    Public\n                                addGeometry\n                            \n                            \n                                    Public\n                                addGeomFolder\n                            \n                            \n                                    Public\n                                addLabel\n                            \n                            \n                                    Public\n                                addLabelsFolder\n                            \n                            \n                                    Public\n                                clearPhoenixMenu\n                            \n                            \n                                    Public\n                                loadEventFolderState\n                            \n                            \n                                    Public\n                                removeLabelNode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(phoenixMenu: PhoenixMenuNode, three: ThreeManager)\n                    \n                \n                        \n                            \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:24\n                            \n                        \n\n                \n                    \n                            Create Phoenix menu UI with different controls related to detector geometry and event data.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        phoenixMenu\n                                                  \n                                                        \n                                                                        PhoenixMenuNode\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        three\n                                                  \n                                                        \n                                                                        ThreeManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The three manager for managing three.js related operations.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        colorOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ColorOptions\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:24\n                        \n                    \n\n            \n                \n                    Color options with functions to color event data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        eventFolder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:18\n                        \n                    \n\n            \n                \n                    Phoenix menu node containing event related data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        eventFolderState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:20\n                        \n                    \n\n            \n                \n                    State of the Phoenix menu node containing event related data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        geomFolder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:16\n                        \n                    \n\n            \n                \n                    Phoenix menu node containing geometries data\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        labelsFolder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:22\n                        \n                    \n\n            \n                \n                    Phoenix menu node containing labels.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        phoenixMenu\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:14\n                        \n                    \n\n            \n                \n                    Root node of the phoenix menu.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addCollection\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(typeFolder: PhoenixMenuNode, collectionName: string, cuts?: Cut[], collectionColor?: Color)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:201\n                \n            \n\n\n            \n                \n                    Add collection node and its configurable options to the event data type (tracks, hits etc.) node.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    typeFolder\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Phoenix menu node of an event data type.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to be added in the type of event data (tracks, hits etc.).\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Cuts to the collection of event data that are to be made configurable to filter event data.\n\n                                    \n                                \n                                \n                                    collectionColor\n                                    \n                                            Color\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Default color of the collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addEventDataFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    addEventDataFolder()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:159\n                \n            \n\n\n            \n                \n                    Functions for event data toggles like show/hide and depthTest.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addEventDataTypeFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    addEventDataTypeFolder(typeName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:188\n                \n            \n\n\n            \n                \n                    Add folder for event data type like tracks or hits to the Phoenix menu.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the type of event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        Phoenix menu's folder for event data type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addGeometry\n                        \n                    \n                \n            \n            \n                \n                    \n                    addGeometry(name: string, color: any, menuNodeName?: string, initiallyVisible: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:112\n                \n            \n\n\n            \n                \n                    Adds geometry to the dat.GUI menu's geometry folder and sets up its configurable options.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Name of the geometry.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Color of the geometry.\n\n                                    \n                                \n                                \n                                    menuNodeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Name of the node in Phoenix menu to add the geometry to.\n\n                                    \n                                \n                                \n                                    initiallyVisible\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        Whether the geometry is initially visible or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addGeomFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    addGeomFolder()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:58\n                \n            \n\n\n            \n                \n                    Add geometry (detector geometry) folder to the Phoenix menu.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addLabel\n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabel(labelId: string, removeLabel?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:349\n                \n            \n\n\n            \n                \n                    Add configuration UI for label.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    labelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Unique ID of the label.\n\n                                    \n                                \n                                \n                                    removeLabel\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to remove label from the scene.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addLabelsFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabelsFolder(configFunctions: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:299\n                \n            \n\n\n            \n                \n                    Add labels folder to Phoenix menu.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configFunctions\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Functions to attach to the labels folder configuration.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clearPhoenixMenu\n                        \n                    \n                \n            \n            \n                \n                    \n                    clearPhoenixMenu()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:45\n                \n            \n\n\n            \n                \n                    Clear the Phoenix menu.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        loadEventFolderState\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadEventFolderState()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:394\n                \n            \n\n\n            \n                \n                    Load previous state of the event data folder in Phoenix menu if any.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeLabelNode\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLabelNode(labelId: string, labelNode?: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:381\n                \n            \n\n\n            \n                \n                    Remove label from UI, scene and event data loader if it exists.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    labelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A unique label ID string.\n\n                                    \n                                \n                                \n                                    labelNode\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Phoenix menu node of the label if any.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Color } from 'three';\nimport { SceneManager } from '../../three-manager/scene-manager';\nimport { ThreeManager } from '../../three-manager';\nimport { PhoenixMenuNode } from './phoenix-menu-node';\nimport { Cut } from '../../../extras/cut.model';\nimport { PrettySymbols } from '../../../helpers/pretty-symbols';\nimport { ColorByOptionKeys, ColorOptions } from '../color-options';\n\n/**\n * A wrapper class for Phoenix menu to perform UI related operations.\n */\nexport class PhoenixMenuUI {\n  /** Root node of the phoenix menu. */\n  private phoenixMenu: PhoenixMenuNode;\n  /** Phoenix menu node containing geometries data */\n  private geomFolder: PhoenixMenuNode;\n  /** Phoenix menu node containing event related data. */\n  private eventFolder: PhoenixMenuNode;\n  /** State of the Phoenix menu node containing event related data. */\n  private eventFolderState: any;\n  /** Phoenix menu node containing labels. */\n  private labelsFolder: PhoenixMenuNode;\n  /** Color options with functions to color event data. */\n  private colorOptions: ColorOptions;\n\n  /**\n   * Create Phoenix menu UI with different controls related to detector geometry and event data.\n   * @param three The three manager for managing three.js related operations.\n   */\n  constructor(phoenixMenu: PhoenixMenuNode, private three: ThreeManager) {\n    if (this.phoenixMenu) {\n      this.phoenixMenu.truncate();\n      this.phoenixMenu = undefined;\n    }\n    this.phoenixMenu = phoenixMenu;\n\n    this.geomFolder = null;\n    this.eventFolder = null;\n    this.labelsFolder = null;\n  }\n\n  /**\n   * Clear the Phoenix menu.\n   */\n  public clearPhoenixMenu() {\n    if (this.phoenixMenu) {\n      this.phoenixMenu.truncate();\n      this.phoenixMenu = undefined;\n    }\n    this.geomFolder = null;\n    this.eventFolder = null;\n    this.labelsFolder = null;\n  }\n\n  /**\n   * Add geometry (detector geometry) folder to the Phoenix menu.\n   */\n  public addGeomFolder() {\n    // Phoenix menu\n    if (this.geomFolder === null) {\n      this.geomFolder = this.phoenixMenu.addChild(\n        'Detector',\n        (value) => {\n          this.three\n            .getSceneManager()\n            .groupVisibility(SceneManager.GEOMETRIES_ID, value);\n        },\n        'perspective'\n      );\n    }\n    this.geomFolder\n      .addConfig('checkbox', {\n        label: 'Wireframe',\n        isChecked: false,\n        onChange: (value) => {\n          this.three.getSceneManager().wireframeGeometries(value);\n        },\n      })\n      .addConfig('slider', {\n        label: 'Opacity',\n        min: 0,\n        max: 1,\n        step: 0.01,\n        allowCustomValue: true,\n        onChange: (value) => {\n          this.three\n            .getSceneManager()\n            .setGeometryOpacity(SceneManager.GEOMETRIES_ID, value);\n        },\n      })\n      .addConfig('slider', {\n        label: 'Scale',\n        min: 0,\n        max: 20,\n        step: 0.01,\n        allowCustomValue: true,\n        onChange: (scale) => {\n          this.three\n            .getSceneManager()\n            .scaleObject(SceneManager.GEOMETRIES_ID, scale);\n        },\n      });\n  }\n\n  /**\n   * Adds geometry to the dat.GUI menu's geometry folder and sets up its configurable options.\n   * @param name Name of the geometry.\n   * @param color Color of the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public addGeometry(\n    name: string,\n    color: any,\n    menuNodeName?: string,\n    initiallyVisible: boolean = true\n  ) {\n    let parentNode: PhoenixMenuNode = this.geomFolder;\n    if (menuNodeName) {\n      parentNode = this.geomFolder.findInTreeOrCreate(menuNodeName);\n    }\n\n    const objFolder = parentNode.addChild(name, (value: boolean) => {\n      this.three.getSceneManager().objectVisibility(name, value);\n    });\n\n    objFolder.toggleState = initiallyVisible;\n\n    objFolder\n      .addConfig('color', {\n        label: 'Color',\n        color: color ? `#${new Color(color).getHexString()}` : undefined,\n        onChange: (value) => {\n          this.three.getSceneManager().changeObjectColor(name, value);\n        },\n      })\n      .addConfig('slider', {\n        label: 'Opacity',\n        min: 0,\n        max: 1,\n        step: 0.05,\n        allowCustomValue: true,\n        onChange: (opacity) => {\n          this.three.getSceneManager().setGeometryOpacity(name, opacity);\n        },\n      })\n      .addConfig('button', {\n        label: 'Remove',\n        onClick: () => {\n          objFolder.remove();\n          this.three.getSceneManager().removeGeometry(name);\n        },\n      });\n  }\n\n  /**\n   * Functions for event data toggles like show/hide and depthTest.\n   */\n  public addEventDataFolder() {\n    // Phoenix menu\n    if (this.eventFolder !== null) {\n      this.eventFolderState = this.eventFolder.getNodeState();\n      this.eventFolder.remove();\n    }\n    this.eventFolder = this.phoenixMenu.addChild(\n      'Event Data',\n      (value: boolean) => {\n        this.three\n          .getSceneManager()\n          .groupVisibility(SceneManager.EVENT_DATA_ID, value);\n      },\n      'event-folder'\n    );\n    this.eventFolder.addConfig('checkbox', {\n      label: 'Depth Test',\n      isChecked: true,\n      onChange: (value) => {\n        this.three.eventDataDepthTest(value);\n      },\n    });\n  }\n\n  /**\n   * Add folder for event data type like tracks or hits to the Phoenix menu.\n   * @param typeName Name of the type of event data.\n   * @returns Phoenix menu's folder for event data type.\n   */\n  public addEventDataTypeFolder(typeName: string): PhoenixMenuNode {\n    return this.eventFolder.addChild(typeName, (value: boolean) => {\n      this.three.getSceneManager().objectVisibility(typeName, value);\n    });\n  }\n\n  /**\n   * Add collection node and its configurable options to the event data type (tracks, hits etc.) node.\n   * @param typeFolder Phoenix menu node of an event data type.\n   * @param collectionName Name of the collection to be added in the type of event data (tracks, hits etc.).\n   * @param cuts Cuts to the collection of event data that are to be made configurable to filter event data.\n   * @param collectionColor Default color of the collection.\n   */\n  public addCollection(\n    typeFolder: PhoenixMenuNode,\n    collectionName: string,\n    cuts?: Cut[],\n    collectionColor?: Color\n  ) {\n    const collectionNode = typeFolder.addChild(\n      collectionName,\n      (value: boolean) => {\n        this.three\n          .getSceneManager()\n          .objectVisibility(collectionName, value, SceneManager.EVENT_DATA_ID);\n      }\n    );\n\n    const drawOptionsNode = collectionNode.addChild('Draw Options');\n\n    drawOptionsNode.addConfig('slider', {\n      label: 'Opacity',\n      min: 0.1,\n      step: 0.1,\n      max: 1,\n      onChange: (value) => {\n        this.three.getSceneManager().setGeometryOpacity(collectionName, value);\n      },\n    });\n\n    drawOptionsNode.addConfig('checkbox', {\n      label: 'Wireframe',\n      onChange: (value) =>\n        this.three.getSceneManager().wireframeObjects(collectionName, value),\n    });\n\n    if (cuts && cuts.length > 0) {\n      const cutsOptionsNode = collectionNode.addChild('Cut Options');\n\n      cutsOptionsNode\n        .addConfig('label', {\n          label: 'Cuts',\n        })\n        .addConfig('button', {\n          label: 'Reset cuts',\n          onClick: () => {\n            this.three\n              .getSceneManager()\n              .groupVisibility(\n                collectionName,\n                true,\n                SceneManager.EVENT_DATA_ID\n              );\n\n            for (const cut of cuts) {\n              cut.reset();\n            }\n          },\n        });\n\n      // Add range sliders for cuts\n      for (const cut of cuts) {\n        cutsOptionsNode.addConfig('rangeSlider', {\n          label: PrettySymbols.getPrettySymbol(cut.field),\n          min: cut.minValue,\n          max: cut.maxValue,\n          step: cut.step,\n          value: cut.minValue,\n          highValue: cut.maxValue,\n          onChange: ({ value, highValue }) => {\n            cut.minValue = value;\n            cut.maxValue = highValue;\n            this.three.getSceneManager().collectionFilter(collectionName, cuts);\n          },\n        });\n      }\n    }\n\n    const colorByOptions: ColorByOptionKeys[] = [];\n\n    // Extra config options specific to tracks\n    if (typeFolder.name === 'Tracks') {\n      colorByOptions.push(\n        ColorByOptionKeys.CHARGE,\n        ColorByOptionKeys.MOM,\n        ColorByOptionKeys.VERTEX\n      );\n    }\n\n    new ColorOptions(\n      this.three.getColorManager(),\n      collectionNode,\n      collectionColor,\n      colorByOptions\n    );\n  }\n\n  /**\n   * Add labels folder to Phoenix menu.\n   * @param configFunctions Functions to attach to the labels folder configuration.\n   */\n  public addLabelsFolder(configFunctions: any) {\n    if (this.labelsFolder !== null) {\n      return;\n    }\n\n    const {\n      onToggle,\n      onSizeChange,\n      onColorChange,\n      onSaveLabels,\n      onLoadLabels,\n    } = configFunctions;\n\n    this.labelsFolder = this.phoenixMenu.addChild(\n      SceneManager.LABELS_ID,\n      onToggle,\n      'info'\n    );\n\n    this.labelsFolder.addConfig('slider', {\n      label: 'Size',\n      min: 0,\n      max: 10,\n      step: 0.01,\n      allowCustomValue: true,\n      onChange: onSizeChange,\n    });\n\n    this.labelsFolder.addConfig('color', {\n      label: 'Color',\n      color: '#a8a8a8',\n      onChange: onColorChange,\n    });\n\n    this.labelsFolder.addConfig('button', {\n      label: 'Save Labels',\n      onClick: onSaveLabels,\n    });\n\n    this.labelsFolder.addConfig('button', {\n      label: 'Load Labels',\n      onClick: onLoadLabels,\n    });\n  }\n\n  /**\n   * Add configuration UI for label.\n   * @param labelId Unique ID of the label.\n   * @param removeLabel Function to remove label from the scene.\n   */\n  public addLabel(labelId: string, removeLabel?: () => void) {\n    let labelNode = this.labelsFolder.children.find(\n      (phoenixMenuNode) => phoenixMenuNode.name === labelId\n    );\n    if (!labelNode) {\n      labelNode = this.labelsFolder.addChild(labelId, (value) => {\n        this.three.getSceneManager().objectVisibility(labelId, value);\n      });\n\n      labelNode.addConfig('color', {\n        label: 'Color',\n        color: '#a8a8a8',\n        onChange: (value) => {\n          this.three.getSceneManager().changeObjectColor(labelId, value);\n        },\n      });\n\n      labelNode.addConfig('button', {\n        label: 'Remove',\n        onClick: () => {\n          removeLabel?.();\n          this.removeLabelNode(labelId, labelNode);\n        },\n      });\n    }\n  }\n\n  /**\n   * Remove label from UI, scene and event data loader if it exists.\n   * @param labelId A unique label ID string.\n   * @param labelNode Phoenix menu node of the label if any.\n   */\n  public removeLabelNode(labelId: string, labelNode?: PhoenixMenuNode) {\n    if (!labelNode) {\n      labelNode = this.labelsFolder?.children.find(\n        (singleLabelNode) => singleLabelNode.name === labelId\n      );\n    }\n\n    labelNode?.remove();\n  }\n\n  /**\n   * Load previous state of the event data folder in Phoenix menu if any.\n   */\n  public loadEventFolderState() {\n    if (this.eventFolderState) {\n      this.eventFolder.loadStateFromJSON(this.eventFolderState);\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixObjects.html":{"url":"classes/PhoenixObjects.html","title":"class - PhoenixObjects","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixObjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/phoenix-objects.ts\n        \n\n\n            \n                Description\n            \n            \n                Physics objects that make up an event in Phoenix.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getCluster\n                            \n                            \n                                    Static\n                                getHits\n                            \n                            \n                                    Static\n                                getJet\n                            \n                            \n                                    Static\n                                getMissingEnergy\n                            \n                            \n                                    Static\n                                getPlanarCaloCell\n                            \n                            \n                                    Static\n                                getTrack\n                            \n                            \n                                    Static\n                                getVertex\n                            \n                            \n                                    Private\n                                    Static\n                                hitsToLines\n                            \n                            \n                                    Private\n                                    Static\n                                hitsToPoints\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getCluster\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCluster(clusterParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:340\n                \n            \n\n\n            \n                \n                    Process the CLuster from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    clusterParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Cluster.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Cluster object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getHits\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHits(hitsParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:198\n                \n            \n\n\n            \n                \n                    Process the Hits from the given parameters and get them as a geometry.\nCan optionally contain extraInfo, which will be added to the resultant hit.\ntype tells Phoenix how to draw this - currently can be Point (default), or Line.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hitsParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Either an array of positions, or of Hit objects. If objects, they must contain 'pos', the array of [x,y,z] positions,\nCan optionally contain extraInfo, which will be added to the resultant hit.\ntype tells Phoenix how to draw this - currently can be Point (default), or Line.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Hits object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getJet\n                        \n                    \n                \n            \n            \n                \n                    \n                    getJet(jetParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:134\n                \n            \n\n\n            \n                \n                    Process the Jet from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jetParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Jet.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Jet object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getMissingEnergy\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMissingEnergy(metParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:474\n                \n            \n\n\n            \n                \n                    Process the Vertex from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    metParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Vertex.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        MET object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getPlanarCaloCell\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPlanarCaloCell(caloCells: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:392\n                \n            \n\n\n            \n                \n                    Process the PlanarCaloCell from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    caloCells\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Planar Calorimeter.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Planar Calorimeter object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getTrack\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTrack(trackParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:38\n                \n            \n\n\n            \n                \n                    Process the Track from the given parameters (and positions)\nand get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    trackParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Track.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Track object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getVertex\n                        \n                    \n                \n            \n            \n                \n                    \n                    getVertex(vertexParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:448\n                \n            \n\n\n            \n                \n                    Process the Vertex from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    vertexParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Vertex.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Vertex object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        hitsToLines\n                        \n                    \n                \n            \n            \n                \n                    \n                    hitsToLines(pointPos: any, hitsParams: any, _hitParamsClone: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:309\n                \n            \n\n\n            \n                \n                    Get a Lines object from Hits parameters.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pointPos\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Position of the HIt.\n\n                                    \n                                \n                                \n                                    hitsParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Hit.\n\n                                    \n                                \n                                \n                                    _hitParamsClone\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        A 3D object of type LineSegments.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        hitsToPoints\n                        \n                    \n                \n            \n            \n                \n                    \n                    hitsToPoints(pointPos: any, hitsParams: any, _hitParamsClone: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:277\n                \n            \n\n\n            \n                \n                    Get a Points object from Hits parameters.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pointPos\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Position of the point.\n\n                                    \n                                \n                                \n                                    hitsParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Hit.\n\n                                    \n                                \n                                \n                                    _hitParamsClone\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        A 3D object of type Points.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Vector3,\n  Object3D,\n  CatmullRomCurve3,\n  TubeBufferGeometry,\n  MeshToonMaterial,\n  Mesh,\n  BufferGeometry,\n  LineBasicMaterial,\n  Line,\n  Group,\n  Quaternion,\n  CylinderBufferGeometry,\n  MeshBasicMaterial,\n  BufferAttribute,\n  PointsMaterial,\n  Points,\n  BoxBufferGeometry,\n  MeshPhongMaterial,\n  SphereBufferGeometry,\n  LineSegments,\n  LineDashedMaterial,\n} from 'three';\nimport { EVENT_DATA_TYPE_COLORS } from '../../helpers/constants';\nimport { RKHelper } from '../../helpers/rk-helper';\nimport { CoordinateHelper } from '../../helpers/coordinate-helper';\n\n/**\n * Physics objects that make up an event in Phoenix.\n */\nexport class PhoenixObjects {\n  /**\n   * Process the Track from the given parameters (and positions)\n   * and get it as a geometry.\n   * @param trackParams Parameters of the Track.\n   * @returns Track object.\n   */\n  public static getTrack(trackParams: any): Object3D {\n    // Track with too few points are extrapolated with RungeKutta\n    if (!(trackParams.pos?.length > 2)) {\n      if (trackParams.dparams) {\n        trackParams.pos = RKHelper.extrapolateTrackPositions(trackParams);\n      }\n      trackParams.extended = true;\n    }\n\n    const positions = trackParams.pos;\n\n    // Check again, in case there was an issue with the extrapolation.\n    if (positions.length 0.1) {\n      //   console.log( 'theta:', trackParams.dparams[3], 'theta from hit', thetaFromPos, 'radius', radius );\n      // }\n    }\n\n    // attributes\n    const curve = new CatmullRomCurve3(points);\n\n    // TubeGeometry\n    const geometry = new TubeBufferGeometry(curve, undefined, 2);\n    const material = new MeshToonMaterial({ color: objectColor });\n    const tubeObject = new Mesh(geometry, material);\n\n    // Line - Creating a Line to put inside the tube to show tracks even on zoom out\n    const vertices = curve.getPoints(50);\n    const lineGeometry = new BufferGeometry().setFromPoints(vertices);\n    const lineMaterial = new LineBasicMaterial({\n      color: objectColor,\n      linewidth: 2,\n    });\n    const lineObject = new Line(lineGeometry, lineMaterial);\n    lineObject.name = 'Track';\n\n    // Creating a group to add both the Tube curve and the Line\n    const trackObject = new Group();\n    trackObject.add(tubeObject);\n    trackObject.add(lineObject);\n\n    // Setting info to the tubeObject and trackObject for selection and cuts\n    for (const object of [tubeObject, trackObject, lineObject]) {\n      object.userData = Object.assign({}, trackParams);\n      object.name = 'Track';\n    }\n\n    // Setting uuid for selection from collections info\n    trackParams.uuid = tubeObject.uuid;\n\n    return trackObject;\n  }\n\n  /**\n   * Process the Jet from the given parameters and get it as a geometry.\n   * @param jetParams Parameters for the Jet.\n   * @returns Jet object.\n   */\n  public static getJet(jetParams: any): Object3D {\n    const eta = jetParams.eta;\n    const phi = jetParams.phi;\n    // If theta is given then use that else calculate from eta\n    const theta = jetParams.theta\n      ? jetParams.theta\n      : CoordinateHelper.etaToTheta(eta);\n    // Jet energy parameter can either be 'energy' or 'et'\n    const length = (jetParams.energy ? jetParams.energy : jetParams.et) * 0.2;\n\n    const sphi = Math.sin(phi);\n    const cphi = Math.cos(phi);\n    const stheta = Math.sin(theta);\n    const ctheta = Math.cos(theta);\n    //\n    const translation = new Vector3(\n      0.5 * length * cphi * stheta,\n      0.5 * length * sphi * stheta,\n      0.5 * length * ctheta\n    );\n\n    const width = jetParams.coneR ? length * Math.sin(jetParams.coneR) : length * 0.1;\n\n    const x = cphi * stheta;\n    const y = sphi * stheta;\n    const z = ctheta;\n    const v1 = new Vector3(0, 1, 0);\n    const v2 = new Vector3(x, y, z);\n    const quaternion = new Quaternion();\n    quaternion.setFromUnitVectors(v1, v2);\n\n    const geometry = new CylinderBufferGeometry(\n      width,\n      10,\n      length,\n      50,\n      50,\n      false\n    ); // Cone\n\n    const material = new MeshBasicMaterial({\n      color: jetParams.color ?? EVENT_DATA_TYPE_COLORS.Jets,\n      opacity: 0.3,\n      transparent: true,\n    });\n    material.opacity = 0.5;\n    const mesh = new Mesh(geometry, material);\n    mesh.position.copy(translation);\n    mesh.quaternion.copy(quaternion);\n    mesh.userData = Object.assign({}, jetParams);\n    mesh.name = 'Jet';\n    // Setting uuid for selection from collections info\n    jetParams.uuid = mesh.uuid;\n\n    return mesh;\n  }\n\n  /**\n   * Process the Hits from the given parameters and get them as a geometry.\n   * @param hitsParams Either an array of positions, or of Hit objects. If objects, they must contain 'pos', the array of [x,y,z] positions,\n   * Can optionally contain extraInfo, which will be added to the resultant hit.\n   * `type` tells Phoenix how to draw this - currently can be Point (default), or Line.\n   * @returns Hits object.\n   */\n  public static getHits(hitsParams: any): Object3D {\n    let hitsParamsClone: any;\n    let positions: any[];\n    let type: string = 'Point'; // Default is point and 3 coordinates per hit\n    let coordlength = 3;\n    let isSimpleArray = false;\n\n    // if (typeof hitsParams === 'object' && !Array.isArray(hitsParams)) {\n    //   positions = [hitsParams.pos];\n    //   hitsParamsClone = hitsParams;\n    // } else {\n    //   positions = hitsParams;\n    //   hitsParamsClone = { pos: hitsParams };\n    // }\n\n    if (hitsParams.length > 0) {\n      // Peek at first one. Would be better to make these properties of the collections.\n      const first = hitsParams[0];\n      if (Array.isArray(first)) {\n        isSimpleArray = true;\n        hitsParamsClone = { pos: hitsParams };\n      } else {\n        hitsParamsClone = hitsParams;\n        if ('type' in first) {\n          type = first.type;\n        }\n      }\n    } else {\n      console.log('No hits! Aborting from getHits.');\n      return new Object3D();\n    }\n\n    // Lines need 6 coords\n    if (type === 'Line') {\n      coordlength = 6;\n    }\n\n    // attributes\n    const hitLength = hitsParams.length * coordlength;\n    if (isSimpleArray) length = hitLength; // These are already arrays\n    const pointPos = new Float32Array(hitLength);\n    let i = 0;\n    for (const hit of hitsParams) {\n      for (let j = 0; j  maxR2) {\n      position.setLength(\n        (position.length() * Math.sqrt(maxR2)) / Math.sqrt(cylRadius2)\n      );\n    }\n\n    if (Math.abs(position.z) > maxZ) {\n      position.setLength((position.length() * maxZ) / Math.abs(position.z));\n    }\n\n    cube.position.copy(position);\n\n    cube.lookAt(new Vector3(0, 0, 0));\n    cube.userData = Object.assign({}, clusterParams);\n    cube.name = 'Cluster';\n    // Setting uuid for selection from collections info\n    clusterParams.uuid = cube.uuid;\n\n    return cube;\n  }\n\n  /**\n   * Process the PlanarCaloCell from the given parameters and get it as a geometry.\n   * @param caloCells Parameters for the Planar Calorimeter.\n   * @returns Planar Calorimeter object.\n   */\n  public static getPlanarCaloCell(caloCells: any): Object3D {\n    const position = caloCells.pos;\n    if (!position) {\n      return;\n    }\n\n    const length = caloCells.energy * 0.22;\n    const size = caloCells.cellSize;\n    const plane = caloCells.plane;\n\n    // geometry\n    const geometry = new BoxBufferGeometry(size, size, length);\n\n    // there is a need of an outer box to place the proper one inside of it\n    const outerBox = new Object3D();\n\n    // material\n    const material = new MeshPhongMaterial({\n      color: caloCells.color ?? EVENT_DATA_TYPE_COLORS.PlanarCaloCells,\n    });\n\n    // object\n    const box = new Mesh(geometry, material);\n\n    // adding the original box to the outter created one, for proper translation / rotation purposes\n    outerBox.add(box);\n\n    // creating the box in the z direction, and moving it by d, along the z\n    const boxPosition = new Vector3(\n      ...position.slice(0, 2),\n      plane[3] + length / 2\n    );\n\n    box.position.copy(boxPosition);\n\n    // transforming the box from the z axis to the x,y,z of the plane\n    const qrot = new Quaternion();\n    qrot.setFromUnitVectors(\n      new Vector3(0, 0, 1),\n      new Vector3(...plane.slice(0, 3))\n    );\n\n    outerBox.quaternion.copy(qrot);\n\n    outerBox.userData = Object.assign({}, caloCells);\n    outerBox.name = 'PlanarCaloCell';\n    caloCells.uuid = outerBox.uuid;\n\n    return outerBox;\n  }\n\n  /**\n   * Process the Vertex from the given parameters and get it as a geometry.\n   * @param vertexParams Parameters for the Vertex.\n   * @returns Vertex object.\n   */\n  public static getVertex(vertexParams: any): Object3D {\n    // geometry\n    const geometry = new SphereBufferGeometry(3);\n    // material\n    const material = new MeshPhongMaterial({\n      color: vertexParams.color ?? EVENT_DATA_TYPE_COLORS.Vertices,\n    });\n    // object\n    const sphere = new Mesh(geometry, material);\n    sphere.position.x = vertexParams.x;\n    sphere.position.y = vertexParams.y;\n    sphere.position.z = vertexParams.y;\n\n    sphere.userData = Object.assign({}, vertexParams);\n    sphere.name = 'Vertex';\n    // Setting uuid for selection from collections info\n    vertexParams.uuid = sphere.uuid;\n\n    return sphere;\n  }\n\n  /**\n   * Process the Vertex from the given parameters and get it as a geometry.\n   * @param metParams Parameters for the Vertex.\n   * @returns MET object.\n   */\n  public static getMissingEnergy(metParams: any): Object3D {\n    // geometry\n    const points = [];\n    points.push(new Vector3(0, 0, 0));\n    points.push(new Vector3(metParams.etx, metParams.ety, 0));\n\n    const geometry = new BufferGeometry().setFromPoints(points);\n\n    // material\n    const material = new LineDashedMaterial({\n      linewidth: 2,\n      dashSize: 2,\n      color: metParams.color ?? EVENT_DATA_TYPE_COLORS.MissingEnergy,\n    });\n    // object\n    const object = new Line(geometry, material);\n    object.computeLineDistances();\n    object.userData = Object.assign({}, metParams);\n    object.name = 'Missing Energy';\n    // Setting uuid for selection from collections info\n    metParams.uuid = object.uuid;\n\n    return object;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresetView.html":{"url":"classes/PresetView.html","title":"class - PresetView","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresetView\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extras/preset-view.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Preset view for easily transforming/changing camera position to a specified position.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraPos\n                            \n                            \n                                    Public\n                                icon\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                setView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getIconURL\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, cameraPos: number[], icon: string)\n                    \n                \n                        \n                            \n                                Defined in src/extras/preset-view.model.ts:14\n                            \n                        \n\n                \n                    \n                            Create a preset view.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the preset view.\n\n                                                        \n                                                \n                                                \n                                                        cameraPos\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Position to which the camera is to be set.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Icon of the preset view (to describe the view angle).\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cameraPos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/extras/preset-view.model.ts:8\n                        \n                    \n\n            \n                \n                    Position to which the camera is to be set.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/extras/preset-view.model.ts:6\n                        \n                    \n\n            \n                \n                    Icon of the preset view (to describe the view angle).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/extras/preset-view.model.ts:10\n                        \n                    \n\n            \n                \n                    Name of the preset view.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setView\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/extras/preset-view.model.ts:14\n                        \n                    \n\n            \n                \n                    Set the preset view.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getIconURL\n                        \n                    \n                \n            \n            \n                \ngetIconURL()\n                \n            \n\n\n            \n                \n                    Defined in src/extras/preset-view.model.ts:32\n                \n            \n\n\n            \n                \n                    Get the URL of the preset view icon.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Icon URL.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class PresetView {\n  /** Icon of the preset view (to describe the view angle). */\n  public icon: string;\n  /** Position to which the camera is to be set. */\n  public cameraPos: number[];\n  /** Name of the preset view. */\n  public name: string;\n  /**\n   * Set the preset view.\n   */\n  setView: () => void;\n\n  /**\n   * Create a preset view.\n   * @param name Name of the preset view.\n   * @param cameraPos Position to which the camera is to be set.\n   * @param icon Icon of the preset view (to describe the view angle).\n   */\n  constructor(name: string, cameraPos: number[], icon: string) {\n    this.name = name;\n    this.cameraPos = cameraPos;\n    this.icon = icon;\n  }\n\n  /**\n   * Get the URL of the preset view icon.\n   * @returns Icon URL.\n   */\n  getIconURL(): string {\n    return 'assets/preset-views/' + this.icon + '.svg#' + this.icon;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrettySymbols.html":{"url":"classes/PrettySymbols.html","title":"class - PrettySymbols","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrettySymbols\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/pretty-symbols.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper for pretty symbols functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                symbols\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getPrettyParams\n                            \n                            \n                                    Static\n                                getPrettySymbol\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        symbols\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    θ: ['theta'],\n    ϕ: ['phi'],\n    pT: ['pt'],\n    '𝛘2': ['chi2'],\n    η: ['eta'],\n    q: ['charge'],\n    NDOF: ['ndof'],\n    DOF: ['dof'],\n    Energy: ['energy'],\n    ET: ['et'],\n    '|p|': ['momentum', 'mom'],\n  }\n                    \n                \n                    \n                        \n                                Defined in src/helpers/pretty-symbols.ts:6\n                        \n                    \n\n            \n                \n                    Pretty symbols for object params.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getPrettyParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrettyParams(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/pretty-symbols.ts:37\n                \n            \n\n\n            \n                \n                    Get pretty printed parameters of an object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object parameters to be pretty printed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        New pretty printed parameterss.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getPrettySymbol\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrettySymbol(param: string)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/pretty-symbols.ts:24\n                \n            \n\n\n            \n                \n                    Get pretty symbol of a parameter.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    param\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameter of a physics object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class PrettySymbols {\n  /** Pretty symbols for object params. */\n  public static readonly symbols: { [key: string]: string[] } = {\n    θ: ['theta'],\n    ϕ: ['phi'],\n    pT: ['pt'],\n    '𝛘2': ['chi2'],\n    η: ['eta'],\n    q: ['charge'],\n    NDOF: ['ndof'],\n    DOF: ['dof'],\n    Energy: ['energy'],\n    ET: ['et'],\n    '|p|': ['momentum', 'mom'],\n  };\n\n  /**\n   * Get pretty symbol of a parameter.\n   * @param param Parameter of a physics object.\n   */\n  public static getPrettySymbol(param: string) {\n    const prettySymbol = Object.keys(PrettySymbols.symbols).find((symbol) =>\n      PrettySymbols.symbols[symbol].includes(param)\n    );\n\n    return prettySymbol ? prettySymbol : param;\n  }\n\n  /**\n   * Get pretty printed parameters of an object.\n   * @param params Object parameters to be pretty printed.\n   * @returns New pretty printed parameterss.\n   */\n  public static getPrettyParams(params: { [key: string]: any }): {\n    [key: string]: any;\n  } {\n    // Create a copy of the params so we don't overwrite the original object\n    const paramsCopy = Object.assign({}, params);\n    // Go through all the parameters\n    for (const paramKey of Object.keys(paramsCopy)) {\n      // Get the pretty printed symbol\n      const symbol = PrettySymbols.getPrettySymbol(paramKey);\n      // If we do get a symbol\n      if (symbol !== paramKey) {\n        // Add a parameter with pretty printed symbol\n        paramsCopy[symbol] = paramsCopy[paramKey];\n        delete paramsCopy[paramKey];\n      }\n    }\n\n    // Delete 'pos' since it's too long and not needed\n    delete paramsCopy['pos'];\n\n    // Pretty print the dparams if any\n    if (paramsCopy?.dparams) {\n      const prettyDParams: { [key: string]: any } = {};\n\n      prettyDParams['θ'] = paramsCopy.dparams[3];\n      prettyDParams['ϕ'] = paramsCopy.dparams[2];\n      prettyDParams['|p|'] = Math.abs(1 / paramsCopy.dparams[4]);\n      prettyDParams['q'] = Math.sign(1 / paramsCopy.dparams[4]);\n      prettyDParams['d0'] = paramsCopy.dparams[0];\n      prettyDParams['z0'] = paramsCopy.dparams[1];\n\n      delete paramsCopy.dparams;\n\n      return { ...paramsCopy, ...prettyDParams };\n    }\n\n    return paramsCopy;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RKHelper.html":{"url":"classes/RKHelper.html","title":"class - RKHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RKHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/rk-helper.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper methods for RungeKutta functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                extrapolateTrackPositions\n                            \n                            \n                                    Static\n                                extrapolationLimit\n                            \n                            \n                                    Static\n                                getTracksWithRungeKutta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        extrapolateTrackPositions\n                        \n                    \n                \n            \n            \n                \n                    \n                    extrapolateTrackPositions(track: literal type, inbounds: (pos: Vector3) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/rk-helper.ts:44\n                \n            \n\n\n            \n                \n                    Extrapolate tracks using RungeKutta propagator.\nis out of bounds, when it returns false. Default is RKHelper.extrapolationLimit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    track\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Track which is to be extrapolated.\n\n                                    \n                                \n                                \n                                    inbounds\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        RKHelper.extrapolationLimit\n                                    \n\n                                    \n                                        Function which returns true until the passed position\nis out of bounds, when it returns false. Default is RKHelper.extrapolationLimit\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An array of track positions.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        extrapolationLimit\n                        \n                    \n                \n            \n            \n                \n                    \n                    extrapolationLimit(pos: Vector3)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/rk-helper.ts:14\n                \n            \n\n\n            \n                \n                    Function used by the extrapolator to check if the extrapolation should continue.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pos\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Location to be tested\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        A boolean: true, if the position is in-bounds, false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getTracksWithRungeKutta\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTracksWithRungeKutta(tracksCollectionsEvent: any)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/rk-helper.ts:24\n                \n            \n\n\n            \n                \n                    Get extrapolated tracks using RungeKutta.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tracksCollectionsEvent\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event containing tracks collections.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { RungeKutta } from './runge-kutta';\nimport { Vector3 } from 'three';\nimport { CoordinateHelper } from './coordinate-helper';\n\n/**\n * Helper methods for RungeKutta functions.\n */\nexport class RKHelper {\n  /**\n   * Function used by the extrapolator to check if the extrapolation should continue.\n   * @param pos Location to be tested\n   * @returns A boolean: true, if the position is in-bounds, false otherwise.\n   */\n  public static extrapolationLimit(pos: Vector3) {\n    if (pos.z > 3000) return false;\n    if (Math.sqrt(pos.x * pos.x + pos.y * pos.y) > 1100) return false;\n    return true;\n  }\n\n  /**\n   * Get extrapolated tracks using RungeKutta.\n   * @param tracksCollectionsEvent Event containing tracks collections.\n   */\n  public static getTracksWithRungeKutta(tracksCollectionsEvent: any) {\n    const tracksCollections = Object.assign({}, tracksCollectionsEvent);\n    const Tracks = {};\n    for (const tracksCollection of Object.keys(tracksCollections)) {\n      for (const track of tracksCollections[tracksCollection]) {\n        track.pos = RKHelper.extrapolateTrackPositions(track);\n      }\n    }\n\n    return Tracks;\n  }\n\n  /**\n   * Extrapolate tracks using RungeKutta propagator.\n   * @param track Track which is to be extrapolated.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false. Default is RKHelper.extrapolationLimit\n   * @returns An array of track positions.\n\n   */\n  public static extrapolateTrackPositions(\n    track: { dparams: any },\n    inbounds: (pos: Vector3) => boolean = RKHelper.extrapolationLimit\n  ): any {\n    const dparams = track.dparams;\n    // ATLAS uses mm, MeV\n    const d0 = dparams[0];\n    const z0 = dparams[1];\n    const phi = dparams[2];\n    let theta = dparams[3];\n    const qop = dparams[4];\n\n    if (theta  [\n      val.pos.x,\n      val.pos.y,\n      val.pos.z,\n    ]);\n\n    return positions.concat(extrapolatedPos);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RendererManager.html":{"url":"classes/RendererManager.html","title":"class - RendererManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RendererManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/renderer-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Manager for managing event display's renderer related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fixedOverlay\n                            \n                            \n                                    Private\n                                mainRenderer\n                            \n                            \n                                    Private\n                                overlayRenderer\n                            \n                            \n                                    Private\n                                renderers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addRenderer\n                            \n                            \n                                    Private\n                                containsObject\n                            \n                            \n                                    Public\n                                getLocalClipping\n                            \n                            \n                                getMainRenderer\n                            \n                            \n                                getOverlayRenderer\n                            \n                            \n                                getRenderers\n                            \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Private\n                                initRenderer\n                            \n                            \n                                isFixedOverlay\n                            \n                            \n                                    Public\n                                removeControls\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                setFixOverlay\n                            \n                            \n                                    Public\n                                setLocalClippingEnabled\n                            \n                            \n                                setMainRenderer\n                            \n                            \n                                    Public\n                                setOverlayRenderer\n                            \n                            \n                                setRenderers\n                            \n                            \n                                    Public\n                                swapRenderers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/renderer-manager.ts:14\n                            \n                        \n\n                \n                    \n                            Create the renderer manager by initializing the main renderer.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        fixedOverlay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/renderer-manager.ts:14\n                        \n                    \n\n            \n                \n                    If the overlay is fixed or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mainRenderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/renderer-manager.ts:8\n                        \n                    \n\n            \n                \n                    Main renderer to be used by the event display.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        overlayRenderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/renderer-manager.ts:10\n                        \n                    \n\n            \n                \n                    Overlay renderer for rendering a secondary overlay canvas.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/renderer-manager.ts:12\n                        \n                    \n\n            \n                \n                    A list of all available/created renderers.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addRenderer\n                        \n                    \n                \n            \n            \n                \n                    \n                    addRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:153\n                \n            \n\n\n            \n                \n                    Add a renderer to the available renderers list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three.js WebGLRenderer to be added.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        containsObject\n                        \n                    \n                \n            \n            \n                \n                    \n                    containsObject(obj: WebGLRenderer, list: WebGLRenderer[])\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:187\n                \n            \n\n\n            \n                \n                    Check if the list of available renderers contains a renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    obj\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The renderer to be checked for containment.\n\n                                    \n                                \n                                \n                                    list\n                                    \n                                            WebGLRenderer[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of available renderers.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If the list contains the renderer or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getLocalClipping\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLocalClipping()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:210\n                \n            \n\n\n            \n                \n                    Get if the local clipping for the first renderer is enabled or disabled.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        If the renderer local clipping is enabled or disabled.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMainRenderer\n                        \n                    \n                \n            \n            \n                \ngetMainRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:127\n                \n            \n\n\n            \n                \n                    Get the main renderer.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer\n\n                    \n                    \n                        The main renderer.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOverlayRenderer\n                        \n                    \n                \n            \n            \n                \ngetOverlayRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:135\n                \n            \n\n\n            \n                \n                    Get the renderer used for overlay.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer\n\n                    \n                    \n                        The overlay renderer.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRenderers\n                        \n                    \n                \n            \n            \n                \ngetRenderers()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:143\n                \n            \n\n\n            \n                \n                    Get all the available renderers.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer[]\n\n                    \n                    \n                        A list of three.js WebGLRenderers\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        init\n                        \n                    \n                \n            \n            \n                \n                    \n                    init(elementId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:34\n                \n            \n\n\n            \n                \n                    Initialize the renderer manager by setting up the main renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    elementId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'eventDisplay'\n                                    \n\n                                    \n                                        ID of the wrapper element.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        initRenderer\n                        \n                    \n                \n            \n            \n                \n                    \n                    initRenderer(elementId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:64\n                \n            \n\n\n            \n                \n                    Set up the renderer with the DOM.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    elementId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the wrapper element.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFixedOverlay\n                        \n                    \n                \n            \n            \n                \nisFixedOverlay()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:220\n                \n            \n\n\n            \n                \n                    Check if the overlay is fixed or not.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If the overlay is fixed or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeControls\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeControls(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:163\n                \n            \n\n\n            \n                \n                    Remove a renderer from the available renderers list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three,js WebGLRenderer to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render(scene: Scene, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:46\n                \n            \n\n\n            \n                \n                    Render the overlay.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event display scene to render.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Camera for render.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFixOverlay\n                        \n                    \n                \n            \n            \n                \nsetFixOverlay(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:228\n                \n            \n\n\n            \n                \n                    Set if the overlay is to be fixed or not.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the overlay is to be fixed or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLocalClippingEnabled\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLocalClippingEnabled(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:200\n                \n            \n\n\n            \n                \n                    Set if local clipping is to be enabled or disabled for all the available renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the local clipping is to be enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setMainRenderer\n                        \n                    \n                \n            \n            \n                \nsetMainRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:97\n                \n            \n\n\n            \n                \n                    Set the main renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three.js WebGLRenderer.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setOverlayRenderer\n                        \n                    \n                \n            \n            \n                \n                    \n                    setOverlayRenderer(overlayCanvas: HTMLCanvasElement)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:105\n                \n            \n\n\n            \n                \n                    Set the renderer for overlay event display view.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    overlayCanvas\n                                    \n                                            HTMLCanvasElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Canvas on which the overlay is to be rendered.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setRenderers\n                        \n                    \n                \n            \n            \n                \nsetRenderers(renderers: WebGLRenderer[])\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:119\n                \n            \n\n\n            \n                \n                    Set the available renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderers\n                                    \n                                            WebGLRenderer[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of three.js WebGLRenderers.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        swapRenderers\n                        \n                    \n                \n            \n            \n                \n                    \n                    swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:175\n                \n            \n\n\n            \n                \n                    Swap any two renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    rendererA\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer A to be swapped with renderer B.\n\n                                    \n                                \n                                \n                                    rendererB\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer B to be swapped with renderer A.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebGLRenderer, Scene, Camera } from 'three';\n\n/**\n * Manager for managing event display's renderer related functions.\n */\nexport class RendererManager {\n  /** Main renderer to be used by the event display. */\n  private mainRenderer: WebGLRenderer = null;\n  /** Overlay renderer for rendering a secondary overlay canvas. */\n  private overlayRenderer: WebGLRenderer = null;\n  /** A list of all available/created renderers. */\n  private renderers: WebGLRenderer[] = [];\n  /** If the overlay is fixed or not. */\n  private fixedOverlay: boolean;\n\n  /**\n   * Create the renderer manager by initializing the main renderer.\n   */\n  constructor() {\n    const renderer: WebGLRenderer = new WebGLRenderer({\n      antialias: true,\n      alpha: true,\n      powerPreference: 'high-performance',\n    });\n\n    this.addRenderer(renderer);\n    this.setMainRenderer(renderer);\n  }\n\n  /**\n   * Initialize the renderer manager by setting up the main renderer.\n   * @param elementId ID of the wrapper element.\n   */\n  public init(elementId: string = 'eventDisplay') {\n    // Reset the animation loop\n    this.getMainRenderer().setAnimationLoop(null);\n    // Main renderer for current browsers\n    this.initRenderer(elementId);\n  }\n\n  /**\n   * Render the overlay.\n   * @param scene The event display scene to render.\n   * @param camera Camera for render.\n   */\n  public render(scene: Scene, camera: Camera) {\n    if (this.getOverlayRenderer()) {\n      if (!this.getOverlayRenderer().domElement.hidden) {\n        const sceneColor = scene.background;\n        scene.background = null;\n\n        if (!this.isFixedOverlay()) {\n          this.getOverlayRenderer().render(scene, camera);\n        }\n        scene.background = sceneColor;\n      }\n    }\n  }\n\n  /**\n   * Set up the renderer with the DOM.\n   * @param elementId ID of the wrapper element.\n   */\n  private initRenderer(elementId: string) {\n    let canvasWrapper = document.getElementById(elementId);\n    if (!canvasWrapper) {\n      canvasWrapper = document.body;\n    }\n\n    const rendererWidth = () =>\n      canvasWrapper.offsetWidth > 0\n        ? canvasWrapper.offsetWidth\n        : window.innerWidth;\n    const rendererHeight = () =>\n      canvasWrapper.offsetHeight > 0\n        ? canvasWrapper.offsetHeight\n        : window.innerHeight;\n\n    const mainRenderer = this.getMainRenderer();\n    mainRenderer.setSize(rendererWidth(), rendererHeight(), false);\n    mainRenderer.setPixelRatio(window.devicePixelRatio);\n    mainRenderer.domElement.id = 'three-canvas';\n\n    canvasWrapper.appendChild(this.getMainRenderer().domElement);\n\n    window.addEventListener('resize', () => {\n      mainRenderer.setSize(rendererWidth(), rendererHeight());\n    });\n  }\n\n  // SET/GET\n\n  /**\n   * Set the main renderer.\n   * @param renderer Three.js WebGLRenderer.\n   */\n  setMainRenderer(renderer: WebGLRenderer) {\n    this.mainRenderer = renderer;\n  }\n\n  /**\n   * Set the renderer for overlay event display view.\n   * @param overlayCanvas Canvas on which the overlay is to be rendered.\n   */\n  public setOverlayRenderer(overlayCanvas: HTMLCanvasElement): void {\n    const overlayRenderer: WebGLRenderer = new WebGLRenderer({\n      canvas: overlayCanvas,\n      antialias: false,\n      alpha: true,\n    });\n    this.addRenderer(overlayRenderer);\n    this.overlayRenderer = overlayRenderer;\n  }\n\n  /**\n   * Set the available renderers.\n   * @param renderers List of three.js WebGLRenderers.\n   */\n  setRenderers(renderers: WebGLRenderer[]) {\n    this.renderers = renderers;\n  }\n\n  /**\n   * Get the main renderer.\n   * @returns The main renderer.\n   */\n  getMainRenderer(): WebGLRenderer {\n    return this.mainRenderer;\n  }\n\n  /**\n   * Get the renderer used for overlay.\n   * @returns The overlay renderer.\n   */\n  getOverlayRenderer(): WebGLRenderer {\n    return this.overlayRenderer;\n  }\n\n  /**\n   * Get all the available renderers.\n   * @returns A list of three.js WebGLRenderers\n   */\n  getRenderers(): WebGLRenderer[] {\n    return this.renderers;\n  }\n\n  // FUNCTIONS\n\n  /**\n   * Add a renderer to the available renderers list.\n   * @param renderer Three.js WebGLRenderer to be added.\n   */\n  public addRenderer(renderer: WebGLRenderer) {\n    if (!this.containsObject(renderer, this.renderers)) {\n      this.renderers.push(renderer);\n    }\n  }\n\n  /**\n   * Remove a renderer from the available renderers list.\n   * @param renderer Three,js WebGLRenderer to be removed.\n   */\n  public removeControls(renderer: WebGLRenderer) {\n    const index: number = this.renderers.indexOf(renderer);\n    if (index > -1) {\n      this.renderers.splice(index, 1);\n    }\n  }\n\n  /**\n   * Swap any two renderers.\n   * @param rendererA Renderer A to be swapped with renderer B.\n   * @param rendererB Renderer B to be swapped with renderer A.\n   */\n  public swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer) {\n    const temp: WebGLRenderer = rendererA;\n    rendererA = rendererB;\n    rendererB = temp;\n  }\n\n  /**\n   * Check if the list of available renderers contains a renderer.\n   * @param obj The renderer to be checked for containment.\n   * @param list List of available renderers.\n   * @returns If the list contains the renderer or not.\n   */\n  private containsObject(obj: WebGLRenderer, list: WebGLRenderer[]): boolean {\n    for (const object of list) {\n      if (object === obj) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set if local clipping is to be enabled or disabled for all the available renderers.\n   * @param value If the local clipping is to be enabled or disabled.\n   */\n  public setLocalClippingEnabled(value: boolean) {\n    for (const renderer of this.renderers) {\n      renderer.localClippingEnabled = value;\n    }\n  }\n\n  /**\n   * Get if the local clipping for the first renderer is enabled or disabled.\n   * @returns If the renderer local clipping is enabled or disabled.\n   */\n  public getLocalClipping() {\n    if (this.renderers.length > 0) {\n      return this.renderers[0].localClippingEnabled;\n    }\n  }\n\n  /**\n   * Check if the overlay is fixed or not.\n   * @returns If the overlay is fixed or not.\n   */\n  isFixedOverlay(): boolean {\n    return this.fixedOverlay;\n  }\n\n  /**\n   * Set if the overlay is to be fixed or not.\n   * @param value If the overlay is to be fixed or not.\n   */\n  setFixOverlay(value: boolean) {\n    this.fixedOverlay = value;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RungeKutta.html":{"url":"classes/RungeKutta.html","title":"class - RungeKutta","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RungeKutta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n\n            \n                Description\n            \n            \n                Class for performing Runge-Kutta operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                propagate\n                            \n                            \n                                    Static\n                                step\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        propagate\n                        \n                    \n                \n            \n            \n                \n                    \n                    propagate(startPos: Vector3, startDir: Vector3, p: number, q: number, mss: number, plength: number, inbounds: (pos: Vector3) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:126\n                \n            \n\n\n            \n                \n                    Propagate using the given properties by performing the Runge-Kutta steps.\nis out of bounds, when it returns false.\nthrough the Runge-Kutta steps.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    startPos\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Starting position in 3D space.\n\n                                    \n                                \n                                \n                                    startDir\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Starting direction in 3D space.\n\n                                    \n                                \n                                \n                                    p\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Momentum.\n\n                                    \n                                \n                                \n                                    q\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Charge.\n\n                                    \n                                \n                                \n                                    mss\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        -1\n                                    \n\n                                    \n                                        Max step size.\n\n                                    \n                                \n                                \n                                    plength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1000\n                                    \n\n                                    \n                                        Path length.\n\n                                    \n                                \n                                \n                                    inbounds\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        () => true\n                                    \n\n                                    \n                                        Function which returns true until the passed position\nis out of bounds, when it returns false.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type[]\n\n                    \n                    \n                        An array containing position and direction at that position calculated\nthrough the Runge-Kutta steps.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        step\n                        \n                    \n                \n            \n            \n                \n                    \n                    step(state: State)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:12\n                \n            \n\n\n            \n                \n                    Perform a Runge-Kutta step for the given state.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                State\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State at which the step is to be performed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The computed step size.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(half_h))\n        .add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir\n        .clone()\n        .add(k1.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir\n        .clone()\n        .add(k2.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(h))\n        .add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir\n        .clone()\n        .add(k3.clone().multiplyScalar(h))\n        .cross(B_last)\n        .multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return (\n        h *\n        (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z))\n      );\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    const fh: number = state.stepSize;\n    const fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(\n      k1\n        .clone()\n        .add(k2)\n        .add(k3)\n        .multiplyScalar(fh2 / 6)\n    );\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(\n      k1\n        .clone()\n        .add(k2.clone().multiplyScalar(2))\n        .add(k3.clone().multiplyScalar(2))\n        .add(k4)\n        .multiplyScalar(fh / 6)\n    );\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3,\n    startDir: Vector3,\n    p: number,\n    q: number,\n    mss: number = -1,\n    plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3; dir: Vector3 }[] {\n    const rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    const result: { pos: Vector3; dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScriptLoader.html":{"url":"classes/ScriptLoader.html","title":"class - ScriptLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScriptLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/script-loader.ts\n        \n\n\n            \n                Description\n            \n            \n                Script loader for dynamically loading external scripts.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Async\n                                loadJSRootScripts\n                            \n                            \n                                    Static\n                                loadScript\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        loadJSRootScripts\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadJSRootScripts(jsrootVersion: string)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/script-loader.ts:15\n                \n            \n\n\n            \n                \n                    Synchronously load all JSRoot scripts. ONLY CALL ONCE.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    jsrootVersion\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'latest'\n                                    \n\n                                    \n                                        Version of JSROOT to use. Defaults to latest.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        Promise resolved with JSROOT global varilable.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        loadScript\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadScript(scriptURL: string, scriptFor?: string, parentElement: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/script-loader.ts:46\n                \n            \n\n\n            \n                \n                    Load a script dynamically from a URL.\nDefaults to  tag.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    scriptURL\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        URL of the script to be loaded.\n\n                                    \n                                \n                                \n                                    scriptFor\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Optional data attribute to identify what the script is for. [data-scriptFor]\n\n                                    \n                                \n                                \n                                    parentElement\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        document.getElementsByTagName('head')[0]\n                                    \n\n                                    \n                                        Parent element to which the script is to be appended.\nDefaults to  tag.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise for the script load.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { LoadingManager } from '../managers/loading-manager';\n\n/** Global JSROOT variable for accessing functions after loading JSRoot scripts. */\ndeclare const JSROOT: any;\n\n/**\n * Script loader for dynamically loading external scripts.\n */\nexport class ScriptLoader {\n  /**\n   * Synchronously load all JSRoot scripts. ONLY CALL ONCE.\n   * @param jsrootVersion Version of JSROOT to use. Defaults to latest.\n   * @returns Promise resolved with JSROOT global varilable.\n   */\n  public static async loadJSRootScripts(\n    jsrootVersion: string = 'latest'\n  ): Promise {\n    const loadingManager = new LoadingManager();\n    loadingManager.addLoadableItem('jsroot_scripts');\n\n    const JSROOT_CDN_URL = `https://cdn.jsdelivr.net/npm/jsroot@${jsrootVersion}/scripts/`;\n    const allScripts = [\n      'JSRoot.core.js',\n      'three.extra.min.js',\n      'JSRoot.csg.js',\n      'JSRoot.painter.js',\n      'JSRoot.geom.js',\n    ];\n    for (const script of allScripts) {\n      await ScriptLoader.loadScript(JSROOT_CDN_URL + script, 'JSROOT');\n    }\n\n    loadingManager.itemLoaded('jsroot_scripts');\n\n    return JSROOT;\n  }\n\n  /**\n   * Load a script dynamically from a URL.\n   * @param scriptURL URL of the script to be loaded.\n   * @param scriptFor Optional data attribute to identify what the script is for. `[data-scriptFor]`\n   * @param parentElement Parent element to which the script is to be appended.\n   * Defaults to `` tag.\n   * @returns Promise for the script load.\n   */\n  public static loadScript(\n    scriptURL: string,\n    scriptFor?: string,\n    parentElement: HTMLElement = document.getElementsByTagName('head')[0]\n  ): Promise {\n    const loadingManager = new LoadingManager();\n    loadingManager.addLoadableItem('single_script');\n\n    return new Promise((resolve, reject) => {\n      const scriptExists = document.querySelectorAll(\n        'script[src=\"' + scriptURL + '\"]'\n      );\n\n      // If no script exists - add one\n      if (scriptExists.length === 0) {\n        const scriptElement = document.createElement('script');\n        scriptElement.type = 'text/javascript';\n        scriptElement.src = scriptURL;\n        if (scriptFor) {\n          scriptElement.setAttribute('data-scriptfor', scriptFor);\n        }\n\n        scriptElement.addEventListener('load', () => {\n          scriptElement.setAttribute('data-loaded', 'true');\n          resolve();\n          loadingManager.itemLoaded('single_script');\n        });\n        scriptElement.onerror = (event) => {\n          console.error('ERROR LOADING SCRIPT: ', event);\n          reject();\n          loadingManager.itemLoaded('single_script');\n        };\n\n        parentElement.appendChild(scriptElement);\n      } else {\n        // If script has already loaded then resolve else wait for it to load\n        if (scriptExists[0].dataset.loaded === 'true') {\n          resolve();\n          loadingManager.itemLoaded('single_script');\n        } else {\n          scriptExists[0].addEventListener('load', () => {\n            resolve();\n            loadingManager.itemLoaded('single_script');\n          });\n        }\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectionManager.html":{"url":"classes/SelectionManager.html","title":"class - SelectionManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectionManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/selection-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Manager for managing event display's selection related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeObject\n                            \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Private\n                                effectsManager\n                            \n                            \n                                    Private\n                                ignoreList\n                            \n                            \n                                    Private\n                                infoLogger\n                            \n                            \n                                    Private\n                                isInit\n                            \n                            \n                                    Private\n                                onDocumentMouseDown\n                            \n                            \n                                    Private\n                                onTouchDown\n                            \n                            \n                                    Private\n                                onTouchMove\n                            \n                            \n                                    Private\n                                outlinePass\n                            \n                            \n                                    Private\n                                preSelectionAntialias\n                            \n                            \n                                    Private\n                                scene\n                            \n                            \n                                    Private\n                                selectedObject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                disableSelecting\n                            \n                            \n                                    Private\n                                enableSelecting\n                            \n                            \n                                    Public\n                                getActiveObjectId\n                            \n                            \n                                    Public\n                                highlightObject\n                            \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Private\n                                intersectObject\n                            \n                            \n                                    Public\n                                setSelectedObject\n                            \n                            \n                                    Public\n                                setSelecting\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/selection-manager.ts:43\n                            \n                        \n\n                \n                    \n                            Constructor for the selection manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        activeObject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ActiveVariable('')\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:30\n                        \n                    \n\n            \n                \n                    The currently selected object which is observable for changes.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        camera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:24\n                        \n                    \n\n            \n                \n                    The camera inside the scene.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        effectsManager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EffectsManager\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:38\n                        \n                    \n\n            \n                \n                    Manager for managing three.js event display effects like outline pass and unreal bloom.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        ignoreList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:32\n                        \n                    \n\n            \n                \n                    Objects to be ignored on hovering over the scene.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        infoLogger\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InfoLogger\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:41\n                        \n                    \n\n            \n                \n                    Service for logging data to the information panel.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isInit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:22\n                        \n                    \n\n            \n                \n                    Is initialized.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onDocumentMouseDown\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:158\n                        \n                    \n\n            \n                \n                    Function to call on mouse click when object selection is enabled.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onTouchDown\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:207\n                        \n                    \n\n            \n                \n                    Function to call on touch when object selection is enabled.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    event\n                                                    \n                                                            Event containing touch data.\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onTouchMove\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:145\n                        \n                    \n\n            \n                \n                    Function to call on mouse move when object selection is enabled.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        outlinePass\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutlinePass\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:36\n                        \n                    \n\n            \n                \n                    Outline pass for highlighting the hovered over event display elements.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        preSelectionAntialias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:43\n                        \n                    \n\n            \n                \n                    Performance mode value before enabling selection.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        scene\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Scene\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:26\n                        \n                    \n\n            \n                \n                    The scene used for event display.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedObject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:28\n                        \n                    \n\n            \n                \n                    Object used to display the information of the selected 3D object.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        disableSelecting\n                        \n                    \n                \n            \n            \n                \n                    \n                    disableSelecting()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:128\n                \n            \n\n\n            \n                \n                    Disable selecting of event display elements and remove mouse move and click events.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        enableSelecting\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableSelecting()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:111\n                \n            \n\n\n            \n                \n                    Enable selecting of event display elements and set mouse move and click events.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getActiveObjectId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getActiveObjectId()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:94\n                \n            \n\n\n            \n                \n                    Get the uuid of the currently selected object.\n\n\n                    \n                    \n                    \n                        Returns :         ActiveVariable\n\n                    \n                    \n                        uuid of the currently selected object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        highlightObject\n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightObject(uuid: string, objectsGroup: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:241\n                \n            \n\n\n            \n                \n                    Highlight the object with the given uuid by giving it an outline.\nwith the given uuid.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        uuid of the object.\n\n                                    \n                                \n                                \n                                    objectsGroup\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group of objects to be traversed for finding the object\nwith the given uuid.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        init\n                        \n                    \n                \n            \n            \n                \n                    \n                    init(camera: Camera, scene: Scene, effectsManager: EffectsManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:65\n                \n            \n\n\n            \n                \n                    Initialize the selection manager.\nlike outline pass and unreal bloom.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene used for event display.\n\n                                    \n                                \n                                \n                                    effectsManager\n                                    \n                                                EffectsManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager for managing three.js event display effects\nlike outline pass and unreal bloom.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        intersectObject\n                        \n                    \n                \n            \n            \n                \n                    \n                    intersectObject(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:218\n                \n            \n\n\n            \n                \n                    Check if any object intersects on mouse move.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event containing data of the mouse move.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Intersected or hovered over object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setSelectedObject\n                        \n                    \n                \n            \n            \n                \n                    \n                    setSelectedObject(selectedObject: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:83\n                \n            \n\n\n            \n                \n                    Set the currently selected object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selectedObject\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The currently selected object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setSelecting\n                        \n                    \n                \n            \n            \n                \n                    \n                    setSelecting(enable: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:102\n                \n            \n\n\n            \n                \n                    Set if selecting is to be enabled or disabled.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    enable\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If selecting is to be enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Vector2,\n  Raycaster,\n  Camera,\n  Scene,\n  Object3D,\n  DirectionalLight,\n  AmbientLight,\n  AxesHelper,\n} from 'three';\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass.js';\nimport { InfoLogger } from '../../helpers/info-logger';\nimport { EffectsManager } from './effects-manager';\nimport { PrettySymbols } from '../../helpers/pretty-symbols';\nimport { ActiveVariable } from '../../helpers/active-variable';\n\n/**\n * Manager for managing event display's selection related functions.\n */\nexport class SelectionManager {\n  /** Is initialized. */\n  private isInit: boolean;\n  /** The camera inside the scene. */\n  private camera: Camera;\n  /** The scene used for event display. */\n  private scene: Scene;\n  /** Object used to display the information of the selected 3D object. */\n  private selectedObject: { name: string; attributes: any[] };\n  /** The currently selected object which is observable for changes. */\n  private activeObject = new ActiveVariable('');\n  /** Objects to be ignored on hovering over the scene. */\n  private ignoreList: string[];\n\n  // Post processing\n  /** Outline pass for highlighting the hovered over event display elements. */\n  private outlinePass: OutlinePass;\n  /** Manager for managing three.js event display effects like outline pass and unreal bloom. */\n  private effectsManager: EffectsManager;\n\n  /** Service for logging data to the information panel. */\n  private infoLogger: InfoLogger;\n  /** Performance mode value before enabling selection. */\n  private preSelectionAntialias: boolean;\n\n  /**\n   * Constructor for the selection manager.\n   */\n  constructor() {\n    this.isInit = false;\n    this.ignoreList = [\n      new AmbientLight().type,\n      new DirectionalLight().type,\n      new AxesHelper().type,\n    ];\n  }\n\n  /**\n   * Initialize the selection manager.\n   * @param camera The camera inside the scene.\n   * @param scene The scene used for event display.\n   * @param effectsManager Manager for managing three.js event display effects\n   * like outline pass and unreal bloom.\n   * @param infoLogger Service for logging data to the information panel.\n   */\n  public init(\n    camera: Camera,\n    scene: Scene,\n    effectsManager: EffectsManager,\n    infoLogger: InfoLogger\n  ) {\n    this.camera = camera;\n    this.scene = scene;\n    this.isInit = true;\n    this.infoLogger = infoLogger;\n    this.effectsManager = effectsManager;\n    this.outlinePass = this.effectsManager.addOutlinePassForSelection();\n  }\n\n  /**\n   * Set the currently selected object.\n   * @param selectedObject The currently selected object.\n   */\n  public setSelectedObject(selectedObject: {\n    name: string;\n    attributes: any[];\n  }) {\n    this.selectedObject = selectedObject;\n  }\n\n  /**\n   * Get the uuid of the currently selected object.\n   * @returns uuid of the currently selected object.\n   */\n  public getActiveObjectId(): ActiveVariable {\n    return this.activeObject;\n  }\n\n  /**\n   * Set if selecting is to be enabled or disabled.\n   * @param enable If selecting is to be enabled or disabled.\n   */\n  public setSelecting(enable: boolean) {\n    if (this.isInit) {\n      enable ? this.enableSelecting() : this.disableSelecting();\n    }\n  }\n\n  /**\n   * Enable selecting of event display elements and set mouse move and click events.\n   */\n  private enableSelecting() {\n    document\n      .getElementById('three-canvas')\n      .addEventListener('mousemove', this.onTouchMove, true);\n    document\n      .getElementById('three-canvas')\n      .addEventListener('click', this.onDocumentMouseDown, true);\n    document\n      .getElementById('three-canvas')\n      .addEventListener('touchstart', this.onTouchDown);\n    this.preSelectionAntialias = this.effectsManager.antialiasing;\n    this.effectsManager.setAntialiasing(false);\n  }\n\n  /**\n   * Disable selecting of event display elements and remove mouse move and click events.\n   */\n  private disableSelecting() {\n    document\n      .getElementById('three-canvas')\n      .removeEventListener('mousemove', this.onTouchMove, true);\n    document\n      .getElementById('three-canvas')\n      .removeEventListener('click', this.onDocumentMouseDown, true);\n    document\n      .getElementById('three-canvas')\n      .removeEventListener('touchstart', this.onTouchDown);\n    this.outlinePass.selectedObjects = [];\n    this.effectsManager.setAntialiasing(this.preSelectionAntialias);\n  }\n\n  /**\n   * Function to call on mouse move when object selection is enabled.\n   */\n  private onTouchMove = (event: any) => {\n    const intersectedObject = this.intersectObject(event);\n    if (intersectedObject) {\n      if (this.ignoreList.includes(intersectedObject.type)) {\n        return;\n      }\n      this.outlinePass.selectedObjects = [intersectedObject];\n    }\n  };\n\n  /**\n   * Function to call on mouse click when object selection is enabled.\n   */\n  private onDocumentMouseDown = () => {\n    const intersectedObject = this.outlinePass.selectedObjects[0];\n    if (intersectedObject) {\n      this.selectedObject.name = intersectedObject.name;\n      this.selectedObject.attributes.splice(\n        0,\n        this.selectedObject.attributes.length\n      );\n\n      this.activeObject.update(intersectedObject.uuid);\n\n      const prettyParams = PrettySymbols.getPrettyParams(\n        intersectedObject.userData\n      );\n\n      for (const key of Object.keys(prettyParams)) {\n        this.selectedObject.attributes.push({\n          attributeName: key,\n          attributeValue: prettyParams[key],\n        });\n      }\n\n      // Process properties of the selected object\n      const props = Object.keys(intersectedObject.userData)\n        .map((key) => {\n          // Only take properties that are a string or number (no arrays or objects)\n          if (\n            ['string', 'number'].includes(\n              typeof intersectedObject.userData[key]\n            )\n          ) {\n            return key + '=' + intersectedObject.userData[key];\n          }\n        })\n        .filter((val) => val);\n      // Build the log text and add to the logger\n      const log =\n        intersectedObject.name +\n        (props.length > 0 ? ' with ' + props.join(', ') : '');\n      if (log) {\n        this.infoLogger.add(log, 'Clicked');\n      }\n    }\n  };\n\n  /**\n   * Function to call on touch when object selection is enabled.\n   * @param event Event containing touch data.\n   */\n  private onTouchDown = (event: TouchEvent) => {\n    event.preventDefault();\n    this.onTouchMove(event.targetTouches[0]);\n    this.onDocumentMouseDown();\n  };\n\n  /**\n   * Check if any object intersects on mouse move.\n   * @param event Event containing data of the mouse move.\n   * @returns Intersected or hovered over object.\n   */\n  private intersectObject(event: any): Object3D {\n    event.preventDefault?.();\n    const mouse = new Vector2();\n    const rendererElement = this.effectsManager.composer.renderer.domElement;\n    mouse.x = (event.clientX / rendererElement.clientWidth) * 2 - 1;\n    mouse.y = -(event.clientY / rendererElement.clientHeight) * 2 + 1;\n    const raycaster = new Raycaster();\n    raycaster.setFromCamera(mouse, this.camera);\n    raycaster.params.Line.threshold = 3;\n    const intersects = raycaster.intersectObjects(this.scene.children, true);\n\n    if (intersects.length > 0) {\n      // We want the closest one\n      return intersects[0].object;\n    }\n  }\n\n  /**\n   * Highlight the object with the given uuid by giving it an outline.\n   * @param uuid uuid of the object.\n   * @param objectsGroup Group of objects to be traversed for finding the object\n   * with the given uuid.\n   */\n  public highlightObject(uuid: string, objectsGroup: Object3D) {\n    const object = objectsGroup.getObjectByProperty('uuid', uuid);\n    if (object) {\n      this.outlinePass.selectedObjects = [object];\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/State.html":{"url":"classes/State.html","title":"class - State","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  State\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n\n            \n                Description\n            \n            \n                State of the particle.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dir\n                            \n                            \n                                maxStepSize\n                            \n                            \n                                p\n                            \n                            \n                                pathLength\n                            \n                            \n                                pos\n                            \n                            \n                                q\n                            \n                            \n                                stepSize\n                            \n                            \n                                unitC\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        dir\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Vector3\n\n                    \n                \n                \n                    \n                        Default value : new Vector3(0, 0, 0)\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:170\n                        \n                    \n\n            \n                \n                    Direction.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        maxStepSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:180\n                        \n                    \n\n            \n                \n                    Max step size.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        p\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:172\n                        \n                    \n\n            \n                \n                    Momentum.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pathLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:182\n                        \n                    \n\n            \n                \n                    Path length..\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Vector3\n\n                    \n                \n                \n                    \n                        Default value : new Vector3(0, 0, 0)\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:168\n                        \n                    \n\n            \n                \n                    Position.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        q\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:174\n                        \n                    \n\n            \n                \n                    Charge.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stepSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1000\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:178\n                        \n                    \n\n            \n                \n                    Step size.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unitC\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 3.3333\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:176\n                        \n                    \n\n            \n                \n                    Unit.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(half_h))\n        .add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir\n        .clone()\n        .add(k1.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir\n        .clone()\n        .add(k2.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(h))\n        .add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir\n        .clone()\n        .add(k3.clone().multiplyScalar(h))\n        .cross(B_last)\n        .multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return (\n        h *\n        (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z))\n      );\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    const fh: number = state.stepSize;\n    const fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(\n      k1\n        .clone()\n        .add(k2)\n        .add(k3)\n        .multiplyScalar(fh2 / 6)\n    );\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(\n      k1\n        .clone()\n        .add(k2.clone().multiplyScalar(2))\n        .add(k3.clone().multiplyScalar(2))\n        .add(k4)\n        .multiplyScalar(fh / 6)\n    );\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3,\n    startDir: Vector3,\n    p: number,\n    q: number,\n    mss: number = -1,\n    plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3; dir: Vector3 }[] {\n    const rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    const result: { pos: Vector3; dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StateManager.html":{"url":"classes/StateManager.html","title":"class - StateManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StateManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/state-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                A singleton manager for managing the scene's state.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                activeCamera\n                            \n                            \n                                clippingAngle\n                            \n                            \n                                clippingEnabled\n                            \n                            \n                                eventDisplay\n                            \n                            \n                                eventMetadata\n                            \n                            \n                                    Private\n                                    Static\n                                instance\n                            \n                            \n                                phoenixMenuRoot\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getInstance\n                            \n                            \n                                loadStateFromJSON\n                            \n                            \n                                saveStateAsJSON\n                            \n                            \n                                setCamera\n                            \n                            \n                                setClippingAngle\n                            \n                            \n                                setClippingEnabled\n                            \n                            \n                                setEventDisplay\n                            \n                            \n                                setPhoenixMenuRoot\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/state-manager.ts:27\n                            \n                        \n\n                \n                    \n                            Create the state manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        activeCamera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:20\n                        \n                    \n\n            \n                \n                    The active camera.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clippingAngle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ActiveVariable(0)\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:18\n                        \n                    \n\n            \n                \n                    Angle of the clipping.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clippingEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ActiveVariable(false)\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:16\n                        \n                    \n\n            \n                \n                    Whether the clipping is enabled or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eventDisplay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EventDisplay\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:22\n                        \n                    \n\n            \n                \n                    The event display.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eventMetadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    runNumber: '000',\n    eventNumber: '000',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:24\n                        \n                    \n\n            \n                \n                    Current loaded event's metadata.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        instance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StateManager\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:12\n                        \n                    \n\n            \n                \n                    Instance of the state manager.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoenixMenuRoot\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:14\n                        \n                    \n\n            \n                \n                    Root node of the phoenix menu.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getInstance\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInstance()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:44\n                \n            \n\n\n            \n                \n                    Get the instance of state manager.\n\n\n                    \n                    \n                    \n                        Returns :         StateManager\n\n                    \n                    \n                        The state manager instance.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadStateFromJSON\n                        \n                    \n                \n            \n            \n                \nloadStateFromJSON(json: string | literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:99\n                \n            \n\n\n            \n                \n                    Load the state from JSON.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    json\n                                    \n                                            string | literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        JSON for state.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveStateAsJSON\n                        \n                    \n                \n            \n            \n                \nsaveStateAsJSON()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:78\n                \n            \n\n\n            \n                \n                    Save the state of the event display as JSON.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setCamera\n                        \n                    \n                \n            \n            \n                \nsetCamera(camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:142\n                \n            \n\n\n            \n                \n                    Set the scene camera for state.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setClippingAngle\n                        \n                    \n                \n            \n            \n                \nsetClippingAngle(angle: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:134\n                \n            \n\n\n            \n                \n                    Set the angle of clipping.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    angle\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Angle fo clipping.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setClippingEnabled\n                        \n                    \n                \n            \n            \n                \nsetClippingEnabled(clipping: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:126\n                \n            \n\n\n            \n                \n                    Set the state of clipping.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    clipping\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether the clipping is enabled or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setEventDisplay\n                        \n                    \n                \n            \n            \n                \nsetEventDisplay(eventDisplay: EventDisplay)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:150\n                \n            \n\n\n            \n                \n                    Set the event display.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventDisplay\n                                    \n                                                EventDisplay\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event display.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPhoenixMenuRoot\n                        \n                    \n                \n            \n            \n                \nsetPhoenixMenuRoot(phoenixMenuRoot: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:52\n                \n            \n\n\n            \n                \n                    Set the root node of Phoenix menu.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    phoenixMenuRoot\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Phoenix menu root node.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventDisplay } from '../event-display';\nimport { Camera } from 'three';\nimport { PhoenixMenuNode } from './ui-manager/phoenix-menu/phoenix-menu-node';\nimport { loadFile, saveFile } from '../helpers/file';\nimport { ActiveVariable } from '../helpers/active-variable';\n\n/**\n * A singleton manager for managing the scene's state.\n */\nexport class StateManager {\n  /** Instance of the state manager. */\n  private static instance: StateManager;\n  /** Root node of the phoenix menu. */\n  phoenixMenuRoot: PhoenixMenuNode;\n  /** Whether the clipping is enabled or not. */\n  clippingEnabled = new ActiveVariable(false);\n  /** Angle of the clipping. */\n  clippingAngle = new ActiveVariable(0);\n  /** The active camera. */\n  activeCamera: Camera;\n  /** The event display. */\n  eventDisplay: EventDisplay;\n  /** Current loaded event's metadata. */\n  eventMetadata: { runNumber: string; eventNumber: string } = {\n    runNumber: '000',\n    eventNumber: '000',\n  };\n\n  /**\n   * Create the state manager.\n   * @returns The state manager instance.\n   */\n  constructor() {\n    if (StateManager.instance === undefined) {\n      StateManager.instance = this;\n    }\n    return StateManager.instance;\n  }\n\n  /**\n   * Get the instance of state manager.\n   * @returns The state manager instance.\n   */\n  static getInstance(): StateManager {\n    return StateManager.instance;\n  }\n\n  /**\n   * Set the root node of Phoenix menu.\n   * @param phoenixMenuRoot Phoenix menu root node.\n   */\n  setPhoenixMenuRoot(phoenixMenuRoot: PhoenixMenuNode) {\n    this.phoenixMenuRoot = phoenixMenuRoot;\n\n    if (this.phoenixMenuRoot) {\n      // Add save and load config buttons to the root node\n      this.phoenixMenuRoot\n        .addConfig('button', {\n          label: 'Save state',\n          onClick: () => {\n            this.saveStateAsJSON();\n          },\n        })\n        .addConfig('button', {\n          label: 'Load state',\n          onClick: () => {\n            loadFile((data) => {\n              this.loadStateFromJSON(JSON.parse(data));\n            });\n          },\n        });\n    }\n  }\n\n  /**\n   * Save the state of the event display as JSON.\n   */\n  saveStateAsJSON() {\n    const state: { [key: string]: any } = {\n      phoenixMenu: this.phoenixMenuRoot.getNodeState(),\n      eventDisplay: {\n        cameraPosition: this.activeCamera.position.toArray(),\n        clippingAngle: this.clippingEnabled.value\n          ? this.clippingAngle.value\n          : null,\n      },\n    };\n\n    saveFile(\n      JSON.stringify(state),\n      `run${this.eventMetadata.runNumber}_evt${this.eventMetadata.eventNumber}.json`\n    );\n  }\n\n  /**\n   * Load the state from JSON.\n   * @param json JSON for state.\n   */\n  loadStateFromJSON(json: string | { [key: string]: any }) {\n    const jsonData: { [key: string]: any } =\n      typeof json === 'string' ? JSON.parse(json) : json;\n\n    if (jsonData['phoenixMenu'] && this.phoenixMenuRoot) {\n      this.phoenixMenuRoot.loadStateFromJSON(jsonData['phoenixMenu']);\n      this.phoenixMenuRoot.configActive = false;\n    }\n\n    if (jsonData['eventDisplay']) {\n      this.activeCamera.position.fromArray(\n        jsonData['eventDisplay']?.['cameraPosition']\n      );\n      if (jsonData['eventDisplay']?.['clippingAngle']) {\n        this.setClippingEnabled(true);\n        this.eventDisplay.getUIManager().setClipping(true);\n        this.eventDisplay\n          .getUIManager()\n          .rotateClipping(jsonData['eventDisplay']['clippingAngle']);\n      }\n    }\n  }\n\n  /**\n   * Set the state of clipping.\n   * @param clipping Whether the clipping is enabled or not.\n   */\n  setClippingEnabled(clipping: boolean) {\n    this.clippingEnabled.update(clipping);\n  }\n\n  /**\n   * Set the angle of clipping.\n   * @param angle Angle fo clipping.\n   */\n  setClippingAngle(angle: number) {\n    this.clippingAngle.update(angle);\n  }\n\n  /**\n   * Set the scene camera for state.\n   * @param camera The camera.\n   */\n  setCamera(camera: Camera) {\n    this.activeCamera = camera;\n  }\n\n  /**\n   * Set the event display.\n   * @param eventDisplay The event display.\n   */\n  setEventDisplay(eventDisplay: EventDisplay) {\n    this.eventDisplay = eventDisplay;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/URLOptionsManager.html":{"url":"classes/URLOptionsManager.html","title":"class - URLOptionsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  URLOptionsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/url-options-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                A manager for managing options given through URL.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                urlOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                applyEmbedOption\n                            \n                            \n                                    Public\n                                applyEventOptions\n                            \n                            \n                                    Public\n                                applyHideWidgetsOptions\n                            \n                            \n                                    Public\n                                applyOptions\n                            \n                            \n                                    Private\n                                hideIdsWithURLOption\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventDisplay: EventDisplay, configuration: Configuration)\n                    \n                \n                        \n                            \n                                Defined in src/managers/url-options-manager.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for the URL options manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        eventDisplay\n                                                  \n                                                        \n                                                                        EventDisplay\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The Phoenix event display.\n\n                                                        \n                                                \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        Configuration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Configuration of the event display.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        urlOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     URLSearchParams\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/url-options-manager.ts:23\n                        \n                    \n\n            \n                \n                    Variable containing all URL search parameters.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        applyEmbedOption\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyEmbedOption()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:148\n                \n            \n\n\n            \n                \n                    Hide all overlay widgets and enable embed menu if \"hideWidgets\" option from the URL is true.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        applyEventOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyEventOptions(defaultEventPath?: string, defaultEventType?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:59\n                \n            \n\n\n            \n                \n                    Initialize the event display with event data and configuration from URL.\n(Only JiveXML and JSON)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    defaultEventPath\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Default event path to fallback to if none in URL.\n\n                                    \n                                \n                                \n                                    defaultEventType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Default event type to fallback to if none in URL.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        applyHideWidgetsOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyHideWidgetsOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:130\n                \n            \n\n\n            \n                \n                    Hide all overlay widgets if \"hideWidgets\" option from the URL is true.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        applyOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:43\n                \n            \n\n\n            \n                \n                    Initialize and apply all URL options on page load.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        hideIdsWithURLOption\n                        \n                    \n                \n            \n            \n                \n                    \n                    hideIdsWithURLOption(urlOptionWithIds: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:173\n                \n            \n\n\n            \n                \n                    Hide element with IDs based on a URL option.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    urlOptionWithIds\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        IDs to hide with keys as the URL option and its array value as IDs.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { JiveXMLLoader } from '../loaders/jivexml-loader';\nimport { PhoenixLoader } from '../loaders/phoenix-loader';\nimport { Configuration } from '../extras/configuration';\nimport { EventDisplay } from '../event-display';\nimport { StateManager } from './state-manager';\n\n/**\n * Model for Phoenix URL options.\n */\nexport const phoenixURLOptions = {\n  file: '',\n  type: '',\n  config: '',\n  hideWidgets: false,\n  embed: false,\n};\n\n/**\n * A manager for managing options given through URL.\n */\nexport class URLOptionsManager {\n  /** Variable containing all URL search parameters. */\n  private urlOptions: URLSearchParams;\n\n  /**\n   * Constructor for the URL options manager.\n   * @param eventDisplay The Phoenix event display.\n   * @param configuration Configuration of the event display.\n   */\n  constructor(\n    private eventDisplay: EventDisplay,\n    private configuration: Configuration\n  ) {\n    const locationHref = window.location.href;\n    this.urlOptions = new URLSearchParams(\n      locationHref.substr(locationHref.lastIndexOf('?'))\n    );\n  }\n\n  /**\n   * Initialize and apply all URL options on page load.\n   */\n  public applyOptions() {\n    // Initialize event with data from URL if there is any\n    this.applyEventOptions(\n      this.configuration.defaultEventFile?.eventFile,\n      this.configuration.defaultEventFile?.eventType\n    );\n    this.applyHideWidgetsOptions();\n    this.applyEmbedOption();\n  }\n\n  /**\n   * Initialize the event display with event data and configuration from URL.\n   * (Only JiveXML and JSON)\n   * @param defaultEventPath Default event path to fallback to if none in URL.\n   * @param defaultEventType Default event type to fallback to if none in URL.\n   */\n  public applyEventOptions(\n    defaultEventPath?: string,\n    defaultEventType?: string\n  ) {\n    if (!('fetch' in window)) {\n      return;\n    }\n\n    let file: string, type: string;\n\n    if (!this.urlOptions.get('file') || !this.urlOptions.get('type')) {\n      file = defaultEventPath;\n      type = defaultEventType;\n    } else {\n      file = this.urlOptions.get('file');\n      type = this.urlOptions.get('type').toLowerCase();\n    }\n\n    // Load config from URL\n    const loadConfig = () => {\n      if (this.urlOptions.get('config')) {\n        this.eventDisplay.getLoadingManager().addLoadableItem('url_config');\n        fetch(this.urlOptions.get('config'))\n          .then((res) => res.json())\n          .then((jsonState) => {\n            const stateManager = new StateManager();\n            stateManager.loadStateFromJSON(jsonState);\n          })\n          .finally(() => {\n            this.eventDisplay.getLoadingManager().itemLoaded('url_config');\n          });\n      }\n    };\n\n    // Load event file from URL\n    if (file && type) {\n      this.eventDisplay.getLoadingManager().addLoadableItem('url_event');\n      fetch(file)\n        .then((res) => (type === 'jivexml' ? res.text() : res.json()))\n        .then((res: { [key: string]: any } | string) => {\n          if (type === 'jivexml') {\n            const loader = new JiveXMLLoader();\n            this.configuration.eventDataLoader = loader;\n            // Parse the JSON to extract events and their data\n            loader.process(res);\n            const eventData = loader.getEventData();\n            this.eventDisplay.buildEventDataFromJSON(eventData);\n          } else {\n            this.configuration.eventDataLoader = new PhoenixLoader();\n            this.eventDisplay.parsePhoenixEvents(res);\n          }\n        })\n        .catch((error) => {\n          this.eventDisplay\n            .getInfoLogger()\n            .add('Could not find the file specified in URL.', 'Error');\n          console.error('Could not find the file specified in URL.', error);\n        })\n        .finally(() => {\n          // Load config from URL after loading the event\n          loadConfig();\n          this.eventDisplay.getLoadingManager().itemLoaded('url_event');\n        });\n    } else {\n      loadConfig();\n    }\n  }\n\n  /**\n   * Hide all overlay widgets if \"hideWidgets\" option from the URL is true.\n   */\n  public applyHideWidgetsOptions() {\n    const hideWidgetsOptions = {\n      hideWidgets: [\n        'mainLogo', // Main logo\n        'uiMenu', // UI menu\n        'experimentInfo', // Experiment info\n        'phoenixMenu', // Phoenix menu\n        'statsElement', // Stats at the bottom left\n        'gui', // dat.GUI menu\n      ],\n    };\n\n    this.hideIdsWithURLOption(hideWidgetsOptions);\n  }\n\n  /**\n   * Hide all overlay widgets and enable embed menu if \"hideWidgets\" option from the URL is true.\n   */\n  public applyEmbedOption() {\n    if (this.urlOptions.get('embed') === 'true') {\n      const hideWidgetsOptions = {\n        embed: [\n          'mainLogo', // Main logo\n          'uiMenu', // UI menu\n          'experimentInfo', // Experiment info\n          'phoenixMenu', // Phoenix menu\n          'statsElement', // Stats at the bottom left\n          'gui', // dat.GUI menu\n        ],\n      };\n\n      this.hideIdsWithURLOption(hideWidgetsOptions);\n\n      document\n        .getElementById('embedMenu')\n        ?.style.setProperty('display', 'block');\n    }\n  }\n\n  /**\n   * Hide element with IDs based on a URL option.\n   * @param urlOptionWithIds IDs to hide with keys as the URL option and its array value as IDs.\n   */\n  private hideIdsWithURLOption(urlOptionWithIds: { [key: string]: string[] }) {\n    Object.entries(urlOptionWithIds).forEach(([urlOption, idsToHide]) => {\n      if (this.urlOptions.get(urlOption) === 'true') {\n        idsToHide.forEach((singleId) => {\n          document\n            .getElementById(singleId)\n            ?.style.setProperty('display', 'none');\n        });\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VRManager.html":{"url":"classes/VRManager.html","title":"class - VRManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VRManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/vr-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                VR manager for VR related operations.\n\n            \n\n            \n                Extends\n            \n            \n                        XRManager\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                controller1\n                            \n                            \n                                    Private\n                                controller2\n                            \n                            \n                                    Private\n                                controllerGrip1\n                            \n                            \n                                    Private\n                                controllerGrip2\n                            \n                            \n                                    Private\n                                onControllerSelectEnd\n                            \n                            \n                                    Private\n                                onControllerSelectStart\n                            \n                            \n                                    Static\n                                    Readonly\n                                SESSION_TYPE\n                            \n                            \n                                    Public\n                                cameraGroup\n                            \n                            \n                                    Protected\n                                currentXRSession\n                            \n                            \n                                    Protected\n                                onSessionEnded\n                            \n                            \n                                    Protected\n                                renderer\n                            \n                            \n                                    Protected\n                                sessionInit\n                            \n                            \n                                    Protected\n                                xrActive\n                            \n                            \n                                    Public\n                                xrCamera\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                moveInDirection\n                            \n                            \n                                    Protected\n                                onXRSessionEnded\n                            \n                            \n                                    Private\n                                setupVRControls\n                            \n                            \n                                    Public\n                                setXRSession\n                            \n                            \n                                    Public\n                                endXRSession\n                            \n                            \n                                    Public\n                                getCameraGroup\n                            \n                            \n                                    Public\n                                getXRCamera\n                            \n                            \n                                    Protected\n                                    Async\n                                onXRSessionStarted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/vr-manager.ts:28\n                            \n                        \n\n                \n                    \n                            Create the VR manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        controller1\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/vr-manager.ts:17\n                        \n                    \n\n            \n                \n                    The VR controller for movement.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        controller2\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/vr-manager.ts:19\n                        \n                    \n\n            \n                \n                    The VR controller for movement.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        controllerGrip1\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/vr-manager.ts:21\n                        \n                    \n\n            \n                \n                    The VR controller representation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        controllerGrip2\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/vr-manager.ts:23\n                        \n                    \n\n            \n                \n                    The VR controller representation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onControllerSelectEnd\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/vr-manager.ts:28\n                        \n                    \n\n            \n                \n                    Listener for when the \"Select Start\" button is released.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onControllerSelectStart\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/vr-manager.ts:26\n                        \n                    \n\n            \n                \n                    Listener for when the \"Select Start\" button is pushed.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        SESSION_TYPE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'immersive-vr'\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/vr-manager.ts:15\n                        \n                    \n\n            \n                \n                    Session type to use for VR.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cameraGroup\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Group\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:29\n\n                        \n                    \n\n            \n                \n                    Group containing the the camera for XR.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        currentXRSession\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:25\n\n                        \n                    \n\n            \n                \n                    Currently active XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onSessionEnded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:27\n\n                        \n                    \n\n            \n                \n                    Callback to call when the XR session ends.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:23\n\n                        \n                    \n\n            \n                \n                    Renderer to set the XR session for.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        sessionInit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:21\n\n                        \n                    \n\n            \n                \n                    Returns required and optional features when requesting an XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        xrActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:19\n\n                        \n                    \n\n            \n                \n                    Whether the XR is currently active or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        xrCamera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:31\n\n                        \n                    \n\n            \n                \n                    The camera used by XR.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        moveInDirection\n                        \n                    \n                \n            \n            \n                \n                    \n                    moveInDirection(direction: Vector3, stepDistance: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/vr-manager.ts:149\n                \n            \n\n\n            \n                \n                    Move the camera in the given direction.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    direction\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Direction to move towards.\n\n                                    \n                                \n                                \n                                    stepDistance\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Distance to move by.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        onXRSessionEnded\n                        \n                    \n                \n            \n            \n                \n                    \n                    onXRSessionEnded()\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:61\n\n                \n            \n\n\n            \n                \n                    Callback when the VR session ends.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        setupVRControls\n                        \n                    \n                \n            \n            \n                \n                    \n                    setupVRControls()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/vr-manager.ts:77\n                \n            \n\n\n            \n                \n                    Set up VR controls for moving around the event display.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setXRSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    setXRSession(renderer: WebGLRenderer, onSessionStarted?: () => void, onSessionEnded?: () => void)\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:48\n\n                \n            \n\n\n            \n                \n                    Set and configure the VR session.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer to set the VR session for.\n\n                                    \n                                \n                                \n                                    onSessionStarted\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the VR session starts.\n\n                                    \n                                \n                                \n                                    onSessionEnded\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the VR session ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        endXRSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    endXRSession()\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:94\n\n                \n            \n\n\n            \n                \n                    End the current XR session.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCameraGroup\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraGroup(camera?: Camera)\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:104\n\n                \n            \n\n\n            \n                \n                    Get the group containing the camera for XR.\nXR camera works by adding a Group with Camera to the scene.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Camera which is to be cloned for XR use.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Group\n\n                    \n                    \n                        The camera group used in XR mode.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getXRCamera\n                        \n                    \n                \n            \n            \n                \n                    \n                    getXRCamera()\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:130\n\n                \n            \n\n\n            \n                \n                    Get the camera used by XR.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The camera used by XR.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        onXRSessionStarted\n                        \n                    \n                \n            \n            \n                \n                    \n                    onXRSessionStarted(session: any)\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:73\n\n                \n            \n\n\n            \n                \n                    Callback for when the XR session is started.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The XR session.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebGLRenderer, Vector3, BufferGeometry, Line } from 'three';\nimport { XRControllerModelFactory } from 'three/examples/jsm/webxr/XRControllerModelFactory';\nimport { XRManager, XRSessionType } from './xr-manager';\n\n// NOTE: This was created on 29/08/2020\n// It might become outdated given how WebXR is still a work in progress\n\n// LAST UPDATED ON 20/06/2021\n\n/**\n * VR manager for VR related operations.\n */\nexport class VRManager extends XRManager {\n  /** Session type to use for VR. */\n  static readonly SESSION_TYPE: string = 'immersive-vr';\n  /** The VR controller for movement. */\n  private controller1: any;\n  /** The VR controller for movement. */\n  private controller2: any;\n  /** The VR controller representation */\n  private controllerGrip1: any;\n  /** The VR controller representation */\n  private controllerGrip2: any;\n\n  /** Listener for when the \"Select Start\" button is pushed. */\n  private onControllerSelectStart: () => void;\n  /** Listener for when the \"Select Start\" button is released. */\n  private onControllerSelectEnd: () => void;\n\n  /**\n   * Create the VR manager.\n   * @override\n   */\n  constructor() {\n    super(XRSessionType.VR);\n    this.sessionInit = () => ({\n      optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking'],\n    });\n  }\n\n  /**\n   * Set and configure the VR session.\n   * @param renderer Renderer to set the VR session for.\n   * @param onSessionStarted Callback to call when the VR session starts.\n   * @param onSessionEnded Callback to call when the VR session ends.\n   * @override\n   */\n  public setXRSession(\n    renderer: WebGLRenderer,\n    onSessionStarted?: () => void,\n    onSessionEnded?: () => void\n  ) {\n    super.setXRSession(renderer, onSessionStarted, onSessionEnded);\n    this.setupVRControls();\n  }\n\n  /**\n   * Callback when the VR session ends.\n   * @override\n   */\n  protected onXRSessionEnded() {\n    super.onXRSessionEnded();\n\n    this.controller1?.removeEventListener(\n      'selectstart',\n      this.onControllerSelectStart\n    );\n    this.controller1?.removeEventListener(\n      'selectend',\n      this.onControllerSelectEnd\n    );\n  }\n\n  /**\n   * Set up VR controls for moving around the event display.\n   */\n  private setupVRControls() {\n    // Get the controllers\n    this.controller1 = this.renderer.xr.getController(0);\n    this.getCameraGroup().add(this.controller1);\n    this.controller2 = this.renderer.xr.getController(1);\n    this.getCameraGroup().add(this.controller2);\n\n    const controllerModelFactory = new XRControllerModelFactory();\n    this.controllerGrip1 = this.renderer.xr.getControllerGrip(0);\n    this.controllerGrip1.add(\n      controllerModelFactory.createControllerModel(this.controllerGrip1)\n    );\n    this.getCameraGroup().add(this.controllerGrip1);\n\n    this.controllerGrip2 = this.renderer.xr.getControllerGrip(1);\n    this.controllerGrip2.add(\n      controllerModelFactory.createControllerModel(this.controllerGrip2)\n    );\n    this.getCameraGroup().add(this.controllerGrip2);\n\n    const geometry = new BufferGeometry().setFromPoints([\n      new Vector3(0, 0, 0),\n      new Vector3(0, 0, -1),\n    ]);\n\n    const line = new Line(geometry);\n    line.name = 'line';\n    line.scale.z = 50;\n\n    this.controller1.add(line.clone());\n    this.controller2.add(line.clone());\n\n    // Set up movement\n\n    // Distance for a single step\n    const stepDistance = 30;\n    // Unit vector in camera direction\n    const direction = new Vector3();\n    // Interval ID for the movement interval\n    let intervalId: NodeJS.Timeout;\n\n    this.onControllerSelectStart = () => {\n      console.log(\n        'Select: c1 position ' + this.controller1.position.toArray().join(', ')\n      );\n      console.log(\n        'Select: CG position ' + this.cameraGroup.position.toArray().join(', ')\n      );\n\n      // Start movement in camera direction\n      intervalId = setInterval(() => {\n        this.moveInDirection(direction, stepDistance);\n      }, 20);\n    };\n\n    this.onControllerSelectEnd = () => {\n      // Stop the movement\n      clearInterval(intervalId);\n    };\n\n    this.controller1.addEventListener(\n      'selectstart',\n      this.onControllerSelectStart\n    );\n    this.controller1.addEventListener('selectend', this.onControllerSelectEnd);\n  }\n\n  /**\n   * Move the camera in the given direction.\n   * @param direction Direction to move towards.\n   * @param stepDistance Distance to move by.\n   */\n  private moveInDirection(direction: Vector3, stepDistance: number) {\n    // Get the direction the controller is facing\n    //! this.controller.getWorldDirection(direction);\n\n    // Get direction the camera is facing\n    this.xrCamera?.getWorldDirection(direction);\n\n    // Move the camera in the given direction\n    this.cameraGroup.position.addScaledVector(direction, stepDistance);\n    this.xrCamera.position.addScaledVector(direction, stepDistance);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Window.html":{"url":"interfaces/Window.html","title":"interface - Window","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Window\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event-display.ts\n        \n\n\n            \n                Description\n            \n            \n                Window interface for adding objects to the window object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            EventDisplay\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        EventDisplay\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        EventDisplay:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    EventDisplay object containing event display related functions.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ThreeManager } from './managers/three-manager';\nimport { UIManager } from './managers/ui-manager';\nimport { InfoLogger } from './helpers/info-logger';\nimport { Configuration } from './extras/configuration';\nimport { StateManager } from './managers/state-manager';\nimport { LoadingManager } from './managers/loading-manager';\nimport { URLOptionsManager } from './managers/url-options-manager';\nimport { ActiveVariable } from './helpers/active-variable';\nimport { AnimationPreset } from './managers/three-manager/animations-manager';\nimport { XRSessionType } from './managers/three-manager/xr-manager';\n\ndeclare global {\n  /**\n   * Window interface for adding objects to the window object.\n   */\n  interface Window {\n    /** EventDisplay object containing event display related functions. */\n    EventDisplay: any;\n  }\n}\n\n/**\n * Phoenix event display class for managing detector geometries and event data.\n */\nexport class EventDisplay {\n  /** Configuration for preset views and event data loader. */\n  private configuration: Configuration;\n  /** An object containing event data. */\n  private eventsData: any;\n  /** Array containing callbacks to be called when events change. */\n  private onEventsChange: ((events: any) => void)[] = [];\n  /** Array containing callbacks to be called when the displayed event changes. */\n  private onDisplayedEventChange: ((nowDisplayingEvent: any) => void)[] = [];\n  /** Three manager for three.js operations. */\n  private graphicsLibrary: ThreeManager;\n  /** Info logger for storing event display logs. */\n  private infoLogger: InfoLogger;\n  /** UI manager for UI menu. */\n  private ui: UIManager;\n  /** Loading manager for loadable resources */\n  private loadingManager: LoadingManager;\n  /** State manager for managing event display state. */\n  private stateManager: StateManager;\n\n  /**\n   * Create the Phoenix event display and intitialize all the elements.\n   * @param configuration Configuration used to customize different aspects.\n   */\n  constructor(configuration?: Configuration) {\n    this.loadingManager = new LoadingManager();\n    this.infoLogger = new InfoLogger();\n    this.graphicsLibrary = new ThreeManager(this.infoLogger);\n    this.ui = new UIManager(this.graphicsLibrary);\n    if (configuration) {\n      this.init(configuration);\n    }\n  }\n\n  /**\n   * Initialize all the Phoenix event display elements.\n   * @param configuration Configuration used to customize different aspects.\n   */\n  public init(configuration: Configuration) {\n    this.configuration = configuration;\n\n    // Initialize the three manager with configuration\n    this.graphicsLibrary.init(configuration);\n    // Initialize the UI with configuration\n    this.ui.init(configuration);\n    // Set up for the state manager\n    this.getStateManager().setEventDisplay(this);\n\n    // Animate loop\n    const uiLoop = () => {\n      this.ui.updateUI();\n    };\n    this.graphicsLibrary.setAnimationLoop(uiLoop);\n\n    // Process and apply URL options\n    if (configuration.allowUrlOptions !== false) {\n      const urlOptionsManager = new URLOptionsManager(this, configuration);\n      urlOptionsManager.applyOptions();\n    }\n\n    // Allow adding elements through console\n    this.enableEventDisplayConsole();\n    // Allow keyboard controls\n    this.enableKeyboardControls();\n  }\n\n  /**\n   * Initialize XR.\n   * @param xrSessionType Type of the XR session. Either AR or VR.\n   * @param onSessionEnded Callback when the XR session ends.\n   */\n  public initXR(xrSessionType: XRSessionType, onSessionEnded?: () => void) {\n    this.graphicsLibrary.initXRSession(xrSessionType, onSessionEnded);\n  }\n\n  /**\n   * End VR and remove VR settings.\n   * @param xrSessionType Type of the XR session. Either AR or VR.\n   */\n  public endXR(xrSessionType: XRSessionType) {\n    this.graphicsLibrary.endXRSession(xrSessionType);\n  }\n\n  /**\n   * Receives an object containing all the eventKeys and saves it.\n   * Then it loads by default the first event.\n   * @param eventsData Object containing the event data.\n   * @returns Array of strings containing the keys of the eventsData object.\n   */\n  public parsePhoenixEvents(eventsData: any): string[] {\n    this.eventsData = eventsData;\n    const eventKeys =\n      this.configuration.eventDataLoader.getEventsList(eventsData);\n    this.loadEvent(eventKeys[0]);\n    this.onEventsChange.forEach((callback) => callback(eventKeys));\n    return eventKeys;\n  }\n\n  /**\n   * Receives an object containing one event and builds the different collections\n   * of physics objects.\n   * @param eventData Object containing the event data.\n   */\n  public buildEventDataFromJSON(eventData: any) {\n    // Creating UI folder\n    this.ui.addEventDataFolder();\n    this.ui.addLabelsFolder();\n    // Clearing existing event data\n    this.graphicsLibrary.clearEventData();\n    // Build data and add to scene\n    this.configuration.eventDataLoader.buildEventData(\n      eventData,\n      this.graphicsLibrary,\n      this.ui,\n      this.infoLogger\n    );\n    this.onDisplayedEventChange.forEach((callback) => callback(eventData));\n    // Reload the event data state in Phoenix menu\n    this.ui.loadEventFolderPMState();\n  }\n\n  /**\n   * Receives a string representing the key of an event and loads\n   * the event associated with that key.\n   * @param eventKey String that represents the event in the eventsData object.\n   */\n  public loadEvent(eventKey: any) {\n    const event = this.eventsData[eventKey];\n\n    if (event) {\n      this.buildEventDataFromJSON(event);\n    }\n  }\n\n  /**\n   * Get the three manager responsible for three.js functions.\n   * @returns The three.js manager.\n   */\n  public getThreeManager() {\n    return this.graphicsLibrary;\n  }\n\n  /**\n   * Get the UI manager responsible for UI related functions.\n   * @returns The UI manager.\n   */\n  public getUIManager() {\n    return this.ui;\n  }\n\n  /**\n   * Get the info logger containing event display logs.\n   * @returns The info logger instance being used by the event display.\n   */\n  public getInfoLogger() {\n    return this.infoLogger;\n  }\n\n  /**\n   * Get the loading manager for managing loadable items.\n   * @returns The loading manager.\n   */\n  public getLoadingManager() {\n    return this.loadingManager;\n  }\n\n  /**\n   * Get the state manager that manages event display's state.\n   * @returns The state manager.\n   */\n  public getStateManager() {\n    if (!this.stateManager) {\n      this.stateManager = new StateManager();\n    }\n    return this.stateManager;\n  }\n\n  // **********************\n  // * LOADING GEOMETRIES *\n  // **********************\n\n  /**\n   * Loads an OBJ (.obj) geometry from the given filename\n   * and adds it to the dat.GUI menu.\n   * @param filename Path to the geometry.\n   * @param name Name given to the geometry.\n   * @param color Color to initialize the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param doubleSided If true, render both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   * @param setFlat Whether object should be flat-shaded or not.\n   * @returns Promise for loading the geometry.\n   */\n  public loadOBJGeometry(\n    filename: string,\n    name: string,\n    color: any,\n    menuNodeName?: string,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true,\n    setFlat: boolean = true\n  ): Promise {\n    this.loadingManager.addLoadableItem(`obj_geom_${name}`);\n    this.ui.addGeometry(name, color, menuNodeName, initiallyVisible);\n    this.infoLogger.add(name, 'Loaded OBJ geometry');\n    return this.graphicsLibrary.loadOBJGeometry(\n      filename,\n      name,\n      color,\n      doubleSided,\n      initiallyVisible,\n      setFlat\n    );\n  }\n\n  /**\n   * Parses and loads an OBJ geometry from the given content\n   * and adds it to the dat.GUI menu.\n   * @param content Content of the OBJ geometry.\n   * @param name Name given to the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public parseOBJGeometry(\n    content: string,\n    name: string,\n    menuNodeName?: string,\n    initiallyVisible: boolean = true\n  ) {\n    this.loadingManager.addLoadableItem(`parse_obj_${name}`);\n    this.graphicsLibrary.parseOBJGeometry(content, name, initiallyVisible);\n    this.ui.addGeometry(name, 0x000fff, menuNodeName, initiallyVisible);\n  }\n\n  /**\n   * Exports scene to OBJ file format.\n   */\n  public exportToOBJ() {\n    this.graphicsLibrary.exportSceneToOBJ();\n    this.infoLogger.add('Exported scene to OBJ');\n  }\n\n  /**\n   * Parse and load an event from the Phoenix file format (.phnx).\n   * @param input Content containing the JSON with event data\n   * and other configuration.\n   * @returns Promise for loading the geometry.\n   */\n  public parsePhoenixDisplay(input: any): Promise {\n    const phoenixScene = JSON.parse(input);\n\n    if (phoenixScene.sceneConfiguration && phoenixScene.scene) {\n      // Creating UI folder\n      this.ui.addEventDataFolder();\n      this.ui.addLabelsFolder();\n      // Clearing existing event data\n      this.graphicsLibrary.clearEventData();\n      // Add to scene\n      this.loadSceneConfiguration(phoenixScene.sceneConfiguration);\n\n      this.loadingManager.addLoadableItem(`parse_phnx_${name}`);\n      return this.graphicsLibrary.parsePhnxScene(phoenixScene.scene);\n    }\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   */\n  public exportPhoenixDisplay() {\n    this.graphicsLibrary.exportPhoenixScene();\n  }\n\n  /**\n   * Parses and loads a geometry in GLTF (.gltf) format.\n   * @param input Data of the GLTF (.gltf) file.\n   * @param name Name given to the geometry.\n   * @returns Promise for loading the geometry.\n   */\n  public parseGLTFGeometry(\n    input: string | ArrayBuffer,\n    name: string\n  ): Promise {\n    this.loadingManager.addLoadableItem(`parse_gltf_${name}`);\n    this.ui.addGeometry(name, undefined);\n    this.infoLogger.add(name, 'Parsed GLTF geometry');\n    return this.graphicsLibrary.parseGLTFGeometry(input, name);\n  }\n\n  /**\n   * Loads a GLTF (.gltf) scene/geometry from the given URL.\n   * and adds it to the dat.GUI menu.\n   * @param url URL to the GLTF (.gltf) file.\n   * @param name Name of the loaded scene/geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   * @returns Promise for loading the geometry.\n   */\n  public loadGLTFGeometry(\n    url: any,\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    initiallyVisible: boolean = true\n  ): Promise {\n    this.loadingManager.addLoadableItem(`gltf_geom_${name}`);\n    this.ui.addGeometry(name, undefined, menuNodeName, initiallyVisible);\n    this.infoLogger.add(name, 'Loaded GLTF geometry');\n    return this.graphicsLibrary.loadGLTFGeometry(\n      url,\n      name,\n      scale,\n      initiallyVisible\n    );\n  }\n\n  /**\n   * Loads geometries from JSON.\n   * @param json JSON or URL to JSON file of the geometry.\n   * @param name Name of the geometry or group of geometries.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   * @returns Promise for loading the geometry.\n   */\n  public loadJSONGeometry(\n    json: string | { [key: string]: any },\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true\n  ): Promise {\n    this.loadingManager.addLoadableItem(`json_geom_${name}`);\n    this.ui.addGeometry(name, undefined, menuNodeName, initiallyVisible);\n    this.infoLogger.add(name, 'Loaded JSON geometry');\n    return this.graphicsLibrary.loadJSONGeometry(\n      json,\n      name,\n      scale,\n      doubleSided,\n      initiallyVisible\n    );\n  }\n\n  /**\n   * Load JSON geometry from JSRoot.\n   * @param JSROOT JSRoot object containing all the JSROOT functions.\n   * @param url URL of the JSRoot geometry file.\n   * @param name Name of the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public loadRootJSONGeometry(\n    JSROOT: any,\n    url: string,\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true\n  ) {\n    this.loadingManager.addLoadableItem('root_json_geom');\n    JSROOT.NewHttpRequest(url, 'object', (obj: any) => {\n      this.loadJSONGeometry(\n        JSROOT.GEO.build(obj, { dflt_colors: true }).toJSON(),\n        name,\n        menuNodeName,\n        scale,\n        doubleSided,\n        initiallyVisible\n      );\n      this.loadingManager.itemLoaded('root_json_geom');\n    }).send();\n  }\n\n  /**\n   * Load ROOT geometry from JSRoot.\n   * @param JSROOT JSRoot object containing all the JSROOT functions.\n   * @param url URL of the JSRoot file.\n   * @param objectName Name of the object inside the \".root\" file.\n   * @param name Name of the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public loadRootGeometry(\n    JSROOT: any,\n    url: string,\n    objectName: string,\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true\n  ) {\n    if (url.indexOf('.root') > 0) {\n      JSROOT.openFile(url).then((file: any) => {\n        file.readObject(objectName).then((obj: any) => {\n          this.loadJSONGeometry(\n            JSROOT.GEO.build(obj, { dflt_colors: true }).toJSON(),\n            name,\n            menuNodeName,\n            scale,\n            doubleSided,\n            initiallyVisible\n          );\n        });\n      });\n    }\n  }\n\n  /**\n   * Build Geometry from thr passed parameters, where\n   * @param parameters\n   */\n  public buildGeometryFromParameters(parameters: any): void {\n    this.graphicsLibrary.addGeometryFromParameters(parameters);\n  }\n\n  /**\n   * Zoom all the cameras by a specific zoom factor.\n   * The factor may either be greater (zoom in) or smaller (zoom out) than 1.\n   * @param zoomFactor The factor to zoom by.\n   * @param zoomTime The time it takes for a zoom animation to complete.\n   */\n  public zoomTo(zoomFactor: number, zoomTime: number) {\n    this.graphicsLibrary.zoomTo(zoomFactor, zoomTime);\n  }\n\n  /**\n   * Processes event data and geometry for Loading the scene\n   * from Phoenix file format (.phnx).\n   * @param sceneConfiguration Scene configuration containingevent data and detector geometry.\n   */\n  private loadSceneConfiguration(sceneConfiguration: {\n    eventData: { [key: string]: any };\n    geometries: any[];\n  }) {\n    for (const objectType of Object.keys(sceneConfiguration.eventData)) {\n      const { typeFolder, typeFolderPM } =\n        this.ui.addEventDataTypeFolder(objectType);\n      const collections = sceneConfiguration.eventData[objectType];\n      for (const collection of collections) {\n        this.ui.addCollection({ typeFolder, typeFolderPM }, collection);\n      }\n    }\n\n    for (const geom of sceneConfiguration.geometries) {\n      this.ui.addGeometry(geom, '#ffffff');\n    }\n  }\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  public getCollection(collectionName: string) {\n    return this.configuration.eventDataLoader.getCollection(collectionName);\n  }\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  public getCollections(): string[] {\n    return this.configuration.eventDataLoader.getCollections();\n  }\n\n  /**\n   * Add a callback to onDisplayedEventChange array to call\n   * the callback on changes to the displayed event.\n   * @param callback Callback to be added to the onDisplayedEventChange array.\n   */\n  public listenToDisplayedEventChange(callback: (event) => any) {\n    this.onDisplayedEventChange.push(callback);\n  }\n\n  /**\n   * Add a callback to onEventsChange array to call\n   * the callback on changes to the events.\n   * @param callback Callback to be added to the onEventsChange array.\n   */\n  public listenToLoadedEventsChange(callback: (events) => any) {\n    this.onEventsChange.push(callback);\n  }\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  public getEventMetadata(): any[] {\n    return this.configuration.eventDataLoader.getEventMetadata();\n  }\n\n  /**\n   * Enables calling specified event display methods in console.\n   */\n  private enableEventDisplayConsole() {\n    // Defining an EventDisplay object in window to access methods through console\n    window.EventDisplay = {\n      loadGLTFGeometry: (sceneUrl: string, name: string) => {\n        this.loadGLTFGeometry(sceneUrl, name);\n      },\n      loadOBJGeometry: (\n        filename: string,\n        name: string,\n        colour: any,\n        menuNodeName: string,\n        doubleSided: boolean\n      ) => {\n        this.loadOBJGeometry(filename, name, colour, menuNodeName, doubleSided);\n      },\n      loadJSONGeometry: (\n        json: string | { [key: string]: any },\n        name: string,\n        menuNodeName: string,\n        scale?: number,\n        doubleSided?: boolean,\n        initiallyVisible: boolean = true\n      ) => {\n        this.loadJSONGeometry(\n          json,\n          name,\n          menuNodeName,\n          scale,\n          doubleSided,\n          initiallyVisible\n        );\n      },\n      buildGeometryFromParameters: (parameters: { [key: string]: any }) =>\n        this.buildGeometryFromParameters(parameters),\n      scene: this.getThreeManager().getSceneManager().getScene(),\n    };\n  }\n\n  /**\n   * Sets the renderer to be used to render the event display on the overlayed canvas.\n   * @param overlayCanvas An HTML canvas on which the overlay renderer is to be set.\n   */\n  public setOverlayRenderer(overlayCanvas: HTMLCanvasElement) {\n    this.graphicsLibrary.setOverlayRenderer(overlayCanvas);\n  }\n\n  /**\n   * Initializes the object which will show information of the selected geometry/event data.\n   * @param selectedObject Object to display the data.\n   */\n  public allowSelection(selectedObject: { name: string; attributes: any[] }) {\n    this.graphicsLibrary.setSelectedObjectDisplay(selectedObject);\n  }\n\n  /**\n   * Toggles the ability of selecting geometries/event data by clicking on the screen.\n   * @param enable Value to enable or disable the functionality.\n   */\n  public enableSelecting(enable: boolean) {\n    this.graphicsLibrary.enableSelecting(enable);\n  }\n\n  /**\n   * Fixes the camera position of the overlay view.\n   * @param fixed Whether the overlay view is to be fixed or not.\n   */\n  public fixOverlayView(fixed: boolean) {\n    this.graphicsLibrary.fixOverlayView(fixed);\n  }\n\n  /**\n   * Get the uuid of the currently selected object.\n   * @returns uuid of the currently selected object.\n   */\n  public getActiveObjectId(): ActiveVariable {\n    return this.graphicsLibrary.getActiveObjectId();\n  }\n\n  /**\n   * Move the camera to look at the object with the given uuid\n   * and highlight it.\n   * @param uuid uuid of the object.\n   */\n  public lookAtObject(uuid: string) {\n    this.graphicsLibrary.lookAtObject(uuid);\n    this.graphicsLibrary.highlightObject(uuid);\n  }\n\n  /**\n   * Highlight the object with the given uuid by giving it an outline.\n   * @param uuid uuid of the object.\n   */\n  public highlightObject(uuid: string) {\n    this.graphicsLibrary.highlightObject(uuid);\n  }\n\n  /**\n   * Enable keyboard controls for the event display.\n   */\n  public enableKeyboardControls() {\n    this.ui.enableKeyboardControls();\n    this.graphicsLibrary.enableKeyboardControls();\n  }\n\n  /**\n   * Animate the camera through the event scene.\n   * @param startPos Start position of the translation animation.\n   * @param tweenDuration Duration of each tween in the translation animation.\n   * @param onAnimationEnd Callback when the last animation ends.\n   */\n  public animateThroughEvent(\n    startPos: number[],\n    tweenDuration: number,\n    onAnimationEnd?: () => void\n  ) {\n    this.graphicsLibrary.animateThroughEvent(\n      startPos,\n      tweenDuration,\n      onAnimationEnd\n    );\n  }\n\n  /**\n   * Animate scene by animating camera through the scene and animating event collision.\n   * @param animationPreset Preset for animation including positions to go through and\n   * event collision animation options.\n   * @param onEnd Function to call when the animation ends.\n   */\n  public animatePreset(animationPreset: AnimationPreset, onEnd?: () => void) {\n    this.graphicsLibrary.animatePreset(animationPreset, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateEventWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.graphicsLibrary.animateEventWithCollision(tweenDuration, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data\n   * using clipping planes after particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateClippingWithCollision(\n    tweenDuration: number,\n    onEnd?: () => void\n  ) {\n    this.graphicsLibrary.animateClippingWithCollision(tweenDuration, onEnd);\n  }\n\n  /**\n   * Add label to a 3D object.\n   * @param label Label to add to the event object.\n   * @param collection Collection the event object is a part of.\n   * @param indexInCollection Event object's index in collection.\n   * @param uuid UUID of the three.js object.\n   */\n  public addLabelToObject(\n    label: string,\n    collection: string,\n    indexInCollection: number,\n    uuid: string\n  ) {\n    const labelId = this.configuration.eventDataLoader.addLabelToEventObject(\n      label,\n      collection,\n      indexInCollection\n    );\n\n    // Remove the label if the string is empty\n    if (!label) {\n      this.ui.removeLabel(labelId, true);\n      return;\n    }\n\n    this.ui.addLabel(labelId);\n    this.graphicsLibrary.addLabelToObject(label, uuid, labelId);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/XRManager.html":{"url":"classes/XRManager.html","title":"class - XRManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  XRManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/xr-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                XR manager for XR related operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraGroup\n                            \n                            \n                                    Protected\n                                currentXRSession\n                            \n                            \n                                    Protected\n                                onSessionEnded\n                            \n                            \n                                    Protected\n                                renderer\n                            \n                            \n                                    Protected\n                                sessionInit\n                            \n                            \n                                    Protected\n                                xrActive\n                            \n                            \n                                    Public\n                                xrCamera\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                endXRSession\n                            \n                            \n                                    Public\n                                getCameraGroup\n                            \n                            \n                                    Public\n                                getXRCamera\n                            \n                            \n                                    Protected\n                                onXRSessionEnded\n                            \n                            \n                                    Protected\n                                    Async\n                                onXRSessionStarted\n                            \n                            \n                                    Public\n                                setXRSession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionType: XRSessionType)\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/xr-manager.ts:31\n                            \n                        \n\n                \n                    \n                            Create the XR manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sessionType\n                                                  \n                                                        \n                                                                        XRSessionType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Type of the session, either AR or VR.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cameraGroup\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Group\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr-manager.ts:29\n                        \n                    \n\n            \n                \n                    Group containing the the camera for XR.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        currentXRSession\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr-manager.ts:25\n                        \n                    \n\n            \n                \n                    Currently active XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onSessionEnded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr-manager.ts:27\n                        \n                    \n\n            \n                \n                    Callback to call when the XR session ends.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr-manager.ts:23\n                        \n                    \n\n            \n                \n                    Renderer to set the XR session for.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        sessionInit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr-manager.ts:21\n                        \n                    \n\n            \n                \n                    Returns required and optional features when requesting an XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        xrActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr-manager.ts:19\n                        \n                    \n\n            \n                \n                    Whether the XR is currently active or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        xrCamera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr-manager.ts:31\n                        \n                    \n\n            \n                \n                    The camera used by XR.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        endXRSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    endXRSession()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/xr-manager.ts:94\n                \n            \n\n\n            \n                \n                    End the current XR session.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCameraGroup\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraGroup(camera?: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/xr-manager.ts:104\n                \n            \n\n\n            \n                \n                    Get the group containing the camera for XR.\nXR camera works by adding a Group with Camera to the scene.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Camera which is to be cloned for XR use.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Group\n\n                    \n                    \n                        The camera group used in XR mode.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getXRCamera\n                        \n                    \n                \n            \n            \n                \n                    \n                    getXRCamera()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/xr-manager.ts:130\n                \n            \n\n\n            \n                \n                    Get the camera used by XR.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The camera used by XR.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        onXRSessionEnded\n                        \n                    \n                \n            \n            \n                \n                    \n                    onXRSessionEnded()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/xr-manager.ts:83\n                \n            \n\n\n            \n                \n                    Callback when the XR session ends.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        onXRSessionStarted\n                        \n                    \n                \n            \n            \n                \n                    \n                    onXRSessionStarted(session: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/xr-manager.ts:73\n                \n            \n\n\n            \n                \n                    Callback for when the XR session is started.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The XR session.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setXRSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    setXRSession(renderer: WebGLRenderer, onSessionStarted?: () => void, onSessionEnded?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/xr-manager.ts:48\n                \n            \n\n\n            \n                \n                    Set and configure the XR session.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer to set the XR session for.\n\n                                    \n                                \n                                \n                                    onSessionStarted\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the XR session starts.\n\n                                    \n                                \n                                \n                                    onSessionEnded\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the XR session ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Camera, Group, Vector3, WebGLRenderer, XRSessionInit } from 'three';\n\n// NOTE: This was created on 28/06/2021\n// It might become outdated given how WebXR is still a work in progress\n\n// LAST UPDATED ON 29/06/2021\n\n/** Type of the XR session. */\nexport enum XRSessionType {\n  VR = 'VR',\n  AR = 'AR',\n}\n\n/**\n * XR manager for XR related operations.\n */\nexport class XRManager {\n  /** Whether the XR is currently active or not. */\n  protected xrActive: boolean = false;\n  /** Returns required and optional features when requesting an XR session. */\n  protected sessionInit: () => XRSessionInit & { [key: string]: any };\n  /** Renderer to set the XR session for. */\n  protected renderer: WebGLRenderer;\n  /** Currently active XR session. */\n  protected currentXRSession: any = null;\n  /** Callback to call when the XR session ends. */\n  protected onSessionEnded: () => void;\n  /** Group containing the the camera for XR. */\n  public cameraGroup: Group;\n  /** The camera used by XR. */\n  public xrCamera: Camera;\n\n  /**\n   * Create the XR manager.\n   * @param sessionType Type of the session, either AR or VR.\n   * @param sessionInit Other options for the session like optional features.\n   */\n  constructor(\n    private sessionType: XRSessionType\n  ) {}\n\n  /**\n   * Set and configure the XR session.\n   * @param renderer Renderer to set the XR session for.\n   * @param onSessionStarted Callback to call when the XR session starts.\n   * @param onSessionEnded Callback to call when the XR session ends.\n   */\n  public setXRSession(\n    renderer: WebGLRenderer,\n    onSessionStarted?: () => void,\n    onSessionEnded?: () => void\n  ) {\n    this.renderer = renderer;\n    this.onSessionEnded = onSessionEnded;\n    const webXR = (navigator as any)?.xr;\n    const xrType = this.sessionType === XRSessionType.VR ? 'vr' : 'ar';\n\n    webXR\n      ?.requestSession(`immersive-${xrType}`, this.sessionInit?.())\n      .then((session: any) => {\n        this.onXRSessionStarted.bind(this)(session);\n        onSessionStarted?.();\n      })\n      .catch((error: any) => {\n        console.error(`${xrType.toUpperCase()} Error:`, error);\n      });\n  }\n\n  /**\n   * Callback for when the XR session is started.\n   * @param session The XR session.\n   */\n  protected async onXRSessionStarted(session: any) {\n    this.xrActive = true;\n    session.addEventListener('end', this.onXRSessionEnded.bind(this));\n    await this.renderer.xr.setSession(session);\n    this.currentXRSession = session;\n  }\n\n  /**\n   * Callback when the XR session ends.\n   */\n  protected onXRSessionEnded() {\n    this.xrActive = false;\n    this.currentXRSession.removeEventListener('end', this.onXRSessionEnded);\n    this.currentXRSession = null;\n    this.cameraGroup = undefined;\n    this.onSessionEnded?.();\n  }\n\n  /**\n   * End the current XR session.\n   */\n  public endXRSession() {\n    this.currentXRSession?.end();\n  }\n\n  /**\n   * Get the group containing the camera for XR.\n   * XR camera works by adding a Group with Camera to the scene.\n   * @param camera Camera which is to be cloned for XR use.\n   * @returns The camera group used in XR mode.\n   */\n  public getCameraGroup(camera?: Camera): Group {\n    // Set up the camera position in the XR - Adding a group with camera does it\n    if (!this.cameraGroup) {\n      this.cameraGroup = new Group();\n    }\n    if (camera && this.xrActive) {\n      this.xrCamera = this.renderer.xr\n        .getCamera(new Camera())\n        .copy(camera.clone() as Camera);\n      this.xrCamera.name = 'XR_CAMERA';\n\n      const cameraPosition =\n        this.sessionType === XRSessionType.VR\n          ? this.xrCamera.position\n          : new Vector3(0, 0, 0.1);\n      this.cameraGroup.position.copy(cameraPosition);\n      this.cameraGroup.add(this.xrCamera);\n    }\n\n    return this.cameraGroup;\n  }\n\n  /**\n   * Get the camera used by XR.\n   * @returns The camera used by XR.\n   */\n  public getXRCamera() {\n    return this.xrCamera;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file.\nSee Conventional Commits for commit guidelines.\n2.2.0 (2021-08-03)\nBug Fixes\n\nevent-display: fix AR not working in playground (7f35fdb)\nevent-display: fix bug in jive xml loader (39241a4)\nevent-display: fix collection color not working with load state (4603dbc)\nevent-display: fix load state throwing error (16ea0df)\nevent-display: fix tests (7e9c733)\nevent-display: increase max cut value for jets (9f4cf7c), closes #336\nevent-display: use coneR, if available, to determine jet width (d4b62c2)\nFix linting issues and update code (dc7d74a)\n\nFeatures\n\nevent-display: add option to scale vertices (08c8e00)\nevent-display: improve handling of scale option and add it for vertices (34d9b2c)\nupdate all packages including Angular (9a88331)\nupdate packages except Angular (26eff0e)\nupgrade all packages (36486b8)\napp: option to start AR with or without DOM overlay (9a6c243)\nevent-display: JiveXML, load coneR (set default if missing). (867d28a)\nevent-display: make background transparent in AR mode (46b8aee)\nevent-display: use dom overlay for AR (c897ab3)\nevent-display: use DOM overlay for AR (a5eaa34)\n\n2.1.0 (2021-06-28)\nBug Fixes\n\napp: clean packages not used in phoenix-ng (037af62)\nevent-display: bug when handling out-of-bounds theta (717304e)\nevent-display: cuts to match pT values (62ae417)\nevent-display: fix pt scale of compound objects for JiveXML (a821e42)\nevent-display: handle track pT as p (scale correctly) (7b839e3)\nevent-display: simplify handling of compound objs needing a track extrapolation (3daabc5)\nevent-display: since can scale jets, no longer limit length (bb41683)\n\nFeatures\n\nevent-display: add AR manager (3017ca9)\nevent-display: add docs to AR manager (5334996)\nevent-display: add scene to window EventDisplay object (07d8633)\nevent-display: combine repeating code for VR and AR into XR (50fc5f7)\nevent-display: create a common xr-manager (2700aaf)\nevent-display: extend ARManager from XRManager (ae76d4a)\nevent-display: extend VRManager from XRManager (15dd07c)\nevent-display: handle camera position differently for AR (5894cac)\nevent-display: refactor to make general getCompound from getMuon (dfe8e8d)\nevent-display: setup AR with event display (8e7396f)\nevent-display: use new extrapolationLimit of RKHelper and better debug output (14e4cbb)\nevent-display: use workaround to manage scale in AR (a5481e1)\nevent-display: working AR setup in event display (fdd492a)\n\n2.0.0 (2021-06-08)\nBug Fixes\n\nevent-display: add energy cut, refactor (000ab78)\nevent-display: attempt to improve robustness of tracks (689da29)\nevent-display: better debugging info and prettier (df9ce07)\nevent-display: fix #289 cluster rendering (1a01248)\nevent-display: fix collision animation (3e5d80d)\nevent-display: fix eta calculation for JiveXML (6dbd797)\nevent-display: fix phoenix menu node types (1af6ae2)\nevent-display: fix too many params for hits (8b994a7)\nevent-display: fixes and improvements for track import from JiveXML (c92d65f)\nevent-display: persist cuts when collection is toggled (1dd0431)\nevent-display: properly display the PlanarCalorimeters (f41920b)\nevent-display: random colors for collections and fix color by vertex (303187a)\nevent-display: use line animation for line hit (df425ee)\nfix misc errors and improve styles (124a272)\nevent-display: rk-helper should use CoordinateHelper (6085f50)\n\nFeatures\n\napp: add embed in sharable link constructor (8a0c0b1)\napp: add embed menu with a URL option for embed (56c6eff)\napp: add load progress based on number of loaded items (20ef288)\napp: improve background colors (2c97f5c)\napp: setup for preset scene animations (6e919e1)\nevent-display: add a sample animation preset (e07725a)\nevent-display: add color by vertex options (d2e0547)\nevent-display: add color options to tracks collections (90aea3c)\nevent-display: add docs for color options class (6cd5d53)\nevent-display: add embed option to URL (cb68283)\nevent-display: add function to animate scene (a411631)\nevent-display: add momentum color options UI (f1d2cef)\nevent-display: add types for Phoenix menu configs (68f3d45)\nevent-display: code improvement for momentum sliders (1a17e99)\nevent-display: color options for event data objects (9908cc9)\nevent-display: complete types for phoenix menu node (cc04d5a)\nevent-display: divide collection config options into child nodes (2e52c22)\nevent-display: highly optimize and generalize color by options (595d9e5)\nevent-display: implement color by momentum (9222e04)\nevent-display: implement embed menu (872f708)\nevent-display: improve preset animation (2371f75)\nupdate all packages (7d2eb64)\nevent-display: create coloring manager and color tracks by properties (c446567)\nevent-display: improve color manager code (3839578)\nevent-display: only show selected color by options (3041166)\nevent-display: type changes for phoenix menu (9a79692)\nevent-display: use child node for collection's color options (8559830)\nevent-display: use class for color options in UI (4acca1a)\nevent-dosplay: improve processing of PlanarCaloCells in Phoenix loader (5a8fe9f)\n\n1.9.0 (2021-05-16)\nBug Fixes\n\nevent-display: add energy cut, refactor (000ab78)\nevent-display: attempt to improve robustness of tracks (689da29)\nevent-display: better debugging info and prettier (df9ce07)\nevent-display: fix #289 cluster rendering (1a01248)\nevent-display: fix eta calculation for JiveXML (6dbd797)\nevent-display: fix phoenix menu node types (1af6ae2)\nevent-display: fixes and improvements for track import from JiveXML (c92d65f)\nevent-display: properly display the PlanarCalorimeters (f41920b)\nevent-display: rk-helper should use CoordinateHelper (6085f50)\n\nFeatures\n\napp: add embed in sharable link constructor (8a0c0b1)\napp: add embed menu with a URL option for embed (56c6eff)\napp: add load progress based on number of loaded items (20ef288)\nevent-display: add color by vertex options (d2e0547)\nevent-display: add color options to tracks collections (90aea3c)\nevent-display: add docs for color options class (6cd5d53)\nevent-display: add embed option to URL (cb68283)\nevent-display: add momentum color options UI (f1d2cef)\nevent-display: add types for Phoenix menu configs (68f3d45)\nevent-display: code improvement for momentum sliders (1a17e99)\nevent-display: color options for event data objects (9908cc9)\nevent-display: complete types for phoenix menu node (cc04d5a)\nevent-display: create coloring manager and color tracks by properties (c446567)\nevent-display: divide collection config options into child nodes (2e52c22)\nevent-display: highly optimize and generalize color by options (595d9e5)\nevent-display: implement color by momentum (9222e04)\nevent-display: implement embed menu (872f708)\nevent-display: improve color manager code (3839578)\nevent-display: only show selected color by options (3041166)\nevent-display: type changes for phoenix menu (9a79692)\nevent-display: use child node for collection's color options (8559830)\nevent-display: use class for color options in UI (4acca1a)\nevent-dosplay: improve processing of PlanarCaloCells in Phoenix loader (5a8fe9f)\n\n1.8.0 (2021-05-01)\nBug Fixes\n\nevent-display: better debugging info and prettier (df9ce07)\nevent-display: fix #289 cluster rendering (1a01248)\nevent-display: fixes and improvements for track import from JiveXML (c92d65f)\nevent-display: rk-helper should use CoordinateHelper (6085f50)\n\nFeatures\n\napp: add embed in sharable link constructor (8a0c0b1)\napp: add embed menu with a URL option for embed (56c6eff)\napp: add load progress based on number of loaded items (20ef288)\nevent-display: add color options to tracks collections (90aea3c)\nevent-display: add docs for color options class (6cd5d53)\nevent-display: add embed option to URL (cb68283)\nevent-display: add momentum color options UI (f1d2cef)\nevent-display: code improvement for momentum sliders (1a17e99)\nevent-display: color options for event data objects (9908cc9)\nevent-display: create coloring manager and color tracks by properties (c446567)\nevent-display: divide collection config options into child nodes (2e52c22)\nevent-display: highly optimize and generalize color by options (595d9e5)\nevent-display: implement color by momentum (9222e04)\nevent-display: implement embed menu (872f708)\nevent-display: use child node for collection's color options (8559830)\nevent-display: use class for color options in UI (4acca1a)\n\n1.7.0 (2021-04-21)\nBug Fixes\n\nevent-display: attempt to improve the output of the track extension by removing close hits (5bdc562)\nevent-display: fix drawing of hits (db3ca8b)\nevent-display: handle older json hit format again (edcd567)\n\n1.6.0 (2021-04-18)\nBug Fixes\n\napp: add sphericalToCartesian method (bbea6b0)\nevent-display: add back in geometrical limits for clusters (0b95e5b)\nevent-display: add eta and phi cuts for tracks (f8a0080)\nevent-display: add missing docs (c9781e5)\nevent-display: add missing documentation (236bdf4)\nevent-display: calocluster eta position was wrong. (66cbbc0)\nevent-display: cleanup JixeXML loader (6a834e8)\nevent-display: prettier fixes (7528ee0)\nevent-display: run prettier (again) (f279898)\nevent-display: use BufferGeometry for CMS objects with new three.js update (b8e88b8)\n\nFeatures\n\napp: bind clipping state with UI menu (40bbba0)\napp: complete dialog for share link and embed (50c2584)\napp: setup link share form (b10bb7a)\nevent-display: ability to remove geometry in Phoenix menu (7d90d72)\nevent-display: ability to scale CaloClusters (ff666e2)\nevent-display: add ability to scale clusters in just one direction (5a562ab), closes #257\nevent-display: add coordinate helper (57e438f)\nevent-display: add guidelines and simplify some coordinate transformations (56f94f0)\nevent-display: Add missing energy (6ef17d0)\nevent-display: add opacity and wireframe for CaloClusters (85d4a14)\nevent-display: add support for HitLines (455f536)\nevent-display: add types for dat.GUI (7632a18)\nevent-display: create an active observable variable (854e543)\nevent-display: improve grid lines (ca3cc2f)\nevent-display: improve handling of UI menus in UI manager (b7a324a)\nevent-display: introduce new URL options and improve handling them (f7cd6b4)\nevent-display: JiveXML : add support for more hit types (bbcdf0c)\nevent-display: keep state of event data folder on event switch (b52282f)\nevent-display: make Phoenix available in browser without a namespace (5389282)\nevent-display: move opacity and wireframing to collection level (6486982)\nevent-display: options for CaloClusters (68cd7ad)\nevent-display: Remove LineHits and use hits to extend tracks (30b5160)\nevent-display: restructure phoenix-event-display (2e16371)\nevent-display: separate dat.GUI UI menu (29093a2)\nevent-display: separate Phoenix menu UI from UI manager (5743adc)\nevent-display: split dat.GUI menu options (45a0123)\nevent-display: start splitting UI manager (56ff275)\nevent-display: use run and event number and file name for config json (03a1de4)\nupgrade all packages except three.js (8e2eff4)\nupgrade three.js except for CMSObjects (0b2dd8a)\n\n1.5.0 (2021-03-24)\nBug Fixes\n\nevent-display: catch VR request session error (d2874b8)\nevent-display: fix jsroot loading root file (8cbcaa5)\nevent-display: handle tracks with no positions (3b1991c)\nevent-display: improve renderer init (a8f8353)\nevent-display: remove optimize controls function (266af04)\nevent-display: remove redundant import (359d353)\nevent-display: use per physics object color and not collection color (ac0c4f1)\nremove JSROOT source files from repo (7bcd7ba)\n\nFeatures\n\napp: ability to import ig archive in CMS (9540af5)\napp: Add more realistic geometry for ATLAS (d207bad)\nevent-display: allow resize and improve tests and drop improving CPU usage (a474af2)\nevent-display: resize canvas with window resize (5ea04f1)\nevent-display: update to use CDN for JSROOT (2fa310f)\nevent-display: use latest version of JSROOT (fbd584e)\n\n1.4.0 (2021-02-16)\nBug Fixes\n\nevent-display: disable keyboard controls when typing (4f80bd6)\nevent-display: improve object selection from uuid and label input (3475836)\nevent-display: persist toggle state of phoenix menu node children (e96136b)\nevent-display: remove rollup config and fix globalThis usage (e6f69a0)\n\nFeatures\n\nevent-display: ability to add 3D label text (c9d4880)\nevent-display: add labels configuration to dat.GUI menu (d677089)\nevent-display: add labels to UI configuration (d90e3a6)\nevent-display: add size and color options for labels (3ce675f)\nevent-display: better handling of labels object (e10a68d)\nevent-display: complete setup with webpack for browser (3f6367f)\nevent-display: complete support to save and load labels (2219a3e)\nevent-display: create a url options manager for url options (fe0b2e6)\nevent-display: create generic function for getting object position (8d7b160)\nevent-display: delete label on empty value and change add label icon (3756330)\nevent-display: make label always look at camera (0837334)\nevent-display: set up add label to object functions (db261a6)\nevent-display: setup webpack for browser bundle (dc05ed9)\nevent-display: support to hide widgets through URL (cb2ec40)\nevent-display: use optional chaining for hide widgets url option (c991e54)\nevent-display: Use types for phoenix menu configuration (79e6d7c)\nevent-display: working labels object (60269f7)\nUpdate Angular and all packages to latest (f4c2e31)\n\n1.3.0 (2021-01-16)\nBug Fixes\n\nevent-display: assign the right name to geometry (b7e8da0)\nevent-display: code improvements (f94c0e4)\nevent-display: fix parsing of GLTF geometry (dc5d489)\nevent-display: improve code for hiding tube tracks (e9f1bc9)\nevent-display: minor script fix (5139c6e)\nevent-display: remove color from obj file userdata (8ba94e7)\nevent-display: revert jasmine spec files (dc140dd)\nevent-display: try fixing CMSLoader tests (789da8b)\n\nFeatures\n\nevent-display: display size on selection (6943f79)\nevent-display: hide tube tracks on zoom (7d606b2)\n\n1.2.0 (2020-12-06)\nBug Fixes\n\nevent-display: add Edward's controller set up (a6a1c19)\nevent-display: changes to animation loop for VR (37df19f)\nevent-display: finally fix VR completely (4764196)\nevent-display: fix applying multiple cuts at the same time (8f3e8e1)\nevent-display: fix applying state for range slider (c36a222)\nevent-display: fix loading and add default view to experiments (ab8feb4)\nevent-display: initialize cuts with correct values (e297c98)\nevent-display: make it possible to flat shade (dcf6cec)\nevent-display: optimal animation loop set up (da3ead5)\nevent-display: optimal render for effects manager (1975d70)\nevent-display: reset clipping on init (029d526)\nevent-display: stop animation loop on home (c39ecd3)\nevent-display: update configuration in tests (18f8db2)\n\nFeatures\n\napp: add toggle for screenshot mode (22a1ec8)\napp: make loader generic (ff10477)\napp: set up performance mode with selection (947f6bf)\napp: use event display loader in Angular component (25b2a9d)\nevent-display: ability to add geometry to a menu folder (30b0383)\nevent-display: ability to initialize event display without init (69d3f75)\nevent-display: add ability to add parametrised geometry (04dc545)\nevent-display: add and set up loading manager (5f0f942)\nevent-display: handle loading better (9474565)\nevent-display: make loading functions return Promise for async await (4262a1b)\nevent-display: performance mode and antialias support (d3920c4)\nevent-display: support for toggling antialiasing (48130b2)\nevent-display: use object to simplify configuration (4b10452)\n\n1.1.0 (2020-11-07)\nBug Fixes\n\napp: cut filter failed if value return was zero (0a26fea)\napp: cut should be pT, not mom (73b7c27)\napp: fix attribute pipe (0980379)\napp: fix tests (f87c587)\napp: pT should always be positive (3918159)\nevent-display: add optional chaining to CMS event info (fixes tests) (5283e9a)\nevent-display: fix geometry too big in overlay view (c7a35db)\nevent-display: fix URL event not working with hash routes (9eb21f5)\nevent-display: Formatted correctly (b46c49f)\nevent-display: use optional chaining in CMS loader (cfb1b6a)\nVR: Fix bugged scene in VR mode (9efd9ca)\n\nFeatures\n\napp: Option to load config from URL in ATLAS (1906976)\napp: phoenix-ui-components library (17909eb)\napp: yet another MAJOR refactoring (1261358)\nevent-display: add defaultView to configuration (612205c)\nevent-display: implicitly load event data from URL (9e3dc20)\nevent-display: state manager for managing event display state for save and load (7d1ca22)\n\n1.0.2 (2020-10-05)\n\nComplete deployment set up (399ac77)\n\n1.0.1 (2020-10-05)\nNote: Version bump only for package phoenix-event-display\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/event-display.ts\n            \n            class\n            EventDisplay\n            \n                100 %\n                (54/54)\n            \n        \n        \n            \n                \n                src/event-display.ts\n            \n            interface\n            Window\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/extras/configuration.ts\n            \n            interface\n            Configuration\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/extras/cut.model.ts\n            \n            class\n            Cut\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/extras/preset-view.model.ts\n            \n            class\n            PresetView\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/helpers/active-variable.ts\n            \n            class\n            ActiveVariable\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/helpers/constants.ts\n            \n            variable\n            EVENT_DATA_TYPE_COLORS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/coordinate-helper.ts\n            \n            class\n            CoordinateHelper\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/helpers/file.ts\n            \n            variable\n            loadFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/file.ts\n            \n            variable\n            saveFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/info-logger.ts\n            \n            class\n            InfoLogger\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/helpers/pretty-symbols.ts\n            \n            class\n            PrettySymbols\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/helpers/rk-helper.ts\n            \n            class\n            RKHelper\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            Field\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            RungeKutta\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            State\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/loaders/cms-loader.ts\n            \n            class\n            CMSLoader\n            \n                100 %\n                (33/33)\n            \n        \n        \n            \n                \n                src/loaders/event-data-loader.ts\n            \n            interface\n            EventDataLoader\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/loaders/jivexml-loader.ts\n            \n            class\n            JiveXMLLoader\n            \n                100 %\n                (39/39)\n            \n        \n        \n            \n                \n                src/loaders/jsroot-event-loader.ts\n            \n            class\n            JSRootEventLoader\n            \n                100 %\n                (29/29)\n            \n        \n        \n            \n                \n                src/loaders/lhcb-loader.ts\n            \n            class\n            LHCbLoader\n            \n                100 %\n                (24/24)\n            \n        \n        \n            \n                \n                src/loaders/objects/cms-objects.ts\n            \n            class\n            CMSObjects\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/loaders/objects/phoenix-objects.ts\n            \n            class\n            PhoenixObjects\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/loaders/phoenix-loader.ts\n            \n            class\n            PhoenixLoader\n            \n                100 %\n                (21/21)\n            \n        \n        \n            \n                \n                src/loaders/script-loader.ts\n            \n            class\n            ScriptLoader\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/loaders/script-loader.ts\n            \n            variable\n            JSROOT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/loaders/trackml-loader.ts\n            \n            class\n            TrackmlLoader\n            \n                100 %\n                (28/28)\n            \n        \n        \n            \n                \n                src/managers/loading-manager.ts\n            \n            class\n            LoadingManager\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/managers/state-manager.ts\n            \n            class\n            StateManager\n            \n                100 %\n                (17/17)\n            \n        \n        \n            \n                \n                src/managers/three-manager/animations-manager.ts\n            \n            class\n            AnimationsManager\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/managers/three-manager/animations-manager.ts\n            \n            interface\n            AnimationPreset\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/managers/three-manager/ar-manager.ts\n            \n            class\n            ARManager\n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                src/managers/three-manager/color-manager.ts\n            \n            class\n            ColorManager\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/managers/three-manager/controls-manager.ts\n            \n            class\n            ControlsManager\n            \n                100 %\n                (36/36)\n            \n        \n        \n            \n                \n                src/managers/three-manager/effects-manager.ts\n            \n            class\n            EffectsManager\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/managers/three-manager/export-manager.ts\n            \n            class\n            ExportManager\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/managers/three-manager/import-manager.ts\n            \n            class\n            ImportManager\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                src/managers/three-manager/index.ts\n            \n            class\n            ThreeManager\n            \n                100 %\n                (65/65)\n            \n        \n        \n            \n                \n                src/managers/three-manager/renderer-manager.ts\n            \n            class\n            RendererManager\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/managers/three-manager/scene-manager.ts\n            \n            class\n            SceneManager\n            \n                100 %\n                (41/41)\n            \n        \n        \n            \n                \n                src/managers/three-manager/selection-manager.ts\n            \n            class\n            SelectionManager\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/managers/three-manager/vr-manager.ts\n            \n            class\n            VRManager\n            \n                100 %\n                (24/24)\n            \n        \n        \n            \n                \n                src/managers/three-manager/xr-manager.ts\n            \n            class\n            XRManager\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/color-options.ts\n            \n            class\n            ColorOptions\n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/dat-gui-ui.ts\n            \n            class\n            DatGUIMenuUI\n            \n                100 %\n                (20/20)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/index.ts\n            \n            class\n            UIManager\n            \n                100 %\n                (38/38)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts\n            \n            class\n            PhoenixMenuNode\n            \n                100 %\n                (24/24)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts\n            \n            class\n            PhoenixMenuUI\n            \n                100 %\n                (18/18)\n            \n        \n        \n            \n                \n                src/managers/url-options-manager.ts\n            \n            class\n            URLOptionsManager\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/managers/url-options-manager.ts\n            \n            variable\n            phoenixURLOptions\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @tweenjs/tween.js : ^17.4.0\n        \n            dat.gui : ^0.7.7\n        \n            jszip : ^3.6.0\n        \n            stats-js : ^1.0.1\n        \n            three : ^0.130.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ColorByOptionKeys   (src/.../color-options.ts)\n                        \n                        \n                            XRSessionType   (src/.../xr-manager.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/managers/ui-manager/color-options.ts\n    \n        \n            \n                \n                    \n                        \n                        ColorByOptionKeys\n                    \n                \n                    \n                        \n                            Keys for options available for coloring event data by.\n\n                        \n                    \n                        \n                            \n                                 CHARGE\n                            \n                        \n                        \n                            \n                                Value : charge\n                            \n                        \n                        \n                            \n                                 MOM\n                            \n                        \n                        \n                            \n                                Value : mom\n                            \n                        \n                        \n                            \n                                 VERTEX\n                            \n                        \n                        \n                            \n                                Value : vertex\n                            \n                        \n            \n        \n\n    src/managers/three-manager/xr-manager.ts\n    \n        \n            \n                \n                    \n                        \n                        XRSessionType\n                    \n                \n                    \n                        \n                            Type of the XR session.\n\n                        \n                    \n                        \n                            \n                                 VR\n                            \n                        \n                        \n                            \n                                Value : VR\n                            \n                        \n                        \n                            \n                                 AR\n                            \n                        \n                        \n                            \n                                Value : AR\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nPhoenix event display\n\n\n\nA highly modular and API driven experiment independent event display that uses three.js for processing and presenting detector geometry and event data.\nTo use in your application, install the package.\nnpm install phoenix-event-display\n# or\nyarn add phoenix-event-displayUsage\nAs a module\nTo create a simple event display.\n// Import required classes\nimport { EventDisplay, PhoenixLoader } from 'phoenix-event-display';\n\n// Create the event display\nconst eventDisplay = new EventDisplay();\n\n// Define the configuration\nconst configuration = {\n  elementId: '',\n  eventDataLoader: new PhoenixLoader() // or some other event data loader\n  // ... other configuration options\n};\n\n// Initialize the event display with the configuration\neventDisplay.init(configuration);\n\n// Load and parse event data in Phoenix format and display it\nfetch('path/to/event-data.json')\n  .then((res) => res.json())\n  .then((res) => {\n    eventDisplay.parsePhoenixEvents(res);\n  });\n\n// Load detector geometry\neventDisplay.loadOBJGeometry('path/to/geometry.obj', 'Detector OBJ', 0x8c8c8c /* color */);\nAs a standalone bundle\nPhoenix can be bundled and used directly in the HTML as a script. You can either use the CDN or build from source.\nTo build Phoenix as a bundle.\nyarn build:bundleThis will generate a file phoenix.min.js in the ./dist/bundle directory which can be included in your HTML code.\nWithout building, you can include the bundle directly from CDN.\n\n  \n    ...\n  \n\n  \n\n    \n\n    \n\n    \n      // Create the event display\n      const eventDisplay = new EventDisplay();\n\n      // Define the configuration\n      const configuration = {\n        elementId: 'eventDisplay',\n        eventDataLoader: new PhoenixLoader() // or some other event data loader\n        // ... other configuration options\n      };\n\n      // Initialize the event display with the configuration\n      eventDisplay.init(configuration);\n\n      // ... other event display functions\n    \n\n  \nExamples\n\nUsage in Angular (as a service)\nUsage in React\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    41 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CallbackFunction   (src/.../active-variable.ts)\n                        \n                        \n                            ColorByOption   (src/.../color-options.ts)\n                        \n                        \n                            ConfigButton   (src/.../config-types.ts)\n                        \n                        \n                            ConfigCheckbox   (src/.../config-types.ts)\n                        \n                        \n                            ConfigColor   (src/.../config-types.ts)\n                        \n                        \n                            ConfigLabel   (src/.../config-types.ts)\n                        \n                        \n                            ConfigRangeSlider   (src/.../config-types.ts)\n                        \n                        \n                            ConfigSelect   (src/.../config-types.ts)\n                        \n                        \n                            ConfigSlider   (src/.../config-types.ts)\n                        \n                        \n                            PhoenixMenuConfig   (src/.../config-types.ts)\n                        \n                        \n                            PhoenixMenuConfigs   (src/.../config-types.ts)\n                        \n                        \n                            UnionToIntersection   (src/.../config-types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/helpers/active-variable.ts\n    \n    \n        \n            \n                \n                    \n                    CallbackFunction\n                \n            \n            \n                \n                    Callback function type.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/managers/ui-manager/color-options.ts\n    \n    \n        \n            \n                \n                    \n                    ColorByOption\n                \n            \n            \n                \n                    Type for a single color by option.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/managers/ui-manager/phoenix-menu/config-types.ts\n    \n    \n        \n            \n                \n                    \n                    ConfigButton\n                \n            \n            \n                \n                    Type for Phoenix menu node \"button\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigCheckbox\n                \n            \n            \n                \n                    Type for Phoenix menu node \"checkbox\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigColor\n                \n            \n            \n                \n                    Type for Phoenix menu node \"color\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigLabel\n                \n            \n            \n                \n                    Type for Phoenix menu node \"label\" config.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigRangeSlider\n                \n            \n            \n                \n                    Type for Phoenix menu node \"rangeSlider\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigSelect\n                \n            \n            \n                \n                    Type for Phoenix menu node \"select\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigSlider\n                \n            \n            \n                \n                    Type for Phoenix menu node \"slider\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PhoenixMenuConfig\n                \n            \n            \n                \n                    Type for a single Phoenix menu config option.\n\n                \n            \n            \n                \n                            UnionToIntersection<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PhoenixMenuConfigs\n                \n            \n            \n                \n                    Type for all Phoenix menu mode configuration options.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UnionToIntersection\n                \n            \n            \n                \n                    Convert union type to intersection.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EVENT_DATA_TYPE_COLORS   (src/.../constants.ts)\n                        \n                        \n                            JSROOT   (src/.../script-loader.ts)\n                        \n                        \n                            loadFile   (src/.../file.ts)\n                        \n                        \n                            phoenixURLOptions   (src/.../url-options-manager.ts)\n                        \n                        \n                            saveFile   (src/.../file.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/helpers/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EVENT_DATA_TYPE_COLORS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  Hits: new Color(0xff0000),\n  Tracks: new Color(0xff0000),\n  Jets: new Color(0x2194ce),\n  CaloClusters: new Color(0xffd166),\n  MuonChambers: new Color(0xff0000),\n  Vertices: new Color(0xffd166),\n  MissingEnergy: new Color(0xffffff),\n  PlanarCaloCells: new Color(0xfff69a),\n}\n                    \n                \n\n            \n                \n                    Colors of different event data types.\n\n                \n            \n\n        \n    \n\n    src/loaders/script-loader.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        JSROOT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n            \n                \n                    Global JSROOT variable for accessing functions after loading JSRoot scripts.\n\n                \n            \n\n        \n    \n\n    src/helpers/file.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        loadFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  onFileRead: (data: string) => void,\n  contentType: string = 'application/json'\n) => {\n  // Create a mock input file element and use that to read the file\n  let inputFile = document.createElement('input');\n  inputFile.type = 'file';\n  inputFile.accept = contentType;\n  inputFile.onchange = (e: any) => {\n    const configFile = e.target?.files[0];\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      onFileRead?.(e.target.result.toString());\n\n      inputFile.remove();\n      inputFile = null;\n    };\n    reader.readAsText(configFile);\n  };\n  inputFile.click();\n}\n                    \n                \n\n            \n                \n                    Load a file from user by mocking an input element.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  data: string,\n  fileName: string,\n  contentType: string = 'application/json'\n) => {\n  const blob = new Blob([data], { type: contentType });\n  const tempAnchor = document.createElement('a');\n  tempAnchor.style.display = 'none';\n  tempAnchor.href = URL.createObjectURL(blob);\n  tempAnchor.download = fileName;\n  tempAnchor.click();\n  tempAnchor.remove();\n}\n                    \n                \n\n            \n                \n                    Save and download file with the given data.\n\n                \n            \n\n        \n    \n\n    src/managers/url-options-manager.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        phoenixURLOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  file: '',\n  type: '',\n  config: '',\n  hideWidgets: false,\n  embed: false,\n}\n                    \n                \n\n            \n                \n                    Model for Phoenix URL options.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
