var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/classes/AnimationsManager.html",[0,0.259,1,2.396]],["body/classes/AnimationsManager.html",[0,0.142,1,2.091,2,0.173,3,0.132,4,0.132,5,0.075,6,4.642,7,0.694,8,0.469,9,1.259,10,1.57,11,4.258,12,1.698,13,1.535,14,2.537,15,1.698,16,2.851,17,0.093,18,0.309,19,1.203,20,2.981,21,3.552,22,3.552,23,2.851,24,2.981,25,3.552,26,3.552,27,3.552,28,1.156,29,2.851,30,1.25,31,1.79,32,2.182,33,3.399,34,2.294,35,3.356,36,0.588,37,1.502,38,0.588,39,0.031,40,0.522,41,0.283,42,0.522,43,0.756,44,1.854,45,0.744,46,1.355,47,1.535,48,1.865,49,1.865,50,2.382,51,0.88,52,1.79,53,1.164,54,5.379,55,1.031,56,1.79,57,4.859,58,4.547,59,4.547,60,3.423,61,4.724,62,4.056,63,3.953,64,5.406,65,5.155,66,5.406,67,1.508,68,2.271,69,3.119,70,4.547,71,4.547,72,0.533,73,1.79,74,5.629,75,1.313,76,2.461,77,2.325,78,3.711,79,1.79,80,4.422,81,1.79,82,0.477,83,0.718,84,2.851,85,3.552,86,3.399,87,4.05,88,2.392,89,1.79,90,1.79,91,3.711,92,1.79,93,1.195,94,1.913,95,3.761,96,2.503,97,2.97,98,1.535,99,1.913,100,2.97,101,1.79,102,1.79,103,1.79,104,1.79,105,3.552,106,5.285,107,1.79,108,4.05,109,4.422,110,4.422,111,2.216,112,1.79,113,2.392,114,4.724,115,1.685,116,1.407,117,3.552,118,2.981,119,3.953,120,2.851,121,0.984,122,2.851,123,1.79,124,4.941,125,1.313,126,2.851,127,1.753,128,2.091,129,2.324,130,0.994,131,2.851,132,1.79,133,3.356,134,2.661,135,4.05,136,2.532,137,2.97,138,4.05,139,0.544,140,1.502,141,2.981,142,1.865,143,1.839,144,2.091,145,1.313,146,1.502,147,4.305,148,1.295,149,2.392,150,1.79,151,2.851,152,1.195,153,0.439,154,1.502,155,0.152,156,0.613,157,1.79,158,1.79,159,2.851,160,1.79,161,0.795,162,1.79,163,2.981,164,1.79,165,2.981,166,1.79,167,1.79,168,1.79,169,0.24,170,1.685,171,1.79,172,1.79,173,1.313,174,1.79,175,1.79,176,1.493,177,1.79,178,1.79,179,1.79,180,3.552,181,1.79,182,2.851,183,1.502,184,2.091,185,1.685,186,1.79,187,0.964,188,1.79,189,0.756,190,1.79,191,1.79,192,1.79,193,1.79,194,1.79,195,1.79,196,2.851,197,1.79,198,1.79,199,0.813,200,3.552,201,1.79,202,2.851,203,1.79,204,3.552,205,4.05,206,1.79,207,1.313,208,1.79,209,4.422,210,1.79,211,1.407,212,2.091,213,2.851,214,2.392,215,3.552,216,2.893,217,1.058,218,1.753,219,2.851,220,3.399,221,1.502,222,4.05,223,1.79,224,1.79,225,1.502,226,2.851,227,3.552,228,1.058,229,2.851,230,2.851,231,1.79,232,1.79,233,2.851,234,1.79,235,1.79,236,1.79,237,1.79,238,0.884,239,1.502,240,1.79,241,2.981,242,2.851,243,1.79,244,1.79,245,1.79,246,1.79,247,1.79,248,1.058,249,1.79,250,1.79,251,1.79,252,1.79,253,1.502,254,1.502,255,1.502,256,0.75,257,2.851,258,1.79,259,1.79,260,1.79,261,2.851,262,1.79,263,1.171,264,1.79,265,1.79,266,2.392,267,1.79,268,1.79,269,1.79,270,1.79,271,1.79,272,1.79,273,1.058,274,1.502,275,1.502,276,1.79,277,1.79,278,1.182,279,1.79,280,1.79,281,2.851,282,1.502,283,1.79,284,1.79,285,1.79,286,1.79,287,1.79,288,1.79,289,2.851,290,1.79,291,1.79,292,1.79,293,1.79,294,1.79,295,1.79,296,1.79,297,1.79,298,1.502,299,1.79,300,1.79,301,0.806,302,1.79,303,1.79,304,1.79,305,1.502,306,1.79,307,1.79,308,1.79,309,2.851,310,3.552,311,1.79,312,1.79,313,1.79,314,1.502,315,1.79,316,1.313,317,1.79,318,4.05,319,1.79,320,0.643,321,1.79,322,1.865,323,3.552,324,1.79,325,1.79,326,1.79,327,1.79,328,1.79,329,0.964,330,1.502,331,1.313,332,4.05,333,1.79,334,1.79,335,1.79,336,1.171,337,1.313,338,2.851,339,2.851,340,2.851,341,0.552,342,1.79,343,1.79,344,1.79,345,1.79,346,1.79,347,1.79,348,1.79,349,1.502,350,1.313,351,1.79,352,0.884,353,1.058,354,0.884,355,1.79,356,1.79,357,2.851,358,2.851,359,1.313,360,2.091,361,2.851,362,1.79,363,2.851,364,1.79,365,1.79,366,1.79,367,1.79,368,1.79,369,1.79,370,1.79,371,1.79,372,1.79,373,1.79,374,1.79,375,1.79,376,0.813,377,1.79,378,1.79,379,4.05,380,1.79,381,1.79,382,1.79,383,1.313,384,1.502,385,2.851,386,1.79,387,1.313,388,1.79,389,1.79,390,1.79,391,0.008,392,0.013,393,0.008]],["title/classes/CMSObjects.html",[0,0.259,394,2.396]],["body/classes/CMSObjects.html",[0,0.325,2,0.395,3,0.301,4,0.301,5,0.172,8,0.438,17,0.214,18,0.56,19,0.79,36,0.444,38,0.665,39,0.03,40,0.395,41,0.214,42,0.395,44,2.165,45,0.625,72,0.498,111,2.165,118,3.436,121,1.042,130,1.268,139,0.693,142,2.679,143,1.86,144,3.788,145,3.788,148,2.57,152,2.165,153,1.005,155,0.347,156,0.498,161,0.757,169,0.55,176,1.5,185,3.344,189,1.5,218,2.932,228,3.344,273,3.053,301,1.172,359,3.788,360,3.788,391,0.018,392,0.023,393,0.018,394,3.788,395,4.334,396,3.003,397,2.165,398,2.782,399,4.334,400,2.782,401,3.053,402,2.031,403,5.165,404,5.165,405,4.095,406,2.549,407,4.092,408,6.254,409,1.478,410,5.657,411,4.095,412,4.095,413,4.334,414,5.165,415,5.165,416,2.421,417,3.003,418,4.095,419,4.095,420,4.095,421,4.095,422,4.095,423,4.095,424,5.165,425,4.095,426,4.095,427,5.165,428,4.095,429,4.095,430,4.095,431,6.602,432,5.165,433,2.792,434,5.165,435,3.436,436,5.165,437,4.748,438,5.165,439,5.657,440,5.657,441,4.095,442,5.165,443,4.095,444,5.165,445,4.095,446,3.003,447,4.095,448,4.095,449,5.165,450,4.095,451,4.095,452,4.095,453,4.095,454,3.436,455,4.095,456,4.095,457,2.679,458,4.095,459,5.657,460,4.095,461,4.095,462,5.165,463,4.095,464,4.095,465,4.095,466,4.095,467,4.095,468,4.095,469,4.095,470,4.095]],["title/interfaces/Configuration.html",[471,1.613,472,1.267]],["body/interfaces/Configuration.html",[3,0.311,4,0.311,5,0.178,8,0.359,17,0.221,34,2.044,39,0.03,41,0.342,42,0.648,45,0.795,46,1.404,53,1.018,82,0.846,139,0.771,155,0.359,301,1.197,391,0.019,392,0.023,393,0.019,409,1.509,471,2.089,472,2.331,473,2.769,474,3.551,475,1.594,476,0.934,477,6.011,478,6.011,479,5.045,480,4.409,481,6.011,482,3.482,483,5.045,484,6.011,485,2.099,486,3.554,487,3.867,488,3.238,489,2.044,490,2.21,491,1.893,492,3.867,493,3.117,494,5.272,495,1.193,496,2.395,497,4.425,498,3.117,499,3.867,500,3.117,501,2.593,502,2.227,503,4.425,504,2.84,505,2.044,506,2.52,507,3.117,508,3.093,509,1.627,510,3.933,511,4.212,512,3.867,513,5.272,514,4.232,515,4.232,516,3.103,517,2.279,518,4.232,519,4.232]],["title/classes/Cut.html",[0,0.259,520,1.613]],["body/classes/Cut.html",[0,0.321,2,0.389,3,0.297,4,0.297,5,0.17,8,0.434,17,0.211,18,0.556,19,1.271,28,1.53,30,1.58,36,0.695,38,0.438,39,0.03,40,0.57,41,0.33,42,0.389,45,0.81,46,1.518,53,1.185,55,0.655,72,0.389,82,0.85,83,1.185,98,3.028,155,0.342,156,0.57,187,3.483,189,1.358,248,3.324,341,1.58,391,0.018,392,0.023,393,0.018,476,0.907,495,1.14,520,3.125,521,3.39,522,3.39,523,2.643,524,4.904,525,5.622,526,5.622,527,3.991,528,6.331,529,6.331,530,4.078,531,4.039,532,5.121,533,4.297,534,5.622,535,6.331,536,6.516,537,6.331,538,4.039,539,4.039,540,4.039,541,4.039,542,4.039,543,4.039,544,5.121,545,5.121,546,4.039,547,4.039]],["title/classes/EffectsManager.html",[0,0.259,548,2.138]],["body/classes/EffectsManager.html",[0,0.245,2,0.297,3,0.226,4,0.226,5,0.129,7,1.194,8,0.489,9,1.303,10,1.657,15,2.224,17,0.161,18,0.464,19,1.26,28,1.582,30,1.516,32,2.636,34,2.623,36,0.686,38,0.605,39,0.03,40,0.537,41,0.327,42,0.537,45,0.784,50,3.25,55,0.904,67,1.303,72,0.556,82,0.841,83,0.546,121,0.861,125,2.258,139,0.748,153,0.756,155,0.261,156,0.591,161,0.518,169,0.413,189,0.816,207,3.891,212,3.891,301,0.97,320,1.763,352,2.11,391,0.014,392,0.019,393,0.014,475,1.717,476,0.757,485,1.856,486,3.137,548,2.797,549,5.345,550,4.637,551,3.891,552,5.436,553,3.588,554,3.588,555,5.142,556,6.369,557,4.911,558,4.238,559,5.306,560,4.275,561,4.275,562,4.275,563,4.275,564,4.275,565,3.891,566,3.588,567,4.275,568,5.306,569,2.74,570,3.062,571,3.588,572,3.079,573,3.472,574,3.891,575,2.015,576,4.911,577,2.258,578,6.203,579,4.911,580,3.079,581,3.588,582,4.275,583,4.34,584,2.584,585,3.079,586,2.11,587,4.453,588,4.453,589,3.891,590,5.063,591,4.275,592,3.079,593,4.275,594,4.275,595,2.584,596,3.135,597,4.275,598,3.079,599,3.079,600,2.584,601,4.275,602,3.079,603,3.079,604,3.079,605,4.275,606,3.079,607,4.122,608,3.588,609,3.079,610,3.079,611,3.079,612,2.015,613,4.275,614,4.911,615,4.275,616,4.275,617,3.079,618,3.079,619,3.079,620,3.079,621,3.079,622,2.584,623,3.079,624,3.079,625,3.079,626,3.079,627,3.079,628,3.079,629,3.079]],["title/interfaces/EventDataLoader.html",[471,1.613,482,1.76]],["body/interfaces/EventDataLoader.html",[3,0.41,4,0.255,5,0.146,8,0.492,9,1.368,17,0.272,18,0.503,36,0.662,38,0.605,39,0.03,40,0.537,41,0.291,42,0.537,43,1.645,44,2.6,45,0.817,46,1.479,53,0.925,55,0.752,72,0.631,98,2.496,130,1.647,139,0.701,155,0.294,156,0.606,199,2.371,256,1.943,391,0.015,392,0.02,393,0.015,397,1.943,400,2.496,471,1.71,473,2.267,475,1.229,482,2.496,495,1.273,496,2.105,502,1.797,569,2.105,630,5.206,631,1.71,632,4.634,633,2.882,634,4.634,635,3.416,636,3.416,637,3.032,638,3.295,639,3.295,640,3.032,641,3.647,642,2.267,643,3.245,644,3.295,645,3.465,646,1.478,647,2.435,648,3.534,649,2.739,650,3.032,651,2.267,652,3.295,653,3.002,654,2.951,655,3.002,656,2.6,657,2.908,658,3.534,659,2.739,660,2.105,661,3.032,662,2.496,663,4.634,664,2.739,665,2.751,666,3.295,667,2.496,668,3.032,669,1.797,670,3.032,671,3.032,672,3.032,673,2.496,674,3.086,675,2.496,676,2.739,677,2.908,678,2.739,679,2.496,680,3.889,681,3.889,682,3.465,683,2.287,684,3.889,685,2.751,686,3.889,687,5.017,688,2.908,689,3.295,690,2.739,691,2.496,692,2.496,693,2.496,694,3.032,695,3.465,696,3.889,697,4.059,698,4.088,699,2.739,700,2.496,701,3.465,702,2.908,703,2.908]],["title/classes/ExportManager.html",[0,0.259,704,2.396]],["body/classes/ExportManager.html",[0,0.277,2,0.336,3,0.256,4,0.256,5,0.22,7,1.35,8,0.507,9,1.141,10,1.803,12,1.949,17,0.182,18,0.505,19,1.155,28,1.544,32,2.602,36,0.631,38,0.631,39,0.03,40,0.561,41,0.304,42,0.561,45,0.781,46,1.442,47,3.543,49,3.042,55,0.754,72,0.561,121,0.754,139,0.75,148,2.987,153,0.855,155,0.444,156,0.599,161,0.786,169,0.702,199,2.909,329,3.224,354,2.295,391,0.025,392,0.02,393,0.015,433,1.719,472,2.408,491,1.67,509,1.724,575,2.279,643,1.719,667,2.504,673,3.608,704,3.41,705,5.024,706,5.234,707,4.65,708,4.65,709,4.65,710,4.65,711,3.483,712,2.923,713,4.687,714,3.008,715,3.902,716,3.902,717,3.902,718,2.749,719,5.585,720,4.332,721,4.65,722,2.749,723,4.65,724,3.483,725,4.65,726,3.483,727,4.65,728,2.923,729,4.65,730,4.65,731,4.65,732,3.483,733,4.65,734,3.483,735,2.279,736,2.923,737,3.483,738,5.234,739,3.483,740,3.483,741,3.483,742,4.65,743,5.585,744,3.483,745,2.279,746,2.279,747,2.923,748,2.554,749,4.65,750,3.483,751,3.483,752,2.923,753,3.483,754,3.483,755,3.483,756,5.585,757,3.483,758,5.585,759,3.483,760,2.923,761,3.483,762,3.483,763,3.483,764,3.483,765,3.483,766,3.483,767,3.483,768,3.483,769,3.483]],["title/classes/Field.html",[0,0.259,527,2.138]],["body/classes/Field.html",[0,0.409,2,0.326,3,0.248,4,0.248,5,0.142,8,0.286,13,1.819,14,1.819,17,0.176,18,0.494,36,0.366,38,0.366,39,0.031,40,0.326,41,0.176,42,0.326,43,0.896,53,1.137,67,0.829,72,0.572,77,1.667,82,0.453,93,1.416,94,2.776,96,2.487,99,1.819,116,2.544,121,0.548,127,2.544,129,2.21,136,1.667,139,0.453,143,3.022,153,0.829,155,0.286,156,0.595,161,0.734,169,0.611,187,3.196,189,0.896,228,3.261,238,1.667,256,1.416,278,1.124,301,1.034,322,2.98,391,0.02,392,0.02,393,0.015,402,1.981,409,1.303,433,2.929,476,0.598,485,1.124,527,3.609,612,2.98,669,1.766,770,2.98,771,2.21,772,2.835,773,3.378,774,3.378,775,3.378,776,3.34,777,3.734,778,3.734,779,1.667,780,1.819,781,2.351,782,2.477,783,2.477,784,2.477,785,2.98,786,3.261,787,3.047,788,3.261,789,2.477,790,2.477,791,2.477,792,3.768,793,2.477,794,2.477,795,2.477,796,2.477,797,4.045,798,3.78,799,3.34,800,3.34,801,4.448,802,4.523,803,4.045,804,4.045,805,2.477,806,2.477,807,2.477,808,4.583,809,2.477,810,2.21,811,4.523,812,2.477,813,2.477,814,4.224,815,4.632,816,2.477,817,4.448,818,2.477,819,2.477,820,2.477,821,3.34,822,2.477,823,3.34,824,3.78,825,2.477,826,2.477,827,2.477,828,2.477,829,2.477,830,2.477,831,2.477,832,2.477,833,2.477,834,2.477,835,2.477,836,2.477,837,2.477,838,2.477,839,2.477,840,2.477,841,1.819,842,2.477,843,3.78,844,3.34,845,2.477,846,3.78,847,2.21,848,3.78,849,3.34,850,2.477,851,1.997,852,2.477,853,2.477,854,2.477,855,2.477,856,2.477,857,2.477,858,2.477,859,2.477,860,2.477,861,2.477,862,3.34,863,3.34,864,3.34,865,3.372,866,2.98,867,3.78,868,1.997,869,3.34,870,1.997,871,2.21,872,2.693,873,2.21,874,1.997,875,2.21,876,2.477,877,3.34,878,2.477,879,2.477,880,2.477,881,2.477,882,2.477,883,2.477,884,2.477]],["title/classes/InfoLogger.html",[0,0.259,656,1.37]],["body/classes/InfoLogger.html",[0,0.346,2,0.42,3,0.494,4,0.32,5,0.183,8,0.455,17,0.227,18,0.583,28,1.559,36,0.659,38,0.473,39,0.03,40,0.42,41,0.304,42,0.42,43,1.424,45,0.528,46,1.487,53,0.951,55,0.707,68,1.827,72,0.561,82,0.721,83,0.951,115,3.174,155,0.369,156,0.518,169,0.585,391,0.019,392,0.024,393,0.019,475,1.156,476,0.951,495,1.225,569,2.439,570,2.65,646,1.611,647,2.495,656,2.251,674,3.873,675,2.347,685,3.135,700,2.892,868,3.174,885,5.235,886,3.658,887,5.82,888,5.82,889,6.074,890,4.358,891,4.506,892,4.358,893,5.37,894,5.37,895,2.892,896,3.174,897,5.37,898,4.358,899,5.37,900,4.659,901,4.358,902,4.506,903,2.892,904,4.358,905,4.358,906,4.358,907,4.358,908,4.358]],["title/classes/LHCbLoader.html",[0,0.259,909,2.396]],["body/classes/LHCbLoader.html",[0,0.23,2,0.28,3,0.35,4,0.213,5,0.122,8,0.525,9,0.712,12,1.719,15,1.216,17,0.214,18,0.445,19,1.251,28,1.521,30,1.683,36,0.713,38,0.679,39,0.03,40,0.603,41,0.346,42,0.591,43,1.576,44,2.439,45,0.816,46,1.502,51,1.265,53,0.726,55,0.944,67,1.167,68,1.719,72,0.619,76,1.317,82,0.389,83,0.514,130,1.613,134,1.562,139,0.389,148,1.317,152,2.286,155,0.246,156,0.28,161,0.496,176,0.769,199,2.477,211,2.692,320,1.472,353,1.715,391,0.013,392,0.018,393,0.013,397,1.216,400,1.562,406,2.692,407,3.112,409,1.665,475,1.087,476,0.726,489,1.124,490,1.216,495,1.233,496,1.317,502,2.195,504,2.208,505,1.844,506,1.216,509,1.265,520,2.024,523,1.898,569,1.317,631,1.432,633,1.862,635,2.683,636,2.683,637,2.683,638,2.811,639,3.347,640,2.683,641,3.112,642,1.898,643,3.154,644,2.424,646,1.087,647,2.195,648,3.056,649,1.715,650,1.898,651,1.898,652,3.056,653,2.561,654,2.872,655,2.561,656,2.167,658,2.424,659,1.715,660,1.862,661,1.898,662,1.562,664,1.715,665,2.024,666,2.424,667,1.562,668,1.898,669,1.124,670,1.898,671,1.898,672,1.898,673,1.562,675,1.562,676,1.715,678,2.811,683,2.794,685,2.692,689,3.056,690,2.424,691,2.208,692,2.208,693,2.208,694,1.898,699,1.715,700,2.561,714,1.562,718,1.715,780,2.208,895,1.562,896,1.715,903,2.561,909,3.007,910,4.751,911,3.243,912,5.453,913,3.441,914,4.588,915,3.007,916,2.16,917,4.338,918,3.007,919,3.007,920,3.007,921,3.007,922,3.007,923,3.441,924,3.999,925,5.418,926,2.434,927,2.434,928,2.127,929,2.434,930,2.434,931,1.715,932,1.898,933,2.434,934,2.127,935,2.9,936,2.9,937,2.434,938,4.1,939,2.9,940,2.424,941,2.127,942,3.791,943,3.007,944,2.434,945,2.683,946,2.127,947,1.898,948,2.127,949,1.898,950,3.007,951,3.007,952,1.898,953,2.434,954,2.127,955,3.007,956,2.683,957,3.007,958,1.898,959,2.127,960,2.434,961,3.112,962,3.112,963,2.127,964,1.898,965,1.715,966,2.434,967,2.127,968,2.434,969,2.434,970,3.999,971,2.434,972,2.434,973,2.434,974,2.127,975,2.434,976,2.127,977,2.127,978,2.127,979,2.434,980,3.007,981,2.127,982,2.434,983,1.898,984,1.898,985,2.127,986,2.127,987,2.434,988,4.1,989,2.9,990,2.434,991,2.9,992,2.434,993,2.9,994,2.9,995,4.1,996,2.9,997,4.1]],["title/classes/LoadingManager.html",[0,0.259,916,1.484]],["body/classes/LoadingManager.html",[0,0.247,2,0.299,3,0.228,4,0.228,5,0.13,7,1.204,8,0.503,9,1.484,10,1.204,17,0.162,18,0.467,19,1.289,28,1.554,30,1.522,36,0.696,38,0.628,39,0.031,40,0.583,41,0.333,42,0.558,53,1.051,55,1.047,67,1.373,69,3.347,72,0.583,76,2.931,82,0.796,83,1.051,98,2.316,155,0.263,156,0.572,161,0.521,169,0.417,176,1.14,217,2.542,220,4.469,316,4.776,341,1.327,391,0.014,392,0.019,393,0.014,402,1.771,476,0.762,490,1.301,491,2.077,495,1.238,496,2.746,505,2.409,509,1.522,530,3.785,575,2.031,584,2.606,646,1.648,679,1.672,720,4.292,916,2.419,931,2.916,998,5.416,999,4.242,1000,4.933,1001,4.933,1002,4.933,1003,4.933,1004,4.3,1005,4.3,1006,4.3,1007,4.3,1008,4.3,1009,4.3,1010,3.609,1011,3.609,1012,3.105,1013,2.606,1014,3.905,1015,5.522,1016,4.3,1017,5.486,1018,3.105,1019,4.3,1020,3.105,1021,4.3,1022,3.105,1023,5.074,1024,4.3,1025,3.105,1026,2.814,1027,4.3,1028,2.606,1029,4.3,1030,3.105,1031,4.3,1032,3.105,1033,4.3,1034,4.3,1035,3.105,1036,4.933,1037,1.835,1038,3.105,1039,3.105,1040,4.933,1041,4.3,1042,3.105,1043,3.105,1044,3.105,1045,3.105,1046,3.105,1047,4.3,1048,3.105,1049,4.3,1050,3.609,1051,4.3,1052,3.105,1053,3.105,1054,4.3,1055,3.105,1056,4.3,1057,3.105,1058,3.105,1059,3.105,1060,3.105,1061,3.105]],["title/classes/PhoenixLoader.html",[0,0.259,911,1.613]],["body/classes/PhoenixLoader.html",[0,0.153,2,0.185,3,0.336,4,0.141,5,0.081,8,0.469,9,0.913,12,1.765,15,1.263,17,0.194,18,0.327,19,1.147,28,1.407,30,1.148,32,0.745,36,0.662,38,0.631,39,0.031,40,0.544,41,0.338,42,0.533,43,1.541,44,2.466,45,0.795,46,1.335,47,1.034,51,1.3,53,0.899,55,0.853,67,1.034,68,1.263,72,0.583,76,1.369,77,0.948,82,0.258,83,0.746,93,0.805,98,1.034,111,0.805,116,1.487,121,0.914,130,1.621,134,1.034,136,1.487,139,0.742,148,1.913,152,2.537,153,0.74,155,0.163,156,0.588,161,0.782,169,0.614,176,1.213,189,0.799,199,2.388,211,2.783,216,1.257,225,1.612,241,2.529,273,1.135,301,0.436,305,2.529,341,0.93,353,1.781,354,0.948,391,0.008,392,0.013,393,0.008,397,1.263,400,1.623,401,1.135,406,1.487,407,3.322,409,1.663,416,1.135,417,1.408,437,1.612,475,1.117,476,0.659,482,2.003,489,1.168,490,0.805,495,1.22,496,1.369,501,1.263,502,1.968,504,1.623,505,1.633,506,1.559,508,1.034,509,1.3,516,1.408,517,1.034,520,2.258,523,1.972,569,1.689,631,0.948,633,1.689,635,2.433,636,2.433,637,1.972,638,2.198,639,2.49,640,1.972,641,2.756,642,1.257,643,3.144,644,2.705,646,1.287,647,2.42,648,3.108,649,1.781,650,1.972,651,1.257,652,3.108,653,2.615,654,2.934,655,2.615,656,2.204,657,1.612,658,2.49,659,1.781,660,1.689,661,1.972,662,2.003,664,1.781,665,2.079,666,2.198,667,1.623,668,1.972,669,1.168,670,1.972,671,1.972,672,1.972,673,1.623,674,1.135,675,1.623,676,1.135,677,1.612,678,3.388,679,1.623,683,2.783,685,2.396,689,3.001,690,1.781,691,1.623,692,2.003,693,2.464,694,1.257,698,3.561,699,1.135,700,2.615,714,1.034,718,1.781,777,1.135,778,1.135,780,2.268,868,1.135,895,1.623,896,2.198,903,2.615,911,1.487,914,4.438,915,2.727,916,2.306,918,2.727,919,2.727,920,2.21,921,2.21,922,2.21,924,2.21,928,2.21,931,1.781,932,1.972,934,2.21,941,1.408,942,3.964,943,3.561,945,2.756,946,3.561,947,1.972,948,2.21,949,1.972,950,3.089,951,3.089,952,1.972,954,1.408,955,3.356,956,3.89,957,3.089,958,2.994,959,1.408,961,3.439,962,3.322,963,2.21,964,1.972,965,1.781,967,2.21,970,3.723,974,2.21,976,3.089,977,2.21,978,2.21,980,3.089,981,1.408,983,1.257,984,1.257,985,1.408,986,1.408,990,1.612,992,1.612,1026,1.257,1062,5.152,1063,3.013,1064,3.013,1065,1.92,1066,1.92,1067,1.92,1068,1.92,1069,1.92,1070,1.92,1071,1.92,1072,1.92,1073,1.92,1074,1.92,1075,1.92,1076,1.92,1077,1.92,1078,1.92,1079,1.92,1080,1.92,1081,1.408,1082,1.612,1083,1.612,1084,1.612,1085,3.013,1086,1.92,1087,1.92,1088,1.612,1089,1.92,1090,1.92,1091,1.92,1092,3.013,1093,4.075,1094,3.013,1095,1.92,1096,1.92,1097,3.013,1098,3.535,1099,1.92,1100,1.92,1101,1.92,1102,1.92,1103,3.719,1104,1.92,1105,1.92,1106,1.92,1107,1.92,1108,1.92,1109,1.92,1110,1.92,1111,3.013,1112,3.013,1113,4.211,1114,3.013,1115,3.013,1116,1.92,1117,1.92,1118,1.92,1119,1.408,1120,1.92,1121,1.92,1122,4.211,1123,1.92,1124,3.013,1125,1.92,1126,1.92,1127,1.92,1128,3.013,1129,1.92,1130,1.92,1131,1.612,1132,1.92,1133,1.92,1134,1.92,1135,4.211,1136,1.92,1137,3.013,1138,2.529,1139,1.92,1140,1.92,1141,1.92,1142,1.92,1143,1.92,1144,1.92,1145,1.612,1146,1.612,1147,1.92,1148,1.92,1149,3.013,1150,1.92,1151,1.92,1152,1.92,1153,1.92,1154,1.612,1155,2.529,1156,1.92,1157,1.408,1158,1.92,1159,1.92,1160,1.92,1161,3.013,1162,1.92,1163,1.92,1164,1.92,1165,3.013,1166,1.92,1167,3.719,1168,1.92,1169,1.92,1170,3.013,1171,2.529,1172,1.612,1173,1.92,1174,1.92,1175,1.92,1176,1.92,1177,1.92,1178,3.013,1179,1.92,1180,3.013,1181,1.92,1182,1.92,1183,1.92,1184,2.529,1185,1.92,1186,1.92,1187,1.92,1188,1.135,1189,1.257,1190,1.92,1191,1.92,1192,1.92,1193,1.92,1194,1.92,1195,1.92,1196,1.92,1197,3.719,1198,3.013,1199,3.013,1200,1.92,1201,1.92,1202,3.013,1203,3.719,1204,3.013,1205,1.92,1206,1.612,1207,1.92,1208,1.612,1209,1.612,1210,3.013,1211,1.92,1212,1.92,1213,1.92,1214,1.92,1215,1.92,1216,1.92,1217,1.92,1218,1.92,1219,1.92,1220,1.92,1221,1.92,1222,1.92,1223,1.92,1224,3.013,1225,1.92,1226,1.92,1227,3.013,1228,3.013,1229,1.92,1230,1.92]],["title/classes/PhoenixMenuNode.html",[0,0.259,506,1.37]],["body/classes/PhoenixMenuNode.html",[0,0.171,2,0.208,3,0.158,4,0.158,5,0.091,8,0.484,17,0.112,18,0.358,28,1.249,30,1.017,36,0.691,38,0.607,39,0.031,40,0.636,41,0.336,42,0.54,43,0.874,48,2.931,53,0.584,55,0.926,67,1.464,68,2.22,72,0.595,82,0.711,83,1.094,111,1.381,121,0.35,130,1.426,137,2.417,155,0.279,156,0.595,161,0.737,169,0.711,176,1.061,189,1.061,248,1.948,256,2.469,278,1.863,301,1.155,314,1.809,320,0.774,329,1.161,330,4.271,336,2.931,341,1.571,352,2.819,353,1.948,391,0.009,392,0.015,393,0.009,435,2.766,472,2.117,476,0.584,485,2.006,489,2.312,491,1.183,495,1.242,501,2.763,506,2.698,507,1.274,508,3.65,509,1.84,517,3.444,596,2.417,633,0.979,646,1.188,647,0.836,660,1.497,781,2.377,940,3.228,1017,4.271,1037,1.274,1157,4.586,1209,1.809,1231,4.689,1232,1.581,1233,4,1234,4,1235,4,1236,5.711,1237,4.586,1238,4,1239,5.963,1240,5.105,1241,4,1242,4,1243,3.295,1244,3.295,1245,3.295,1246,3.295,1247,4.48,1248,2.766,1249,3.295,1250,3.295,1251,4.48,1252,1.809,1253,3.295,1254,4.583,1255,2.156,1256,2.156,1257,2.156,1258,4.697,1259,6.455,1260,4.48,1261,3.295,1262,2.156,1263,2.156,1264,2.156,1265,2.156,1266,3.295,1267,2.156,1268,2.156,1269,2.156,1270,2.156,1271,2.156,1272,3.295,1273,3.76,1274,2.156,1275,3.854,1276,3.295,1277,2.156,1278,3.54,1279,2.766,1280,3.295,1281,3.295,1282,2.156,1283,4.583,1284,4.48,1285,4.48,1286,3.295,1287,2.156,1288,2.766,1289,2.156,1290,2.766,1291,2.156,1292,2.156,1293,3.295,1294,2.156,1295,3.295,1296,2.156,1297,3.295,1298,3.295,1299,3.295,1300,2.156,1301,2.766,1302,2.417,1303,1.581,1304,2.766,1305,3.357,1306,1.809,1307,2.156,1308,4.826,1309,3.295,1310,3.295,1311,2.156,1312,2.156,1313,2.156,1314,3.295,1315,2.156,1316,2.156,1317,2.156,1318,2.156,1319,2.156,1320,2.156,1321,1.581,1322,2.156,1323,2.156,1324,2.156,1325,2.156,1326,2.156,1327,2.156,1328,2.156,1329,2.156,1330,4,1331,3.295,1332,3.295,1333,2.156,1334,2.156,1335,1.411,1336,2.156,1337,4.48,1338,2.156,1339,2.156,1340,2.156,1341,2.156,1342,4,1343,2.156,1344,2.156,1345,2.156,1346,2.156,1347,3.295,1348,2.156,1349,2.156,1350,2.156,1351,2.156,1352,3.295,1353,2.156,1354,2.156,1355,2.156,1356,4,1357,1.411,1358,1.809,1359,2.156,1360,2.156,1361,2.156,1362,3.295,1363,2.156,1364,4,1365,2.156,1366,2.156,1367,2.156,1368,2.156,1369,2.156,1370,2.156,1371,2.156,1372,2.156,1373,2.156,1374,2.156,1375,4,1376,2.156,1377,2.156,1378,2.156,1379,2.156,1380,2.156,1381,2.156,1382,5.295,1383,2.156,1384,4,1385,2.156,1386,3.295,1387,2.156,1388,2.156,1389,2.156,1390,2.156,1391,2.156]],["title/classes/PhoenixObjects.html",[0,0.259,401,1.931]],["body/classes/PhoenixObjects.html",[0,0.224,2,0.272,3,0.397,4,0.207,5,0.118,8,0.475,17,0.147,18,0.436,19,0.985,36,0.585,38,0.715,39,0.031,40,0.52,41,0.281,42,0.52,44,1.685,45,0.487,72,0.579,97,2.068,111,2.14,115,1.667,116,1.392,119,3.373,121,1.052,127,2.311,130,1.552,133,4.033,134,3.109,139,0.628,141,2.367,142,2.63,143,2.127,144,2.948,145,3.434,146,2.367,147,3.373,148,2.766,149,2.367,152,1.182,153,0.692,155,0.239,156,0.492,161,0.808,163,2.367,165,3.373,169,0.806,176,1.353,185,2.768,189,1.242,216,3.861,217,1.667,218,3.159,238,1.392,239,4.284,255,2.367,263,2.63,266,3.373,273,2.376,278,1.559,282,3.93,298,2.367,301,0.912,331,3.743,337,4.52,359,2.068,360,2.068,387,2.068,391,0.012,392,0.018,393,0.012,396,2.068,397,1.685,398,2.165,401,2.376,402,2.271,406,2.964,409,1.718,413,2.367,416,1.667,417,2.068,433,1.984,454,2.367,457,3.34,509,1.24,683,2.519,779,1.392,847,3.34,871,3.861,872,1.667,1088,2.367,1119,2.948,1171,3.93,1172,4.844,1184,3.373,1188,3.018,1189,3.34,1357,1.845,1392,4.707,1393,4.019,1394,4.019,1395,4.019,1396,4.019,1397,4.019,1398,4.019,1399,2.82,1400,4.019,1401,2.82,1402,5.609,1403,2.82,1404,2.82,1405,4.019,1406,4.019,1407,2.82,1408,4.019,1409,2.82,1410,5.772,1411,4.683,1412,2.82,1413,2.82,1414,2.068,1415,4.683,1416,4.019,1417,4.019,1418,4.683,1419,2.82,1420,4.683,1421,1.845,1422,2.82,1423,2.068,1424,2.82,1425,2.82,1426,2.82,1427,2.82,1428,2.367,1429,4.019,1430,2.82,1431,5.104,1432,5.396,1433,2.82,1434,2.82,1435,2.82,1436,2.82,1437,2.82,1438,4.019,1439,4.683,1440,2.367,1441,4.683,1442,2.367,1443,5.396,1444,3.93,1445,4.683,1446,3.373,1447,2.82,1448,4.019,1449,2.82,1450,2.82,1451,2.82,1452,2.82,1453,2.82,1454,2.82,1455,2.82,1456,4.683,1457,2.82,1458,2.82,1459,2.82,1460,2.82,1461,2.82,1462,2.82,1463,5.104,1464,2.367,1465,2.82,1466,2.82,1467,2.068,1468,2.82,1469,2.82,1470,4.683,1471,2.82,1472,2.82,1473,2.82,1474,2.82,1475,2.82,1476,2.82,1477,2.82,1478,4.019,1479,2.82,1480,2.82,1481,2.82,1482,2.82,1483,2.82,1484,5.396,1485,2.82,1486,2.82,1487,5.104,1488,2.82,1489,2.82,1490,2.82,1491,2.82,1492,2.82,1493,2.82,1494,4.019,1495,2.068,1496,2.82,1497,2.82,1498,4.683,1499,4.019,1500,4.019,1501,4.019,1502,4.019,1503,2.82,1504,2.82,1505,2.82,1506,2.367,1507,2.82,1508,2.82,1509,2.82,1510,2.82,1511,2.82,1512,2.82,1513,2.82,1514,2.82,1515,2.82,1516,2.82,1517,2.82,1518,4.019,1519,2.82,1520,2.82,1521,2.82,1522,2.82,1523,2.82]],["title/classes/PresetView.html",[0,0.259,510,2.138]],["body/classes/PresetView.html",[0,0.336,2,0.408,3,0.311,4,0.311,5,0.178,8,0.447,17,0.221,18,0.572,19,1.258,30,1.306,34,2.398,36,0.684,38,0.459,39,0.03,40,0.636,41,0.323,42,0.408,53,1.096,55,0.686,67,1.039,72,0.508,96,2.644,155,0.359,156,0.554,169,0.568,184,4.409,320,2.264,341,1.627,391,0.019,392,0.023,393,0.019,476,0.934,488,3.238,493,3.996,495,1.279,510,3.45,511,4.914,512,3.103,1237,4.927,1252,4.425,1305,3.551,1306,4.82,1524,5.368,1525,3.551,1526,4.232,1527,4.232,1528,3.103,1529,6.465,1530,5.743,1531,6.011,1532,5.272,1533,6.011,1534,4.232,1535,4.232,1536,4.232,1537,4.232,1538,4.232,1539,4.232,1540,4.232]],["title/classes/PrettySymbols.html",[0,0.259,1541,2.138]],["body/classes/PrettySymbols.html",[0,0.312,2,0.379,3,0.289,4,0.289,5,0.165,8,0.471,17,0.205,18,0.546,19,1.071,36,0.603,38,0.683,39,0.03,40,0.485,41,0.316,42,0.485,51,1.214,72,0.535,82,0.528,83,0.697,93,1.649,121,0.817,127,1.942,130,1.626,155,0.333,156,0.583,161,0.733,169,0.745,253,3.301,341,1.214,391,0.017,392,0.022,393,0.017,397,2.11,402,2.311,457,2.574,476,0.892,490,2.11,495,1.129,646,1.043,679,2.119,785,3.294,786,2.976,787,2.976,788,2.976,947,4.05,1321,4.293,1423,2.885,1495,3.692,1541,3.294,1542,4.913,1543,3.301,1544,6.624,1545,5.195,1546,4.66,1547,5.035,1548,5.035,1549,4.225,1550,4.913,1551,5.035,1552,5.035,1553,5.035,1554,5.854,1555,5.854,1556,5.854,1557,5.854,1558,4.225,1559,3.934,1560,5.035,1561,3.934,1562,6.372,1563,5.035,1564,5.035,1565,3.934,1566,6.293,1567,6.051,1568,5.553,1569,3.934,1570,3.934,1571,3.934,1572,3.934,1573,3.934,1574,5.553,1575,3.934,1576,5.035,1577,3.934,1578,3.934,1579,3.934,1580,5.035,1581,3.934,1582,3.934,1583,3.934,1584,3.934,1585,3.934,1586,3.301,1587,3.934,1588,5.854,1589,3.934,1590,3.934,1591,3.934,1592,3.301,1593,5.035,1594,3.934,1595,3.934,1596,3.934,1597,3.934,1598,3.934,1599,3.934,1600,3.934]],["title/classes/RKHelper.html",[0,0.259,1421,2.138]],["body/classes/RKHelper.html",[0,0.307,2,0.373,3,0.284,4,0.284,5,0.162,8,0.467,14,3.133,17,0.202,18,0.631,19,0.961,36,0.54,38,0.54,39,0.03,40,0.48,41,0.303,42,0.48,43,1.32,45,0.603,51,1.537,53,0.882,55,0.627,67,1.352,72,0.618,82,0.739,83,0.685,94,2.083,96,2.088,121,0.808,127,2.458,133,3.806,136,2.458,139,0.668,143,2.734,153,0.949,155,0.328,156,0.531,161,0.759,169,0.668,170,2.286,176,1.32,211,3.134,216,4.155,238,2.458,278,1.657,301,1.399,376,2.262,391,0.017,392,0.022,393,0.017,402,2.213,446,2.836,457,2.53,485,1.287,490,2.088,633,1.756,683,2.458,777,2.286,778,2.286,779,3.094,786,2.286,787,2.286,788,3.706,792,3.806,865,2.53,872,3.439,873,3.258,874,2.944,875,3.258,1154,3.245,1421,3.258,1423,3.652,1428,4.882,1440,4.179,1442,4.179,1444,4.179,1446,3.245,1495,3.652,1549,4.179,1586,4.179,1592,3.245,1601,4.623,1602,3.245,1603,5.508,1604,4.98,1605,3.867,1606,3.867,1607,4.98,1608,4.98,1609,4.179,1610,4.98,1611,3.867,1612,5.508,1613,3.867,1614,3.867,1615,3.867,1616,3.867,1617,3.867,1618,3.867,1619,3.867,1620,4.623,1621,3.245,1622,3.867,1623,3.867,1624,5.508,1625,3.867,1626,4.98,1627,3.867,1628,3.867,1629,3.867,1630,3.867,1631,3.867,1632,3.867,1633,3.867,1634,3.867,1635,3.867,1636,3.867,1637,3.867,1638,3.867,1639,3.245,1640,3.867,1641,3.867,1642,3.245,1643,3.867,1644,3.867,1645,3.867,1646,3.867,1647,3.867,1648,3.867,1649,3.867,1650,3.867,1651,3.867]],["title/classes/RendererManager.html",[0,0.259,35,2.138]],["body/classes/RendererManager.html",[0,0.188,2,0.229,3,0.174,4,0.174,5,0.1,7,0.92,8,0.515,9,1.296,10,1.374,11,1.553,12,1.485,15,2.357,17,0.221,18,0.384,19,1.248,28,1.549,30,1.309,32,2.18,34,2.303,35,2.318,36,0.697,38,0.653,39,0.031,40,0.58,41,0.325,42,0.58,45,0.681,49,2.318,50,3.647,51,1.309,53,0.42,55,0.976,60,3.324,72,0.621,75,1.74,77,1.749,82,0.631,83,1.037,113,2.974,121,0.575,130,0.87,139,0.318,153,0.87,155,0.201,156,0.597,161,0.709,169,0.734,176,1.124,189,0.94,217,2.78,256,0.995,278,1.411,301,0.962,320,2.16,331,2.599,341,1.094,350,4.124,352,1.749,354,2.484,391,0.01,392,0.016,393,0.01,398,2.533,475,1.4,476,0.628,480,3.449,485,2.002,493,2.095,495,1.018,496,2.136,497,3.947,498,2.78,530,1.553,558,3.68,565,4.928,570,2.321,571,5.104,573,3.68,574,4.124,575,2.318,577,1.74,581,2.974,583,2.599,586,1.749,596,2.599,622,1.992,646,0.94,685,3.158,700,2.533,722,2.507,1026,2.318,1652,5.41,1653,4.241,1654,4.703,1655,5.033,1656,6.467,1657,3.543,1658,3.543,1659,4.703,1660,4.703,1661,4.703,1662,4.703,1663,2.599,1664,3.543,1665,4.703,1666,3.543,1667,3.543,1668,3.543,1669,3.543,1670,3.543,1671,3.543,1672,3.543,1673,3.543,1674,4.232,1675,4.912,1676,2.373,1677,2.373,1678,3.543,1679,3.454,1680,3.543,1681,3.543,1682,2.373,1683,6.138,1684,3.543,1685,2.373,1686,3.543,1687,3.543,1688,2.373,1689,1.992,1690,1.992,1691,4.703,1692,3.543,1693,2.373,1694,1.908,1695,3.543,1696,2.373,1697,3.543,1698,2.373,1699,3.543,1700,2.373,1701,3.543,1702,3.543,1703,2.373,1704,3.543,1705,2.373,1706,3.543,1707,2.373,1708,3.543,1709,2.373,1710,2.974,1711,3.559,1712,2.373,1713,3.559,1714,3.543,1715,3.543,1716,1.74,1717,3.543,1718,5.279,1719,2.373,1720,3.543,1721,4.703,1722,4.703,1723,4.703,1724,2.373,1725,2.373,1726,1.74,1727,2.373,1728,2.373,1729,1.74,1730,2.373,1731,2.373,1732,2.373,1733,2.373,1734,2.373,1735,3.543,1736,4.241,1737,2.373,1738,2.373,1739,4.241,1740,2.373,1741,2.373,1742,2.373,1743,3.543,1744,2.373,1745,4.241,1746,3.543,1747,2.373,1748,3.543,1749,2.373,1750,2.373,1751,2.373,1752,2.373,1753,2.373,1754,3.543,1755,2.373,1756,2.373,1757,3.543,1758,4.703,1759,2.373,1760,2.373,1761,2.373,1762,2.373,1763,3.543,1764,2.373,1765,2.373,1766,2.373,1767,3.543]],["title/classes/RungeKutta.html",[0,0.259,779,1.613]],["body/classes/RungeKutta.html",[0,0.394,2,0.302,3,0.23,4,0.23,5,0.132,8,0.42,13,2.332,14,2.332,17,0.164,18,0.47,36,0.47,38,0.47,39,0.031,40,0.417,41,0.259,42,0.417,43,1.148,53,1.17,55,0.508,67,1.217,72,0.584,77,1.547,82,0.421,83,0.555,93,1.815,94,2.88,96,2.61,99,1.689,116,2.77,121,0.508,127,2.639,129,2.833,136,2.137,139,0.421,143,3.007,153,0.77,155,0.266,156,0.584,161,0.72,169,0.581,187,3.416,189,1.148,228,3.161,238,2.137,256,1.314,278,1.441,301,1.214,322,2.833,391,0.019,392,0.019,393,0.014,402,2.083,409,1.53,433,2.864,476,0.767,485,1.043,490,1.314,612,3.499,669,2.073,770,3.244,771,2.051,776,3.922,777,3.799,778,3.799,779,2.137,780,2.332,781,2.459,782,3.175,783,3.175,784,3.175,785,3.244,786,3.43,787,3.161,788,3.43,789,2.299,790,2.299,791,2.299,792,3.671,793,2.299,794,2.299,795,2.299,796,2.299,797,3.922,798,3.637,799,3.175,800,3.175,801,4.361,802,4.444,803,3.922,804,3.922,805,2.299,806,2.299,807,2.299,808,4.511,809,2.299,810,2.051,811,4.444,812,2.299,813,2.299,814,4.115,815,4.566,816,2.299,817,4.361,818,2.299,819,2.299,820,2.299,821,3.175,822,2.299,823,3.175,824,3.637,825,2.299,826,2.299,827,2.299,828,2.299,829,2.299,830,2.299,831,2.299,832,2.299,833,2.299,834,2.299,835,2.299,836,2.299,837,2.299,838,2.299,839,2.299,840,2.299,841,1.689,842,2.299,843,3.637,844,3.175,845,2.299,846,3.637,847,2.051,848,3.637,849,3.175,850,2.299,851,1.853,852,2.299,853,2.299,854,2.299,855,2.299,856,2.299,857,2.299,858,2.299,859,2.299,860,2.299,861,2.299,862,4.115,863,3.922,864,3.922,865,3.671,866,3.499,867,4.115,868,2.559,869,3.922,870,2.559,871,2.833,872,3.161,873,2.833,874,2.559,875,2.833,876,3.175,877,3.175,878,2.299,879,2.299,880,2.299,881,2.299,882,2.299,883,2.299,884,2.299,1768,3.135,1769,3.135,1770,3.135]],["title/classes/ScriptLoader.html",[0,0.259,1771,2.396]],["body/classes/ScriptLoader.html",[0,0.301,2,0.366,3,0.279,4,0.279,5,0.159,8,0.463,9,0.931,17,0.198,18,0.534,19,0.949,36,0.534,38,0.534,39,0.03,40,0.474,41,0.257,42,0.557,45,0.596,46,1.311,51,1.171,68,1.59,69,2.649,72,0.557,82,0.66,83,0.871,121,0.885,139,0.509,155,0.322,156,0.557,161,0.766,169,0.66,176,1.006,221,3.184,275,4.128,301,1.116,376,2.234,391,0.017,392,0.022,393,0.017,402,2.201,488,3.11,491,2.241,495,1.233,498,2.908,502,1.907,505,2.239,524,3.607,631,1.873,646,1.006,660,1.723,720,3.778,916,2.717,949,3.218,1081,2.782,1240,4.128,1771,3.607,1772,4.003,1773,4.885,1774,5.775,1775,4.919,1776,5.021,1777,4.581,1778,5.458,1779,5.458,1780,3.794,1781,3.794,1782,4.919,1783,3.839,1784,5.458,1785,4.847,1786,4.128,1787,5.775,1788,4.139,1789,4.919,1790,4.003,1791,4.919,1792,3.794,1793,6.393,1794,5.775,1795,5.458,1796,3.794,1797,5.983,1798,4.919,1799,4.919,1800,4.919,1801,2.482,1802,3.184,1803,3.184,1804,3.794,1805,3.794,1806,3.794,1807,4.919,1808,3.794,1809,3.794,1810,3.794,1811,3.794,1812,3.794,1813,3.184,1814,3.794,1815,3.794,1816,3.794,1817,3.794,1818,4.919,1819,3.794,1820,3.794,1821,3.794,1822,3.794,1823,3.794,1824,3.794,1825,3.794,1826,3.794,1827,3.794,1828,4.919,1829,3.794,1830,5.775,1831,5.775,1832,3.794,1833,3.794,1834,3.794,1835,3.794,1836,3.794,1837,3.794,1838,3.794]],["title/classes/SelectionManager.html",[0,0.259,1839,2.396]],["body/classes/SelectionManager.html",[0,0.177,2,0.215,3,0.248,4,0.164,5,0.094,7,0.864,8,0.454,9,1.437,10,1.999,12,1.417,15,1.91,17,0.116,18,0.367,19,1.181,28,1.643,30,1.512,32,2.489,34,2.408,36,0.691,37,1.871,38,0.559,39,0.031,40,0.532,41,0.326,42,0.472,43,1.208,44,2.053,45,0.782,46,1.252,47,3.103,49,2.212,51,1.043,53,0.395,55,0.895,67,1.414,69,2.777,72,0.555,76,2.07,82,0.612,83,0.913,121,0.794,130,1.618,139,0.657,148,2.342,152,1.417,153,0.547,155,0.189,156,0.555,161,0.727,169,0.612,170,3.406,176,1.083,185,1.318,189,0.896,207,3.781,217,1.998,278,0.742,301,1.17,320,1.851,352,1.668,391,0.01,392,0.015,393,0.01,406,1.1,409,1.304,433,1.668,475,1.635,476,0.807,485,1.783,490,1.712,495,1.158,499,3.592,504,1.2,548,3.969,550,3.592,551,4.047,552,4.327,553,3.825,554,3.825,566,1.871,569,2.07,570,2.545,573,3.769,574,3.342,586,1.668,587,2.837,588,3.825,589,3.781,590,4.327,600,2.837,607,2.837,608,1.871,646,0.591,656,2.543,660,1.012,669,1.31,674,1.998,675,2.454,679,2.199,697,2.982,712,1.871,728,1.871,851,1.998,895,2.777,896,2.694,900,2.995,903,2.454,1014,2.479,1050,1.871,1188,3.752,1189,3.969,1206,1.871,1357,1.458,1464,1.871,1467,2.479,1541,1.458,1545,1.871,1663,2.995,1679,3.373,1726,2.479,1839,2.479,1840,5.369,1841,4.083,1842,4.083,1843,4.083,1844,4.083,1845,4.083,1846,4.083,1847,4.083,1848,4.327,1849,4.557,1850,4.557,1851,3.825,1852,3.38,1853,3.38,1854,3.38,1855,3.38,1856,3.38,1857,3.38,1858,3.38,1859,3.38,1860,3.38,1861,3.38,1862,2.229,1863,5.039,1864,3.38,1865,2.479,1866,2.229,1867,1.871,1868,3.38,1869,3.38,1870,1.871,1871,3.38,1872,2.229,1873,6.005,1874,5.155,1875,2.229,1876,4.557,1877,2.229,1878,1.871,1879,2.479,1880,3.38,1881,3.38,1882,2.229,1883,2.479,1884,4.631,1885,2.229,1886,2.229,1887,2.837,1888,4.557,1889,2.229,1890,2.837,1891,2.837,1892,3.38,1893,3.38,1894,2.229,1895,2.229,1896,3.38,1897,2.229,1898,4.083,1899,3.38,1900,3.38,1901,2.229,1902,3.38,1903,2.229,1904,4.083,1905,2.229,1906,2.229,1907,2.229,1908,2.229,1909,2.229,1910,2.229,1911,4.083,1912,2.229,1913,2.229,1914,2.229,1915,2.229,1916,1.871,1917,2.229,1918,2.229,1919,2.229,1920,2.229,1921,2.229,1922,2.229,1923,2.229,1924,4.327,1925,5.155,1926,2.229,1927,3.38,1928,2.229,1929,4.083,1930,2.229,1931,3.38,1932,2.229,1933,2.229,1934,2.229,1935,2.229,1936,2.229,1937,2.229,1938,4.083,1939,2.229,1940,4.898,1941,2.229,1942,2.229,1943,2.229,1944,2.229,1945,3.38,1946,2.229,1947,2.229,1948,2.229,1949,2.229,1950,2.229,1951,2.229,1952,2.229,1953,2.229,1954,2.229,1955,2.229,1956,2.229,1957,2.229,1958,2.229,1959,2.229,1960,2.229,1961,3.38,1962,2.229,1963,1.635,1964,1.871,1965,2.229,1966,2.229,1967,2.229,1968,2.229,1969,2.229,1970,3.38,1971,2.229,1972,2.229,1973,2.229,1974,2.229,1975,2.229,1976,2.229,1977,2.229,1978,2.229,1979,2.229,1980,2.229,1981,2.229,1982,2.229,1983,2.229,1984,2.229,1985,2.229,1986,2.229,1987,2.229]],["title/classes/State.html",[0,0.259,781,1.267]],["body/classes/State.html",[0,0.347,2,0.306,3,0.233,4,0.233,5,0.133,8,0.269,13,1.71,14,1.71,17,0.166,36,0.66,39,0.031,41,0.317,43,0.842,53,1.161,62,2.328,67,0.779,72,0.518,77,1.567,82,0.816,83,1.077,93,1.331,94,2.688,96,2.501,99,1.71,115,1.877,116,2.782,121,0.81,127,2.782,129,2.857,136,1.567,139,0.426,143,2.987,153,0.779,155,0.269,156,0.586,161,0.723,169,0.586,176,1.544,187,3.274,189,1.158,228,3.178,238,1.567,256,1.331,263,2.857,278,1.057,301,0.991,322,2.857,391,0.019,392,0.019,393,0.014,402,1.568,409,1.249,433,2.875,476,0.884,485,1.057,612,2.857,669,1.693,770,4.036,771,2.077,776,3.202,777,3.69,778,3.69,779,1.567,780,1.71,781,2.391,782,2.328,783,2.328,784,2.328,785,3.266,786,3.443,787,3.178,788,3.443,789,2.328,790,2.328,791,2.328,792,3.688,793,2.328,794,2.328,795,2.328,796,2.328,797,3.942,798,3.66,799,3.202,800,3.202,801,4.376,802,4.458,803,3.942,804,3.942,805,2.328,806,2.328,807,2.328,808,4.523,809,2.328,810,2.077,811,4.458,812,2.328,813,2.328,814,4.134,815,4.577,816,2.328,817,4.376,818,2.328,819,2.328,820,2.328,821,3.202,822,2.328,823,3.202,824,3.66,825,2.328,826,2.328,827,2.328,828,2.328,829,2.328,830,2.328,831,2.328,832,2.328,833,2.328,834,2.328,835,2.328,836,2.328,837,2.328,838,2.328,839,2.328,840,2.328,841,1.71,842,2.328,843,3.66,844,3.202,845,2.328,846,3.66,847,2.077,848,3.66,849,3.202,850,2.328,851,1.877,852,2.328,853,2.328,854,2.328,855,2.328,856,2.328,857,2.328,858,2.328,859,2.328,860,2.328,861,2.328,862,3.202,863,3.202,864,3.202,865,3.266,866,3.266,867,3.66,868,2.581,869,3.202,870,2.581,871,2.857,872,2.581,873,2.077,874,1.877,875,2.077,876,2.328,877,3.942,878,2.328,879,2.328,880,2.328,881,2.328,882,2.328,883,2.328,884,2.328,1988,4.366,1989,4.366,1990,4.366,1991,4.366,1992,3.174,1993,3.174,1994,3.174,1995,3.174,1996,3.174,1997,3.174,1998,3.174,1999,3.174,2000,3.174,2001,2.664]],["title/classes/StateManager.html",[0,0.259,2002,1.931]],["body/classes/StateManager.html",[0,0.252,2,0.306,3,0.233,4,0.233,5,0.133,7,1.229,8,0.505,9,1.547,10,1.691,17,0.165,18,0.473,28,1.224,30,1.539,32,1.691,33,4.186,34,2.509,36,0.702,38,0.632,39,0.031,40,0.561,41,0.331,42,0.561,45,0.747,48,2.854,53,0.998,55,0.967,60,3.826,72,0.602,75,2.325,130,1.383,139,0.721,153,0.778,155,0.269,156,0.561,161,0.384,169,0.585,184,4.522,278,1.055,320,2.241,329,2.894,341,1.346,354,1.565,391,0.014,392,0.019,393,0.014,402,2.091,475,1.635,476,0.773,483,4.886,485,1.875,486,3.176,491,1.929,495,1.036,501,2.5,506,2.441,507,3.526,508,3.273,509,1.841,516,2.325,517,1.708,573,3.515,595,2.661,646,0.841,647,1.691,735,2.074,736,2.661,781,2.581,940,3.689,999,4.576,1010,2.661,1011,3.661,1013,2.661,1037,1.874,1248,3.661,1275,2.074,1290,3.661,1357,2.074,1358,2.661,1689,2.661,1690,2.661,1694,3.446,1716,2.325,1870,3.661,2002,3.442,2003,5.457,2004,4.362,2005,5.373,2006,4.988,2007,5.373,2008,5.373,2009,4.362,2010,4.362,2011,4.362,2012,4.362,2013,4.362,2014,3.17,2015,3.17,2016,3.17,2017,3.17,2018,3.17,2019,4.362,2020,4.362,2021,4.362,2022,4.362,2023,4.362,2024,4.362,2025,2.661,2026,2.325,2027,5.373,2028,4.988,2029,3.17,2030,4.362,2031,4.362,2032,3.17,2033,3.17,2034,3.17,2035,3.17,2036,3.17,2037,3.17,2038,3.17,2039,4.362,2040,4.362,2041,3.17,2042,3.17,2043,4.988,2044,3.17,2045,3.17,2046,3.17,2047,3.17,2048,3.17,2049,3.17,2050,3.17,2051,3.17,2052,3.661,2053,2.661,2054,3.17,2055,3.17]],["title/classes/TrackmlLoader.html",[0,0.259,2056,2.396]],["body/classes/TrackmlLoader.html",[0,0.223,2,0.27,3,0.294,4,0.206,5,0.118,8,0.535,9,0.689,12,1.679,15,1.176,17,0.209,18,0.434,19,1.259,28,1.578,30,1.441,36,0.716,38,0.69,39,0.03,40,0.613,41,0.348,42,0.605,43,1.675,44,2.416,45,0.799,46,1.471,51,1.236,53,0.827,55,0.973,67,1.146,68,1.679,72,0.617,76,1.274,82,0.377,83,0.497,114,4.945,130,1.607,134,3.277,139,0.377,148,1.274,152,2.257,155,0.238,156,0.27,161,0.34,189,0.744,199,2.313,211,2.513,353,1.659,391,0.012,392,0.018,393,0.012,397,1.176,400,1.511,406,2.658,407,3.055,409,1.649,475,1.062,476,0.709,489,1.088,490,1.176,495,1.24,496,1.274,502,1.974,504,2.157,505,1.81,506,1.176,509,1.236,520,1.976,523,1.836,569,1.274,631,1.385,633,1.819,635,2.62,636,2.62,637,2.62,638,2.76,639,2.76,640,2.62,641,3.055,642,1.836,643,3.139,644,2.367,646,1.062,647,2.171,648,3.01,649,1.659,650,1.836,651,1.836,652,3.01,653,2.515,654,2.845,655,2.515,656,2.135,658,2.367,659,1.659,660,1.819,661,1.836,662,1.511,664,1.659,665,1.976,666,2.367,667,1.511,668,1.836,669,1.088,670,1.836,671,1.836,672,1.836,673,1.511,675,1.511,676,1.659,678,2.76,683,2.764,685,2.658,688,2.355,689,2.367,690,1.659,691,1.511,692,1.511,693,1.511,694,1.836,699,1.659,700,2.515,714,3.016,718,1.659,780,2.157,895,1.511,896,1.659,903,2.515,911,3.232,913,3.361,914,4.561,915,2.937,916,2.121,917,3.361,918,2.937,919,2.937,920,2.937,921,2.937,922,2.937,923,2.355,924,4.106,925,5.394,926,2.355,927,2.355,928,2.058,929,2.355,930,2.355,931,1.659,932,1.836,933,2.355,934,2.058,941,2.058,942,3.735,943,2.937,944,2.355,945,2.62,946,2.058,947,1.836,948,2.058,949,1.836,950,2.937,951,2.937,952,1.836,953,2.355,954,2.058,955,2.937,956,2.62,957,2.937,958,1.836,959,2.058,960,2.355,961,3.055,962,3.055,963,2.058,964,1.836,965,1.659,966,2.355,967,2.058,968,2.355,969,2.355,970,3.949,971,2.355,972,2.355,973,2.355,974,2.058,975,2.355,976,2.058,977,2.058,978,2.058,979,2.355,980,2.937,981,2.058,982,2.355,983,1.836,984,1.836,985,2.058,986,2.058,987,2.355,1278,2.058,1414,2.937,2056,2.937,2057,5.033,2058,5.092,2059,4.669,2060,4.669,2061,4.669,2062,4.004,2063,4.004,2064,4.004,2065,4.004,2066,4.004,2067,2.805,2068,4.004,2069,2.805,2070,2.805,2071,2.805,2072,5.092,2073,2.805,2074,4.004,2075,2.805,2076,5.092,2077,2.805,2078,2.805,2079,2.805,2080,2.805,2081,2.805,2082,2.805,2083,2.805,2084,2.805,2085,2.805,2086,2.805,2087,2.805]],["title/classes/URLOptionsManager.html",[0,0.259,2088,2.138]],["body/classes/URLOptionsManager.html",[0,0.272,2,0.33,3,0.252,4,0.252,5,0.26,7,1.329,8,0.44,9,1.421,10,1.784,17,0.179,18,0.499,19,1.209,28,1.421,30,1.713,36,0.628,38,0.602,39,0.031,40,0.444,41,0.333,42,0.444,43,1.22,45,0.795,46,1.26,55,0.842,68,1.929,72,0.501,82,0.745,93,1.929,121,0.9,130,0.842,139,0.777,155,0.291,156,0.535,161,0.701,169,0.46,176,0.909,199,1.557,301,1.179,336,3.01,383,4.245,391,0.015,392,0.02,393,0.015,409,1.316,472,2.495,475,1.614,476,0.815,488,3.596,489,2.495,491,2.078,492,4.465,495,1.209,498,2.027,500,2.027,501,1.437,502,2.152,505,1.329,509,1.42,577,3.374,586,2.857,654,1.692,697,2.243,745,2.243,781,1.329,841,2.478,870,2.72,911,2.271,940,3.07,1275,3.01,1283,3.861,1528,3.374,1674,3.398,1694,3.279,1716,2.514,1801,3.01,1878,2.877,1924,2.877,2002,3.07,2052,2.877,2088,3.01,2089,5.001,2090,5.193,2091,5.193,2092,5.55,2093,5.55,2094,3.428,2095,5.193,2096,4.601,2097,3.428,2098,5.788,2099,5.55,2100,5.55,2101,5.55,2102,4.358,2103,4.601,2104,3.861,2105,2.877,2106,4.601,2107,3.861,2108,3.428,2109,3.428,2110,2.877,2111,3.428,2112,3.428,2113,3.428,2114,3.428,2115,3.428,2116,3.428,2117,3.428,2118,3.428,2119,3.428,2120,2.027,2121,4.601,2122,3.428,2123,3.428,2124,5.193,2125,3.428,2126,3.428,2127,3.428,2128,4.358,2129,3.861,2130,3.428,2131,3.428,2132,3.861,2133,3.428,2134,3.428,2135,3.428,2136,3.428,2137,4.601,2138,3.428,2139,3.428,2140,3.428,2141,3.428,2142,3.428,2143,2.877,2144,2.877,2145,3.428,2146,3.428,2147,3.428,2148,3.428,2149,3.428,2150,3.428,2151,2.877,2152,3.428,2153,3.428,2154,3.428]],["title/classes/VRManager.html",[0,0.259,2155,2.396]],["body/classes/VRManager.html",[0,0.193,2,0.234,3,0.178,4,0.178,5,0.102,7,0.941,8,0.431,9,0.885,12,1.511,13,1.941,17,0.127,18,0.391,19,1.238,28,1.643,32,1.667,34,2.576,36,0.699,38,0.516,39,0.031,40,0.459,41,0.33,42,0.414,43,1.261,45,0.436,47,2.868,48,3.705,50,3.216,53,0.762,55,0.969,67,1.247,68,1.802,69,2.868,72,0.567,76,2.673,78,3.025,82,0.682,83,0.9,86,3.608,95,3.727,96,1.802,99,1.308,100,3.905,121,0.894,125,1.781,128,2.644,137,1.781,139,0.484,142,1.589,143,2.308,152,2.605,153,0.596,155,0.206,156,0.531,161,0.667,169,0.577,170,3.258,176,1.14,187,1.308,189,0.644,218,1.199,254,3.025,256,1.511,263,2.359,278,1.431,301,0.551,320,2.113,350,1.781,354,2.122,376,2.161,387,1.781,391,0.011,392,0.016,393,0.011,398,2.562,402,1.544,409,1.361,475,0.956,476,0.639,485,1.772,486,2.812,495,0.695,496,1.103,565,3.905,570,2.794,662,2.315,665,1.779,841,1.941,866,3.955,1015,2.038,1023,3.992,1028,2.038,1037,1.435,1119,1.781,1138,3.025,1288,2.038,1303,3.489,1414,3.153,1546,3.608,1788,1.589,1867,2.038,1879,2.644,2001,2.038,2025,2.038,2105,2.038,2143,2.038,2155,2.644,2156,5.425,2157,4.979,2158,4.299,2159,4.299,2160,4.299,2161,4.299,2162,4.299,2163,4.299,2164,4.299,2165,4.299,2166,4.752,2167,4.299,2168,4.299,2169,4.299,2170,4.299,2171,4.299,2172,4.757,2173,3.605,2174,4.757,2175,4.757,2176,3.605,2177,4.757,2178,4.299,2179,2.428,2180,4.854,2181,5.662,2182,2.428,2183,2.428,2184,4.757,2185,2.428,2186,4.805,2187,5.324,2188,3.605,2189,3.605,2190,2.428,2191,2.428,2192,2.644,2193,2.428,2194,3.605,2195,2.428,2196,2.428,2197,2.428,2198,2.428,2199,3.605,2200,2.428,2201,3.605,2202,3.605,2203,2.428,2204,2.428,2205,3.605,2206,5.662,2207,2.428,2208,3.605,2209,2.428,2210,3.605,2211,2.428,2212,5.082,2213,2.428,2214,3.605,2215,3.605,2216,2.428,2217,2.038,2218,2.428,2219,2.428,2220,4.299,2221,2.428,2222,2.428,2223,2.428,2224,2.428,2225,2.428,2226,3.605,2227,2.428,2228,2.428,2229,3.605,2230,2.428,2231,3.605,2232,2.428,2233,2.428,2234,2.428,2235,2.428,2236,2.428,2237,2.428,2238,2.428,2239,2.428,2240,2.428,2241,4.757,2242,2.428,2243,3.605,2244,2.428,2245,3.605,2246,2.428,2247,3.605,2248,3.605,2249,4.299,2250,2.428,2251,4.299,2252,4.757,2253,2.428,2254,3.605,2255,2.428,2256,2.428,2257,2.428,2258,2.428,2259,2.428,2260,2.428,2261,2.428,2262,2.428,2263,2.428,2264,2.428,2265,2.428,2266,2.428,2267,2.428,2268,2.428,2269,2.428,2270,2.428,2271,2.428,2272,2.428,2273,2.428,2274,2.428,2275,2.428,2276,2.428,2277,2.428,2278,2.428,2279,2.428,2280,2.428,2281,2.428,2282,2.428,2283,2.428,2284,2.428,2285,2.428,2286,2.428,2287,3.605,2288,3.605,2289,2.428,2290,2.428,2291,2.428,2292,2.428,2293,2.428,2294,2.428,2295,2.428,2296,2.428,2297,2.038,2298,2.428,2299,2.428,2300,2.428,2301,3.605,2302,2.428,2303,2.428,2304,2.428,2305,2.428]],["title/interfaces/Window.html",[471,1.613,2120,1.931]],["body/interfaces/Window.html",[0,0.212,3,0.334,4,0.121,5,0.222,8,0.14,9,1.394,10,1.034,11,2.97,12,1.408,13,0.887,14,0.887,15,1.619,17,0.139,18,0.289,19,1.245,20,1.383,24,1.383,28,1.296,32,1.929,34,1.303,38,0.365,39,0.031,40,0.626,41,0.086,43,1.524,44,1.778,45,0.786,46,1.333,47,1.436,50,1.436,51,1.401,53,0.975,54,3.809,55,0.775,57,3.24,58,2.238,59,2.238,60,0.974,61,1.383,62,1.956,63,2.238,64,3.809,65,2.82,66,2.82,67,0.655,69,2.08,70,2.238,71,2.238,72,0.547,76,2.398,77,0.813,82,0.221,83,0.292,88,1.383,91,2.82,93,1.408,94,1.81,95,1.208,96,1.118,97,1.956,98,1.436,99,0.887,100,1.956,111,1.778,121,0.736,128,1.208,130,1.563,136,2.358,139,0.641,152,0.691,153,0.825,155,0.14,156,0.644,161,0.667,169,0.772,170,0.974,173,1.956,176,0.437,189,0.437,199,1.526,214,4.972,218,3.214,238,0.813,248,0.974,256,0.691,274,3.809,278,0.548,301,1.226,316,1.208,320,0.958,336,1.078,337,2.832,341,0.509,352,1.316,376,2.061,384,1.383,391,0.007,392,0.012,393,0.007,397,1.118,398,0.887,400,0.887,406,0.813,409,1.424,471,1.658,472,2.297,473,1.078,475,1.459,476,0.473,485,1.935,486,2.941,487,1.956,488,3.014,489,1.034,491,1.386,493,1.577,495,1.248,499,2.464,500,1.986,501,2.213,502,0.639,503,2.238,505,2.047,507,1.577,508,2.444,509,1.699,511,1.208,512,1.208,522,3.809,551,1.208,558,1.745,569,1.211,570,1.906,586,2.093,589,2.464,633,1.754,638,0.974,639,0.974,643,2.717,644,1.986,646,1.459,647,1.852,649,0.974,652,0.974,653,1.436,654,2.537,655,1.436,656,1.619,658,0.974,659,0.974,660,0.748,662,1.81,665,1.316,666,1.577,667,0.887,669,0.639,673,2.284,674,2.283,676,0.974,678,0.974,679,1.81,680,1.383,681,1.383,683,1.906,684,1.383,685,0.813,686,2.238,687,3.559,689,1.577,690,1.577,691,0.887,692,1.436,693,0.887,697,2.526,698,1.208,699,2.683,702,1.383,703,1.383,713,2.238,714,2.284,715,1.383,716,1.383,717,1.383,718,0.974,720,2.526,722,2.941,745,1.078,746,2.198,748,3.872,752,1.383,760,1.383,781,0.639,870,0.974,874,0.974,891,2.238,895,0.887,902,1.383,916,1.754,931,1.577,932,1.078,937,1.383,940,3.192,945,2.198,958,1.078,965,1.577,983,2.198,984,1.745,999,1.208,1014,1.956,1026,1.745,1037,1.986,1081,1.208,1082,2.238,1083,2.82,1084,2.82,1098,1.383,1145,1.383,1146,1.383,1155,2.238,1188,3.254,1279,1.383,1467,1.208,1528,1.208,1639,3.24,1642,2.238,1674,2.198,1675,2.238,1679,1.745,1694,2.679,1710,1.383,1711,1.383,1713,1.383,1729,1.208,1783,3.254,1788,3.454,1790,1.208,1803,1.383,1848,1.383,1851,1.383,1863,2.82,1865,2.464,1883,1.208,1884,1.383,1887,1.383,1890,2.238,1891,1.383,1916,2.82,1963,1.956,2002,0.974,2053,1.383,2088,1.745,2110,1.383,2120,2.825,2144,1.383,2157,2.832,2166,1.383,2186,1.208,2306,1.383,2307,1.383,2308,1.648,2309,1.648,2310,3.36,2311,3.36,2312,1.648,2313,1.648,2314,1.648,2315,2.667,2316,2.667,2317,1.648,2318,1.648,2319,1.648,2320,1.648,2321,1.648,2322,1.648,2323,1.648,2324,1.648,2325,1.648,2326,1.648,2327,1.648,2328,1.648,2329,1.648,2330,1.648,2331,1.648,2332,3.36,2333,1.648,2334,2.238,2335,1.648,2336,1.648,2337,1.648,2338,1.648,2339,1.648,2340,1.648,2341,3.36,2342,1.648,2343,4.778,2344,1.648,2345,1.648,2346,1.648,2347,1.648,2348,1.648,2349,1.648,2350,1.648,2351,1.648,2352,2.667,2353,2.667,2354,2.667,2355,2.667,2356,2.667,2357,1.648,2358,1.648,2359,1.648,2360,1.648,2361,1.648,2362,1.648,2363,1.648,2364,1.648,2365,1.648,2366,3.559,2367,6.093,2368,4.538,2369,4.538,2370,4.538,2371,4.538,2372,5.813,2373,3.861,2374,6.159,2375,4.538,2376,3.36,2377,1.383,2378,1.648,2379,2.667,2380,1.648,2381,4.241,2382,3.861,2383,1.648,2384,4.241,2385,1.648,2386,1.648,2387,1.648,2388,1.648,2389,1.648,2390,1.648,2391,1.648,2392,2.667,2393,1.648,2394,1.648,2395,1.648,2396,1.648,2397,1.648,2398,1.648,2399,1.648,2400,1.648,2401,1.648,2402,1.648,2403,1.648,2404,1.648,2405,1.648,2406,1.648,2407,1.648,2408,2.667,2409,2.667,2410,1.648,2411,1.648,2412,3.36,2413,2.667,2414,1.648,2415,1.648,2416,1.648,2417,1.648,2418,1.648,2419,3.36,2420,2.667,2421,2.667,2422,2.667,2423,1.648,2424,1.648,2425,2.667,2426,1.648,2427,1.648,2428,1.648,2429,1.648,2430,1.648,2431,1.648,2432,1.648,2433,3.809,2434,1.648,2435,3.36,2436,1.648,2437,1.648,2438,1.648,2439,3.36,2440,1.383,2441,1.648,2442,1.648,2443,1.648,2444,1.648,2445,1.648,2446,1.648,2447,1.648,2448,1.648,2449,1.648,2450,1.648,2451,1.648,2452,1.648,2453,1.648,2454,1.648,2455,1.648,2456,1.648,2457,1.648,2458,1.648,2459,1.648,2460,1.648,2461,1.648,2462,1.648,2463,1.648,2464,1.648,2465,1.648,2466,1.648,2467,1.648,2468,2.667,2469,1.648,2470,1.648,2471,1.648,2472,1.648,2473,1.648,2474,1.383,2475,1.648,2476,1.648,2477,1.648,2478,1.648,2479,1.648,2480,1.648,2481,1.383,2482,1.648,2483,1.648,2484,1.648,2485,1.648,2486,1.648,2487,1.383,2488,1.648,2489,1.648,2490,1.648,2491,1.383,2492,1.648,2493,1.648,2494,2.667,2495,1.648,2496,1.648,2497,1.648,2498,1.648,2499,1.648,2500,1.648,2501,1.648,2502,2.667,2503,1.648,2504,1.383,2505,1.648,2506,1.648,2507,1.648]],["title/changelog.html",[2192,2.003,2508,2.003,2509,2.731]],["body/changelog.html",[3,0.217,4,0.217,5,0.202,9,1.28,10,1.147,11,3.145,32,1.147,34,1.147,39,0.018,40,0.285,42,0.463,45,0.832,46,0.671,50,1.593,51,1.283,60,1.748,67,1.02,82,0.397,83,0.736,93,1.24,96,1.24,111,2.186,115,2.457,116,2.052,130,1.436,133,1.935,139,0.558,169,0.558,183,2.482,211,2.372,212,2.169,218,2.812,248,2.457,273,3.082,320,2.046,329,2.239,341,1.283,349,2.482,352,2.711,376,2.713,383,3.525,391,0.013,392,0.018,393,0.013,397,1.24,398,3.068,399,4.034,446,2.169,472,2.209,475,1.822,479,2.482,487,2.169,488,3.152,489,1.863,491,1.872,493,2.457,500,1.748,501,2.186,502,1.863,505,2.13,507,1.748,508,1.593,509,1.609,520,2.052,524,2.169,530,1.935,533,2.482,550,2.169,555,2.482,558,1.935,583,2.169,586,2.052,643,1.46,646,1.708,647,2.209,648,3.368,654,2.052,664,1.748,665,2.052,669,1.147,692,1.593,696,2.482,722,1.748,746,1.935,748,2.169,781,2.021,810,1.935,841,1.593,851,2.841,900,2.169,952,1.935,956,2.72,964,1.935,965,1.748,1157,2.169,1188,1.748,1189,3.145,1208,2.482,1237,2.169,1254,2.482,1258,3.489,1275,2.72,1278,2.169,1302,2.169,1321,2.169,1335,1.935,1506,2.482,1550,3.489,1558,2.482,1609,3.489,1620,3.489,1663,3.525,1674,1.935,1679,1.935,1726,3.048,1729,3.525,1773,2.169,1777,2.482,1783,3.082,1785,3.489,1786,3.489,1788,1.935,1813,2.482,1865,3.048,1879,3.824,1883,2.169,1964,2.482,2102,3.489,2104,3.489,2120,1.748,2132,2.482,2157,4.029,2180,2.482,2186,2.169,2217,2.482,2297,2.482,2334,2.482,2377,2.482,2433,2.482,2440,4.034,2481,4.61,2487,4.781,2491,2.482,2504,2.482,2508,2.169,2510,2.957,2511,2.957,2512,2.957,2513,2.957,2514,2.957,2515,2.957,2516,2.957,2517,2.957,2518,2.957,2519,4.806,2520,2.957,2521,5.493,2522,2.957,2523,2.957,2524,2.957,2525,6.328,2526,2.957,2527,4.157,2528,2.957,2529,5.214,2530,2.957,2531,2.957,2532,2.957,2533,2.957,2534,2.957,2535,2.957,2536,2.957,2537,4.157,2538,2.957,2539,2.957,2540,5.493,2541,6.371,2542,2.957,2543,2.957,2544,2.957,2545,2.957,2546,2.957,2547,4.806,2548,5.493,2549,2.957,2550,2.957,2551,2.957,2552,3.489,2553,2.957,2554,2.957,2555,2.957,2556,2.957,2557,2.957,2558,2.957,2559,2.957,2560,4.157,2561,2.957,2562,2.957,2563,2.957,2564,2.957,2565,2.957,2566,2.957,2567,2.957,2568,2.957,2569,2.957,2570,2.957,2571,2.957,2572,2.957,2573,4.157,2574,2.957,2575,2.957,2576,4.157,2577,4.157,2578,4.157,2579,2.957,2580,5.214,2581,2.957,2582,2.957,2583,4.157,2584,2.957,2585,2.957,2586,2.957,2587,2.957,2588,2.482,2589,2.957,2590,2.957,2591,4.806,2592,2.957,2593,2.957,2594,4.157,2595,2.957,2596,3.489,2597,2.957,2598,2.957,2599,2.957,2600,2.957,2601,2.957,2602,2.957,2603,3.489,2604,2.957,2605,2.957,2606,2.957,2607,2.957,2608,2.957,2609,4.157,2610,2.957,2611,2.957,2612,2.957,2613,2.957,2614,2.957,2615,2.957,2616,2.957,2617,2.957,2618,2.957,2619,2.482,2620,2.957,2621,2.957,2622,2.957,2623,2.957,2624,5.214,2625,2.957,2626,2.957,2627,2.957,2628,2.957,2629,2.957,2630,2.957,2631,2.957,2632,4.157,2633,2.957,2634,2.957,2635,2.957,2636,2.957,2637,2.957,2638,2.957,2639,2.957,2640,2.957,2641,4.157,2642,2.957,2643,2.957,2644,2.957,2645,2.957,2646,2.957,2647,2.957,2648,2.957,2649,2.957,2650,2.957,2651,2.957,2652,2.957,2653,2.957,2654,2.957,2655,2.957,2656,2.957,2657,2.957,2658,2.957,2659,2.957,2660,2.957,2661,2.957,2662,2.957,2663,2.957,2664,2.957,2665,2.957,2666,2.957,2667,2.957,2668,2.957,2669,2.957,2670,2.957,2671,2.957,2672,2.957,2673,2.957,2674,2.957,2675,2.957,2676,2.957,2677,2.957,2678,2.957,2679,2.957,2680,2.957,2681,2.957,2682,2.957,2683,2.957,2684,2.957,2685,2.957,2686,2.957,2687,2.957,2688,2.957,2689,2.957,2690,2.957,2691,2.957,2692,2.957,2693,2.957,2694,2.957,2695,2.957,2696,2.957,2697,2.957,2698,2.957,2699,2.957,2700,2.957,2701,4.157,2702,2.957,2703,2.957,2704,2.482,2705,2.957,2706,2.169]],["title/coverage.html",[2707,3.738]],["body/coverage.html",[0,0.543,1,2.97,5,0.17,6,3.399,7,2.556,35,2.65,39,0.03,41,0.211,45,0.49,46,0.919,121,0.657,140,3.399,391,0.018,392,0.023,393,0.018,394,2.97,395,3.399,396,3.761,401,2.394,416,2.394,471,2.778,472,1.57,474,3.399,482,2.181,489,1.57,501,1.698,506,1.698,510,2.65,517,2.181,520,1.999,521,3.399,527,2.65,548,2.65,549,3.399,630,3.399,631,3.193,653,2.181,655,2.181,656,1.698,704,2.97,705,3.399,735,2.65,770,3.683,771,3.683,779,1.999,781,1.57,885,3.399,886,3.399,909,2.97,910,3.399,911,1.999,916,1.839,998,3.399,1062,3.399,1093,5.763,1231,2.97,1232,2.97,1392,3.399,1421,2.65,1524,3.399,1525,3.399,1541,2.65,1542,3.399,1543,3.399,1601,3.399,1602,3.399,1652,3.399,1694,2.181,1771,2.97,1772,3.761,1783,2.394,1801,3.872,1839,2.97,1840,3.399,2002,2.394,2003,3.399,2026,2.97,2056,2.97,2057,3.399,2088,2.65,2089,3.399,2107,3.399,2120,2.394,2155,2.97,2156,3.399,2306,4.304,2307,4.304,2619,3.399,2707,3.399,2708,4.05,2709,4.05,2710,4.05,2711,4.05,2712,5.629,2713,5.629,2714,4.05,2715,3.399,2716,5.917,2717,4.304,2718,4.05,2719,5.629,2720,4.05,2721,4.05,2722,4.05,2723,4.05,2724,4.05,2725,4.05,2726,4.05,2727,4.05,2728,4.05,2729,5.917,2730,5.629,2731,4.05,2732,4.05,2733,4.05,2734,5.129,2735,4.05,2736,4.05,2737,4.05,2738,4.05,2739,4.05,2740,4.05,2741,4.05,2742,4.05,2743,4.05,2744,4.05,2745,4.05,2746,4.05,2747,4.05,2748,4.05,2749,4.05,2750,4.05]],["title/dependencies.html",[2706,2.003,2751,3.297]],["body/dependencies.html",[39,0.029,153,1.287,154,4.4,391,0.023,392,0.026,393,0.023,500,3.1,2151,4.4,2704,4.4,2751,4.4,2752,5.243,2753,5.243,2754,5.243,2755,5.243,2756,5.243,2757,5.243]],["title/index.html",[17,0.142,2192,2.003,2508,2.003]],["body/index.html",[2,0.424,5,0.185,15,1.844,39,0.03,45,0.815,46,1.383,51,1.357,111,1.844,121,0.988,139,0.725,161,0.738,173,4.285,218,2.665,341,1.803,376,1.998,391,0.019,392,0.024,393,0.019,472,2.525,475,1.76,480,3.96,482,2.908,489,2.093,491,1.939,502,2.093,504,2.369,509,2.025,570,2.171,586,2.665,646,1.166,691,2.369,693,2.369,714,2.369,722,2.6,745,2.878,747,3.691,772,4.532,903,2.369,911,2.665,1621,3.691,1694,3.369,1773,3.226,1963,3.226,2128,4.532,2129,3.691,2474,4.532,2552,4.532,2588,4.532,2596,3.691,2603,3.691,2706,3.226,2758,4.398,2759,4.398,2760,4.398,2761,4.398,2762,4.398,2763,4.398,2764,4.398,2765,5.4,2766,5.4,2767,5.4,2768,4.398,2769,4.398,2770,4.398,2771,4.398,2772,5.4,2773,4.398,2774,4.398,2775,4.398,2776,4.398,2777,4.398,2778,4.398,2779,4.398,2780,4.398,2781,4.398,2782,4.398,2783,4.398,2784,4.398,2785,4.398,2786,4.398,2787,4.398,2788,4.398,2789,4.398,2790,4.398,2791,4.398,2792,4.398]],["title/modules.html",[2793,3.738]],["body/modules.html",[39,0.027,391,0.023,392,0.027,393,0.023,2793,4.479]],["title/overview.html",[2794,3.738]],["body/overview.html",[2,0.512,39,0.027,185,3.141,391,0.023,392,0.027,393,0.023,473,3.476,2794,4.459,2795,5.313]],["title/miscellaneous/typealiases.html",[2796,1.787,2797,3.928]],["body/miscellaneous/typealiases.html",[17,0.271,39,0.029,41,0.271,111,2.174,391,0.023,392,0.026,393,0.023,472,2.011,501,2.496,506,2.174,517,2.794,647,2.011,1231,3.804,1232,4.368,1273,4.998,1301,4.353,1302,3.804,1303,3.804,1304,4.353,1335,3.394,2796,3.394,2798,5.187,2799,5.187]],["title/miscellaneous/variables.html",[2796,1.787,2800,3.297]],["body/miscellaneous/variables.html",[5,0.264,17,0.233,39,0.03,41,0.307,45,0.542,46,1.391,51,1.38,55,0.725,82,0.79,83,1.043,121,1.059,130,1.098,134,2.409,161,0.742,211,2.207,329,2.409,341,1.38,354,2.207,376,2.031,391,0.02,392,0.024,393,0.02,409,1.28,416,3.225,491,1.606,492,3.28,495,1.212,498,3.225,505,1.734,631,2.692,633,2.031,735,3.569,746,3.569,961,2.926,962,2.926,1131,3.753,1335,2.926,1772,3.28,1776,3.753,1783,3.623,1790,3.28,1801,2.926,1802,3.753,2026,4.001,2366,4.578,2715,3.753,2717,3.753,2796,2.926,2800,3.753,2801,4.472,2802,4.472,2803,5.455,2804,5.886,2805,4.472,2806,5.455,2807,4.472,2808,4.472,2809,4.472,2810,6.128,2811,5.455,2812,4.472,2813,4.472,2814,5.455,2815,4.472,2816,4.472,2817,4.472,2818,4.472,2819,5.455,2820,4.472,2821,4.472,2822,4.472,2823,4.472,2824,4.472,2825,4.472,2826,4.472,2827,4.472,2828,4.472,2829,4.472,2830,4.472,2831,4.472,2832,4.472,2833,4.472,2834,4.472,2835,4.472,2836,4.472,2837,4.472,2838,4.472,2839,4.472,2840,4.472,2841,4.472]]],"invertedIndex":[["",{"_index":39,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":176,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["0.0002",{"_index":845,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["0.003",{"_index":1490,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0.01",{"_index":241,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixLoader.html":{}}}],["0.1",{"_index":454,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["0.124.0",{"_index":2757,"title":{},"body":{"dependencies.html":{}}}],["0.25",{"_index":197,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["0.3",{"_index":1454,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0.5",{"_index":847,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["0.7",{"_index":466,"title":{},"body":{"classes/CMSObjects.html":{}}}],["0.7.7",{"_index":2753,"title":{},"body":{"dependencies.html":{}}}],["0.75",{"_index":198,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["01",{"_index":2600,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":2559,"title":{},"body":{"changelog.html":{}}}],["029d526",{"_index":2644,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":2520,"title":{},"body":{"changelog.html":{}}}],["04dc545",{"_index":2657,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":2701,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":2626,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":2667,"title":{},"body":{"changelog.html":{}}}],["0837334",{"_index":2586,"title":{},"body":{"changelog.html":{}}}],["0980379",{"_index":2673,"title":{},"body":{"changelog.html":{}}}],["0a26fea",{"_index":2670,"title":{},"body":{"changelog.html":{}}}],["0x000fff",{"_index":2388,"title":{},"body":{"interfaces/Window.html":{}}}],["0x8c8c8c",{"_index":2777,"title":{},"body":{"index.html":{}}}],["0xffffff",{"_index":465,"title":{},"body":{"classes/CMSObjects.html":{}}}],["1",{"_index":189,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["1.0.1",{"_index":2704,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["1.0.2",{"_index":2700,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":2665,"title":{},"body":{"changelog.html":{}}}],["1.2.0",{"_index":2623,"title":{},"body":{"changelog.html":{}}}],["1.3.0",{"_index":2599,"title":{},"body":{"changelog.html":{}}}],["1.3.0.min.js",{"_index":2785,"title":{},"body":{"index.html":{}}}],["1.4.0",{"_index":2558,"title":{},"body":{"changelog.html":{}}}],["1.5.0",{"_index":2518,"title":{},"body":{"changelog.html":{}}}],["1/1",{"_index":2716,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":115,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/InfoLogger.html":{},"classes/PhoenixObjects.html":{},"classes/State.html":{},"changelog.html":{}}}],["100",{"_index":1093,"title":{},"body":{"classes/PhoenixLoader.html":{},"coverage.html":{}}}],["1000",{"_index":129,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["10000",{"_index":305,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixLoader.html":{}}}],["11",{"_index":2666,"title":{},"body":{"changelog.html":{}}}],["11/11",{"_index":2735,"title":{},"body":{"coverage.html":{}}}],["1100",{"_index":1433,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["1100.0",{"_index":1485,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["11000",{"_index":84,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["12",{"_index":2625,"title":{},"body":{"changelog.html":{}}}],["1261358",{"_index":2695,"title":{},"body":{"changelog.html":{}}}],["13/13",{"_index":2739,"title":{},"body":{"coverage.html":{}}}],["15/15",{"_index":2733,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":2560,"title":{},"body":{"changelog.html":{}}}],["16/16",{"_index":2734,"title":{},"body":{"coverage.html":{}}}],["17.4.0",{"_index":2752,"title":{},"body":{"dependencies.html":{}}}],["17909eb",{"_index":2691,"title":{},"body":{"changelog.html":{}}}],["18f8db2",{"_index":2647,"title":{},"body":{"changelog.html":{}}}],["19/19",{"_index":2731,"title":{},"body":{"coverage.html":{}}}],["1906976",{"_index":2689,"title":{},"body":{"changelog.html":{}}}],["1975d70",{"_index":2643,"title":{},"body":{"changelog.html":{}}}],["1].oncomplete",{"_index":348,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["2",{"_index":433,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{}}}],["2/2",{"_index":2712,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":2296,"title":{},"body":{"classes/VRManager.html":{}}}],["200",{"_index":1094,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["2020",{"_index":2624,"title":{},"body":{"changelog.html":{}}}],["2021",{"_index":2519,"title":{},"body":{"changelog.html":{}}}],["2219a3e",{"_index":2581,"title":{},"body":{"changelog.html":{}}}],["22a1ec8",{"_index":2649,"title":{},"body":{"changelog.html":{}}}],["23/23",{"_index":2729,"title":{},"body":{"coverage.html":{}}}],["24",{"_index":183,"title":{},"body":{"classes/AnimationsManager.html":{},"changelog.html":{}}}],["24/24",{"_index":2748,"title":{},"body":{"coverage.html":{}}}],["25b2a9d",{"_index":2653,"title":{},"body":{"changelog.html":{}}}],["26/26",{"_index":2732,"title":{},"body":{"coverage.html":{}}}],["266af04",{"_index":2532,"title":{},"body":{"changelog.html":{}}}],["27/27",{"_index":2728,"title":{},"body":{"coverage.html":{}}}],["28/11/2020",{"_index":2224,"title":{},"body":{"classes/VRManager.html":{}}}],["29/08/2020",{"_index":2218,"title":{},"body":{"classes/VRManager.html":{}}}],["2fa310f",{"_index":2556,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":185,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"overview.html":{}}}],["3.3333",{"_index":1999,"title":{},"body":{"classes/State.html":{}}}],["3.5.0",{"_index":2755,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":2719,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":387,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"classes/VRManager.html":{}}}],["300",{"_index":370,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["3000",{"_index":282,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["30b0383",{"_index":2654,"title":{},"body":{"changelog.html":{}}}],["32",{"_index":357,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["3200.0",{"_index":1488,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["33",{"_index":2795,"title":{},"body":{"overview.html":{}}}],["33/33",{"_index":2722,"title":{},"body":{"coverage.html":{}}}],["34/34",{"_index":2725,"title":{},"body":{"coverage.html":{}}}],["3475836",{"_index":2563,"title":{},"body":{"changelog.html":{}}}],["359d353",{"_index":2534,"title":{},"body":{"changelog.html":{}}}],["36/36",{"_index":2738,"title":{},"body":{"coverage.html":{}}}],["37/37",{"_index":2745,"title":{},"body":{"coverage.html":{}}}],["3756330",{"_index":2585,"title":{},"body":{"changelog.html":{}}}],["37df19f",{"_index":2629,"title":{},"body":{"changelog.html":{}}}],["3918159",{"_index":2676,"title":{},"body":{"changelog.html":{}}}],["399ac77",{"_index":2703,"title":{},"body":{"changelog.html":{}}}],["3b1991c",{"_index":2528,"title":{},"body":{"changelog.html":{}}}],["3ce675f",{"_index":2572,"title":{},"body":{"changelog.html":{}}}],["3d",{"_index":669,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["3f6367f",{"_index":2579,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":440,"title":{},"body":{"classes/CMSObjects.html":{}}}],["4/4",{"_index":2718,"title":{},"body":{"coverage.html":{}}}],["4000.0",{"_index":1498,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["4262a1b",{"_index":2660,"title":{},"body":{"changelog.html":{}}}],["4764196",{"_index":2631,"title":{},"body":{"changelog.html":{}}}],["48130b2",{"_index":2662,"title":{},"body":{"changelog.html":{}}}],["4b10452",{"_index":2664,"title":{},"body":{"changelog.html":{}}}],["4f80bd6",{"_index":2562,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":437,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixLoader.html":{}}}],["5/5",{"_index":2720,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1119,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/VRManager.html":{}}}],["500",{"_index":181,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["5000",{"_index":117,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["51/51",{"_index":2711,"title":{},"body":{"coverage.html":{}}}],["5139c6e",{"_index":2612,"title":{},"body":{"changelog.html":{}}}],["5283e9a",{"_index":2677,"title":{},"body":{"changelog.html":{}}}],["58/58",{"_index":2747,"title":{},"body":{"coverage.html":{}}}],["5ea04f1",{"_index":2554,"title":{},"body":{"changelog.html":{}}}],["5f0f942",{"_index":2658,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":228,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["6/6",{"_index":2730,"title":{},"body":{"coverage.html":{}}}],["60269f7",{"_index":2595,"title":{},"body":{"changelog.html":{}}}],["61/61",{"_index":2743,"title":{},"body":{"coverage.html":{}}}],["612205c",{"_index":2696,"title":{},"body":{"changelog.html":{}}}],["6943f79",{"_index":2621,"title":{},"body":{"changelog.html":{}}}],["69d3f75",{"_index":2655,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":439,"title":{},"body":{"classes/CMSObjects.html":{}}}],["7/7",{"_index":2714,"title":{},"body":{"coverage.html":{}}}],["73b7c27",{"_index":2671,"title":{},"body":{"changelog.html":{}}}],["789da8b",{"_index":2620,"title":{},"body":{"changelog.html":{}}}],["79e6d7c",{"_index":2593,"title":{},"body":{"changelog.html":{}}}],["7bcd7ba",{"_index":2539,"title":{},"body":{"changelog.html":{}}}],["7d1ca22",{"_index":2699,"title":{},"body":{"changelog.html":{}}}],["7d606b2",{"_index":2622,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":322,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["8/8",{"_index":2723,"title":{},"body":{"coverage.html":{}}}],["8ba94e7",{"_index":2614,"title":{},"body":{"changelog.html":{}}}],["8cbcaa5",{"_index":2526,"title":{},"body":{"changelog.html":{}}}],["8d7b160",{"_index":2584,"title":{},"body":{"changelog.html":{}}}],["8f3e8e1",{"_index":2633,"title":{},"body":{"changelog.html":{}}}],["9/9",{"_index":2713,"title":{},"body":{"coverage.html":{}}}],["9474565",{"_index":2659,"title":{},"body":{"changelog.html":{}}}],["947f6bf",{"_index":2651,"title":{},"body":{"changelog.html":{}}}],["9540af5",{"_index":2544,"title":{},"body":{"changelog.html":{}}}],["9e3dc20",{"_index":2698,"title":{},"body":{"changelog.html":{}}}],["9eb21f5",{"_index":2682,"title":{},"body":{"changelog.html":{}}}],["9efd9ca",{"_index":2688,"title":{},"body":{"changelog.html":{}}}],["a474af2",{"_index":2553,"title":{},"body":{"changelog.html":{}}}],["a6a1c19",{"_index":2628,"title":{},"body":{"changelog.html":{}}}],["a8f8353",{"_index":2530,"title":{},"body":{"changelog.html":{}}}],["ab8feb4",{"_index":2636,"title":{},"body":{"changelog.html":{}}}],["ability",{"_index":2481,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["ac0c4f1",{"_index":2536,"title":{},"body":{"changelog.html":{}}}],["acc",{"_index":1049,"title":{},"body":{"classes/LoadingManager.html":{}}}],["access",{"_index":2464,"title":{},"body":{"interfaces/Window.html":{}}}],["accessing",{"_index":1802,"title":{},"body":{"classes/ScriptLoader.html":{},"miscellaneous/variables.html":{}}}],["active",{"_index":48,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["activecamera",{"_index":33,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/StateManager.html":{}}}],["activeobject",{"_index":1841,"title":{},"body":{"classes/SelectionManager.html":{}}}],["actual",{"_index":225,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixLoader.html":{}}}],["add",{"_index":646,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["add('could",{"_index":2145,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["add(data",{"_index":897,"title":{},"body":{"classes/InfoLogger.html":{}}}],["add(k1.clone().multiplyscalar(h2",{"_index":819,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k1.clone().multiplyscalar(half_h",{"_index":822,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k2",{"_index":853,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k2.clone().multiplyscalar(2",{"_index":857,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k2.clone().multiplyscalar(half_h",{"_index":826,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3",{"_index":854,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3.clone().multiplyscalar(2",{"_index":858,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3.clone().multiplyscalar(h",{"_index":832,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3.clone().multiplyscalar(h2",{"_index":829,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k4",{"_index":859,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(state.dir.clone().multiplyscalar(h",{"_index":828,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(state.dir.clone().multiplyscalar(half_h",{"_index":818,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["addchild",{"_index":1242,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addchild(name",{"_index":1270,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addcollection",{"_index":918,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addcollection(objectcollection",{"_index":941,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addconfig",{"_index":1243,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addconfig('button",{"_index":2030,"title":{},"body":{"classes/StateManager.html":{}}}],["addconfig(type",{"_index":1272,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["added",{"_index":1026,"title":{},"body":{"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["addeventlistener('click",{"_index":1928,"title":{},"body":{"classes/SelectionManager.html":{}}}],["addeventlistener('mousemove",{"_index":1926,"title":{},"body":{"classes/SelectionManager.html":{}}}],["addeventlistener('touchstart",{"_index":1930,"title":{},"body":{"classes/SelectionManager.html":{}}}],["adding",{"_index":662,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["addjetssizeoption",{"_index":1106,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["addlabeltoeventobject",{"_index":635,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addlabeltoeventobject(label",{"_index":642,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addlabeltoobject",{"_index":2501,"title":{},"body":{"interfaces/Window.html":{}}}],["addloadableitem",{"_index":1004,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadableitem(id",{"_index":1019,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistener",{"_index":1005,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistener(callback",{"_index":1021,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistenerwithcheck",{"_index":1006,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistenerwithcheck(callback",{"_index":1024,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addobjecttype",{"_index":919,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addobjecttype(object",{"_index":954,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addoutlinepassforselection",{"_index":559,"title":{},"body":{"classes/EffectsManager.html":{}}}],["addprogresslistener",{"_index":1007,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addprogresslistener(callback",{"_index":1027,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addrenderer",{"_index":1657,"title":{},"body":{"classes/RendererManager.html":{}}}],["addrenderer(renderer",{"_index":1681,"title":{},"body":{"classes/RendererManager.html":{}}}],["adds",{"_index":945,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["again",{"_index":255,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["aliases",{"_index":2798,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alleventdata",{"_index":318,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alleventdata.getobjectbyname('track",{"_index":378,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alleventdata.traverse((eventobject",{"_index":338,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alleventdata.visible",{"_index":385,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["allow",{"_index":487,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["allowcustomvalue",{"_index":1101,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["allowed",{"_index":536,"title":{},"body":{"classes/Cut.html":{}}}],["allowing",{"_index":715,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["allowselection(selectedobject",{"_index":2478,"title":{},"body":{"interfaces/Window.html":{}}}],["allowurloptions",{"_index":477,"title":{},"body":{"interfaces/Configuration.html":{}}}],["allscripts",{"_index":1807,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["alltweens",{"_index":205,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(animationspheretween",{"_index":308,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(eventobjecttween",{"_index":236,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(scaletween",{"_index":260,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(tween",{"_index":345,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens[0].onstart",{"_index":309,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens[alltweens.length",{"_index":347,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["along",{"_index":118,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{}}}],["alongaxisposition",{"_index":175,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alpha",{"_index":1755,"title":{},"body":{"classes/RendererManager.html":{}}}],["already",{"_index":1835,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["always",{"_index":1609,"title":{},"body":{"classes/RKHelper.html":{},"changelog.html":{}}}],["ambientlight",{"_index":1906,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ambientlight().type",{"_index":1913,"title":{},"body":{"classes/SelectionManager.html":{}}}],["angle",{"_index":184,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PresetView.html":{},"classes/StateManager.html":{}}}],["angular",{"_index":2596,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["animate",{"_index":57,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animateclippingwithcollision",{"_index":20,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animateclippingwithcollision(tweenduration",{"_index":52,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateevent",{"_index":21,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateevent(tweenduration",{"_index":73,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithclipping",{"_index":22,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithclipping(tweenduration",{"_index":79,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithcollision",{"_index":23,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithcollision(tweenduration",{"_index":88,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animatethroughevent",{"_index":24,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animatethroughevent(startpos",{"_index":90,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animatewithcollision",{"_index":25,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animatewithcollision(animationfunction",{"_index":101,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animating",{"_index":126,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animation",{"_index":11,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["animationclipplane",{"_index":342,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationclipplane.constant",{"_index":343,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationclipplanes",{"_index":323,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationclipplanes.push(new",{"_index":327,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationfunction",{"_index":105,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationfunction(tweenduration",{"_index":388,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animations",{"_index":70,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animationsmanager",{"_index":1,"title":{"classes/AnimationsManager.html":{}},"body":{"classes/AnimationsManager.html":{},"coverage.html":{}}}],["animationsphere",{"_index":201,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretween",{"_index":280,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretween.chain(animationspheretweenclone",{"_index":307,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretween.onupdate(onanimationsphereupdate",{"_index":302,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretweenclone",{"_index":304,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretweenclone.oncomplete",{"_index":313,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretweenclone.onupdate(onanimationsphereupdate",{"_index":306,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["another",{"_index":2692,"title":{},"body":{"changelog.html":{}}}],["antialias",{"_index":583,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"changelog.html":{}}}],["antialiasing",{"_index":555,"title":{},"body":{"classes/EffectsManager.html":{},"changelog.html":{}}}],["antialiasrender",{"_index":560,"title":{},"body":{"classes/EffectsManager.html":{}}}],["antialiasrender(scene",{"_index":591,"title":{},"body":{"classes/EffectsManager.html":{}}}],["any).geometry",{"_index":288,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["any)?.material.color",{"_index":382,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["any)?.material?.color",{"_index":381,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["any)?.xr",{"_index":2228,"title":{},"body":{"classes/VRManager.html":{}}}],["any,typefolderpm",{"_index":959,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["api",{"_index":2760,"title":{},"body":{"index.html":{}}}],["app",{"_index":2541,"title":{},"body":{"changelog.html":{}}}],["appended",{"_index":1799,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["application",{"_index":2764,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":2811,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applied",{"_index":353,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/TrackmlLoader.html":{}}}],["apply",{"_index":336,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["applyconfigstate",{"_index":1244,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["applyconfigstate(config",{"_index":1276,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["applyeventoptions",{"_index":2091,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyeventoptions(defaulteventpath",{"_index":2097,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyhidewidgetsoption",{"_index":2092,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applying",{"_index":2632,"title":{},"body":{"changelog.html":{}}}],["applyoptions",{"_index":2093,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["archive",{"_index":2543,"title":{},"body":{"changelog.html":{}}}],["around",{"_index":2210,"title":{},"body":{"classes/VRManager.html":{}}}],["array",{"_index":136,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["array.from",{"_index":267,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["array.isarray(hitsparams",{"_index":1465,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["arraybuffer",{"_index":2404,"title":{},"body":{"interfaces/Window.html":{}}}],["arrays",{"_index":1959,"title":{},"body":{"classes/SelectionManager.html":{}}}],["aspects",{"_index":2316,"title":{},"body":{"interfaces/Window.html":{}}}],["assets/preset",{"_index":1539,"title":{},"body":{"classes/PresetView.html":{}}}],["assign",{"_index":2601,"title":{},"body":{"changelog.html":{}}}],["associated",{"_index":690,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["async",{"_index":1777,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{}}}],["atlas",{"_index":1620,"title":{},"body":{"classes/RKHelper.html":{},"changelog.html":{}}}],["attribute",{"_index":524,"title":{},"body":{"classes/Cut.html":{},"classes/ScriptLoader.html":{},"changelog.html":{}}}],["attributename",{"_index":1954,"title":{},"body":{"classes/SelectionManager.html":{}}}],["attributes",{"_index":1467,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["attributevalue",{"_index":1955,"title":{},"body":{"classes/SelectionManager.html":{}}}],["automatic",{"_index":1090,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["available",{"_index":1683,"title":{},"body":{"classes/RendererManager.html":{}}}],["available/created",{"_index":1680,"title":{},"body":{"classes/RendererManager.html":{}}}],["averageprogress",{"_index":1053,"title":{},"body":{"classes/LoadingManager.html":{}}}],["await",{"_index":1813,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{}}}],["axes",{"_index":120,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["axeshelper",{"_index":1907,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axeshelper().type",{"_index":1915,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axis",{"_index":174,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["b",{"_index":1723,"title":{},"body":{"classes/RendererManager.html":{}}}],["b46c49f",{"_index":2685,"title":{},"body":{"changelog.html":{}}}],["b7e8da0",{"_index":2602,"title":{},"body":{"changelog.html":{}}}],["b_first",{"_index":805,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["b_last",{"_index":800,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["b_middle",{"_index":799,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["back",{"_index":435,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixMenuNode.html":{}}}],["backs",{"_index":420,"title":{},"body":{"classes/CMSObjects.html":{}}}],["backs.push(new",{"_index":426,"title":{},"body":{"classes/CMSObjects.html":{}}}],["before",{"_index":1880,"title":{},"body":{"classes/SelectionManager.html":{}}}],["being",{"_index":902,"title":{},"body":{"classes/InfoLogger.html":{},"interfaces/Window.html":{}}}],["better",{"_index":2573,"title":{},"body":{"changelog.html":{}}}],["big",{"_index":2678,"title":{},"body":{"changelog.html":{}}}],["blob",{"_index":2831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blob([data",{"_index":2832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bloom",{"_index":554,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["boolean",{"_index":485,"title":{},"body":{"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["boolean(this.urloptions.get('hidewidgets",{"_index":2148,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["both",{"_index":1639,"title":{},"body":{"classes/RKHelper.html":{},"interfaces/Window.html":{}}}],["bottom",{"_index":443,"title":{},"body":{"classes/CMSObjects.html":{}}}],["bounded",{"_index":2232,"title":{},"body":{"classes/VRManager.html":{}}}],["bounds",{"_index":875,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["box",{"_index":427,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.computefacenormals",{"_index":447,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.computevertexnormals",{"_index":448,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.faces.push(new",{"_index":431,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.vertices",{"_index":428,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffer",{"_index":449,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffergeometry",{"_index":1419,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["boxbuffergeometry(30",{"_index":1491,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["boxedges",{"_index":462,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject",{"_index":451,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.name",{"_index":458,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.userdata",{"_index":456,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.uuid",{"_index":470,"title":{},"body":{"classes/CMSObjects.html":{}}}],["break",{"_index":1215,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["browser",{"_index":2578,"title":{},"body":{"changelog.html":{}}}],["browsers",{"_index":1731,"title":{},"body":{"classes/RendererManager.html":{}}}],["bufferattribute",{"_index":149,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["bufferattribute(pointpos",{"_index":1475,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["buffergeometry",{"_index":142,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/VRManager.html":{}}}],["buffergeometry().fromgeometry(box",{"_index":450,"title":{},"body":{"classes/CMSObjects.html":{}}}],["buffergeometry().setfrompoints",{"_index":2280,"title":{},"body":{"classes/VRManager.html":{}}}],["bug",{"_index":2521,"title":{},"body":{"changelog.html":{}}}],["bugged",{"_index":2687,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":1963,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["build:bundle",{"_index":2781,"title":{},"body":{"index.html":{}}}],["build:bundlethis",{"_index":2782,"title":{},"body":{"index.html":{}}}],["buildeventdata",{"_index":636,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["buildeventdata(eventdata",{"_index":651,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["buildeventdatafromjson(eventdata",{"_index":2351,"title":{},"body":{"interfaces/Window.html":{}}}],["buildgeometryfromparameters",{"_index":2470,"title":{},"body":{"interfaces/Window.html":{}}}],["buildgeometryfromparameters(parameters",{"_index":2431,"title":{},"body":{"interfaces/Window.html":{}}}],["builds",{"_index":2350,"title":{},"body":{"interfaces/Window.html":{}}}],["bump",{"_index":2705,"title":{},"body":{"changelog.html":{}}}],["bundle",{"_index":2588,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["bundled",{"_index":2779,"title":{},"body":{"index.html":{}}}],["button",{"_index":1303,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{},"miscellaneous/typealiases.html":{}}}],["buttons",{"_index":2029,"title":{},"body":{"classes/StateManager.html":{}}}],["c1",{"_index":2290,"title":{},"body":{"classes/VRManager.html":{}}}],["c36a222",{"_index":2634,"title":{},"body":{"changelog.html":{}}}],["c39ecd3",{"_index":2646,"title":{},"body":{"changelog.html":{}}}],["c7a35db",{"_index":2679,"title":{},"body":{"changelog.html":{}}}],["c991e54",{"_index":2592,"title":{},"body":{"changelog.html":{}}}],["c9d4880",{"_index":2569,"title":{},"body":{"changelog.html":{}}}],["calc",{"_index":1634,"title":{},"body":{"classes/RKHelper.html":{}}}],["calculated",{"_index":876,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["call",{"_index":69,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["callback",{"_index":76,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["callback(averageprogress",{"_index":1055,"title":{},"body":{"classes/LoadingManager.html":{}}}],["callback(eventdata",{"_index":2359,"title":{},"body":{"interfaces/Window.html":{}}}],["callback(eventkeys",{"_index":2349,"title":{},"body":{"interfaces/Window.html":{}}}],["callback(uuid",{"_index":1859,"title":{},"body":{"classes/SelectionManager.html":{}}}],["callbacks",{"_index":1014,"title":{},"body":{"classes/LoadingManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["called",{"_index":1155,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["calling",{"_index":1279,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{}}}],["caloclusters",{"_index":962,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"miscellaneous/variables.html":{}}}],["camera",{"_index":34,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["cameragroup",{"_index":2158,"title":{},"body":{"classes/VRManager.html":{}}}],["camerapos",{"_index":1529,"title":{},"body":{"classes/PresetView.html":{}}}],["cameraposition",{"_index":2037,"title":{},"body":{"classes/StateManager.html":{}}}],["cameras",{"_index":2434,"title":{},"body":{"interfaces/Window.html":{}}}],["canvas",{"_index":1679,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["canvaswrapper",{"_index":1739,"title":{},"body":{"classes/RendererManager.html":{}}}],["canvaswrapper.appendchild(this.getmainrenderer().domelement",{"_index":1751,"title":{},"body":{"classes/RendererManager.html":{}}}],["canvaswrapper.offsetheight",{"_index":1746,"title":{},"body":{"classes/RendererManager.html":{}}}],["canvaswrapper.offsetwidth",{"_index":1743,"title":{},"body":{"classes/RendererManager.html":{}}}],["care",{"_index":661,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["case",{"_index":1435,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["catch",{"_index":2522,"title":{},"body":{"changelog.html":{}}}],["catch((error",{"_index":2143,"title":{},"body":{"classes/URLOptionsManager.html":{},"classes/VRManager.html":{}}}],["catmullromcurve3",{"_index":1412,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cb2ec40",{"_index":2590,"title":{},"body":{"changelog.html":{}}}],["cdn",{"_index":2555,"title":{},"body":{"changelog.html":{}}}],["cfb1b6a",{"_index":2686,"title":{},"body":{"changelog.html":{}}}],["cg",{"_index":2292,"title":{},"body":{"classes/VRManager.html":{}}}],["chaining",{"_index":2591,"title":{},"body":{"changelog.html":{}}}],["chamber",{"_index":408,"title":{},"body":{"classes/CMSObjects.html":{}}}],["change",{"_index":248,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["changelog",{"_index":2509,"title":{"changelog.html":{}},"body":{}}],["changes",{"_index":1865,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["changing",{"_index":213,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["charge",{"_index":785,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["check",{"_index":217,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["checkbox",{"_index":1301,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["checked",{"_index":1686,"title":{},"body":{"classes/RendererManager.html":{}}}],["checking",{"_index":840,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["chi2",{"_index":1552,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["child",{"_index":1259,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.findintree(name",{"_index":1383,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.name",{"_index":1390,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.nodelevel",{"_index":1313,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.parent",{"_index":1312,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.toggleselfanddescendants(child.togglestate",{"_index":1334,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.toggleselfanddescendants(value",{"_index":1333,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.togglestate",{"_index":1332,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childindex",{"_index":1316,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["children",{"_index":1157,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["childrenactive",{"_index":1233,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childrentogglestate",{"_index":1234,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate",{"_index":1373,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate.name",{"_index":1378,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate.nodelevel",{"_index":1380,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["class",{"_index":0,"title":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{}},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"index.html":{},"overview.html":{}}}],["clearing",{"_index":2355,"title":{},"body":{"interfaces/Window.html":{}}}],["clearinterval(intervalid",{"_index":2298,"title":{},"body":{"classes/VRManager.html":{}}}],["click",{"_index":1874,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicked",{"_index":1968,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicking",{"_index":2483,"title":{},"body":{"interfaces/Window.html":{}}}],["clipping",{"_index":60,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["clippingangle",{"_index":2005,"title":{},"body":{"classes/StateManager.html":{}}}],["clippingconstant",{"_index":80,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["clippingenabled",{"_index":2006,"title":{},"body":{"classes/StateManager.html":{}}}],["clone",{"_index":817,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["cloned",{"_index":2202,"title":{},"body":{"classes/VRManager.html":{}}}],["closest",{"_index":1985,"title":{},"body":{"classes/SelectionManager.html":{}}}],["cluster",{"_index":1172,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["clustercoll",{"_index":1165,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterid",{"_index":1163,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterid.split(':')[0",{"_index":1166,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterid.split(':')[1",{"_index":1168,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterindex",{"_index":1167,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterparams",{"_index":1171,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["clusterparams.color",{"_index":1492,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusterparams.energy",{"_index":1489,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusterparams.eta",{"_index":1497,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusterparams.uuid",{"_index":1510,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusters",{"_index":977,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["cms",{"_index":399,"title":{},"body":{"classes/CMSObjects.html":{},"changelog.html":{}}}],["cmsloader",{"_index":2619,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["cmsobjects",{"_index":394,"title":{"classes/CMSObjects.html":{}},"body":{"classes/CMSObjects.html":{},"coverage.html":{}}}],["code",{"_index":2603,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["collected",{"_index":1219,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collection",{"_index":643,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["collection.name",{"_index":765,"title":{},"body":{"classes/ExportManager.html":{}}}],["collectionname",{"_index":678,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["collections",{"_index":683,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["collectionslist",{"_index":1135,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collectionslist.push(collectionname",{"_index":1160,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collideparticles",{"_index":26,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["collideparticles(tweenduration",{"_index":107,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["colliding",{"_index":377,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["collision",{"_index":106,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["collison",{"_index":63,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["collscene",{"_index":1148,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collscene.add(object",{"_index":1152,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collscene.children.length",{"_index":1156,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collscene.name",{"_index":1149,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["color",{"_index":111,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["color(0x2194ce",{"_index":2805,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xff0000",{"_index":2804,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xffd166",{"_index":2806,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xffffff",{"_index":122,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["colors",{"_index":2808,"title":{},"body":{"miscellaneous/variables.html":{}}}],["colour",{"_index":2468,"title":{},"body":{"interfaces/Window.html":{}}}],["combined",{"_index":1220,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["combinedprops",{"_index":1205,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["combinedprops[eventdataprop.label",{"_index":1214,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["commit",{"_index":2516,"title":{},"body":{"changelog.html":{}}}],["commits",{"_index":2515,"title":{},"body":{"changelog.html":{}}}],["complete",{"_index":2440,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["completely",{"_index":2630,"title":{},"body":{"changelog.html":{}}}],["completes",{"_index":312,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["component",{"_index":2652,"title":{},"body":{"changelog.html":{}}}],["components",{"_index":2690,"title":{},"body":{"changelog.html":{}}}],["composer",{"_index":556,"title":{},"body":{"classes/EffectsManager.html":{}}}],["computed",{"_index":783,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["cone",{"_index":1451,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["config",{"_index":1275,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["config.json",{"_index":2042,"title":{},"body":{"classes/StateManager.html":{}}}],["config.onchange",{"_index":1344,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['color",{"_index":1341,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['ischecked",{"_index":1339,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['value",{"_index":1343,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.type",{"_index":1337,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['color",{"_index":1340,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['highvalue",{"_index":1346,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['ischecked",{"_index":1338,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['value",{"_index":1342,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configactive",{"_index":1235,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configfile",{"_index":2820,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configoptions",{"_index":1324,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configs",{"_index":1236,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configslength",{"_index":1326,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate",{"_index":1362,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate['label",{"_index":1369,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate['type",{"_index":1367,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate[prop",{"_index":1371,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configurable",{"_index":1088,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["configuration",{"_index":472,"title":{"interfaces/Configuration.html":{}},"body":{"interfaces/Configuration.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["configuration.allowurloptions",{"_index":2329,"title":{},"body":{"interfaces/Window.html":{}}}],["configure",{"_index":2214,"title":{},"body":{"classes/VRManager.html":{}}}],["console",{"_index":2332,"title":{},"body":{"interfaces/Window.html":{}}}],["console.error",{"_index":1320,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["console.error('could",{"_index":2146,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["console.error('error",{"_index":1833,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["console.log",{"_index":1138,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/VRManager.html":{}}}],["console.log(\"track",{"_index":1426,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["console.log('event",{"_index":2084,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["console.log('processing",{"_index":989,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["console.log('vr",{"_index":2239,"title":{},"body":{"classes/VRManager.html":{}}}],["const",{"_index":161,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":85,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["constituents",{"_index":1140,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["constructor",{"_index":30,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{}}}],["constructor(camera",{"_index":564,"title":{},"body":{"classes/EffectsManager.html":{}}}],["constructor(configuration",{"_index":2317,"title":{},"body":{"interfaces/Window.html":{}}}],["constructor(eventdisplay",{"_index":2094,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["constructor(field",{"_index":531,"title":{},"body":{"classes/Cut.html":{}}}],["constructor(name",{"_index":1252,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["constructor(scene",{"_index":31,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["containing",{"_index":43,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["containingevent",{"_index":2444,"title":{},"body":{"interfaces/Window.html":{}}}],["containment",{"_index":1687,"title":{},"body":{"classes/RendererManager.html":{}}}],["contains",{"_index":700,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/TrackmlLoader.html":{}}}],["containsobject",{"_index":1658,"title":{},"body":{"classes/RendererManager.html":{}}}],["containsobject(obj",{"_index":1684,"title":{},"body":{"classes/RendererManager.html":{}}}],["content",{"_index":2384,"title":{},"body":{"interfaces/Window.html":{}}}],["contenttype",{"_index":2810,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controller",{"_index":2180,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["controller1",{"_index":2159,"title":{},"body":{"classes/VRManager.html":{}}}],["controller2",{"_index":2160,"title":{},"body":{"classes/VRManager.html":{}}}],["controllergrip1",{"_index":2161,"title":{},"body":{"classes/VRManager.html":{}}}],["controllergrip2",{"_index":2162,"title":{},"body":{"classes/VRManager.html":{}}}],["controllermodelfactory",{"_index":2269,"title":{},"body":{"classes/VRManager.html":{}}}],["controllermodelfactory.createcontrollermodel(this.controllergrip1",{"_index":2273,"title":{},"body":{"classes/VRManager.html":{}}}],["controllermodelfactory.createcontrollermodel(this.controllergrip2",{"_index":2278,"title":{},"body":{"classes/VRManager.html":{}}}],["controllers",{"_index":2262,"title":{},"body":{"classes/VRManager.html":{}}}],["controls",{"_index":665,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["controlsmanager",{"_index":2737,"title":{},"body":{"coverage.html":{}}}],["conventional",{"_index":2514,"title":{},"body":{"changelog.html":{}}}],["copy",{"_index":1571,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["copy(camera.clone",{"_index":2257,"title":{},"body":{"classes/VRManager.html":{}}}],["correct",{"_index":2637,"title":{},"body":{"changelog.html":{}}}],["correctly",{"_index":2684,"title":{},"body":{"changelog.html":{}}}],["count",{"_index":220,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LoadingManager.html":{}}}],["coverage",{"_index":2707,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covering",{"_index":303,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["cphi",{"_index":1441,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cpu",{"_index":2551,"title":{},"body":{"changelog.html":{}}}],["create",{"_index":341,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["created",{"_index":1288,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{}}}],["creating",{"_index":2352,"title":{},"body":{"interfaces/Window.html":{}}}],["cross(b_last",{"_index":833,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["cross(b_middle",{"_index":823,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["ctheta",{"_index":1445,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube",{"_index":1494,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.lookat(new",{"_index":1507,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.name",{"_index":1509,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.position.x",{"_index":1501,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.position.y",{"_index":1502,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.position.z",{"_index":1503,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.userdata",{"_index":1508,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.uuid",{"_index":1511,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["curently",{"_index":730,"title":{},"body":{"classes/ExportManager.html":{}}}],["current",{"_index":256,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["currently",{"_index":47,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["currentvrsession",{"_index":2163,"title":{},"body":{"classes/VRManager.html":{}}}],["customize",{"_index":2315,"title":{},"body":{"interfaces/Window.html":{}}}],["cut",{"_index":520,"title":{"classes/Cut.html":{}},"body":{"classes/Cut.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"changelog.html":{},"coverage.html":{}}}],["cut('energy",{"_index":1115,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('eta",{"_index":1114,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('phi",{"_index":1112,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('pt",{"_index":1118,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('vertextype",{"_index":1129,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut.field",{"_index":1143,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cuts",{"_index":956,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"changelog.html":{}}}],["cuts?.filter((cut",{"_index":1142,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cylinderbuffergeometry",{"_index":1416,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["d0",{"_index":1624,"title":{},"body":{"classes/RKHelper.html":{}}}],["d207bad",{"_index":2546,"title":{},"body":{"changelog.html":{}}}],["d2874b8",{"_index":2524,"title":{},"body":{"changelog.html":{}}}],["d3920c4",{"_index":2661,"title":{},"body":{"changelog.html":{}}}],["d677089",{"_index":2570,"title":{},"body":{"changelog.html":{}}}],["d90e3a6",{"_index":2571,"title":{},"body":{"changelog.html":{}}}],["da3ead5",{"_index":2642,"title":{},"body":{"changelog.html":{}}}],["dat.gui",{"_index":500,"title":{},"body":{"interfaces/Configuration.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"dependencies.html":{}}}],["data",{"_index":46,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["data.json",{"_index":2774,"title":{},"body":{"index.html":{}}}],["data.length",{"_index":2086,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["db261a6",{"_index":2587,"title":{},"body":{"changelog.html":{}}}],["dc05ed9",{"_index":2589,"title":{},"body":{"changelog.html":{}}}],["dc140dd",{"_index":2617,"title":{},"body":{"changelog.html":{}}}],["dc5d489",{"_index":2607,"title":{},"body":{"changelog.html":{}}}],["dcf6cec",{"_index":2640,"title":{},"body":{"changelog.html":{}}}],["declare",{"_index":1803,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["default",{"_index":82,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["defaulteventfile",{"_index":478,"title":{},"body":{"interfaces/Configuration.html":{}}}],["defaulteventpath",{"_index":2100,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["defaulteventtype",{"_index":2098,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["defaultmaxvalue",{"_index":525,"title":{},"body":{"classes/Cut.html":{}}}],["defaultminvalue",{"_index":526,"title":{},"body":{"classes/Cut.html":{}}}],["defaultrenderpass",{"_index":557,"title":{},"body":{"classes/EffectsManager.html":{}}}],["defaults",{"_index":1787,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["defaultview",{"_index":479,"title":{},"body":{"interfaces/Configuration.html":{},"changelog.html":{}}}],["define",{"_index":772,"title":{},"body":{"classes/Field.html":{},"index.html":{}}}],["defined",{"_index":36,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{}}}],["defining",{"_index":2463,"title":{},"body":{"interfaces/Window.html":{}}}],["definition",{"_index":1632,"title":{},"body":{"classes/RKHelper.html":{}}}],["definitions",{"_index":1637,"title":{},"body":{"classes/RKHelper.html":{}}}],["delete",{"_index":1321,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"changelog.html":{}}}],["dependencies",{"_index":2751,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["deployment",{"_index":2702,"title":{},"body":{"changelog.html":{}}}],["descendants",{"_index":1298,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["describe",{"_index":1533,"title":{},"body":{"classes/PresetView.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["desired",{"_index":681,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["detector",{"_index":173,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["dflt_colors",{"_index":2421,"title":{},"body":{"interfaces/Window.html":{}}}],["different",{"_index":633,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/RKHelper.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["dimensional",{"_index":138,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["dir",{"_index":877,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["direction",{"_index":866,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["directionallight",{"_index":1905,"title":{},"body":{"classes/SelectionManager.html":{}}}],["directionallight().type",{"_index":1914,"title":{},"body":{"classes/SelectionManager.html":{}}}],["directly",{"_index":2780,"title":{},"body":{"index.html":{}}}],["directory",{"_index":2787,"title":{},"body":{"index.html":{}}}],["disable",{"_index":1883,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["disabled",{"_index":574,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["disableselecting",{"_index":1849,"title":{},"body":{"classes/SelectionManager.html":{}}}],["display",{"_index":475,"title":{},"body":{"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["display's",{"_index":49,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["display.ts",{"_index":2307,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["displayed",{"_index":687,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["displayusage",{"_index":2768,"title":{},"body":{"index.html":{}}}],["dist/bundle",{"_index":2786,"title":{},"body":{"index.html":{}}}],["distance",{"_index":86,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{}}}],["distancefromorigin",{"_index":109,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["dividescalar(previousscale",{"_index":258,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["dividing",{"_index":1193,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["document",{"_index":1924,"title":{},"body":{"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{}}}],["document.body",{"_index":1741,"title":{},"body":{"classes/RendererManager.html":{}}}],["document.createelement('a",{"_index":2834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document.createelement('input",{"_index":2815,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document.createelement('script",{"_index":1824,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["document.getelementbyid('gui')?.style.setproperty('display",{"_index":2154,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["document.getelementbyid(elementid",{"_index":1740,"title":{},"body":{"classes/RendererManager.html":{}}}],["document.getelementsbyclassname",{"_index":2152,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["document.getelementsbytagname('head')[0",{"_index":1798,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["document.queryselectorall",{"_index":1820,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["documentation",{"_index":2708,"title":{},"body":{"coverage.html":{}}}],["documented",{"_index":2512,"title":{},"body":{"changelog.html":{}}}],["dof",{"_index":1555,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["dom",{"_index":1697,"title":{},"body":{"classes/RendererManager.html":{}}}],["don't",{"_index":1572,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["doubleside",{"_index":414,"title":{},"body":{"classes/CMSObjects.html":{}}}],["doublesided",{"_index":2372,"title":{},"body":{"interfaces/Window.html":{}}}],["download",{"_index":2841,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dparams",{"_index":1586,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["dparams[0",{"_index":1625,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[1",{"_index":1627,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[2",{"_index":1628,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[3",{"_index":1629,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[4",{"_index":1630,"title":{},"body":{"classes/RKHelper.html":{}}}],["draw",{"_index":668,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["drawrange",{"_index":219,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["driven",{"_index":2761,"title":{},"body":{"index.html":{}}}],["drop",{"_index":2549,"title":{},"body":{"changelog.html":{}}}],["duration",{"_index":65,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["dynamically",{"_index":1774,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["e",{"_index":2819,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e.g",{"_index":2784,"title":{},"body":{"index.html":{}}}],["e.target?.files[0",{"_index":2821,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e10a68d",{"_index":2575,"title":{},"body":{"changelog.html":{}}}],["e297c98",{"_index":2638,"title":{},"body":{"changelog.html":{}}}],["e6f69a0",{"_index":2568,"title":{},"body":{"changelog.html":{}}}],["e96136b",{"_index":2565,"title":{},"body":{"changelog.html":{}}}],["e9f1bc9",{"_index":2610,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":98,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["easily",{"_index":1526,"title":{},"body":{"classes/PresetView.html":{}}}],["easing",{"_index":124,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["edges",{"_index":461,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry",{"_index":412,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry(boxbuffer",{"_index":463,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edit",{"_index":265,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["edward's",{"_index":2627,"title":{},"body":{"changelog.html":{}}}],["effect",{"_index":578,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectcomposer",{"_index":576,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectcomposer(renderer",{"_index":606,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effects",{"_index":550,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["effectsmanager",{"_index":548,"title":{"classes/EffectsManager.html":{}},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["effectsrender",{"_index":561,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectsrender(scene",{"_index":593,"title":{},"body":{"classes/EffectsManager.html":{}}}],["element",{"_index":498,"title":{},"body":{"interfaces/Configuration.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["elementid",{"_index":480,"title":{},"body":{"interfaces/Configuration.html":{},"classes/RendererManager.html":{},"index.html":{}}}],["elements",{"_index":589,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["empty",{"_index":2504,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["enable",{"_index":499,"title":{},"body":{"interfaces/Configuration.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["enabled",{"_index":573,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["enabledatguimenu",{"_index":481,"title":{},"body":{"interfaces/Configuration.html":{}}}],["enableeventdisplayconsole",{"_index":2462,"title":{},"body":{"interfaces/Window.html":{}}}],["enablekeyboardcontrols",{"_index":2495,"title":{},"body":{"interfaces/Window.html":{}}}],["enables",{"_index":2461,"title":{},"body":{"interfaces/Window.html":{}}}],["enableselecting",{"_index":1850,"title":{},"body":{"classes/SelectionManager.html":{}}}],["enableselecting(enable",{"_index":2485,"title":{},"body":{"interfaces/Window.html":{}}}],["enabling",{"_index":1881,"title":{},"body":{"classes/SelectionManager.html":{}}}],["end",{"_index":128,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["end.chain(startclone",{"_index":194,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["ended",{"_index":71,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["ends",{"_index":100,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["endvr",{"_index":2339,"title":{},"body":{"interfaces/Window.html":{}}}],["endvrsession",{"_index":2172,"title":{},"body":{"classes/VRManager.html":{}}}],["energy",{"_index":1556,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["entries",{"_index":893,"title":{},"body":{"classes/InfoLogger.html":{}}}],["entry",{"_index":899,"title":{},"body":{"classes/InfoLogger.html":{}}}],["error",{"_index":841,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["error_estimate",{"_index":843,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["estimate",{"_index":842,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["et",{"_index":1557,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["eta",{"_index":1553,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["etc",{"_index":980,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["event",{"_index":45,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["event.clientx",{"_index":1975,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.clienty",{"_index":1978,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.preventdefault",{"_index":1970,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event_data_type_colors",{"_index":416,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["event_data_type_colors.caloclusters",{"_index":1493,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["event_data_type_colors.hits",{"_index":1477,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["event_data_type_colors.jets",{"_index":1453,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["event_data_type_colors.muonchambers",{"_index":453,"title":{},"body":{"classes/CMSObjects.html":{}}}],["event_data_type_colors.vertices",{"_index":1514,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["eventdata",{"_index":199,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["eventdata.caloclusters",{"_index":1111,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.children",{"_index":761,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdata.electrons",{"_index":1126,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.hits",{"_index":1107,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.jets",{"_index":1104,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.muons",{"_index":1117,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.photons",{"_index":1123,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.traverse((eventobject",{"_index":208,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventdata.vertices",{"_index":1128,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdataconfig",{"_index":756,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name",{"_index":763,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name].push(collection.name",{"_index":766,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdatakeys",{"_index":1201,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatakeys.includes(eventdatapropkey",{"_index":1212,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdataloader",{"_index":482,"title":{"interfaces/EventDataLoader.html":{}},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"coverage.html":{},"index.html":{}}}],["eventdataprop",{"_index":1207,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdataprop.keys",{"_index":1211,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatapropgroup",{"_index":1204,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatapropgroups",{"_index":1198,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatapropkey",{"_index":1210,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatatype",{"_index":1224,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdisplay",{"_index":1694,"title":{},"body":{"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"coverage.html":{},"index.html":{}}}],["eventdisplay.init(configuration",{"_index":2772,"title":{},"body":{"index.html":{}}}],["eventdisplay.loadobjgeometry('path/to/geometry.obj",{"_index":2776,"title":{},"body":{"index.html":{}}}],["eventdisplay.parsephoenixevents(res",{"_index":2775,"title":{},"body":{"index.html":{}}}],["eventfile",{"_index":518,"title":{},"body":{"interfaces/Configuration.html":{}}}],["eventkey",{"_index":2360,"title":{},"body":{"interfaces/Window.html":{}}}],["eventkeys",{"_index":2341,"title":{},"body":{"interfaces/Window.html":{}}}],["eventnum",{"_index":2073,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["eventnumber",{"_index":990,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{}}}],["eventobject",{"_index":204,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry",{"_index":209,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.attributes['position'].array",{"_index":268,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.boundingsphere.center",{"_index":264,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.computeboundingsphere",{"_index":270,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.deleteattribute('position",{"_index":269,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.drawrange",{"_index":234,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.drawrange.count",{"_index":230,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.setdrawrange(0",{"_index":231,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry?.attributes?.position?.count",{"_index":223,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.material",{"_index":339,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.material.clippingplanes",{"_index":340,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.name",{"_index":215,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.position",{"_index":257,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.position.equals",{"_index":262,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.setscalar(updatedscale.x",{"_index":251,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.x",{"_index":242,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.y",{"_index":243,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.z",{"_index":244,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.visible",{"_index":277,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobjecttween",{"_index":232,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobjecttween.oncomplete",{"_index":235,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["events",{"_index":697,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["eventsdata",{"_index":699,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["eventtype",{"_index":519,"title":{},"body":{"interfaces/Configuration.html":{}}}],["example",{"_index":1196,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["examples",{"_index":2791,"title":{},"body":{"index.html":{}}}],["existing",{"_index":1642,"title":{},"body":{"classes/RKHelper.html":{},"interfaces/Window.html":{}}}],["exists",{"_index":221,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ScriptLoader.html":{}}}],["experiment",{"_index":691,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["experiments",{"_index":2635,"title":{},"body":{"changelog.html":{}}}],["export",{"_index":155,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["exported",{"_index":719,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter",{"_index":738,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse",{"_index":750,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse(scene",{"_index":739,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportmanager",{"_index":704,"title":{"classes/ExportManager.html":{}},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["exportphoenixdisplay",{"_index":2401,"title":{},"body":{"interfaces/Window.html":{}}}],["exportphoenixscene",{"_index":706,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportphoenixscene(scene",{"_index":711,"title":{},"body":{"classes/ExportManager.html":{}}}],["exports",{"_index":713,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["exportscenetoobj",{"_index":707,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportscenetoobj(scene",{"_index":721,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporttoobj",{"_index":2389,"title":{},"body":{"interfaces/Window.html":{}}}],["expressed",{"_index":986,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["extendeventdatatypeui",{"_index":957,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["extendeventdatatypeui?.(typefolder",{"_index":1147,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["extends",{"_index":913,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["external",{"_index":1775,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["extraanimationsphereduration",{"_index":196,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["extract",{"_index":2138,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["extrapolate",{"_index":1607,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolated",{"_index":1428,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["extrapolatetrackpositions",{"_index":1603,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolatetrackpositions(track",{"_index":1605,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolating",{"_index":210,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["extrapolation",{"_index":1437,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["extras/configuration",{"_index":2110,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["extras/cut.model",{"_index":1079,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["f4c2e31",{"_index":2598,"title":{},"body":{"changelog.html":{}}}],["f87c587",{"_index":2674,"title":{},"body":{"changelog.html":{}}}],["f94c0e4",{"_index":2605,"title":{},"body":{"changelog.html":{}}}],["face3",{"_index":411,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(0",{"_index":432,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(1",{"_index":442,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(2",{"_index":434,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(4",{"_index":436,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(6",{"_index":438,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(7",{"_index":444,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces",{"_index":419,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces.concat(backs",{"_index":429,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces.push(new",{"_index":423,"title":{},"body":{"classes/CMSObjects.html":{}}}],["facing",{"_index":2301,"title":{},"body":{"classes/VRManager.html":{}}}],["factor",{"_index":2435,"title":{},"body":{"interfaces/Window.html":{}}}],["failed",{"_index":2668,"title":{},"body":{"changelog.html":{}}}],["fallback",{"_index":2101,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["false",{"_index":278,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["fbd584e",{"_index":2557,"title":{},"body":{"changelog.html":{}}}],["fe0b2e6",{"_index":2582,"title":{},"body":{"changelog.html":{}}}],["features",{"_index":2540,"title":{},"body":{"changelog.html":{}}}],["fetch",{"_index":2119,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["fetch('path/to/event",{"_index":2773,"title":{},"body":{"index.html":{}}}],["fetch(file",{"_index":2135,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["fetch(this.urloptions.get('config",{"_index":2127,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["few",{"_index":1427,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["ff10477",{"_index":2650,"title":{},"body":{"changelog.html":{}}}],["ffffff",{"_index":2453,"title":{},"body":{"interfaces/Window.html":{}}}],["fh",{"_index":848,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["fh2",{"_index":849,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field",{"_index":527,"title":{"classes/Field.html":{}},"body":{"classes/Cut.html":{},"classes/Field.html":{},"coverage.html":{}}}],["field.get(pos1",{"_index":820,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field.get(pos2",{"_index":830,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field.get(state.pos",{"_index":806,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["file.readobject(objectname).then((obj",{"_index":2429,"title":{},"body":{"interfaces/Window.html":{}}}],["filename",{"_index":2366,"title":{},"body":{"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["filereader",{"_index":2823,"title":{},"body":{"miscellaneous/variables.html":{}}}],["files",{"_index":2537,"title":{},"body":{"changelog.html":{}}}],["filter",{"_index":533,"title":{},"body":{"classes/Cut.html":{},"changelog.html":{}}}],["filter((val",{"_index":1962,"title":{},"body":{"classes/SelectionManager.html":{}}}],["filtered",{"_index":534,"title":{},"body":{"classes/Cut.html":{}}}],["filters",{"_index":523,"title":{},"body":{"classes/Cut.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["finally",{"_index":2132,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["find",{"_index":1283,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/URLOptionsManager.html":{}}}],["finding",{"_index":1893,"title":{},"body":{"classes/SelectionManager.html":{}}}],["findintree",{"_index":1245,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintree(name",{"_index":1281,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintreeorcreate",{"_index":1246,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintreeorcreate(name",{"_index":1286,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["first",{"_index":77,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["fix",{"_index":2525,"title":{},"body":{"changelog.html":{}}}],["fixed",{"_index":1675,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["fixedoverlay",{"_index":1653,"title":{},"body":{"classes/RendererManager.html":{}}}],["fixes",{"_index":2487,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["fixing",{"_index":2618,"title":{},"body":{"changelog.html":{}}}],["fixoverlayview(fixed",{"_index":2488,"title":{},"body":{"interfaces/Window.html":{}}}],["flat",{"_index":2377,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["float32array([].concat(...reachedhits",{"_index":297,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["float32array(positions.length",{"_index":1469,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["floor",{"_index":2231,"title":{},"body":{"classes/VRManager.html":{}}}],["fo",{"_index":2021,"title":{},"body":{"classes/StateManager.html":{}}}],["folder",{"_index":965,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["folders",{"_index":2371,"title":{},"body":{"interfaces/Window.html":{}}}],["format",{"_index":714,"title":{},"body":{"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["formatted",{"_index":2683,"title":{},"body":{"changelog.html":{}}}],["found",{"_index":1285,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["front",{"_index":430,"title":{},"body":{"classes/CMSObjects.html":{}}}],["function",{"_index":67,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["function,onanimationstart",{"_index":103,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["functionality",{"_index":667,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["functions",{"_index":51,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["generate",{"_index":747,"title":{},"body":{"classes/ExportManager.html":{},"index.html":{}}}],["generation",{"_index":59,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["generic",{"_index":2583,"title":{},"body":{"changelog.html":{}}}],["geom",{"_index":2450,"title":{},"body":{"interfaces/Window.html":{}}}],["geometries",{"_index":673,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["geometries.children.foreach((object",{"_index":767,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometries/event",{"_index":2482,"title":{},"body":{"interfaces/Window.html":{}}}],["geometriesconfig",{"_index":758,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometriesconfig.push(object.name",{"_index":769,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometry",{"_index":218,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["geometry.computeboundingsphere",{"_index":298,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["geometry.setattribute",{"_index":296,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["geometry.setattribute('position",{"_index":1474,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["geometry/event",{"_index":2477,"title":{},"body":{"interfaces/Window.html":{}}}],["geometryposcount",{"_index":222,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["get(field",{"_index":773,"title":{},"body":{"classes/Field.html":{}}}],["getactiveobjectid",{"_index":1851,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["getcamera(new",{"_index":2256,"title":{},"body":{"classes/VRManager.html":{}}}],["getcameragroup",{"_index":2173,"title":{},"body":{"classes/VRManager.html":{}}}],["getcameragroup(camera",{"_index":2199,"title":{},"body":{"classes/VRManager.html":{}}}],["getcameratween",{"_index":27,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["getcameratween(pos",{"_index":123,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["getcluster",{"_index":1393,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcluster(clusterparams",{"_index":1398,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcollection",{"_index":637,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getcollection(collectionname",{"_index":676,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["getcollections",{"_index":638,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["getelementbyid('overlaywidgets",{"_index":2149,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["getelementbyid('three",{"_index":1925,"title":{},"body":{"classes/SelectionManager.html":{}}}],["geteventdata",{"_index":917,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["geteventdata(eventnum",{"_index":2069,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["geteventmetadata",{"_index":639,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["geteventslist",{"_index":640,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["geteventslist(eventsdata",{"_index":694,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["gethits",{"_index":1394,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gethits(hitsparams",{"_index":1400,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gethitspositions",{"_index":29,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["gethitspositions(positions",{"_index":131,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["geticonurl",{"_index":1531,"title":{},"body":{"classes/PresetView.html":{}}}],["getinfologger",{"_index":2144,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["getinfologgerlist",{"_index":889,"title":{},"body":{"classes/InfoLogger.html":{}}}],["getinstance",{"_index":2007,"title":{},"body":{"classes/StateManager.html":{}}}],["getjet",{"_index":1395,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getjet(jetparams",{"_index":1403,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getlabelsobject",{"_index":641,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getloadingmanager",{"_index":2365,"title":{},"body":{"interfaces/Window.html":{}}}],["getlocalclipping",{"_index":1659,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmainrenderer",{"_index":1660,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmuon",{"_index":920,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getmuon(muonparams",{"_index":974,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getmuonchamber",{"_index":403,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getmuonchamber(muonchamberparams",{"_index":404,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getnodestate",{"_index":1247,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["getobject",{"_index":942,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getobject.bind(this)(objectparams",{"_index":1151,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["getobjecttypecollections",{"_index":921,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getobjecttypecollections(object",{"_index":978,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getoverlayrenderer",{"_index":1661,"title":{},"body":{"classes/RendererManager.html":{}}}],["getprettyparams",{"_index":1547,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettyparams(params",{"_index":1560,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettysymbol",{"_index":1548,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettysymbol(param",{"_index":1564,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getrenderers",{"_index":1662,"title":{},"body":{"classes/RendererManager.html":{}}}],["getthreemanager",{"_index":2364,"title":{},"body":{"interfaces/Window.html":{}}}],["getting",{"_index":2508,"title":{"changelog.html":{},"index.html":{}},"body":{"changelog.html":{}}}],["gettrack",{"_index":1396,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gettrack(trackparams",{"_index":1406,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gettrackswithrungekutta",{"_index":1604,"title":{},"body":{"classes/RKHelper.html":{}}}],["gettrackswithrungekutta(trackscollectionsevent",{"_index":1610,"title":{},"body":{"classes/RKHelper.html":{}}}],["getuimanager",{"_index":2053,"title":{},"body":{"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["getvertex",{"_index":1397,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getvertex(vertexparams",{"_index":1408,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getvrcamera",{"_index":2174,"title":{},"body":{"classes/VRManager.html":{}}}],["given",{"_index":409,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["giving",{"_index":1891,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["global",{"_index":1790,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["globalmomentum",{"_index":1635,"title":{},"body":{"classes/RKHelper.html":{}}}],["globalmomentum.clone",{"_index":1646,"title":{},"body":{"classes/RKHelper.html":{}}}],["globalthis",{"_index":2567,"title":{},"body":{"changelog.html":{}}}],["gltf",{"_index":748,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["gltfexporter",{"_index":733,"title":{},"body":{"classes/ExportManager.html":{}}}],["go",{"_index":1575,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["graphic",{"_index":663,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["graphics",{"_index":967,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["graphicslibrary",{"_index":652,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["greater",{"_index":2436,"title":{},"body":{"interfaces/Window.html":{}}}],["group",{"_index":152,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["groups",{"_index":1195,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["guidelines",{"_index":2517,"title":{},"body":{"changelog.html":{}}}],["h",{"_index":811,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["h).cross(b_last",{"_index":831,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["h2",{"_index":797,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["half_h",{"_index":798,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["half_h).cross(b_middle",{"_index":821,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["hand",{"_index":2233,"title":{},"body":{"classes/VRManager.html":{}}}],["handed",{"_index":1640,"title":{},"body":{"classes/RKHelper.html":{}}}],["handle",{"_index":2527,"title":{},"body":{"changelog.html":{}}}],["handles",{"_index":950,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["handling",{"_index":2574,"title":{},"body":{"changelog.html":{}}}],["hash",{"_index":2680,"title":{},"body":{"changelog.html":{}}}],["hasposition",{"_index":261,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["helper",{"_index":1423,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["helper.ts",{"_index":1602,"title":{},"body":{"classes/RKHelper.html":{},"coverage.html":{}}}],["helper.ts:12",{"_index":1611,"title":{},"body":{"classes/RKHelper.html":{}}}],["helper.ts:32",{"_index":1606,"title":{},"body":{"classes/RKHelper.html":{}}}],["helpers/constants",{"_index":417,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["helpers/file",{"_index":736,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{}}}],["helpers/pretty",{"_index":1909,"title":{},"body":{"classes/SelectionManager.html":{}}}],["helpers/rk",{"_index":1422,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hide",{"_index":383,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["hidewidgets",{"_index":2103,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["hiding",{"_index":2608,"title":{},"body":{"changelog.html":{}}}],["hierarchy",{"_index":2369,"title":{},"body":{"interfaces/Window.html":{}}}],["high",{"_index":1725,"title":{},"body":{"classes/RendererManager.html":{}}}],["highlight",{"_index":1890,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highlighting",{"_index":587,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["highlightobject",{"_index":1852,"title":{},"body":{"classes/SelectionManager.html":{}}}],["highlightobject(uuid",{"_index":1887,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highly",{"_index":2758,"title":{},"body":{"index.html":{}}}],["highvalue",{"_index":1345,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["hit",{"_index":266,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["hit[0",{"_index":1471,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hit[1",{"_index":1472,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hit[2",{"_index":1473,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hit_id,x,y,z,volume_id,layer_id,module_id",{"_index":2087,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["hitdata",{"_index":2059,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["hits",{"_index":134,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/TrackmlLoader.html":{},"miscellaneous/variables.html":{}}}],["hits.split('\\n",{"_index":2083,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["hitsparams",{"_index":1402,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparams.color",{"_index":1476,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparams.pos",{"_index":1466,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparams.uuid",{"_index":1482,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparamsclone",{"_index":1463,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitspositions",{"_index":289,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["hitspositions.filter((hitposition",{"_index":292,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["home",{"_index":2645,"title":{},"body":{"changelog.html":{}}}],["hovered",{"_index":588,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["hovering",{"_index":1869,"title":{},"body":{"classes/SelectionManager.html":{}}}],["html",{"_index":2474,"title":{},"body":{"interfaces/Window.html":{},"index.html":{}}}],["htmlcanvaselement",{"_index":1711,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["htmlelement",{"_index":1795,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["htmlelement)?.style.setproperty('display",{"_index":2153,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["https://cdn.jsdelivr.net/npm/jsroot@${jsrootversion}/scripts",{"_index":1806,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["icon",{"_index":1237,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"changelog.html":{}}}],["id",{"_index":496,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{}}}],["identifier",{"_index":2709,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":949,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{}}}],["ig",{"_index":2542,"title":{},"body":{"changelog.html":{}}}],["ignored",{"_index":1868,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ignorelist",{"_index":1842,"title":{},"body":{"classes/SelectionManager.html":{}}}],["immersive",{"_index":2194,"title":{},"body":{"classes/VRManager.html":{}}}],["implementing",{"_index":632,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["implements",{"_index":1063,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["implicitly",{"_index":2697,"title":{},"body":{"changelog.html":{}}}],["import",{"_index":139,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["importmanager",{"_index":2741,"title":{},"body":{"coverage.html":{}}}],["improve",{"_index":2529,"title":{},"body":{"changelog.html":{}}}],["improvements",{"_index":2604,"title":{},"body":{"changelog.html":{}}}],["improving",{"_index":2550,"title":{},"body":{"changelog.html":{}}}],["inbounds",{"_index":872,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["included",{"_index":2788,"title":{},"body":{"index.html":{}}}],["including",{"_index":729,"title":{},"body":{"classes/ExportManager.html":{}}}],["independent",{"_index":2762,"title":{},"body":{"index.html":{}}}],["index",{"_index":17,"title":{"index.html":{}},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexincollection",{"_index":644,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["infinity",{"_index":226,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["infologger",{"_index":656,"title":{"classes/InfoLogger.html":{}},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["infologgerlist",{"_index":887,"title":{},"body":{"classes/InfoLogger.html":{}}}],["information",{"_index":895,"title":{},"body":{"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["inherited",{"_index":925,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["init",{"_index":1663,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["init(camera",{"_index":1894,"title":{},"body":{"classes/SelectionManager.html":{}}}],["init(configuration",{"_index":2321,"title":{},"body":{"interfaces/Window.html":{}}}],["init(elementid",{"_index":1692,"title":{},"body":{"classes/RendererManager.html":{}}}],["initialize",{"_index":586,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["initialized",{"_index":1871,"title":{},"body":{"classes/SelectionManager.html":{}}}],["initializes",{"_index":2476,"title":{},"body":{"interfaces/Window.html":{}}}],["initializing",{"_index":1673,"title":{},"body":{"classes/RendererManager.html":{}}}],["initially",{"_index":2375,"title":{},"body":{"interfaces/Window.html":{}}}],["initiallyvisible",{"_index":2374,"title":{},"body":{"interfaces/Window.html":{}}}],["initrenderer",{"_index":1664,"title":{},"body":{"classes/RendererManager.html":{}}}],["initrenderer(elementid",{"_index":1695,"title":{},"body":{"classes/RendererManager.html":{}}}],["initvr(onsessionended",{"_index":2336,"title":{},"body":{"interfaces/Window.html":{}}}],["input",{"_index":746,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["inputfile",{"_index":2814,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.accept",{"_index":2817,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.click",{"_index":2828,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.onchange",{"_index":2818,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.remove",{"_index":2826,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.type",{"_index":2816,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inside",{"_index":569,"title":{},"body":{"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["install",{"_index":2765,"title":{},"body":{"index.html":{}}}],["instance",{"_index":999,"title":{},"body":{"classes/LoadingManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["instanceof",{"_index":227,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["instantiate",{"_index":737,"title":{},"body":{"classes/ExportManager.html":{}}}],["instead",{"_index":1323,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["instiantiate",{"_index":2066,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["integrator",{"_index":796,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["interface",{"_index":471,"title":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["interfaces",{"_index":473,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["intersected",{"_index":1899,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject",{"_index":1940,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.name",{"_index":1945,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.userdata",{"_index":1951,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.userdata[key",{"_index":1961,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject",{"_index":1853,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject(event",{"_index":1896,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects",{"_index":1898,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects.length",{"_index":1983,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects[0].object",{"_index":1986,"title":{},"body":{"classes/SelectionManager.html":{}}}],["interval",{"_index":2287,"title":{},"body":{"classes/VRManager.html":{}}}],["intervalid",{"_index":2288,"title":{},"body":{"classes/VRManager.html":{}}}],["intitialize",{"_index":2314,"title":{},"body":{"interfaces/Window.html":{}}}],["invisible",{"_index":272,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["isfixedoverlay",{"_index":1665,"title":{},"body":{"classes/RendererManager.html":{}}}],["isinit",{"_index":1843,"title":{},"body":{"classes/SelectionManager.html":{}}}],["issue",{"_index":1436,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["isvractive",{"_index":2175,"title":{},"body":{"classes/VRManager.html":{}}}],["it's",{"_index":1581,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["item",{"_index":1017,"title":{},"body":{"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{}}}],["itemloaded",{"_index":1008,"title":{},"body":{"classes/LoadingManager.html":{}}}],["itemloaded(id",{"_index":1029,"title":{},"body":{"classes/LoadingManager.html":{}}}],["itemname",{"_index":1034,"title":{},"body":{"classes/LoadingManager.html":{}}}],["items",{"_index":316,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LoadingManager.html":{},"interfaces/Window.html":{}}}],["iterating",{"_index":1203,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["itself",{"_index":1297,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["j",{"_index":997,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["jasmine",{"_index":2615,"title":{},"body":{"changelog.html":{}}}],["jet",{"_index":239,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["jetparams",{"_index":1405,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams.color",{"_index":1452,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams.uuid",{"_index":1461,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jets",{"_index":961,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"miscellaneous/variables.html":{}}}],["jetsscale",{"_index":1092,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["jivexml",{"_index":2099,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["jivexmlloader",{"_index":2107,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{}}}],["joining",{"_index":1217,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["js",{"_index":2756,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":940,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["json.parse(input",{"_index":2395,"title":{},"body":{"interfaces/Window.html":{}}}],["json.parse(json",{"_index":1358,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["json.stringify(jsonresult",{"_index":753,"title":{},"body":{"classes/ExportManager.html":{}}}],["jsondata",{"_index":2043,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay",{"_index":2047,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']?.['cameraposition",{"_index":2049,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']?.['clippingangle",{"_index":2050,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['phoenixmenu",{"_index":2044,"title":{},"body":{"classes/StateManager.html":{}}}],["jsonobject",{"_index":1356,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['children",{"_index":1374,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['childrenactive",{"_index":1359,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['configs",{"_index":1363,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['togglestate",{"_index":1360,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonresult",{"_index":751,"title":{},"body":{"classes/ExportManager.html":{}}}],["jsroot",{"_index":1783,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jsroot.core.js",{"_index":1808,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsroot.csg.js",{"_index":1810,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsroot.geo.build(obj",{"_index":2420,"title":{},"body":{"interfaces/Window.html":{}}}],["jsroot.geom.js",{"_index":1812,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsroot.newhttprequest(url",{"_index":2418,"title":{},"body":{"interfaces/Window.html":{}}}],["jsroot.openfile(url).then((file",{"_index":2428,"title":{},"body":{"interfaces/Window.html":{}}}],["jsroot.painter.js",{"_index":1811,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsroot_cdn_url",{"_index":1805,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsrooteventloader",{"_index":2727,"title":{},"body":{"coverage.html":{}}}],["jsrootversion",{"_index":1784,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jszip",{"_index":2754,"title":{},"body":{"dependencies.html":{}}}],["k1",{"_index":808,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k1.clone().sub(k2).sub(k3).add(k4",{"_index":835,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k2",{"_index":801,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k3",{"_index":802,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k4",{"_index":803,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k4).lpnorm",{"_index":836,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["keep",{"_index":1505,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["key",{"_index":679,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["keyboard",{"_index":2334,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["keys",{"_index":698,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["kutta",{"_index":778,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["kutta.ts",{"_index":771,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["kutta.ts:12",{"_index":1770,"title":{},"body":{"classes/RungeKutta.html":{}}}],["kutta.ts:126",{"_index":1769,"title":{},"body":{"classes/RungeKutta.html":{}}}],["kutta.ts:168",{"_index":1996,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:170",{"_index":1992,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:172",{"_index":1994,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:174",{"_index":1997,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:176",{"_index":2000,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:178",{"_index":1998,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:180",{"_index":1993,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:182",{"_index":1995,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:192",{"_index":774,"title":{},"body":{"classes/Field.html":{}}}],["label",{"_index":647,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["labelid",{"_index":2502,"title":{},"body":{"interfaces/Window.html":{}}}],["labels",{"_index":648,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"changelog.html":{}}}],["labelsobject",{"_index":915,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["last",{"_index":99,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["later",{"_index":716,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["latest",{"_index":1785,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{}}}],["left",{"_index":445,"title":{},"body":{"classes/CMSObjects.html":{}}}],["length",{"_index":871,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["level",{"_index":1266,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["lhcb",{"_index":912,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["lhcbloader",{"_index":909,"title":{"classes/LHCbLoader.html":{}},"body":{"classes/LHCbLoader.html":{},"coverage.html":{}}}],["library",{"_index":664,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"changelog.html":{}}}],["line",{"_index":1414,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{}}}],["line(geometry",{"_index":2281,"title":{},"body":{"classes/VRManager.html":{}}}],["line.name",{"_index":2282,"title":{},"body":{"classes/VRManager.html":{}}}],["line.scale.z",{"_index":2283,"title":{},"body":{"classes/VRManager.html":{}}}],["linebasicmaterial",{"_index":413,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["lineboxobject",{"_index":464,"title":{},"body":{"classes/CMSObjects.html":{}}}],["lines",{"_index":460,"title":{},"body":{"classes/CMSObjects.html":{}}}],["linesegments",{"_index":415,"title":{},"body":{"classes/CMSObjects.html":{}}}],["link",{"_index":418,"title":{},"body":{"classes/CMSObjects.html":{}}}],["linkedclusters",{"_index":1162,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["linkedtracks",{"_index":1175,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["list",{"_index":685,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["listener",{"_index":1023,"title":{},"body":{"classes/LoadingManager.html":{},"classes/VRManager.html":{}}}],["listentodisplayedeventchange(callback",{"_index":2456,"title":{},"body":{"interfaces/Window.html":{}}}],["listentoloadedeventschange(callback",{"_index":2458,"title":{},"body":{"interfaces/Window.html":{}}}],["literal",{"_index":490,"title":{},"body":{"interfaces/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["load",{"_index":491,"title":{},"body":{"interfaces/Configuration.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["loadable",{"_index":931,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["loadconfig",{"_index":2124,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loaded",{"_index":720,"title":{},"body":{"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["loader",{"_index":502,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["loader.geteventdata",{"_index":2140,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loader.process(res",{"_index":2139,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loader.ts",{"_index":631,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loader.ts:10",{"_index":2067,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:102",{"_index":2070,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:113",{"_index":1071,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:12",{"_index":2065,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:134",{"_index":1078,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:15",{"_index":1781,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loader.ts:17",{"_index":657,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{}}}],["loader.ts:19",{"_index":1067,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:21",{"_index":1065,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:22",{"_index":939,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loader.ts:23",{"_index":1066,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:25",{"_index":1064,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:257",{"_index":1070,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:28",{"_index":2075,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:29",{"_index":695,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:301",{"_index":1068,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:31",{"_index":935,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loader.ts:326",{"_index":1077,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:343",{"_index":1076,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:35",{"_index":682,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:396",{"_index":1073,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:42",{"_index":677,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{}}}],["loader.ts:450",{"_index":1069,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:46",{"_index":1796,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loader.ts:476",{"_index":1075,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:48",{"_index":688,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loader.ts:57",{"_index":645,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:62",{"_index":936,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loader.ts:67",{"_index":701,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:73",{"_index":1074,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:77",{"_index":2079,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:8",{"_index":923,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loader.ts:89",{"_index":1072,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loaders",{"_index":634,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loaders/event",{"_index":515,"title":{},"body":{"interfaces/Configuration.html":{}}}],["loaders/jivexml",{"_index":2108,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loaders/phoenix",{"_index":2109,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loadevent(eventkey",{"_index":2361,"title":{},"body":{"interfaces/Window.html":{}}}],["loadfile",{"_index":2026,"title":{},"body":{"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loadfile((data",{"_index":2033,"title":{},"body":{"classes/StateManager.html":{}}}],["loadgltfgeometry",{"_index":2409,"title":{},"body":{"interfaces/Window.html":{}}}],["loading",{"_index":505,"title":{},"body":{"interfaces/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["loadingmanager",{"_index":916,"title":{"classes/LoadingManager.html":{}},"body":{"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["loadingmanager.addloadableitem('jsroot_scripts",{"_index":1804,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadingmanager.addloadableitem('single_script",{"_index":1816,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadingmanager.instance",{"_index":1036,"title":{},"body":{"classes/LoadingManager.html":{}}}],["loadingmanager.itemloaded('jsroot_scripts",{"_index":1815,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadingmanager.itemloaded('single_script",{"_index":1831,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadjsongeometry",{"_index":2413,"title":{},"body":{"interfaces/Window.html":{}}}],["loadjsrootscripts",{"_index":1778,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadjsrootscripts(jsrootversion",{"_index":1780,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadobjecttypes",{"_index":922,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loadobjecttypes(eventdata",{"_index":981,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loadobjgeometry",{"_index":2379,"title":{},"body":{"interfaces/Window.html":{}}}],["loadrootgeometry",{"_index":2426,"title":{},"body":{"interfaces/Window.html":{}}}],["loadrootjsongeometry",{"_index":2416,"title":{},"body":{"interfaces/Window.html":{}}}],["loads",{"_index":2343,"title":{},"body":{"interfaces/Window.html":{}}}],["loadsceneconfiguration(sceneconfiguration",{"_index":2445,"title":{},"body":{"interfaces/Window.html":{}}}],["loadscript",{"_index":1779,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadscript(scripturl",{"_index":1792,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadstatefromjson",{"_index":1248,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["loadstatefromjson(json",{"_index":1290,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["local",{"_index":350,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["localclippingenabled",{"_index":334,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["locationhref",{"_index":2111,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["locationhref.substr(locationhref.lastindexof",{"_index":2114,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["log",{"_index":900,"title":{},"body":{"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["logger",{"_index":674,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["logger.ts",{"_index":886,"title":{},"body":{"classes/InfoLogger.html":{},"coverage.html":{}}}],["logger.ts:15",{"_index":898,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:26",{"_index":901,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:6",{"_index":890,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:8",{"_index":892,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logging",{"_index":675,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["logs",{"_index":891,"title":{},"body":{"classes/InfoLogger.html":{},"interfaces/Window.html":{}}}],["long",{"_index":1582,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["look",{"_index":2491,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["lookatobject(uuid",{"_index":2492,"title":{},"body":{"interfaces/Window.html":{}}}],["loop",{"_index":1729,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["ls",{"_index":1197,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["lumiblock",{"_index":1199,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["made",{"_index":1299,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["main",{"_index":571,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["mainrenderer",{"_index":1654,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.domelement.id",{"_index":1750,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.setpixelratio(window.devicepixelratio",{"_index":1749,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.setsize(rendererwidth",{"_index":1748,"title":{},"body":{"classes/RendererManager.html":{}}}],["major",{"_index":2693,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":273,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["making",{"_index":271,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager",{"_index":9,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["manager.ts",{"_index":7,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"coverage.html":{}}}],["manager.ts:10",{"_index":1677,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:101",{"_index":1028,"title":{},"body":{"classes/LoadingManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:104",{"_index":1712,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:105",{"_index":1886,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:108",{"_index":1035,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:11",{"_index":1013,"title":{},"body":{"classes/LoadingManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:113",{"_index":1903,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:118",{"_index":1716,"title":{},"body":{"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{}}}],["manager.ts:12",{"_index":577,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/URLOptionsManager.html":{}}}],["manager.ts:122",{"_index":1885,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:123",{"_index":2198,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:126",{"_index":1689,"title":{},"body":{"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:13",{"_index":2016,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:131",{"_index":2204,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:134",{"_index":1690,"title":{},"body":{"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:139",{"_index":1882,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:14",{"_index":575,"title":{},"body":{"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:141",{"_index":2200,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:142",{"_index":75,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:15",{"_index":2015,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:152",{"_index":1682,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:156",{"_index":1877,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:16",{"_index":584,"title":{},"body":{"classes/EffectsManager.html":{},"classes/LoadingManager.html":{}}}],["manager.ts:162",{"_index":1700,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:163",{"_index":2203,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:169",{"_index":1872,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:17",{"_index":2014,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:170",{"_index":2209,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:174",{"_index":1719,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:18",{"_index":580,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:186",{"_index":1685,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:19",{"_index":1010,"title":{},"body":{"classes/LoadingManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:199",{"_index":1707,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:20",{"_index":572,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:209",{"_index":1688,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:21",{"_index":1870,"title":{},"body":{"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:218",{"_index":1875,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:219",{"_index":1698,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:22",{"_index":2195,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:227",{"_index":1705,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:229",{"_index":1897,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:23",{"_index":566,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:24",{"_index":2196,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:242",{"_index":2207,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:25",{"_index":37,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:252",{"_index":1889,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:26",{"_index":2193,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:27",{"_index":712,"title":{},"body":{"classes/ExportManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:28",{"_index":2185,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:29",{"_index":1862,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:30",{"_index":2190,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:315",{"_index":81,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:32",{"_index":2105,"title":{},"body":{"classes/URLOptionsManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:33",{"_index":1693,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:34",{"_index":2197,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:36",{"_index":1020,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:37",{"_index":2179,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:38",{"_index":2017,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:388",{"_index":112,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:39",{"_index":2182,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:41",{"_index":2183,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:43",{"_index":1867,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:44",{"_index":1030,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:448",{"_index":104,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:45",{"_index":1703,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:46",{"_index":2025,"title":{},"body":{"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:47",{"_index":1878,"title":{},"body":{"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{}}}],["manager.ts:48",{"_index":125,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:487",{"_index":89,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:49",{"_index":1866,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:497",{"_index":56,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:514",{"_index":132,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:52",{"_index":728,"title":{},"body":{"classes/ExportManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:54",{"_index":1856,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:56",{"_index":2213,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:6",{"_index":1012,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:60",{"_index":1032,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:61",{"_index":592,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:63",{"_index":1696,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:66",{"_index":724,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:69",{"_index":585,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:71",{"_index":92,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:72",{"_index":2018,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:76",{"_index":1895,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:8",{"_index":1676,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:80",{"_index":1022,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:85",{"_index":726,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:88",{"_index":595,"title":{},"body":{"classes/EffectsManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:89",{"_index":1025,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:9",{"_index":1018,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:91",{"_index":2191,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:94",{"_index":1901,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:96",{"_index":1709,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:97",{"_index":598,"title":{},"body":{"classes/EffectsManager.html":{}}}],["managers/loading",{"_index":1081,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["managers/state",{"_index":2308,"title":{},"body":{"interfaces/Window.html":{}}}],["managers/url",{"_index":2309,"title":{},"body":{"interfaces/Window.html":{}}}],["manages",{"_index":567,"title":{},"body":{"classes/EffectsManager.html":{}}}],["managing",{"_index":10,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["manipulate",{"_index":672,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["manual",{"_index":1336,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["manually",{"_index":245,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["many",{"_index":2085,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["map((key",{"_index":1958,"title":{},"body":{"classes/SelectionManager.html":{}}}],["matching",{"_index":392,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":337,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{}}}],["material.opacity",{"_index":1455,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.abs(1",{"_index":1592,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["math.abs(returnvec.x",{"_index":837,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.abs(returnvec.y",{"_index":838,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.abs(returnvec.z",{"_index":839,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.atan(math.pow(math.e",{"_index":1496,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.cos(clusterparams.phi",{"_index":1499,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.cos(phi",{"_index":1442,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["math.cos(theta",{"_index":1446,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["math.max(math.min(pos.z",{"_index":1504,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.pi",{"_index":186,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["math.pow(fh",{"_index":850,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.round(p",{"_index":1631,"title":{},"body":{"classes/RKHelper.html":{}}}],["math.sign(1",{"_index":1595,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["math.sin(clusterparams.phi",{"_index":1500,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.sin(phi",{"_index":1440,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["math.sin(theta",{"_index":1444,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["math.sqrt(pos.x",{"_index":1430,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["max",{"_index":868,"title":{},"body":{"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/PhoenixLoader.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["maxentries",{"_index":888,"title":{},"body":{"classes/InfoLogger.html":{}}}],["maximum",{"_index":537,"title":{},"body":{"classes/Cut.html":{}}}],["maxr",{"_index":1484,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["maxstepsize",{"_index":1988,"title":{},"body":{"classes/State.html":{}}}],["maxvalue",{"_index":528,"title":{},"body":{"classes/Cut.html":{}}}],["maxz",{"_index":1487,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["menu",{"_index":501,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["menu/phoenix",{"_index":517,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["menunodename",{"_index":2367,"title":{},"body":{"interfaces/Window.html":{}}}],["menus",{"_index":671,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["mesh",{"_index":145,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["mesh(geometry",{"_index":1456,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh(particlegeometry",{"_index":362,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["mesh.name",{"_index":1460,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.position.copy(translation",{"_index":1457,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.quaternion.copy(quaternion",{"_index":1458,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.userdata",{"_index":1459,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.uuid",{"_index":1462,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["meshbasicmaterial",{"_index":144,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["meshphongmaterial",{"_index":1420,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["meshtoonmaterial",{"_index":1413,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["meta",{"_index":1194,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["metadata",{"_index":689,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["metadata.push",{"_index":1221,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["methods",{"_index":18,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["mev",{"_index":1623,"title":{},"body":{"classes/RKHelper.html":{}}}],["min",{"_index":1100,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["min.js",{"_index":2783,"title":{},"body":{"index.html":{}}}],["minimum",{"_index":535,"title":{},"body":{"classes/Cut.html":{}}}],["minor",{"_index":2611,"title":{},"body":{"changelog.html":{}}}],["minvalue",{"_index":529,"title":{},"body":{"classes/Cut.html":{}}}],["miscellaneous",{"_index":2796,"title":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":1622,"title":{},"body":{"classes/RKHelper.html":{}}}],["mock",{"_index":2812,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mocking",{"_index":2830,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":1879,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["modular",{"_index":2759,"title":{},"body":{"index.html":{}}}],["module",{"_index":2769,"title":{},"body":{"index.html":{}}}],["modules",{"_index":2793,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["mom",{"_index":1558,"title":{},"body":{"classes/PrettySymbols.html":{},"changelog.html":{}}}],["momentum",{"_index":787,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["more",{"_index":964,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"changelog.html":{}}}],["mouse",{"_index":1873,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.x",{"_index":1974,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.y",{"_index":1977,"title":{},"body":{"classes/SelectionManager.html":{}}}],["move",{"_index":170,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RKHelper.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["moveindirection",{"_index":2176,"title":{},"body":{"classes/VRManager.html":{}}}],["moveindirection(direction",{"_index":2205,"title":{},"body":{"classes/VRManager.html":{}}}],["movement",{"_index":2181,"title":{},"body":{"classes/VRManager.html":{}}}],["moving",{"_index":254,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{}}}],["mss",{"_index":867,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multidimensional",{"_index":135,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["multiple",{"_index":696,"title":{},"body":{"interfaces/EventDataLoader.html":{},"changelog.html":{}}}],["multiplyscalar(fh",{"_index":860,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multiplyscalar(fh2",{"_index":855,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multiplyscalar(qop",{"_index":824,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multiplyscalar(updatedscale.x",{"_index":259,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["muon",{"_index":407,"title":{},"body":{"classes/CMSObjects.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["muonchamber",{"_index":459,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(boxobject",{"_index":467,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(lineboxobject",{"_index":468,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams",{"_index":410,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams.color",{"_index":452,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams.uuid",{"_index":469,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchambers",{"_index":2807,"title":{},"body":{"miscellaneous/variables.html":{}}}],["muonparams",{"_index":976,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["muonparams.linkedclusters",{"_index":1164,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonparams.linkedtracks",{"_index":1177,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonparams.uuid",{"_index":1190,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muons",{"_index":1122,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene",{"_index":1161,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.add(cluster",{"_index":1174,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.add(track",{"_index":1187,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.name",{"_index":1192,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.uuid",{"_index":1191,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["name",{"_index":40,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["name('jets",{"_index":1095,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["name.split('>').foreach((nodename",{"_index":1385,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["named",{"_index":1016,"title":{},"body":{"classes/LoadingManager.html":{}}}],["names",{"_index":970,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["naming",{"_index":963,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["navigator",{"_index":2227,"title":{},"body":{"classes/VRManager.html":{}}}],["ndof",{"_index":1554,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["need",{"_index":247,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["needed",{"_index":1583,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["needs",{"_index":1486,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["new",{"_index":121,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["node",{"_index":508,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["node.ts",{"_index":1232,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["node.ts:101",{"_index":1292,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:114",{"_index":1300,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:124",{"_index":1274,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:137",{"_index":1296,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:157",{"_index":1277,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:17",{"_index":1264,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:180",{"_index":1289,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:19",{"_index":1263,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:201",{"_index":1291,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:21",{"_index":1267,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:23",{"_index":1269,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:247",{"_index":1282,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:25",{"_index":1255,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:265",{"_index":1287,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:27",{"_index":1262,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:29",{"_index":1265,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:31",{"_index":1268,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:36",{"_index":1257,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:39",{"_index":1256,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:41",{"_index":1253,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:75",{"_index":1271,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:92",{"_index":1294,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild",{"_index":1375,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.loadstatefromjson(childstate",{"_index":1381,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.name",{"_index":1377,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.nodelevel",{"_index":1379,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig",{"_index":1364,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig.label",{"_index":1368,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig.type",{"_index":1366,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig[prop",{"_index":1370,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodefound",{"_index":1382,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodejs.timeout",{"_index":2289,"title":{},"body":{"classes/VRManager.html":{}}}],["nodelevel",{"_index":1238,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodename",{"_index":1386,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodename.trim",{"_index":1387,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodes",{"_index":1260,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["none",{"_index":492,"title":{},"body":{"interfaces/Configuration.html":{},"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["normal",{"_index":582,"title":{},"body":{"classes/EffectsManager.html":{}}}],["normalblending",{"_index":601,"title":{},"body":{"classes/EffectsManager.html":{}}}],["notable",{"_index":2510,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":2217,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["nowdisplayingevent",{"_index":2312,"title":{},"body":{"interfaces/Window.html":{}}}],["npm",{"_index":2766,"title":{},"body":{"index.html":{}}}],["null",{"_index":354,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":53,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["number'].includes",{"_index":1960,"title":{},"body":{"classes/SelectionManager.html":{}}}],["number,onend",{"_index":102,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["numofsteps",{"_index":182,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj",{"_index":722,"title":{},"body":{"classes/ExportManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["obj.eventobject",{"_index":287,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj.eventobject.name",{"_index":286,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj.eventobject.visible",{"_index":300,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj.obj",{"_index":741,"title":{},"body":{"classes/ExportManager.html":{}}}],["object",{"_index":130,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["object's",{"_index":649,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["object.assign",{"_index":457,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["object.assign(configoptions",{"_index":1325,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["object.keys(combinedprops).join",{"_index":1222,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(combinedprops).length",{"_index":1216,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(intersectedobject.userdata",{"_index":1957,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(muonchamberparams",{"_index":421,"title":{},"body":{"classes/CMSObjects.html":{}}}],["object.keys(object",{"_index":1159,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(paramscopy",{"_index":1577,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["object.keys(prettyparams",{"_index":1952,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(prettysymbols.symbols).find((symbol",{"_index":1569,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["object.keys(sceneconfiguration.eventdata",{"_index":2446,"title":{},"body":{"interfaces/Window.html":{}}}],["object.keys(this.eventdata",{"_index":1202,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(this.eventdata[eventdatatype]).includes(collection",{"_index":1226,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(this.progressitems).length",{"_index":1052,"title":{},"body":{"classes/LoadingManager.html":{}}}],["object.keys(trackscollections",{"_index":1615,"title":{},"body":{"classes/RKHelper.html":{}}}],["object.name",{"_index":768,"title":{},"body":{"classes/ExportManager.html":{}}}],["object.values(combinedprops).join",{"_index":1223,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.values(this.progressitems).reduce",{"_index":1048,"title":{},"body":{"classes/LoadingManager.html":{}}}],["object3d",{"_index":148,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["object[collectionname",{"_index":1137,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectcollection",{"_index":946,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["objectcollection.length",{"_index":1139,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectcollection[0",{"_index":1144,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectgroup",{"_index":943,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["objectgroup.add(collscene",{"_index":1153,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectgroup.name",{"_index":1158,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectname",{"_index":2425,"title":{},"body":{"interfaces/Window.html":{}}}],["objectparams",{"_index":1150,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objects",{"_index":44,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["objects.ts",{"_index":396,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["objects.ts:128",{"_index":1404,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:193",{"_index":1401,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:240",{"_index":1399,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:27",{"_index":405,"title":{},"body":{"classes/CMSObjects.html":{}}}],["objects.ts:279",{"_index":1409,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:35",{"_index":1407,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects/phoenix",{"_index":1080,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectsgroup",{"_index":1888,"title":{},"body":{"classes/SelectionManager.html":{}}}],["objectsgroup.getobjectbyproperty('uuid",{"_index":1987,"title":{},"body":{"classes/SelectionManager.html":{}}}],["objectstoanimatewithsphere",{"_index":203,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["objectstoanimatewithsphere.foreach((obj",{"_index":285,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["objectstoanimatewithsphere.push",{"_index":279,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["objecttype",{"_index":760,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["objecttype.children",{"_index":764,"title":{},"body":{"classes/ExportManager.html":{}}}],["objecttype.name",{"_index":762,"title":{},"body":{"classes/ExportManager.html":{}}}],["objexporter",{"_index":731,"title":{},"body":{"classes/ExportManager.html":{}}}],["observable",{"_index":1864,"title":{},"body":{"classes/SelectionManager.html":{}}}],["olddrawrangecount",{"_index":229,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["onanimationend",{"_index":91,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["onanimationsphereupdate",{"_index":283,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["onanimationsphereupdate(new",{"_index":317,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["onanimationstart",{"_index":74,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["once",{"_index":275,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ScriptLoader.html":{}}}],["onchange",{"_index":1102,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["onclick",{"_index":2031,"title":{},"body":{"classes/StateManager.html":{}}}],["oncontrollerselectend",{"_index":2164,"title":{},"body":{"classes/VRManager.html":{}}}],["oncontrollerselectstart",{"_index":2165,"title":{},"body":{"classes/VRManager.html":{}}}],["ondisplayedeventchange",{"_index":2311,"title":{},"body":{"interfaces/Window.html":{}}}],["ondocumentmousedown",{"_index":1844,"title":{},"body":{"classes/SelectionManager.html":{}}}],["one",{"_index":660,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["onend",{"_index":54,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["oneventschange",{"_index":2310,"title":{},"body":{"interfaces/Window.html":{}}}],["onfileread",{"_index":2809,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onfileread?.(e.target.result.tostring",{"_index":2825,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onloadcallbacks",{"_index":1000,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onprogress",{"_index":1009,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onprogress(itemname",{"_index":1031,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onprogresscallbacks",{"_index":1001,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onsessionended",{"_index":2166,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["onsessionstarted",{"_index":2212,"title":{},"body":{"classes/VRManager.html":{}}}],["ontoggle",{"_index":1239,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["ontouchdown",{"_index":1845,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ontouchmove",{"_index":1846,"title":{},"body":{"classes/SelectionManager.html":{}}}],["onupdate",{"_index":1860,"title":{},"body":{"classes/SelectionManager.html":{}}}],["onvrsessionended",{"_index":2167,"title":{},"body":{"classes/VRManager.html":{}}}],["onvrsessionstarted",{"_index":2168,"title":{},"body":{"classes/VRManager.html":{}}}],["opacity",{"_index":360,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["operations",{"_index":13,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["optimal",{"_index":2641,"title":{},"body":{"changelog.html":{}}}],["optimize",{"_index":2531,"title":{},"body":{"changelog.html":{}}}],["option",{"_index":2104,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["optional",{"_index":42,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["optionalfeatures",{"_index":2230,"title":{},"body":{"classes/VRManager.html":{}}}],["options",{"_index":489,"title":{},"body":{"interfaces/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["origin",{"_index":87,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["original",{"_index":253,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PrettySymbols.html":{}}}],["out",{"_index":238,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["outdated",{"_index":2219,"title":{},"body":{"classes/VRManager.html":{}}}],["outline",{"_index":551,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["outlinepass",{"_index":590,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["outlinepass.overlaymaterial.blending",{"_index":623,"title":{},"body":{"classes/EffectsManager.html":{}}}],["outlinepass.visibleedgecolor.set(0xdf5330",{"_index":625,"title":{},"body":{"classes/EffectsManager.html":{}}}],["outlinepass.visibleedgecolor.set(0xffff66",{"_index":624,"title":{},"body":{"classes/EffectsManager.html":{}}}],["output",{"_index":749,"title":{},"body":{"classes/ExportManager.html":{}}}],["over",{"_index":207,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["overlay",{"_index":1674,"title":{},"body":{"classes/RendererManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["overlaycanvas",{"_index":1713,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["overlayed",{"_index":2473,"title":{},"body":{"interfaces/Window.html":{}}}],["overlayrenderer",{"_index":1655,"title":{},"body":{"classes/RendererManager.html":{}}}],["overview",{"_index":2794,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":1573,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["p",{"_index":788,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["package",{"_index":2706,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"index.html":{}}}],["packages",{"_index":2597,"title":{},"body":{"changelog.html":{}}}],["page",{"_index":2106,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["panel",{"_index":896,"title":{},"body":{"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["param",{"_index":156,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["param.startswith('back",{"_index":425,"title":{},"body":{"classes/CMSObjects.html":{}}}],["param.startswith('front",{"_index":422,"title":{},"body":{"classes/CMSObjects.html":{}}}],["parameter",{"_index":1567,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parameters",{"_index":38,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["parameterss",{"_index":1563,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parametrised",{"_index":2656,"title":{},"body":{"changelog.html":{}}}],["paramkey",{"_index":1576,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["params",{"_index":947,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PrettySymbols.html":{},"classes/TrackmlLoader.html":{}}}],["paramscopy",{"_index":1574,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams",{"_index":1600,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[0",{"_index":1597,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[1",{"_index":1599,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[2",{"_index":1590,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[3",{"_index":1589,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[4",{"_index":1593,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy?.dparams",{"_index":1587,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy['pos",{"_index":1584,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy[paramkey",{"_index":1580,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy[symbol",{"_index":1579,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parent",{"_index":1240,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{}}}],["parentelement",{"_index":1794,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["parentelement.appendchild(scriptelement",{"_index":1834,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["parse",{"_index":745,"title":{},"body":{"classes/ExportManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["parsed",{"_index":2406,"title":{},"body":{"interfaces/Window.html":{}}}],["parsegltfgeometry",{"_index":2403,"title":{},"body":{"interfaces/Window.html":{}}}],["parseobjgeometry",{"_index":2385,"title":{},"body":{"interfaces/Window.html":{}}}],["parsephoenixdisplay(input",{"_index":2393,"title":{},"body":{"interfaces/Window.html":{}}}],["parsephoenixevents(eventsdata",{"_index":2344,"title":{},"body":{"interfaces/Window.html":{}}}],["parses",{"_index":984,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["parsing",{"_index":2606,"title":{},"body":{"changelog.html":{}}}],["part",{"_index":400,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["part_list",{"_index":994,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["particle",{"_index":62,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["particle1",{"_index":361,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle1.clone",{"_index":364,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle1.position.setz(distancefromorigin",{"_index":365,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle2",{"_index":363,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle2.position.setz",{"_index":366,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particlecolor",{"_index":110,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particledata",{"_index":2060,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["particlegeometry",{"_index":355,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particlematerial",{"_index":358,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particles",{"_index":114,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/TrackmlLoader.html":{}}}],["particlesize",{"_index":108,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletoorigin",{"_index":371,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletweens",{"_index":368,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletweens.push(particletoorigin",{"_index":373,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletweens[0].oncomplete",{"_index":374,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["pass",{"_index":552,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["passed",{"_index":874,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["passes",{"_index":568,"title":{},"body":{"classes/EffectsManager.html":{}}}],["passindex",{"_index":627,"title":{},"body":{"classes/EffectsManager.html":{}}}],["path",{"_index":870,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["pathlength",{"_index":1989,"title":{},"body":{"classes/State.html":{}}}],["pdata_list",{"_index":995,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["per",{"_index":2535,"title":{},"body":{"changelog.html":{}}}],["perform",{"_index":780,"title":{},"body":{"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{}}}],["performance",{"_index":1726,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["performed",{"_index":782,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["performing",{"_index":776,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["persist",{"_index":2564,"title":{},"body":{"changelog.html":{}}}],["phi",{"_index":1549,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["phnx",{"_index":2392,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenix",{"_index":509,"title":{},"body":{"interfaces/Configuration.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["phoenix.eventdisplay",{"_index":2789,"title":{},"body":{"index.html":{}}}],["phoenix.phoenixloader",{"_index":2790,"title":{},"body":{"index.html":{}}}],["phoenixloader",{"_index":911,"title":{"classes/PhoenixLoader.html":{}},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"coverage.html":{},"index.html":{}}}],["phoenixloader:113",{"_index":968,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:134",{"_index":982,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:17",{"_index":927,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:19",{"_index":933,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:21",{"_index":926,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:23",{"_index":930,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:25",{"_index":929,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:257",{"_index":960,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:301",{"_index":944,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:326",{"_index":979,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:343",{"_index":975,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:396",{"_index":971,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:42",{"_index":966,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:450",{"_index":953,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:476",{"_index":973,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:73",{"_index":972,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:89",{"_index":969,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixmenu",{"_index":2035,"title":{},"body":{"classes/StateManager.html":{}}}],["phoenixmenuconfig",{"_index":1273,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["phoenixmenunode",{"_index":506,"title":{"classes/PhoenixMenuNode.html":{}},"body":{"interfaces/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["phoenixmenunode(name",{"_index":1311,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixmenuroot",{"_index":483,"title":{},"body":{"interfaces/Configuration.html":{},"classes/StateManager.html":{}}}],["phoenixnodejson",{"_index":1347,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['children",{"_index":1354,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['children'].push(child.getnodestate",{"_index":1355,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['childrenactive",{"_index":1351,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['configs",{"_index":1353,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['name",{"_index":1348,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['nodelevel",{"_index":1349,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['togglestate",{"_index":1350,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixobjects",{"_index":401,"title":{"classes/PhoenixObjects.html":{}},"body":{"classes/CMSObjects.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["phoenixobjects.getcluster",{"_index":1116,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getcluster(clusterparams",{"_index":1173,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getelectrons",{"_index":1127,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.gethits",{"_index":1110,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getjet",{"_index":1105,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getphotons",{"_index":1125,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.gettrack(trackparams",{"_index":1186,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getvertex",{"_index":1130,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixscene",{"_index":2394,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.scene",{"_index":2397,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.sceneconfiguration",{"_index":2396,"title":{},"body":{"interfaces/Window.html":{}}}],["physics",{"_index":397,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["pi",{"_index":1113,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["pipe",{"_index":2672,"title":{},"body":{"changelog.html":{}}}],["plane",{"_index":151,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["plane(vertice",{"_index":328,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["planes",{"_index":61,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["plength",{"_index":869,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["point",{"_index":804,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pointpos",{"_index":1468,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointpos[i",{"_index":1470,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["points",{"_index":1418,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["points(geometry",{"_index":1479,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsmaterial",{"_index":1417,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj",{"_index":1478,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj.name",{"_index":1481,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj.userdata",{"_index":1480,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj.uuid",{"_index":1483,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos",{"_index":127,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos.x",{"_index":1431,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos.y",{"_index":1432,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos1",{"_index":816,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos2",{"_index":827,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos[0",{"_index":164,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["pos[1",{"_index":166,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["pos[2",{"_index":167,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["position",{"_index":96,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["positions",{"_index":133,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["positions.concat(extrapolatedpos",{"_index":1651,"title":{},"body":{"classes/RKHelper.html":{}}}],["positions.length",{"_index":1429,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["positions.length==0",{"_index":1425,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["positions.push([startpos.x",{"_index":1643,"title":{},"body":{"classes/RKHelper.html":{}}}],["positive",{"_index":2675,"title":{},"body":{"changelog.html":{}}}],["possible",{"_index":1208,"title":{},"body":{"classes/PhoenixLoader.html":{},"changelog.html":{}}}],["possibly",{"_index":1089,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["post",{"_index":1910,"title":{},"body":{"classes/SelectionManager.html":{}}}],["postion",{"_index":1108,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["powerpreference",{"_index":1724,"title":{},"body":{"classes/RendererManager.html":{}}}],["preselectionantialias",{"_index":1847,"title":{},"body":{"classes/SelectionManager.html":{}}}],["presenting",{"_index":2763,"title":{},"body":{"index.html":{}}}],["preset",{"_index":511,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["presetview",{"_index":510,"title":{"classes/PresetView.html":{}},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"coverage.html":{}}}],["presetviews",{"_index":484,"title":{},"body":{"interfaces/Configuration.html":{}}}],["pretty",{"_index":1544,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams",{"_index":1588,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['d0",{"_index":1596,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['q",{"_index":1594,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['z0",{"_index":1598,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['|p",{"_index":1591,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettyparams",{"_index":1949,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettyparams[key",{"_index":1956,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettysymbol",{"_index":1568,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettysymbols",{"_index":1541,"title":{"classes/PrettySymbols.html":{}},"body":{"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["prettysymbols.getprettyparams",{"_index":1950,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettysymbols.getprettysymbol(paramkey",{"_index":1578,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettysymbols.symbols[symbol].includes(param",{"_index":1570,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["previous",{"_index":330,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixMenuNode.html":{}}}],["previousscale",{"_index":250,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["prevlocalclipping",{"_index":332,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["prevnode",{"_index":1384,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.addchild(nodename",{"_index":1391,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.children.find(child",{"_index":1389,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.findintree(nodename",{"_index":1388,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["print",{"_index":1585,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["printed",{"_index":1562,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["private",{"_index":28,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["probably",{"_index":1633,"title":{},"body":{"classes/RKHelper.html":{}}}],["process",{"_index":406,"title":{},"body":{"classes/CMSObjects.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["process(data",{"_index":938,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["processed",{"_index":924,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["processes",{"_index":2443,"title":{},"body":{"interfaces/Window.html":{}}}],["processhits",{"_index":2062,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processhits(hits",{"_index":2074,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processing",{"_index":504,"title":{},"body":{"interfaces/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"index.html":{}}}],["processparticles",{"_index":2063,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processparticles(particles",{"_index":2077,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processtruth",{"_index":2064,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processtruth(truth",{"_index":2078,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["progress",{"_index":1015,"title":{},"body":{"classes/LoadingManager.html":{},"classes/VRManager.html":{}}}],["progresses",{"_index":1033,"title":{},"body":{"classes/LoadingManager.html":{}}}],["progressitems",{"_index":1002,"title":{},"body":{"classes/LoadingManager.html":{}}}],["project",{"_index":2511,"title":{},"body":{"changelog.html":{}}}],["promise",{"_index":1788,"title":{},"body":{"classes/ScriptLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["promise((resolve",{"_index":1817,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["prop",{"_index":1209,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{}}}],["propagate",{"_index":862,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["propagate(startpos",{"_index":1768,"title":{},"body":{"classes/RungeKutta.html":{}}}],["propagation",{"_index":58,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["propagator",{"_index":1608,"title":{},"body":{"classes/RKHelper.html":{}}}],["properties",{"_index":476,"title":{},"body":{"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["props",{"_index":1206,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{}}}],["props.join",{"_index":1966,"title":{},"body":{"classes/SelectionManager.html":{}}}],["props.length",{"_index":1965,"title":{},"body":{"classes/SelectionManager.html":{}}}],["protected",{"_index":914,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["pt",{"_index":1550,"title":{},"body":{"classes/PrettySymbols.html":{},"changelog.html":{}}}],["public",{"_index":19,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["pushed",{"_index":2189,"title":{},"body":{"classes/VRManager.html":{}}}],["pushing",{"_index":1218,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["q",{"_index":786,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["qop",{"_index":792,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["quaternion",{"_index":1415,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["quaternion.setfromunitvectors(v1",{"_index":1450,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["radius",{"_index":180,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["range",{"_index":1506,"title":{},"body":{"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["rangeslider",{"_index":1304,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["ratio",{"_index":789,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["raycaster",{"_index":1904,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.intersectobjects(this.scene.children",{"_index":1982,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.params.line.threshold",{"_index":1981,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.setfromcamera(mouse",{"_index":1980,"title":{},"body":{"classes/SelectionManager.html":{}}}],["reachedhits",{"_index":291,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["reachedhits.length",{"_index":295,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["reaches",{"_index":276,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["react",{"_index":2792,"title":{},"body":{"index.html":{}}}],["read",{"_index":2813,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reader",{"_index":2822,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reader.onload",{"_index":2824,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reader.readastext(configfile",{"_index":2827,"title":{},"body":{"miscellaneous/variables.html":{}}}],["readonly",{"_index":1546,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/VRManager.html":{}}}],["realistic",{"_index":2545,"title":{},"body":{"changelog.html":{}}}],["receives",{"_index":983,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["reconstruct",{"_index":985,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["reconstructing",{"_index":951,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["recorded",{"_index":1200,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["recover",{"_index":717,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["redundant",{"_index":2533,"title":{},"body":{"changelog.html":{}}}],["refactoring",{"_index":2694,"title":{},"body":{"changelog.html":{}}}],["reject",{"_index":1818,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["related",{"_index":12,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["released",{"_index":2188,"title":{},"body":{"classes/VRManager.html":{}}}],["remaining",{"_index":315,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["remove",{"_index":352,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["removechild",{"_index":1249,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["removechild(child",{"_index":1293,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["removecontrols",{"_index":1666,"title":{},"body":{"classes/RendererManager.html":{}}}],["removecontrols(renderer",{"_index":1699,"title":{},"body":{"classes/RendererManager.html":{}}}],["removed",{"_index":596,"title":{},"body":{"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{}}}],["removeeventlistener('click",{"_index":1936,"title":{},"body":{"classes/SelectionManager.html":{}}}],["removeeventlistener('mousemove",{"_index":1935,"title":{},"body":{"classes/SelectionManager.html":{}}}],["removeeventlistener('touchstart",{"_index":1937,"title":{},"body":{"classes/SelectionManager.html":{}}}],["removepass",{"_index":562,"title":{},"body":{"classes/EffectsManager.html":{}}}],["removepass(pass",{"_index":594,"title":{},"body":{"classes/EffectsManager.html":{}}}],["render",{"_index":558,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["render(scene",{"_index":1702,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendered",{"_index":1714,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderer",{"_index":50,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["renderer.localclippingenabled",{"_index":1764,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderera",{"_index":1721,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererb",{"_index":1718,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererelement",{"_index":1972,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererelement.clientheight",{"_index":1979,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererelement.clientwidth",{"_index":1976,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererheight",{"_index":1745,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderermanager",{"_index":35,"title":{"classes/RendererManager.html":{}},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"coverage.html":{}}}],["renderers",{"_index":1656,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererwidth",{"_index":1742,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendering",{"_index":581,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["renderpass",{"_index":579,"title":{},"body":{"classes/EffectsManager.html":{}}}],["renderpass(this.scene",{"_index":610,"title":{},"body":{"classes/EffectsManager.html":{}}}],["renders",{"_index":2412,"title":{},"body":{"interfaces/Window.html":{}}}],["replacing",{"_index":1086,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["repo",{"_index":2538,"title":{},"body":{"changelog.html":{}}}],["representation",{"_index":2184,"title":{},"body":{"classes/VRManager.html":{}}}],["representing",{"_index":666,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["represents",{"_index":659,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["request",{"_index":2523,"title":{},"body":{"changelog.html":{}}}],["required",{"_index":2771,"title":{},"body":{"index.html":{}}}],["res.json",{"_index":2129,"title":{},"body":{"classes/URLOptionsManager.html":{},"index.html":{}}}],["res.text",{"_index":2136,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["reset",{"_index":530,"title":{},"body":{"classes/Cut.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"changelog.html":{}}}],["resize",{"_index":2547,"title":{},"body":{"changelog.html":{}}}],["resolve",{"_index":1830,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["resolved",{"_index":1789,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["resources",{"_index":932,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["responsible",{"_index":503,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/Window.html":{}}}],["restore",{"_index":314,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixMenuNode.html":{}}}],["restored",{"_index":1261,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["restoring",{"_index":252,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["result",{"_index":391,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":393,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":680,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["return",{"_index":169,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["returns",{"_index":72,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["returnvec",{"_index":834,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["revert",{"_index":349,"title":{},"body":{"classes/AnimationsManager.html":{},"changelog.html":{}}}],["right",{"_index":446,"title":{},"body":{"classes/CMSObjects.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["rkhelper",{"_index":1421,"title":{"classes/RKHelper.html":{}},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"coverage.html":{}}}],["rkhelper.extrapolatetrackpositions(track",{"_index":1618,"title":{},"body":{"classes/RKHelper.html":{}}}],["rkhelper.extrapolatetrackpositions(trackparams",{"_index":1434,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["rkstate",{"_index":878,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.dir",{"_index":880,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.maxstepsize",{"_index":883,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.p",{"_index":881,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.pathlength",{"_index":884,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.pos",{"_index":879,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.q",{"_index":882,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rollup",{"_index":2566,"title":{},"body":{"changelog.html":{}}}],["root",{"_index":507,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["rotate.chain(end",{"_index":193,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["rotateclipping(jsondata['eventdisplay']['clippingangle",{"_index":2054,"title":{},"body":{"classes/StateManager.html":{}}}],["rotationpositions",{"_index":188,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["routes",{"_index":2681,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":693,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["runge",{"_index":777,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rungekutta",{"_index":779,"title":{"classes/RungeKutta.html":{}},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["runnumber",{"_index":992,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{}}}],["same",{"_index":952,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"changelog.html":{}}}],["save",{"_index":329,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["saved",{"_index":718,"title":{},"body":{"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["saveeventdataconfiguration",{"_index":708,"title":{},"body":{"classes/ExportManager.html":{}}}],["saveeventdataconfiguration(eventdata",{"_index":723,"title":{},"body":{"classes/ExportManager.html":{}}}],["savefile",{"_index":735,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["savefile(json.stringify(state",{"_index":2041,"title":{},"body":{"classes/StateManager.html":{}}}],["savefile(output",{"_index":754,"title":{},"body":{"classes/ExportManager.html":{}}}],["savefile(result",{"_index":740,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration",{"_index":709,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration(geometries",{"_index":725,"title":{},"body":{"classes/ExportManager.html":{}}}],["saves",{"_index":2342,"title":{},"body":{"interfaces/Window.html":{}}}],["savesceneconfig",{"_index":710,"title":{},"body":{"classes/ExportManager.html":{}}}],["savesceneconfig(eventdata",{"_index":727,"title":{},"body":{"classes/ExportManager.html":{}}}],["savestateasjson",{"_index":2008,"title":{},"body":{"classes/StateManager.html":{}}}],["scale",{"_index":214,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["scaletween",{"_index":240,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["scaletween.onupdate((updatedscale",{"_index":249,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["scaling",{"_index":237,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["scene",{"_index":32,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["scene's",{"_index":2004,"title":{},"body":{"classes/StateManager.html":{}}}],["scene.background",{"_index":1736,"title":{},"body":{"classes/RendererManager.html":{}}}],["scene.phnx",{"_index":755,"title":{},"body":{"classes/ExportManager.html":{}}}],["scene/geometry",{"_index":2408,"title":{},"body":{"interfaces/Window.html":{}}}],["scenecolor",{"_index":1735,"title":{},"body":{"classes/RendererManager.html":{}}}],["sceneconfig",{"_index":743,"title":{},"body":{"classes/ExportManager.html":{}}}],["sceneconfiguration",{"_index":752,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["sceneconfiguration.eventdata[objecttype",{"_index":2449,"title":{},"body":{"interfaces/Window.html":{}}}],["sceneconfiguration.geometries",{"_index":2451,"title":{},"body":{"interfaces/Window.html":{}}}],["scenemanager",{"_index":140,"title":{},"body":{"classes/AnimationsManager.html":{},"coverage.html":{}}}],["sceneurl",{"_index":2466,"title":{},"body":{"interfaces/Window.html":{}}}],["screen",{"_index":2484,"title":{},"body":{"interfaces/Window.html":{}}}],["screenshot",{"_index":2648,"title":{},"body":{"changelog.html":{}}}],["script",{"_index":1773,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{},"index.html":{}}}],["script[src",{"_index":1821,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement",{"_index":1823,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.addeventlistener('load",{"_index":1829,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.onerror",{"_index":1832,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.setattribute('data",{"_index":1828,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.src",{"_index":1827,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.type",{"_index":1825,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists",{"_index":1819,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists.length",{"_index":1822,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists[0].addeventlistener('load",{"_index":1838,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists[0].dataset.loaded",{"_index":1837,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptfor",{"_index":1793,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptloader",{"_index":1771,"title":{"classes/ScriptLoader.html":{}},"body":{"classes/ScriptLoader.html":{},"coverage.html":{}}}],["scriptloader.loadscript(jsroot_cdn_url",{"_index":1814,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scripts",{"_index":1776,"title":{},"body":{"classes/ScriptLoader.html":{},"miscellaneous/variables.html":{}}}],["scripturl",{"_index":1797,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["search",{"_index":2096,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["second",{"_index":813,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["secondary",{"_index":1678,"title":{},"body":{"classes/RendererManager.html":{}}}],["see",{"_index":2513,"title":{},"body":{"changelog.html":{}}}],["select",{"_index":2187,"title":{},"body":{"classes/VRManager.html":{}}}],["selected",{"_index":1863,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selectedobject",{"_index":1848,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selectend",{"_index":2250,"title":{},"body":{"classes/VRManager.html":{}}}],["selecting",{"_index":1884,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selection",{"_index":1189,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["selectionmanager",{"_index":1839,"title":{"classes/SelectionManager.html":{}},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["selectstart",{"_index":2248,"title":{},"body":{"classes/VRManager.html":{}}}],["send",{"_index":2424,"title":{},"body":{"interfaces/Window.html":{}}}],["separator",{"_index":2368,"title":{},"body":{"interfaces/Window.html":{}}}],["service",{"_index":903,"title":{},"body":{"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"index.html":{}}}],["session",{"_index":2186,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["session.addeventlistener('end",{"_index":2242,"title":{},"body":{"classes/VRManager.html":{}}}],["session_type",{"_index":2169,"title":{},"body":{"classes/VRManager.html":{}}}],["sessioninit",{"_index":2229,"title":{},"body":{"classes/VRManager.html":{}}}],["set",{"_index":320,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["set/get",{"_index":1753,"title":{},"body":{"classes/RendererManager.html":{}}}],["setantialiasing",{"_index":563,"title":{},"body":{"classes/EffectsManager.html":{}}}],["setantialiasing(antialias",{"_index":597,"title":{},"body":{"classes/EffectsManager.html":{}}}],["setcamera",{"_index":2009,"title":{},"body":{"classes/StateManager.html":{}}}],["setcamera(camera",{"_index":2019,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingangle",{"_index":2010,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingangle(angle",{"_index":2020,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingenabled",{"_index":2011,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingenabled(clipping",{"_index":2022,"title":{},"body":{"classes/StateManager.html":{}}}],["seteventdisplay",{"_index":2012,"title":{},"body":{"classes/StateManager.html":{}}}],["seteventdisplay(eventdisplay",{"_index":2023,"title":{},"body":{"classes/StateManager.html":{}}}],["setfixoverlay",{"_index":1667,"title":{},"body":{"classes/RendererManager.html":{}}}],["setfixoverlay(value",{"_index":1704,"title":{},"body":{"classes/RendererManager.html":{}}}],["setflat",{"_index":2376,"title":{},"body":{"interfaces/Window.html":{}}}],["setfromsphericalcoordinates",{"_index":1636,"title":{},"body":{"classes/RKHelper.html":{}}}],["setinterval",{"_index":2294,"title":{},"body":{"classes/VRManager.html":{}}}],["setlocalclippingenabled",{"_index":1668,"title":{},"body":{"classes/RendererManager.html":{}}}],["setlocalclippingenabled(value",{"_index":1706,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer",{"_index":1669,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer(renderer",{"_index":1708,"title":{},"body":{"classes/RendererManager.html":{}}}],["setoverlayrenderer",{"_index":1670,"title":{},"body":{"classes/RendererManager.html":{}}}],["setoverlayrenderer(overlaycanvas",{"_index":1710,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["setphoenixmenuroot",{"_index":2013,"title":{},"body":{"classes/StateManager.html":{}}}],["setphoenixmenuroot(phoenixmenuroot",{"_index":2024,"title":{},"body":{"classes/StateManager.html":{}}}],["setrenderers",{"_index":1671,"title":{},"body":{"classes/RendererManager.html":{}}}],["setrenderers(renderers",{"_index":1715,"title":{},"body":{"classes/RendererManager.html":{}}}],["sets",{"_index":2472,"title":{},"body":{"interfaces/Window.html":{}}}],["setselectedobject",{"_index":1854,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselectedobject(selectedobject",{"_index":1900,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting",{"_index":1855,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting(enable",{"_index":1902,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setting",{"_index":331,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{}}}],["settings",{"_index":2338,"title":{},"body":{"interfaces/Window.html":{}}}],["setup",{"_index":2576,"title":{},"body":{"changelog.html":{}}}],["setupvrcontrols",{"_index":2177,"title":{},"body":{"classes/VRManager.html":{}}}],["setview",{"_index":1530,"title":{},"body":{"classes/PresetView.html":{}}}],["setvrsession",{"_index":2178,"title":{},"body":{"classes/VRManager.html":{}}}],["setvrsession(renderer",{"_index":2211,"title":{},"body":{"classes/VRManager.html":{}}}],["shade",{"_index":2639,"title":{},"body":{"changelog.html":{}}}],["shaded",{"_index":2378,"title":{},"body":{"interfaces/Window.html":{}}}],["show",{"_index":384,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["showing",{"_index":670,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["shown",{"_index":894,"title":{},"body":{"classes/InfoLogger.html":{}}}],["si",{"_index":790,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["side",{"_index":455,"title":{},"body":{"classes/CMSObjects.html":{}}}],["sides",{"_index":2373,"title":{},"body":{"interfaces/Window.html":{}}}],["simple",{"_index":2770,"title":{},"body":{"index.html":{}}}],["simplify",{"_index":2663,"title":{},"body":{"changelog.html":{}}}],["single",{"_index":137,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{}}}],["singleton",{"_index":1011,"title":{},"body":{"classes/LoadingManager.html":{},"classes/StateManager.html":{}}}],["size",{"_index":116,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["sizemenu",{"_index":1091,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["sizemenu.onchange((value",{"_index":1096,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["slider",{"_index":1302,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["smaller",{"_index":2437,"title":{},"body":{"interfaces/Window.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["space",{"_index":864,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["spec",{"_index":2616,"title":{},"body":{"changelog.html":{}}}],["specific",{"_index":937,"title":{},"body":{"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["specified",{"_index":1528,"title":{},"body":{"classes/PresetView.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["specifying",{"_index":522,"title":{},"body":{"classes/Cut.html":{},"interfaces/Window.html":{}}}],["sphere",{"_index":147,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["sphere(new",{"_index":202,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["sphere.name",{"_index":1521,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.position.x",{"_index":1515,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.position.y",{"_index":1517,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.position.z",{"_index":1519,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.userdata",{"_index":1520,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.uuid",{"_index":1523,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.vertices",{"_index":326,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spherebuffergeometry",{"_index":146,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["spherebuffergeometry(3",{"_index":1512,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["spherebuffergeometry(particlesize",{"_index":356,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spheregeometry",{"_index":150,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spheregeometry(1",{"_index":321,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spherical",{"_index":319,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["sphi",{"_index":1439,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["src/.../constants.ts",{"_index":2801,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../file.ts",{"_index":2803,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../phoenix",{"_index":2799,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../script",{"_index":2802,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/event",{"_index":2306,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["src/extras/configuration.ts",{"_index":474,"title":{},"body":{"interfaces/Configuration.html":{},"coverage.html":{}}}],["src/extras/cut.model.ts",{"_index":521,"title":{},"body":{"classes/Cut.html":{},"coverage.html":{}}}],["src/extras/cut.model.ts:18",{"_index":539,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:19",{"_index":541,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:20",{"_index":540,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:21",{"_index":542,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:30",{"_index":543,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:6",{"_index":538,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:8",{"_index":532,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/preset",{"_index":1524,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{}}}],["src/helpers/constants.ts",{"_index":2715,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/file.ts",{"_index":2717,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/pretty",{"_index":1542,"title":{},"body":{"classes/PrettySymbols.html":{},"coverage.html":{}}}],["src/helpers/rk",{"_index":1601,"title":{},"body":{"classes/RKHelper.html":{},"coverage.html":{}}}],["src/helpers/runge",{"_index":770,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["src/info",{"_index":885,"title":{},"body":{"classes/InfoLogger.html":{},"coverage.html":{}}}],["src/loaders/cms",{"_index":2721,"title":{},"body":{"coverage.html":{}}}],["src/loaders/event",{"_index":630,"title":{},"body":{"interfaces/EventDataLoader.html":{},"coverage.html":{}}}],["src/loaders/jivexml",{"_index":2724,"title":{},"body":{"coverage.html":{}}}],["src/loaders/jsroot",{"_index":2726,"title":{},"body":{"coverage.html":{}}}],["src/loaders/lhcb",{"_index":910,"title":{},"body":{"classes/LHCbLoader.html":{},"coverage.html":{}}}],["src/loaders/objects/cms",{"_index":395,"title":{},"body":{"classes/CMSObjects.html":{},"coverage.html":{}}}],["src/loaders/objects/phoenix",{"_index":1392,"title":{},"body":{"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["src/loaders/phoenix",{"_index":1062,"title":{},"body":{"classes/PhoenixLoader.html":{},"coverage.html":{}}}],["src/loaders/script",{"_index":1772,"title":{},"body":{"classes/ScriptLoader.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/loaders/trackml",{"_index":2057,"title":{},"body":{"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["src/managers/loading",{"_index":998,"title":{},"body":{"classes/LoadingManager.html":{},"coverage.html":{}}}],["src/managers/state",{"_index":2003,"title":{},"body":{"classes/StateManager.html":{},"coverage.html":{}}}],["src/managers/url",{"_index":2089,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{}}}],["src/three/animations",{"_index":6,"title":{},"body":{"classes/AnimationsManager.html":{},"coverage.html":{}}}],["src/three/controls",{"_index":2736,"title":{},"body":{"coverage.html":{}}}],["src/three/effects",{"_index":549,"title":{},"body":{"classes/EffectsManager.html":{},"coverage.html":{}}}],["src/three/export",{"_index":705,"title":{},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["src/three/import",{"_index":2740,"title":{},"body":{"coverage.html":{}}}],["src/three/index.ts",{"_index":2742,"title":{},"body":{"coverage.html":{}}}],["src/three/renderer",{"_index":1652,"title":{},"body":{"classes/RendererManager.html":{},"coverage.html":{}}}],["src/three/scene",{"_index":2744,"title":{},"body":{"coverage.html":{}}}],["src/three/selection",{"_index":1840,"title":{},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["src/three/vr",{"_index":2156,"title":{},"body":{"classes/VRManager.html":{},"coverage.html":{}}}],["src/ui/index.ts",{"_index":2746,"title":{},"body":{"coverage.html":{}}}],["src/ui/phoenix",{"_index":1231,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["standalone",{"_index":2778,"title":{},"body":{"index.html":{}}}],["start",{"_index":95,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["start.chain(startxaxis",{"_index":191,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["start.start",{"_index":195,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["startclone.delay(500",{"_index":190,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["startdir",{"_index":865,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["startdir.normalize",{"_index":1647,"title":{},"body":{"classes/RKHelper.html":{}}}],["started",{"_index":2192,"title":{"changelog.html":{},"index.html":{}},"body":{"classes/VRManager.html":{}}}],["starting",{"_index":612,"title":{},"body":{"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["startpos",{"_index":94,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["startpos.y",{"_index":1644,"title":{},"body":{"classes/RKHelper.html":{}}}],["startpos.z",{"_index":1645,"title":{},"body":{"classes/RKHelper.html":{}}}],["startpos[2",{"_index":177,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["starts",{"_index":78,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{}}}],["startxaxis",{"_index":178,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["startxaxis.chain(rotatestart",{"_index":192,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["state",{"_index":781,"title":{"classes/State.html":{}},"body":{"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["state.dir",{"_index":815,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.add",{"_index":856,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().cross(b_first).multiplyscalar(qop",{"_index":809,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.cross(b_first",{"_index":807,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.normalize",{"_index":861,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.p",{"_index":795,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos",{"_index":814,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos.add(state.dir.clone().multiplyscalar(fh)).add",{"_index":852,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.q",{"_index":793,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.stepsize",{"_index":846,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.unitc",{"_index":794,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["statemanager",{"_index":2002,"title":{"classes/StateManager.html":{}},"body":{"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["statemanager().seteventdisplay(this",{"_index":2325,"title":{},"body":{"interfaces/Window.html":{}}}],["statemanager.instance",{"_index":2027,"title":{},"body":{"classes/StateManager.html":{}}}],["statemanager.loadstatefromjson(jsonstate",{"_index":2131,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["statements",{"_index":2710,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":402,"title":{},"body":{"classes/CMSObjects.html":{},"classes/Field.html":{},"classes/LoadingManager.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["stats",{"_index":2151,"title":{},"body":{"classes/URLOptionsManager.html":{},"dependencies.html":{}}}],["step",{"_index":187,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["step(state",{"_index":784,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["stepdistance",{"_index":2206,"title":{},"body":{"classes/VRManager.html":{}}}],["steps",{"_index":863,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["stepsize",{"_index":1990,"title":{},"body":{"classes/State.html":{}}}],["stheta",{"_index":1443,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["still",{"_index":2221,"title":{},"body":{"classes/VRManager.html":{}}}],["stop",{"_index":2297,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["store",{"_index":2076,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["stored",{"_index":684,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["storing",{"_index":2313,"title":{},"body":{"interfaces/Window.html":{}}}],["string",{"_index":495,"title":{},"body":{"interfaces/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":686,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["structured",{"_index":2071,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["style.setproperty('display",{"_index":2150,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["sub",{"_index":2370,"title":{},"body":{"interfaces/Window.html":{}}}],["super",{"_index":987,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["support",{"_index":2580,"title":{},"body":{"changelog.html":{}}}],["svg",{"_index":1540,"title":{},"body":{"classes/PresetView.html":{}}}],["swap",{"_index":1720,"title":{},"body":{"classes/RendererManager.html":{}}}],["swapped",{"_index":1722,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers",{"_index":1672,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers(renderera",{"_index":1717,"title":{},"body":{"classes/RendererManager.html":{}}}],["switching",{"_index":513,"title":{},"body":{"interfaces/Configuration.html":{}}}],["symbol",{"_index":1566,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols",{"_index":1545,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{}}}],["symbols.ts",{"_index":1543,"title":{},"body":{"classes/PrettySymbols.html":{},"coverage.html":{}}}],["symbols.ts:24",{"_index":1565,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols.ts:37",{"_index":1561,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols.ts:6",{"_index":1559,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["synchronously",{"_index":1782,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["table",{"_index":2750,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2749,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":1800,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["take",{"_index":1464,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{}}}],["takes",{"_index":658,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["temp",{"_index":1763,"title":{},"body":{"classes/RendererManager.html":{}}}],["tempanchor",{"_index":2833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.click",{"_index":2839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.download",{"_index":2838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.href",{"_index":2836,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.remove",{"_index":2840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.style.display",{"_index":2835,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tesla",{"_index":775,"title":{},"body":{"classes/Field.html":{}}}],["tests",{"_index":2548,"title":{},"body":{"changelog.html":{}}}],["text",{"_index":1964,"title":{},"body":{"classes/SelectionManager.html":{},"changelog.html":{}}}],["text/javascript",{"_index":1826,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["text/plain",{"_index":742,"title":{},"body":{"classes/ExportManager.html":{}}}],["then((jsonstate",{"_index":2130,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["then((res",{"_index":2128,"title":{},"body":{"classes/URLOptionsManager.html":{},"index.html":{}}}],["then((session",{"_index":2237,"title":{},"body":{"classes/VRManager.html":{}}}],["theta",{"_index":1495,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["third",{"_index":825,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["this.activecamera",{"_index":2055,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activecamera.position.fromarray",{"_index":2048,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activecamera.position.toarray",{"_index":2038,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activeobject",{"_index":1921,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.activeobject.update(intersectedobject.uuid",{"_index":1948,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.addcollection",{"_index":1141,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype",{"_index":1103,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.hits",{"_index":1109,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.muons",{"_index":1120,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.photons",{"_index":1124,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addrenderer(overlayrenderer",{"_index":1756,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.addrenderer(renderer",{"_index":1727,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.animateevent",{"_index":157,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animateevent.bind(this",{"_index":158,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animateeventwithclipping",{"_index":159,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animateeventwithclipping.bind(this",{"_index":160,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animatewithcollision",{"_index":390,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animatewithcollision(this.animateevent",{"_index":389,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.antialiasing",{"_index":614,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.antialiasrender",{"_index":615,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.applyconfigstate(nodeconfig",{"_index":1372,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.applyconfigstate(this.configs[configslength",{"_index":1328,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.applyeventoptions",{"_index":2115,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.applyhidewidgetsoption",{"_index":2118,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.buildeventdatafromjson(event",{"_index":2363,"title":{},"body":{"interfaces/Window.html":{}}}],["this.buildgeometryfromparameters(parameters",{"_index":2471,"title":{},"body":{"interfaces/Window.html":{}}}],["this.callbacks",{"_index":1858,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.callbacks.push(callback",{"_index":1861,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.camera",{"_index":607,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["this.cameragroup",{"_index":2252,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.add(this.vrcamera",{"_index":2261,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.position.addscaledvector(direction",{"_index":2304,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.position.copy(this.vrcamera.position",{"_index":2260,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.position.toarray().join",{"_index":2293,"title":{},"body":{"classes/VRManager.html":{}}}],["this.camerapos",{"_index":1538,"title":{},"body":{"classes/PresetView.html":{}}}],["this.children",{"_index":1308,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.filter",{"_index":1376,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.indexof(child",{"_index":1317,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.push(child",{"_index":1315,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.splice(childindex",{"_index":1318,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.childrenactive",{"_index":1352,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.childrentogglestate[child.name",{"_index":1331,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.clippingangle",{"_index":2040,"title":{},"body":{"classes/StateManager.html":{}}}],["this.clippingenabled",{"_index":2039,"title":{},"body":{"classes/StateManager.html":{}}}],["this.collideparticles(1500",{"_index":386,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.composer",{"_index":605,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.addpass(outlinepass",{"_index":626,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.addpass(this.defaultrenderpass",{"_index":611,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.passes.indexof(pass",{"_index":628,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.passes.splice(passindex",{"_index":629,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.render",{"_index":619,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.renderer.render(scene",{"_index":620,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.configs",{"_index":1309,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configs.find",{"_index":1365,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configs.push(configoptions",{"_index":1327,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configuration",{"_index":2322,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.defaulteventfile?.eventfile",{"_index":2116,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.configuration.defaulteventfile?.eventtype",{"_index":2117,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.configuration.eventdataloader",{"_index":2137,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.configuration.eventdataloader.addlabeltoeventobject",{"_index":2503,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.buildeventdata",{"_index":2357,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.getcollection(collectionname",{"_index":2454,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.getcollections",{"_index":2455,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.geteventmetadata",{"_index":2460,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.geteventslist",{"_index":2346,"title":{},"body":{"interfaces/Window.html":{}}}],["this.containsobject(renderer",{"_index":1759,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.controller.getworlddirection(direction",{"_index":2302,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1",{"_index":2263,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.add(line.clone",{"_index":2284,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.addeventlistener",{"_index":2299,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.addeventlistener('selectend",{"_index":2300,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.position.toarray().join",{"_index":2291,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1?.removeeventlistener",{"_index":2247,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller2",{"_index":2266,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller2.add(line.clone",{"_index":2285,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip1",{"_index":2270,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip1.add",{"_index":2272,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip2",{"_index":2275,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip2.add",{"_index":2277,"title":{},"body":{"classes/VRManager.html":{}}}],["this.currentvrsession",{"_index":2245,"title":{},"body":{"classes/VRManager.html":{}}}],["this.currentvrsession?.end",{"_index":2253,"title":{},"body":{"classes/VRManager.html":{}}}],["this.currentvrsession?.removeeventlistener('end",{"_index":2246,"title":{},"body":{"classes/VRManager.html":{}}}],["this.data",{"_index":988,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.eventnumber",{"_index":991,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.particles",{"_index":996,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.runnumber",{"_index":993,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.defaultmaxvalue",{"_index":545,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultminvalue",{"_index":544,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultrenderpass",{"_index":609,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.defaultrenderpass.camera",{"_index":617,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.defaultrenderpass.scene",{"_index":618,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.disableselecting",{"_index":1923,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager",{"_index":1917,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.addoutlinepassforselection",{"_index":1919,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.antialiasing",{"_index":1933,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.composer.renderer.domelement",{"_index":1973,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.setantialiasing(false",{"_index":1934,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.setantialiasing(this.preselectionantialias",{"_index":1939,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsrender",{"_index":616,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.enableeventdisplayconsole",{"_index":2333,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enablekeyboardcontrols",{"_index":2335,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enableselecting",{"_index":1922,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.eventdata",{"_index":1085,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.caloclusters",{"_index":1169,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.caloclusters[clustercoll",{"_index":1170,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.tracks",{"_index":1182,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.tracks[trackcoll",{"_index":1183,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.tracks[trackcoll][trackindex",{"_index":1185,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata[eventdatapropkey",{"_index":1213,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata[eventdatatype",{"_index":1225,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdisplay",{"_index":2052,"title":{},"body":{"classes/StateManager.html":{},"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.buildeventdatafromjson(eventdata",{"_index":2141,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().addloadableitem('url_config",{"_index":2126,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().addloadableitem('url_event",{"_index":2134,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().itemloaded('url_config",{"_index":2133,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().itemloaded('url_event",{"_index":2147,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getuimanager().setclipping(true",{"_index":2051,"title":{},"body":{"classes/StateManager.html":{}}}],["this.eventdisplay.parsephoenixevents(res",{"_index":2142,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventsdata",{"_index":2345,"title":{},"body":{"interfaces/Window.html":{}}}],["this.eventsdata[eventkey",{"_index":2362,"title":{},"body":{"interfaces/Window.html":{}}}],["this.fixedoverlay",{"_index":1767,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getcameragroup().add(this.controller1",{"_index":2265,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controller2",{"_index":2268,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controllergrip1",{"_index":2274,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controllergrip2",{"_index":2279,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameratween(alongaxisposition",{"_index":179,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.getcameratween(startpos",{"_index":171,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.gethitspositions(obj.position",{"_index":290,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.getmainrenderer",{"_index":1747,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmainrenderer().setanimationloop(null",{"_index":1730,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmuon",{"_index":1121,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.getobjecttypecollections(object",{"_index":1136,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.getoverlayrenderer",{"_index":1733,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().domelement.hidden",{"_index":1734,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().render(scene",{"_index":1738,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.graphicslibrary",{"_index":1083,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.graphicslibrary.addeventdatatypegroup(typename",{"_index":1134,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.graphicslibrary.addgeometryfromparameters(parameters",{"_index":2432,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.addlabeltoobject(label",{"_index":2507,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animateclippingwithcollision(tweenduration",{"_index":2500,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animateeventwithcollision(tweenduration",{"_index":2499,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animatethroughevent",{"_index":2498,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.cleareventdata",{"_index":2356,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enablekeyboardcontrols",{"_index":2497,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enableselecting(enable",{"_index":2486,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.endvrsession",{"_index":2340,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportphoenixscene",{"_index":2402,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportscenetoobj",{"_index":2390,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.fixoverlayview(fixed",{"_index":2489,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.getactiveobjectid",{"_index":2490,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.getscenemanager().scalejets(value",{"_index":1097,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.graphicslibrary.highlightobject(uuid",{"_index":2494,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.init(configuration",{"_index":2323,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.initvrsession(onsessionended",{"_index":2337,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadgltfgeometry",{"_index":2411,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadjsongeometry",{"_index":2415,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadobjgeometry",{"_index":2383,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.lookatobject(uuid",{"_index":2493,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsegltfgeometry(input",{"_index":2407,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parseobjgeometry(content",{"_index":2387,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsephnxscene(phoenixscene.scene",{"_index":2400,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setanimationloop(uiloop",{"_index":2328,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setoverlayrenderer(overlaycanvas",{"_index":2475,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setselectedobjectdisplay(selectedobject",{"_index":2479,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.zoomto(zoomfactor",{"_index":2442,"title":{},"body":{"interfaces/Window.html":{}}}],["this.hitdata",{"_index":2080,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["this.icon",{"_index":1306,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["this.ignorelist",{"_index":1912,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ignorelist.includes(intersectedobject.type",{"_index":1942,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.infologger",{"_index":1916,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["this.infologger.add('exported",{"_index":2391,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologger.add(log",{"_index":1967,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.infologger.add(name",{"_index":2382,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologgerlist",{"_index":908,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.length",{"_index":904,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.pop",{"_index":906,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.unshift(label",{"_index":907,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.init(configuration",{"_index":2320,"title":{},"body":{"interfaces/Window.html":{}}}],["this.initrenderer(elementid",{"_index":1732,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.intersectobject(event",{"_index":1941,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.isfixedoverlay",{"_index":1737,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.isinit",{"_index":1911,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.labelsobject",{"_index":1230,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.labelsobject[eventdatatype",{"_index":1227,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.labelsobject[eventdatatype][collection",{"_index":1228,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.labelsobject[eventdatatype][collection][indexincollection",{"_index":1229,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.loaded",{"_index":1059,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.length",{"_index":1041,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.push(id",{"_index":1039,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.sort().join",{"_index":1043,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loadevent(eventkeys[0",{"_index":2347,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadgltfgeometry(sceneurl",{"_index":2467,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager",{"_index":1082,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem('root_json_geom",{"_index":2417,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`gltf_geom_${name",{"_index":2410,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`json_geom_${name",{"_index":2414,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`obj_geom_${name",{"_index":2380,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_gltf_${name",{"_index":2405,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_obj_${name",{"_index":2386,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_phnx_${name",{"_index":2399,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded('root_json_geom",{"_index":2423,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadjsongeometry",{"_index":2419,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadobjgeometry(filename",{"_index":2469,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadsceneconfiguration(phoenixscene.sceneconfiguration",{"_index":2398,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadstatefromjson(json.parse(data",{"_index":2034,"title":{},"body":{"classes/StateManager.html":{}}}],["this.mainrenderer",{"_index":1754,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.maxentries",{"_index":905,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.maxvalue",{"_index":547,"title":{},"body":{"classes/Cut.html":{}}}],["this.minvalue",{"_index":546,"title":{},"body":{"classes/Cut.html":{}}}],["this.moveindirection(direction",{"_index":2295,"title":{},"body":{"classes/VRManager.html":{}}}],["this.name",{"_index":1305,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["this.nodelevel",{"_index":1314,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.oncontrollerselectend",{"_index":2251,"title":{},"body":{"classes/VRManager.html":{}}}],["this.oncontrollerselectstart",{"_index":2249,"title":{},"body":{"classes/VRManager.html":{}}}],["this.ondisplayedeventchange.foreach((callback",{"_index":2358,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondisplayedeventchange.push(callback",{"_index":2457,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondocumentmousedown",{"_index":1929,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.oneventschange.foreach((callback",{"_index":2348,"title":{},"body":{"interfaces/Window.html":{}}}],["this.oneventschange.push(callback",{"_index":2459,"title":{},"body":{"interfaces/Window.html":{}}}],["this.onloadcallbacks",{"_index":1060,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onloadcallbacks.foreach((callback",{"_index":1044,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onloadcallbacks.push(callback",{"_index":1056,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onprogresscallbacks",{"_index":1054,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onprogresscallbacks.push(callback",{"_index":1057,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onsessionended",{"_index":2226,"title":{},"body":{"classes/VRManager.html":{}}}],["this.ontoggle",{"_index":1307,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontoggle?.(this.togglestate",{"_index":1361,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontoggle?.(value",{"_index":1329,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontouchdown",{"_index":1931,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ontouchmove",{"_index":1927,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ontouchmove(event.targettouches[0",{"_index":1971,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.onvrsessionended",{"_index":2243,"title":{},"body":{"classes/VRManager.html":{}}}],["this.onvrsessionstarted(session",{"_index":2238,"title":{},"body":{"classes/VRManager.html":{}}}],["this.outlinepass",{"_index":1918,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects",{"_index":1938,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects[0",{"_index":1943,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.overlayrenderer",{"_index":1757,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.parent",{"_index":1310,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.parent.removechild(this",{"_index":1319,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.particledata",{"_index":2081,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["this.phoenixmenuroot",{"_index":2028,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.configactive",{"_index":2046,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.getnodestate",{"_index":2036,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.loadstatefromjson(jsondata['phoenixmenu",{"_index":2045,"title":{},"body":{"classes/StateManager.html":{}}}],["this.preselectionantialias",{"_index":1932,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.progressitems",{"_index":1061,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.progressitems[itemname",{"_index":1046,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.render",{"_index":613,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.renderer",{"_index":2225,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr",{"_index":2255,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontroller(0",{"_index":2264,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontroller(1",{"_index":2267,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontrollergrip(0",{"_index":2271,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontrollergrip(1",{"_index":2276,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.setsession(session",{"_index":2244,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderermanager.getmainrenderer",{"_index":333,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.renderermanager.getmainrenderer().localclippingenabled",{"_index":351,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.renderermanager.setlocalclippingenabled(true",{"_index":335,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.renderers",{"_index":1758,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.indexof(renderer",{"_index":1761,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.length",{"_index":1765,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.push(renderer",{"_index":1760,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.splice(index",{"_index":1762,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers[0].localclippingenabled",{"_index":1766,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.reset",{"_index":1045,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.saveeventdataconfiguration(eventdata",{"_index":757,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savegeometriesconfiguration(geometries",{"_index":759,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savesceneconfig(eventdata",{"_index":744,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savestateasjson",{"_index":2032,"title":{},"body":{"classes/StateManager.html":{}}}],["this.scene",{"_index":608,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["this.scene.add(...particles",{"_index":367,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.scene.getobjectbyname(scenemanager.event_data_id",{"_index":200,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.scene.remove(...particles",{"_index":375,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.selectedobject",{"_index":1920,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.length",{"_index":1947,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.push",{"_index":1953,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.splice",{"_index":1946,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.name",{"_index":1944,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.setmainrenderer(renderer",{"_index":1728,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.setupvrcontrols",{"_index":2240,"title":{},"body":{"classes/VRManager.html":{}}}],["this.togglestate",{"_index":1330,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.toload",{"_index":1058,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.length",{"_index":1040,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.push(id",{"_index":1038,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.sort().join",{"_index":1042,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.truthdata",{"_index":2082,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["this.ui",{"_index":1084,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.ui.addcollection(typefolder",{"_index":1145,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.ui.addcollectionpm(typefolderpm",{"_index":1146,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.ui.addeventdatafolder",{"_index":2353,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatatypefolder(objecttype",{"_index":2447,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatatypefolder(typename",{"_index":1132,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.ui.addeventdatatypefolderpm(objecttype",{"_index":2448,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatatypefolderpm(typename",{"_index":1133,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.ui.addgeometry(geom",{"_index":2452,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addgeometry(name",{"_index":2381,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addlabel(labelid",{"_index":2506,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addlabelsfolder",{"_index":2354,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.enablekeyboardcontrols",{"_index":2496,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.init(configuration",{"_index":2324,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.removelabel(labelid",{"_index":2505,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.updateui",{"_index":2327,"title":{},"body":{"interfaces/Window.html":{}}}],["this.urloptions",{"_index":2113,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('config",{"_index":2125,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('file",{"_index":2121,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('type",{"_index":2122,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('type').tolowercase",{"_index":2123,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.uuid",{"_index":1857,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.vractive",{"_index":2241,"title":{},"body":{"classes/VRManager.html":{}}}],["this.vrcamera",{"_index":2254,"title":{},"body":{"classes/VRManager.html":{}}}],["this.vrcamera.name",{"_index":2258,"title":{},"body":{"classes/VRManager.html":{}}}],["this.vrcamera.position.addscaledvector(direction",{"_index":2305,"title":{},"body":{"classes/VRManager.html":{}}}],["this.vrcamera?.getworlddirection(direction",{"_index":2303,"title":{},"body":{"classes/VRManager.html":{}}}],["though",{"_index":1638,"title":{},"body":{"classes/RKHelper.html":{}}}],["thr",{"_index":2430,"title":{},"body":{"interfaces/Window.html":{}}}],["three",{"_index":153,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"dependencies.html":{}}}],["three,js",{"_index":1701,"title":{},"body":{"classes/RendererManager.html":{}}}],["three.extra.min.js",{"_index":1809,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["three.js",{"_index":15,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["three/examples/jsm/exporters/gltfexporter",{"_index":734,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/exporters/objexporter",{"_index":732,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/postprocessing/effectcomposer",{"_index":599,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/outlinepass",{"_index":603,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/outlinepass.js",{"_index":1908,"title":{},"body":{"classes/SelectionManager.html":{}}}],["three/examples/jsm/postprocessing/pass",{"_index":604,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/renderpass",{"_index":602,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/webxr/xrcontrollermodelfactory",{"_index":2216,"title":{},"body":{"classes/VRManager.html":{}}}],["three/index",{"_index":702,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["threejs",{"_index":1154,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{}}}],["threemanager",{"_index":653,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["threemanager(this.infologger",{"_index":2318,"title":{},"body":{"interfaces/Window.html":{}}}],["threeservice",{"_index":928,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["through",{"_index":93,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["time",{"_index":692,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["todo",{"_index":1087,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["toggle",{"_index":1258,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["toggles",{"_index":2480,"title":{},"body":{"interfaces/Window.html":{}}}],["toggleselfanddescendants",{"_index":1250,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggleselfanddescendants(value",{"_index":1295,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["togglestate",{"_index":1241,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggling",{"_index":1254,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["tojson",{"_index":2422,"title":{},"body":{"interfaces/Window.html":{}}}],["toload",{"_index":1003,"title":{},"body":{"classes/LoadingManager.html":{}}}],["top",{"_index":441,"title":{},"body":{"classes/CMSObjects.html":{}}}],["totalitems",{"_index":1051,"title":{},"body":{"classes/LoadingManager.html":{}}}],["totalprogress",{"_index":1047,"title":{},"body":{"classes/LoadingManager.html":{}}}],["touch",{"_index":1876,"title":{},"body":{"classes/SelectionManager.html":{}}}],["touchevent",{"_index":1969,"title":{},"body":{"classes/SelectionManager.html":{}}}],["towards",{"_index":2208,"title":{},"body":{"classes/VRManager.html":{}}}],["track",{"_index":216,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["track.children[0",{"_index":380,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["track.dparams",{"_index":1619,"title":{},"body":{"classes/RKHelper.html":{}}}],["track.pos",{"_index":1617,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackcoll",{"_index":1178,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackcolor",{"_index":379,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["trackid",{"_index":1176,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackid.split(':')[0",{"_index":1179,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackid.split(':')[1",{"_index":1181,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackindex",{"_index":1180,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["tracking",{"_index":2234,"title":{},"body":{"classes/VRManager.html":{}}}],["trackml",{"_index":2058,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["trackmlloader",{"_index":2056,"title":{"classes/TrackmlLoader.html":{}},"body":{"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["trackparams",{"_index":1184,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["trackparams.pos",{"_index":1424,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["tracks",{"_index":211,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{},"classes/TrackmlLoader.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["trackscollection",{"_index":1614,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollections",{"_index":1613,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollections[trackscollection",{"_index":1616,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollectionsevent",{"_index":1612,"title":{},"body":{"classes/RKHelper.html":{}}}],["transforming/changing",{"_index":1527,"title":{},"body":{"classes/PresetView.html":{}}}],["translation",{"_index":97,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{}}}],["transparent",{"_index":359,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["traverse",{"_index":206,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["traversed",{"_index":1892,"title":{},"body":{"classes/SelectionManager.html":{}}}],["tree",{"_index":1284,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["true",{"_index":301,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["truncate",{"_index":1251,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["truth",{"_index":2072,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["truthdata",{"_index":2061,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["truthy",{"_index":2068,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["try",{"_index":810,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["tryrungekuttastep",{"_index":812,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tryrungekuttastep(state.stepsize",{"_index":844,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tube",{"_index":2609,"title":{},"body":{"changelog.html":{}}}],["tubebuffergeometry",{"_index":141,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["tween",{"_index":66,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["tween.easing(easing",{"_index":168,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.easing(tween.easing.quartic.out).start",{"_index":311,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.easing.cubic.out",{"_index":172,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.js",{"_index":16,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.start",{"_index":346,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween",{"_index":233,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(animationclipplane).to",{"_index":344,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(animationsphere).to",{"_index":281,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(particle.material",{"_index":369,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(particle.position",{"_index":372,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(this.activecamera.position).to",{"_index":162,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tweenduration",{"_index":64,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["tweenjs/tween.js",{"_index":154,"title":{},"body":{"classes/AnimationsManager.html":{},"dependencies.html":{}}}],["tweens",{"_index":310,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["two",{"_index":113,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{}}}],["type",{"_index":41,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2797,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typefolder",{"_index":958,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["typefolderpm",{"_index":1098,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["typefolderpm.addconfig('slider",{"_index":1099,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["typename",{"_index":955,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["typeof",{"_index":1357,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["types",{"_index":1335,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typing",{"_index":2561,"title":{},"body":{"changelog.html":{}}}],["ui",{"_index":654,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["ui/index",{"_index":703,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["ui/phoenix",{"_index":516,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixLoader.html":{},"classes/StateManager.html":{}}}],["uiloop",{"_index":2326,"title":{},"body":{"interfaces/Window.html":{}}}],["uimanager",{"_index":655,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["uimanager(this.graphicslibrary",{"_index":2319,"title":{},"body":{"interfaces/Window.html":{}}}],["uiservice",{"_index":934,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["undefined",{"_index":1037,"title":{},"body":{"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["undefined/null",{"_index":1322,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["unique",{"_index":650,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["uniquely",{"_index":948,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["unit",{"_index":2001,"title":{},"body":{"classes/State.html":{},"classes/VRManager.html":{}}}],["unitc",{"_index":1991,"title":{},"body":{"classes/State.html":{}}}],["units",{"_index":791,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["unreal",{"_index":553,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["until",{"_index":873,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["up",{"_index":398,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["update",{"_index":851,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"changelog.html":{}}}],["updateanimationsphere",{"_index":284,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["updateanimationsphere.containspoint",{"_index":293,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["updateanimationsphere.containspoint(obj.position",{"_index":299,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["updated",{"_index":2223,"title":{},"body":{"classes/VRManager.html":{}}}],["updating",{"_index":246,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["url",{"_index":488,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["url.createobjecturl(blob",{"_index":2837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["url.indexof('.root",{"_index":2427,"title":{},"body":{"interfaces/Window.html":{}}}],["urloptions",{"_index":2090,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["urloptionsmanager",{"_index":2088,"title":{"classes/URLOptionsManager.html":{}},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["urloptionsmanager(this",{"_index":2330,"title":{},"body":{"interfaces/Window.html":{}}}],["urloptionsmanager.applyoptions",{"_index":2331,"title":{},"body":{"interfaces/Window.html":{}}}],["urlsearchparams",{"_index":2095,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["usage",{"_index":2552,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["use",{"_index":376,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RKHelper.html":{},"classes/ScriptLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":570,"title":{},"body":{"classes/EffectsManager.html":{},"classes/InfoLogger.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["user",{"_index":2829,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata",{"_index":2613,"title":{},"body":{"changelog.html":{}}}],["uses",{"_index":1621,"title":{},"body":{"classes/RKHelper.html":{},"index.html":{}}}],["using",{"_index":14,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["uuid",{"_index":1188,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["v1",{"_index":1447,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["v2",{"_index":1448,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["val",{"_index":1050,"title":{},"body":{"classes/LoadingManager.html":{},"classes/SelectionManager.html":{}}}],["val.pos.x",{"_index":1648,"title":{},"body":{"classes/RKHelper.html":{}}}],["val.pos.y",{"_index":1649,"title":{},"body":{"classes/RKHelper.html":{}}}],["val.pos.z",{"_index":1650,"title":{},"body":{"classes/RKHelper.html":{}}}],["value",{"_index":83,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1278,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/TrackmlLoader.html":{},"changelog.html":{}}}],["variable",{"_index":1801,"title":{},"body":{"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":2800,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["varilable",{"_index":1791,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["vector",{"_index":2286,"title":{},"body":{"classes/VRManager.html":{}}}],["vector2",{"_index":600,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["vector2(window.innerwidth",{"_index":621,"title":{},"body":{"classes/EffectsManager.html":{}}}],["vector3",{"_index":143,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["vector3().fromarray(hitposition",{"_index":294,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["vector3().fromarray(muonchamberparams[param",{"_index":424,"title":{},"body":{"classes/CMSObjects.html":{}}}],["vector3(0",{"_index":263,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["vector3(x",{"_index":1449,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["version",{"_index":1786,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{}}}],["vertex",{"_index":1410,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams",{"_index":1411,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.color",{"_index":1513,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.uuid",{"_index":1522,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.x",{"_index":1516,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.y",{"_index":1518,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertice",{"_index":325,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["vertices",{"_index":1131,"title":{},"body":{"classes/PhoenixLoader.html":{},"miscellaneous/variables.html":{}}}],["verticies",{"_index":324,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["view",{"_index":493,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["view.model",{"_index":514,"title":{},"body":{"interfaces/Configuration.html":{}}}],["view.model.ts",{"_index":1525,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{}}}],["view.model.ts:10",{"_index":1536,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:14",{"_index":1532,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:32",{"_index":1537,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:6",{"_index":1535,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:8",{"_index":1534,"title":{},"body":{"classes/PresetView.html":{}}}],["views",{"_index":512,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["visible",{"_index":274,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["void",{"_index":55,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["vr",{"_index":2157,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["vr_camera",{"_index":2259,"title":{},"body":{"classes/VRManager.html":{}}}],["vractive",{"_index":2170,"title":{},"body":{"classes/VRManager.html":{}}}],["vrcamera",{"_index":2171,"title":{},"body":{"classes/VRManager.html":{}}}],["vrmanager",{"_index":2155,"title":{"classes/VRManager.html":{}},"body":{"classes/VRManager.html":{},"coverage.html":{}}}],["vrmanager.session_type",{"_index":2236,"title":{},"body":{"classes/VRManager.html":{}}}],["wait",{"_index":1836,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["want",{"_index":1984,"title":{},"body":{"classes/SelectionManager.html":{}}}],["webglrenderer",{"_index":565,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["webglrenderers",{"_index":1691,"title":{},"body":{"classes/RendererManager.html":{}}}],["webpack",{"_index":2577,"title":{},"body":{"changelog.html":{}}}],["webxr",{"_index":2220,"title":{},"body":{"classes/VRManager.html":{}}}],["webxr.requestsession",{"_index":2235,"title":{},"body":{"classes/VRManager.html":{}}}],["whether",{"_index":486,"title":{},"body":{"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["whose",{"_index":1280,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["widgets",{"_index":2102,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["width",{"_index":1438,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["window",{"_index":2120,"title":{"interfaces/Window.html":{}},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["window.addeventlistener('resize",{"_index":1752,"title":{},"body":{"classes/RendererManager.html":{}}}],["window.eventdisplay",{"_index":2465,"title":{},"body":{"interfaces/Window.html":{}}}],["window.innerheight",{"_index":622,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["window.innerwidth",{"_index":1744,"title":{},"body":{"classes/RendererManager.html":{}}}],["window.location.href",{"_index":2112,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["wipe",{"_index":1641,"title":{},"body":{"classes/RKHelper.html":{}}}],["without",{"_index":212,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"changelog.html":{}}}],["work",{"_index":2222,"title":{},"body":{"classes/VRManager.html":{}}}],["workaround",{"_index":224,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["working",{"_index":2594,"title":{},"body":{"changelog.html":{}}}],["works",{"_index":2201,"title":{},"body":{"classes/VRManager.html":{}}}],["wrapper",{"_index":497,"title":{},"body":{"interfaces/Configuration.html":{},"classes/RendererManager.html":{}}}],["x",{"_index":163,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["x,y,z",{"_index":494,"title":{},"body":{"interfaces/Configuration.html":{}}}],["x1d6d8;2",{"_index":1551,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["xrcontrollermodelfactory",{"_index":2215,"title":{},"body":{"classes/VRManager.html":{}}}],["y",{"_index":165,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["yarn",{"_index":2767,"title":{},"body":{"index.html":{}}}],["yes",{"_index":68,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{}}}],["z",{"_index":119,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["z0",{"_index":1626,"title":{},"body":{"classes/RKHelper.html":{}}}],["zero",{"_index":2669,"title":{},"body":{"changelog.html":{}}}],["zoom",{"_index":2433,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["zoomfactor",{"_index":2438,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomtime",{"_index":2439,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomto(zoomfactor",{"_index":2441,"title":{},"body":{"interfaces/Window.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AnimationsManager.html":{"url":"classes/AnimationsManager.html","title":"class - AnimationsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnimationsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/animations-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing animation related operations using three.js and tween.js.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                animateClippingWithCollision\n                            \n                            \n                                    Public\n                                animateEvent\n                            \n                            \n                                    Public\n                                animateEventWithClipping\n                            \n                            \n                                    Public\n                                animateEventWithCollision\n                            \n                            \n                                    Public\n                                animateThroughEvent\n                            \n                            \n                                    Public\n                                animateWithCollision\n                            \n                            \n                                    Public\n                                collideParticles\n                            \n                            \n                                    Public\n                                getCameraTween\n                            \n                            \n                                    Private\n                                getHitsPositions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scene: Scene, activeCamera: Camera, rendererManager: RendererManager)\n                    \n                \n                        \n                            \n                                Defined in src/three/animations-manager.ts:25\n                            \n                        \n\n                \n                    \n                            Constructor for the animation manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scene\n                                                  \n                                                        \n                                                                    Scene\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Three.js scene containing all the objects and event data.\n\n                                                        \n                                                \n                                                \n                                                        activeCamera\n                                                  \n                                                        \n                                                                    Camera\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Currently active camera.\n\n                                                        \n                                                \n                                                \n                                                        rendererManager\n                                                  \n                                                        \n                                                                        RendererManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Manager for managing event display's renderer related functions.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateClippingWithCollision\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateClippingWithCollision(tweenDuration: number, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:497\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data\nusing clipping planes after particle collison.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateEvent(tweenDuration: number, onEnd?: () => void, onAnimationStart?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:142\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback when all animations have ended.\n\n                                    \n                                \n                                \n                                    onAnimationStart\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback when the first animation starts.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateEventWithClipping\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateEventWithClipping(tweenDuration: number, onEnd?: () => void, onAnimationStart?: () => void, clippingConstant: number)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:315\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data using clipping planes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                                \n                                    onAnimationStart\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Callback when the first animation starts.\n\n                                    \n                                \n                                \n                                    clippingConstant\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        11000\n                                    \n\n                                    \n                                        Constant for the clipping planes for distance from the origin.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateEventWithCollision\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateEventWithCollision(tweenDuration: number, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:487\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data with particle collison.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateThroughEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateThroughEvent(startPos: number[], tweenDuration: number, onAnimationEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:71\n                \n            \n\n\n            \n                \n                    Animate the camera through the event scene.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    startPos\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Start position of the translation animation.\n\n                                    \n                                \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of each tween in the translation animation.\n\n                                    \n                                \n                                \n                                    onAnimationEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback when the last animation ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateWithCollision\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateWithCollision(animationFunction: (tweenDuration: number,onEnd: function,onAnimationStart: function) => void, tweenDuration: number, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:448\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data with particle collison.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    animationFunction\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Animation function to call after collision.\n\n                                    \n                                \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            collideParticles\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    collideParticles(tweenDuration: number, particleSize: number, distanceFromOrigin: number, particleColor: Color, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:388\n                \n            \n\n\n            \n                \n                    Animate the collision of two particles.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Duration of the particle collision animation tween.\n\n                                    \n                                \n                                \n                                    particleSize\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        10\n                                    \n\n                                    \n                                        Size of the particles.\n\n                                    \n                                \n                                \n                                    distanceFromOrigin\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        5000\n                                    \n\n                                    \n                                        Distance of the particles (along z-axes) from the origin.\n\n                                    \n                                \n                                \n                                    particleColor\n                                    \n                                            Color\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        new Color(0xffffff)\n                                    \n\n                                    \n                                        Color of the particles.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Callback to call when the particle collision ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCameraTween\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraTween(pos: number[], duration: number, easing?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:48\n                \n            \n\n\n            \n                \n                    Get the camera tween for animating camera to a position.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    pos\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        End position of the camera tween.\n\n                                    \n                                \n                                \n                                    duration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1000\n                                    \n\n                                    \n                                        Duration of the tween.\n\n                                    \n                                \n                                \n                                    easing\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Animation easing of the tween if any.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Tween object of the camera animation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getHitsPositions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHitsPositions(positions: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:514\n                \n            \n\n\n            \n                \n                    Get the positions of hits in a multidimensional array\nfrom a single dimensional array.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    positions\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Positions of hits in a single dimensional array.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     [][]\n\n                    \n                    \n                        Positions of hits in a multidimensional array.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { SceneManager } from './scene-manager';\nimport {\n  TubeBufferGeometry,\n  BufferGeometry,\n  Vector3,\n  Color,\n  MeshBasicMaterial,\n  Mesh,\n  SphereBufferGeometry,\n  Sphere,\n  Object3D,\n  BufferAttribute,\n  Scene,\n  Camera,\n  SphereGeometry,\n  Plane,\n  Group,\n} from 'three';\nimport * as TWEEN from '@tweenjs/tween.js';\nimport { RendererManager } from './renderer-manager';\n\n/**\n * Manager for managing animation related operations using three.js and tween.js.\n */\nexport class AnimationsManager {\n  /**\n   * Constructor for the animation manager.\n   * @param scene Three.js scene containing all the objects and event data.\n   * @param activeCamera Currently active camera.\n   * @param rendererManager Manager for managing event display's renderer related functions.\n   */\n  constructor(\n    private scene: Scene,\n    private activeCamera: Camera,\n    private rendererManager: RendererManager\n  ) {\n    this.animateEvent = this.animateEvent.bind(this);\n    this.animateEventWithClipping = this.animateEventWithClipping.bind(this);\n  }\n\n  /**\n   * Get the camera tween for animating camera to a position.\n   * @param pos End position of the camera tween.\n   * @param duration Duration of the tween.\n   * @param easing Animation easing of the tween if any.\n   * @returns Tween object of the camera animation.\n   */\n  public getCameraTween(\n    pos: number[],\n    duration: number = 1000,\n    easing?: any\n  ): any {\n    const tween = new TWEEN.Tween(this.activeCamera.position).to(\n      { x: pos[0], y: pos[1], z: pos[2] },\n      duration\n    );\n\n    if (easing) {\n      tween.easing(easing);\n    }\n\n    return tween;\n  }\n\n  /**\n   * Animate the camera through the event scene.\n   * @param startPos Start position of the translation animation.\n   * @param tweenDuration Duration of each tween in the translation animation.\n   * @param onAnimationEnd Callback when the last animation ends.\n   */\n  public animateThroughEvent(\n    startPos: number[],\n    tweenDuration: number,\n    onAnimationEnd?: () => void\n  ) {\n    // Move to start\n    const start = this.getCameraTween(startPos, 1000, TWEEN.Easing.Cubic.Out);\n    // Move to position along the detector axis\n    const alongAxisPosition = [0, 0, startPos[2]];\n    const startXAxis = this.getCameraTween(alongAxisPosition, tweenDuration);\n\n    const radius = 500;\n    const numOfSteps = 24;\n    const angle = 3 * Math.PI;\n    const step = angle / numOfSteps;\n\n    let rotationPositions = [];\n    for (let i = 1; i  onAnimationEnd?.());\n    startClone.delay(500);\n\n    start.chain(startXAxis);\n    startXAxis.chain(rotateStart);\n    rotate.chain(end);\n    end.chain(startClone);\n\n    start.start();\n  }\n\n  /**\n   * Animate the propagation and generation of event data.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Callback when all animations have ended.\n   * @param onAnimationStart Callback when the first animation starts.\n   */\n  public animateEvent(\n    tweenDuration: number,\n    onEnd?: () => void,\n    onAnimationStart?: () => void\n  ) {\n    const extraAnimationSphereDuration = tweenDuration * 0.25;\n    tweenDuration *= 0.75;\n\n    const eventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    const animationSphere = new Sphere(new Vector3(), 0);\n    const objectsToAnimateWithSphere: {\n      eventObject: Object3D;\n      position: any;\n    }[] = [];\n\n    const allTweens = [];\n    // Traverse over all event data\n    eventData.traverse((eventObject: any) => {\n      if (eventObject.geometry) {\n        // Animation for extrapolating tracks without changing scale\n        if (eventObject.name === 'Track') {\n          // Check if geometry drawRange count exists\n          let geometryPosCount =\n            eventObject.geometry?.attributes?.position?.count;\n          if (geometryPosCount) {\n            // WORKAROUND\n            // Changing position count for TubeBufferGeometry because\n            // what we get is not the actual and it has Infinity drawRange count\n            if (eventObject.geometry instanceof TubeBufferGeometry) {\n              geometryPosCount *= 6;\n            }\n            if (eventObject.geometry instanceof BufferGeometry) {\n              const oldDrawRangeCount = eventObject.geometry.drawRange.count;\n              eventObject.geometry.setDrawRange(0, 0);\n              const eventObjectTween = new TWEEN.Tween(\n                eventObject.geometry.drawRange\n              ).to(\n                {\n                  count: geometryPosCount,\n                },\n                tweenDuration\n              );\n              eventObjectTween.onComplete(() => {\n                eventObject.geometry.drawRange.count = oldDrawRangeCount;\n              });\n              allTweens.push(eventObjectTween);\n            }\n          }\n        }\n        // Animation for scaling out objects with or without position\n        else if (eventObject.name === 'Jet') {\n          const scaleTween = new TWEEN.Tween({\n            x: 0.01,\n            y: 0.01,\n            z: 0.01,\n          }).to(\n            {\n              x: eventObject.scale.x,\n              y: eventObject.scale.y,\n              z: eventObject.scale.z,\n            },\n            tweenDuration\n          );\n          // Manually updating scale since we need to change position\n          scaleTween.onUpdate((updatedScale: Vector3) => {\n            const previousScale = eventObject.scale.x;\n            eventObject.scale.setScalar(updatedScale.x);\n            // Restoring to original position and then moving again with the current value\n            eventObject.position\n              .divideScalar(previousScale)\n              .multiplyScalar(updatedScale.x);\n          });\n          allTweens.push(scaleTween);\n        } else {\n          const hasPosition = !eventObject.position.equals(\n            new Vector3(0, 0, 0)\n          );\n          let position = hasPosition\n            ? eventObject.position\n            : eventObject.geometry.boundingSphere.center;\n\n          // Edit geometry for hits\n          if (eventObject.name === 'Hit') {\n            position = Array.from(\n              eventObject.geometry.attributes['position'].array\n            );\n            eventObject.geometry.deleteAttribute('position');\n            eventObject.geometry.computeBoundingSphere();\n          } else {\n            // Making the object invisible and will make visible\n            // once the animation sphere reaches the object\n            eventObject.visible = false;\n          }\n\n          objectsToAnimateWithSphere.push({\n            eventObject: eventObject,\n            position: position,\n          });\n        }\n      }\n    });\n\n    // Tween for the animation sphere\n    const animationSphereTween = new TWEEN.Tween(animationSphere).to(\n      { radius: 3000 },\n      tweenDuration\n    );\n\n    const onAnimationSphereUpdate = (updateAnimationSphere: Sphere) => {\n      objectsToAnimateWithSphere.forEach((obj) => {\n        if (obj.eventObject.name === 'Hit') {\n          const geometry = (obj.eventObject as any).geometry;\n\n          const hitsPositions = this.getHitsPositions(obj.position);\n          const reachedHits = hitsPositions.filter((hitPosition) =>\n            updateAnimationSphere.containsPoint(\n              new Vector3().fromArray(hitPosition)\n            )\n          );\n\n          if (reachedHits.length > 0) {\n            geometry.setAttribute(\n              'position',\n              new BufferAttribute(\n                new Float32Array([].concat(...reachedHits)),\n                3\n              )\n            );\n            geometry.computeBoundingSphere();\n          }\n        } else if (updateAnimationSphere.containsPoint(obj.position)) {\n          obj.eventObject.visible = true;\n        }\n      });\n    };\n\n    animationSphereTween.onUpdate(onAnimationSphereUpdate);\n\n    // Animation sphere tween after covering the tracks\n    const animationSphereTweenClone = new TWEEN.Tween(animationSphere).to(\n      { radius: 10000 },\n      extraAnimationSphereDuration\n    );\n    animationSphereTweenClone.onUpdate(onAnimationSphereUpdate);\n\n    animationSphereTween.chain(animationSphereTweenClone);\n\n    allTweens.push(animationSphereTween);\n\n    // Call onAnimationStart when the first tween starts\n    allTweens[0].onStart(() => onAnimationStart?.());\n\n    // Start all tweens\n    for (const tween of allTweens) {\n      tween.easing(TWEEN.Easing.Quartic.Out).start();\n    }\n\n    // Call onEnd when the last tween completes\n    animationSphereTweenClone.onComplete(() => {\n      // Restore all remaining event data items\n      onAnimationSphereUpdate(new Sphere(new Vector3(), Infinity));\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data using clipping planes.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   * @param onAnimationStart Callback when the first animation starts.\n   * @param clippingConstant Constant for the clipping planes for distance from the origin.\n   */\n  public animateEventWithClipping(\n    tweenDuration: number,\n    onEnd?: () => void,\n    onAnimationStart?: () => void,\n    clippingConstant: number = 11000\n  ) {\n    const allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    // Sphere to get spherical set of clipping planes from\n    const sphere = new SphereGeometry(1, 8, 8);\n    // Clipping planes for animation\n    const animationClipPlanes: Plane[] = [];\n\n    // Get clipping planes from the verticies of sphere\n    for (const vertice of sphere.vertices) {\n      animationClipPlanes.push(new Plane(vertice, 0));\n    }\n\n    // Save the previous clipping setting of the renderer\n    const prevLocalClipping = this.rendererManager.getMainRenderer()\n      .localClippingEnabled;\n    if (!prevLocalClipping) {\n      this.rendererManager.setLocalClippingEnabled(true);\n    }\n\n    // Apply clipping planes to all the event data objects' material\n    allEventData.traverse((eventObject: any) => {\n      if (eventObject.geometry && eventObject.material) {\n        eventObject.material.clippingPlanes = animationClipPlanes;\n      }\n    });\n\n    const allTweens = [];\n    // Create tweens for the animation clipping planes\n    for (const animationClipPlane of animationClipPlanes) {\n      animationClipPlane.constant = 0;\n      const tween = new TWEEN.Tween(animationClipPlane).to(\n        { constant: clippingConstant },\n        tweenDuration\n      );\n      allTweens.push(tween);\n    }\n\n    allTweens[0].onStart(() => onAnimationStart?.());\n\n    // Start all the tweens\n    for (const tween of allTweens) {\n      tween.start();\n    }\n\n    allTweens[allTweens.length - 1].onComplete(() => {\n      // Revert local clipping of the renderer\n      if (!prevLocalClipping) {\n        this.rendererManager.getMainRenderer().localClippingEnabled = prevLocalClipping /* false */;\n      }\n      // Remove the applied clipping planes from the event data objects\n      allEventData.traverse((eventObject: any) => {\n        if (eventObject.geometry && eventObject.material) {\n          eventObject.material.clippingPlanes = null;\n        }\n      });\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the collision of two particles.\n   * @param tweenDuration Duration of the particle collision animation tween.\n   * @param particleSize Size of the particles.\n   * @param distanceFromOrigin Distance of the particles (along z-axes) from the origin.\n   * @param particleColor Color of the particles.\n   * @param onEnd Callback to call when the particle collision ends.\n   */\n  public collideParticles(\n    tweenDuration: number,\n    particleSize: number = 10,\n    distanceFromOrigin: number = 5000,\n    particleColor: Color = new Color(0xffffff),\n    onEnd?: () => void\n  ) {\n    const particleGeometry = new SphereBufferGeometry(particleSize, 32, 32);\n    const particleMaterial = new MeshBasicMaterial({\n      color: particleColor,\n      transparent: true,\n      opacity: 0,\n    });\n\n    const particle1 = new Mesh(particleGeometry, particleMaterial);\n    const particle2 = particle1.clone();\n\n    particle1.position.setZ(distanceFromOrigin);\n    particle2.position.setZ(-distanceFromOrigin);\n\n    const particles = [particle1, particle2];\n\n    this.scene.add(...particles);\n\n    const particleTweens = [];\n\n    for (const particle of particles) {\n      new TWEEN.Tween(particle.material)\n        .to(\n          {\n            opacity: 1,\n          },\n          300\n        )\n        .start();\n\n      const particleToOrigin = new TWEEN.Tween(particle.position)\n        .to(\n          {\n            z: 0,\n          },\n          tweenDuration\n        )\n        .start();\n\n      particleTweens.push(particleToOrigin);\n    }\n\n    particleTweens[0].onComplete(() => {\n      this.scene.remove(...particles);\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param animationFunction Animation function to call after collision.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateWithCollision(\n    animationFunction: (\n      tweenDuration: number,\n      onEnd?: () => void,\n      onAnimationStart?: () => void\n    ) => void,\n    tweenDuration: number,\n    onEnd?: () => void\n  ) {\n    const allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    // Get the color of the first track to use for colliding particles\n    const track = allEventData.getObjectByName('Track');\n    let trackColor: Color;\n    if (track instanceof Group) {\n      trackColor = (track.children[0] as any)?.material?.color;\n    } else {\n      trackColor = (track as any)?.material.color;\n    }\n\n    // Hide event data to show particles collision\n    if (allEventData) {\n      allEventData.visible = false;\n    }\n\n    this.collideParticles(1500, 30, 5000, trackColor, () => {\n      animationFunction(tweenDuration, onEnd, () => {\n        if (allEventData) {\n          allEventData.visible = true;\n        }\n      });\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateEventWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.animateWithCollision(this.animateEvent, tweenDuration, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data\n   * using clipping planes after particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateClippingWithCollision(\n    tweenDuration: number,\n    onEnd?: () => void\n  ) {\n    this.animateWithCollision(\n      this.animateEventWithClipping,\n      tweenDuration,\n      onEnd\n    );\n  }\n\n  /**\n   * Get the positions of hits in a multidimensional array\n   * from a single dimensional array.\n   * @param positions Positions of hits in a single dimensional array.\n   * @returns Positions of hits in a multidimensional array.\n   */\n  private getHitsPositions(positions: number[]): number[][] {\n    const hitsPositions: number[][] = [];\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CMSObjects.html":{"url":"classes/CMSObjects.html","title":"class - CMSObjects","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CMSObjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/cms-objects.ts\n        \n\n            \n                Description\n            \n            \n                Physics objects that make up an event in CMS that are not a part of PhoenixObjects.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getMuonChamber\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getMuonChamber\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuonChamber(muonChamberParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/cms-objects.ts:27\n                \n            \n\n\n            \n                \n                    Process the Muon Chamber from the given parameters.\nand get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonChamberParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon Chamber.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon Chamber object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Object3D,\n  Vector3,\n  Geometry,\n  Face3,\n  Group,\n  Mesh,\n  MeshBasicMaterial,\n  EdgesGeometry,\n  LineBasicMaterial,\n  DoubleSide,\n  LineSegments,\n  BufferGeometry,\n} from 'three';\nimport { EVENT_DATA_TYPE_COLORS } from '../../helpers/constants';\n\n/**\n * Physics objects that make up an event in CMS that are not a part of {@link PhoenixObjects}.\n */\nexport class CMSObjects {\n  /**\n   * Process the Muon Chamber from the given parameters.\n   * and get it as a geometry.\n   * @param muonChamberParams Parameters of the Muon Chamber.\n   * @returns Muon Chamber object.\n   */\n  public static getMuonChamber(muonChamberParams: any): Object3D {\n    let faces = [];\n    let backs = [];\n\n    for (const param of Object.keys(muonChamberParams)) {\n      if (param.startsWith('front')) {\n        faces.push(new Vector3().fromArray(muonChamberParams[param]));\n      } else if (param.startsWith('back')) {\n        backs.push(new Vector3().fromArray(muonChamberParams[param]));\n      }\n    }\n\n    let box = new Geometry();\n    box.vertices = faces.concat(backs);\n\n    // front\n    box.faces.push(new Face3(0, 1, 2));\n    box.faces.push(new Face3(2, 3, 0));\n\n    // back\n    box.faces.push(new Face3(4, 5, 6));\n    box.faces.push(new Face3(6, 7, 4));\n\n    // top\n    box.faces.push(new Face3(4, 5, 1));\n    box.faces.push(new Face3(1, 0, 4));\n\n    // bottom\n    box.faces.push(new Face3(7, 6, 2));\n    box.faces.push(new Face3(2, 3, 7));\n\n    // left\n    box.faces.push(new Face3(0, 3, 7));\n    box.faces.push(new Face3(7, 4, 0));\n\n    // right\n    box.faces.push(new Face3(1, 5, 6));\n    box.faces.push(new Face3(6, 2, 1));\n\n    box.computeFaceNormals();\n    box.computeVertexNormals();\n\n    const boxBuffer = new BufferGeometry().fromGeometry(box);\n\n    const boxObject = new Mesh(\n      boxBuffer,\n      new MeshBasicMaterial({\n        color: muonChamberParams.color ?? EVENT_DATA_TYPE_COLORS.MuonChambers,\n        transparent: true,\n        opacity: 0.1,\n        side: DoubleSide,\n      })\n    );\n\n    boxObject.userData = Object.assign({}, muonChamberParams);\n    boxObject.name = 'MuonChamber';\n\n    // These are the lines along the box edges\n\n    const boxEdges = new EdgesGeometry(boxBuffer);\n    const lineBoxObject = new LineSegments(\n      boxEdges,\n      new LineBasicMaterial({\n        color: 0xffffff,\n        transparent: true,\n        opacity: 0.7,\n      })\n    );\n\n    const muonChamber = new Group();\n    muonChamber.add(boxObject);\n    muonChamber.add(lineBoxObject);\n\n    muonChamberParams.uuid = boxObject.uuid;\n\n    return muonChamber;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Configuration.html":{"url":"interfaces/Configuration.html","title":"interface - Configuration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Configuration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extras/configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration of the event display.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        allowUrlOptions\n                                \n                                \n                                            Optional\n                                        defaultEventFile\n                                \n                                \n                                            Optional\n                                        defaultView\n                                \n                                \n                                            Optional\n                                        elementId\n                                \n                                \n                                            Optional\n                                        enableDatGUIMenu\n                                \n                                \n                                            Optional\n                                        eventDataLoader\n                                \n                                \n                                            Optional\n                                        phoenixMenuRoot\n                                \n                                \n                                            Optional\n                                        presetViews\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowUrlOptions\n                                    \n                                \n                                \n                                    \n                                        allowUrlOptions:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to allow URL options or not (true by default). \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultEventFile\n                                    \n                                \n                                \n                                    \n                                        defaultEventFile:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default event to load when none given in URL. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultView\n                                    \n                                \n                                \n                                    \n                                        defaultView:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default view [x,y,z]. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elementId\n                                    \n                                \n                                \n                                    \n                                        elementId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    ID of the wrapper element. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableDatGUIMenu\n                                    \n                                \n                                \n                                    \n                                        enableDatGUIMenu:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to enable dat.GUI menu or not. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventDataLoader\n                                    \n                                \n                                \n                                    \n                                        eventDataLoader:         EventDataLoader\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EventDataLoader\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Event data loader responsible for processing and loading event data. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phoenixMenuRoot\n                                    \n                                \n                                \n                                    \n                                        phoenixMenuRoot:         PhoenixMenuNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PhoenixMenuNode\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Root node of the phoenix menu. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        presetViews\n                                    \n                                \n                                \n                                    \n                                        presetViews:         PresetView[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PresetView[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Preset views for switching event display camera. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { PresetView } from './preset-view.model';\nimport { EventDataLoader } from '../loaders/event-data-loader';\nimport { PhoenixMenuNode } from '../ui/phoenix-menu/phoenix-menu-node';\n\n/**\n * Configuration of the event display.\n */\nexport interface Configuration {\n  /** Default view [x,y,z]. */\n  defaultView?: number[];\n  /** Preset views for switching event display camera. */\n  presetViews?: PresetView[];\n  /** Event data loader responsible for processing and loading event data. */\n  eventDataLoader?: EventDataLoader;\n  /** Root node of the phoenix menu. */\n  phoenixMenuRoot?: PhoenixMenuNode;\n  /** Whether to enable dat.GUI menu or not. */\n  enableDatGUIMenu?: boolean;\n  /** ID of the wrapper element. */\n  elementId?: string;\n  /** Default event to load when none given in URL. */\n  defaultEventFile?: { eventFile: string; eventType: string };\n  /** Whether to allow URL options or not (true by default). */\n  allowUrlOptions?: boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Cut.html":{"url":"classes/Cut.html","title":"class - Cut","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Cut\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extras/cut.model.ts\n        \n\n            \n                Description\n            \n            \n                Cut for specifying filters on event data attribute.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                defaultMaxValue\n                            \n                            \n                                    Private\n                                defaultMinValue\n                            \n                            \n                                    Public\n                                field\n                            \n                            \n                                    Public\n                                maxValue\n                            \n                            \n                                    Public\n                                minValue\n                            \n                            \n                                    Public\n                                step\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: string, minValue: number, maxValue: number, step: number)\n                    \n                \n                        \n                            \n                                Defined in src/extras/cut.model.ts:8\n                            \n                        \n\n                \n                    \n                            Create the cut to filter an event data attribute.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the event data attribute to be filtered.\n\n                                                        \n                                                \n                                                \n                                                        minValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Minimum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                                \n                                                        maxValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Maximum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                                \n                                                        step\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Step for each value change.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            defaultMaxValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:8\n                            \n                        \n\n                \n                    \n                        Default maximum allowed value of the event data attribute. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            defaultMinValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:6\n                            \n                        \n\n                \n                    \n                        Default minimum allowed value of the event data attribute. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            field\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:18\n                            \n                        \n\n                \n                    \n                        Name of the event data attribute to be filtered.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            maxValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:20\n                            \n                        \n\n                \n                    \n                        Maximum allowed value of the event data attribute.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            minValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:19\n                            \n                        \n\n                \n                    \n                        Minimum allowed value of the event data attribute.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            step\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:21\n                            \n                        \n\n                \n                    \n                        Step for each value change.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/extras/cut.model.ts:30\n                \n            \n\n\n            \n                \n                    Reset the minimum and maximum value of the cut to default.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Cut {\n  /** Default minimum allowed value of the event data attribute. */\n  private defaultMinValue: number;\n  /** Default maximum allowed value of the event data attribute. */\n  private defaultMaxValue: number;\n\n  /**\n   * Create the cut to filter an event data attribute.\n   * @param field Name of the event data attribute to be filtered.\n   * @param minValue Minimum allowed value of the event data attribute.\n   * @param maxValue Maximum allowed value of the event data attribute.\n   * @param step Step for each value change.\n   */\n  constructor(\n    public field: string,\n    public minValue: number,\n    public maxValue: number,\n    public step: number = 1\n  ) {\n    this.defaultMinValue = minValue;\n    this.defaultMaxValue = maxValue;\n  }\n\n  /**\n   * Reset the minimum and maximum value of the cut to default.\n   */\n  reset() {\n    this.minValue = this.defaultMinValue;\n    this.maxValue = this.defaultMaxValue;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EffectsManager.html":{"url":"classes/EffectsManager.html","title":"class - EffectsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EffectsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/effects-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing three.js event display effects like outline pass and unreal bloom.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                antialiasing\n                            \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Public\n                                composer\n                            \n                            \n                                    Private\n                                defaultRenderPass\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Private\n                                scene\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addOutlinePassForSelection\n                            \n                            \n                                    Private\n                                antialiasRender\n                            \n                            \n                                    Private\n                                effectsRender\n                            \n                            \n                                    Public\n                                removePass\n                            \n                            \n                                    Public\n                                setAntialiasing\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(camera: Camera, scene: Scene, renderer: WebGLRenderer)\n                    \n                \n                        \n                            \n                                Defined in src/three/effects-manager.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for the effects manager which manages effects and three.js passes.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        camera\n                                                  \n                                                        \n                                                                    Camera\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The camera inside the scene.\n\n                                                        \n                                                \n                                                \n                                                        scene\n                                                  \n                                                        \n                                                                    Scene\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The default scene used for event display.\n\n                                                        \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    WebGLRenderer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The main renderer used by the event display.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            antialiasing\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/three/effects-manager.ts:20\n                            \n                        \n\n                \n                    \n                        Whether antialiasing is enabled or disabled. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            camera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/effects-manager.ts:14\n                            \n                        \n\n                \n                    \n                        The camera inside the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            composer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EffectComposer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/effects-manager.ts:12\n                            \n                        \n\n                \n                    \n                        Effect composer for effect passes. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            defaultRenderPass\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RenderPass\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/effects-manager.ts:18\n                            \n                        \n\n                \n                    \n                        Render pass for rendering the default scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            render\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/effects-manager.ts:23\n                            \n                        \n\n                \n                    \n                        Render function with (normal render) or without antialias (effects render). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            scene\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Scene\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/effects-manager.ts:16\n                            \n                        \n\n                \n                    \n                        The default scene used for event display. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addOutlinePassForSelection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addOutlinePassForSelection()\n                \n            \n\n\n            \n                \n                    Defined in src/three/effects-manager.ts:69\n                \n            \n\n\n            \n                \n                    Initialize the outline pass for highlighting hovered over event display elements.\n\n\n                    \n                    \n                    \n                        Returns :     OutlinePass\n\n                    \n                    \n                        OutlinePass for highlighting hovered over event display elements.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            antialiasRender\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    antialiasRender(scene: Scene, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/three/effects-manager.ts:61\n                \n            \n\n\n            \n                \n                    Render for antialias without the effects composer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The default scene used for event display.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            effectsRender\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    effectsRender(scene: Scene, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/three/effects-manager.ts:48\n                \n            \n\n\n            \n                \n                    Render the effects composer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The default scene used for event display.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removePass\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removePass(pass: Pass)\n                \n            \n\n\n            \n                \n                    Defined in src/three/effects-manager.ts:88\n                \n            \n\n\n            \n                \n                    Remove a pass from the effect composer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pass\n                                    \n                                            Pass\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Effect pass to be removed from the effect composer.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setAntialiasing\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setAntialiasing(antialias: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/effects-manager.ts:97\n                \n            \n\n\n            \n                \n                    Set the antialiasing of renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    antialias\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether antialiasing is to enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { Camera, Scene, WebGLRenderer, Vector2, NormalBlending } from 'three';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass';\nimport { Pass } from 'three/examples/jsm/postprocessing/Pass';\n\n/**\n * Manager for managing three.js event display effects like outline pass and unreal bloom.\n */\nexport class EffectsManager {\n  /** Effect composer for effect passes. */\n  public composer: EffectComposer;\n  /** The camera inside the scene. */\n  private camera: Camera;\n  /** The default scene used for event display. */\n  private scene: Scene;\n  /** Render pass for rendering the default scene. */\n  private defaultRenderPass: RenderPass;\n  /** Whether antialiasing is enabled or disabled. */\n  public antialiasing: boolean = true;\n\n  /** Render function with (normal render) or without antialias (effects render). */\n  public render: (scene: Scene, camera: Camera) => void;\n\n  /**\n   * Constructor for the effects manager which manages effects and three.js passes.\n   * @param camera The camera inside the scene.\n   * @param scene The default scene used for event display.\n   * @param renderer The main renderer used by the event display.\n   */\n  constructor(camera: Camera, scene: Scene, renderer: WebGLRenderer) {\n    this.composer = new EffectComposer(renderer);\n    this.camera = camera;\n    this.scene = scene;\n\n    this.defaultRenderPass = new RenderPass(this.scene, this.camera);\n    this.composer.addPass(this.defaultRenderPass);\n\n    // Set the starting render function\n    this.render = this.antialiasing ? this.antialiasRender : this.effectsRender;\n  }\n\n  /**\n   * Render the effects composer.\n   * @param scene The default scene used for event display.\n   * @param camera The camera inside the scene.\n   */\n  private effectsRender(scene: Scene, camera: Camera) {\n    if (this.composer) {\n      this.defaultRenderPass.camera = camera;\n      this.defaultRenderPass.scene = scene;\n      this.composer.render();\n    }\n  }\n\n  /**\n   * Render for antialias without the effects composer.\n   * @param scene The default scene used for event display.\n   * @param camera The camera inside the scene.\n   */\n  private antialiasRender(scene: Scene, camera: Camera) {\n    this.composer.renderer.render(scene, camera);\n  }\n\n  /**\n   * Initialize the outline pass for highlighting hovered over event display elements.\n   * @returns OutlinePass for highlighting hovered over event display elements.\n   */\n  public addOutlinePassForSelection(): OutlinePass {\n    const outlinePass = new OutlinePass(\n      new Vector2(window.innerWidth, window.innerHeight),\n      this.scene,\n      this.camera\n    );\n    outlinePass.overlayMaterial.blending = NormalBlending;\n    outlinePass.visibleEdgeColor.set(0xffff66);\n    outlinePass.visibleEdgeColor.set(0xdf5330);\n\n    this.composer.addPass(outlinePass);\n\n    return outlinePass;\n  }\n\n  /**\n   * Remove a pass from the effect composer.\n   * @param pass Effect pass to be removed from the effect composer.\n   */\n  public removePass(pass: Pass) {\n    const passIndex = this.composer.passes.indexOf(pass);\n    this.composer.passes.splice(passIndex, 1);\n  }\n\n  /**\n   * Set the antialiasing of renderer.\n   * @param antialias Whether antialiasing is to enabled or disabled.\n   */\n  public setAntialiasing(antialias: boolean) {\n    this.antialiasing = antialias;\n    this.render = this.antialiasing ? this.antialiasRender : this.effectsRender;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EventDataLoader.html":{"url":"interfaces/EventDataLoader.html","title":"interface - EventDataLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EventDataLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/event-data-loader.ts\n        \n\n            \n                Description\n            \n            \n                Event data loader for implementing different event data loaders.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    addLabelToEventObject\n                                \n                                \n                                    buildEventData\n                                \n                                \n                                    getCollection\n                                \n                                \n                                    getCollections\n                                \n                                \n                                    getEventMetadata\n                                \n                                \n                                    getEventsList\n                                \n                                \n                                    getLabelsObject\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addLabelToEventObject\n                        \n                        \n                    \n                \n            \n            \n                \naddLabelToEventObject(label: string, collection: string, indexInCollection: number)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:57\n                \n            \n\n\n            \n                \n                    Add label of event object to the labels object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to add to the event object.\n\n                                    \n                                \n                                \n                                    collection\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Collection the event object is a part of.\n\n                                    \n                                \n                                \n                                    indexInCollection\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event object's index in collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A unique label ID string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \nbuildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:17\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Logger for logging event display data..\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \ngetCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:42\n                \n            \n\n\n            \n                \n                    Get all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Key of the collection that will be retrieved.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Object containing all physics objects from the desired collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \ngetCollections()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:35\n                \n            \n\n\n            \n                \n                    Get the different collections for the current stored event.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of strings, each representing a collection of the event displayed.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:48\n                \n            \n\n\n            \n                \n                    Get metadata associated to the displayed event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the displayed event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:29\n                \n            \n\n\n            \n                \n                    Takes an object containing multiple events and returns the keys of these events.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object that contains the different events.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of keys of the different events.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getLabelsObject\n                        \n                        \n                    \n                \n            \n            \n                \ngetLabelsObject()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:67\n                \n            \n\n\n            \n                \n                    Get the object containing labels.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The labels object.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ThreeManager } from '../three/index';\nimport { UIManager } from '../ui/index';\nimport { InfoLogger } from '../info-logger';\n\n/**\n * Event data loader for implementing different event data loaders.\n */\nexport interface EventDataLoader {\n  /**\n   * Takes an object that represents ONE event and takes care of adding\n   * the different objects to the graphic library and the UI controls.\n   * @param eventData Object representing the event.\n   * @param graphicsLibrary Manager containing functionality to draw the 3D objects.\n   * @param ui Manager for showing menus and controls to manipulate the geometries.\n   * @param infoLogger Logger for logging event display data..\n   */\n  buildEventData(\n    eventData: any,\n    graphicsLibrary: ThreeManager,\n    ui: UIManager,\n    infoLogger: InfoLogger\n  ): void;\n\n  /**\n   * Takes an object containing multiple events and returns the keys of these events.\n   * @param eventsData Object that contains the different events.\n   * @returns List of keys of the different events.\n   */\n  getEventsList(eventsData: any): string[];\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  getCollections(): string[];\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  getCollection(collectionName: string): any;\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  getEventMetadata(): any[];\n\n  /**\n   * Add label of event object to the labels object.\n   * @param label Label to add to the event object.\n   * @param collection Collection the event object is a part of.\n   * @param indexInCollection Event object's index in collection.\n   * @returns A unique label ID string.\n   */\n  addLabelToEventObject(\n    label: string,\n    collection: string,\n    indexInCollection: number\n  ): string;\n\n  /**\n   * Get the object containing labels.\n   * @returns The labels object.\n   */\n  getLabelsObject(): object;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExportManager.html":{"url":"classes/ExportManager.html","title":"class - ExportManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExportManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/export-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's export related functionality.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                exportPhoenixScene\n                            \n                            \n                                    Public\n                                exportSceneToOBJ\n                            \n                            \n                                    Private\n                                saveEventDataConfiguration\n                            \n                            \n                                    Private\n                                saveGeometriesConfiguration\n                            \n                            \n                                    Private\n                                saveSceneConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            exportPhoenixScene\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exportPhoenixScene(scene: Scene, eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:27\n                \n            \n\n\n            \n                \n                    Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene to be exported.\n\n                                    \n                                \n                                \n                                    eventData\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded event data.\n\n                                    \n                                \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            exportSceneToOBJ\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exportSceneToOBJ(scene: Scene)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:14\n                \n            \n\n\n            \n                \n                    Exports scene to OBJ file format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene to be exported.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveEventDataConfiguration\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveEventDataConfiguration(eventData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:66\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveGeometriesConfiguration\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveGeometriesConfiguration(geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:85\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded geometries.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveSceneConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveSceneConfig(eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:52\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded scene including event data and geometries.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Curently loaded event data.\n\n                                    \n                                \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { eventData: {}; geometries: {}; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { OBJExporter } from 'three/examples/jsm/exporters/OBJExporter';\nimport { Scene, Object3D } from 'three';\nimport { GLTFExporter } from 'three/examples/jsm/exporters/GLTFExporter';\nimport { saveFile } from '../helpers/file';\n\n/**\n * Manager for managing event display's export related functionality.\n */\nexport class ExportManager {\n  /**\n   * Exports scene to OBJ file format.\n   * @param scene The scene to be exported.\n   */\n  public exportSceneToOBJ(scene: Scene) {\n    // Instantiate a exporter\n    const exporter = new OBJExporter();\n    const result = exporter.parse(scene);\n    saveFile(result, 'phoenix-obj.obj', 'text/plain');\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   * @param scene The scene to be exported.\n   * @param eventData Currently loaded event data.\n   * @param geometries Currently loaded geometries.\n   */\n  public exportPhoenixScene(\n    scene: Scene,\n    eventData: Object3D,\n    geometries: Object3D\n  ) {\n    const exporter = new GLTFExporter();\n\n    const sceneConfig = this.saveSceneConfig(eventData, geometries);\n    // Parse the input and generate the glTF output\n    exporter.parse(\n      scene,\n      (result) => {\n        const jsonResult = { sceneConfiguration: sceneConfig, scene: result };\n        const output = JSON.stringify(jsonResult, null, 2);\n        saveFile(output, 'phoenix-scene.phnx', 'text/plain');\n      },\n      null\n    );\n  }\n\n  /**\n   * Save the configuration of the currently loaded scene including event data and geometries.\n   * @param eventData Curently loaded event data.\n   * @param geometries Currently loaded geometries.\n   */\n  private saveSceneConfig(eventData: Object3D, geometries: Object3D) {\n    const eventDataConfig = this.saveEventDataConfiguration(eventData);\n    const geometriesConfig = this.saveGeometriesConfiguration(geometries);\n    const sceneConfig = {\n      eventData: eventDataConfig,\n      geometries: geometriesConfig,\n    };\n    return sceneConfig;\n  }\n\n  /**\n   * Save the configuration of the currently loaded event data.\n   * @param eventData Currently loaded event data.\n   */\n  private saveEventDataConfiguration(eventData: any) {\n    const eventDataConfig = {};\n    for (const objectType of eventData.children) {\n      if (objectType.name) {\n        eventDataConfig[objectType.name] = [];\n        for (const collection of objectType.children) {\n          if (collection.name) {\n            eventDataConfig[objectType.name].push(collection.name);\n          }\n        }\n      }\n    }\n    return eventDataConfig;\n  }\n\n  /**\n   * Save the configuration of the currently loaded geometries.\n   * @param geometries Currently loaded geometries.\n   */\n  private saveGeometriesConfiguration(geometries: Object3D) {\n    const geometriesConfig = [];\n    geometries.children.forEach((object) => {\n      if (object.name !== 'EventData') {\n        geometriesConfig.push(object.name);\n      }\n    });\n    return geometriesConfig;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Field.html":{"url":"classes/Field.html","title":"class - Field","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n            \n                Description\n            \n            \n                Default class to define the field.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(field: Vector3)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:192\n                \n            \n\n\n            \n                \n                    Returns field as a Vector3 in Tesla.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Vector3\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(half_h))\n        .add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir\n        .clone()\n        .add(k1.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir\n        .clone()\n        .add(k2.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(h))\n        .add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir\n        .clone()\n        .add(k3.clone().multiplyScalar(h))\n        .cross(B_last)\n        .multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return (\n        h *\n        (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z))\n      );\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    let fh: number = state.stepSize;\n    let fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(\n      k1\n        .clone()\n        .add(k2)\n        .add(k3)\n        .multiplyScalar(fh2 / 6)\n    );\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(\n      k1\n        .clone()\n        .add(k2.clone().multiplyScalar(2))\n        .add(k3.clone().multiplyScalar(2))\n        .add(k4)\n        .multiplyScalar(fh / 6)\n    );\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3,\n    startDir: Vector3,\n    p: number,\n    q: number,\n    mss: number = -1,\n    plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3; dir: Vector3 }[] {\n    let rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    let result: { pos: Vector3; dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InfoLogger.html":{"url":"classes/InfoLogger.html","title":"class - InfoLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InfoLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/info-logger.ts\n        \n\n            \n                Description\n            \n            \n                Logger for logging event display data\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                infoLoggerList\n                            \n                            \n                                    Private\n                                maxEntries\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                getInfoLoggerList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            infoLoggerList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/info-logger.ts:6\n                            \n                        \n\n                \n                    \n                        List that contains all the info logs \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            maxEntries\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n                        \n                            \n                                    Defined in src/info-logger.ts:8\n                            \n                        \n\n                \n                    \n                        Max entries to be shown inside the information panel \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(data: string, label?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/info-logger.ts:15\n                \n            \n\n\n            \n                \n                    Add an entry to the info logger\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Data of the info log\n\n                                    \n                                \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Label of the info log\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getInfoLoggerList\n                        \n                        \n                    \n                \n            \n            \n                \ngetInfoLoggerList()\n                \n            \n\n\n            \n                \n                    Defined in src/info-logger.ts:26\n                \n            \n\n\n            \n                \n                    Get the info logger list being used by the info logger service\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        The info logger list containing log data\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class InfoLogger {\n  /** List that contains all the info logs */\n  private infoLoggerList: any[] = [];\n  /** Max entries to be shown inside the information panel */\n  private maxEntries: number = 10;\n\n  /**\n   * Add an entry to the info logger\n   * @param data Data of the info log\n   * @param label Label of the info log\n   */\n  add(data: string, label?: string) {\n    if (this.infoLoggerList.length > this.maxEntries) {\n      this.infoLoggerList.pop();\n    }\n    this.infoLoggerList.unshift(label ? label + ': ' + data : data);\n  }\n\n  /**\n   * Get the info logger list being used by the info logger service\n   * @returns The info logger list containing log data\n   */\n  getInfoLoggerList(): any[] {\n    return this.infoLoggerList;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LHCbLoader.html":{"url":"classes/LHCbLoader.html","title":"class - LHCbLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LHCbLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/lhcb-loader.ts\n        \n\n            \n                Description\n            \n            \n                PhoenixLoader for processing and loading an LHCb event.\n\n            \n\n            \n                Extends\n            \n            \n                        PhoenixLoader\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                data\n                            \n                            \n                                    Protected\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Protected\n                                labelsObject\n                            \n                            \n                                    Protected\n                                loadingManager\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getEventData\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                process\n                            \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Public\n                                addLabelToEventObject\n                            \n                            \n                                    Protected\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Public\n                                getLabelsObject\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                    Protected\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/loaders/lhcb-loader.ts:8\n                            \n                        \n\n                \n                    \n                            Constructor for the LHCb loader.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/lhcb-loader.ts:8\n                            \n                        \n\n                \n                    \n                        Event data to be processed. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:21\n\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:17\n\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            labelsObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:25\n\n                            \n                        \n\n                \n                    \n                        Object containing event object labels. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            loadingManager\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LoadingManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:23\n\n                            \n                        \n\n                \n                    \n                        Loading manager for loadable resources \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:19\n\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventData()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/lhcb-loader.ts:31\n                \n            \n\n\n            \n                \n                    Process and get the event data.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The processed event data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/lhcb-loader.ts:62\n                \n            \n\n\n            \n                \n                    Get LHCb specific metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            process\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    process(data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/lhcb-loader.ts:22\n                \n            \n\n\n            \n                \n                    Set the event data for the loader.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event data as JSON.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:301\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLabelToEventObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabelToEventObject(label: string, collection: string, indexInCollection: number)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:450\n\n                \n            \n\n\n            \n                \n                    Add label of event object to the labels object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to be saved.\n\n                                    \n                                \n                                \n                                    collection\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Collection the event object is a part of.\n\n                                    \n                                \n                                \n                                    indexInCollection\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event object's index in collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A unique label ID string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[], extendEventDataTypeUI?: (typeFolder?: any,typeFolderPM?: PhoenixMenuNode) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:257\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                                \n                                    extendEventDataTypeUI\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A callback to add more options to event data type UI folder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:42\n\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphics library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:113\n\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:89\n\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:396\n\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:73\n\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLabelsObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLabelsObject()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:476\n\n                \n            \n\n\n            \n                \n                    Get the object containing labels.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The labels object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:343\n\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:326\n\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:134\n\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PhoenixLoader } from './phoenix-loader';\n\n/**\n * PhoenixLoader for processing and loading an LHCb event.\n */\nexport class LHCbLoader extends PhoenixLoader {\n  /** Event data to be processed. */\n  private data: any;\n\n  /**\n   * Constructor for the LHCb loader.\n   */\n  constructor() {\n    super();\n    this.data = {};\n  }\n\n  /**\n   * Set the event data for the loader.\n   * @param data Event data as JSON.\n   */\n  public process(data: any) {\n    console.log('Processing event data');\n    this.data = data;\n  }\n\n  /**\n   * Process and get the event data.\n   * @returns The processed event data.\n   */\n  public getEventData(): any {\n    const eventData = {\n      eventNumber: this.data.eventNumber,\n      runNumber: this.data.runNumber,\n      Hits: {},\n      Tracks: {},\n    };\n\n    let part_list = [];\n    const pdata_list = this.data.PARTICLES;\n    if (pdata_list) {\n      for (let j = 0; j \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadingManager.html":{"url":"classes/LoadingManager.html","title":"class - LoadingManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadingManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/loading-manager.ts\n        \n\n            \n                Description\n            \n            \n                Phoenix loading manager for managing loadable items.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                instance\n                            \n                            \n                                    Public\n                                loaded\n                            \n                            \n                                    Private\n                                onLoadCallbacks\n                            \n                            \n                                    Private\n                                onProgressCallbacks\n                            \n                            \n                                    Private\n                                progressItems\n                            \n                            \n                                    Public\n                                toLoad\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addLoadableItem\n                            \n                            \n                                    Public\n                                addLoadListener\n                            \n                            \n                                    Public\n                                addLoadListenerWithCheck\n                            \n                            \n                                    Public\n                                addProgressListener\n                            \n                            \n                                    Public\n                                itemLoaded\n                            \n                            \n                                    Public\n                                onProgress\n                            \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/loading-manager.ts:19\n                            \n                        \n\n                \n                    \n                            Create the singleton Phoenix loading manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            instance\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LoadingManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:6\n                            \n                        \n\n                \n                    \n                        Instance of the loading manager \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            loaded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:11\n                            \n                        \n\n                \n                    \n                        Items loaded \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onLoadCallbacks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     (function)[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:14\n                            \n                        \n\n                \n                    \n                        Callbacks to call on load. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onProgressCallbacks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     (function)[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:16\n                            \n                        \n\n                \n                    \n                        Callbacks to call on progress. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            progressItems\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:19\n                            \n                        \n\n                \n                    \n                        Progress for each named item. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toLoad\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:9\n                            \n                        \n\n                \n                    \n                        Items to load. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLoadableItem\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLoadableItem(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:36\n                \n            \n\n\n            \n                \n                    Add count for a loadable item.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        ID of the item to be loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLoadListener\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLoadListener(callback: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:80\n                \n            \n\n\n            \n                \n                    Add a listener for when all items have loaded.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call when all items have loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLoadListenerWithCheck\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLoadListenerWithCheck(callback: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:89\n                \n            \n\n\n            \n                \n                    Add a listener for when all items have loaded and check if there\nare any items to load when the listener is added.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call when all items have loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addProgressListener\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addProgressListener(callback: (progress: number) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:101\n                \n            \n\n\n            \n                \n                    Add a listener for when an item progress.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call when there is progress.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            itemLoaded\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    itemLoaded(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:44\n                \n            \n\n\n            \n                \n                    Add count for an item is loaded.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        ID of the item loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            onProgress\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onProgress(itemName: string, progress: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:60\n                \n            \n\n\n            \n                \n                    When an item loading progresses.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    itemName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the item with the progress.\n\n                                    \n                                \n                                \n                                    progress\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Progress of the item.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:108\n                \n            \n\n\n            \n                \n                    Reset the loading manager and its items.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class LoadingManager {\n  /** Instance of the loading manager */\n  private static instance: LoadingManager;\n\n  /** Items to load. */\n  public toLoad: string[] = [];\n  /** Items loaded */\n  public loaded: string[] = [];\n\n  /** Callbacks to call on load. */\n  private onLoadCallbacks: (() => void)[] = [];\n  /** Callbacks to call on progress. */\n  private onProgressCallbacks: ((progress: number) => void)[] = [];\n\n  /** Progress for each named item. */\n  private progressItems: { [key: string]: number } = {};\n\n  /**\n   * Create the singleton Phoenix loading manager.\n   * @returns The loading manager instance.\n   */\n  constructor() {\n    if (LoadingManager.instance === undefined) {\n      LoadingManager.instance = this;\n    }\n    return LoadingManager.instance;\n  }\n\n  /**\n   * Add count for a loadable item.\n   * @param id ID of the item to be loaded.\n   */\n  public addLoadableItem(id: string = '') {\n    this.toLoad.push(id);\n  }\n\n  /**\n   * Add count for an item is loaded.\n   * @param id ID of the item loaded.\n   */\n  public itemLoaded(id: string = '') {\n    this.loaded.push(id);\n    if (\n      this.toLoad.length === this.loaded.length &&\n      this.toLoad.sort().join(',') === this.loaded.sort().join(',')\n    ) {\n      this.onLoadCallbacks.forEach((callback) => callback());\n      this.reset();\n    }\n  }\n\n  /**\n   * When an item loading progresses.\n   * @param itemName Name of the item with the progress.\n   * @param progress Progress of the item.\n   */\n  public onProgress(itemName: string, progress: number) {\n    this.progressItems[itemName] = progress;\n\n    let totalProgress = Object.values(this.progressItems).reduce(\n      (acc, val) => acc + val,\n      0\n    );\n    let totalItems = Object.keys(this.progressItems).length;\n\n    const averageProgress = totalProgress / totalItems;\n\n    for (const callback of this.onProgressCallbacks) {\n      callback(averageProgress);\n    }\n  }\n\n  /**\n   * Add a listener for when all items have loaded.\n   * @param callback Callback to call when all items have loaded.\n   */\n  public addLoadListener(callback: () => void) {\n    this.onLoadCallbacks.push(callback);\n  }\n\n  /**\n   * Add a listener for when all items have loaded and check if there\n   * are any items to load when the listener is added.\n   * @param callback Callback to call when all items have loaded.\n   */\n  public addLoadListenerWithCheck(callback: () => void) {\n    if (this.toLoad.length > 0 && this.toLoad.length !== this.loaded.length) {\n      this.onLoadCallbacks.push(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Add a listener for when an item progress.\n   * @param callback Callback to call when there is progress.\n   */\n  public addProgressListener(callback: (progress: number) => void) {\n    this.onProgressCallbacks.push(callback);\n  }\n\n  /**\n   * Reset the loading manager and its items.\n   */\n  public reset() {\n    this.toLoad = [];\n    this.loaded = [];\n    this.onLoadCallbacks = [];\n    this.onProgressCallbacks = [];\n    this.progressItems = {};\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixLoader.html":{"url":"classes/PhoenixLoader.html","title":"class - PhoenixLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/phoenix-loader.ts\n        \n\n            \n                Description\n            \n            \n                Loader for processing and loading an event.\n\n            \n\n\n            \n                Implements\n            \n            \n                            EventDataLoader\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Protected\n                                labelsObject\n                            \n                            \n                                    Protected\n                                loadingManager\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Public\n                                addLabelToEventObject\n                            \n                            \n                                    Protected\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Public\n                                getLabelsObject\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                    Protected\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/loaders/phoenix-loader.ts:25\n                            \n                        \n\n                \n                    \n                            Create the Phoenix loader.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/phoenix-loader.ts:21\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/phoenix-loader.ts:17\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            labelsObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/phoenix-loader.ts:25\n                            \n                        \n\n                \n                    \n                        Object containing event object labels. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            loadingManager\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LoadingManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/phoenix-loader.ts:23\n                            \n                        \n\n                \n                    \n                        Loading manager for loadable resources \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/phoenix-loader.ts:19\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:301\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLabelToEventObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabelToEventObject(label: string, collection: string, indexInCollection: number)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:450\n                \n            \n\n\n            \n                \n                    Add label of event object to the labels object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to be saved.\n\n                                    \n                                \n                                \n                                    collection\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Collection the event object is a part of.\n\n                                    \n                                \n                                \n                                    indexInCollection\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event object's index in collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A unique label ID string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[], extendEventDataTypeUI?: (typeFolder?: any,typeFolderPM?: PhoenixMenuNode) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:257\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                                \n                                    extendEventDataTypeUI\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A callback to add more options to event data type UI folder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:42\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphics library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:113\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:89\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:396\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:73\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLabelsObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLabelsObject()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:476\n                \n            \n\n\n            \n                \n                    Get the object containing labels.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The labels object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:343\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:326\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:134\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventDataLoader } from './event-data-loader';\nimport { Color, Group, Object3D } from 'three';\nimport { UIManager } from '../ui';\nimport { ThreeManager } from '../three';\nimport { Cut } from '../extras/cut.model';\nimport { PhoenixObjects } from './objects/phoenix-objects';\nimport { InfoLogger } from '../info-logger';\nimport { PhoenixMenuNode } from '../ui/phoenix-menu/phoenix-menu-node';\nimport { EVENT_DATA_TYPE_COLORS } from '../helpers/constants';\nimport { LoadingManager } from '../managers/loading-manager';\n\n/**\n * Loader for processing and loading an event.\n */\nexport class PhoenixLoader implements EventDataLoader {\n  /** ThreeService to perform three.js related functions. */\n  private graphicsLibrary: ThreeManager;\n  /** UIService to perform UI related functions. */\n  private ui: UIManager;\n  /** Event data processed by the loader. */\n  protected eventData: any;\n  /** Loading manager for loadable resources */\n  protected loadingManager: LoadingManager;\n  /** Object containing event object labels. */\n  protected labelsObject: { [key: string]: any } = {};\n\n  /**\n   * Create the Phoenix loader.\n   */\n  constructor() {\n    this.loadingManager = new LoadingManager();\n  }\n\n  /**\n   * Takes an object that represents ONE event and takes care of adding\n   * the different objects to the graphics library and the UI controls.\n   * @param eventData Object representing the event.\n   * @param graphicsLibrary Service containing functionality to draw the 3D objects.\n   * @param ui Service for showing menus and controls to manipulate the geometries.\n   * @param infoLogger Service for logging data to the information panel.\n   */\n  public buildEventData(\n    eventData: any,\n    graphicsLibrary: ThreeManager,\n    ui: UIManager,\n    infoLogger: InfoLogger\n  ): void {\n    this.graphicsLibrary = graphicsLibrary;\n    this.ui = ui;\n    this.eventData = eventData;\n\n    // Replacing tracks with tracks through Runge-Kutta\n    // TODO - make this configurable? Or possibly automatic if tracks have  {\n        if (typeFolder) {\n          const sizeMenu = typeFolder\n            .add({ jetsScale: 100 }, 'jetsScale', 1, 200)\n            .name('Jets Size (%)');\n          sizeMenu.onChange((value: number) => {\n            this.graphicsLibrary.getSceneManager().scaleJets(value);\n          });\n        }\n        // Phoenix menu\n        if (typeFolderPM) {\n          typeFolderPM.addConfig('slider', {\n            label: 'Jets Size (%)',\n            value: 100,\n            min: 1,\n            max: 200,\n            allowCustomValue: true,\n            onChange: (value: number) => {\n              this.graphicsLibrary.getSceneManager().scaleJets(value);\n            },\n          });\n        }\n      };\n\n      this.addObjectType(\n        eventData.Jets,\n        PhoenixObjects.getJet,\n        'Jets',\n        cuts,\n        addJetsSizeOption\n      );\n    }\n\n    if (eventData.Hits) {\n      // Cannot currently cut on just a postion array.\n      this.addObjectType(eventData.Hits, PhoenixObjects.getHits, 'Hits');\n    }\n\n    if (eventData.CaloClusters) {\n      // (Optional) Cuts can be added to any physics object.\n      const cuts = [\n        new Cut('phi', -pi, pi, 0.01),\n        new Cut('eta', -100, 100),\n        new Cut('energy', 0, 10000),\n      ];\n\n      this.addObjectType(\n        eventData.CaloClusters,\n        PhoenixObjects.getCluster,\n        'CaloClusters',\n        cuts\n      );\n    }\n\n    if (eventData.Muons) {\n      const cuts = [\n        new Cut('phi', -pi, pi, 0.01),\n        new Cut('eta', -100, 100),\n        new Cut('energy', 0, 10000),\n        new Cut('pT', 0, 50),\n      ];\n      this.addObjectType(eventData.Muons, this.getMuon, 'Muons', cuts);\n    }\n\n    // if (eventData.Photons) {\n    //   this.addObjectType(eventData.Photons, PhoenixObjects.getPhotons, 'Muons');\n    // }\n\n    // if (eventData.Electrons) {\n    //   this.addObjectType(eventData.Photons, PhoenixObjects.getElectrons, 'Muons');\n    // }\n\n    if (eventData.Vertices) {\n      const cuts = [new Cut('vertexType', 0, 5)];\n      this.addObjectType(\n        eventData.Vertices,\n        PhoenixObjects.getVertex,\n        'Vertices',\n        cuts\n      );\n    }\n  }\n\n  /**\n   * Adds to the event display all collections of a given object type.\n   * @param object Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n   * @param getObject Function that handles of reconstructing objects of the given type.\n   * @param typeName Label for naming the object type.\n   * @param cuts Filters that can be applied to the objects.\n   * @param extendEventDataTypeUI A callback to add more options to event data type UI folder.\n   */\n  protected addObjectType(\n    object: any,\n    getObject: any,\n    typeName: string,\n    cuts?: Cut[],\n    extendEventDataTypeUI?: (\n      typeFolder: any,\n      typeFolderPM?: PhoenixMenuNode\n    ) => void\n  ) {\n    const typeFolder = this.ui.addEventDataTypeFolder(typeName);\n    const typeFolderPM = this.ui.addEventDataTypeFolderPM(typeName);\n    const objectGroup = this.graphicsLibrary.addEventDataTypeGroup(typeName);\n\n    const collectionsList: string[] = this.getObjectTypeCollections(object);\n\n    for (const collectionName of collectionsList) {\n      const objectCollection = object[collectionName];\n      console.log(\n        `${typeName} collection ${collectionName} has ${objectCollection.length} constituents.`\n      );\n\n      this.addCollection(\n        objectCollection,\n        collectionName,\n        getObject,\n        objectGroup\n      );\n\n      cuts = cuts?.filter((cut) => cut.field in objectCollection[0]);\n      this.ui.addCollection(typeFolder, collectionName, cuts);\n      this.ui.addCollectionPM(typeFolderPM, collectionName, cuts);\n    }\n\n    extendEventDataTypeUI?.(typeFolder, typeFolderPM);\n  }\n\n  /**\n   * Adds to the event display all the objects inside a collection.\n   * @param objectCollection Contains the params for every object of the collection.\n   * @param collectionName Label to UNIQUELY identify the collection.\n   * @param getObject Handles reconstructing the objects of the collection.\n   * @param objectGroup Group containing the collections of the same object type.\n   */\n  private addCollection(\n    objectCollection: any,\n    collectionName: string,\n    getObject: (object: any) => Object3D,\n    objectGroup: Group\n  ) {\n    const collscene = new Group();\n    collscene.name = collectionName;\n\n    for (const objectParams of objectCollection) {\n      const object = getObject.bind(this)(objectParams);\n      if (object) {\n        collscene.add(object);\n      }\n    }\n\n    objectGroup.add(collscene);\n    // console.log(\"-> Adding a threejs group called \"+collscene.name+\" with \"+collscene.children.length+\" children to the group called \"+objectGroup.name);\n  }\n\n  /**\n   * Get collection names of a given object type.\n   * @param object Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n   * @returns List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n   */\n  private getObjectTypeCollections(object: any): string[] {\n    const collectionsList: string[] = [];\n\n    for (const collectionName of Object.keys(object)) {\n      if (object[collectionName] !== null) {\n        collectionsList.push(collectionName);\n      }\n    }\n\n    return collectionsList;\n  }\n\n  /**\n   * Process the Muon from the given parameters and get it as a group.\n   * @param muonParams Parameters of the Muon.\n   * @returns Muon group containing Clusters and Tracks.\n   */\n  protected getMuon(muonParams: any): Object3D {\n    const muonScene = new Group();\n    if ('LinkedClusters' in muonParams) {\n      for (const clusterID of muonParams.LinkedClusters) {\n        const clusterColl = clusterID.split(':')[0];\n        const clusterIndex = clusterID.split(':')[1];\n\n        if (\n          clusterColl &&\n          clusterIndex &&\n          this.eventData.CaloClusters &&\n          this.eventData.CaloClusters[clusterColl]\n        ) {\n          const clusterParams = this.eventData.CaloClusters[clusterColl][\n            clusterIndex\n          ];\n          if (clusterParams) {\n            const cluster = PhoenixObjects.getCluster(clusterParams);\n            muonScene.add(cluster);\n          }\n        }\n      }\n    }\n    if ('LinkedTracks' in muonParams) {\n      for (const trackID of muonParams.LinkedTracks) {\n        const trackColl = trackID.split(':')[0];\n        const trackIndex = trackID.split(':')[1];\n\n        if (\n          trackColl &&\n          trackIndex &&\n          this.eventData.Tracks &&\n          this.eventData.Tracks[trackColl]\n        ) {\n          const trackParams = this.eventData.Tracks[trackColl][trackIndex];\n          if (trackParams) {\n            const track = PhoenixObjects.getTrack(trackParams);\n            muonScene.add(track);\n          }\n        }\n      }\n    }\n    // uuid for selection of muons from the collections info panel\n    muonParams.uuid = muonScene.uuid;\n    muonScene.name = 'Muon';\n    // add to scene\n    return muonScene;\n  }\n\n  /**\n   * Get metadata associated to the event (experiment info, time, run, event...).\n   * @returns Metadata of the event.\n   */\n  getEventMetadata(): any[] {\n    let metadata = [];\n\n    // Dividing event meta data into groups by keys and label\n    // For example, the first array group is for \"Run / Event / LS\"\n    const eventDataPropGroups = [\n      [\n        { keys: ['runNumber', 'run number'], label: 'Run' },\n        { keys: ['eventNumber', 'event number'], label: 'Event' },\n        { keys: ['ls'], label: 'LS' },\n        { keys: ['lumiBlock'], label: 'LumiBlock' },\n      ],\n      [{ keys: ['time'], label: 'Data recorded' }],\n    ];\n\n    const eventDataKeys = Object.keys(this.eventData);\n\n    // Iterating the group\n    for (const eventDataPropGroup of eventDataPropGroups) {\n      let combinedProps = {};\n      // Iterating the props inside a group\n      for (const eventDataProp of eventDataPropGroup) {\n        // Iterating each possible key of a prop\n        for (const eventDataPropKey of eventDataProp.keys) {\n          if (\n            eventDataKeys.includes(eventDataPropKey) &&\n            this.eventData[eventDataPropKey]\n          ) {\n            combinedProps[eventDataProp.label] = this.eventData[\n              eventDataPropKey\n            ];\n            break;\n          }\n        }\n      }\n      if (Object.keys(combinedProps).length > 0) {\n        // Joining and pushing the collected combined properties to the actual metadata\n        metadata.push({\n          label: Object.keys(combinedProps).join(' / '),\n          value: Object.values(combinedProps).join(' / '),\n        });\n      }\n    }\n\n    return metadata;\n  }\n\n  /**\n   * Add label of event object to the labels object.\n   * @param label Label to be saved.\n   * @param collection Collection the event object is a part of.\n   * @param indexInCollection Event object's index in collection.\n   * @returns A unique label ID string.\n   */\n  public addLabelToEventObject(\n    label: string,\n    collection: string,\n    indexInCollection: number\n  ): string {\n    for (const eventDataType of Object.keys(this.eventData)) {\n      if (\n        this.eventData[eventDataType] &&\n        Object.keys(this.eventData[eventDataType]).includes(collection)\n      ) {\n        this.labelsObject[eventDataType] =\n          this.labelsObject[eventDataType] || {};\n        this.labelsObject[eventDataType][collection] =\n          this.labelsObject[eventDataType][collection] || {};\n\n        this.labelsObject[eventDataType][collection][indexInCollection] = label;\n\n        return `${eventDataType} > ${collection} > ${indexInCollection}`;\n      }\n    }\n  }\n\n  /**\n   * Get the object containing labels.\n   * @returns The labels object.\n   */\n  public getLabelsObject(): object {\n    return this.labelsObject;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixMenuNode.html":{"url":"classes/PhoenixMenuNode.html","title":"class - PhoenixMenuNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixMenuNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ui/phoenix-menu/phoenix-menu-node.ts\n        \n\n            \n                Description\n            \n            \n                A single node of phoenix menu item.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                children\n                            \n                            \n                                childrenActive\n                            \n                            \n                                    Private\n                                childrenToggleState\n                            \n                            \n                                configActive\n                            \n                            \n                                configs\n                            \n                            \n                                icon\n                            \n                            \n                                name\n                            \n                            \n                                nodeLevel\n                            \n                            \n                                onToggle\n                            \n                            \n                                    Private\n                                parent\n                            \n                            \n                                toggleState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addChild\n                            \n                            \n                                addConfig\n                            \n                            \n                                applyConfigState\n                            \n                            \n                                findInTree\n                            \n                            \n                                findInTreeOrCreate\n                            \n                            \n                                getNodeState\n                            \n                            \n                                loadStateFromJSON\n                            \n                            \n                                remove\n                            \n                            \n                                removeChild\n                            \n                            \n                                toggleSelfAndDescendants\n                            \n                            \n                                truncate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, icon?: string, onToggle?: (value?: boolean) => void, children?: PhoenixMenuNode[], configs?: any[], parent?: PhoenixMenuNode)\n                    \n                \n                        \n                            \n                                Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:41\n                            \n                        \n\n                \n                    \n                            Create the phoenix menu node.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the node.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Icon of the node.\n\n                                                        \n                                                \n                                                \n                                                        onToggle\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Function on toggling the node.\n\n                                                        \n                                                \n                                                \n                                                        children\n                                                  \n                                                        \n                                                                        PhoenixMenuNode[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Children of the node.\n\n                                                        \n                                                \n                                                \n                                                        configs\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Configuration options in the node.\n\n                                                        \n                                                \n                                                \n                                                        parent\n                                                  \n                                                        \n                                                                        PhoenixMenuNode\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Parent of the node.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:25\n                            \n                        \n\n                \n                    \n                        Children of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            childrenActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:39\n                            \n                        \n\n                \n                    \n                        If the node children are active or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            childrenToggleState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:36\n                            \n                        \n\n                \n                    \n                        Previous toggle state of child nodes. This is so that the\nprevious state of child can be restored if we toggle the parent back on.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            configActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:41\n                            \n                        \n\n                \n                    \n                        If the node configuration options are active or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            configs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:27\n                            \n                        \n\n                \n                    \n                        Configuration options in the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            icon\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:19\n                            \n                        \n\n                \n                    \n                        Icon of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:17\n                            \n                        \n\n                \n                    \n                        Name of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nodeLevel\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:29\n                            \n                        \n\n                \n                    \n                        Level of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onToggle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:21\n                            \n                        \n\n                \n                    \n                        Function on toggling the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            parent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:31\n                            \n                        \n\n                \n                    \n                        Parent of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toggleState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:23\n                            \n                        \n\n                \n                    \n                        If the node toggle state is true or false. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addChild\n                        \n                        \n                    \n                \n            \n            \n                \naddChild(name: string, onToggle?: (value?: boolean) => void, icon?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:75\n                \n            \n\n\n            \n                \n                    Add a child to the phoenix menu item.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the child.\n\n                                    \n                                \n                                \n                                    onToggle\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function on toggling the child.\n\n                                    \n                                \n                                \n                                    icon\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Icon of the child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The child node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addConfig\n                        \n                        \n                    \n                \n            \n            \n                \naddConfig(type: PhoenixMenuConfig, options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:124\n                \n            \n\n\n            \n                \n                    Add a config to the phoenix menu item.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                PhoenixMenuConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Type of configuration.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Options for the config.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The current node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            applyConfigState\n                        \n                        \n                    \n                \n            \n            \n                \napplyConfigState(config: any)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:157\n                \n            \n\n\n            \n                \n                    Apply the current values of config by calling the change function.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Config whose values are to be applied.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findInTree\n                        \n                        \n                    \n                \n            \n            \n                \nfindInTree(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:247\n                \n            \n\n\n            \n                \n                    Find a node in the tree by name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the node to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The found node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findInTreeOrCreate\n                        \n                        \n                    \n                \n            \n            \n                \nfindInTreeOrCreate(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:265\n                \n            \n\n\n            \n                \n                    Find a node in the tree by name or create one.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the node to find or create.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The found or created node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNodeState\n                        \n                        \n                    \n                \n            \n            \n                \ngetNodeState()\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:180\n                \n            \n\n\n            \n                \n                    Get current state of the node as an object.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        State of the node as an object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadStateFromJSON\n                        \n                        \n                    \n                \n            \n            \n                \nloadStateFromJSON(json: string | object)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:201\n                \n            \n\n\n            \n                \n                    Load the state of the phoenix menu node from JSON.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    json\n                                    \n                                            string | object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        JSON containing the phoenix menu node state.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove()\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:101\n                \n            \n\n\n            \n                \n                    Remove the current node.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeChild\n                        \n                        \n                    \n                \n            \n            \n                \nremoveChild(child: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:92\n                \n            \n\n\n            \n                \n                    Remove a child node.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The child node to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The current node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleSelfAndDescendants\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleSelfAndDescendants(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:137\n                \n            \n\n\n            \n                \n                    Function for toggling the current and all child nodes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the node itself and descendants are to be made true or false.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            truncate\n                        \n                        \n                    \n                \n            \n            \n                \ntruncate()\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:114\n                \n            \n\n\n            \n                \n                    Remove all children.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export type PhoenixMenuConfig =\n  | 'checkbox'\n  | 'slider'\n  | 'button'\n  | 'label'\n  | 'color'\n  | 'rangeSlider';\n\n/**\n * A single node of phoenix menu item.\n */\nexport class PhoenixMenuNode {\n  /** Name of the node. */\n  name: string;\n  /** Icon of the node. */\n  icon: string;\n  /** Function on toggling the node. */\n  onToggle: (value: boolean) => void;\n  /** If the node toggle state is true or false. */\n  toggleState: boolean = true;\n  /** Children of the node. */\n  children: PhoenixMenuNode[] = [];\n  /** Configuration options in the node. */\n  configs: any[] = [];\n  /** Level of the node. */\n  nodeLevel: number = 0;\n  /** Parent of the node. */\n  private parent: PhoenixMenuNode;\n  /**\n   * Previous toggle state of child nodes. This is so that the\n   * previous state of child can be restored if we toggle the parent back on.\n   * */\n  private childrenToggleState = {};\n\n  /** If the node children are active or not. */\n  childrenActive: boolean = false;\n  /** If the node configuration options are active or not. */\n  configActive: boolean = false;\n\n  /**\n   * Create the phoenix menu node.\n   * @param name Name of the node.\n   * @param icon Icon of the node.\n   * @param onToggle Function on toggling the node.\n   * @param children Children of the node.\n   * @param configs Configuration options in the node.\n   * @param parent Parent of the node.\n   */\n  constructor(\n    name: string,\n    icon?: string,\n    onToggle?: (value: boolean) => void,\n    children?: PhoenixMenuNode[],\n    configs?: any[],\n    parent?: PhoenixMenuNode\n  ) {\n    this.name = name;\n    this.icon = icon;\n    this.onToggle = onToggle;\n    if (children) this.children = children;\n    if (configs) this.configs = configs;\n    if (parent) this.parent = parent;\n  }\n\n  /**\n   * Add a child to the phoenix menu item.\n   * @param name Name of the child.\n   * @param onToggle Function on toggling the child.\n   * @param icon Icon of the child.\n   * @returns The child node.\n   */\n  addChild(\n    name: string,\n    onToggle?: (value: boolean) => void,\n    icon?: string\n  ): PhoenixMenuNode {\n    const child = new PhoenixMenuNode(name, icon, onToggle);\n    child.parent = this;\n    child.nodeLevel = this.nodeLevel + 1;\n    this.children.push(child);\n    return child;\n  }\n\n  /**\n   * Remove a child node.\n   * @param child The child node to be removed.\n   * @returns The current node.\n   */\n  removeChild(child: PhoenixMenuNode): PhoenixMenuNode {\n    const childIndex = this.children.indexOf(child);\n    this.children.splice(childIndex, 1);\n    return this;\n  }\n\n  /**\n   * Remove the current node.\n   */\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    } else {\n      console.error(\n        'Cannot delete root node of phoenix menu. Set it to undefined/null instead.'\n      );\n    }\n  }\n\n  /**\n   * Remove all children.\n   */\n  truncate() {\n    this.children = [];\n  }\n\n  /**\n   * Add a config to the phoenix menu item.\n   * @param type Type of configuration.\n   * @param options Options for the config.\n   * @returns The current node.\n   */\n  addConfig(type: PhoenixMenuConfig, options: any): PhoenixMenuNode {\n    let configOptions = { type };\n    Object.assign(configOptions, options);\n    const configsLength = this.configs.push(configOptions);\n    // Apply the values of config\n    this.applyConfigState(this.configs[configsLength - 1]);\n    return this;\n  }\n\n  /**\n   * Function for toggling the current and all child nodes.\n   * @param value If the node itself and descendants are to be made true or false.\n   */\n  toggleSelfAndDescendants(value: boolean) {\n    this.onToggle?.(value);\n    this.toggleState = value;\n    for (const child of this.children) {\n      if (!value) {\n        // Save previous toggle state of children and toggle them false\n        this.childrenToggleState[child.name] = child.toggleState;\n        child.toggleSelfAndDescendants(value);\n      } else {\n        // Restore previous toggle state of children\n        child.toggleState = this.childrenToggleState[child.name];\n        child.toggleSelfAndDescendants(child.toggleState);\n      }\n    }\n  }\n\n  /**\n   * Apply the current values of config by calling the change function.\n   * @param config Config whose values are to be applied.\n   */\n  applyConfigState(config: any) {\n    // Apply configs of different config types - manual\n    if (config.type === 'checkbox' && config?.['isChecked']) {\n      config.onChange?.(config?.['isChecked']);\n    } else if (config.type === 'color' && config?.['color']) {\n      config.onChange?.(config?.['color']);\n    } else if (config.type === 'slider' && config?.['value']) {\n      config.onChange?.(config?.['value']);\n    } else if (\n      config.type === 'rangeSlider' &&\n      config?.['value'] !== undefined\n    ) {\n      config.onChange?.({\n        value: config?.['value'],\n        highValue: config?.['highValue'],\n      });\n    }\n  }\n\n  /**\n   * Get current state of the node as an object.\n   * @returns State of the node as an object.\n   */\n  getNodeState(): object {\n    const phoenixNodeJSON: object = {};\n\n    phoenixNodeJSON['name'] = this.name;\n    phoenixNodeJSON['nodeLevel'] = this.nodeLevel;\n    phoenixNodeJSON['toggleState'] = this.toggleState;\n    phoenixNodeJSON['childrenActive'] = this.childrenActive;\n    phoenixNodeJSON['configs'] = this.configs;\n    phoenixNodeJSON['children'] = [];\n\n    for (const child of this.children) {\n      phoenixNodeJSON['children'].push(child.getNodeState());\n    }\n\n    return phoenixNodeJSON;\n  }\n\n  /**\n   * Load the state of the phoenix menu node from JSON.\n   * @param json JSON containing the phoenix menu node state.\n   */\n  loadStateFromJSON(json: string | object) {\n    let jsonObject: any;\n    if (typeof json === 'string') {\n      jsonObject = JSON.parse(json);\n    } else {\n      jsonObject = json;\n    }\n\n    this.childrenActive = jsonObject['childrenActive'];\n    this.toggleState = jsonObject['toggleState'];\n    this.onToggle?.(this.toggleState);\n\n    for (const configState of jsonObject['configs']) {\n      const nodeConfig = this.configs.find(\n        (nodeConfig) =>\n          nodeConfig.type === configState['type'] &&\n          nodeConfig.label === configState['label']\n      );\n\n      if (nodeConfig) {\n        for (const prop in configState) {\n          nodeConfig[prop] = configState[prop];\n        }\n\n        this.applyConfigState(nodeConfig);\n      }\n    }\n\n    for (const childState of jsonObject['children']) {\n      const nodeChild = this.children.filter(\n        (nodeChild) =>\n          nodeChild.name === childState.name &&\n          nodeChild.nodeLevel === childState.nodeLevel\n      )[0];\n\n      if (nodeChild) {\n        nodeChild.loadStateFromJSON(childState);\n      }\n    }\n  }\n\n  /**\n   * Find a node in the tree by name.\n   * @param name Name of the node to find.\n   * @returns The found node.\n   */\n  findInTree(name: string): PhoenixMenuNode {\n    if (this.name === name) {\n      return this;\n    } else {\n      for (const child of this.children) {\n        const nodeFound = child.findInTree(name);\n        if (nodeFound) {\n          return nodeFound;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find a node in the tree by name or create one.\n   * @param name Name of the node to find or create.\n   * @returns The found or created node.\n   */\n  findInTreeOrCreate(name: string): PhoenixMenuNode {\n    let prevNode: PhoenixMenuNode = this;\n    name.split('>').forEach((nodeName) => {\n      nodeName = nodeName.trim();\n      const nodeFound = prevNode.findInTree(nodeName);\n      // const nodeFound = prevNode.children.find(child => child.name === nodeName);\n\n      prevNode = nodeFound ? nodeFound : prevNode.addChild(nodeName, () => {});\n    });\n    return prevNode;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixObjects.html":{"url":"classes/PhoenixObjects.html","title":"class - PhoenixObjects","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixObjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/phoenix-objects.ts\n        \n\n            \n                Description\n            \n            \n                Physics objects that make up an event in Phoenix.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getCluster\n                            \n                            \n                                    Static\n                                getHits\n                            \n                            \n                                    Static\n                                getJet\n                            \n                            \n                                    Static\n                                getTrack\n                            \n                            \n                                    Static\n                                getVertex\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getCluster\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCluster(clusterParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:240\n                \n            \n\n\n            \n                \n                    Process the CLuster from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    clusterParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Cluster.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Cluster object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getHits\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHits(hitsParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:193\n                \n            \n\n\n            \n                \n                    Process the Hits from the given parameters and get them as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hitsParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Hits.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Hits object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getJet\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getJet(jetParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:128\n                \n            \n\n\n            \n                \n                    Process the Jet from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jetParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Jet.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Jet object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getTrack\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTrack(trackParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:35\n                \n            \n\n\n            \n                \n                    Process the Track from the given parameters (and positions)\nand get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    trackParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Track.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Track object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getVertex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVertex(vertexParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:279\n                \n            \n\n\n            \n                \n                    Process the Vertex from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    vertexParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Vertex.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Vertex object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Vector3,\n  Object3D,\n  CatmullRomCurve3,\n  TubeBufferGeometry,\n  MeshToonMaterial,\n  Mesh,\n  BufferGeometry,\n  LineBasicMaterial,\n  Line,\n  Group,\n  Quaternion,\n  CylinderBufferGeometry,\n  MeshBasicMaterial,\n  BufferAttribute,\n  PointsMaterial,\n  Points,\n  BoxBufferGeometry,\n  MeshPhongMaterial,\n  SphereBufferGeometry,\n} from 'three';\nimport { EVENT_DATA_TYPE_COLORS } from '../../helpers/constants';\nimport { RKHelper } from '../../helpers/rk-helper';\n\n/**\n * Physics objects that make up an event in Phoenix.\n */\nexport class PhoenixObjects {\n  /**\n   * Process the Track from the given parameters (and positions)\n   * and get it as a geometry.\n   * @param trackParams Parameters of the Track.\n   * @returns Track object.\n   */\n  public static getTrack(trackParams: any): Object3D {\n    let positions = trackParams.pos;\n    if (!positions) {\n      return;\n    }\n    // Track with no points\n    // if (positions.length==0) {\n    //   console.log(\"Track with no positions.\")\n    //   return;\n    // }\n\n    // Track with too few points are extrapolated with RungeKutta\n    if (positions.length  3000) return false;\n          if (Math.sqrt(pos.x * pos.x + pos.y * pos.y) > 1100) return false;\n\n          return true;\n        };\n\n        positions = RKHelper.extrapolateTrackPositions(trackParams, inBounds);\n      }\n    }\n    // Check again, in case there was an issue with the extrapolation.\n    if (positions.length  3000) {\n      length = 3000;\n    }\n    const width = length * 0.1;\n\n    const sphi = Math.sin(phi);\n    const cphi = Math.cos(phi);\n    const stheta = Math.sin(theta);\n    const ctheta = Math.cos(theta);\n    //\n    const translation = new Vector3(\n      0.5 * length * cphi * stheta,\n      0.5 * length * sphi * stheta,\n      0.5 * length * ctheta\n    );\n\n    const x = cphi * stheta;\n    const y = sphi * stheta;\n    const z = ctheta;\n    const v1 = new Vector3(0, 1, 0);\n    const v2 = new Vector3(x, y, z);\n    const quaternion = new Quaternion();\n    quaternion.setFromUnitVectors(v1, v2);\n\n    const geometry = new CylinderBufferGeometry(\n      width,\n      1,\n      length,\n      50,\n      50,\n      false\n    ); // Cone\n\n    const material = new MeshBasicMaterial({\n      color: jetParams.color ?? EVENT_DATA_TYPE_COLORS.Jets,\n      opacity: 0.3,\n      transparent: true,\n    });\n    material.opacity = 0.5;\n    const mesh = new Mesh(geometry, material);\n    mesh.position.copy(translation);\n    mesh.quaternion.copy(quaternion);\n    mesh.userData = Object.assign({}, jetParams);\n    mesh.name = 'Jet';\n    // Setting uuid for selection from collections info\n    jetParams.uuid = mesh.uuid;\n\n    return mesh;\n  }\n\n  /**\n   * Process the Hits from the given parameters and get them as a geometry.\n   * @param hitsParams Parameters for the Hits.\n   * @returns Hits object.\n   */\n  public static getHits(hitsParams: any): Object3D {\n    let positions: any[];\n    let hitsParamsClone: any;\n\n    // If the parameters is an object then take out 'pos' for hits positions\n    if (typeof hitsParams === 'object' && !Array.isArray(hitsParams)) {\n      positions = [hitsParams.pos];\n      hitsParamsClone = hitsParams;\n    } else {\n      positions = hitsParams;\n      hitsParamsClone = { pos: hitsParams };\n    }\n\n    // attributes\n    const pointPos = new Float32Array(positions.length * 3);\n    let i = 0;\n    for (const hit of positions) {\n      pointPos[i] = hit[0];\n      pointPos[i + 1] = hit[1];\n      pointPos[i + 2] = hit[2];\n      i += 3;\n    }\n\n    // geometry\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new BufferAttribute(pointPos, 3));\n    geometry.computeBoundingSphere();\n    // material\n    const material = new PointsMaterial({\n      size: 10,\n      color: hitsParams.color ?? EVENT_DATA_TYPE_COLORS.Hits,\n    });\n    // object\n    const pointsObj = new Points(geometry, material);\n    pointsObj.userData = Object.assign({}, hitsParamsClone);\n    pointsObj.name = 'Hit';\n    // Setting uuid for selection from collections info\n    hitsParams.uuid = pointsObj.uuid;\n\n    return pointsObj;\n  }\n\n  /**\n   * Process the CLuster from the given parameters and get it as a geometry.\n   * @param clusterParams Parameters for the Cluster.\n   * @returns Cluster object.\n   */\n  public static getCluster(clusterParams: any): Object3D {\n    const maxR = 1100.0; // This needs to be configurable.\n    const maxZ = 3200.0;\n    const length = clusterParams.energy * 0.003;\n    // geometry\n    const geometry = new BoxBufferGeometry(30, 30, length);\n    // material\n    const material = new MeshPhongMaterial({\n      color: clusterParams.color ?? EVENT_DATA_TYPE_COLORS.CaloClusters,\n    });\n    // object\n    const cube = new Mesh(geometry, material);\n    const theta = 2 * Math.atan(Math.pow(Math.E, clusterParams.eta));\n    const pos = new Vector3(\n      4000.0 * Math.cos(clusterParams.phi) * Math.sin(theta),\n      4000.0 * Math.sin(clusterParams.phi) * Math.sin(theta),\n      4000.0 * Math.cos(theta)\n    );\n    cube.position.x = pos.x;\n    cube.position.y = pos.y;\n    if (pos.x * pos.x + pos.y * pos.y > maxR * maxR) {\n      cube.position.x = maxR * Math.cos(clusterParams.phi);\n      cube.position.y = maxR * Math.sin(clusterParams.phi);\n    }\n    cube.position.z = Math.max(Math.min(pos.z, maxZ), -maxZ); // keep in maxZ range.\n    cube.lookAt(new Vector3(0, 0, 0));\n    cube.userData = Object.assign({}, clusterParams);\n    cube.name = 'Cluster';\n    // Setting uuid for selection from collections info\n    clusterParams.uuid = cube.uuid;\n\n    return cube;\n  }\n\n  /**\n   * Process the Vertex from the given parameters and get it as a geometry.\n   * @param vertexParams Parameters for the Vertex.\n   * @returns Vertex object.\n   */\n  public static getVertex(vertexParams: any): Object3D {\n    // geometry\n    const geometry = new SphereBufferGeometry(3);\n    // material\n    const material = new MeshPhongMaterial({\n      color: vertexParams.color ?? EVENT_DATA_TYPE_COLORS.Vertices,\n    });\n    // object\n    const sphere = new Mesh(geometry, material);\n    sphere.position.x = vertexParams.x;\n    sphere.position.y = vertexParams.y;\n    sphere.position.z = vertexParams.y;\n\n    sphere.userData = Object.assign({}, vertexParams);\n    sphere.name = 'Vertex';\n    // Setting uuid for selection from collections info\n    vertexParams.uuid = sphere.uuid;\n\n    return sphere;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresetView.html":{"url":"classes/PresetView.html","title":"class - PresetView","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresetView\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extras/preset-view.model.ts\n        \n\n            \n                Description\n            \n            \n                Preset view for easily transforming/changing camera position to a specified position.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraPos\n                            \n                            \n                                    Public\n                                icon\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                setView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getIconURL\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, cameraPos: number[], icon: string)\n                    \n                \n                        \n                            \n                                Defined in src/extras/preset-view.model.ts:14\n                            \n                        \n\n                \n                    \n                            Create a preset view.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the preset view.\n\n                                                        \n                                                \n                                                \n                                                        cameraPos\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Position to which the camera is to be set.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Icon of the preset view (to describe the view angle).\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cameraPos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:8\n                            \n                        \n\n                \n                    \n                        Position to which the camera is to be set. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            icon\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:6\n                            \n                        \n\n                \n                    \n                        Icon of the preset view (to describe the view angle). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:10\n                            \n                        \n\n                \n                    \n                        Name of the preset view. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setView\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:14\n                            \n                        \n\n                \n                    \n                        Set the preset view.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIconURL\n                        \n                        \n                    \n                \n            \n            \n                \ngetIconURL()\n                \n            \n\n\n            \n                \n                    Defined in src/extras/preset-view.model.ts:32\n                \n            \n\n\n            \n                \n                    Get the URL of the preset view icon.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Icon URL.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class PresetView {\n  /** Icon of the preset view (to describe the view angle). */\n  public icon: string;\n  /** Position to which the camera is to be set. */\n  public cameraPos: number[];\n  /** Name of the preset view. */\n  public name: string;\n  /**\n   * Set the preset view.\n   */\n  setView: () => void;\n\n  /**\n   * Create a preset view.\n   * @param name Name of the preset view.\n   * @param cameraPos Position to which the camera is to be set.\n   * @param icon Icon of the preset view (to describe the view angle).\n   */\n  constructor(name: string, cameraPos: number[], icon: string) {\n    this.name = name;\n    this.cameraPos = cameraPos;\n    this.icon = icon;\n  }\n\n  /**\n   * Get the URL of the preset view icon.\n   * @returns Icon URL.\n   */\n  getIconURL(): string {\n    return 'assets/preset-views/' + this.icon + '.svg#' + this.icon;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrettySymbols.html":{"url":"classes/PrettySymbols.html","title":"class - PrettySymbols","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrettySymbols\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/pretty-symbols.ts\n        \n\n            \n                Description\n            \n            \n                Helper for pretty symbols functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                symbols\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getPrettyParams\n                            \n                            \n                                    Static\n                                getPrettySymbol\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            symbols\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    θ: ['theta'],\n    ϕ: ['phi'],\n    pT: ['pt'],\n    '&#x1D6D8;2': ['chi2'],\n    η: ['eta'],\n    q: ['charge'],\n    NDOF: ['ndof'],\n    DOF: ['dof'],\n    Energy: ['energy'],\n    ET: ['et'],\n    '|p|': ['momentum', 'mom'],\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/pretty-symbols.ts:6\n                            \n                        \n\n                \n                    \n                        Pretty symbols for object params. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getPrettyParams\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrettyParams(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/pretty-symbols.ts:37\n                \n            \n\n\n            \n                \n                    Get pretty printed parameters of an object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object parameters to be pretty printed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        New pretty printed parameterss.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getPrettySymbol\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrettySymbol(param: string)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/pretty-symbols.ts:24\n                \n            \n\n\n            \n                \n                    Get pretty symbol of a parameter.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    param\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameter of a physics object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class PrettySymbols {\n  /** Pretty symbols for object params. */\n  public static readonly symbols: object = {\n    θ: ['theta'],\n    ϕ: ['phi'],\n    pT: ['pt'],\n    '&#x1D6D8;2': ['chi2'],\n    η: ['eta'],\n    q: ['charge'],\n    NDOF: ['ndof'],\n    DOF: ['dof'],\n    Energy: ['energy'],\n    ET: ['et'],\n    '|p|': ['momentum', 'mom'],\n  };\n\n  /**\n   * Get pretty symbol of a parameter.\n   * @param param Parameter of a physics object.\n   */\n  public static getPrettySymbol(param: string) {\n    const prettySymbol = Object.keys(PrettySymbols.symbols).find((symbol) =>\n      PrettySymbols.symbols[symbol].includes(param)\n    );\n\n    return prettySymbol ? prettySymbol : param;\n  }\n\n  /**\n   * Get pretty printed parameters of an object.\n   * @param params Object parameters to be pretty printed.\n   * @returns New pretty printed parameterss.\n   */\n  public static getPrettyParams(params: { [key: string]: any }): object {\n    // Create a copy of the params so we don't overwrite the original object\n    const paramsCopy = Object.assign({}, params);\n    // Go through all the parameters\n    for (const paramKey of Object.keys(paramsCopy)) {\n      // Get the pretty printed symbol\n      const symbol = PrettySymbols.getPrettySymbol(paramKey);\n      // If we do get a symbol\n      if (symbol !== paramKey) {\n        // Add a parameter with pretty printed symbol\n        paramsCopy[symbol] = paramsCopy[paramKey];\n        delete paramsCopy[paramKey];\n      }\n    }\n\n    // Delete 'pos' since it's too long and not needed\n    delete paramsCopy['pos'];\n\n    // Pretty print the dparams if any\n    if (paramsCopy?.dparams) {\n      const prettyDParams: object = {};\n\n      prettyDParams['θ'] = paramsCopy.dparams[3];\n      prettyDParams['ϕ'] = paramsCopy.dparams[2];\n      prettyDParams['|p|'] = Math.abs(1 / paramsCopy.dparams[4]);\n      prettyDParams['q'] = Math.sign(1 / paramsCopy.dparams[4]);\n      prettyDParams['d0'] = paramsCopy.dparams[0];\n      prettyDParams['z0'] = paramsCopy.dparams[1];\n\n      delete paramsCopy.dparams;\n\n      return { ...paramsCopy, ...prettyDParams };\n    }\n\n    return paramsCopy;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RKHelper.html":{"url":"classes/RKHelper.html","title":"class - RKHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RKHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/rk-helper.ts\n        \n\n            \n                Description\n            \n            \n                Helper methods for RungeKutta functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                extrapolateTrackPositions\n                            \n                            \n                                    Static\n                                getTracksWithRungeKutta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            extrapolateTrackPositions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    extrapolateTrackPositions(track: literal type, inbounds: (pos: Vector3) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/rk-helper.ts:32\n                \n            \n\n\n            \n                \n                    Extrapolate tracks using RungeKutta propagator.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    track\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Track which is to be extrapolated.\n\n                                    \n                                \n                                \n                                    inbounds\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        () => true\n                                    \n\n                                    \n                                        Function which returns true until the passed position\nis out of bounds, when it returns false. Default just always returns true.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An array of track positions.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getTracksWithRungeKutta\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTracksWithRungeKutta(tracksCollectionsEvent: any)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/rk-helper.ts:12\n                \n            \n\n\n            \n                \n                    Get extrapolated tracks using RungeKutta.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tracksCollectionsEvent\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event containing tracks collections.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { RungeKutta } from './runge-kutta';\nimport { Vector3 } from 'three';\n\n/**\n * Helper methods for RungeKutta functions.\n */\nexport class RKHelper {\n  /**\n   * Get extrapolated tracks using RungeKutta.\n   * @param tracksCollectionsEvent Event containing tracks collections.\n   */\n  public static getTracksWithRungeKutta(tracksCollectionsEvent: any) {\n    const tracksCollections = Object.assign({}, tracksCollectionsEvent);\n    const Tracks = {};\n    for (const tracksCollection of Object.keys(tracksCollections)) {\n      for (const track of tracksCollections[tracksCollection]) {\n        track.pos = RKHelper.extrapolateTrackPositions(track);\n      }\n    }\n\n    return Tracks;\n  }\n\n  /**\n   * Extrapolate tracks using RungeKutta propagator.\n   * @param track Track which is to be extrapolated.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false. Default just always returns true.\n   * @returns An array of track positions.\n\n   */\n  public static extrapolateTrackPositions(\n    track: { dparams: any },\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): any {\n    const dparams = track.dparams;\n    // ATLAS uses mm, MeV\n    let d0 = dparams[0],\n      z0 = dparams[1],\n      phi = dparams[2],\n      theta = dparams[3],\n      qop = dparams[4];\n\n    let p: number;\n    if (qop !== 0) {\n      p = Math.abs(1 / qop);\n    } else {\n      p = 0;\n    }\n    const q = Math.round(p * qop);\n\n    // ATLAS definition of momentum, so probably so move this calc there.\n    let globalMomentum = new Vector3(\n      p * Math.cos(phi) * Math.sin(theta),\n      p * Math.sin(phi) * Math.sin(theta),\n      p * Math.cos(theta)\n    );\n\n    // Cannot use setFromSphericalCoordinates since ATLAS and threejs use\n    // different phi & theta definitions (though both are right-handed)\n    let startPos = new Vector3(-d0 * Math.sin(phi), d0 * Math.cos(phi), z0);\n\n    // Wipe existing positions\n    let positions: number[][] = [];\n    positions.push([startPos.x, startPos.y, startPos.z]);\n\n    const startDir = globalMomentum.clone();\n    startDir.normalize();\n\n    // if (p  [\n      val.pos.x,\n      val.pos.y,\n      val.pos.z,\n    ]);\n\n    return positions.concat(extrapolatedPos);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RendererManager.html":{"url":"classes/RendererManager.html","title":"class - RendererManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RendererManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/renderer-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's renderer related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fixedOverlay\n                            \n                            \n                                    Private\n                                mainRenderer\n                            \n                            \n                                    Private\n                                overlayRenderer\n                            \n                            \n                                    Private\n                                renderers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addRenderer\n                            \n                            \n                                    Private\n                                containsObject\n                            \n                            \n                                    Public\n                                getLocalClipping\n                            \n                            \n                                getMainRenderer\n                            \n                            \n                                getOverlayRenderer\n                            \n                            \n                                getRenderers\n                            \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Private\n                                initRenderer\n                            \n                            \n                                isFixedOverlay\n                            \n                            \n                                    Public\n                                removeControls\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                setFixOverlay\n                            \n                            \n                                    Public\n                                setLocalClippingEnabled\n                            \n                            \n                                setMainRenderer\n                            \n                            \n                                    Public\n                                setOverlayRenderer\n                            \n                            \n                                setRenderers\n                            \n                            \n                                    Public\n                                swapRenderers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/three/renderer-manager.ts:14\n                            \n                        \n\n                \n                    \n                            Create the renderer manager by initializing the main renderer.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            fixedOverlay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/renderer-manager.ts:14\n                            \n                        \n\n                \n                    \n                        If the overlay is fixed or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            mainRenderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/three/renderer-manager.ts:8\n                            \n                        \n\n                \n                    \n                        Main renderer to be used by the event display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            overlayRenderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/three/renderer-manager.ts:10\n                            \n                        \n\n                \n                    \n                        Overlay renderer for rendering a secondary overlay canvas. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            renderers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/three/renderer-manager.ts:12\n                            \n                        \n\n                \n                    \n                        A list of all available/created renderers. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:152\n                \n            \n\n\n            \n                \n                    Add a renderer to the available renderers list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three.js WebGLRenderer to be added.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            containsObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    containsObject(obj: WebGLRenderer, list: WebGLRenderer[])\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:186\n                \n            \n\n\n            \n                \n                    Check if the list of available renderers contains a renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    obj\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The renderer to be checked for containment.\n\n                                    \n                                \n                                \n                                    list\n                                    \n                                            WebGLRenderer[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of available renderers.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If the list contains the renderer or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLocalClipping\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLocalClipping()\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:209\n                \n            \n\n\n            \n                \n                    Get if the local clipping for the first renderer is enabled or disabled.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        If the renderer local clipping is enabled or disabled.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMainRenderer\n                        \n                        \n                    \n                \n            \n            \n                \ngetMainRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:126\n                \n            \n\n\n            \n                \n                    Get the main renderer.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer\n\n                    \n                    \n                        The main renderer.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOverlayRenderer\n                        \n                        \n                    \n                \n            \n            \n                \ngetOverlayRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:134\n                \n            \n\n\n            \n                \n                    Get the renderer used for overlay.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer\n\n                    \n                    \n                        The overlay renderer.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRenderers\n                        \n                        \n                    \n                \n            \n            \n                \ngetRenderers()\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:142\n                \n            \n\n\n            \n                \n                    Get all the available renderers.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer[]\n\n                    \n                    \n                        A list of three.js WebGLRenderers\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init(elementId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:33\n                \n            \n\n\n            \n                \n                    Initialize the renderer manager by setting up the main renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    elementId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'eventDisplay'\n                                    \n\n                                    \n                                        ID of the wrapper element.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            initRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initRenderer(elementId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:63\n                \n            \n\n\n            \n                \n                    Set up the renderer with the DOM.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    elementId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the wrapper element.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isFixedOverlay\n                        \n                        \n                    \n                \n            \n            \n                \nisFixedOverlay()\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:219\n                \n            \n\n\n            \n                \n                    Check if the overlay is fixed or not.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If the overlay is fixed or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeControls\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeControls(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:162\n                \n            \n\n\n            \n                \n                    Remove a renderer from the available renderers list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three,js WebGLRenderer to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            render\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    render(scene: Scene, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:45\n                \n            \n\n\n            \n                \n                    Render the overlay.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event display scene to render.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Camera for render.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setFixOverlay\n                        \n                        \n                    \n                \n            \n            \n                \nsetFixOverlay(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:227\n                \n            \n\n\n            \n                \n                    Set if the overlay is to be fixed or not.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the overlay is to be fixed or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setLocalClippingEnabled\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setLocalClippingEnabled(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:199\n                \n            \n\n\n            \n                \n                    Set if local clipping is to be enabled or disabled for all the available renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the local clipping is to be enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setMainRenderer\n                        \n                        \n                    \n                \n            \n            \n                \nsetMainRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:96\n                \n            \n\n\n            \n                \n                    Set the main renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three.js WebGLRenderer.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setOverlayRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setOverlayRenderer(overlayCanvas: HTMLCanvasElement)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:104\n                \n            \n\n\n            \n                \n                    Set the renderer for overlay event display view.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    overlayCanvas\n                                    \n                                            HTMLCanvasElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Canvas on which the overlay is to be rendered.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setRenderers\n                        \n                        \n                    \n                \n            \n            \n                \nsetRenderers(renderers: WebGLRenderer[])\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:118\n                \n            \n\n\n            \n                \n                    Set the available renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderers\n                                    \n                                            WebGLRenderer[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of three.js WebGLRenderers.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            swapRenderers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:174\n                \n            \n\n\n            \n                \n                    Swap any two renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    rendererA\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer A to be swapped with renderer B.\n\n                                    \n                                \n                                \n                                    rendererB\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer B to be swapped with renderer A.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebGLRenderer, Scene, Camera } from 'three';\n\n/**\n * Manager for managing event display's renderer related functions.\n */\nexport class RendererManager {\n  /** Main renderer to be used by the event display. */\n  private mainRenderer: WebGLRenderer = null;\n  /** Overlay renderer for rendering a secondary overlay canvas. */\n  private overlayRenderer: WebGLRenderer = null;\n  /** A list of all available/created renderers. */\n  private renderers: WebGLRenderer[] = [];\n  /** If the overlay is fixed or not. */\n  private fixedOverlay: boolean;\n\n  /**\n   * Create the renderer manager by initializing the main renderer.\n   */\n  constructor() {\n    const renderer: WebGLRenderer = new WebGLRenderer({\n      antialias: true,\n      powerPreference: 'high-performance',\n    });\n\n    this.addRenderer(renderer);\n    this.setMainRenderer(renderer);\n  }\n\n  /**\n   * Initialize the renderer manager by setting up the main renderer.\n   * @param elementId ID of the wrapper element.\n   */\n  public init(elementId: string = 'eventDisplay') {\n    // Reset the animation loop\n    this.getMainRenderer().setAnimationLoop(null);\n    // Main renderer for current browsers\n    this.initRenderer(elementId);\n  }\n\n  /**\n   * Render the overlay.\n   * @param scene The event display scene to render.\n   * @param camera Camera for render.\n   */\n  public render(scene: Scene, camera: Camera) {\n    if (this.getOverlayRenderer()) {\n      if (!this.getOverlayRenderer().domElement.hidden) {\n        const sceneColor = scene.background;\n        scene.background = null;\n\n        if (!this.isFixedOverlay()) {\n          this.getOverlayRenderer().render(scene, camera);\n        }\n        scene.background = sceneColor;\n      }\n    }\n  }\n\n  /**\n   * Set up the renderer with the DOM.\n   * @param elementId ID of the wrapper element.\n   */\n  private initRenderer(elementId: string) {\n    let canvasWrapper = document.getElementById(elementId);\n    if (!canvasWrapper) {\n      canvasWrapper = document.body;\n    }\n\n    const rendererWidth = () =>\n      canvasWrapper.offsetWidth > 0\n        ? canvasWrapper.offsetWidth\n        : window.innerWidth;\n    const rendererHeight = () =>\n      canvasWrapper.offsetHeight > 0\n        ? canvasWrapper.offsetHeight\n        : window.innerHeight;\n\n    const mainRenderer = this.getMainRenderer();\n    mainRenderer.setSize(rendererWidth(), rendererHeight(), false);\n    mainRenderer.setPixelRatio(window.devicePixelRatio);\n    mainRenderer.domElement.id = 'three-canvas';\n\n    canvasWrapper.appendChild(this.getMainRenderer().domElement);\n\n    window.addEventListener('resize', () => {\n      mainRenderer.setSize(rendererWidth(), rendererHeight());\n    });\n  }\n\n  // SET/GET\n\n  /**\n   * Set the main renderer.\n   * @param renderer Three.js WebGLRenderer.\n   */\n  setMainRenderer(renderer: WebGLRenderer) {\n    this.mainRenderer = renderer;\n  }\n\n  /**\n   * Set the renderer for overlay event display view.\n   * @param overlayCanvas Canvas on which the overlay is to be rendered.\n   */\n  public setOverlayRenderer(overlayCanvas: HTMLCanvasElement): void {\n    const overlayRenderer: WebGLRenderer = new WebGLRenderer({\n      canvas: overlayCanvas,\n      antialias: false,\n      alpha: true,\n    });\n    this.addRenderer(overlayRenderer);\n    this.overlayRenderer = overlayRenderer;\n  }\n\n  /**\n   * Set the available renderers.\n   * @param renderers List of three.js WebGLRenderers.\n   */\n  setRenderers(renderers: WebGLRenderer[]) {\n    this.renderers = renderers;\n  }\n\n  /**\n   * Get the main renderer.\n   * @returns The main renderer.\n   */\n  getMainRenderer(): WebGLRenderer {\n    return this.mainRenderer;\n  }\n\n  /**\n   * Get the renderer used for overlay.\n   * @returns The overlay renderer.\n   */\n  getOverlayRenderer(): WebGLRenderer {\n    return this.overlayRenderer;\n  }\n\n  /**\n   * Get all the available renderers.\n   * @returns A list of three.js WebGLRenderers\n   */\n  getRenderers(): WebGLRenderer[] {\n    return this.renderers;\n  }\n\n  // FUNCTIONS\n\n  /**\n   * Add a renderer to the available renderers list.\n   * @param renderer Three.js WebGLRenderer to be added.\n   */\n  public addRenderer(renderer: WebGLRenderer) {\n    if (!this.containsObject(renderer, this.renderers)) {\n      this.renderers.push(renderer);\n    }\n  }\n\n  /**\n   * Remove a renderer from the available renderers list.\n   * @param renderer Three,js WebGLRenderer to be removed.\n   */\n  public removeControls(renderer: WebGLRenderer) {\n    const index: number = this.renderers.indexOf(renderer);\n    if (index > -1) {\n      this.renderers.splice(index, 1);\n    }\n  }\n\n  /**\n   * Swap any two renderers.\n   * @param rendererA Renderer A to be swapped with renderer B.\n   * @param rendererB Renderer B to be swapped with renderer A.\n   */\n  public swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer) {\n    const temp: WebGLRenderer = rendererA;\n    rendererA = rendererB;\n    rendererB = temp;\n  }\n\n  /**\n   * Check if the list of available renderers contains a renderer.\n   * @param obj The renderer to be checked for containment.\n   * @param list List of available renderers.\n   * @returns If the list contains the renderer or not.\n   */\n  private containsObject(obj: WebGLRenderer, list: WebGLRenderer[]): boolean {\n    for (const object of list) {\n      if (object === obj) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set if local clipping is to be enabled or disabled for all the available renderers.\n   * @param value If the local clipping is to be enabled or disabled.\n   */\n  public setLocalClippingEnabled(value: boolean) {\n    for (const renderer of this.renderers) {\n      renderer.localClippingEnabled = value;\n    }\n  }\n\n  /**\n   * Get if the local clipping for the first renderer is enabled or disabled.\n   * @returns If the renderer local clipping is enabled or disabled.\n   */\n  public getLocalClipping() {\n    if (this.renderers.length > 0) {\n      return this.renderers[0].localClippingEnabled;\n    }\n  }\n\n  /**\n   * Check if the overlay is fixed or not.\n   * @returns If the overlay is fixed or not.\n   */\n  isFixedOverlay(): boolean {\n    return this.fixedOverlay;\n  }\n\n  /**\n   * Set if the overlay is to be fixed or not.\n   * @param value If the overlay is to be fixed or not.\n   */\n  setFixOverlay(value: boolean) {\n    this.fixedOverlay = value;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RungeKutta.html":{"url":"classes/RungeKutta.html","title":"class - RungeKutta","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RungeKutta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n            \n                Description\n            \n            \n                Class for performing Runge-Kutta operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                propagate\n                            \n                            \n                                    Static\n                                step\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            propagate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    propagate(startPos: Vector3, startDir: Vector3, p: number, q: number, mss: number, plength: number, inbounds: (pos: Vector3) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:126\n                \n            \n\n\n            \n                \n                    Propagate using the given properties by performing the Runge-Kutta steps.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    startPos\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Starting position in 3D space.\n\n                                    \n                                \n                                \n                                    startDir\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Starting direction in 3D space.\n\n                                    \n                                \n                                \n                                    p\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Momentum.\n\n                                    \n                                \n                                \n                                    q\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Charge.\n\n                                    \n                                \n                                \n                                    mss\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        -1\n                                    \n\n                                    \n                                        Max step size.\n\n                                    \n                                \n                                \n                                    plength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1000\n                                    \n\n                                    \n                                        Path length.\n\n                                    \n                                \n                                \n                                    inbounds\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        () => true\n                                    \n\n                                    \n                                        Function which returns true until the passed position\nis out of bounds, when it returns false.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type[]\n\n                    \n                    \n                        An array containing position and direction at that position calculated\nthrough the Runge-Kutta steps.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            step\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    step(state: State)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:12\n                \n            \n\n\n            \n                \n                    Perform a Runge-Kutta step for the given state.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                State\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State at which the step is to be performed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The computed step size.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(half_h))\n        .add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir\n        .clone()\n        .add(k1.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir\n        .clone()\n        .add(k2.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(h))\n        .add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir\n        .clone()\n        .add(k3.clone().multiplyScalar(h))\n        .cross(B_last)\n        .multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return (\n        h *\n        (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z))\n      );\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    let fh: number = state.stepSize;\n    let fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(\n      k1\n        .clone()\n        .add(k2)\n        .add(k3)\n        .multiplyScalar(fh2 / 6)\n    );\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(\n      k1\n        .clone()\n        .add(k2.clone().multiplyScalar(2))\n        .add(k3.clone().multiplyScalar(2))\n        .add(k4)\n        .multiplyScalar(fh / 6)\n    );\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3,\n    startDir: Vector3,\n    p: number,\n    q: number,\n    mss: number = -1,\n    plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3; dir: Vector3 }[] {\n    let rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    let result: { pos: Vector3; dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScriptLoader.html":{"url":"classes/ScriptLoader.html","title":"class - ScriptLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScriptLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/script-loader.ts\n        \n\n            \n                Description\n            \n            \n                Script loader for dynamically loading external scripts.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Async\n                                loadJSRootScripts\n                            \n                            \n                                    Static\n                                loadScript\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            Async\n                            loadJSRootScripts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadJSRootScripts(jsrootVersion: string)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/script-loader.ts:15\n                \n            \n\n\n            \n                \n                    Synchronously load all JSRoot scripts. ONLY CALL ONCE.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    jsrootVersion\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'latest'\n                                    \n\n                                    \n                                        Version of JSROOT to use. Defaults to latest.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        Promise resolved with JSROOT global varilable.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            loadScript\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadScript(scriptURL: string, scriptFor?: string, parentElement: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/script-loader.ts:46\n                \n            \n\n\n            \n                \n                    Load a script dynamically from a URL.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    scriptURL\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        URL of the script to be loaded.\n\n                                    \n                                \n                                \n                                    scriptFor\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Optional data attribute to identify what the script is for. [data-scriptFor]\n\n                                    \n                                \n                                \n                                    parentElement\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        document.getElementsByTagName('head')[0]\n                                    \n\n                                    \n                                        Parent element to which the script is to be appended.\nDefaults to  tag.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise for the script load.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { LoadingManager } from '../managers/loading-manager';\n\n/** Global JSROOT variable for accessing functions after loading JSRoot scripts. */\ndeclare const JSROOT: any;\n\n/**\n * Script loader for dynamically loading external scripts.\n */\nexport class ScriptLoader {\n  /**\n   * Synchronously load all JSRoot scripts. ONLY CALL ONCE.\n   * @param jsrootVersion Version of JSROOT to use. Defaults to latest.\n   * @returns Promise resolved with JSROOT global varilable.\n   */\n  public static async loadJSRootScripts(\n    jsrootVersion: string = 'latest'\n  ): Promise {\n    const loadingManager = new LoadingManager();\n    loadingManager.addLoadableItem('jsroot_scripts');\n\n    const JSROOT_CDN_URL = `https://cdn.jsdelivr.net/npm/jsroot@${jsrootVersion}/scripts/`;\n    const allScripts = [\n      'JSRoot.core.js',\n      'three.extra.min.js',\n      'JSRoot.csg.js',\n      'JSRoot.painter.js',\n      'JSRoot.geom.js',\n    ];\n    for (const script of allScripts) {\n      await ScriptLoader.loadScript(JSROOT_CDN_URL + script, 'JSROOT');\n    }\n\n    loadingManager.itemLoaded('jsroot_scripts');\n\n    return JSROOT;\n  }\n\n  /**\n   * Load a script dynamically from a URL.\n   * @param scriptURL URL of the script to be loaded.\n   * @param scriptFor Optional data attribute to identify what the script is for. `[data-scriptFor]`\n   * @param parentElement Parent element to which the script is to be appended.\n   * Defaults to `` tag.\n   * @returns Promise for the script load.\n   */\n  public static loadScript(\n    scriptURL: string,\n    scriptFor?: string,\n    parentElement: HTMLElement = document.getElementsByTagName('head')[0]\n  ): Promise {\n    const loadingManager = new LoadingManager();\n    loadingManager.addLoadableItem('single_script');\n\n    return new Promise((resolve, reject) => {\n      const scriptExists = document.querySelectorAll(\n        'script[src=\"' + scriptURL + '\"]'\n      );\n\n      // If no script exists - add one\n      if (scriptExists.length === 0) {\n        const scriptElement = document.createElement('script');\n        scriptElement.type = 'text/javascript';\n        scriptElement.src = scriptURL;\n        if (scriptFor) {\n          scriptElement.setAttribute('data-scriptfor', scriptFor);\n        }\n\n        scriptElement.addEventListener('load', () => {\n          scriptElement.setAttribute('data-loaded', 'true');\n          resolve();\n          loadingManager.itemLoaded('single_script');\n        });\n        scriptElement.onerror = (event) => {\n          console.error('ERROR LOADING SCRIPT: ', event);\n          reject();\n          loadingManager.itemLoaded('single_script');\n        };\n\n        parentElement.appendChild(scriptElement);\n      } else {\n        // If script has already loaded then resolve else wait for it to load\n        if (scriptExists[0].dataset.loaded === 'true') {\n          resolve();\n          loadingManager.itemLoaded('single_script');\n        } else {\n          scriptExists[0].addEventListener('load', () => {\n            resolve();\n            loadingManager.itemLoaded('single_script');\n          });\n        }\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectionManager.html":{"url":"classes/SelectionManager.html","title":"class - SelectionManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectionManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/selection-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's selection related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeObject\n                            \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Private\n                                effectsManager\n                            \n                            \n                                    Private\n                                ignoreList\n                            \n                            \n                                    Private\n                                infoLogger\n                            \n                            \n                                    Private\n                                isInit\n                            \n                            \n                                    Private\n                                onDocumentMouseDown\n                            \n                            \n                                    Private\n                                onTouchDown\n                            \n                            \n                                    Private\n                                onTouchMove\n                            \n                            \n                                    Private\n                                outlinePass\n                            \n                            \n                                    Private\n                                preSelectionAntialias\n                            \n                            \n                                    Private\n                                scene\n                            \n                            \n                                    Private\n                                selectedObject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                disableSelecting\n                            \n                            \n                                    Private\n                                enableSelecting\n                            \n                            \n                                    Public\n                                getActiveObjectId\n                            \n                            \n                                    Public\n                                highlightObject\n                            \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Private\n                                intersectObject\n                            \n                            \n                                    Public\n                                setSelectedObject\n                            \n                            \n                                    Public\n                                setSelecting\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/three/selection-manager.ts:54\n                            \n                        \n\n                \n                    \n                            Constructor for the selection manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            activeObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    uuid: '',\n    callbacks: [],\n    update: function (uuid: string) {\n      this.uuid = uuid;\n      for (const callback of this.callbacks) {\n        callback(uuid);\n      }\n    },\n    onUpdate: function (callback: (uuid: string) => void) {\n      this.callbacks.push(callback);\n    },\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:29\n                            \n                        \n\n                \n                    \n                        The currently selected object which is observable for changes. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            camera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:23\n                            \n                        \n\n                \n                    \n                        The camera inside the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            effectsManager\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EffectsManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:49\n                            \n                        \n\n                \n                    \n                        Manager for managing three.js event display effects like outline pass and unreal bloom. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ignoreList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:43\n                            \n                        \n\n                \n                    \n                        Objects to be ignored on hovering over the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            infoLogger\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         InfoLogger\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:52\n                            \n                        \n\n                \n                    \n                        Service for logging data to the information panel. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            isInit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:21\n                            \n                        \n\n                \n                    \n                        Is initialized. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onDocumentMouseDown\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:169\n                            \n                        \n\n                \n                    \n                        Function to call on mouse click when object selection is enabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onTouchDown\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:218\n                            \n                        \n\n                \n                    \n                        Function to call on touch when object selection is enabled.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        event\n                                                        \n                                                                Event containing touch data.\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onTouchMove\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:156\n                            \n                        \n\n                \n                    \n                        Function to call on mouse move when object selection is enabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            outlinePass\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     OutlinePass\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:47\n                            \n                        \n\n                \n                    \n                        Outline pass for highlighting the hovered over event display elements. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            preSelectionAntialias\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:54\n                            \n                        \n\n                \n                    \n                        Performance mode value before enabling selection. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            scene\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Scene\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:25\n                            \n                        \n\n                \n                    \n                        The scene used for event display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            selectedObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:27\n                            \n                        \n\n                \n                    \n                        Object used to display the information of the selected 3D object. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            disableSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    disableSelecting()\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:139\n                \n            \n\n\n            \n                \n                    Disable selecting of event display elements and remove mouse move and click events.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            enableSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    enableSelecting()\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:122\n                \n            \n\n\n            \n                \n                    Enable selecting of event display elements and set mouse move and click events.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getActiveObjectId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getActiveObjectId()\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:105\n                \n            \n\n\n            \n                \n                    Get the uuid of the currently selected object.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        uuid of the currently selected object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightObject(uuid: string, objectsGroup: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:252\n                \n            \n\n\n            \n                \n                    Highlight the object with the given uuid by giving it an outline.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        uuid of the object.\n\n                                    \n                                \n                                \n                                    objectsGroup\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group of objects to be traversed for finding the object\nwith the given uuid.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init(camera: Camera, scene: Scene, effectsManager: EffectsManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:76\n                \n            \n\n\n            \n                \n                    Initialize the selection manager.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene used for event display.\n\n                                    \n                                \n                                \n                                    effectsManager\n                                    \n                                                EffectsManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager for managing three.js event display effects\nlike outline pass and unreal bloom.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            intersectObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    intersectObject(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:229\n                \n            \n\n\n            \n                \n                    Check if any object intersects on mouse move.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event containing data of the mouse move.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Intersected or hovered over object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSelectedObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSelectedObject(selectedObject: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:94\n                \n            \n\n\n            \n                \n                    Set the currently selected object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selectedObject\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The currently selected object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSelecting(enable: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:113\n                \n            \n\n\n            \n                \n                    Set if selecting is to be enabled or disabled.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    enable\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If selecting is to be enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Vector2,\n  Raycaster,\n  Camera,\n  Scene,\n  Object3D,\n  DirectionalLight,\n  AmbientLight,\n  AxesHelper,\n} from 'three';\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass.js';\nimport { InfoLogger } from '../info-logger';\nimport { EffectsManager } from './effects-manager';\nimport { PrettySymbols } from '../helpers/pretty-symbols';\n\n/**\n * Manager for managing event display's selection related functions.\n */\nexport class SelectionManager {\n  /** Is initialized. */\n  private isInit: boolean;\n  /** The camera inside the scene. */\n  private camera: Camera;\n  /** The scene used for event display. */\n  private scene: Scene;\n  /** Object used to display the information of the selected 3D object. */\n  private selectedObject: { name: string; attributes: any[] };\n  /** The currently selected object which is observable for changes. */\n  private activeObject = {\n    uuid: '',\n    callbacks: [],\n    update: function (uuid: string) {\n      this.uuid = uuid;\n      for (const callback of this.callbacks) {\n        callback(uuid);\n      }\n    },\n    onUpdate: function (callback: (uuid: string) => void) {\n      this.callbacks.push(callback);\n    },\n  };\n  /** Objects to be ignored on hovering over the scene. */\n  private ignoreList: string[];\n\n  // Post processing\n  /** Outline pass for highlighting the hovered over event display elements. */\n  private outlinePass: OutlinePass;\n  /** Manager for managing three.js event display effects like outline pass and unreal bloom. */\n  private effectsManager: EffectsManager;\n\n  /** Service for logging data to the information panel. */\n  private infoLogger: InfoLogger;\n  /** Performance mode value before enabling selection. */\n  private preSelectionAntialias: boolean;\n\n  /**\n   * Constructor for the selection manager.\n   */\n  constructor() {\n    this.isInit = false;\n    this.ignoreList = [\n      new AmbientLight().type,\n      new DirectionalLight().type,\n      new AxesHelper().type,\n    ];\n  }\n\n  /**\n   * Initialize the selection manager.\n   * @param camera The camera inside the scene.\n   * @param scene The scene used for event display.\n   * @param effectsManager Manager for managing three.js event display effects\n   * like outline pass and unreal bloom.\n   * @param infoLogger Service for logging data to the information panel.\n   */\n  public init(\n    camera: Camera,\n    scene: Scene,\n    effectsManager: EffectsManager,\n    infoLogger: InfoLogger\n  ) {\n    this.camera = camera;\n    this.scene = scene;\n    this.isInit = true;\n    this.infoLogger = infoLogger;\n    this.effectsManager = effectsManager;\n    this.outlinePass = this.effectsManager.addOutlinePassForSelection();\n  }\n\n  /**\n   * Set the currently selected object.\n   * @param selectedObject The currently selected object.\n   */\n  public setSelectedObject(selectedObject: {\n    name: string;\n    attributes: any[];\n  }) {\n    this.selectedObject = selectedObject;\n  }\n\n  /**\n   * Get the uuid of the currently selected object.\n   * @returns uuid of the currently selected object.\n   */\n  public getActiveObjectId(): any {\n    return this.activeObject;\n  }\n\n  /**\n   * Set if selecting is to be enabled or disabled.\n   * @param enable If selecting is to be enabled or disabled.\n   */\n  public setSelecting(enable: boolean) {\n    if (this.isInit) {\n      enable ? this.enableSelecting() : this.disableSelecting();\n    }\n  }\n\n  /**\n   * Enable selecting of event display elements and set mouse move and click events.\n   */\n  private enableSelecting() {\n    document\n      .getElementById('three-canvas')\n      .addEventListener('mousemove', this.onTouchMove, true);\n    document\n      .getElementById('three-canvas')\n      .addEventListener('click', this.onDocumentMouseDown, true);\n    document\n      .getElementById('three-canvas')\n      .addEventListener('touchstart', this.onTouchDown);\n    this.preSelectionAntialias = this.effectsManager.antialiasing;\n    this.effectsManager.setAntialiasing(false);\n  }\n\n  /**\n   * Disable selecting of event display elements and remove mouse move and click events.\n   */\n  private disableSelecting() {\n    document\n      .getElementById('three-canvas')\n      .removeEventListener('mousemove', this.onTouchMove, true);\n    document\n      .getElementById('three-canvas')\n      .removeEventListener('click', this.onDocumentMouseDown, true);\n    document\n      .getElementById('three-canvas')\n      .removeEventListener('touchstart', this.onTouchDown);\n    this.outlinePass.selectedObjects = [];\n    this.effectsManager.setAntialiasing(this.preSelectionAntialias);\n  }\n\n  /**\n   * Function to call on mouse move when object selection is enabled.\n   */\n  private onTouchMove = (event: any) => {\n    const intersectedObject = this.intersectObject(event);\n    if (intersectedObject) {\n      if (this.ignoreList.includes(intersectedObject.type)) {\n        return;\n      }\n      this.outlinePass.selectedObjects = [intersectedObject];\n    }\n  };\n\n  /**\n   * Function to call on mouse click when object selection is enabled.\n   */\n  private onDocumentMouseDown = () => {\n    const intersectedObject = this.outlinePass.selectedObjects[0];\n    if (intersectedObject) {\n      this.selectedObject.name = intersectedObject.name;\n      this.selectedObject.attributes.splice(\n        0,\n        this.selectedObject.attributes.length\n      );\n\n      this.activeObject.update(intersectedObject.uuid);\n\n      const prettyParams = PrettySymbols.getPrettyParams(\n        intersectedObject.userData\n      );\n\n      for (const key of Object.keys(prettyParams)) {\n        this.selectedObject.attributes.push({\n          attributeName: key,\n          attributeValue: prettyParams[key],\n        });\n      }\n\n      // Process properties of the selected object\n      const props = Object.keys(intersectedObject.userData)\n        .map((key) => {\n          // Only take properties that are a string or number (no arrays or objects)\n          if (\n            ['string', 'number'].includes(\n              typeof intersectedObject.userData[key]\n            )\n          ) {\n            return key + '=' + intersectedObject.userData[key];\n          }\n        })\n        .filter((val) => val);\n      // Build the log text and add to the logger\n      const log =\n        intersectedObject.name +\n        (props.length > 0 ? ' with ' + props.join(', ') : '');\n      if (log) {\n        this.infoLogger.add(log, 'Clicked');\n      }\n    }\n  };\n\n  /**\n   * Function to call on touch when object selection is enabled.\n   * @param event Event containing touch data.\n   */\n  private onTouchDown = (event: TouchEvent) => {\n    event.preventDefault();\n    this.onTouchMove(event.targetTouches[0]);\n    this.onDocumentMouseDown();\n  };\n\n  /**\n   * Check if any object intersects on mouse move.\n   * @param event Event containing data of the mouse move.\n   * @returns Intersected or hovered over object.\n   */\n  private intersectObject(event: any): Object3D {\n    event.preventDefault?.();\n    const mouse = new Vector2();\n    const rendererElement = this.effectsManager.composer.renderer.domElement;\n    mouse.x = (event.clientX / rendererElement.clientWidth) * 2 - 1;\n    mouse.y = -(event.clientY / rendererElement.clientHeight) * 2 + 1;\n    const raycaster = new Raycaster();\n    raycaster.setFromCamera(mouse, this.camera);\n    raycaster.params.Line.threshold = 3;\n    const intersects = raycaster.intersectObjects(this.scene.children, true);\n\n    if (intersects.length > 0) {\n      // We want the closest one\n      return intersects[0].object;\n    }\n  }\n\n  /**\n   * Highlight the object with the given uuid by giving it an outline.\n   * @param uuid uuid of the object.\n   * @param objectsGroup Group of objects to be traversed for finding the object\n   * with the given uuid.\n   */\n  public highlightObject(uuid: string, objectsGroup: Object3D) {\n    const object = objectsGroup.getObjectByProperty('uuid', uuid);\n    if (object) {\n      this.outlinePass.selectedObjects = [object];\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/State.html":{"url":"classes/State.html","title":"class - State","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  State\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n            \n                Description\n            \n            \n                State of the particle.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dir\n                            \n                            \n                                maxStepSize\n                            \n                            \n                                p\n                            \n                            \n                                pathLength\n                            \n                            \n                                pos\n                            \n                            \n                                q\n                            \n                            \n                                stepSize\n                            \n                            \n                                unitC\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dir\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Vector3\n\n                        \n                    \n                    \n                        \n                            Default value : new Vector3(0, 0, 0)\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:170\n                            \n                        \n\n                \n                    \n                        Direction. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            maxStepSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:180\n                            \n                        \n\n                \n                    \n                        Max step size. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            p\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:172\n                            \n                        \n\n                \n                    \n                        Momentum. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pathLength\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:182\n                            \n                        \n\n                \n                    \n                        Path length.. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Vector3\n\n                        \n                    \n                    \n                        \n                            Default value : new Vector3(0, 0, 0)\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:168\n                            \n                        \n\n                \n                    \n                        Position. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            q\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:174\n                            \n                        \n\n                \n                    \n                        Charge. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            stepSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1000\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:178\n                            \n                        \n\n                \n                    \n                        Step size. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            unitC\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 3.3333\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:176\n                            \n                        \n\n                \n                    \n                        Unit. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(half_h))\n        .add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir\n        .clone()\n        .add(k1.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir\n        .clone()\n        .add(k2.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(h))\n        .add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir\n        .clone()\n        .add(k3.clone().multiplyScalar(h))\n        .cross(B_last)\n        .multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return (\n        h *\n        (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z))\n      );\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    let fh: number = state.stepSize;\n    let fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(\n      k1\n        .clone()\n        .add(k2)\n        .add(k3)\n        .multiplyScalar(fh2 / 6)\n    );\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(\n      k1\n        .clone()\n        .add(k2.clone().multiplyScalar(2))\n        .add(k3.clone().multiplyScalar(2))\n        .add(k4)\n        .multiplyScalar(fh / 6)\n    );\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3,\n    startDir: Vector3,\n    p: number,\n    q: number,\n    mss: number = -1,\n    plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3; dir: Vector3 }[] {\n    let rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    let result: { pos: Vector3; dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StateManager.html":{"url":"classes/StateManager.html","title":"class - StateManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StateManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/state-manager.ts\n        \n\n            \n                Description\n            \n            \n                A singleton manager for managing the scene's state.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                activeCamera\n                            \n                            \n                                clippingAngle\n                            \n                            \n                                clippingEnabled\n                            \n                            \n                                eventDisplay\n                            \n                            \n                                    Private\n                                    Static\n                                instance\n                            \n                            \n                                phoenixMenuRoot\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getInstance\n                            \n                            \n                                loadStateFromJSON\n                            \n                            \n                                saveStateAsJSON\n                            \n                            \n                                setCamera\n                            \n                            \n                                setClippingAngle\n                            \n                            \n                                setClippingEnabled\n                            \n                            \n                                setEventDisplay\n                            \n                            \n                                setPhoenixMenuRoot\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/state-manager.ts:21\n                            \n                        \n\n                \n                    \n                            Create the state manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            activeCamera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:19\n                            \n                        \n\n                \n                    \n                        The active camera. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clippingAngle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:17\n                            \n                        \n\n                \n                    \n                        Angle of the clipping. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clippingEnabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:15\n                            \n                        \n\n                \n                    \n                        Whether the clipping is enabled or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            eventDisplay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EventDisplay\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:21\n                            \n                        \n\n                \n                    \n                        The event display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            instance\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         StateManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:11\n                            \n                        \n\n                \n                    \n                        Instance of the state manager. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phoenixMenuRoot\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:13\n                            \n                        \n\n                \n                    \n                        Root node of the phoenix menu. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getInstance\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInstance()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:38\n                \n            \n\n\n            \n                \n                    Get the instance of state manager.\n\n\n                    \n                    \n                    \n                        Returns :         StateManager\n\n                    \n                    \n                        The state manager instance.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadStateFromJSON\n                        \n                        \n                    \n                \n            \n            \n                \nloadStateFromJSON(json: string | object)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:88\n                \n            \n\n\n            \n                \n                    Load the state from JSON.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    json\n                                    \n                                            string | object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        JSON for state.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            saveStateAsJSON\n                        \n                        \n                    \n                \n            \n            \n                \nsaveStateAsJSON()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:72\n                \n            \n\n\n            \n                \n                    Save the state of the event display as JSON.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setCamera\n                        \n                        \n                    \n                \n            \n            \n                \nsetCamera(camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:134\n                \n            \n\n\n            \n                \n                    Set the scene camera for state.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setClippingAngle\n                        \n                        \n                    \n                \n            \n            \n                \nsetClippingAngle(angle: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:126\n                \n            \n\n\n            \n                \n                    Set the angle of clipping.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    angle\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Angle fo clipping.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setClippingEnabled\n                        \n                        \n                    \n                \n            \n            \n                \nsetClippingEnabled(clipping: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:118\n                \n            \n\n\n            \n                \n                    Set the state of clipping.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    clipping\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether the clipping is enabled or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setEventDisplay\n                        \n                        \n                    \n                \n            \n            \n                \nsetEventDisplay(eventDisplay: EventDisplay)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:142\n                \n            \n\n\n            \n                \n                    Set the event display.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventDisplay\n                                    \n                                                EventDisplay\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event display.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setPhoenixMenuRoot\n                        \n                        \n                    \n                \n            \n            \n                \nsetPhoenixMenuRoot(phoenixMenuRoot: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:46\n                \n            \n\n\n            \n                \n                    Set the root node of Phoenix menu.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    phoenixMenuRoot\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Phoenix menu root node.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventDisplay } from '../event-display';\nimport { Camera } from 'three';\nimport { PhoenixMenuNode } from '../ui/phoenix-menu/phoenix-menu-node';\nimport { loadFile, saveFile } from '../helpers/file';\n\n/**\n * A singleton manager for managing the scene's state.\n */\nexport class StateManager {\n  /** Instance of the state manager. */\n  private static instance: StateManager;\n  /** Root node of the phoenix menu. */\n  phoenixMenuRoot: PhoenixMenuNode;\n  /** Whether the clipping is enabled or not. */\n  clippingEnabled: boolean;\n  /** Angle of the clipping. */\n  clippingAngle: number;\n  /** The active camera. */\n  activeCamera: Camera;\n  /** The event display. */\n  eventDisplay: EventDisplay;\n\n  /**\n   * Create the state manager.\n   * @returns The state manager instance.\n   */\n  constructor() {\n    if (StateManager.instance === undefined) {\n      StateManager.instance = this;\n    }\n    return StateManager.instance;\n  }\n\n  /**\n   * Get the instance of state manager.\n   * @returns The state manager instance.\n   */\n  static getInstance(): StateManager {\n    return StateManager.instance;\n  }\n\n  /**\n   * Set the root node of Phoenix menu.\n   * @param phoenixMenuRoot Phoenix menu root node.\n   */\n  setPhoenixMenuRoot(phoenixMenuRoot: PhoenixMenuNode) {\n    this.phoenixMenuRoot = phoenixMenuRoot;\n\n    if (this.phoenixMenuRoot) {\n      // Add save and load config buttons to the root node\n      this.phoenixMenuRoot\n        .addConfig('button', {\n          label: 'Save state',\n          onClick: () => {\n            this.saveStateAsJSON();\n          },\n        })\n        .addConfig('button', {\n          label: 'Load state',\n          onClick: () => {\n            loadFile((data) => {\n              this.loadStateFromJSON(JSON.parse(data));\n            });\n          },\n        });\n    }\n  }\n\n  /**\n   * Save the state of the event display as JSON.\n   */\n  saveStateAsJSON() {\n    const state: object = {\n      phoenixMenu: this.phoenixMenuRoot.getNodeState(),\n      eventDisplay: {\n        cameraPosition: this.activeCamera.position.toArray(),\n        clippingAngle: this.clippingEnabled ? this.clippingAngle : null,\n      },\n    };\n\n    saveFile(JSON.stringify(state), 'phoenix-config.json');\n  }\n\n  /**\n   * Load the state from JSON.\n   * @param json JSON for state.\n   */\n  loadStateFromJSON(json: string | object) {\n    let jsonData: object;\n    if (typeof json === 'string') {\n      jsonData = JSON.parse(json);\n    } else {\n      jsonData = json;\n    }\n\n    if (jsonData['phoenixMenu']) {\n      this.phoenixMenuRoot.loadStateFromJSON(jsonData['phoenixMenu']);\n      this.phoenixMenuRoot.configActive = false;\n    }\n\n    if (jsonData['eventDisplay']) {\n      this.activeCamera.position.fromArray(\n        jsonData['eventDisplay']?.['cameraPosition']\n      );\n      if (jsonData['eventDisplay']?.['clippingAngle']) {\n        this.eventDisplay.getUIManager().setClipping(true);\n        this.eventDisplay\n          .getUIManager()\n          .rotateClipping(jsonData['eventDisplay']['clippingAngle']);\n      }\n    }\n  }\n\n  /**\n   * Set the state of clipping.\n   * @param clipping Whether the clipping is enabled or not.\n   */\n  setClippingEnabled(clipping: boolean) {\n    this.clippingEnabled = clipping;\n  }\n\n  /**\n   * Set the angle of clipping.\n   * @param angle Angle fo clipping.\n   */\n  setClippingAngle(angle: number) {\n    this.clippingAngle = angle;\n  }\n\n  /**\n   * Set the scene camera for state.\n   * @param camera The camera.\n   */\n  setCamera(camera: Camera) {\n    this.activeCamera = camera;\n  }\n\n  /**\n   * Set the event display.\n   * @param eventDisplay The event display.\n   */\n  setEventDisplay(eventDisplay: EventDisplay) {\n    this.eventDisplay = eventDisplay;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrackmlLoader.html":{"url":"classes/TrackmlLoader.html","title":"class - TrackmlLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrackmlLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/trackml-loader.ts\n        \n\n            \n                Description\n            \n            \n                PhoenixLoader for processing and loading an event from TrackML.\n\n            \n\n            \n                Extends\n            \n            \n                        PhoenixLoader\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                hitData\n                            \n                            \n                                    Private\n                                particleData\n                            \n                            \n                                    Private\n                                truthData\n                            \n                            \n                                    Protected\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Protected\n                                labelsObject\n                            \n                            \n                                    Protected\n                                loadingManager\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getEventData\n                            \n                            \n                                    Public\n                                processHits\n                            \n                            \n                                    Public\n                                processParticles\n                            \n                            \n                                    Public\n                                processTruth\n                            \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Public\n                                addLabelToEventObject\n                            \n                            \n                                    Protected\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Public\n                                getLabelsObject\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                    Protected\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/loaders/trackml-loader.ts:12\n                            \n                        \n\n                \n                    \n                            Instiantiate the TrackML loader.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            hitData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/trackml-loader.ts:8\n                            \n                        \n\n                \n                    \n                        Data containing Hits. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            particleData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/trackml-loader.ts:10\n                            \n                        \n\n                \n                    \n                        Data containing Particles. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            truthData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/trackml-loader.ts:12\n                            \n                        \n\n                \n                    \n                        Data containing truthy Particles. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:21\n\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:17\n\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            labelsObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:25\n\n                            \n                        \n\n                \n                    \n                        Object containing event object labels. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            loadingManager\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LoadingManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:23\n\n                            \n                        \n\n                \n                    \n                        Loading manager for loadable resources \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:19\n\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventData(eventNum: string)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/trackml-loader.ts:102\n                \n            \n\n\n            \n                \n                    Get structured event data from the processed Hits, Truth data and Particles.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventNum\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event number.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processHits\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processHits(hits: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/trackml-loader.ts:28\n                \n            \n\n\n            \n                \n                    Process Hits to format and store them.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hits\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Hits to be processed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processParticles\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processParticles(particles: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/trackml-loader.ts:48\n                \n            \n\n\n            \n                \n                    Process Particles to format and store them.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    particles\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Particles to be processed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processTruth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processTruth(truth: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/trackml-loader.ts:77\n                \n            \n\n\n            \n                \n                    Process Truth data to format and store it.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    truth\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Truth data to be processed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:301\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLabelToEventObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabelToEventObject(label: string, collection: string, indexInCollection: number)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:450\n\n                \n            \n\n\n            \n                \n                    Add label of event object to the labels object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to be saved.\n\n                                    \n                                \n                                \n                                    collection\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Collection the event object is a part of.\n\n                                    \n                                \n                                \n                                    indexInCollection\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event object's index in collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A unique label ID string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[], extendEventDataTypeUI?: (typeFolder?: any,typeFolderPM?: PhoenixMenuNode) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:257\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                                \n                                    extendEventDataTypeUI\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A callback to add more options to event data type UI folder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:42\n\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphics library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:113\n\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:89\n\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:396\n\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:73\n\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLabelsObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLabelsObject()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:476\n\n                \n            \n\n\n            \n                \n                    Get the object containing labels.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The labels object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:343\n\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:326\n\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:134\n\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PhoenixLoader } from './phoenix-loader';\n\n/**\n * PhoenixLoader for processing and loading an event from TrackML.\n */\nexport class TrackmlLoader extends PhoenixLoader {\n  /** Data containing Hits. */\n  private hitData: any;\n  /** Data containing Particles. */\n  private particleData: any;\n  /** Data containing truthy Particles. */\n  private truthData: any;\n\n  /**\n   * Instiantiate the TrackML loader.\n   */\n  constructor() {\n    super();\n    this.hitData = [];\n    this.particleData = [];\n    this.truthData = {};\n  }\n\n  /**\n   * Process Hits to format and store them.\n   * @param hits Hits to be processed.\n   */\n  public processHits(hits: any) {\n    const data = hits.split('\\n');\n    console.log('Event has this many hits:', data.length);\n\n    let values;\n    // format is: hit_id,x,y,z,volume_id,layer_id,module_id\n    for (let line = 1; line \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/URLOptionsManager.html":{"url":"classes/URLOptionsManager.html","title":"class - URLOptionsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  URLOptionsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/url-options-manager.ts\n        \n\n            \n                Description\n            \n            \n                A manager for managing options given through URL.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                urlOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                applyEventOptions\n                            \n                            \n                                    Public\n                                applyHideWidgetsOption\n                            \n                            \n                                    Public\n                                applyOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventDisplay: EventDisplay, configuration: Configuration)\n                    \n                \n                        \n                            \n                                Defined in src/managers/url-options-manager.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor for the URL options manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        eventDisplay\n                                                  \n                                                        \n                                                                        EventDisplay\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The Phoenix event display.\n\n                                                        \n                                                \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        Configuration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Configuration of the event display.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            urlOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     URLSearchParams\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/url-options-manager.ts:12\n                            \n                        \n\n                \n                    \n                        Variable containing all URL search parameters. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            applyEventOptions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    applyEventOptions(defaultEventPath?: string, defaultEventType?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:47\n                \n            \n\n\n            \n                \n                    Initialize the event display with event data and configuration from URL.\n(Only JiveXML and JSON)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    defaultEventPath\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Default event path to fallback to if none in URL.\n\n                                    \n                                \n                                \n                                    defaultEventType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Default event type to fallback to if none in URL.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            applyHideWidgetsOption\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    applyHideWidgetsOption()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:118\n                \n            \n\n\n            \n                \n                    Hide all overlay widgets if \"hideWidgets\" option from the URL is true.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            applyOptions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    applyOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:32\n                \n            \n\n\n            \n                \n                    Initialize and apply all URL options on page load.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { JiveXMLLoader } from '../loaders/jivexml-loader';\nimport { PhoenixLoader } from '../loaders/phoenix-loader';\nimport { Configuration } from '../extras/configuration';\nimport { EventDisplay } from '../event-display';\nimport { StateManager } from './state-manager';\n\n/**\n * A manager for managing options given through URL.\n */\nexport class URLOptionsManager {\n  /** Variable containing all URL search parameters. */\n  private urlOptions: URLSearchParams;\n\n  /**\n   * Constructor for the URL options manager.\n   * @param eventDisplay The Phoenix event display.\n   * @param configuration Configuration of the event display.\n   */\n  constructor(\n    private eventDisplay: EventDisplay,\n    private configuration: Configuration\n  ) {\n    const locationHref = window.location.href;\n    this.urlOptions = new URLSearchParams(\n      locationHref.substr(locationHref.lastIndexOf('?'))\n    );\n  }\n\n  /**\n   * Initialize and apply all URL options on page load.\n   */\n  public applyOptions() {\n    // Initialize event with data from URL if there is any\n    this.applyEventOptions(\n      this.configuration.defaultEventFile?.eventFile,\n      this.configuration.defaultEventFile?.eventType\n    );\n    this.applyHideWidgetsOption();\n  }\n\n  /**\n   * Initialize the event display with event data and configuration from URL.\n   * (Only JiveXML and JSON)\n   * @param defaultEventPath Default event path to fallback to if none in URL.\n   * @param defaultEventType Default event type to fallback to if none in URL.\n   */\n  public applyEventOptions(\n    defaultEventPath?: string,\n    defaultEventType?: string\n  ) {\n    if (!('fetch' in window)) {\n      return;\n    }\n\n    let file: string, type: string;\n\n    if (!this.urlOptions.get('file') || !this.urlOptions.get('type')) {\n      file = defaultEventPath;\n      type = defaultEventType;\n    } else {\n      file = this.urlOptions.get('file');\n      type = this.urlOptions.get('type').toLowerCase();\n    }\n\n    // Load config from URL\n    const loadConfig = () => {\n      if (this.urlOptions.get('config')) {\n        this.eventDisplay.getLoadingManager().addLoadableItem('url_config');\n        fetch(this.urlOptions.get('config'))\n          .then((res) => res.json())\n          .then((jsonState) => {\n            const stateManager = new StateManager();\n            stateManager.loadStateFromJSON(jsonState);\n          })\n          .finally(() => {\n            this.eventDisplay.getLoadingManager().itemLoaded('url_config');\n          });\n      }\n    };\n\n    // Load event file from URL\n    if (file && type) {\n      this.eventDisplay.getLoadingManager().addLoadableItem('url_event');\n      fetch(file)\n        .then((res) => (type === 'jivexml' ? res.text() : res.json()))\n        .then((res: object | string) => {\n          if (type === 'jivexml') {\n            const loader = new JiveXMLLoader();\n            this.configuration.eventDataLoader = loader;\n            // Parse the JSON to extract events and their data\n            loader.process(res);\n            const eventData = loader.getEventData();\n            this.eventDisplay.buildEventDataFromJSON(eventData);\n          } else {\n            this.configuration.eventDataLoader = new PhoenixLoader();\n            this.eventDisplay.parsePhoenixEvents(res);\n          }\n        })\n        .catch((error) => {\n          this.eventDisplay\n            .getInfoLogger()\n            .add('Could not find the file specified in URL.', 'Error');\n          console.error('Could not find the file specified in URL.', error);\n        })\n        .finally(() => {\n          // Load config from URL after loading the event\n          loadConfig();\n          this.eventDisplay.getLoadingManager().itemLoaded('url_event');\n        });\n    } else {\n      loadConfig();\n    }\n  }\n\n  /**\n   * Hide all overlay widgets if \"hideWidgets\" option from the URL is true.\n   */\n  public applyHideWidgetsOption() {\n    if (Boolean(this.urlOptions.get('hideWidgets')) === true) {\n      // Hide overlay widgets\n      document\n        .getElementById('overlayWidgets')\n        ?.style.setProperty('display', 'none');\n      // Hide stats\n      (document.getElementsByClassName(\n        'ui-element'\n      )[0] as HTMLElement)?.style.setProperty('display', 'none');\n      // Hide dat.GUI menu\n      document.getElementById('gui')?.style.setProperty('display', 'none');\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VRManager.html":{"url":"classes/VRManager.html","title":"class - VRManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VRManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/vr-manager.ts\n        \n\n            \n                Description\n            \n            \n                VR manager for VR related operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraGroup\n                            \n                            \n                                    Private\n                                controller1\n                            \n                            \n                                    Private\n                                controller2\n                            \n                            \n                                    Private\n                                controllerGrip1\n                            \n                            \n                                    Private\n                                controllerGrip2\n                            \n                            \n                                    Private\n                                currentVRSession\n                            \n                            \n                                    Private\n                                onControllerSelectEnd\n                            \n                            \n                                    Private\n                                onControllerSelectStart\n                            \n                            \n                                    Private\n                                onSessionEnded\n                            \n                            \n                                    Private\n                                onVRSessionEnded\n                            \n                            \n                                    Private\n                                onVRSessionStarted\n                            \n                            \n                                    Private\n                                renderer\n                            \n                            \n                                    Static\n                                    Readonly\n                                SESSION_TYPE\n                            \n                            \n                                    Private\n                                vrActive\n                            \n                            \n                                    Public\n                                vrCamera\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                endVRSession\n                            \n                            \n                                    Public\n                                getCameraGroup\n                            \n                            \n                                    Public\n                                getVRCamera\n                            \n                            \n                                    Public\n                                isVRActive\n                            \n                            \n                                    Private\n                                moveInDirection\n                            \n                            \n                                    Private\n                                setupVRControls\n                            \n                            \n                                    Public\n                                setVRSession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cameraGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Group\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:32\n                            \n                        \n\n                \n                    \n                        Group containing the the camera for VR. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            controller1\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:37\n                            \n                        \n\n                \n                    \n                        The VR controller for movement. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            controller2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:39\n                            \n                        \n\n                \n                    \n                        The VR controller for movement. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            controllerGrip1\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:41\n                            \n                        \n\n                \n                    \n                        The VR controller representation \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            controllerGrip2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:43\n                            \n                        \n\n                \n                    \n                        The VR controller representation \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            currentVRSession\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:28\n                            \n                        \n\n                \n                    \n                        Currently active VR session. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onControllerSelectEnd\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:48\n                            \n                        \n\n                \n                    \n                        Listener for when the \"Select Start\" button is released. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onControllerSelectStart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:46\n                            \n                        \n\n                \n                    \n                        Listener for when the \"Select Start\" button is pushed. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onSessionEnded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:30\n                            \n                        \n\n                \n                    \n                        Callback to call when the VR session ends. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onVRSessionEnded\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:101\n                            \n                        \n\n                \n                    \n                        Callback when the VR session ends.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onVRSessionStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:91\n                            \n                        \n\n                \n                    \n                        Callback for when the VR session is started.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        session\n                                                        \n                                                                The VR session.\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            renderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:26\n                            \n                        \n\n                \n                    \n                        Renderer to set the VR session for. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            SESSION_TYPE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'immersive-vr'\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:22\n                            \n                        \n\n                \n                    \n                        Session type to use for VR. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            vrActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:24\n                            \n                        \n\n                \n                    \n                        Whether the VR is currently active or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            vrCamera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:34\n                            \n                        \n\n                \n                    \n                        The camera used by VR. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            endVRSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    endVRSession()\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:123\n                \n            \n\n\n            \n                \n                    End the current VR session.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCameraGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraGroup(camera?: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:141\n                \n            \n\n\n            \n                \n                    Get the group containing the camera for VR.\nVR camera works by adding a Group with Camera to the scene.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Camera which is to be cloned for VR use.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Group\n\n                    \n                    \n                        The camera group used in VR mode.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getVRCamera\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVRCamera()\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:163\n                \n            \n\n\n            \n                \n                    Get the camera used by VR.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The camera used by VR.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isVRActive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isVRActive()\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:131\n                \n            \n\n\n            \n                \n                    Is the VR currently active or not.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        A boolean for whether the VR is active or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            moveInDirection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    moveInDirection(direction: Vector3, stepDistance: number)\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:242\n                \n            \n\n\n            \n                \n                    Move the camera in the given direction.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    direction\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Direction to move towards.\n\n                                    \n                                \n                                \n                                    stepDistance\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Distance to move by.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            setupVRControls\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setupVRControls()\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:170\n                \n            \n\n\n            \n                \n                    Set up VR controls for moving around the event display.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setVRSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setVRSession(renderer: WebGLRenderer, onSessionStarted?: () => void, onSessionEnded?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:56\n                \n            \n\n\n            \n                \n                    Set and configure the VR session.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer to set the VR session for.\n\n                                    \n                                \n                                \n                                    onSessionStarted\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the VR session starts.\n\n                                    \n                                \n                                \n                                    onSessionEnded\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the VR session ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebGLRenderer,\n  Group,\n  Camera,\n  Vector3,\n  BufferGeometry,\n  Line,\n  Scene,\n} from 'three';\nimport { XRControllerModelFactory } from 'three/examples/jsm/webxr/XRControllerModelFactory';\n\n// NOTE: This was created on 29/08/2020\n// It might get outdated given how WebXR is still a work in progress\n\n// LAST UPDATED ON 28/11/2020\n\n/**\n * VR manager for VR related operations.\n */\nexport class VRManager {\n  /** Session type to use for VR. */\n  static readonly SESSION_TYPE: string = 'immersive-vr';\n  /** Whether the VR is currently active or not. */\n  private vrActive: boolean = false;\n  /** Renderer to set the VR session for. */\n  private renderer: WebGLRenderer;\n  /** Currently active VR session. */\n  private currentVRSession: any = null;\n  /** Callback to call when the VR session ends. */\n  private onSessionEnded: () => void;\n  /** Group containing the the camera for VR. */\n  public cameraGroup: Group;\n  /** The camera used by VR. */\n  public vrCamera: Camera;\n\n  /** The VR controller for movement. */\n  private controller1: any;\n  /** The VR controller for movement. */\n  private controller2: any;\n  /** The VR controller representation */\n  private controllerGrip1: any;\n  /** The VR controller representation */\n  private controllerGrip2: any;\n\n  /** Listener for when the \"Select Start\" button is pushed. */\n  private onControllerSelectStart: () => void;\n  /** Listener for when the \"Select Start\" button is released. */\n  private onControllerSelectEnd: () => void;\n\n  /**\n   * Set and configure the VR session.\n   * @param renderer Renderer to set the VR session for.\n   * @param onSessionStarted Callback to call when the VR session starts.\n   * @param onSessionEnded Callback to call when the VR session ends.\n   */\n  public setVRSession(\n    renderer: WebGLRenderer,\n    onSessionStarted?: () => void,\n    onSessionEnded?: () => void\n  ) {\n    this.renderer = renderer;\n    this.onSessionEnded = onSessionEnded;\n\n    const webXR = (navigator as any)?.xr;\n\n    if (webXR) {\n      const sessionInit = {\n        optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking'],\n      };\n\n      (webXR.requestSession(\n        VRManager.SESSION_TYPE,\n        sessionInit\n      ) as Promise)\n        .then((session: any) => {\n          this.onVRSessionStarted(session);\n          onSessionStarted?.();\n        })\n        .catch((error: any) => {\n          console.log('VR Error:', error);\n        });\n\n      this.setupVRControls();\n    }\n  }\n\n  /**\n   * Callback for when the VR session is started.\n   * @param session The VR session.\n   */\n  private onVRSessionStarted = (session: any) => {\n    this.vrActive = true;\n    session.addEventListener('end', this.onVRSessionEnded);\n    this.renderer.xr.setSession(session);\n    this.currentVRSession = session;\n  };\n\n  /**\n   * Callback when the VR session ends.\n   */\n  private onVRSessionEnded = () => {\n    this.onSessionEnded?.();\n\n    this.vrActive = false;\n    this.currentVRSession?.removeEventListener('end', this.onVRSessionEnded);\n    this.currentVRSession = null;\n\n    this.controller1?.removeEventListener(\n      'selectstart',\n      this.onControllerSelectStart\n    );\n    this.controller1?.removeEventListener(\n      'selectend',\n      this.onControllerSelectEnd\n    );\n\n    this.cameraGroup = undefined;\n  };\n\n  /**\n   * End the current VR session.\n   */\n  public endVRSession() {\n    this.currentVRSession?.end();\n  }\n\n  /**\n   * Is the VR currently active or not.\n   * @returns A boolean for whether the VR is active or not.\n   */\n  public isVRActive(): boolean {\n    return this.vrActive;\n  }\n\n  /**\n   * Get the group containing the camera for VR.\n   * VR camera works by adding a Group with Camera to the scene.\n   * @param camera Camera which is to be cloned for VR use.\n   * @returns The camera group used in VR mode.\n   */\n  public getCameraGroup(camera?: Camera): Group {\n    // Set up the camera position in the VR - Adding a group with camera does it\n    if (!this.cameraGroup) {\n      this.cameraGroup = new Group();\n    }\n    if (camera && this.vrActive) {\n      this.vrCamera = this.renderer.xr\n        .getCamera(new Camera())\n        .copy(camera.clone());\n      this.vrCamera.name = 'VR_CAMERA';\n\n      this.cameraGroup.position.copy(this.vrCamera.position);\n      this.cameraGroup.add(this.vrCamera);\n    }\n\n    return this.cameraGroup;\n  }\n\n  /**\n   * Get the camera used by VR.\n   * @returns The camera used by VR.\n   */\n  public getVRCamera() {\n    return this.vrCamera;\n  }\n\n  /**\n   * Set up VR controls for moving around the event display.\n   */\n  private setupVRControls() {\n    // Get the controllers\n    this.controller1 = this.renderer.xr.getController(0);\n    this.getCameraGroup().add(this.controller1);\n    this.controller2 = this.renderer.xr.getController(1);\n    this.getCameraGroup().add(this.controller2);\n\n    const controllerModelFactory = new XRControllerModelFactory();\n    this.controllerGrip1 = this.renderer.xr.getControllerGrip(0);\n    this.controllerGrip1.add(\n      controllerModelFactory.createControllerModel(this.controllerGrip1)\n    );\n    this.getCameraGroup().add(this.controllerGrip1);\n\n    this.controllerGrip2 = this.renderer.xr.getControllerGrip(1);\n    this.controllerGrip2.add(\n      controllerModelFactory.createControllerModel(this.controllerGrip2)\n    );\n    this.getCameraGroup().add(this.controllerGrip2);\n\n    const geometry = new BufferGeometry().setFromPoints([\n      new Vector3(0, 0, 0),\n      new Vector3(0, 0, -1),\n    ]);\n\n    const line = new Line(geometry);\n    line.name = 'line';\n    line.scale.z = 50;\n\n    this.controller1.add(line.clone());\n    this.controller2.add(line.clone());\n\n    // Set up movement\n\n    // Distance for a single step\n    const stepDistance = 30;\n    // Unit vector in camera direction\n    const direction = new Vector3();\n    // Interval ID for the movement interval\n    let intervalId: NodeJS.Timeout;\n\n    this.onControllerSelectStart = () => {\n      console.log(\n        'Select: c1 position ' + this.controller1.position.toArray().join(', ')\n      );\n      console.log(\n        'Select: CG position ' + this.cameraGroup.position.toArray().join(', ')\n      );\n\n      // Start movement in camera direction\n      intervalId = setInterval(() => {\n        this.moveInDirection(direction, stepDistance);\n      }, 20);\n    };\n\n    this.onControllerSelectEnd = () => {\n      // Stop the movement\n      clearInterval(intervalId);\n    };\n\n    this.controller1.addEventListener(\n      'selectstart',\n      this.onControllerSelectStart\n    );\n    this.controller1.addEventListener('selectend', this.onControllerSelectEnd);\n  }\n\n  /**\n   * Move the camera in the given direction.\n   * @param direction Direction to move towards.\n   * @param stepDistance Distance to move by.\n   */\n  private moveInDirection(direction: Vector3, stepDistance: number) {\n    // Get the direction the controller is facing\n    //! this.controller.getWorldDirection(direction);\n\n    // Get direction the camera is facing\n    this.vrCamera?.getWorldDirection(direction);\n\n    // Move the camera in the given direction\n    this.cameraGroup.position.addScaledVector(direction, stepDistance);\n    this.vrCamera.position.addScaledVector(direction, stepDistance);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Window.html":{"url":"interfaces/Window.html","title":"interface - Window","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Window\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event-display.ts\n        \n\n            \n                Description\n            \n            \n                Window interface for adding objects to the window object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        EventDisplay\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        EventDisplay\n                                    \n                                \n                                \n                                    \n                                        EventDisplay:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    EventDisplay object containing event display related functions. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ThreeManager } from './three/index';\nimport { UIManager } from './ui/index';\nimport { InfoLogger } from './info-logger';\nimport { Configuration } from './extras/configuration';\nimport { StateManager } from './managers/state-manager';\nimport { LoadingManager } from './managers/loading-manager';\nimport { URLOptionsManager } from './managers/url-options-manager';\n\ndeclare global {\n  /**\n   * Window interface for adding objects to the window object.\n   */\n  interface Window {\n    /** EventDisplay object containing event display related functions. */\n    EventDisplay: any;\n  }\n}\n\n/**\n * Phoenix event display class for managing detector geometries and event data.\n */\nexport class EventDisplay {\n  /** Configuration for preset views and event data loader. */\n  private configuration: Configuration;\n  /** An object containing event data. */\n  private eventsData: any;\n  /** Array containing callbacks to be called when events change. */\n  private onEventsChange: ((events: any) => void)[] = [];\n  /** Array containing callbacks to be called when the displayed event changes. */\n  private onDisplayedEventChange: ((nowDisplayingEvent: any) => void)[] = [];\n  /** Three manager for three.js operations. */\n  private graphicsLibrary: ThreeManager;\n  /** Info logger for storing event display logs. */\n  private infoLogger: InfoLogger;\n  /** UI manager for UI menu. */\n  private ui: UIManager;\n  /** Loading manager for loadable resources */\n  private loadingManager: LoadingManager;\n\n  /**\n   * Create the Phoenix event display and intitialize all the elements.\n   * @param configuration Configuration used to customize different aspects.\n   */\n  constructor(configuration?: Configuration) {\n    this.loadingManager = new LoadingManager();\n    this.infoLogger = new InfoLogger();\n    this.graphicsLibrary = new ThreeManager(this.infoLogger);\n    this.ui = new UIManager(this.graphicsLibrary);\n    if (configuration) {\n      this.init(configuration);\n    }\n  }\n\n  /**\n   * Initialize all the Phoenix event display elements.\n   * @param configuration Configuration used to customize different aspects.\n   */\n  public init(configuration: Configuration) {\n    this.configuration = configuration;\n\n    // Initialize the three manager with configuration\n    this.graphicsLibrary.init(configuration);\n    // Initialize the UI with configuration\n    this.ui.init(configuration);\n    // Set up for the state manager\n    new StateManager().setEventDisplay(this);\n\n    // Animate loop\n    const uiLoop = () => {\n      this.ui.updateUI();\n    };\n    this.graphicsLibrary.setAnimationLoop(uiLoop);\n\n    // Process and apply URL options\n    if (configuration.allowUrlOptions !== false) {\n      const urlOptionsManager = new URLOptionsManager(this, configuration);\n      urlOptionsManager.applyOptions();\n    }\n\n    // Allow adding elements through console\n    this.enableEventDisplayConsole();\n    // Allow keyboard controls\n    this.enableKeyboardControls();\n  }\n\n  /**\n   * Initialize VR.\n   * @param onSessionEnded Callback when the VR session ends.\n   */\n  public initVR(onSessionEnded?: () => void) {\n    this.graphicsLibrary.initVRSession(onSessionEnded);\n  }\n\n  /**\n   * End VR and remove VR settings.\n   */\n  public endVR() {\n    this.graphicsLibrary.endVRSession();\n  }\n\n  /**\n   * Receives an object containing all the eventKeys and saves it.\n   * Then it loads by default the first event.\n   * @param eventsData Object containing the event data.\n   * @returns Array of strings containing the keys of the eventsData object.\n   */\n  public parsePhoenixEvents(eventsData: any): string[] {\n    this.eventsData = eventsData;\n    const eventKeys = this.configuration.eventDataLoader.getEventsList(\n      eventsData\n    );\n    this.loadEvent(eventKeys[0]);\n    this.onEventsChange.forEach((callback) => callback(eventKeys));\n    return eventKeys;\n  }\n\n  /**\n   * Receives an object containing one event and builds the different collections\n   * of physics objects.\n   * @param eventData Object containing the event data.\n   */\n  public buildEventDataFromJSON(eventData: any) {\n    // Creating UI folder\n    this.ui.addEventDataFolder();\n    this.ui.addLabelsFolder();\n    // Clearing existing event data\n    this.graphicsLibrary.clearEventData();\n    // Build data and add to scene\n    this.configuration.eventDataLoader.buildEventData(\n      eventData,\n      this.graphicsLibrary,\n      this.ui,\n      this.infoLogger\n    );\n    this.onDisplayedEventChange.forEach((callback) => callback(eventData));\n  }\n\n  /**\n   * Receives a string representing the key of an event and loads\n   * the event associated with that key.\n   * @param eventKey String that represents the event in the eventsData object.\n   */\n  public loadEvent(eventKey: any) {\n    const event = this.eventsData[eventKey];\n\n    if (event) {\n      this.buildEventDataFromJSON(event);\n    }\n  }\n\n  /**\n   * Get the three manager responsible for three.js functions.\n   * @returns The three.js manager.\n   */\n  public getThreeManager() {\n    return this.graphicsLibrary;\n  }\n\n  /**\n   * Get the UI manager responsible for UI related functions.\n   * @returns The UI manager.\n   */\n  public getUIManager() {\n    return this.ui;\n  }\n\n  /**\n   * Get the info logger containing event display logs.\n   * @returns The info logger instance being used by the event display.\n   */\n  public getInfoLogger() {\n    return this.infoLogger;\n  }\n\n  /**\n   * Get the loading manager for managing loadable items.\n   * @returns The loading manager.\n   */\n  public getLoadingManager() {\n    return this.loadingManager;\n  }\n\n  // **********************\n  // * LOADING GEOMETRIES *\n  // **********************\n\n  /**\n   * Loads an OBJ (.obj) geometry from the given filename\n   * and adds it to the dat.GUI menu.\n   * @param filename Path to the geometry.\n   * @param name Name given to the geometry.\n   * @param color Color to initialize the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param doubleSided If true, render both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   * @param setFlat Whether object should be flat-shaded or not.\n   * @returns Promise for loading the geometry.\n   */\n  public loadOBJGeometry(\n    filename: string,\n    name: string,\n    color: any,\n    menuNodeName?: string,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true,\n    setFlat: boolean = true\n  ): Promise {\n    this.loadingManager.addLoadableItem(`obj_geom_${name}`);\n    this.ui.addGeometry(name, color, menuNodeName, initiallyVisible);\n    this.infoLogger.add(name, 'Loaded OBJ geometry');\n    return this.graphicsLibrary.loadOBJGeometry(\n      filename,\n      name,\n      color,\n      doubleSided,\n      initiallyVisible,\n      setFlat\n    );\n  }\n\n  /**\n   * Parses and loads an OBJ geometry from the given content\n   * and adds it to the dat.GUI menu.\n   * @param content Content of the OBJ geometry.\n   * @param name Name given to the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public parseOBJGeometry(\n    content: string,\n    name: string,\n    menuNodeName?: string,\n    initiallyVisible: boolean = true\n  ) {\n    this.loadingManager.addLoadableItem(`parse_obj_${name}`);\n    this.graphicsLibrary.parseOBJGeometry(content, name, initiallyVisible);\n    this.ui.addGeometry(name, 0x000fff, menuNodeName, initiallyVisible);\n  }\n\n  /**\n   * Exports scene to OBJ file format.\n   */\n  public exportToOBJ() {\n    this.graphicsLibrary.exportSceneToOBJ();\n    this.infoLogger.add('Exported scene to OBJ');\n  }\n\n  /**\n   * Parse and load an event from the Phoenix file format (.phnx).\n   * @param input Content containing the JSON with event data\n   * and other configuration.\n   * @returns Promise for loading the geometry.\n   */\n  public parsePhoenixDisplay(input: any): Promise {\n    const phoenixScene = JSON.parse(input);\n\n    if (phoenixScene.sceneConfiguration && phoenixScene.scene) {\n      // Creating UI folder\n      this.ui.addEventDataFolder();\n      this.ui.addLabelsFolder();\n      // Clearing existing event data\n      this.graphicsLibrary.clearEventData();\n      // Add to scene\n      this.loadSceneConfiguration(phoenixScene.sceneConfiguration);\n\n      this.loadingManager.addLoadableItem(`parse_phnx_${name}`);\n      return this.graphicsLibrary.parsePhnxScene(phoenixScene.scene);\n    }\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   */\n  public exportPhoenixDisplay() {\n    this.graphicsLibrary.exportPhoenixScene();\n  }\n\n  /**\n   * Parses and loads a geometry in GLTF (.gltf) format.\n   * @param input Data of the GLTF (.gltf) file.\n   * @param name Name given to the geometry.\n   * @returns Promise for loading the geometry.\n   */\n  public parseGLTFGeometry(\n    input: string | ArrayBuffer,\n    name: string\n  ): Promise {\n    this.loadingManager.addLoadableItem(`parse_gltf_${name}`);\n    this.ui.addGeometry(name, undefined);\n    this.infoLogger.add(name, 'Parsed GLTF geometry');\n    return this.graphicsLibrary.parseGLTFGeometry(input, name);\n  }\n\n  /**\n   * Loads a GLTF (.gltf) scene/geometry from the given URL.\n   * and adds it to the dat.GUI menu.\n   * @param url URL to the GLTF (.gltf) file.\n   * @param name Name of the loaded scene/geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   * @returns Promise for loading the geometry.\n   */\n  public loadGLTFGeometry(\n    url: any,\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    initiallyVisible: boolean = true\n  ): Promise {\n    this.loadingManager.addLoadableItem(`gltf_geom_${name}`);\n    this.ui.addGeometry(name, undefined, menuNodeName, initiallyVisible);\n    this.infoLogger.add(name, 'Loaded GLTF geometry');\n    return this.graphicsLibrary.loadGLTFGeometry(\n      url,\n      name,\n      scale,\n      initiallyVisible\n    );\n  }\n\n  /**\n   * Loads geometries from JSON.\n   * @param json JSON or URL to JSON file of the geometry.\n   * @param name Name of the geometry or group of geometries.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   * @returns Promise for loading the geometry.\n   */\n  public loadJSONGeometry(\n    json: string | object,\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true\n  ): Promise {\n    this.loadingManager.addLoadableItem(`json_geom_${name}`);\n    this.ui.addGeometry(name, undefined, menuNodeName, initiallyVisible);\n    this.infoLogger.add(name, 'Loaded JSON geometry');\n    return this.graphicsLibrary.loadJSONGeometry(\n      json,\n      name,\n      scale,\n      doubleSided,\n      initiallyVisible\n    );\n  }\n\n  /**\n   * Load JSON geometry from JSRoot.\n   * @param JSROOT JSRoot object containing all the JSROOT functions.\n   * @param url URL of the JSRoot geometry file.\n   * @param name Name of the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public loadRootJSONGeometry(\n    JSROOT: any,\n    url: string,\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true\n  ) {\n    this.loadingManager.addLoadableItem('root_json_geom');\n    JSROOT.NewHttpRequest(url, 'object', (obj: any) => {\n      this.loadJSONGeometry(\n        JSROOT.GEO.build(obj, { dflt_colors: true }).toJSON(),\n        name,\n        menuNodeName,\n        scale,\n        doubleSided,\n        initiallyVisible\n      );\n      this.loadingManager.itemLoaded('root_json_geom');\n    }).send();\n  }\n\n  /**\n   * Load ROOT geometry from JSRoot.\n   * @param JSROOT JSRoot object containing all the JSROOT functions.\n   * @param url URL of the JSRoot file.\n   * @param objectName Name of the object inside the \".root\" file.\n   * @param name Name of the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public loadRootGeometry(\n    JSROOT: any,\n    url: string,\n    objectName: string,\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true\n  ) {\n    if (url.indexOf('.root') > 0) {\n      JSROOT.openFile(url).then((file: any) => {\n        file.readObject(objectName).then((obj: any) => {\n          this.loadJSONGeometry(\n            JSROOT.GEO.build(obj, { dflt_colors: true }).toJSON(),\n            name,\n            menuNodeName,\n            scale,\n            doubleSided,\n            initiallyVisible\n          );\n        });\n      });\n    }\n  }\n\n  /**\n   * Build Geometry from thr passed parameters, where\n   * @param parameters\n   */\n  public buildGeometryFromParameters(parameters: any): void {\n    this.graphicsLibrary.addGeometryFromParameters(parameters);\n  }\n\n  /**\n   * Zoom all the cameras by a specific zoom factor.\n   * The factor may either be greater (zoom in) or smaller (zoom out) than 1.\n   * @param zoomFactor The factor to zoom by.\n   * @param zoomTime The time it takes for a zoom animation to complete.\n   */\n  public zoomTo(zoomFactor: number, zoomTime: number) {\n    this.graphicsLibrary.zoomTo(zoomFactor, zoomTime);\n  }\n\n  /**\n   * Processes event data and geometry for Loading the scene\n   * from Phoenix file format (.phnx).\n   * @param sceneConfiguration Scene configuration containingevent data and detector geometry.\n   */\n  private loadSceneConfiguration(sceneConfiguration: {\n    eventData: {};\n    geometries: [];\n  }) {\n    for (const objectType of Object.keys(sceneConfiguration.eventData)) {\n      const typeFolder = this.ui.addEventDataTypeFolder(objectType);\n      const typeFolderPM = this.ui.addEventDataTypeFolderPM(objectType);\n      const collections = sceneConfiguration.eventData[objectType];\n      for (const collection of collections) {\n        this.ui.addCollection(typeFolder, collection);\n        this.ui.addCollectionPM(typeFolderPM, collection);\n      }\n    }\n\n    for (const geom of sceneConfiguration.geometries) {\n      this.ui.addGeometry(geom, '#ffffff');\n    }\n  }\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  public getCollection(collectionName: string) {\n    return this.configuration.eventDataLoader.getCollection(collectionName);\n  }\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  public getCollections(): string[] {\n    return this.configuration.eventDataLoader.getCollections();\n  }\n\n  /**\n   * Add a callback to onDisplayedEventChange array to call\n   * the callback on changes to the displayed event.\n   * @param callback Callback to be added to the onDisplayedEventChange array.\n   */\n  public listenToDisplayedEventChange(callback: (event) => any) {\n    this.onDisplayedEventChange.push(callback);\n  }\n\n  /**\n   * Add a callback to onEventsChange array to call\n   * the callback on changes to the events.\n   * @param callback Callback to be added to the onEventsChange array.\n   */\n  public listenToLoadedEventsChange(callback: (events) => any) {\n    this.onEventsChange.push(callback);\n  }\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  public getEventMetadata(): any[] {\n    return this.configuration.eventDataLoader.getEventMetadata();\n  }\n\n  /**\n   * Enables calling specified event display methods in console.\n   */\n  private enableEventDisplayConsole() {\n    // Defining an EventDisplay object in window to access methods through console\n    window.EventDisplay = {\n      loadGLTFGeometry: (sceneUrl: string, name: string) => {\n        this.loadGLTFGeometry(sceneUrl, name);\n      },\n      loadOBJGeometry: (\n        filename: string,\n        name: string,\n        colour: any,\n        menuNodeName: string,\n        doubleSided: boolean\n      ) => {\n        this.loadOBJGeometry(filename, name, colour, menuNodeName, doubleSided);\n      },\n      loadJSONGeometry: (\n        json: string | object,\n        name: string,\n        menuNodeName: string,\n        scale?: number,\n        doubleSided?: boolean,\n        initiallyVisible: boolean = true\n      ) => {\n        this.loadJSONGeometry(\n          json,\n          name,\n          menuNodeName,\n          scale,\n          doubleSided,\n          initiallyVisible\n        );\n      },\n      buildGeometryFromParameters: (parameters: object) =>\n        this.buildGeometryFromParameters(parameters),\n    };\n  }\n\n  /**\n   * Sets the renderer to be used to render the event display on the overlayed canvas.\n   * @param overlayCanvas An HTML canvas on which the overlay renderer is to be set.\n   */\n  public setOverlayRenderer(overlayCanvas: HTMLCanvasElement) {\n    this.graphicsLibrary.setOverlayRenderer(overlayCanvas);\n  }\n\n  /**\n   * Initializes the object which will show information of the selected geometry/event data.\n   * @param selectedObject Object to display the data.\n   */\n  public allowSelection(selectedObject: { name: string; attributes: any[] }) {\n    this.graphicsLibrary.setSelectedObjectDisplay(selectedObject);\n  }\n\n  /**\n   * Toggles the ability of selecting geometries/event data by clicking on the screen.\n   * @param enable Value to enable or disable the functionality.\n   */\n  public enableSelecting(enable: boolean) {\n    this.graphicsLibrary.enableSelecting(enable);\n  }\n\n  /**\n   * Fixes the camera position of the overlay view.\n   * @param fixed Whether the overlay view is to be fixed or not.\n   */\n  public fixOverlayView(fixed: boolean) {\n    this.graphicsLibrary.fixOverlayView(fixed);\n  }\n\n  /**\n   * Get the uuid of the currently selected object.\n   * @returns uuid of the currently selected object.\n   */\n  public getActiveObjectId(): any {\n    return this.graphicsLibrary.getActiveObjectId();\n  }\n\n  /**\n   * Move the camera to look at the object with the given uuid\n   * and highlight it.\n   * @param uuid uuid of the object.\n   */\n  public lookAtObject(uuid: string) {\n    this.graphicsLibrary.lookAtObject(uuid);\n    this.graphicsLibrary.highlightObject(uuid);\n  }\n\n  /**\n   * Highlight the object with the given uuid by giving it an outline.\n   * @param uuid uuid of the object.\n   */\n  public highlightObject(uuid: string) {\n    this.graphicsLibrary.highlightObject(uuid);\n  }\n\n  /**\n   * Enable keyboard controls for the event display.\n   */\n  public enableKeyboardControls() {\n    this.ui.enableKeyboardControls();\n    this.graphicsLibrary.enableKeyboardControls();\n  }\n\n  /**\n   * Animate the camera through the event scene.\n   * @param startPos Start position of the translation animation.\n   * @param tweenDuration Duration of each tween in the translation animation.\n   * @param onAnimationEnd Callback when the last animation ends.\n   */\n  public animateThroughEvent(\n    startPos: number[],\n    tweenDuration: number,\n    onAnimationEnd?: () => void\n  ) {\n    this.graphicsLibrary.animateThroughEvent(\n      startPos,\n      tweenDuration,\n      onAnimationEnd\n    );\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateEventWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.graphicsLibrary.animateEventWithCollision(tweenDuration, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data\n   * using clipping planes after particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateClippingWithCollision(\n    tweenDuration: number,\n    onEnd?: () => void\n  ) {\n    this.graphicsLibrary.animateClippingWithCollision(tweenDuration, onEnd);\n  }\n\n  /**\n   * Add label to a 3D object.\n   * @param label Label to add to the event object.\n   * @param collection Collection the event object is a part of.\n   * @param indexInCollection Event object's index in collection.\n   * @param uuid UUID of the three.js object.\n   */\n  public addLabelToObject(\n    label: string,\n    collection: string,\n    indexInCollection: number,\n    uuid: string\n  ) {\n    const labelId = this.configuration.eventDataLoader.addLabelToEventObject(\n      label,\n      collection,\n      indexInCollection\n    );\n\n    // Remove the label if the string is empty\n    if (!label) {\n      this.ui.removeLabel(labelId);\n      return;\n    }\n\n    this.ui.addLabel(labelId);\n    this.graphicsLibrary.addLabelToObject(label, uuid, labelId);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file.\nSee Conventional Commits for commit guidelines.\n1.5.0 (2021-03-24)\nBug Fixes\n\nevent-display: catch VR request session error (d2874b8)\nevent-display: fix jsroot loading root file (8cbcaa5)\nevent-display: handle tracks with no positions (3b1991c)\nevent-display: improve renderer init (a8f8353)\nevent-display: remove optimize controls function (266af04)\nevent-display: remove redundant import (359d353)\nevent-display: use per physics object color and not collection color (ac0c4f1)\nremove JSROOT source files from repo (7bcd7ba)\n\nFeatures\n\napp: ability to import ig archive in CMS (9540af5)\napp: Add more realistic geometry for ATLAS (d207bad)\nevent-display: allow resize and improve tests and drop improving CPU usage (a474af2)\nevent-display: resize canvas with window resize (5ea04f1)\nevent-display: update to use CDN for JSROOT (2fa310f)\nevent-display: use latest version of JSROOT (fbd584e)\n\n1.4.0 (2021-02-16)\nBug Fixes\n\nevent-display: disable keyboard controls when typing (4f80bd6)\nevent-display: improve object selection from uuid and label input (3475836)\nevent-display: persist toggle state of phoenix menu node children (e96136b)\nevent-display: remove rollup config and fix globalThis usage (e6f69a0)\n\nFeatures\n\nevent-display: ability to add 3D label text (c9d4880)\nevent-display: add labels configuration to dat.GUI menu (d677089)\nevent-display: add labels to UI configuration (d90e3a6)\nevent-display: add size and color options for labels (3ce675f)\nevent-display: better handling of labels object (e10a68d)\nevent-display: complete setup with webpack for browser (3f6367f)\nevent-display: complete support to save and load labels (2219a3e)\nevent-display: create a url options manager for url options (fe0b2e6)\nevent-display: create generic function for getting object position (8d7b160)\nevent-display: delete label on empty value and change add label icon (3756330)\nevent-display: make label always look at camera (0837334)\nevent-display: set up add label to object functions (db261a6)\nevent-display: setup webpack for browser bundle (dc05ed9)\nevent-display: support to hide widgets through URL (cb2ec40)\nevent-display: use optional chaining for hide widgets url option (c991e54)\nevent-display: Use types for phoenix menu configuration (79e6d7c)\nevent-display: working labels object (60269f7)\nUpdate Angular and all packages to latest (f4c2e31)\n\n1.3.0 (2021-01-16)\nBug Fixes\n\nevent-display: assign the right name to geometry (b7e8da0)\nevent-display: code improvements (f94c0e4)\nevent-display: fix parsing of GLTF geometry (dc5d489)\nevent-display: improve code for hiding tube tracks (e9f1bc9)\nevent-display: minor script fix (5139c6e)\nevent-display: remove color from obj file userdata (8ba94e7)\nevent-display: revert jasmine spec files (dc140dd)\nevent-display: try fixing CMSLoader tests (789da8b)\n\nFeatures\n\nevent-display: display size on selection (6943f79)\nevent-display: hide tube tracks on zoom (7d606b2)\n\n1.2.0 (2020-12-06)\nBug Fixes\n\nevent-display: add Edward's controller set up (a6a1c19)\nevent-display: changes to animation loop for VR (37df19f)\nevent-display: finally fix VR completely (4764196)\nevent-display: fix applying multiple cuts at the same time (8f3e8e1)\nevent-display: fix applying state for range slider (c36a222)\nevent-display: fix loading and add default view to experiments (ab8feb4)\nevent-display: initialize cuts with correct values (e297c98)\nevent-display: make it possible to flat shade (dcf6cec)\nevent-display: optimal animation loop set up (da3ead5)\nevent-display: optimal render for effects manager (1975d70)\nevent-display: reset clipping on init (029d526)\nevent-display: stop animation loop on home (c39ecd3)\nevent-display: update configuration in tests (18f8db2)\n\nFeatures\n\napp: add toggle for screenshot mode (22a1ec8)\napp: make loader generic (ff10477)\napp: set up performance mode with selection (947f6bf)\napp: use event display loader in Angular component (25b2a9d)\nevent-display: ability to add geometry to a menu folder (30b0383)\nevent-display: ability to initialize event display without init (69d3f75)\nevent-display: add ability to add parametrised geometry (04dc545)\nevent-display: add and set up loading manager (5f0f942)\nevent-display: handle loading better (9474565)\nevent-display: make loading functions return Promise for async await (4262a1b)\nevent-display: performance mode and antialias support (d3920c4)\nevent-display: support for toggling antialiasing (48130b2)\nevent-display: use object to simplify configuration (4b10452)\n\n1.1.0 (2020-11-07)\nBug Fixes\n\napp: cut filter failed if value return was zero (0a26fea)\napp: cut should be pT, not mom (73b7c27)\napp: fix attribute pipe (0980379)\napp: fix tests (f87c587)\napp: pT should always be positive (3918159)\nevent-display: add optional chaining to CMS event info (fixes tests) (5283e9a)\nevent-display: fix geometry too big in overlay view (c7a35db)\nevent-display: fix URL event not working with hash routes (9eb21f5)\nevent-display: Formatted correctly (b46c49f)\nevent-display: use optional chaining in CMS loader (cfb1b6a)\nVR: Fix bugged scene in VR mode (9efd9ca)\n\nFeatures\n\napp: Option to load config from URL in ATLAS (1906976)\napp: phoenix-ui-components library (17909eb)\napp: yet another MAJOR refactoring (1261358)\nevent-display: add defaultView to configuration (612205c)\nevent-display: implicitly load event data from URL (9e3dc20)\nevent-display: state manager for managing event display state for save and load (7d1ca22)\n\n1.0.2 (2020-10-05)\n\nComplete deployment set up (399ac77)\n\n1.0.1 (2020-10-05)\nNote: Version bump only for package phoenix-event-display\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/event-display.ts\n            \n            class\n            EventDisplay\n            \n                100 %\n                (51/51)\n            \n        \n        \n            \n                \n                src/event-display.ts\n            \n            interface\n            Window\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/extras/configuration.ts\n            \n            interface\n            Configuration\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/extras/cut.model.ts\n            \n            class\n            Cut\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/extras/preset-view.model.ts\n            \n            class\n            PresetView\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/helpers/constants.ts\n            \n            variable\n            EVENT_DATA_TYPE_COLORS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/file.ts\n            \n            variable\n            loadFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/file.ts\n            \n            variable\n            saveFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/pretty-symbols.ts\n            \n            class\n            PrettySymbols\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/helpers/rk-helper.ts\n            \n            class\n            RKHelper\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            Field\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            RungeKutta\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            State\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/info-logger.ts\n            \n            class\n            InfoLogger\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/loaders/cms-loader.ts\n            \n            class\n            CMSLoader\n            \n                100 %\n                (33/33)\n            \n        \n        \n            \n                \n                src/loaders/event-data-loader.ts\n            \n            interface\n            EventDataLoader\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/loaders/jivexml-loader.ts\n            \n            class\n            JiveXMLLoader\n            \n                100 %\n                (34/34)\n            \n        \n        \n            \n                \n                src/loaders/jsroot-event-loader.ts\n            \n            class\n            JSRootEventLoader\n            \n                100 %\n                (27/27)\n            \n        \n        \n            \n                \n                src/loaders/lhcb-loader.ts\n            \n            class\n            LHCbLoader\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/loaders/objects/cms-objects.ts\n            \n            class\n            CMSObjects\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/loaders/objects/phoenix-objects.ts\n            \n            class\n            PhoenixObjects\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/loaders/phoenix-loader.ts\n            \n            class\n            PhoenixLoader\n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                src/loaders/script-loader.ts\n            \n            class\n            ScriptLoader\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/loaders/script-loader.ts\n            \n            variable\n            JSROOT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/loaders/trackml-loader.ts\n            \n            class\n            TrackmlLoader\n            \n                100 %\n                (26/26)\n            \n        \n        \n            \n                \n                src/managers/loading-manager.ts\n            \n            class\n            LoadingManager\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/managers/state-manager.ts\n            \n            class\n            StateManager\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                src/managers/url-options-manager.ts\n            \n            class\n            URLOptionsManager\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/three/animations-manager.ts\n            \n            class\n            AnimationsManager\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/three/controls-manager.ts\n            \n            class\n            ControlsManager\n            \n                100 %\n                (36/36)\n            \n        \n        \n            \n                \n                src/three/effects-manager.ts\n            \n            class\n            EffectsManager\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/three/export-manager.ts\n            \n            class\n            ExportManager\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/three/import-manager.ts\n            \n            class\n            ImportManager\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                src/three/index.ts\n            \n            class\n            ThreeManager\n            \n                100 %\n                (61/61)\n            \n        \n        \n            \n                \n                src/three/renderer-manager.ts\n            \n            class\n            RendererManager\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/three/scene-manager.ts\n            \n            class\n            SceneManager\n            \n                100 %\n                (37/37)\n            \n        \n        \n            \n                \n                src/three/selection-manager.ts\n            \n            class\n            SelectionManager\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/three/vr-manager.ts\n            \n            class\n            VRManager\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/ui/index.ts\n            \n            class\n            UIManager\n            \n                100 %\n                (58/58)\n            \n        \n        \n            \n                \n                src/ui/phoenix-menu/phoenix-menu-node.ts\n            \n            class\n            PhoenixMenuNode\n            \n                100 %\n                (24/24)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @tweenjs/tween.js : ^17.4.0\n        \n            dat.gui : ^0.7.7\n        \n            jszip : ^3.5.0\n        \n            stats-js : ^1.0.1\n        \n            three : ^0.124.0\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nPhoenix event display\n\n\n\nA highly modular and API driven experiment independent event display that uses three.js for processing and presenting detector geometry and event data.\nTo use in your application, install the package.\nnpm install phoenix-event-display\n# or\nyarn add phoenix-event-displayUsage\nAs a module\nTo create a simple event display.\n// Import required classes\nimport { EventDisplay, PhoenixLoader } from 'phoenix-event-display';\n\n// Create the event display\nconst eventDisplay = new EventDisplay();\n\n// Define the configuration\nconst configuration = {\n  elementId: '',\n  eventDataLoader: new PhoenixLoader() // or some other event data loader\n  // ... other configuration options\n};\n\n// Initialize the event display with the configuration\neventDisplay.init(configuration);\n\n// Load and parse event data in Phoenix format and display it\nfetch('path/to/event-data.json')\n  .then((res) => res.json())\n  .then((res) => {\n    eventDisplay.parsePhoenixEvents(res);\n  });\n\n// Load detector geometry\neventDisplay.loadOBJGeometry('path/to/geometry.obj', 'Detector OBJ', 0x8c8c8c /* color */);\nAs a standalone bundle\nPhoenix can be bundled and used directly in the HTML as a script.\nTo build Phoenix as a bundle.\nnpm run build:bundle\n# or\nyarn build:bundleThis will generate a file phoenix-.min.js (e.g. phoenix-1.3.0.min.js) in the ./dist/bundle directory which can be included in your HTML code.\n\n  \n    ...\n  \n\n  \n\n    \n\n    \n\n    \n      // Create the event display\n      const eventDisplay = new Phoenix.EventDisplay();\n\n      // Define the configuration\n      const configuration = {\n        elementId: 'eventDisplay',\n        eventDataLoader: new Phoenix.PhoenixLoader() // or some other event data loader\n        // ... other configuration options\n      };\n\n      // Initialize the event display with the configuration\n      eventDisplay.init(configuration);\n\n      // ... other event display functions\n    \n\n  \nExamples\n\nUsage in Angular (as a service)\nUsage in React\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    33 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PhoenixMenuConfig   (src/.../phoenix-menu-node.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/ui/phoenix-menu/phoenix-menu-node.ts\n    \n    \n        \n            \n                \n                    \n                    PhoenixMenuConfig\n                \n            \n            \n                \n                    Configuration types for PhoenixMenuNode.\n\n                \n            \n            \n                \n                        \"checkbox\" | \"slider\" | \"button\" | \"label\" | \"color\" | \"rangeSlider\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EVENT_DATA_TYPE_COLORS   (src/.../constants.ts)\n                        \n                        \n                            JSROOT   (src/.../script-loader.ts)\n                        \n                        \n                            loadFile   (src/.../file.ts)\n                        \n                        \n                            saveFile   (src/.../file.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/helpers/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EVENT_DATA_TYPE_COLORS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  Hits: new Color(0xff0000),\n  Tracks: new Color(0xff0000),\n  Jets: new Color(0x2194ce),\n  CaloClusters: new Color(0xffd166),\n  MuonChambers: new Color(0xff0000),\n  Vertices: new Color(0xffd166),\n}\n                        \n                    \n\n                \n                    \n                        Colors of different event data types. \n\n                    \n                \n\n            \n        \n\n    src/loaders/script-loader.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            JSROOT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n                \n                    \n                        Global JSROOT variable for accessing functions after loading JSRoot scripts. \n\n                    \n                \n\n            \n        \n\n    src/helpers/file.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            loadFile\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  onFileRead: (data: string) => void,\n  contentType: string = 'application/json'\n) => {\n  // Create a mock input file element and use that to read the file\n  let inputFile = document.createElement('input');\n  inputFile.type = 'file';\n  inputFile.accept = contentType;\n  inputFile.onchange = (e: any) => {\n    const configFile = e.target?.files[0];\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      onFileRead?.(e.target.result.toString());\n\n      inputFile.remove();\n      inputFile = null;\n    };\n    reader.readAsText(configFile);\n  };\n  inputFile.click();\n}\n                        \n                    \n\n                \n                    \n                        Load a file from user by mocking an input element.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            saveFile\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  data: string,\n  fileName: string,\n  contentType: string = 'application/json'\n) => {\n  const blob = new Blob([data], { type: contentType });\n  const tempAnchor = document.createElement('a');\n  tempAnchor.style.display = 'none';\n  tempAnchor.href = URL.createObjectURL(blob);\n  tempAnchor.download = fileName;\n  tempAnchor.click();\n  tempAnchor.remove();\n}\n                        \n                    \n\n                \n                    \n                        Save and download file with the given data.\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
