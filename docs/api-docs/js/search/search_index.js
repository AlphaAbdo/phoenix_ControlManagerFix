var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/ARManager.html",[0,0.26,1,2.395]],["body/classes/ARManager.html",[0,0.255,1,3.22,2,0.351,3,0.234,4,0.207,5,0.154,6,2.55,7,5.357,8,1.1,9,0.426,10,4.386,11,1.579,12,1.805,13,2.046,14,3.22,15,4.01,16,0.154,17,0.569,18,2.255,19,5.41,20,1.616,21,5.41,22,4.071,23,4.603,24,1.355,25,3.568,26,5.279,27,3.568,28,3.952,29,3.007,30,3.568,31,3.568,32,3.568,33,0.525,34,4.379,35,3.357,36,3.568,37,4.742,38,4.071,39,3.568,40,4.071,41,3.568,42,0.769,43,3.461,44,2.266,45,2.732,46,4.951,47,0.717,48,2.604,49,0.991,50,0.565,51,0.024,52,0.565,53,0.262,54,0.529,55,2.084,56,1.202,57,0.791,58,0.674,59,0.991,60,2.944,61,2.493,62,2.942,63,4.071,64,3.357,65,4.742,66,1.262,67,4.742,68,3.568,69,0.977,70,4.742,71,1.189,72,4.742,73,2.185,74,2.604,75,2.942,76,2.942,77,3.753,78,4.742,79,1.507,80,0.817,81,4.035,82,2.944,83,4.054,84,2.493,85,2.717,86,5.876,87,2.944,88,1.262,89,4.054,90,1.493,91,2.944,92,2.185,93,2.339,94,1.216,95,2.944,96,3.18,97,2.669,98,3.611,99,3.357,100,2.944,101,1.202,102,2.944,103,0.552,104,2.35,105,2.35,106,2.604,107,0.868,108,2.944,109,2.944,110,2.084,111,3.461,112,0.946,113,3.568,114,3.461,115,2.942,116,4.742,117,0.916,118,3.461,119,2.944,120,2.147,121,1.317,122,2.604,123,2.944,124,2.604,125,1.834,126,2.059,127,2.604,128,1.978,129,2.944,130,2.604,131,3.568,132,3.461,133,2.604,134,2.147,135,0.598,136,0.596,137,1.978,138,2.147,139,2.35,140,2.35,141,2.944,142,2.604,143,2.604,144,1.167,145,2.604,146,2.604,147,2.604,148,1.707,149,1.707,150,2.35,151,3.461,152,0.262,153,0.489,154,4.603,155,2.604,156,3.461,157,4.742,158,3.461,159,5.41,160,3.461,161,2.604,162,0.415,163,3.461,164,2.944,165,3.461,166,1.834,167,2.604,168,3.461,169,1.42,170,2.147,171,3.461,172,5.41,173,3.461,174,2.604,175,3.461,176,2.35,177,3.461,178,3.461,179,3.461,180,2.944,181,2.604,182,3.461,183,2.944,184,3.461,185,3.461,186,0.015,187,0.015]],["title/classes/ActiveVariable.html",[0,0.26,188,2.016]],["body/classes/ActiveVariable.html",[0,0.347,2,0.478,3,0.318,4,0.281,5,0.21,9,0.443,16,0.21,17,0.696,20,1.574,24,1.375,33,0.641,42,1.046,47,0.682,49,1.21,50,0.581,51,0.024,52,0.581,53,0.255,54,0.565,57,0.611,58,0.808,93,3.231,94,1.21,96,3.231,97,3.377,103,0.487,112,0.943,126,1.792,150,4.65,152,0.439,153,0.528,186,0.018,187,0.018,188,3.312,189,5.152,190,3.543,191,3.765,192,4.93,193,5.794,194,3.312,195,5.794,196,5.06,197,5.794,198,4.248,199,4.709,200,5.272,201,4.709,202,4.36,203,6.277,204,5.825,205,4.709,206,4.709,207,5.794,208,4.709,209,4.93,210,5.794,211,4.709,212,6.55,213,0.81,214,4.709,215,4.709,216,4.709,217,4.709,218,4.709]],["title/interfaces/AnimationPreset.html",[219,1.343,220,2.395]],["body/interfaces/AnimationPreset.html",[0,0.174,3,0.16,4,0.141,5,0.105,6,0.956,8,0.75,9,0.16,11,1.313,12,1.368,13,1.019,16,0.105,17,0.432,20,1.22,24,1.16,29,2.147,42,0.799,44,1.823,45,2.25,49,0.493,51,0.024,53,0.213,54,0.409,55,1.287,58,0.261,59,0.909,69,1.229,71,1.22,73,1.088,77,2.055,79,2.12,84,1.088,85,1.551,88,0.628,90,1.019,92,1.088,93,1.165,94,1.094,96,2.583,97,2.917,98,2.701,101,0.525,103,0.302,107,1.22,112,0.969,117,1.041,120,1.465,121,0.899,134,2.701,135,0.579,136,0.407,137,1.35,148,1.165,149,1.773,152,0.272,153,0.588,162,0.283,169,1.653,170,1.465,174,3.276,186,0.011,187,0.011,194,1.35,209,2.009,213,0.949,219,0.899,220,2.956,221,1.35,222,1.777,223,4.743,224,2.055,225,5.736,226,5.517,227,3.328,228,2.441,229,3.463,230,0.926,231,4.649,232,5.712,233,1.287,234,6.057,235,2.307,236,5.909,237,3.595,238,1.905,239,3.704,240,1.657,241,2.121,242,2.705,243,1.905,244,2.009,245,5.913,246,1.773,247,2.23,248,3.058,249,2.009,250,3.305,251,2.055,252,2.361,253,1.287,254,2.489,255,2.361,256,2.009,257,2.006,258,1.459,259,3.058,260,1.465,261,0.846,262,2.361,263,2.361,264,3.595,265,2.361,266,2.009,267,1.905,268,2.361,269,2.23,270,0.936,271,2.361,272,2.956,273,2.361,274,2.956,275,2.361,276,3.556,277,2.361,278,2.361,279,4.317,280,1.165,281,2.23,282,2.705,283,5.891,284,3.704,285,2.009,286,2.055,287,2.361,288,2.361,289,2.23,290,1.35,291,1.603,292,2.361,293,1.715,294,2.361,295,2.361,296,2.361,297,3.276,298,2.361,299,3.595,300,2.009,301,2.23,302,2.055,303,2.009,304,1.165,305,2.361,306,2.361,307,2.361,308,2.361,309,2.361,310,2.361,311,2.361,312,4.456,313,4.456,314,5.775,315,3.941,316,4.456,317,5.913,318,2.579,319,2.361,320,3.595,321,2.361,322,2.361,323,1.35,324,4.353,325,2.361,326,3.595,327,2.361,328,4.353,329,4.867,330,2.361,331,1.777,332,2.361,333,5.517,334,2.361,335,1.368,336,2.441,337,3.595,338,4.867,339,2.994,340,2.361,341,1.165,342,1.763,343,3.595,344,4.867,345,1.35,346,4.867,347,2.361,348,2.009,349,2.009,350,3.595,351,4.867,352,1.465,353,3.595,354,3.595,355,2.361,356,3.595,357,3.595,358,3.595,359,3.595,360,2.361,361,3.595,362,2.361,363,2.009,364,1.088,365,1.777,366,2.361,367,3.595,368,2.361,369,2.361,370,2.361,371,1.777,372,2.361,373,2.361,374,2.361,375,2.361,376,2.009,377,2.009,378,1.777,379,3.595,380,2.361,381,2.361,382,2.361,383,3.595,384,2.361,385,1.35,386,2.361,387,2.361,388,2.579,389,2.705,390,2.361,391,2.361,392,2.361,393,2.361,394,2.361,395,2.361,396,1.465,397,2.441,398,2.361,399,2.361,400,2.361,401,2.361,402,2.361,403,3.595,404,2.009,405,2.361,406,2.361,407,2.361,408,2.361,409,2.361,410,2.361,411,3.595,412,2.361,413,2.361,414,2.361,415,2.361,416,2.361,417,2.361,418,2.361,419,2.361,420,2.361,421,2.361,422,2.361,423,2.361,424,2.361,425,2.361,426,2.361,427,2.361,428,2.361,429,2.361,430,3.595,431,4.353,432,2.361,433,2.361,434,2.361,435,2.009,436,2.361,437,1.603,438,2.361,439,3.209,440,5.03,441,4.353,442,3.595,443,3.058,444,3.595,445,2.361,446,2.361,447,4.867,448,2.009,449,2.361,450,2.441,451,4.353,452,1.465,453,2.361,454,1.165,455,3.595,456,3.595,457,2.361,458,2.361,459,2.361,460,2.361,461,2.361,462,2.361,463,2.361,464,2.009,465,1.465,466,3.595,467,2.361,468,1.019,469,1.777,470,2.361,471,2.009,472,5.913,473,4.152,474,3.595,475,1.251,476,4.353,477,2.361,478,4.353,479,2.361,480,3.595,481,2.009,482,2.361,483,2.361,484,3.595,485,3.595,486,2.055,487,3.595,488,2.361,489,3.595,490,2.361,491,2.361,492,2.361,493,2.361,494,2.361,495,2.361,496,2.361,497,2.361,498,2.361,499,2.361,500,2.361,501,2.361,502,3.704,503,3.595,504,2.361,505,2.361,506,2.361,507,4.867,508,2.361,509,2.361,510,2.361,511,1.777,512,1.35,513,3.595,514,2.361,515,1.777,516,2.361,517,2.009,518,2.361,519,2.009,520,2.361,521,3.595,522,2.401,523,2.23,524,3.595,525,2.361,526,1.465,527,2.361,528,2.361,529,2.361,530,3.595,531,2.361,532,2.361,533,2.361,534,3.595,535,2.361,536,3.595,537,2.361,538,2.361,539,2.361,540,2.361,541,2.361]],["title/classes/CMSObjects.html",[0,0.26,542,2.395]],["body/classes/CMSObjects.html",[0,0.338,2,0.465,3,0.31,4,0.274,5,0.204,9,0.385,16,0.204,18,2.222,24,0.9,33,0.631,47,0.465,50,0.618,51,0.024,52,0.425,53,0.171,54,0.385,59,1.191,68,3.451,69,1.609,80,0.79,85,2.46,103,0.479,117,0.689,135,0.631,136,0.79,144,1.923,152,0.347,153,0.385,162,0.55,169,1.707,170,3.537,186,0.018,187,0.018,213,0.983,230,0.797,240,2.627,242,4.29,243,3.02,246,3.06,247,3.537,257,2.627,270,0.883,289,2.845,302,2.622,342,2.309,396,3.537,486,3.259,542,3.871,543,4.85,544,3.451,545,3.259,546,2.46,547,4.85,548,4.29,549,3.871,550,5.701,551,5.701,552,4.586,553,3.259,554,6.803,555,6.803,556,6.203,557,4.586,558,4.85,559,5.701,560,4.85,561,3.114,562,3.902,563,3.902,564,5.701,565,4.586,566,4.586,567,4.586,568,4.586,569,4.586,570,4.586,571,5.701,572,6.203,573,6.203,574,5.701,575,6.203,576,6.203,577,3.451,578,5.701,579,6.203,580,6.203,581,5.701,582,6.203,583,6.203,584,5.701,585,3.902,586,5.701,587,3.902,588,3.451,589,5.701,590,4.586,591,4.586,592,4.586,593,4.586,594,4.586,595,4.586,596,3.114,597,3.451,598,4.586,599,2.622,600,4.586,601,6.203,602,3.451,603,3.902,604,4.586,605,5.701,606,4.586,607,4.586,608,3.902,609,4.586,610,4.586,611,4.586,612,4.586,613,4.586]],["title/classes/ColorManager.html",[0,0.26,614,2.395]],["body/classes/ColorManager.html",[0,0.294,2,0.406,3,0.27,4,0.238,5,0.178,6,2.658,8,1.27,9,0.444,11,1.676,12,1.987,16,0.178,24,1.345,33,0.578,42,0.888,44,2.086,47,0.649,49,1.091,50,0.593,51,0.024,52,0.653,53,0.238,54,0.538,55,2.209,56,0.888,58,0.682,69,1.741,76,3.24,80,1.209,85,2.253,94,1.215,101,1.16,103,0.518,112,0.962,117,0.601,135,0.578,136,0.689,137,3.822,152,0.302,153,0.57,155,3.007,169,2.184,186,0.017,187,0.017,230,0.862,253,1.87,257,3.16,258,1.456,261,1.87,270,0.898,335,1.987,341,2.576,452,2.479,454,2.869,608,3.4,614,3.546,615,4.072,616,4.188,617,3.24,618,5.222,619,5.816,620,5.222,621,3.996,622,3.996,623,3.929,624,5.222,625,3.007,626,4.188,627,3.042,628,2.84,629,3.543,630,5.222,631,3.929,632,5.222,633,3.996,634,3.929,635,3.996,636,5.247,637,6.167,638,4.442,639,3.007,640,5.222,641,3.546,642,5.222,643,3.929,644,5.222,645,2.985,646,5.222,647,3.996,648,5.222,649,3.546,650,3.546,651,3.996,652,3.996,653,3.996,654,3.996,655,3.996,656,3.929,657,5.222,658,3.929,659,3.929,660,3.929,661,5.222,662,5.222,663,5.222,664,3.996,665,3.996,666,3.996,667,3.996,668,3.996,669,5.222,670,5.222,671,3.4,672,3.007,673,3.996,674,3.996,675,3.996,676,3.996,677,3.996,678,3.996,679,3.996]],["title/classes/ColorOptions.html",[0,0.26,680,2.395]],["body/classes/ColorOptions.html",[0,0.189,2,0.261,3,0.174,4,0.154,5,0.114,9,0.367,11,1.149,12,1.459,16,0.114,17,0.46,20,1.821,33,0.424,42,0.852,47,0.69,49,0.801,50,0.585,51,0.024,52,0.608,53,0.248,54,0.427,55,1.373,56,0.571,57,0.766,58,0.763,59,1.135,61,1.767,66,1.22,69,1.869,71,1.583,73,1.185,76,3.153,80,0.982,85,1.979,88,1.02,92,2.342,103,0.545,107,0.645,112,0.949,117,0.689,126,0.979,135,0.562,136,0.661,152,0.29,153,0.496,162,0.61,169,2.191,186,0.012,187,0.012,230,0.867,235,2.032,257,2.342,258,1.491,261,1.82,270,0.659,293,1.65,304,1.269,335,1.459,341,2.262,345,1.47,454,2.913,512,2.192,523,1.596,614,4.01,615,4.262,616,3.113,617,3.153,628,2.308,629,2.429,634,1.935,638,3.262,649,3.451,680,2.604,681,3.373,682,1.747,683,2.261,684,4.585,685,4.585,686,3.901,687,4.585,688,4.585,689,4.585,690,5.082,691,5.082,692,5.082,693,3.835,694,3.835,695,5.082,696,5.082,697,5.082,698,5.082,699,3.835,700,2.572,701,5.082,702,3.02,703,5.082,704,4.443,705,2.572,706,2.192,707,0.961,708,2.885,709,4.849,710,2.677,711,4.323,712,3.927,713,3.835,714,3.161,715,3.835,716,4.17,717,3.835,718,4.849,719,3.985,720,5.082,721,3.835,722,3.835,723,3.262,724,3.835,725,2.572,726,3.262,727,6.314,728,2.572,729,3.664,730,2.572,731,2.572,732,3.113,733,2.604,734,2.572,735,1.745,736,2.262,737,5.435,738,3.901,739,2.507,740,3.835,741,2.572,742,3.835,743,2.572,744,3.451,745,3.691,746,2.572,747,2.572,748,2.572,749,3.835,750,2.572,751,3.451,752,3.835,753,3.45,754,4.624,755,4.09,756,4.585,757,5.435,758,4.585,759,3.835,760,2.572,761,5.435,762,2.342,763,2.572,764,2.572,765,2.572,766,2.572,767,2.885,768,3.835,769,6.069,770,2.572,771,3.835,772,3.835,773,1.47,774,1.935,775,1.747,776,1.47,777,1.596,778,1.935,779,3.691,780,5.082,781,2.572,782,2.572,783,2.572,784,4.585,785,2.308,786,2.572,787,1.767,788,4.624,789,2.572,790,2.572,791,1.935,792,2.572,793,2.188,794,2.572,795,2.572,796,2.572,797,2.572,798,2.572,799,2.572,800,2.572,801,3.835,802,5.7,803,2.572,804,2.572,805,2.572,806,3.835,807,3.835,808,2.572,809,2.572,810,2.572,811,2.572,812,3.835,813,2.572,814,4.585,815,4.585,816,3.835,817,1.747,818,1.747,819,2.188,820,1.935,821,1.747,822,2.188,823,2.188,824,2.572,825,2.572,826,2.572,827,2.572,828,2.572,829,4.585,830,3.835,831,3.835,832,2.188,833,3.835,834,3.835,835,3.835,836,2.572,837,2.572,838,2.572,839,2.572,840,2.572,841,1.185,842,2.572,843,2.188,844,2.572,845,2.572,846,2.572,847,2.572,848,3.835,849,3.262,850,2.572]],["title/interfaces/Configuration.html",[219,1.343,851,1.263]],["body/interfaces/Configuration.html",[3,0.315,4,0.278,5,0.208,9,0.315,16,0.208,17,0.691,45,2.192,51,0.024,53,0.264,54,0.609,56,1.518,57,0.886,59,1.203,61,3.008,62,3.574,66,1.533,80,1.156,117,0.939,135,0.691,144,1.943,152,0.353,166,3.052,186,0.018,187,0.018,219,1.775,221,2.666,224,3.293,230,0.992,233,2.063,258,1.583,623,4.334,683,1.83,702,3.459,735,2.552,736,3.083,776,2.666,851,2.338,852,3.967,853,2.338,854,6.527,855,6.527,856,5.553,857,4.433,858,6.527,859,4.339,860,4.912,861,6.527,862,4.334,863,3.459,864,2.192,865,4.334,866,3.293,867,4.9,868,2.486,869,3.911,870,3.293,871,3.293,872,3.311,873,3.911,874,3.293,875,4.433,876,4.334,877,5.76,878,4.663,879,4.663,880,4.663,881,3.509,882,2.471,883,4.663,884,4.663]],["title/classes/CoordinateHelper.html",[0,0.26,885,2.016]],["body/classes/CoordinateHelper.html",[0,0.276,2,0.38,3,0.253,4,0.223,5,0.167,9,0.436,16,0.167,18,2.546,24,1.229,33,0.665,47,0.654,50,0.627,51,0.024,52,0.58,53,0.233,54,0.526,56,0.832,71,1.412,103,0.575,117,1.097,135,0.414,136,0.645,152,0.283,153,0.562,162,0.774,186,0.016,187,0.016,213,0.901,241,2.665,270,0.854,272,4.082,274,3.824,276,3.824,286,3.436,291,2.542,293,1.715,297,5.146,301,4.243,303,3.185,371,4.523,385,3.219,396,3.103,448,5.483,641,3.396,817,3.396,841,1.725,885,2.859,886,5.598,887,2.817,888,3.103,889,4.523,890,5.001,891,5.001,892,6.011,893,5.632,894,5.001,895,4.792,896,5.001,897,3.744,898,4.424,899,3.744,900,5.001,901,5.001,902,5.001,903,5.001,904,4.458,905,3.744,906,5.632,907,3.744,908,5.76,909,4.255,910,4.255,911,5.001,912,3.396,913,3.763,914,2.859,915,3.744,916,4.856,917,3.744,918,5.114,919,5.001,920,6.011,921,6.011,922,6.011,923,6.444,924,5.001,925,6.011,926,6.945,927,5.001,928,3.744,929,6.686,930,4.523,931,6.011,932,6.011,933,6.011,934,6.011,935,3.744,936,3.744,937,5.001,938,3.744,939,5.001,940,3.744,941,3.744,942,3.744,943,4.255,944,3.763,945,5.001,946,5.114,947,5.001,948,5.001,949,3.744,950,3.744,951,6.011,952,5.001,953,3.185,954,4.255,955,3.185,956,3.744,957,3.744,958,3.185,959,3.744,960,3.744,961,3.744,962,3.744,963,3.744,964,3.744]],["title/classes/Cut.html",[0,0.26,965,1.869]],["body/classes/Cut.html",[0,0.33,2,0.454,3,0.302,4,0.267,5,0.199,9,0.379,16,0.199,17,0.674,20,1.695,24,1.398,33,0.621,42,1.247,47,0.704,49,1.172,50,0.414,51,0.024,52,0.596,53,0.255,54,0.376,57,0.89,58,0.799,71,1.407,80,1.108,103,0.376,112,0.672,117,1.085,152,0.339,153,0.541,186,0.018,187,0.018,194,3.506,230,1.01,235,3.25,258,1.705,304,3.453,754,5.837,755,5.163,965,3.635,966,3.806,967,3.806,968,4.473,969,4.481,970,6.133,971,6.133,972,4.499,973,5.837,974,5.837,975,3.865,976,4.473,977,5.612,978,3.482,979,6.133,980,7.049,981,4.473,982,4.473,983,4.473,984,4.473,985,4.473,986,4.473,987,5.612,988,5.612,989,4.473,990,4.473]],["title/classes/DatGUIMenuUI.html",[0,0.26,991,2.654]],["body/classes/DatGUIMenuUI.html",[0,0.295,2,0.21,3,0.14,4,0.124,5,0.092,9,0.403,11,1.312,12,2.156,13,1.959,16,0.145,17,0.39,20,1.74,24,1.358,33,0.359,42,0.46,44,1.443,47,0.679,49,0.838,50,0.54,51,0.024,52,0.609,53,0.26,54,0.49,55,1.626,56,1.163,57,0.679,58,0.693,59,1.183,66,0.551,68,1.559,69,1.879,71,0.815,73,0.954,77,2.292,79,1.8,80,1.178,88,1.392,90,2.445,94,0.838,101,0.722,103,0.519,107,0.519,112,0.941,117,0.602,126,1.877,135,0.579,136,1.004,137,2.991,152,0.157,153,0.543,162,0.545,167,1.559,169,1.993,181,1.559,186,0.01,187,0.01,213,0.69,230,0.977,240,0.954,243,1.722,246,2.699,253,1.626,258,1.66,261,1.874,269,1.285,270,0.907,272,3.083,274,3.083,276,3.349,289,3.246,290,2.595,291,3.847,293,1.392,323,1.857,335,1.992,342,2.619,345,1.857,388,2.772,397,2.206,468,2.128,475,1.722,486,1.184,512,3.53,526,2.016,546,1.402,588,1.559,617,2.817,628,2.414,629,2.613,650,1.407,656,3.416,658,2.445,659,1.559,681,3.317,683,1.663,706,4.067,707,1.647,735,2.654,739,2.581,785,2.46,787,2.845,821,1.407,851,1.626,857,2.206,868,2.258,869,3.083,870,1.857,871,3.727,909,2.764,912,3.553,965,2.613,973,1.762,974,1.762,978,2.016,991,2.445,992,5.722,993,5.347,994,1.407,995,2.016,996,2.521,997,2.764,998,2.292,999,3.411,1000,3.411,1001,4.009,1002,3.411,1003,4.009,1004,4.009,1005,4.009,1006,3.017,1007,3.416,1008,2.445,1009,2.445,1010,3.416,1011,2.445,1012,2.445,1013,3.937,1014,2.445,1015,2.445,1016,3.249,1017,3.249,1018,2.817,1019,2.764,1020,1.857,1021,2.595,1022,1.762,1023,2.071,1024,2.991,1025,1.762,1026,3.249,1027,3.407,1028,1.559,1029,2.071,1030,5.233,1031,2.071,1032,5.233,1033,2.071,1034,2.071,1035,1.559,1036,3.831,1037,2.071,1038,3.416,1039,2.487,1040,3.219,1041,2.071,1042,2.206,1043,2.445,1044,3.711,1045,2.445,1046,2.071,1047,3.711,1048,2.445,1049,4.54,1050,2.071,1051,2.445,1052,3.416,1053,2.445,1054,2.071,1055,2.445,1056,3.711,1057,1.762,1058,3.083,1059,2.817,1060,2.206,1061,2.595,1062,2.445,1063,2.071,1064,3.017,1065,2.445,1066,2.071,1067,2.206,1068,2.206,1069,2.445,1070,1.762,1071,2.445,1072,5.233,1073,1.762,1074,3.249,1075,2.071,1076,1.559,1077,1.559,1078,1.022,1079,2.071,1080,2.071,1081,2.071,1082,2.071,1083,2.071,1084,1.762,1085,1.285,1086,1.762,1087,2.071,1088,4.452,1089,4.196,1090,4.819,1091,1.762,1092,2.071,1093,2.071,1094,2.071,1095,2.071,1096,2.445,1097,3.937,1098,4.54,1099,2.071,1100,3.249,1101,5.471,1102,4.956,1103,2.071,1104,2.764,1105,1.762,1106,3.249,1107,1.762,1108,2.071,1109,2.071,1110,2.071,1111,1.762,1112,1.184,1113,1.762,1114,2.071,1115,2.071,1116,3.249,1117,2.445,1118,2.071,1119,4.819,1120,2.071,1121,3.249,1122,4.54,1123,2.071,1124,4.009,1125,3.249,1126,1.762,1127,5.233,1128,1.762,1129,2.071,1130,2.071,1131,1.762,1132,2.071,1133,4.009,1134,3.249,1135,1.762,1136,1.407,1137,2.071,1138,2.071,1139,2.071,1140,2.071,1141,2.071,1142,2.071,1143,3.249,1144,2.071,1145,4.009,1146,2.071,1147,3.249,1148,2.071,1149,2.071,1150,3.249,1151,2.071,1152,2.071,1153,2.071,1154,1.184,1155,2.071,1156,2.071,1157,2.071,1158,2.071,1159,1.762,1160,1.559,1161,2.071,1162,1.022,1163,2.071,1164,2.071,1165,2.071,1166,4.009,1167,3.249,1168,1.762,1169,2.071,1170,2.071,1171,1.762,1172,2.071,1173,1.762,1174,3.862,1175,2.071,1176,2.071,1177,1.762,1178,2.071,1179,2.071,1180,2.071,1181,3.249,1182,2.071,1183,3.249,1184,1.762,1185,4.54,1186,2.071,1187,4.009,1188,1.762,1189,1.762,1190,1.762,1191,2.071,1192,2.071,1193,2.071,1194,2.071,1195,4.54,1196,2.071,1197,2.071,1198,2.071,1199,3.249,1200,2.764,1201,2.764,1202,2.071,1203,3.249,1204,2.071,1205,2.764,1206,2.071,1207,2.071,1208,2.071,1209,1.559,1210,1.762,1211,1.762,1212,2.764,1213,2.764,1214,2.071,1215,2.071,1216,1.762,1217,3.249,1218,3.249,1219,4.54,1220,2.071,1221,2.071,1222,2.071,1223,2.071,1224,2.071,1225,2.071,1226,2.071,1227,2.071,1228,2.071,1229,2.071,1230,4.54,1231,2.071,1232,2.071,1233,2.071,1234,2.071,1235,1.762,1236,1.762,1237,1.762,1238,1.762,1239,2.071,1240,2.071,1241,2.071,1242,1.762,1243,1.762,1244,2.071,1245,1.762,1246,2.071,1247,2.071,1248,1.559,1249,1.559,1250,2.071,1251,2.071,1252,2.071]],["title/classes/EffectsManager.html",[0,0.26,1253,2.395]],["body/classes/EffectsManager.html",[0,0.254,2,0.35,3,0.233,4,0.206,5,0.154,6,2.796,8,1.097,9,0.425,11,1.458,16,0.154,17,0.568,20,1.75,24,1.387,29,3.237,33,0.524,42,1.201,44,2.332,45,2.78,47,0.696,50,0.564,51,0.024,52,0.564,53,0.253,54,0.512,55,2.082,56,1.353,57,0.883,58,0.382,59,0.989,61,2.679,71,0.866,94,1.215,99,3.607,101,1.201,103,0.529,110,2.412,112,0.915,135,0.674,136,0.595,152,0.261,153,0.559,162,0.414,186,0.015,187,0.015,213,0.813,230,0.981,253,1.696,270,0.614,331,4.375,336,3.948,468,2.043,627,3.237,639,2.598,714,2.335,853,2.512,1061,2.706,1253,3.215,1254,5.873,1255,5.159,1256,4.375,1257,5.967,1258,4.028,1259,4.028,1260,5.664,1261,6.904,1262,5.403,1263,4.762,1264,5.814,1265,4.734,1266,4.734,1267,4.734,1268,4.734,1269,4.734,1270,3.563,1271,4.028,1272,5.814,1273,2.937,1274,3.948,1275,4.375,1276,2.142,1277,5.403,1278,2.598,1279,6.735,1280,5.403,1281,2.937,1282,3.563,1283,3.563,1284,4.849,1285,2.598,1286,3.452,1287,4.946,1288,4.946,1289,4.375,1290,5.583,1291,4.734,1292,3.452,1293,4.734,1294,3.452,1295,4.734,1296,2.937,1297,4.734,1298,2.937,1299,3.452,1300,2.344,1301,4.734,1302,3.452,1303,3.452,1304,3.452,1305,4.734,1306,3.452,1307,4.597,1308,4.028,1309,3.452,1310,3.452,1311,3.452,1312,2.142,1313,4.734,1314,5.403,1315,4.734,1316,4.734,1317,3.452,1318,3.452,1319,3.452,1320,3.452,1321,3.452,1322,2.937,1323,3.452,1324,3.452,1325,3.452,1326,3.452,1327,3.452,1328,3.452,1329,3.452]],["title/interfaces/EventDataLoader.html",[219,1.343,859,2.189]],["body/interfaces/EventDataLoader.html",[3,0.387,4,0.231,5,0.172,9,0.428,11,1.631,16,0.255,33,0.565,47,0.673,50,0.564,51,0.024,52,0.564,53,0.236,54,0.512,69,2.038,80,1.233,88,1.792,103,0.595,112,0.768,117,0.86,121,1.945,125,2.708,135,0.633,152,0.293,153,0.573,186,0.016,187,0.016,219,1.472,221,2.211,228,3.471,230,1.019,233,1.385,235,2.708,257,3.103,258,1.665,323,3.272,545,2.922,548,3.846,627,2.521,628,2.879,629,2.708,631,4.582,649,3.471,707,1.527,710,2.47,753,3.846,762,2.355,777,3.778,785,2.76,821,3.471,853,1.831,859,3.171,868,2.206,872,2.708,881,2.911,914,2.922,996,2.997,1018,3.778,1020,3.933,1021,3.481,1024,2.922,1027,3.718,1059,3.171,1162,2.521,1330,5.729,1331,2.911,1332,5.111,1333,5.111,1334,5.724,1335,5.724,1336,5.111,1337,5.181,1338,5.181,1339,5.111,1340,6.09,1341,3.868,1342,5.181,1343,3.868,1344,3.868,1345,5.181,1346,4.582,1347,3.849,1348,3.868,1349,5.534,1350,4.349,1351,5.111,1352,5.111,1353,4.349,1354,3.846,1355,4.349,1356,5.111,1357,3.846,1358,5.111,1359,3.887,1360,3.846,1361,4.349,1362,3.868,1363,4.349,1364,4.349,1365,3.868,1366,3.171,1367,4.135,1368,4.349,1369,5.534,1370,3.868,1371,4.582,1372,3.846,1373,5.111,1374,3.868,1375,4.349,1376,4.178,1377,4.349,1378,3.846,1379,3.868,1380,3.291,1381,2.911]],["title/classes/ExportManager.html",[0,0.26,1382,2.654]],["body/classes/ExportManager.html",[0,0.286,2,0.394,3,0.263,4,0.232,5,0.255,6,2.638,8,1.235,9,0.44,11,1.285,12,1.951,16,0.173,20,1.71,24,1.278,33,0.567,44,2.303,47,0.644,50,0.587,51,0.024,52,0.587,53,0.236,54,0.533,66,1.623,90,2.213,92,3.278,103,0.533,112,0.771,135,0.675,136,0.67,152,0.434,153,0.567,162,0.689,186,0.016,187,0.016,213,0.717,230,0.977,246,3.509,253,1.836,258,1.626,260,3.181,270,0.912,323,3.967,628,1.574,672,2.925,841,1.791,851,2.414,864,1.951,1024,4.136,1154,2.931,1276,2.411,1354,3.858,1382,3.858,1383,5.541,1384,5.738,1385,5.127,1386,5.127,1387,5.127,1388,5.127,1389,3.887,1390,3.887,1391,5.19,1392,4.143,1393,4.362,1394,4.362,1395,4.362,1396,4.362,1397,6.101,1398,4.092,1399,5.127,1400,5.127,1401,3.887,1402,3.723,1403,5.127,1404,3.887,1405,5.127,1406,3.887,1407,3.858,1408,5.127,1409,5.127,1410,3.887,1411,5.127,1412,3.887,1413,2.639,1414,3.307,1415,3.887,1416,5.738,1417,3.896,1418,3.887,1419,3.887,1420,3.887,1421,5.127,1422,6.101,1423,3.887,1424,2.639,1425,2.639,1426,3.307,1427,2.925,1428,4.362,1429,3.887,1430,3.887,1431,3.307,1432,3.887,1433,3.887,1434,3.887,1435,6.101,1436,3.887,1437,6.101,1438,3.887,1439,3.307,1440,3.887,1441,3.887,1442,3.887,1443,3.887,1444,3.887,1445,3.887,1446,3.887,1447,3.887]],["title/classes/Field.html",[0,0.26,972,2.395]],["body/classes/Field.html",[0,0.417,2,0.384,3,0.256,4,0.226,5,0.168,9,0.256,13,1.632,16,0.168,17,0.454,18,2.162,33,0.557,47,0.384,50,0.35,51,0.024,52,0.35,53,0.141,54,0.318,56,0.84,57,0.491,59,1.052,71,0.948,79,2.054,88,1.007,94,0.79,103,0.543,107,0.948,117,1.045,121,1.44,135,0.418,136,0.652,144,1.698,149,1.866,152,0.286,153,0.563,162,0.605,186,0.016,187,0.016,198,2.347,213,0.529,238,2.004,241,2.912,254,2.162,267,3,269,2.347,270,0.897,280,1.866,281,3.512,304,3.188,318,2.004,352,3.745,364,1.743,450,3.42,475,3,522,1.866,712,2.879,719,3.236,739,1.866,762,2.321,818,2.569,841,2.978,972,4.099,995,2.347,1312,3.125,1417,2.569,1448,3.42,1449,2.569,1450,2.847,1451,3.783,1452,3.783,1453,3.783,1454,3.79,1455,4.653,1456,4.653,1457,2.004,1458,2.672,1459,2.847,1460,2.847,1461,2.847,1462,4.099,1463,3.745,1464,2.847,1465,2.847,1466,2.847,1467,4.268,1468,2.847,1469,2.847,1470,2.847,1471,2.847,1472,4.542,1473,4.26,1474,3.79,1475,3.79,1476,4.964,1477,5.042,1478,4.542,1479,3.745,1480,2.847,1481,2.847,1482,2.847,1483,5.105,1484,2.847,1485,2.347,1486,5.042,1487,2.847,1488,2.847,1489,4.73,1490,5.156,1491,2.847,1492,4.964,1493,2.847,1494,2.847,1495,2.847,1496,3.79,1497,2.847,1498,3.79,1499,4.26,1500,2.847,1501,2.847,1502,2.847,1503,2.847,1504,2.847,1505,2.847,1506,2.847,1507,2.847,1508,2.847,1509,2.847,1510,2.847,1511,2.847,1512,2.847,1513,2.847,1514,2.847,1515,2.847,1516,2.162,1517,2.847,1518,4.26,1519,3.79,1520,2.847,1521,4.26,1522,2.569,1523,4.26,1524,3.79,1525,2.847,1526,2.847,1527,2.847,1528,2.847,1529,2.847,1530,2.847,1531,2.847,1532,2.847,1533,2.847,1534,2.847,1535,2.847,1536,3.79,1537,3.79,1538,3.79,1539,4.26,1540,3.125,1541,4.26,1542,3.79,1543,2.347,1544,3.42,1545,2.569,1546,2.347,1547,2.347,1548,3.125,1549,2.847,1550,2.847,1551,2.847,1552,2.847,1553,2.847,1554,2.847,1555,2.847]],["title/classes/InfoLogger.html",[0,0.26,1347,2.016]],["body/classes/InfoLogger.html",[0,0.353,2,0.487,3,0.49,4,0.286,5,0.213,9,0.396,16,0.213,17,0.703,20,1.724,33,0.648,47,0.669,50,0.444,51,0.024,52,0.444,53,0.235,54,0.403,57,0.76,58,0.648,73,2.7,80,1.185,88,1.559,103,0.532,110,2.098,112,0.72,117,0.88,126,1.825,152,0.363,153,0.492,162,0.575,186,0.019,187,0.019,230,0.67,258,1.672,627,2.89,707,1.652,739,2.89,785,2.82,853,1.717,1347,3.349,1359,4.809,1360,3.607,1367,4.67,1378,4.409,1556,5.751,1557,4.079,1558,6.327,1559,6.327,1560,6.59,1561,4.794,1562,4.984,1563,4.794,1564,5.859,1565,5.859,1566,4.409,1567,4.984,1568,5.859,1569,4.794,1570,5.859,1571,5.175,1572,4.794,1573,4.409,1574,4.409,1575,4.794,1576,4.794,1577,4.794,1578,4.794,1579,4.794]],["title/classes/LoadingManager.html",[0,0.26,1580,2.189]],["body/classes/LoadingManager.html",[0,0.255,2,0.351,3,0.234,4,0.207,5,0.154,8,1.1,9,0.436,11,1.646,16,0.154,17,0.569,18,1.938,20,1.72,24,1.416,33,0.525,42,1.202,47,0.705,49,0.991,50,0.583,51,0.024,52,0.583,53,0.257,54,0.529,57,0.837,58,0.713,66,1.44,74,3.57,80,1.197,94,1.392,96,3.475,97,3.427,103,0.552,112,1.05,117,0.969,148,3.509,152,0.262,153,0.542,162,0.416,186,0.015,187,0.015,196,4.38,233,1.24,235,2.514,253,1.24,270,0.755,293,1.44,341,2.34,437,4.783,707,1.646,710,1.494,733,4.277,787,1.596,864,2.397,868,2.96,874,3.972,975,3.6,1040,2.514,1102,4.036,1276,2.148,1285,2.606,1398,4.054,1580,3.612,1581,5.942,1582,2.946,1583,5.412,1584,5.412,1585,5.412,1586,5.412,1587,4.744,1588,4.744,1589,4.744,1590,4.744,1591,4.744,1592,4.744,1593,4.036,1594,3.463,1595,3.463,1596,4.744,1597,5.353,1598,3.463,1599,4.744,1600,3.463,1601,4.744,1602,3.463,1603,5.358,1604,4.744,1605,3.463,1606,4.744,1607,2.946,1608,5.821,1609,4.744,1610,2.606,1611,4.744,1612,4.744,1613,2.946,1614,4.744,1615,3.463,1616,5.412,1617,3.463,1618,4.744,1619,3.463,1620,3.463,1621,2.946,1622,5.412,1623,4.744,1624,3.463,1625,3.463,1626,3.463,1627,3.463,1628,4.744,1629,3.463,1630,4.744,1631,4.036,1632,4.744,1633,3.463,1634,3.463,1635,4.744,1636,3.463,1637,4.744,1638,3.463,1639,3.463,1640,3.463,1641,3.463,1642,3.463]],["title/classes/PhoenixMenuNode.html",[0,0.26,702,1.869]],["body/classes/PhoenixMenuNode.html",[0,0.179,2,0.247,3,0.164,4,0.145,5,0.108,9,0.421,16,0.108,17,0.441,20,1.399,33,0.407,42,0.817,47,0.7,49,1.166,50,0.577,51,0.024,52,0.661,53,0.262,54,0.513,56,1.455,57,0.752,58,0.742,59,1.166,66,1.725,69,1.498,71,1.111,75,3.462,76,3.292,80,1.21,88,0.978,93,2.437,94,1.355,101,0.54,103,0.563,107,1.531,112,0.936,117,0.552,121,2.44,126,2.205,135,0.269,140,2.496,152,0.184,153,0.563,162,0.696,166,1.288,169,1.327,186,0.012,187,0.012,192,3.127,194,2.101,200,3.717,213,0.34,233,1.587,270,0.857,293,1.179,435,2.068,468,2.686,469,2.766,523,2.281,526,2.281,577,2.766,628,0.985,660,5.258,681,3.416,683,2.081,702,3.692,707,1.239,710,1.913,716,3.065,735,2.713,736,3.608,767,4.684,776,3.959,787,1.694,820,1.829,849,3.127,851,2.137,864,1.399,882,3.669,1020,1.39,1061,2.101,1097,4.596,1136,1.651,1162,1.813,1209,4.88,1402,1.39,1458,2.696,1597,4.199,1643,2.068,1644,5.77,1645,4.432,1646,4.432,1647,4.432,1648,5.103,1649,4.432,1650,5.621,1651,4.432,1652,4.432,1653,4.432,1654,3.676,1655,3.676,1656,3.676,1657,4.94,1658,3.127,1659,3.676,1660,3.676,1661,4.94,1662,2.068,1663,3.676,1664,5.076,1665,2.431,1666,2.431,1667,2.431,1668,4.203,1669,3.676,1670,2.431,1671,2.431,1672,2.431,1673,2.431,1674,2.766,1675,2.431,1676,2.431,1677,2.431,1678,2.431,1679,2.431,1680,2.431,1681,4.432,1682,2.431,1683,3.436,1684,3.676,1685,2.431,1686,3.127,1687,3.676,1688,2.431,1689,4.49,1690,4.94,1691,4.94,1692,3.676,1693,2.431,1694,2.431,1695,3.127,1696,2.431,1697,3.702,1698,2.431,1699,3.676,1700,2.431,1701,3.676,1702,2.431,1703,3.127,1704,3.676,1705,2.431,1706,3.771,1707,2.496,1708,3.676,1709,3.771,1710,2.068,1711,2.431,1712,5.305,1713,3.676,1714,3.676,1715,2.431,1716,2.431,1717,2.431,1718,3.676,1719,2.431,1720,2.431,1721,2.431,1722,2.431,1723,2.431,1724,2.431,1725,1.651,1726,2.431,1727,2.431,1728,2.431,1729,2.431,1730,2.431,1731,2.431,1732,4.94,1733,3.676,1734,3.676,1735,2.431,1736,2.431,1737,2.431,1738,4.94,1739,2.068,1740,2.431,1741,2.431,1742,2.431,1743,2.431,1744,2.431,1745,2.431,1746,4.432,1747,2.431,1748,2.068,1749,2.431,1750,2.068,1751,2.431,1752,3.676,1753,2.431,1754,2.431,1755,2.431,1756,2.431,1757,3.676,1758,2.431,1759,2.431,1760,2.431,1761,4.432,1762,1.651,1763,2.068,1764,2.431,1765,2.431,1766,2.431,1767,3.676,1768,2.431,1769,4.432,1770,2.431,1771,2.431,1772,2.431,1773,2.431,1774,2.431,1775,2.431,1776,2.431,1777,2.431,1778,2.431,1779,2.431,1780,2.431,1781,4.432,1782,2.431,1783,2.431,1784,2.431,1785,2.431,1786,2.431,1787,2.431,1788,5.795,1789,2.431,1790,4.432,1791,2.431,1792,3.676,1793,2.431,1794,2.431,1795,2.431,1796,2.431,1797,2.431]],["title/classes/PhoenixMenuUI.html",[0,0.26,1798,2.654]],["body/classes/PhoenixMenuUI.html",[0,0.309,2,0.226,3,0.232,4,0.133,5,0.099,9,0.402,11,1.352,12,2.315,13,2.037,16,0.099,17,0.413,20,1.656,24,1.378,33,0.38,42,0.764,44,1.5,47,0.67,49,0.718,50,0.538,51,0.024,52,0.62,53,0.259,54,0.488,55,1.691,56,1.049,57,0.446,58,0.766,59,1.126,66,1.791,69,1.522,71,1.053,73,1.026,75,2.133,77,2.4,80,1.176,88,1.544,90,2.57,94,0.877,101,0.764,103,0.528,107,0.558,112,0.957,126,1.942,134,1.382,135,0.642,136,1.026,137,3.082,152,0.169,153,0.546,162,0.567,166,1.821,169,1.947,174,3.159,181,1.676,183,1.895,186,0.011,187,0.011,213,0.481,230,0.984,240,1.026,243,1.821,246,2.328,253,1.691,258,1.665,261,1.931,270,0.826,290,2.916,293,1.357,304,2.659,335,2.209,342,2.545,345,1.965,349,1.895,364,1.026,388,2.856,397,2.334,468,2.037,475,1.18,486,2.916,526,2.133,546,1.483,596,2.334,617,3.165,628,2.35,629,2.856,641,1.512,650,1.512,656,4.057,658,3.552,659,3.159,680,2.334,681,3.281,683,1.844,686,2.925,702,3.5,704,2.587,706,3.968,707,1.678,711,1.895,718,1.895,723,1.895,735,2.741,736,3.054,738,4.587,739,2.659,773,1.273,774,1.676,775,1.512,776,3.802,785,2.818,787,1.584,788,5.346,791,3.839,832,4.016,851,1.691,860,3.159,864,1.598,868,2.037,869,2.334,882,3.524,912,3.661,965,2.856,975,1.273,978,2.133,994,1.512,995,2.133,996,2.589,997,2.925,998,2.4,999,3.572,1000,3.572,1002,3.572,1006,3.159,1007,3.552,1008,2.587,1009,2.587,1010,3.552,1011,2.587,1012,2.587,1013,4.057,1014,2.587,1015,2.587,1018,2.929,1020,1.965,1021,1.965,1024,1.965,1025,1.895,1027,3.317,1028,1.676,1035,1.676,1036,3.949,1038,3.552,1039,2.929,1040,1.821,1042,2.334,1043,2.587,1044,2.587,1045,2.587,1047,3.839,1048,2.587,1051,2.587,1052,3.552,1053,2.587,1055,2.587,1056,3.839,1057,1.895,1058,3.661,1059,2.929,1060,2.334,1061,1.965,1062,2.587,1064,3.159,1065,2.587,1067,2.334,1068,2.334,1069,2.587,1070,1.895,1071,2.587,1073,1.895,1076,1.676,1077,1.676,1088,4.587,1089,4.016,1090,4.016,1091,1.895,1096,2.587,1104,1.895,1105,2.925,1111,1.895,1112,1.273,1113,1.895,1119,2.925,1126,1.895,1131,1.895,1135,1.895,1159,1.895,1168,1.895,1171,1.895,1173,1.895,1174,2.925,1177,1.895,1184,1.895,1188,1.895,1189,1.895,1200,3.572,1201,3.572,1205,1.895,1209,2.587,1210,2.925,1211,2.925,1212,2.925,1213,2.925,1216,2.925,1235,1.895,1236,1.895,1237,1.895,1238,1.895,1242,1.895,1243,1.895,1245,1.895,1248,1.676,1249,1.676,1402,1.273,1458,1.912,1674,1.676,1683,1.18,1689,1.676,1750,3.572,1798,2.587,1799,4.198,1800,4.72,1801,2.227,1802,3.438,1803,2.227,1804,2.227,1805,2.227,1806,2.227,1807,2.227,1808,4.34,1809,2.227,1810,2.227,1811,2.227,1812,2.227,1813,2.227,1814,5.955,1815,2.925,1816,2.227,1817,4.198,1818,2.227,1819,2.227,1820,2.227,1821,3.438,1822,4.198,1823,3.438,1824,1.676,1825,2.227,1826,3.438,1827,2.227,1828,2.227,1829,2.227,1830,2.227,1831,2.227,1832,1.895,1833,3.438,1834,2.227,1835,2.227,1836,2.227,1837,2.227,1838,2.227,1839,2.227,1840,2.227,1841,2.925,1842,2.227,1843,3.438,1844,2.227,1845,2.227,1846,2.227,1847,1.895,1848,2.227,1849,3.438,1850,3.438,1851,3.438,1852,3.438,1853,2.227,1854,2.227,1855,2.227,1856,2.227,1857,2.227,1858,2.227,1859,2.227,1860,3.438,1861,2.227,1862,2.227,1863,2.227,1864,1.895,1865,2.227,1866,2.227,1867,2.227,1868,2.227,1869,1.895,1870,2.227,1871,2.227,1872,2.227,1873,2.227,1874,2.227,1875,3.438,1876,2.227,1877,2.227,1878,2.227,1879,2.227,1880,2.227,1881,2.227,1882,2.227,1883,2.227,1884,2.227,1885,2.227]],["title/classes/PhoenixObjects.html",[0,0.26,549,2.395]],["body/classes/PhoenixObjects.html",[0,0.176,2,0.243,3,0.331,4,0.143,5,0.106,9,0.449,16,0.106,17,0.287,18,2.541,20,1.58,24,0.961,33,0.402,47,0.669,50,0.666,51,0.024,52,0.61,53,0.261,54,0.554,55,1.3,57,0.72,58,0.402,59,1.024,66,1.402,69,1.929,71,0.6,73,1.102,79,1.762,80,0.412,84,1.102,85,1.894,88,0.966,92,2.022,101,0.531,103,0.572,107,0.91,117,1.031,135,0.637,136,0.412,144,2.154,152,0.181,153,0.484,162,0.632,169,1.726,170,1.484,186,0.012,187,0.012,213,0.96,227,3.338,230,0.508,233,1.755,239,3.089,240,1.102,241,1.47,242,2.732,243,2.938,244,2.035,246,3.338,247,1.484,248,2.035,251,2.509,257,2.555,267,2.596,270,0.93,272,1.624,274,2.466,276,3.327,282,1.8,289,1.484,291,1.624,293,1.304,297,3.964,302,2.076,318,2.325,335,2.431,339,3.651,341,1.18,342,2.725,352,2.253,364,1.102,365,4.467,371,1.8,378,1.8,385,1.367,388,3.146,389,4.996,396,2.723,452,2.253,454,2.598,486,1.367,512,1.367,515,2.732,522,2.417,544,1.8,545,2.076,546,1.567,549,2.466,553,3.602,558,3.089,560,3.089,561,1.624,562,2.035,596,2.466,599,2.076,602,2.732,603,2.035,627,1.18,645,2.076,650,1.624,671,2.035,672,1.8,707,0.6,708,3.302,755,2.732,762,2.022,787,1.102,841,2.427,867,3.089,885,1.367,888,2.253,898,2.253,904,3.268,908,3.734,910,2.035,913,2.732,916,2.466,918,3.089,953,2.035,954,3.089,955,2.035,1036,1.484,1040,2.325,1112,2.801,1128,2.035,1160,1.8,1162,1.791,1355,4.718,1366,2.723,1457,1.267,1479,3.441,1522,3.327,1543,4.051,1762,1.624,1847,2.035,1886,5.649,1887,3.631,1888,4.388,1889,3.631,1890,3.631,1891,4.388,1892,3.631,1893,3.631,1894,3.631,1895,3.631,1896,3.631,1897,3.631,1898,3.631,1899,3.631,1900,3.631,1901,3.631,1902,2.392,1903,2.392,1904,3.631,1905,4.388,1906,4.388,1907,3.631,1908,2.392,1909,4.903,1910,5.545,1911,2.392,1912,5.545,1913,5.268,1914,4.718,1915,2.392,1916,4.9,1917,4.9,1918,4.388,1919,4.9,1920,2.392,1921,3.631,1922,3.631,1923,3.734,1924,2.392,1925,2.392,1926,2.392,1927,2.392,1928,3.631,1929,3.631,1930,2.392,1931,2.392,1932,2.392,1933,2.392,1934,2.392,1935,2.392,1936,2.392,1937,3.302,1938,3.631,1939,2.392,1940,4.388,1941,5.268,1942,4.388,1943,4.388,1944,4.388,1945,4.467,1946,6.588,1947,3.631,1948,2.392,1949,4.388,1950,2.392,1951,2.392,1952,2.392,1953,2.392,1954,2.392,1955,2.392,1956,2.392,1957,4.9,1958,2.392,1959,2.392,1960,3.631,1961,1.624,1962,3.631,1963,2.392,1964,4.388,1965,3.631,1966,2.392,1967,3.631,1968,3.631,1969,3.631,1970,2.392,1971,2.392,1972,2.392,1973,2.392,1974,5.545,1975,2.392,1976,2.392,1977,3.631,1978,4.9,1979,2.392,1980,2.392,1981,2.392,1982,2.392,1983,2.392,1984,3.687,1985,2.392,1986,3.631,1987,2.392,1988,2.392,1989,2.392,1990,2.392,1991,1.484,1992,2.392,1993,2.392,1994,2.392,1995,2.392,1996,3.268,1997,2.392,1998,2.392,1999,2.732,2000,2.392,2001,2.035,2002,2.035,2003,2.035,2004,2.392,2005,2.392,2006,2.392,2007,2.392,2008,2.392,2009,4.388,2010,3.631,2011,3.631,2012,2.392,2013,2.392,2014,2.035,2015,2.392,2016,2.392,2017,2.392,2018,2.392,2019,2.392,2020,3.631,2021,2.392,2022,2.392,2023,2.392,2024,2.392,2025,2.392,2026,2.035,2027,2.392,2028,2.392,2029,3.631,2030,2.392,2031,2.392,2032,2.035,2033,2.392,2034,1.8,2035,2.392,2036,2.035,2037,2.392,2038,2.392,2039,2.253,2040,2.392,2041,3.631,2042,4.388,2043,3.631,2044,2.466,2045,2.392,2046,3.089,2047,2.392,2048,1.8,2049,2.392,2050,2.392,2051,3.631,2052,3.631,2053,2.392,2054,2.392,2055,2.035,2056,4.9,2057,2.392,2058,2.392,2059,3.734,2060,3.302,2061,2.466,2062,2.392,2063,2.392,2064,2.392,2065,2.392,2066,2.392,2067,3.631,2068,2.392,2069,2.035,2070,2.035,2071,3.631,2072,2.392,2073,2.392,2074,4.388,2075,2.392,2076,4.388,2077,2.392,2078,5.268,2079,2.392,2080,4.388,2081,2.392,2082,2.392,2083,2.392,2084,2.392,2085,2.392,2086,3.089,2087,2.392,2088,2.392,2089,2.392,2090,2.392,2091,2.392,2092,2.392,2093,2.392,2094,2.392,2095,2.392,2096,2.392,2097,2.392,2098,5.268,2099,4.388,2100,4.388,2101,2.392,2102,2.392,2103,3.631,2104,2.392,2105,2.035,2106,2.392,2107,2.392,2108,2.392,2109,2.392,2110,2.392,2111,3.631,2112,2.035,2113,2.392,2114,3.631,2115,2.392,2116,2.392,2117,2.392,2118,2.392,2119,3.631,2120,2.392]],["title/interfaces/PhoenixUI.html",[219,1.343,998,2.016]],["body/interfaces/PhoenixUI.html",[3,0.242,4,0.214,5,0.159,9,0.447,16,0.159,33,0.537,44,1.542,47,0.688,50,0.603,51,0.024,52,0.65,53,0.267,54,0.547,57,0.63,66,1.291,69,1.666,80,1.238,94,1.15,101,1.078,103,0.575,112,1.073,126,2.246,135,0.537,136,0.617,152,0.271,153,0.583,169,1.905,186,0.015,187,0.015,200,4.641,219,2.095,221,2.045,230,1.007,246,2.911,258,1.7,261,2.113,290,2.773,335,2.421,342,2.746,345,2.773,388,3.37,468,2.093,526,3.01,546,2.093,617,3.661,628,2.68,629,3.127,681,3.376,683,1.875,706,4.13,707,1.779,735,2.681,785,2.793,851,2.113,868,2.547,882,3.626,912,4.319,965,3.127,978,3.01,994,2.43,996,2.719,998,2.773,1006,4.142,1007,4.44,1008,3.65,1009,3.65,1010,4.44,1011,3.65,1012,3.65,1013,4.786,1014,3.65,1015,3.65,1019,3.044,1022,3.044,1027,3.373,1028,2.692,1035,2.692,1036,3.946,1038,4.44,1039,3.415,1040,2.57,1042,3.294,1043,3.65,1044,3.65,1045,3.65,1047,4.44,1048,3.65,1051,3.65,1052,4.44,1053,3.65,1055,3.65,1056,4.44,1058,4.007,1059,3.661,1060,3.294,1061,2.773,1062,3.65,1064,3.65,1065,3.65,1067,3.294,1068,3.294,1069,3.65,1071,3.65,1077,2.692,1248,4.44,1249,3.65,1808,5.02,2121,4.127,2122,4.127,2123,3.578,2124,3.578,2125,3.578,2126,3.578,2127,3.578,2128,3.578,2129,3.578]],["title/classes/PresetView.html",[0,0.26,875,2.395]],["body/classes/PresetView.html",[0,0.305,2,0.42,3,0.279,4,0.247,5,0.184,9,0.361,16,0.184,17,0.641,24,1.422,33,0.591,42,1.186,45,2.683,47,0.7,49,1.115,50,0.383,51,0.024,52,0.653,53,0.254,54,0.348,57,0.693,58,0.691,61,2.46,79,2.17,80,1.215,101,1.388,103,0.449,110,1.912,117,1.087,144,1.801,152,0.404,153,0.525,162,0.496,186,0.017,187,0.017,224,4.067,229,3.052,293,1.421,301,4.238,439,3.783,778,3.112,863,3.311,866,4.135,875,3.626,876,3.112,1450,4.018,1479,3.313,1648,5.39,1662,3.518,1709,3.518,1710,5.03,2032,5.316,2130,5.237,2131,3.112,2132,5.339,2133,5.339,2134,4.018,2135,5.339,2136,6.624,2137,6.83,2138,6.83,2139,6.74,2140,6.74,2141,6.248,2142,5.636,2143,5.339,2144,6.248,2145,6.248,2146,4.136,2147,4.136,2148,4.136,2149,4.018,2150,4.136,2151,4.136,2152,4.136,2153,4.136,2154,3.518,2155,4.136,2156,4.136,2157,4.136,2158,4.136,2159,4.136,2160,4.136,2161,4.136,2162,4.136]],["title/classes/PrettySymbols.html",[0,0.26,773,2.016]],["body/classes/PrettySymbols.html",[0,0.319,2,0.439,3,0.292,4,0.258,5,0.193,9,0.408,16,0.193,17,0.66,18,2.492,22,4.545,24,1.185,33,0.608,47,0.613,49,0.904,50,0.631,51,0.024,52,0.509,53,0.253,54,0.462,57,0.561,58,0.479,69,1.964,80,1.188,103,0.508,152,0.327,153,0.551,162,0.725,186,0.018,187,0.018,213,0.769,233,2.276,261,1.549,267,2.292,270,0.851,280,2.134,376,3.681,545,3.142,599,2.473,645,3.832,707,1.085,710,2.742,712,3.142,719,3.142,773,3.142,775,4.552,779,3.732,823,3.681,841,2.532,843,3.681,888,2.684,898,3.41,904,3.41,916,3.732,1462,3.732,1463,3.41,1725,4.315,1937,4.782,2069,5.58,2070,5.406,2163,5.406,2164,3.681,2165,7.153,2166,5.496,2167,5.496,2168,5.406,2169,5.496,2170,6.354,2171,6.354,2172,4.326,2173,5.496,2174,4.326,2175,6.893,2176,5.496,2177,5.496,2178,4.326,2179,6.81,2180,6.04,2181,4.326,2182,4.326,2183,4.326,2184,4.326,2185,4.326,2186,6.04,2187,3.681,2188,5.496,2189,4.326,2190,4.326,2191,4.326,2192,5.496,2193,4.326,2194,4.326,2195,4.326,2196,4.326,2197,4.326,2198,3.681,2199,4.326,2200,6.354,2201,4.326,2202,4.326,2203,4.326,2204,5.496,2205,4.326,2206,4.326,2207,4.326,2208,4.326,2209,4.326,2210,4.326]],["title/classes/RKHelper.html",[0,0.26,1991,2.189]],["body/classes/RKHelper.html",[0,0.318,2,0.437,3,0.291,4,0.257,5,0.192,9,0.429,16,0.192,18,2.49,24,1.183,33,0.702,47,0.612,50,0.559,51,0.024,52,0.559,53,0.244,54,0.507,56,1.41,57,0.824,58,0.477,59,1.369,79,2.016,88,1.459,94,1.369,103,0.589,107,1.706,110,1.964,112,0.648,135,0.667,136,0.743,152,0.326,153,0.533,162,0.786,186,0.018,187,0.018,227,2.905,230,0.767,233,1.964,241,2.712,254,3.627,261,1.964,267,3.362,270,0.902,335,2.622,339,3.937,341,2.705,364,2.778,404,3.667,522,2.705,599,2.464,817,2.927,819,3.667,820,4.126,885,2.464,887,3.244,888,3.741,889,3.244,898,2.674,904,3.402,944,3.244,1366,3.402,1455,2.927,1456,2.927,1457,3.605,1467,2.927,1544,4.309,1545,3.723,1546,3.402,1547,4.065,1991,3.402,2001,3.667,2002,3.667,2003,3.667,2026,5.399,2034,4.126,2198,4.665,2211,5.399,2212,6.029,2213,4.665,2214,5.483,2215,4.31,2216,4.31,2217,5.483,2218,5.483,2219,6.552,2220,5.483,2221,4.31,2222,5.483,2223,5.483,2224,5.483,2225,5.483,2226,5.483,2227,4.31,2228,6.029,2229,4.31,2230,4.31,2231,4.31,2232,5.483,2233,4.31,2234,4.31,2235,4.31,2236,4.31,2237,4.31,2238,4.31,2239,4.31,2240,4.31,2241,4.31,2242,4.31,2243,4.31,2244,4.31,2245,4.31,2246,4.31,2247,4.31,2248,4.31,2249,4.31]],["title/classes/RendererManager.html",[0,0.26,250,2.395]],["body/classes/RendererManager.html",[0,0.198,2,0.273,3,0.182,4,0.161,5,0.12,6,2.829,8,0.855,9,0.447,11,1.453,12,1.509,16,0.21,17,0.476,20,1.717,24,1.375,29,3.607,33,0.439,42,1.046,44,1.954,45,2.464,47,0.707,49,0.828,50,0.607,51,0.024,52,0.607,53,0.252,54,0.55,55,2.202,56,1.455,57,0.674,58,0.706,59,1.085,63,2.984,64,4.347,69,1.12,71,0.994,80,0.999,90,2.39,99,4.504,101,1.455,103,0.587,107,1.18,110,1.861,112,0.984,117,0.404,121,1.024,135,0.298,136,0.683,152,0.204,153,0.565,162,0.719,167,2.025,186,0.013,187,0.013,213,0.555,223,1.828,230,0.86,250,2.693,253,1.42,260,2.46,261,1.686,270,0.828,293,1.253,318,2.101,341,2.563,439,3.258,465,3.815,468,1.711,471,3.374,546,2.242,707,0.994,714,1.956,732,4.532,853,2.075,857,3.528,866,2.267,868,2.242,869,3.528,870,2.97,975,1.538,1040,2.101,1061,2.267,1078,1.956,1085,3.595,1086,2.29,1154,2.692,1263,4.175,1273,4.105,1274,4.175,1275,4.627,1276,2.46,1278,2.025,1282,2.984,1284,2.984,1298,2.29,1322,2.29,1367,4.711,1378,3.909,1607,2.29,1610,2.025,1613,2.29,2059,3.374,2250,5.943,2251,4.709,2252,5.195,2253,5.539,2254,7.006,2255,3.965,2256,3.965,2257,5.195,2258,5.195,2259,5.195,2260,5.195,2261,2.984,2262,3.965,2263,5.195,2264,3.965,2265,3.965,2266,3.965,2267,3.965,2268,3.965,2269,3.965,2270,3.965,2271,3.965,2272,4.803,2273,2.691,2274,2.691,2275,3.965,2276,3.965,2277,3.965,2278,2.691,2279,3.965,2280,2.29,2281,3.965,2282,3.965,2283,2.691,2284,2.691,2285,2.29,2286,2.691,2287,5.195,2288,3.965,2289,2.29,2290,3.965,2291,2.691,2292,3.965,2293,2.29,2294,3.965,2295,3.965,2296,3.965,2297,2.691,2298,3.965,2299,2.691,2300,3.965,2301,3.374,2302,4.006,2303,4.006,2304,3.965,2305,3.965,2306,2.691,2307,3.965,2308,5.794,2309,2.691,2310,3.965,2311,5.195,2312,5.195,2313,5.195,2314,3.965,2315,2.691,2316,2.691,2317,2.025,2318,2.691,2319,2.691,2320,2.025,2321,2.691,2322,2.691,2323,2.691,2324,2.691,2325,2.691,2326,3.965,2327,4.709,2328,2.691,2329,2.691,2330,4.709,2331,2.691,2332,3.965,2333,2.691,2334,4.709,2335,3.965,2336,2.691,2337,3.965,2338,2.691,2339,2.691,2340,2.691,2341,2.691,2342,2.691,2343,3.965,2344,2.691,2345,3.965,2346,5.195,2347,2.691,2348,2.691,2349,2.691,2350,2.691,2351,3.965,2352,2.691,2353,2.691,2354,2.691,2355,3.965]],["title/classes/RungeKutta.html",[0,0.26,1457,1.869]],["body/classes/RungeKutta.html",[0,0.402,2,0.357,3,0.237,4,0.21,5,0.156,9,0.368,13,2.068,16,0.156,17,0.575,18,2.265,33,0.53,47,0.486,50,0.444,51,0.024,52,0.444,53,0.203,54,0.403,56,0.781,57,0.456,58,0.389,59,1.223,71,1.201,79,2.148,88,1.275,94,1.139,103,0.562,107,1.367,112,0.528,117,1.073,121,1.337,135,0.389,136,0.605,144,1.975,149,1.733,152,0.266,153,0.554,162,0.575,186,0.015,187,0.015,198,2.18,213,0.491,233,1.258,238,2.538,241,2.899,254,2.739,267,3.103,269,2.973,270,0.885,280,2.689,281,3.634,304,3.392,318,1.861,352,3.634,364,2.512,450,3.253,475,3.247,522,2.363,712,3.117,719,3.348,739,2.363,762,2.699,818,3.253,841,2.915,995,2.973,1312,3.634,1417,2.386,1448,3.702,1449,2.386,1454,4.407,1455,4.752,1456,4.752,1457,2.538,1458,2.784,1459,3.605,1460,3.605,1461,3.605,1462,4.295,1463,3.924,1464,2.643,1465,2.643,1466,2.643,1467,4.162,1468,2.643,1469,2.643,1470,2.643,1471,2.643,1472,4.407,1473,4.103,1474,3.605,1475,3.605,1476,4.871,1477,4.958,1478,4.407,1479,3.634,1480,2.643,1481,2.643,1482,2.643,1483,5.028,1484,2.643,1485,2.18,1486,4.958,1487,2.643,1488,2.643,1489,4.612,1490,5.085,1491,2.643,1492,4.871,1493,2.643,1494,2.643,1495,2.643,1496,3.605,1497,2.643,1498,3.605,1499,4.103,1500,2.643,1501,2.643,1502,2.643,1503,2.643,1504,2.643,1505,2.643,1506,2.643,1507,2.643,1508,2.643,1509,2.643,1510,2.643,1511,2.643,1512,2.643,1513,2.643,1514,2.643,1515,2.643,1516,2.008,1517,2.643,1518,4.103,1519,3.605,1520,2.643,1521,4.103,1522,2.386,1523,4.103,1524,3.605,1525,2.643,1526,2.643,1527,2.643,1528,2.643,1529,2.643,1530,2.643,1531,2.643,1532,2.643,1533,2.643,1534,2.643,1535,2.643,1536,4.612,1537,4.612,1538,4.407,1539,4.612,1540,3.634,1541,4.612,1542,4.407,1543,2.973,1544,3.977,1545,3.253,1546,2.973,1547,3.383,1548,2.973,1549,2.643,1550,2.643,1551,2.643,1552,2.643,1553,2.643,1554,2.643,1555,2.643,2356,3.513,2357,3.513,2358,3.513]],["title/classes/ScriptLoader.html",[0,0.26,2359,2.654]],["body/classes/ScriptLoader.html",[0,0.341,2,0.47,3,0.313,4,0.276,5,0.206,9,0.388,11,1.161,16,0.206,18,2.231,24,0.908,33,0.634,47,0.47,50,0.429,51,0.024,52,0.429,53,0.172,54,0.524,57,0.601,58,0.512,59,1.198,80,1.175,103,0.482,126,1.762,135,0.512,152,0.35,153,0.524,162,0.556,186,0.018,187,0.018,213,0.802,230,0.802,258,1.537,270,0.808,293,1.232,345,2.647,707,1.161,863,3.45,864,2.547,870,3.278,872,3.038,874,3.561,969,3.558,1160,3.484,1162,2.284,1331,3.484,1398,3.722,1580,3.865,1650,4.879,2359,4.315,2360,4.879,2361,5.44,2362,6.511,2363,5.734,2364,4.879,2365,6.23,2366,4.63,2367,7.041,2368,6.511,2369,6.23,2370,4.63,2371,6.23,2372,6.23,2373,6.692,2374,5.734,2375,5.734,2376,5.734,2377,4.899,2378,3.939,2379,4.63,2380,4.63,2381,5.734,2382,4.63,2383,4.63,2384,4.63,2385,4.63,2386,4.63,2387,4.63,2388,4.63,2389,4.63,2390,4.63,2391,5.734,2392,4.63,2393,6.511,2394,6.511,2395,4.63,2396,4.63,2397,4.63,2398,4.63,2399,4.63,2400,4.63]],["title/classes/SelectionManager.html",[0,0.26,2401,2.654]],["body/classes/SelectionManager.html",[0,0.191,2,0.263,3,0.175,4,0.155,5,0.115,6,2.817,8,0.824,9,0.4,11,1.609,12,1.468,16,0.115,17,0.612,20,1.816,24,1.311,33,0.427,42,1.212,44,2.217,45,2.578,47,0.703,48,1.951,50,0.53,51,0.024,52,0.563,53,0.252,54,0.458,55,1.827,56,1.315,57,0.662,58,0.632,59,1.194,62,3.384,69,2.013,71,0.967,80,1.071,85,1.665,88,1.358,92,2.915,94,1.194,97,2.82,101,1.27,103,0.532,107,0.65,110,2.047,112,0.859,117,0.39,128,2.205,135,0.632,136,0.447,144,1.839,152,0.196,153,0.532,162,0.612,186,0.012,187,0.012,188,3.118,191,1.374,202,2.903,213,0.828,230,0.981,233,1.65,246,2.82,253,2.047,257,2.513,258,1.436,260,2.393,261,1.381,270,0.833,286,3.616,293,1.226,302,1.482,331,4.301,341,1.903,468,1.665,553,1.482,625,1.951,626,2.619,627,2.517,636,4.34,707,0.65,710,1.988,714,1.903,744,4.461,762,1.777,773,1.482,774,1.951,775,1.761,841,1.777,853,2.41,873,1.761,1085,3.547,1162,1.279,1253,4.502,1255,4.104,1256,4.677,1257,5.037,1258,4.64,1259,4.64,1274,4.296,1275,3.839,1287,3.282,1288,4.34,1289,4.301,1290,4.863,1300,2.619,1307,3.282,1308,2.206,1347,3.79,1359,2.619,1360,3.839,1376,3.165,1381,1.951,1566,4.301,1567,4.34,1571,3.466,1574,3.839,1631,2.206,1762,1.761,1961,1.761,2039,2.393,2060,4.988,2061,4.502,2112,2.206,2261,3.466,2317,2.903,2401,2.903,2402,5.917,2403,4.606,2404,4.606,2405,4.606,2406,4.606,2407,4.606,2408,4.606,2409,4.606,2410,4.863,2411,5.102,2412,5.102,2413,4.34,2414,3.857,2415,3.857,2416,3.857,2417,3.857,2418,3.857,2419,2.206,2420,2.206,2421,2.206,2422,3.857,2423,3.857,2424,2.593,2425,3.857,2426,2.593,2427,6.569,2428,5.716,2429,2.593,2430,5.102,2431,2.593,2432,2.206,2433,3.857,2434,3.857,2435,1.761,2436,1.951,2437,2.593,2438,2.903,2439,5.175,2440,2.593,2441,2.593,2442,3.282,2443,2.593,2444,3.282,2445,3.282,2446,3.857,2447,3.857,2448,2.593,2449,2.593,2450,3.857,2451,2.593,2452,4.606,2453,3.857,2454,3.857,2455,2.593,2456,3.857,2457,2.593,2458,4.606,2459,2.593,2460,2.593,2461,2.593,2462,2.593,2463,1.951,2464,2.593,2465,4.606,2466,2.593,2467,2.593,2468,2.593,2469,2.593,2470,2.206,2471,2.593,2472,2.593,2473,2.593,2474,2.593,2475,2.593,2476,2.593,2477,2.593,2478,4.863,2479,5.716,2480,2.593,2481,3.857,2482,2.593,2483,4.606,2484,2.593,2485,3.857,2486,2.593,2487,2.593,2488,2.593,2489,2.593,2490,2.593,2491,2.593,2492,4.606,2493,2.593,2494,5.454,2495,2.593,2496,2.593,2497,2.593,2498,2.593,2499,3.857,2500,2.593,2501,2.593,2502,2.593,2503,2.593,2504,2.593,2505,2.593,2506,2.593,2507,2.593,2508,2.593,2509,2.593,2510,2.593,2511,2.593,2512,2.593,2513,2.593,2514,2.593,2515,2.593,2516,3.857,2517,2.593,2518,2.206,2519,2.593,2520,2.593,2521,2.593,2522,2.593,2523,2.593,2524,3.857,2525,2.593,2526,2.593,2527,2.593,2528,2.593,2529,2.593,2530,2.593,2531,2.593,2532,2.593,2533,2.593,2534,2.593,2535,2.593,2536,2.593,2537,2.593,2538,2.593,2539,2.593,2540,2.593,2541,2.593]],["title/classes/State.html",[0,0.26,1458,1.428]],["body/classes/State.html",[0,0.357,2,0.362,3,0.241,4,0.213,5,0.159,9,0.241,13,1.541,16,0.159,17,0.66,18,1.735,47,0.671,51,0.024,53,0.246,56,0.793,57,0.858,58,0.732,59,1.012,71,1.215,73,1.646,79,2.066,88,0.95,94,0.746,103,0.496,107,0.895,117,1.066,121,1.359,135,0.395,136,0.615,144,1.634,149,1.762,152,0.27,153,0.556,162,0.582,186,0.015,187,0.015,198,2.216,213,0.769,238,2.567,241,2.882,254,2.041,267,3.266,269,3.006,270,0.888,280,1.762,281,3.412,293,1.691,304,3.263,318,1.892,352,3.658,364,1.646,385,2.77,450,3.29,473,2.687,475,3.266,522,1.762,712,3.143,719,3.371,739,2.39,762,2.232,818,2.425,841,2.929,995,2.216,1312,3.006,1417,2.425,1448,4.553,1449,2.425,1454,3.646,1455,4.604,1456,4.604,1457,1.892,1458,2.715,1459,2.687,1460,2.687,1461,2.687,1462,4.316,1463,3.944,1464,2.687,1465,2.687,1466,2.687,1467,4.186,1468,2.687,1469,2.687,1470,2.687,1471,2.687,1472,4.437,1473,4.138,1474,3.646,1475,3.646,1476,4.892,1477,4.977,1478,4.437,1479,3.658,1480,2.687,1481,2.687,1482,2.687,1483,5.045,1484,2.687,1485,2.216,1486,4.977,1487,2.687,1488,2.687,1489,4.638,1490,5.101,1491,2.687,1492,4.892,1493,2.687,1494,2.687,1495,2.687,1496,3.646,1497,2.687,1498,3.646,1499,4.138,1500,2.687,1501,2.687,1502,2.687,1503,2.687,1504,2.687,1505,2.687,1506,2.687,1507,2.687,1508,2.687,1509,2.687,1510,2.687,1511,2.687,1512,2.687,1513,2.687,1514,2.687,1515,2.687,1516,2.041,1517,2.687,1518,4.138,1519,3.646,1520,2.687,1521,4.138,1522,2.425,1523,4.138,1524,3.646,1525,2.687,1526,2.687,1527,2.687,1528,2.687,1529,2.687,1530,2.687,1531,2.687,1532,2.687,1533,2.687,1534,2.687,1535,2.687,1536,3.646,1537,3.646,1538,3.646,1539,4.138,1540,3.412,1541,4.138,1542,3.646,1543,3.006,1544,3.29,1545,2.425,1546,2.216,1547,2.216,1548,3.658,1549,2.687,1550,2.687,1551,2.687,1552,2.687,1553,2.687,1554,2.687,1555,2.687,2542,4.845,2543,4.845,2544,4.845,2545,4.845,2546,3.571,2547,3.571,2548,3.571,2549,3.571,2550,3.571,2551,3.571,2552,3.571,2553,3.571,2554,3.571,2555,3.038]],["title/classes/StateManager.html",[0,0.26,2556,2.189]],["body/classes/StateManager.html",[0,0.231,2,0.319,3,0.212,4,0.187,5,0.14,8,0.998,9,0.433,11,1.675,16,0.14,17,0.532,18,2.187,20,1.288,33,0.49,42,1.141,44,1.408,45,2.622,47,0.714,48,2.362,49,0.926,50,0.581,51,0.024,52,0.581,53,0.256,54,0.527,56,1.141,57,0.724,58,0.617,61,2.571,66,1.625,80,1.123,90,1.912,93,2.186,101,1.499,103,0.579,107,0.787,112,0.963,117,0.993,121,1.687,135,0.651,136,0.541,152,0.238,153,0.527,162,0.67,166,3.326,186,0.014,187,0.014,188,1.794,191,1.663,213,0.854,229,3.189,230,0.912,233,1.839,253,1.587,259,4.369,270,0.724,301,4.415,439,3.823,639,2.362,702,3.236,707,0.787,710,2.216,733,4.486,735,2.389,736,3.162,776,1.794,785,1.794,787,1.446,791,3.334,853,2.334,860,4.595,864,2.124,882,1.663,996,1.446,1078,3.354,1274,3.789,1276,1.948,1278,2.362,1281,2.671,1285,2.362,1312,3.462,1371,3.334,1398,2.533,1402,3.189,1413,3.009,1414,2.671,1458,2.882,1593,3.77,1610,2.362,1658,3.77,1683,1.663,1695,3.77,1697,4.099,1762,2.132,1763,2.671,1815,4.747,1841,3.77,2149,4.823,2280,2.671,2293,2.671,2420,2.671,2435,2.132,2463,2.362,2556,3.789,2557,6.007,2558,4.431,2559,5.136,2560,5.136,2561,5.579,2562,5.579,2563,5.579,2564,5.579,2565,5.579,2566,5.579,2567,4.431,2568,4.431,2569,4.431,2570,4.431,2571,4.431,2572,4.431,2573,3.139,2574,4.431,2575,5.136,2576,5.579,2577,5.136,2578,4.431,2579,5.579,2580,3.139,2581,3.139,2582,3.139,2583,4.431,2584,4.431,2585,2.671,2586,4.431,2587,3.139,2588,4.431,2589,3.139,2590,4.431,2591,3.139,2592,4.431,2593,3.139,2594,2.362,2595,5.579,2596,3.139,2597,3.139,2598,3.139,2599,3.139,2600,2.671,2601,3.139,2602,2.671,2603,3.139,2604,4.431,2605,4.431,2606,4.431,2607,3.139,2608,3.139,2609,3.139,2610,3.139,2611,3.139,2612,3.139,2613,3.139,2614,3.139,2615,3.139,2616,5.136,2617,3.139,2618,5.136,2619,3.139,2620,3.139,2621,3.139,2622,4.369,2623,3.77,2624,3.139,2625,3.139,2626,3.139,2627,3.139,2628,3.139,2629,3.139,2630,3.139,2631,3.139]],["title/classes/TracksMaterial.html",[0,0.26,1996,2.189]],["body/classes/TracksMaterial.html",[0,0.342,2,0.34,3,0.227,4,0.2,5,0.149,9,0.314,14,3.614,16,0.207,17,0.557,42,1.031,47,0.471,49,1.112,50,0.311,51,0.024,52,0.311,53,0.125,54,0.282,56,1.031,58,0.721,59,1.425,71,1.634,75,3.564,79,1.066,94,1.303,101,1.183,103,0.282,112,0.698,117,0.937,135,0.371,136,0.578,148,2.833,152,0.351,153,0.447,162,0.689,169,1.915,186,0.015,187,0.015,213,0.985,227,2.459,240,2.139,241,1.88,243,3.043,247,2.88,251,2.653,270,0.691,293,1.416,302,3.283,335,2.549,339,3.828,454,1.655,553,2.653,597,4.537,599,1.918,643,4.537,645,3.283,707,0.841,729,2.88,868,2.602,969,3.87,1112,3.725,1117,4.537,1273,2.88,1283,2.524,1300,2.278,1548,3.564,1984,3.493,1996,3.302,1999,4.322,2039,2.081,2044,3.152,2632,2.524,2633,4.528,2634,4.528,2635,3.949,2636,4.642,2637,2.854,2638,3.949,2639,5.13,2640,2.854,2641,5.13,2642,4.886,2643,2.854,2644,2.854,2645,2.854,2646,3.949,2647,3.949,2648,2.854,2649,2.854,2650,2.854,2651,2.854,2652,2.854,2653,2.854,2654,2.854,2655,2.854,2656,3.949,2657,2.854,2658,2.854,2659,2.854,2660,2.854,2661,3.949,2662,3.949,2663,3.949,2664,3.949,2665,3.949,2666,3.949,2667,2.854,2668,3.949,2669,3.949,2670,3.949,2671,2.854,2672,3.949,2673,2.854,2674,2.854,2675,5.544,2676,3.949,2677,3.949,2678,3.949,2679,3.949,2680,3.949,2681,3.949,2682,3.949,2683,3.949,2684,3.949,2685,5.544,2686,2.854,2687,3.949,2688,2.854,2689,3.949,2690,2.854,2691,3.949,2692,2.854,2693,3.949,2694,2.854,2695,3.949,2696,2.854,2697,3.949,2698,2.854,2699,2.854,2700,2.854,2701,2.854,2702,2.854,2703,2.854,2704,2.854,2705,2.854,2706,2.854,2707,2.854,2708,2.854,2709,2.854,2710,2.854,2711,2.854,2712,2.854,2713,5.13,2714,4.528,2715,5.306,2716,5.306,2717,4.528,2718,4.886,2719,3.152,2720,4.528,2721,4.528,2722,5.544,2723,4.528,2724,4.886,2725,2.854,2726,2.854,2727,2.854,2728,4.886,2729,2.854,2730,2.854,2731,4.528,2732,3.949,2733,2.854,2734,2.854,2735,2.854,2736,2.854,2737,2.854,2738,4.886,2739,3.949,2740,3.949,2741,4.886,2742,2.854,2743,2.854,2744,3.949,2745,2.854,2746,2.854,2747,2.854,2748,3.949,2749,2.854,2750,2.854,2751,4.528,2752,2.524,2753,2.854,2754,2.854,2755,2.854,2756,2.854,2757,3.949,2758,2.854,2759,2.854,2760,2.854,2761,2.854,2762,2.854,2763,2.854,2764,2.854,2765,2.854,2766,2.854,2767,2.854,2768,2.854,2769,2.854,2770,2.854,2771,2.854,2772,4.528,2773,3.949,2774,2.854,2775,2.854,2776,3.949,2777,2.854]],["title/classes/TracksMesh.html",[0,0.26,251,2.016]],["body/classes/TracksMesh.html",[0,0.328,2,0.321,3,0.214,4,0.189,5,0.141,9,0.301,14,3.502,16,0.198,17,0.535,33,0.493,42,1.146,47,0.691,49,1.077,50,0.293,51,0.024,52,0.293,53,0.249,54,0.266,56,0.703,58,0.71,59,1.411,71,1.61,75,3.903,79,1.005,94,1.279,101,1.146,103,0.433,112,0.775,117,1.023,135,0.35,136,0.545,148,2.761,152,0.337,153,0.433,162,0.672,169,1.982,186,0.014,187,0.014,213,0.978,227,3.127,240,2.376,241,2.267,243,3.403,247,2.764,251,2.948,270,0.669,293,1.372,302,3.2,335,2.519,339,3.963,454,1.56,553,3.5,597,4.833,599,1.808,643,4.44,645,2.547,707,1.117,729,3.661,868,2.772,969,3.798,1112,3.2,1117,4.44,1273,2.764,1283,2.38,1300,2.148,1548,3.473,1984,4.213,1996,2.764,1999,4.213,2039,2.764,2044,2.148,2632,2.38,2633,3.79,2634,2.691,2635,2.691,2637,2.691,2638,4.763,2639,5.555,2640,4.388,2641,5.464,2642,5.208,2643,3.79,2644,4.388,2645,4.388,2646,3.79,2647,3.79,2648,2.691,2649,2.691,2650,2.691,2651,2.691,2652,2.691,2653,2.691,2654,2.691,2655,2.691,2656,3.79,2657,3.79,2658,3.79,2659,2.691,2660,2.691,2661,3.79,2662,3.79,2663,3.79,2664,3.79,2665,3.79,2666,3.79,2667,2.691,2668,3.79,2669,3.79,2670,3.79,2671,2.691,2672,3.79,2673,2.691,2674,2.691,2675,5.464,2676,3.79,2677,3.79,2678,3.79,2679,3.79,2680,3.79,2681,3.79,2682,3.79,2683,3.79,2684,3.79,2685,5.464,2686,2.691,2687,3.79,2688,2.691,2689,3.79,2690,2.691,2691,3.79,2692,2.691,2693,3.79,2694,2.691,2695,3.79,2696,2.691,2697,3.79,2698,2.691,2699,2.691,2700,2.691,2701,2.691,2702,2.691,2703,2.691,2704,2.691,2705,2.691,2706,2.691,2707,2.691,2708,2.691,2709,2.691,2710,2.691,2711,2.691,2712,2.691,2713,5.021,2714,4.388,2715,5.208,2716,5.208,2717,4.388,2718,4.763,2719,3.025,2720,4.388,2721,4.388,2722,5.464,2723,4.388,2724,4.763,2725,2.691,2726,2.691,2727,2.691,2728,4.763,2729,2.691,2730,2.691,2731,4.388,2732,3.79,2733,2.691,2734,2.691,2735,2.691,2736,2.691,2737,2.691,2738,4.763,2739,3.79,2740,3.79,2741,4.763,2742,2.691,2743,2.691,2744,3.79,2745,2.691,2746,2.691,2747,2.691,2748,3.79,2749,2.691,2750,2.691,2751,4.388,2752,2.38,2753,2.691,2754,2.691,2755,2.691,2756,2.691,2757,3.79,2758,2.691,2759,2.691,2760,2.691,2761,2.691,2762,2.691,2763,2.691,2764,2.691,2765,2.691,2766,2.691,2767,2.691,2768,2.691,2769,2.691,2770,2.691,2771,2.691,2772,4.388,2773,3.79,2774,2.691,2775,2.691,2776,3.79,2777,2.691,2778,4.455,2779,4.455,2780,3.163,2781,3.163,2782,3.163,2783,3.163,2784,3.163,2785,3.163,2786,3.163,2787,3.163,2788,3.163,2789,3.163,2790,3.163]],["title/classes/URLOptionsManager.html",[0,0.26,2791,2.395]],["body/classes/URLOptionsManager.html",[0,0.245,2,0.338,3,0.358,4,0.199,5,0.294,8,1.058,9,0.387,11,1.508,16,0.148,17,0.554,20,1.631,24,1.363,33,0.511,42,1.272,47,0.66,50,0.591,51,0.024,52,0.491,53,0.258,54,0.446,57,0.743,58,0.511,59,1.3,62,2.865,64,3.552,66,1.6,80,1.174,88,1.229,101,1.026,103,0.536,107,1.158,112,0.904,126,1.758,135,0.665,144,1.557,152,0.35,153,0.505,162,0.554,186,0.015,187,0.015,191,2.447,213,0.801,230,0.976,233,1.654,238,2.447,253,1.654,258,1.352,270,0.828,280,2.824,323,1.903,511,4.895,522,2.278,585,3.929,587,3.929,683,2.251,710,1.993,714,2.966,716,2.865,735,2.476,745,4.417,751,3.136,777,2.865,851,2.44,853,2.285,863,3.843,864,2.289,865,4.525,870,2.64,871,2.64,872,3.033,874,1.903,914,2.64,993,3.475,996,2.128,1078,3.148,1270,3.475,1273,2.865,1376,2.066,1424,2.261,1458,1.348,1516,2.64,1683,2.809,1689,3.475,1697,3.289,2134,3.475,2478,3.929,2556,3.289,2585,2.833,2600,3.929,2622,2.833,2791,3.136,2792,4.97,2793,5.301,2794,5.725,2795,5.301,2796,5.725,2797,5.725,2798,5.725,2799,4.618,2800,3.33,2801,5.725,2802,4.618,2803,4.871,2804,4.308,2805,5.294,2806,3.33,2807,6.014,2808,3.33,2809,4.871,2810,5.725,2811,5.725,2812,3.33,2813,3.33,2814,4.618,2815,3.33,2816,4.618,2817,4.618,2818,3.33,2819,6.222,2820,4.618,2821,3.929,2822,3.33,2823,3.475,2824,3.33,2825,2.833,2826,2.833,2827,2.506,2828,4.618,2829,3.33,2830,3.33,2831,3.33,2832,3.33,2833,3.33,2834,3.33,2835,3.33,2836,2.066,2837,4.618,2838,3.33,2839,3.33,2840,5.301,2841,3.33,2842,3.33,2843,3.33,2844,4.51,2845,3.929,2846,3.33,2847,3.33,2848,3.929,2849,3.33,2850,3.33,2851,3.33,2852,3.33,2853,4.618,2854,3.33,2855,3.33,2856,3.33,2857,3.33,2858,3.33,2859,2.833,2860,2.833,2861,3.33,2862,3.33,2863,3.33,2864,4.618,2865,4.618,2866,4.618,2867,4.618,2868,4.618,2869,4.618,2870,3.929,2871,4.618,2872,3.33,2873,3.33,2874,4.618,2875,3.33,2876,3.33,2877,3.33,2878,3.33,2879,3.33,2880,3.33]],["title/classes/VRManager.html",[0,0.26,2881,2.395]],["body/classes/VRManager.html",[0,0.226,2,0.311,3,0.207,4,0.183,5,0.136,6,2.692,8,0.973,9,0.394,11,1.461,12,1.657,13,1.879,14,2.956,15,3.945,16,0.136,17,0.523,18,1.814,20,1.78,22,3.812,23,4.31,24,1.328,25,3.276,26,5.164,27,3.276,28,4.231,29,3.142,30,3.276,31,3.276,32,3.276,33,0.482,34,4.152,35,2.701,36,3.276,38,3.812,39,3.276,40,3.812,41,3.812,42,1.126,44,0.973,45,2.671,47,0.719,49,0.909,50,0.511,51,0.024,52,0.511,53,0.261,54,0.49,56,0.68,57,0.657,58,0.56,60,2.605,61,1.411,71,0.768,74,2.304,79,1.383,80,0.75,81,3.704,82,2.605,83,4.012,84,2.334,85,2.614,86,5.76,87,2.605,88,1.158,89,3.965,90,1.321,91,2.605,92,2.006,93,2.147,94,1.265,95,2.605,96,3.142,97,2.875,98,3.617,99,3.617,100,2.605,101,1.415,102,2.605,103,0.545,104,2.079,105,2.079,106,2.304,107,0.768,108,2.605,109,2.605,110,1.976,112,0.999,113,2.304,115,1.899,117,0.761,119,2.605,120,1.899,121,1.165,122,2.304,123,2.605,124,2.304,125,1.622,126,1.928,127,2.304,128,1.75,129,2.605,130,2.304,131,4.386,133,3.276,134,2.701,135,0.56,136,0.528,138,1.899,139,2.079,140,2.079,142,2.304,143,2.304,144,1.861,145,2.304,146,2.304,147,2.304,148,1.51,149,1.51,150,2.079,152,0.232,153,0.49,154,4.31,161,2.304,164,2.605,180,2.605,186,0.014,187,0.014,213,0.847,229,3.332,230,0.609,240,1.411,241,2.361,270,0.756,286,3.562,293,1.348,304,1.51,342,1.24,377,3.704,385,2.488,443,4.31,465,1.899,515,2.304,523,1.899,546,2.186,853,1.559,868,1.321,946,2.605,1021,2.488,1270,2.304,1540,4.166,1603,4.694,1824,2.304,1945,3.812,2036,3.704,2086,2.605,2435,2.079,2436,3.276,2555,2.605,2881,2.956,2882,5.656,2883,4.456,2884,5.066,2885,5.066,2886,5.066,2887,5.066,2888,5.066,2889,5.066,2890,4.353,2891,5.517,2892,5.513,2893,6.369,2894,3.061,2895,5.517,2896,5.153,2897,4.694,2898,4.353,2899,4.353,2900,4.353,2901,6.369,2902,3.061,2903,4.353,2904,3.061,2905,3.061,2906,4.353,2907,3.061,2908,3.061,2909,4.353,2910,3.061,2911,3.061,2912,3.061,2913,3.061,2914,4.353,2915,3.061,2916,3.061,2917,3.061,2918,3.061,2919,3.061,2920,4.353,2921,4.353,2922,5.066,2923,3.061,2924,5.066,2925,3.061,2926,3.061,2927,3.061,2928,3.061,2929,3.061,2930,3.061,2931,3.061,2932,3.061,2933,3.061,2934,3.061,2935,3.061,2936,3.061,2937,3.061,2938,3.061,2939,3.061,2940,3.061,2941,3.061,2942,3.061,2943,3.061,2944,3.061,2945,3.061,2946,3.061,2947,3.061,2948,3.061,2949,4.353,2950,4.353,2951,3.061,2952,3.061,2953,3.061,2954,3.061,2955,3.061,2956,3.061,2957,3.061,2958,2.605,2959,3.061,2960,3.061,2961,3.061,2962,4.353,2963,3.061,2964,3.061,2965,3.061,2966,3.061]],["title/interfaces/Window.html",[219,1.343,2836,2.189]],["body/interfaces/Window.html",[0,0.21,3,0.307,4,0.105,5,0.258,9,0.119,10,1.768,11,1.661,12,1.368,13,0.758,16,0.184,17,0.342,20,1.482,24,1.373,28,2.441,29,1.406,33,0.315,35,3.18,44,1.843,45,1.574,49,0.367,50,0.333,51,0.024,52,0.648,53,0.134,55,1.481,56,1.388,57,0.693,58,0.194,59,1.351,61,2.46,62,2.23,64,2.23,66,1.6,69,1.939,71,0.441,77,3.641,79,0.906,80,1.208,83,2.055,84,2.242,85,0.758,88,1.6,89,2.364,92,1.313,94,0.751,96,2.796,97,2.242,98,2.23,101,0.633,103,0.525,107,0.715,110,1.481,112,0.802,117,0.889,120,1.09,121,0.669,125,1.905,135,0.683,136,0.62,138,2.82,144,1.912,149,0.867,152,0.133,153,0.605,162,0.71,166,1.51,169,1.239,176,3.849,186,0.009,187,0.009,188,1.629,191,0.931,194,1.005,196,2.145,213,0.681,219,1.368,220,2.441,221,1.005,222,1.323,223,3.747,224,1.629,227,0.931,228,1.935,229,1.005,230,0.984,231,2.145,232,3.058,235,1.51,236,3.058,238,0.931,253,1.481,254,1.005,257,2.094,258,1.504,260,1.09,261,1.481,266,2.425,270,0.86,279,3.42,280,2.528,281,2.23,282,2.145,283,4.14,284,3.058,285,1.495,286,1.005,290,1.629,312,2.425,313,2.425,314,4.694,315,2.145,316,2.425,318,0.931,323,2.055,342,2.833,364,0.81,397,3.305,437,1.193,439,0.931,440,1.495,468,1.23,473,2.145,502,2.425,512,1.005,517,1.495,519,1.495,522,2.528,545,1.629,546,0.758,548,1.323,553,1.005,623,2.145,626,2.441,627,1.406,628,2.435,629,0.931,631,2.145,649,1.935,683,1.629,706,1.629,707,1.482,710,2.212,714,2.242,716,1.09,733,1.193,735,2.207,736,2.401,744,2.441,753,1.323,762,0.81,777,1.09,785,2.076,821,1.193,851,2.281,853,2.153,862,2.145,863,3.374,864,1.574,866,1.629,871,2.055,872,0.931,874,3.241,876,1.323,881,1.323,914,1.005,930,1.323,967,4.14,975,1.005,996,2.542,1018,1.768,1020,2.364,1021,1.629,1024,2.598,1027,1.629,1039,1.09,1040,1.51,1042,1.193,1058,2.441,1060,1.935,1068,3.305,1078,2.633,1085,1.768,1112,2.364,1154,3.052,1162,0.867,1256,1.323,1263,1.935,1271,2.425,1289,2.705,1337,1.495,1338,1.495,1342,3.058,1345,1.495,1346,2.145,1347,2.364,1349,1.495,1350,1.495,1354,1.323,1359,2.808,1361,1.495,1363,1.495,1364,1.495,1366,2.566,1367,1.193,1368,2.425,1369,3.867,1371,2.145,1372,1.323,1376,2.566,1377,3.867,1380,3.058,1381,1.323,1391,2.425,1392,3.086,1393,1.495,1394,1.495,1395,1.495,1396,1.495,1398,2.055,1407,1.323,1424,1.193,1425,2.441,1427,4.017,1431,1.495,1439,1.495,1458,2.076,1546,1.09,1562,2.425,1566,1.323,1573,1.323,1580,2.566,1582,2.425,1686,1.495,1697,3.598,1703,1.495,1725,1.193,1869,1.495,1961,2.441,2039,1.09,2044,1.935,2048,3.662,2055,3.518,2061,4.015,2134,1.323,2187,1.495,2272,2.145,2301,1.495,2302,1.495,2303,1.495,2320,1.323,2377,4.266,2378,1.495,2410,1.495,2413,1.495,2438,1.323,2439,1.495,2442,1.495,2444,2.425,2445,1.495,2463,1.323,2470,3.058,2556,2.566,2623,1.495,2719,1.193,2791,2.441,2825,1.495,2836,3.18,2860,1.495,2883,2.566,2967,1.495,2968,1.495,2969,1.758,2970,3.662,2971,2.425,2972,1.758,2973,1.758,2974,1.758,2975,1.758,2976,1.758,2977,1.758,2978,1.193,2979,1.323,2980,1.758,2981,1.758,2982,1.758,2983,3.595,2984,3.595,2985,1.758,2986,1.758,2987,1.758,2988,1.758,2989,2.85,2990,2.85,2991,1.758,2992,2.85,2993,3.595,2994,1.758,2995,3.595,2996,1.758,2997,1.758,2998,1.758,2999,1.758,3000,1.758,3001,1.758,3002,1.758,3003,1.758,3004,1.758,3005,1.758,3006,2.85,3007,1.758,3008,1.758,3009,1.758,3010,3.595,3011,1.758,3012,2.425,3013,1.758,3014,1.758,3015,1.758,3016,1.758,3017,1.758,3018,3.595,3019,3.595,3020,1.758,3021,5.126,3022,1.758,3023,1.758,3024,1.758,3025,1.758,3026,1.758,3027,1.758,3028,1.758,3029,1.758,3030,1.758,3031,2.85,3032,2.85,3033,2.85,3034,2.85,3035,2.85,3036,1.758,3037,1.758,3038,1.758,3039,1.758,3040,1.758,3041,1.758,3042,1.758,3043,1.758,3044,1.758,3045,1.758,3046,1.758,3047,1.758,3048,3.595,3049,1.758,3050,3.867,3051,3.595,3052,6.624,3053,4.867,3054,4.867,3055,4.867,3056,6.248,3057,4.135,3058,6.469,3059,4.867,3060,3.595,3061,1.758,3062,2.85,3063,1.758,3064,1.758,3065,4.545,3066,1.758,3067,2.85,3068,2.85,3069,4.867,3070,1.758,3071,1.758,3072,1.758,3073,1.758,3074,1.758,3075,1.758,3076,1.758,3077,2.85,3078,1.758,3079,1.758,3080,1.758,3081,1.758,3082,1.758,3083,1.758,3084,1.758,3085,1.758,3086,1.758,3087,1.758,3088,1.758,3089,2.425,3090,1.758,3091,1.758,3092,1.758,3093,1.758,3094,4.135,3095,1.758,3096,1.758,3097,2.85,3098,2.85,3099,1.758,3100,1.758,3101,1.758,3102,3.595,3103,2.85,3104,1.758,3105,1.758,3106,1.758,3107,1.758,3108,1.758,3109,1.758,3110,3.595,3111,1.758,3112,2.85,3113,2.85,3114,1.758,3115,2.85,3116,1.758,3117,1.758,3118,1.758,3119,1.758,3120,1.758,3121,1.758,3122,1.758,3123,1.758,3124,1.758,3125,1.758,3126,1.758,3127,1.758,3128,1.758,3129,3.595,3130,1.758,3131,1.758,3132,1.758,3133,3.595,3134,1.495,3135,1.758,3136,1.758,3137,1.758,3138,1.758,3139,1.758,3140,1.758,3141,1.758,3142,1.758,3143,1.758,3144,1.758,3145,1.758,3146,1.758,3147,1.758,3148,1.758,3149,1.758,3150,1.758,3151,1.758,3152,1.758,3153,1.758,3154,1.758,3155,1.758,3156,1.758,3157,1.758,3158,1.758,3159,1.758,3160,1.758,3161,1.758,3162,2.85,3163,1.758,3164,1.758,3165,1.758,3166,1.758,3167,1.758,3168,1.758,3169,1.495,3170,1.758,3171,1.758,3172,1.758,3173,1.758,3174,1.758,3175,1.495,3176,1.758,3177,1.758,3178,1.758,3179,1.758,3180,1.758,3181,1.495,3182,1.758,3183,1.758,3184,1.758,3185,1.495,3186,1.758,3187,1.758,3188,2.85,3189,1.758,3190,1.758,3191,1.758,3192,1.758,3193,1.758,3194,1.758,3195,1.758,3196,1.758,3197,1.758,3198,1.758,3199,2.85,3200,1.758,3201,1.758,3202,1.758,3203,1.758,3204,2.85,3205,2.85,3206,1.758,3207,1.758,3208,1.758,3209,1.758]],["title/classes/XRManager.html",[0,0.26,15,2.016]],["body/classes/XRManager.html",[0,0.247,2,0.34,3,0.226,4,0.2,5,0.149,6,2.815,8,1.064,9,0.407,10,3.738,11,1.439,12,1.764,13,2,15,2.649,16,0.149,17,0.556,24,1.382,25,4,26,5.349,27,4,28,4.423,29,3.336,30,4.318,31,4,32,4,33,0.513,34,4.318,35,3.298,36,3.487,38,4.318,39,3.487,40,4.318,41,4,42,0.744,44,1.473,45,2.752,46,3.943,47,0.702,49,0.968,50,0.532,51,0.024,52,0.532,53,0.257,54,0.537,56,1.03,57,0.601,58,0.513,59,0.699,61,2.135,79,1.064,80,0.577,83,4.138,84,2.135,85,3,88,1.527,89,4.2,90,2.294,92,2.644,93,2.83,94,1.199,96,3.302,97,3.074,98,3.867,99,3.867,101,1.42,103,0.563,104,3.147,105,3.61,106,3.487,107,1.333,110,2.333,112,0.979,113,3.487,115,2.875,120,2.875,121,1.764,122,3.487,124,3.487,125,2.817,126,2.023,127,3.487,128,2.649,130,2.519,131,4.534,133,3.487,134,2.875,135,0.37,136,0.577,138,3.56,139,2.273,140,2.273,141,2.848,142,2.519,143,2.519,144,1.129,145,4,146,2.519,147,2.519,148,1.651,149,1.651,150,2.273,152,0.351,153,0.537,155,2.519,161,2.519,162,0.556,176,2.273,186,0.015,187,0.015,213,0.648,241,1.355,270,0.69,293,0.891,385,1.913,546,1.444,596,2.273,625,3.487,683,1.064,710,1.444,778,2.519,787,1.542,1296,2.848,1516,2.649,2285,2.848,2289,2.848,2419,2.848,2421,2.848,2432,2.848,2435,2.273,2436,2.519,2602,2.848,2859,2.848,2883,3.738,2978,4.721,3210,3.347,3211,5.316,3212,3.347,3213,3.347,3214,3.347,3215,3.347,3216,3.347,3217,3.347,3218,3.347,3219,4.634,3220,3.347,3221,3.347,3222,4.634,3223,4.634,3224,4.634,3225,3.347,3226,3.347,3227,3.347,3228,3.347,3229,5.316,3230,3.347,3231,3.347,3232,3.347,3233,4.634,3234,3.347,3235,3.347,3236,5.738,3237,3.347,3238,4.634,3239,3.347,3240,3.347,3241,3.347,3242,3.347,3243,3.347,3244,3.347,3245,3.347,3246,3.347,3247,3.347]],["title/changelog.html",[115,1.831,3248,2.22,3249,2.95]],["body/changelog.html",[0,0.343,1,1.089,3,0.293,4,0.096,5,0.174,10,3.639,11,1.606,15,1.512,17,0.47,29,0.791,35,0.995,42,0.75,44,1.244,45,1.007,49,1.03,51,0.011,52,0.245,53,0.146,54,0.284,55,1.551,57,0.343,58,0.373,63,2.539,64,2.429,66,1.802,69,1.706,73,1.804,76,1.641,77,2.945,79,1.072,83,0.917,84,3.111,89,1.929,93,0.791,94,0.974,101,1.145,105,4.282,110,0.575,117,0.588,125,0.85,128,2.476,135,0.479,139,2.659,148,1.665,162,0.318,166,2.074,169,2.06,170,1.641,176,1.089,186,0.008,187,0.008,191,0.85,194,1.512,198,3.796,202,1.207,213,0.472,219,1.49,223,3.347,224,1.929,227,0.85,228,1.089,229,2.945,230,1.04,231,1.207,235,0.85,238,0.85,240,0.739,253,0.575,257,2.148,258,1.1,261,0.947,279,1.207,280,1.305,286,0.917,293,0.427,300,1.365,301,3.639,315,1.207,335,2.3,336,2.292,339,2.664,342,2.375,348,2.25,363,1.365,364,0.739,365,1.207,378,1.99,388,2.074,389,2.539,396,3.313,437,2.292,439,3.202,452,1.641,454,1.665,464,2.871,465,0.995,468,2.373,469,1.207,475,1.401,486,2.238,511,2.539,512,1.512,542,1.089,545,0.917,546,2.011,547,3.331,563,3.685,577,1.207,588,1.207,602,1.207,616,2.292,626,2.659,627,0.791,628,1.996,634,1.207,641,1.089,645,0.917,660,3.507,683,2.176,706,1.929,707,1.802,714,1.305,716,0.995,719,3.052,726,1.365,729,1.641,732,1.796,735,2.561,736,2.713,739,0.791,744,1.796,745,3.828,751,2.292,762,0.739,767,1.99,779,1.089,785,1.888,787,0.739,817,1.796,822,1.365,851,1.669,853,2.661,856,1.365,862,1.207,863,3.278,864,2.232,866,1.512,871,2.476,872,2.914,873,1.796,874,2.945,885,1.929,888,2.429,889,1.99,895,1.365,898,0.995,904,0.995,913,1.207,916,2.659,930,1.207,958,1.365,965,2.295,969,0.995,975,0.917,978,0.995,996,2.951,998,1.512,1021,1.512,1024,0.917,1027,2.945,1036,2.892,1059,0.995,1067,1.796,1078,0.791,1084,1.365,1085,0.995,1096,1.207,1097,2.539,1107,1.365,1136,1.089,1154,0.917,1162,0.791,1190,2.871,1255,1.207,1260,1.365,1263,1.089,1282,2.539,1284,1.207,1353,1.365,1357,1.99,1366,2.687,1372,1.99,1375,1.365,1376,0.995,1392,1.089,1398,2.238,1402,1.512,1407,1.207,1425,1.089,1427,1.207,1428,2.25,1458,2.086,1463,0.995,1485,0.995,1516,2.238,1540,0.995,1543,0.995,1547,0.995,1571,1.207,1573,2.539,1644,1.365,1648,1.207,1664,1.365,1668,2.871,1674,1.207,1683,2.829,1697,2.094,1707,3.91,1725,1.089,1824,1.99,1832,1.365,1864,2.871,1909,1.365,1914,2.871,1923,2.25,1937,2.539,1945,1.99,1991,0.995,2014,3.331,2034,1.207,2046,2.25,2048,1.207,2060,2.539,2061,1.089,2105,3.965,2121,1.365,2122,4.383,2149,3.507,2168,3.685,2213,1.365,2261,2.539,2272,1.207,2317,1.99,2320,2.539,2361,1.99,2364,1.365,2377,1.207,2438,1.207,2518,1.365,2719,1.089,2803,2.25,2804,4.604,2809,4.542,2836,1.641,2848,1.365,2881,1.089,2883,3.058,2892,1.365,2958,1.365,2970,3.709,3012,1.365,3089,1.365,3134,3.965,3175,4.383,3181,5.582,3185,1.365,3248,1.207,3250,1.604,3251,1.604,3252,1.604,3253,1.604,3254,1.604,3255,1.604,3256,2.645,3257,1.365,3258,5.339,3259,3.375,3260,1.604,3261,1.365,3262,3.685,3263,1.604,3264,6.908,3265,1.604,3266,6.357,3267,2.645,3268,1.604,3269,1.604,3270,1.604,3271,4.331,3272,1.604,3273,3.685,3274,3.915,3275,2.941,3276,1.604,3277,1.604,3278,6.935,3279,1.604,3280,4.929,3281,1.604,3282,1.604,3283,1.604,3284,3.915,3285,1.604,3286,1.604,3287,1.604,3288,2.871,3289,1.365,3290,1.604,3291,1.604,3292,1.604,3293,1.604,3294,1.604,3295,1.604,3296,1.604,3297,2.645,3298,2.645,3299,6.448,3300,5.152,3301,1.604,3302,1.604,3303,3.915,3304,1.604,3305,1.604,3306,1.604,3307,2.645,3308,1.604,3309,2.645,3310,1.604,3311,1.604,3312,1.604,3313,5.758,3314,1.604,3315,1.604,3316,1.604,3317,1.604,3318,1.604,3319,4.661,3320,1.604,3321,3.375,3322,1.604,3323,1.604,3324,1.604,3325,1.604,3326,1.604,3327,1.604,3328,1.604,3329,1.604,3330,1.604,3331,1.604,3332,4.661,3333,1.604,3334,1.604,3335,1.604,3336,1.604,3337,1.604,3338,1.604,3339,1.604,3340,1.604,3341,1.604,3342,3.375,3343,1.604,3344,1.604,3345,2.645,3346,4.331,3347,2.645,3348,1.604,3349,1.604,3350,1.604,3351,1.604,3352,3.375,3353,1.604,3354,1.604,3355,6.043,3356,2.645,3357,2.871,3358,1.604,3359,1.604,3360,1.604,3361,1.604,3362,2.645,3363,3.375,3364,2.25,3365,1.604,3366,1.604,3367,3.375,3368,1.604,3369,3.915,3370,1.604,3371,1.604,3372,4.661,3373,1.604,3374,2.645,3375,1.604,3376,1.604,3377,1.604,3378,1.604,3379,1.365,3380,1.604,3381,1.604,3382,1.604,3383,1.604,3384,1.604,3385,1.604,3386,1.604,3387,1.604,3388,1.604,3389,1.604,3390,1.604,3391,1.604,3392,1.604,3393,1.604,3394,1.604,3395,1.604,3396,1.604,3397,1.604,3398,3.915,3399,1.604,3400,1.604,3401,2.645,3402,4.331,3403,1.604,3404,1.604,3405,1.604,3406,1.604,3407,1.604,3408,1.604,3409,1.604,3410,1.604,3411,1.604,3412,1.604,3413,1.604,3414,1.604,3415,2.645,3416,1.604,3417,1.604,3418,1.604,3419,1.604,3420,4.542,3421,1.604,3422,1.604,3423,1.604,3424,1.604,3425,3.375,3426,1.604,3427,1.604,3428,1.604,3429,3.915,3430,1.604,3431,2.645,3432,1.604,3433,1.604,3434,1.604,3435,1.604,3436,1.604,3437,1.604,3438,1.604,3439,1.604,3440,1.604,3441,2.645,3442,1.604,3443,1.604,3444,1.604,3445,1.604,3446,1.604,3447,1.604,3448,1.604,3449,1.604,3450,1.604,3451,1.604,3452,1.604,3453,1.604,3454,1.604,3455,1.604,3456,1.604,3457,3.375,3458,1.604,3459,1.604,3460,1.604,3461,1.604,3462,3.375,3463,1.604,3464,1.604,3465,1.604,3466,1.604,3467,4.661,3468,1.604,3469,1.604,3470,1.604,3471,1.604,3472,1.604,3473,1.604,3474,1.604,3475,2.645,3476,3.375,3477,2.645,3478,2.645,3479,3.375,3480,4.331,3481,3.375,3482,3.375,3483,3.375,3484,1.604,3485,2.645,3486,2.645,3487,2.645,3488,1.604,3489,1.604,3490,3.915,3491,3.375,3492,2.645,3493,1.604,3494,1.604,3495,2.645,3496,2.645,3497,2.645,3498,1.604,3499,1.604,3500,1.604,3501,1.604,3502,1.604,3503,3.375,3504,3.375,3505,3.375,3506,3.375,3507,3.375,3508,3.375,3509,1.604,3510,1.604,3511,1.604,3512,1.604,3513,2.645,3514,3.375,3515,3.375,3516,3.375,3517,1.604,3518,3.375,3519,2.645,3520,3.375,3521,3.375,3522,3.375,3523,2.645,3524,3.375,3525,3.375,3526,2.871,3527,3.915,3528,3.375,3529,3.375,3530,3.375,3531,3.375,3532,1.604,3533,1.604,3534,3.375,3535,2.645,3536,2.645,3537,2.645,3538,3.375,3539,3.375,3540,2.645,3541,2.25,3542,2.645,3543,1.604,3544,1.604,3545,1.604,3546,1.604,3547,1.604,3548,1.604,3549,1.604,3550,1.604,3551,1.604,3552,1.604,3553,1.604,3554,1.604,3555,1.604,3556,1.604,3557,1.604,3558,1.604,3559,1.604,3560,1.604,3561,1.604,3562,1.365,3563,1.604,3564,1.604,3565,1.604,3566,1.604,3567,1.604,3568,1.604,3569,1.604,3570,1.604,3571,1.604,3572,1.604,3573,1.604,3574,1.604,3575,1.604,3576,2.645,3577,1.604,3578,1.604,3579,1.604,3580,1.604,3581,2.871,3582,1.604,3583,1.604,3584,1.604,3585,1.604,3586,1.604,3587,1.604,3588,1.604,3589,1.604,3590,4.661,3591,1.604,3592,1.604,3593,1.604,3594,1.604,3595,1.604,3596,1.604,3597,1.604,3598,1.604,3599,1.604,3600,2.645,3601,1.604,3602,1.604,3603,1.604,3604,1.604,3605,3.375,3606,1.604,3607,1.604,3608,1.604,3609,1.604,3610,1.604,3611,1.604,3612,1.604,3613,1.604,3614,2.645,3615,1.604,3616,1.604,3617,1.604,3618,1.604,3619,1.604,3620,1.604,3621,1.604,3622,1.604,3623,1.604,3624,1.604,3625,1.365,3626,1.604,3627,1.604,3628,1.604,3629,1.604,3630,1.604,3631,1.604,3632,1.604,3633,1.604,3634,1.604,3635,2.645,3636,1.604,3637,1.604,3638,1.604,3639,1.604,3640,1.604,3641,1.604,3642,1.604,3643,3.375,3644,1.604,3645,1.604,3646,1.604,3647,1.604,3648,1.604,3649,1.365,3650,1.604,3651,2.645,3652,1.604,3653,1.604,3654,1.604,3655,1.604,3656,1.604,3657,1.604,3658,1.604,3659,1.604,3660,1.604,3661,1.604,3662,1.604,3663,1.604,3664,1.604,3665,1.604,3666,1.604,3667,1.604,3668,1.604,3669,1.604,3670,1.604,3671,2.645,3672,1.604,3673,1.604,3674,1.604,3675,1.604,3676,3.375,3677,1.604,3678,1.604,3679,1.604,3680,1.604,3681,1.604,3682,1.604,3683,1.604,3684,1.604,3685,1.604,3686,1.604,3687,1.604,3688,1.604,3689,1.604,3690,1.604,3691,1.604,3692,1.604,3693,1.604,3694,1.604,3695,1.604,3696,1.365,3697,1.604,3698,1.604,3699,1.604,3700,1.604,3701,3.915,3702,1.604,3703,1.604,3704,1.604,3705,1.604,3706,1.604,3707,2.645,3708,1.604,3709,1.604,3710,1.604,3711,1.604,3712,1.604,3713,1.604,3714,1.604,3715,1.604,3716,1.604,3717,2.645,3718,1.604,3719,1.604,3720,1.604,3721,1.604,3722,1.604,3723,1.604,3724,1.604,3725,1.604,3726,1.604,3727,1.604,3728,1.604,3729,1.604,3730,1.604,3731,1.604,3732,1.604,3733,1.604,3734,1.604,3735,1.604,3736,1.604,3737,1.604,3738,1.604,3739,1.604,3740,1.604,3741,1.604,3742,1.604,3743,1.604,3744,1.604,3745,1.604,3746,1.604,3747,1.604,3748,1.604,3749,1.604,3750,1.604,3751,1.604,3752,1.604,3753,1.604,3754,1.604,3755,1.604,3756,1.604,3757,1.604,3758,1.604,3759,1.604,3760,1.604,3761,1.604,3762,1.604,3763,1.604,3764,1.604,3765,1.604,3766,1.604,3767,1.604,3768,1.604,3769,1.604,3770,1.604,3771,1.604,3772,1.604,3773,1.365]],["title/coverage.html",[3774,4.087]],["body/coverage.html",[0,0.544,1,2.788,5,0.183,6,2.878,7,3.494,8,2.281,15,2.347,51,0.024,53,0.153,137,2.347,186,0.017,187,0.017,188,2.347,189,3.09,190,3.09,191,3.565,213,0.574,219,2.457,220,2.788,222,3.999,230,0.574,250,2.788,251,2.347,256,3.494,258,0.97,542,2.788,543,3.494,544,3.999,549,2.788,561,2.788,614,2.788,615,3.298,680,2.788,681,3.262,682,2.788,683,1.689,702,2.176,735,2.023,773,2.347,776,3.038,851,1.471,852,3.494,859,2.548,875,2.788,882,3.122,885,2.347,886,3.494,887,3.999,965,2.176,966,3.494,972,2.788,991,3.09,992,3.494,993,3.09,994,4.002,998,2.347,1018,2.548,1076,3.09,1078,2.026,1253,2.788,1254,3.494,1330,3.494,1331,5.064,1346,3.09,1347,2.347,1382,3.09,1383,3.494,1413,2.788,1448,4.002,1449,4.002,1457,2.176,1458,1.663,1556,3.494,1557,3.494,1580,2.548,1581,3.494,1621,6.31,1643,3.494,1798,3.09,1886,3.494,1991,2.548,1996,2.548,2130,3.09,2131,3.09,2163,3.494,2164,3.494,2211,3.494,2250,3.494,2359,3.09,2360,3.494,2401,3.09,2402,3.494,2556,2.548,2557,3.494,2594,3.09,2632,3.999,2791,2.788,2792,3.999,2821,3.494,2823,3.09,2827,3.09,2836,2.548,2881,2.788,2882,3.494,2967,4.522,2968,4.522,2978,2.788,2979,3.09,3289,3.494,3562,3.494,3696,3.494,3774,3.494,3775,4.106,3776,4.106,3777,4.106,3778,6.232,3779,5.893,3780,4.522,3781,4.522,3782,3.494,3783,6.729,3784,3.494,3785,3.494,3786,4.106,3787,4.522,3788,4.106,3789,3.494,3790,5.893,3791,5.315,3792,6.232,3793,4.106,3794,4.106,3795,4.106,3796,4.106,3797,4.106,3798,4.106,3799,4.106,3800,5.315,3801,5.315,3802,4.106,3803,4.106,3804,5.315,3805,4.106,3806,4.106,3807,5.315,3808,4.106,3809,4.106,3810,4.106,3811,4.106,3812,4.106,3813,4.106,3814,4.106,3815,5.315,3816,4.106,3817,5.315,3818,4.106,3819,5.315,3820,5.315,3821,4.106,3822,4.106,3823,4.106,3824,4.106,3825,4.106,3826,4.106]],["title/dependencies.html",[3275,2.003,3827,3.607]],["body/dependencies.html",[51,0.023,136,0.972,186,0.021,187,0.021,249,4.799,871,3.225,1707,3.831,2870,4.799,2970,4.245,3773,4.799,3827,4.799,3828,5.641,3829,5.641,3830,5.641,3831,5.641,3832,5.641,3833,5.641,3834,5.641]],["title/miscellaneous/enumerations.html",[3835,1.687,3836,3.607]],["body/miscellaneous/enumerations.html",[6,2.207,8,2.01,10,3.924,16,0.243,51,0.023,53,0.203,58,0.774,83,3.116,89,3.116,138,3.924,186,0.02,187,0.02,224,3.116,230,0.762,258,1.287,439,2.888,454,3.12,615,3.382,616,3.701,681,2.689,682,4.295,683,1.732,704,4.759,712,3.615,732,3.701,777,3.382,779,4.295,866,3.116,2130,4.102,2131,4.759,2142,5.38,2154,4.637,2883,3.924,2971,4.637,2978,3.701,3835,3.116,3836,4.637,3837,5.451,3838,4.637,3839,5.451]],["title/index.html",[16,0.131,115,1.831,3248,2.22]],["body/index.html",[2,0.489,4,0.287,5,0.214,49,1.324,51,0.024,55,2.103,66,1.854,84,2.706,104,3.269,110,1.724,135,0.65,169,1.442,186,0.019,187,0.019,213,0.923,230,1.015,258,1.558,261,1.724,270,0.856,289,2.987,290,3.623,336,3.269,342,2.379,683,1.866,707,1.207,708,3.622,714,2.897,793,4.096,851,2.519,853,2.565,857,3.988,859,3.644,864,2.236,872,3.112,873,3.269,914,2.752,944,3.622,1078,3.395,1154,2.752,1392,3.269,1424,3.269,1426,4.096,1450,4.42,1574,3.622,1961,3.988,2361,3.622,2823,4.77,2844,4.997,2845,4.096,3169,4.997,3261,4.096,3262,4.096,3275,3.269,3288,4.997,3364,5.393,3420,4.096,3526,4.096,3649,4.997,3840,4.814,3841,4.096,3842,4.814,3843,4.096,3844,4.814,3845,4.814,3846,5.873,3847,4.814,3848,5.873,3849,4.814,3850,4.814,3851,5.873,3852,4.814,3853,4.814,3854,4.814,3855,4.814,3856,4.814,3857,4.814,3858,4.814,3859,4.814,3860,5.873,3861,4.814,3862,4.814,3863,4.814,3864,4.814,3865,4.814,3866,4.814,3867,4.814]],["title/modules.html",[3868,4.087]],["body/modules.html",[51,0.021,186,0.021,187,0.021,3868,4.894]],["title/overview.html",[3869,4.087]],["body/overview.html",[2,0.582,51,0.021,186,0.021,187,0.021,221,3.276,2752,4.312,3869,4.875,3870,5.73]],["title/properties.html",[17,0.509,3275,2.003]],["body/properties.html",[9,0.378,17,0.671,51,0.023,66,1.488,186,0.02,187,0.02,230,0.898,751,3.798,853,2.003,914,3.197,943,4.758,3257,4.758,3273,4.758,3841,4.758,3843,4.758,3871,5.592,3872,5.592,3873,5.592,3874,5.592,3875,5.592,3876,5.592,3877,5.592,3878,5.592,3879,5.592,3880,5.592,3881,5.592]],["title/miscellaneous/typealiases.html",[3835,1.687,3882,4.24]],["body/miscellaneous/typealiases.html",[16,0.227,50,0.472,51,0.019,53,0.272,66,1.891,94,1.27,96,2.514,110,1.825,125,2.701,128,2.914,169,1.821,186,0.019,187,0.019,189,3.835,190,4.575,204,5.172,233,2.409,342,2.064,523,3.162,615,3.162,681,2.999,682,4.128,683,1.62,709,5.172,735,2.705,736,3.478,745,3.461,785,2.064,851,1.825,882,2.701,996,2.994,1136,3.461,1357,3.835,1683,3.735,1706,5.172,1739,4.336,1748,4.336,2896,4.336,2897,4.336,3835,2.914,3838,4.336,3883,5.097,3884,5.097,3885,6.079,3886,7.107,3887,7.152,3888,6.079,3889,6.079,3890,6.079,3891,6.079,3892,6.079,3893,6.079,3894,6.079,3895,5.097,3896,6.079,3897,5.097,3898,5.097]],["title/miscellaneous/variables.html",[3835,1.687,3899,3.607]],["body/miscellaneous/variables.html",[5,0.302,8,1.793,16,0.274,49,0.942,51,0.024,53,0.24,57,0.892,58,0.775,66,1.2,69,1.593,80,1.223,84,2.079,90,1.947,101,1.002,107,1.415,112,0.678,117,0.678,144,1.521,162,0.542,186,0.018,187,0.018,213,0.987,230,0.631,258,1.523,270,0.837,335,1.717,388,2.39,452,2.799,465,3.501,481,3.838,561,3.832,628,2.285,683,1.957,729,2.799,785,1.827,863,2.39,864,1.717,865,3.395,870,3.225,1020,2.579,1039,3.501,1402,2.579,1413,3.832,1425,3.832,1485,3.501,1597,4.855,1683,2.39,1707,3.063,2594,4.246,2792,3.395,2804,3.395,2805,3.838,2826,3.838,2827,4.246,2979,4.246,3050,4.8,3357,3.838,3379,4.8,3541,3.838,3581,3.838,3625,4.8,3780,3.838,3781,5.238,3782,4.8,3784,4.8,3785,3.838,3787,3.838,3789,3.838,3835,2.579,3899,3.838,3900,4.511,3901,5.642,3902,4.511,3903,5.642,3904,4.511,3905,6.157,3906,4.511,3907,5.642,3908,4.511,3909,4.511,3910,4.511,3911,4.511,3912,6.451,3913,5.642,3914,5.642,3915,4.511,3916,4.511,3917,4.511,3918,6.451,3919,5.642,3920,4.511,3921,4.511,3922,5.642,3923,4.511,3924,4.511,3925,4.511,3926,4.511,3927,5.642,3928,4.511,3929,4.511,3930,4.511,3931,4.511,3932,4.511,3933,4.511,3934,4.511,3935,4.511,3936,4.511,3937,4.511,3938,4.511,3939,4.511,3940,4.511,3941,4.511,3942,4.511,3943,4.511,3944,4.511,3945,4.511,3946,4.511,3947,4.511,3948,4.511,3949,4.511]]],"invertedIndex":[["",{"_index":51,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":293,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["0.0",{"_index":1128,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixObjects.html":{}}}],["0.0002",{"_index":1520,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["0.001",{"_index":2755,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["0.01",{"_index":174,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/PhoenixMenuUI.html":{}}}],["0.03",{"_index":1934,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0.05",{"_index":1840,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["0.1",{"_index":596,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/XRManager.html":{}}}],["0.144.0",{"_index":3834,"title":{},"body":{"dependencies.html":{}}}],["0.2",{"_index":2073,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0.25",{"_index":321,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["0.3",{"_index":2090,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0.5",{"_index":1522,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["0.7",{"_index":609,"title":{},"body":{"classes/CMSObjects.html":{}}}],["0.7.9",{"_index":3829,"title":{},"body":{"dependencies.html":{}}}],["0.75",{"_index":322,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["000",{"_index":2576,"title":{},"body":{"classes/StateManager.html":{}}}],["000000",{"_index":1115,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["000ab78",{"_index":3475,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":3352,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":3345,"title":{},"body":{"changelog.html":{}}}],["029d526",{"_index":3720,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":3259,"title":{},"body":{"changelog.html":{}}}],["037af62",{"_index":3437,"title":{},"body":{"changelog.html":{}}}],["03a1de4",{"_index":3621,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":3321,"title":{},"body":{"changelog.html":{}}}],["04dc545",{"_index":3732,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":3319,"title":{},"body":{"changelog.html":{}}}],["05ae1d6",{"_index":3312,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":3303,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":3297,"title":{},"body":{"changelog.html":{}}}],["07/07/2021",{"_index":151,"title":{},"body":{"classes/ARManager.html":{}}}],["07d8633",{"_index":3452,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":3401,"title":{},"body":{"changelog.html":{}}}],["0837334",{"_index":3672,"title":{},"body":{"changelog.html":{}}}],["08c8e00",{"_index":3422,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":3271,"title":{},"body":{"changelog.html":{}}}],["094261c",{"_index":3397,"title":{},"body":{"changelog.html":{}}}],["0980379",{"_index":3745,"title":{},"body":{"changelog.html":{}}}],["0a26fea",{"_index":3742,"title":{},"body":{"changelog.html":{}}}],["0b2dd8a",{"_index":3623,"title":{},"body":{"changelog.html":{}}}],["0b95e5b",{"_index":3559,"title":{},"body":{"changelog.html":{}}}],["0ba5097",{"_index":3390,"title":{},"body":{"changelog.html":{}}}],["0c48b27",{"_index":3334,"title":{},"body":{"changelog.html":{}}}],["0x000000",{"_index":1180,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["0x8c8c8c",{"_index":3857,"title":{},"body":{"index.html":{}}}],["0xafafaf",{"_index":1229,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["0xffffff",{"_index":608,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ColorManager.html":{}}}],["1",{"_index":71,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["1.0",{"_index":1117,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["1.0.1",{"_index":3773,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["1.0.2",{"_index":3770,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":3739,"title":{},"body":{"changelog.html":{}}}],["1.2.0",{"_index":3700,"title":{},"body":{"changelog.html":{}}}],["1.3.0",{"_index":3681,"title":{},"body":{"changelog.html":{}}}],["1.4.0",{"_index":3653,"title":{},"body":{"changelog.html":{}}}],["1.5.0",{"_index":3624,"title":{},"body":{"changelog.html":{}}}],["1.6.0",{"_index":3553,"title":{},"body":{"changelog.html":{}}}],["1.7.0",{"_index":3545,"title":{},"body":{"changelog.html":{}}}],["1.8.0",{"_index":3544,"title":{},"body":{"changelog.html":{}}}],["1.9.0",{"_index":3543,"title":{},"body":{"changelog.html":{}}}],["1/1",{"_index":3783,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":73,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/InfoLogger.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/State.html":{},"changelog.html":{}}}],["10/10",{"_index":3793,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1621,"title":{},"body":{"classes/LoadingManager.html":{},"coverage.html":{}}}],["1000",{"_index":269,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["10000",{"_index":426,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["10244f7",{"_index":3389,"title":{},"body":{"changelog.html":{}}}],["11",{"_index":1084,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"changelog.html":{}}}],["11/11",{"_index":3824,"title":{},"body":{"coverage.html":{}}}],["1100",{"_index":2233,"title":{},"body":{"classes/RKHelper.html":{}}}],["11000",{"_index":446,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["12",{"_index":3356,"title":{},"body":{"changelog.html":{}}}],["12/12",{"_index":3808,"title":{},"body":{"coverage.html":{}}}],["124a272",{"_index":3502,"title":{},"body":{"changelog.html":{}}}],["1261358",{"_index":3765,"title":{},"body":{"changelog.html":{}}}],["12b1754",{"_index":3326,"title":{},"body":{"changelog.html":{}}}],["13",{"_index":3277,"title":{},"body":{"changelog.html":{}}}],["13/13",{"_index":3812,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":3263,"title":{},"body":{"changelog.html":{}}}],["14/14",{"_index":3802,"title":{},"body":{"coverage.html":{}}}],["14cdc8f",{"_index":3359,"title":{},"body":{"changelog.html":{}}}],["14d5f3a",{"_index":3394,"title":{},"body":{"changelog.html":{}}}],["14e4cbb",{"_index":3470,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":3353,"title":{},"body":{"changelog.html":{}}}],["15/15",{"_index":3807,"title":{},"body":{"coverage.html":{}}}],["15dd07c",{"_index":3459,"title":{},"body":{"changelog.html":{}}}],["16",{"_index":2014,"title":{},"body":{"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["16/16",{"_index":3801,"title":{},"body":{"coverage.html":{}}}],["16ea0df",{"_index":3410,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":3304,"title":{},"body":{"changelog.html":{}}}],["17.4.0",{"_index":3828,"title":{},"body":{"dependencies.html":{}}}],["1788560",{"_index":3324,"title":{},"body":{"changelog.html":{}}}],["17909eb",{"_index":3761,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":3554,"title":{},"body":{"changelog.html":{}}}],["18/18",{"_index":3823,"title":{},"body":{"coverage.html":{}}}],["1800.0",{"_index":1931,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["18f8db2",{"_index":3723,"title":{},"body":{"changelog.html":{}}}],["19/19",{"_index":3819,"title":{},"body":{"coverage.html":{}}}],["1906976",{"_index":3759,"title":{},"body":{"changelog.html":{}}}],["1975d70",{"_index":3719,"title":{},"body":{"changelog.html":{}}}],["1].foreach((chargevalue",{"_index":812,"title":{},"body":{"classes/ColorOptions.html":{}}}],["1].oncomplete",{"_index":463,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["1a01248",{"_index":3483,"title":{},"body":{"changelog.html":{}}}],["1a17e99",{"_index":3521,"title":{},"body":{"changelog.html":{}}}],["1af6ae2",{"_index":3487,"title":{},"body":{"changelog.html":{}}}],["1dd0431",{"_index":3494,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":841,"title":{},"body":{"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{}}}],["2.0",{"_index":943,"title":{},"body":{"classes/CoordinateHelper.html":{},"properties.html":{}}}],["2.0.0",{"_index":3474,"title":{},"body":{"changelog.html":{}}}],["2.1.0",{"_index":3435,"title":{},"body":{"changelog.html":{}}}],["2.10.0",{"_index":3296,"title":{},"body":{"changelog.html":{}}}],["2.11.0",{"_index":3276,"title":{},"body":{"changelog.html":{}}}],["2.11.1",{"_index":3270,"title":{},"body":{"changelog.html":{}}}],["2.11.2",{"_index":3257,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["2.2.0",{"_index":3400,"title":{},"body":{"changelog.html":{}}}],["2.3.0",{"_index":3391,"title":{},"body":{"changelog.html":{}}}],["2.3.1",{"_index":3386,"title":{},"body":{"changelog.html":{}}}],["2.3.2",{"_index":3383,"title":{},"body":{"changelog.html":{}}}],["2.4.0",{"_index":3371,"title":{},"body":{"changelog.html":{}}}],["2.5.0",{"_index":3354,"title":{},"body":{"changelog.html":{}}}],["2.5.2",{"_index":3351,"title":{},"body":{"changelog.html":{}}}],["2.6.0",{"_index":3344,"title":{},"body":{"changelog.html":{}}}],["2.7.0",{"_index":3320,"title":{},"body":{"changelog.html":{}}}],["2.8.0",{"_index":3318,"title":{},"body":{"changelog.html":{}}}],["2.9.0",{"_index":3302,"title":{},"body":{"changelog.html":{}}}],["2/2",{"_index":3778,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1824,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["20/06/2021",{"_index":2912,"title":{},"body":{"classes/VRManager.html":{}}}],["2000",{"_index":534,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["2020",{"_index":3701,"title":{},"body":{"changelog.html":{}}}],["2021",{"_index":3355,"title":{},"body":{"changelog.html":{}}}],["2022",{"_index":3258,"title":{},"body":{"changelog.html":{}}}],["20ef288",{"_index":3508,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":3298,"title":{},"body":{"changelog.html":{}}}],["21/21",{"_index":3804,"title":{},"body":{"coverage.html":{}}}],["22/22",{"_index":3821,"title":{},"body":{"coverage.html":{}}}],["2219a3e",{"_index":3667,"title":{},"body":{"changelog.html":{}}}],["22a1ec8",{"_index":3725,"title":{},"body":{"changelog.html":{}}}],["23/23",{"_index":3817,"title":{},"body":{"coverage.html":{}}}],["236bdf4",{"_index":3563,"title":{},"body":{"changelog.html":{}}}],["2371f75",{"_index":3532,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":300,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["24/24",{"_index":3820,"title":{},"body":{"coverage.html":{}}}],["24ecd77",{"_index":3269,"title":{},"body":{"changelog.html":{}}}],["257",{"_index":3584,"title":{},"body":{"changelog.html":{}}}],["25b2a9d",{"_index":3728,"title":{},"body":{"changelog.html":{}}}],["26444f1",{"_index":3360,"title":{},"body":{"changelog.html":{}}}],["266af04",{"_index":3631,"title":{},"body":{"changelog.html":{}}}],["26eff0e",{"_index":3426,"title":{},"body":{"changelog.html":{}}}],["2700aaf",{"_index":3456,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":3346,"title":{},"body":{"changelog.html":{}}}],["28/06/2021",{"_index":141,"title":{},"body":{"classes/ARManager.html":{},"classes/XRManager.html":{}}}],["28/28",{"_index":3800,"title":{},"body":{"coverage.html":{}}}],["289",{"_index":3482,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":3272,"title":{},"body":{"changelog.html":{}}}],["29/06/2021",{"_index":3217,"title":{},"body":{"classes/XRManager.html":{}}}],["29/08/2020",{"_index":2911,"title":{},"body":{"classes/VRManager.html":{}}}],["29093a2",{"_index":3615,"title":{},"body":{"changelog.html":{}}}],["2c97f5c",{"_index":3509,"title":{},"body":{"changelog.html":{}}}],["2e16371",{"_index":3613,"title":{},"body":{"changelog.html":{}}}],["2e52c22",{"_index":3525,"title":{},"body":{"changelog.html":{}}}],["2fa310f",{"_index":3650,"title":{},"body":{"changelog.html":{}}}],["2rem",{"_index":1083,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["3",{"_index":302,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["3.0",{"_index":963,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["3.10.1",{"_index":3832,"title":{},"body":{"dependencies.html":{}}}],["3.3333",{"_index":2553,"title":{},"body":{"classes/State.html":{}}}],["3/3",{"_index":3791,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":515,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixObjects.html":{},"classes/VRManager.html":{}}}],["300",{"_index":496,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["3000",{"_index":404,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/RKHelper.html":{}}}],["3017ca9",{"_index":3450,"title":{},"body":{"changelog.html":{}}}],["303187a",{"_index":3498,"title":{},"body":{"changelog.html":{}}}],["3041166",{"_index":3536,"title":{},"body":{"changelog.html":{}}}],["30b0383",{"_index":3729,"title":{},"body":{"changelog.html":{}}}],["30b5160",{"_index":3611,"title":{},"body":{"changelog.html":{}}}],["32",{"_index":484,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["3255a65",{"_index":3329,"title":{},"body":{"changelog.html":{}}}],["33/33",{"_index":3795,"title":{},"body":{"coverage.html":{}}}],["336",{"_index":3414,"title":{},"body":{"changelog.html":{}}}],["3475836",{"_index":3656,"title":{},"body":{"changelog.html":{}}}],["34a783c",{"_index":3366,"title":{},"body":{"changelog.html":{}}}],["34d9b2c",{"_index":3423,"title":{},"body":{"changelog.html":{}}}],["359d353",{"_index":3633,"title":{},"body":{"changelog.html":{}}}],["36/36",{"_index":3811,"title":{},"body":{"coverage.html":{}}}],["3600.0",{"_index":1932,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["364",{"_index":3368,"title":{},"body":{"changelog.html":{}}}],["36486b8",{"_index":3427,"title":{},"body":{"changelog.html":{}}}],["3756330",{"_index":3670,"title":{},"body":{"changelog.html":{}}}],["37df19f",{"_index":3704,"title":{},"body":{"changelog.html":{}}}],["3839578",{"_index":3535,"title":{},"body":{"changelog.html":{}}}],["39/39",{"_index":3822,"title":{},"body":{"coverage.html":{}}}],["3918159",{"_index":3747,"title":{},"body":{"changelog.html":{}}}],["39241a4",{"_index":3407,"title":{},"body":{"changelog.html":{}}}],["399ac77",{"_index":3772,"title":{},"body":{"changelog.html":{}}}],["3b1991c",{"_index":3629,"title":{},"body":{"changelog.html":{}}}],["3ce675f",{"_index":3664,"title":{},"body":{"changelog.html":{}}}],["3d",{"_index":762,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["3d1f91c",{"_index":3292,"title":{},"body":{"changelog.html":{}}}],["3daabc5",{"_index":3446,"title":{},"body":{"changelog.html":{}}}],["3e5d80d",{"_index":3484,"title":{},"body":{"changelog.html":{}}}],["3f6367f",{"_index":3666,"title":{},"body":{"changelog.html":{}}}],["4/4",{"_index":3790,"title":{},"body":{"coverage.html":{}}}],["4000",{"_index":1030,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["40bbba0",{"_index":3574,"title":{},"body":{"changelog.html":{}}}],["42",{"_index":3870,"title":{},"body":{"overview.html":{}}}],["42/42",{"_index":3818,"title":{},"body":{"coverage.html":{}}}],["4262a1b",{"_index":3735,"title":{},"body":{"changelog.html":{}}}],["43/43",{"_index":3798,"title":{},"body":{"coverage.html":{}}}],["455f536",{"_index":3592,"title":{},"body":{"changelog.html":{}}}],["45a0123",{"_index":3618,"title":{},"body":{"changelog.html":{}}}],["4603dbc",{"_index":3408,"title":{},"body":{"changelog.html":{}}}],["4698ea4",{"_index":3399,"title":{},"body":{"changelog.html":{}}}],["46b8aee",{"_index":3432,"title":{},"body":{"changelog.html":{}}}],["473a39c",{"_index":3340,"title":{},"body":{"changelog.html":{}}}],["4764196",{"_index":3706,"title":{},"body":{"changelog.html":{}}}],["4791f53",{"_index":3290,"title":{},"body":{"changelog.html":{}}}],["48130b2",{"_index":3737,"title":{},"body":{"changelog.html":{}}}],["4acca1a",{"_index":3539,"title":{},"body":{"changelog.html":{}}}],["4b10452",{"_index":3738,"title":{},"body":{"changelog.html":{}}}],["4c5fac9",{"_index":3327,"title":{},"body":{"changelog.html":{}}}],["4e41f72",{"_index":3377,"title":{},"body":{"changelog.html":{}}}],["4f80bd6",{"_index":3655,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":2752,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"overview.html":{}}}],["5/5",{"_index":3788,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":2086,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/VRManager.html":{}}}],["500",{"_index":298,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["5000",{"_index":480,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["50000",{"_index":740,"title":{},"body":{"classes/ColorOptions.html":{}}}],["50c2584",{"_index":3577,"title":{},"body":{"changelog.html":{}}}],["50fc5f7",{"_index":3455,"title":{},"body":{"changelog.html":{}}}],["5139c6e",{"_index":3690,"title":{},"body":{"changelog.html":{}}}],["5283e9a",{"_index":3748,"title":{},"body":{"changelog.html":{}}}],["5334996",{"_index":3451,"title":{},"body":{"changelog.html":{}}}],["5389282",{"_index":3607,"title":{},"body":{"changelog.html":{}}}],["545c956",{"_index":3348,"title":{},"body":{"changelog.html":{}}}],["5518a3e",{"_index":3294,"title":{},"body":{"changelog.html":{}}}],["55cad7c",{"_index":3380,"title":{},"body":{"changelog.html":{}}}],["56c6eff",{"_index":3507,"title":{},"body":{"changelog.html":{}}}],["56f94f0",{"_index":3587,"title":{},"body":{"changelog.html":{}}}],["56ff275",{"_index":3620,"title":{},"body":{"changelog.html":{}}}],["57/57",{"_index":3777,"title":{},"body":{"coverage.html":{}}}],["5743adc",{"_index":3616,"title":{},"body":{"changelog.html":{}}}],["57e438f",{"_index":3585,"title":{},"body":{"changelog.html":{}}}],["5894cac",{"_index":3461,"title":{},"body":{"changelog.html":{}}}],["595d9e5",{"_index":3529,"title":{},"body":{"changelog.html":{}}}],["5a562ab",{"_index":3583,"title":{},"body":{"changelog.html":{}}}],["5a8fe9f",{"_index":3542,"title":{},"body":{"changelog.html":{}}}],["5bdc562",{"_index":3548,"title":{},"body":{"changelog.html":{}}}],["5ea04f1",{"_index":3648,"title":{},"body":{"changelog.html":{}}}],["5f0f942",{"_index":3733,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":352,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["6/6",{"_index":3779,"title":{},"body":{"coverage.html":{}}}],["60269f7",{"_index":3679,"title":{},"body":{"changelog.html":{}}}],["6085f50",{"_index":3504,"title":{},"body":{"changelog.html":{}}}],["608f529",{"_index":3385,"title":{},"body":{"changelog.html":{}}}],["612205c",{"_index":3766,"title":{},"body":{"changelog.html":{}}}],["62ae417",{"_index":3440,"title":{},"body":{"changelog.html":{}}}],["62bf178",{"_index":3305,"title":{},"body":{"changelog.html":{}}}],["6486982",{"_index":3608,"title":{},"body":{"changelog.html":{}}}],["65e657b",{"_index":3308,"title":{},"body":{"changelog.html":{}}}],["66/66",{"_index":3816,"title":{},"body":{"coverage.html":{}}}],["66cbbc0",{"_index":3566,"title":{},"body":{"changelog.html":{}}}],["689da29",{"_index":3478,"title":{},"body":{"changelog.html":{}}}],["68cd7ad",{"_index":3609,"title":{},"body":{"changelog.html":{}}}],["68f3d45",{"_index":3519,"title":{},"body":{"changelog.html":{}}}],["6943f79",{"_index":3698,"title":{},"body":{"changelog.html":{}}}],["69544e6",{"_index":3281,"title":{},"body":{"changelog.html":{}}}],["69d3f75",{"_index":3730,"title":{},"body":{"changelog.html":{}}}],["6a7e82f",{"_index":3365,"title":{},"body":{"changelog.html":{}}}],["6a834e8",{"_index":3569,"title":{},"body":{"changelog.html":{}}}],["6ace2f6",{"_index":3301,"title":{},"body":{"changelog.html":{}}}],["6c92e33",{"_index":3282,"title":{},"body":{"changelog.html":{}}}],["6cd5d53",{"_index":3515,"title":{},"body":{"changelog.html":{}}}],["6dbd797",{"_index":3486,"title":{},"body":{"changelog.html":{}}}],["6e919e1",{"_index":3510,"title":{},"body":{"changelog.html":{}}}],["6ef17d0",{"_index":3588,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":3293,"title":{},"body":{"changelog.html":{}}}],["7/7",{"_index":3786,"title":{},"body":{"coverage.html":{}}}],["717304e",{"_index":3438,"title":{},"body":{"changelog.html":{}}}],["73b7c27",{"_index":3743,"title":{},"body":{"changelog.html":{}}}],["7528ee0",{"_index":3570,"title":{},"body":{"changelog.html":{}}}],["75f829a",{"_index":3382,"title":{},"body":{"changelog.html":{}}}],["7632a18",{"_index":3593,"title":{},"body":{"changelog.html":{}}}],["789da8b",{"_index":3697,"title":{},"body":{"changelog.html":{}}}],["79e6d7c",{"_index":3678,"title":{},"body":{"changelog.html":{}}}],["7a42b65",{"_index":3343,"title":{},"body":{"changelog.html":{}}}],["7b839e3",{"_index":3443,"title":{},"body":{"changelog.html":{}}}],["7bcd7ba",{"_index":3637,"title":{},"body":{"changelog.html":{}}}],["7d1ca22",{"_index":3769,"title":{},"body":{"changelog.html":{}}}],["7d2eb64",{"_index":3533,"title":{},"body":{"changelog.html":{}}}],["7d606b2",{"_index":3699,"title":{},"body":{"changelog.html":{}}}],["7d90d72",{"_index":3580,"title":{},"body":{"changelog.html":{}}}],["7e0870b",{"_index":3306,"title":{},"body":{"changelog.html":{}}}],["7e36462",{"_index":3317,"title":{},"body":{"changelog.html":{}}}],["7e9c733",{"_index":3411,"title":{},"body":{"changelog.html":{}}}],["7f35fdb",{"_index":3404,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":450,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["8/8",{"_index":3796,"title":{},"body":{"coverage.html":{}}}],["854e543",{"_index":3594,"title":{},"body":{"changelog.html":{}}}],["8559830",{"_index":3538,"title":{},"body":{"changelog.html":{}}}],["85d4a14",{"_index":3589,"title":{},"body":{"changelog.html":{}}}],["867d28a",{"_index":3430,"title":{},"body":{"changelog.html":{}}}],["872f708",{"_index":3531,"title":{},"body":{"changelog.html":{}}}],["8a0c0b1",{"_index":3506,"title":{},"body":{"changelog.html":{}}}],["8b994a7",{"_index":3489,"title":{},"body":{"changelog.html":{}}}],["8ba94e7",{"_index":3691,"title":{},"body":{"changelog.html":{}}}],["8cbcaa5",{"_index":3628,"title":{},"body":{"changelog.html":{}}}],["8d7b160",{"_index":3669,"title":{},"body":{"changelog.html":{}}}],["8e2eff4",{"_index":3622,"title":{},"body":{"changelog.html":{}}}],["8e7396f",{"_index":3468,"title":{},"body":{"changelog.html":{}}}],["8f3e8e1",{"_index":3709,"title":{},"body":{"changelog.html":{}}}],["9/9",{"_index":3792,"title":{},"body":{"coverage.html":{}}}],["90aea3c",{"_index":3514,"title":{},"body":{"changelog.html":{}}}],["9222e04",{"_index":3530,"title":{},"body":{"changelog.html":{}}}],["9276ef9",{"_index":3314,"title":{},"body":{"changelog.html":{}}}],["9474565",{"_index":3734,"title":{},"body":{"changelog.html":{}}}],["947f6bf",{"_index":3727,"title":{},"body":{"changelog.html":{}}}],["9540af5",{"_index":3640,"title":{},"body":{"changelog.html":{}}}],["98c7055",{"_index":3396,"title":{},"body":{"changelog.html":{}}}],["9908cc9",{"_index":3522,"title":{},"body":{"changelog.html":{}}}],["9a6c243",{"_index":3428,"title":{},"body":{"changelog.html":{}}}],["9a79692",{"_index":3537,"title":{},"body":{"changelog.html":{}}}],["9a88331",{"_index":3424,"title":{},"body":{"changelog.html":{}}}],["9bc48e0",{"_index":3325,"title":{},"body":{"changelog.html":{}}}],["9d109e5",{"_index":3349,"title":{},"body":{"changelog.html":{}}}],["9e3dc20",{"_index":3768,"title":{},"body":{"changelog.html":{}}}],["9eb21f5",{"_index":3753,"title":{},"body":{"changelog.html":{}}}],["9efd9ca",{"_index":3758,"title":{},"body":{"changelog.html":{}}}],["9f4cf7c",{"_index":3413,"title":{},"body":{"changelog.html":{}}}],["_attributes",{"_index":2645,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["_hitparamsclone",{"_index":1974,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["_menusubfolder",{"_index":1049,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["a411631",{"_index":3517,"title":{},"body":{"changelog.html":{}}}],["a474af2",{"_index":3647,"title":{},"body":{"changelog.html":{}}}],["a4e8aaa",{"_index":3338,"title":{},"body":{"changelog.html":{}}}],["a5481e1",{"_index":3472,"title":{},"body":{"changelog.html":{}}}],["a54d302",{"_index":3295,"title":{},"body":{"changelog.html":{}}}],["a5eaa34",{"_index":3434,"title":{},"body":{"changelog.html":{}}}],["a6a1c19",{"_index":3703,"title":{},"body":{"changelog.html":{}}}],["a821e42",{"_index":3442,"title":{},"body":{"changelog.html":{}}}],["a8336ae",{"_index":3328,"title":{},"body":{"changelog.html":{}}}],["a8a8a8",{"_index":1216,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["a8f8353",{"_index":3630,"title":{},"body":{"changelog.html":{}}}],["aaed8f5",{"_index":3336,"title":{},"body":{"changelog.html":{}}}],["ab8feb4",{"_index":3712,"title":{},"body":{"changelog.html":{}}}],["ability",{"_index":3175,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["aborting",{"_index":2110,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["absolute",{"_index":1082,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ac0c4f1",{"_index":3634,"title":{},"body":{"changelog.html":{}}}],["acc",{"_index":1630,"title":{},"body":{"classes/LoadingManager.html":{}}}],["access",{"_index":3158,"title":{},"body":{"interfaces/Window.html":{}}}],["active",{"_index":93,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["activecamera",{"_index":259,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/StateManager.html":{}}}],["activeobject",{"_index":2403,"title":{},"body":{"classes/SelectionManager.html":{}}}],["activevariable",{"_index":188,"title":{"classes/ActiveVariable.html":{}},"body":{"classes/ActiveVariable.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["activevariable(0",{"_index":2579,"title":{},"body":{"classes/StateManager.html":{}}}],["activevariable(false",{"_index":2574,"title":{},"body":{"classes/StateManager.html":{}}}],["actual",{"_index":349,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixMenuUI.html":{}}}],["actually",{"_index":1976,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["add",{"_index":707,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["add('could",{"_index":2861,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["add(cut",{"_index":1199,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(data",{"_index":1568,"title":{},"body":{"classes/InfoLogger.html":{}}}],["add(k1.clone().multiplyscalar(h2",{"_index":1494,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k1.clone().multiplyscalar(half_h",{"_index":1497,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k2",{"_index":1527,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k2.clone().multiplyscalar(2",{"_index":1531,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k2.clone().multiplyscalar(half_h",{"_index":1501,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3",{"_index":1528,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3.clone().multiplyscalar(2",{"_index":1532,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3.clone().multiplyscalar(h",{"_index":1507,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3.clone().multiplyscalar(h2",{"_index":1504,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k4",{"_index":1533,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(state.dir.clone().multiplyscalar(h",{"_index":1503,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(state.dir.clone().multiplyscalar(half_h",{"_index":1493,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(this.guiparameters.eventdata",{"_index":1166,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(this.guiparameters.geometries",{"_index":1100,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(this.guiparameters.labels",{"_index":1219,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(this.guiparameters[collectionname",{"_index":1187,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(this.guiparameters[labelid",{"_index":1233,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(this.guiparameters[name",{"_index":1127,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["addchild",{"_index":1652,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addchild(name",{"_index":1678,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addcollection",{"_index":1006,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["addcollection(eventdatatype",{"_index":1035,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["addcolor(this.guiparameters.labels",{"_index":1224,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["addcolor(this.guiparameters[collectionname",{"_index":1191,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["addcolor(this.guiparameters[labelid",{"_index":1239,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["addcolor(this.guiparameters[name",{"_index":1123,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["addconfig",{"_index":1653,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addconfig('button",{"_index":1841,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{}}}],["addconfig('checkbox",{"_index":1820,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["addconfig('color",{"_index":1838,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["addconfig('label",{"_index":1862,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["addconfig('slider",{"_index":1822,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["addconfig(type",{"_index":1680,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["added",{"_index":1040,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["addeventdatafolder",{"_index":1007,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["addeventdatatypefolder",{"_index":1008,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["addeventdatatypefolder(typename",{"_index":1045,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["addeventlistener('click",{"_index":2482,"title":{},"body":{"classes/SelectionManager.html":{}}}],["addeventlistener('mousemove",{"_index":2480,"title":{},"body":{"classes/SelectionManager.html":{}}}],["addeventlistener('touchstart",{"_index":2484,"title":{},"body":{"classes/SelectionManager.html":{}}}],["addface3",{"_index":565,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('back_1",{"_index":578,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('back_3",{"_index":581,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('back_4",{"_index":586,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('front_1",{"_index":571,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('front_2",{"_index":584,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('front_3",{"_index":574,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addgeometry",{"_index":1009,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["addgeometry(object",{"_index":1048,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["addgeometryfolder",{"_index":1010,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["adding",{"_index":125,"title":{},"body":{"classes/ARManager.html":{},"interfaces/EventDataLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["addlabel",{"_index":1011,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["addlabel(labelid",{"_index":1055,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["addlabelsfolder",{"_index":1012,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["addlabelsfolder(configfunctions",{"_index":1062,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["addlabeltoeventobject",{"_index":1334,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["addlabeltoeventobject(label",{"_index":1341,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["addlabeltoobject",{"_index":3197,"title":{},"body":{"interfaces/Window.html":{}}}],["addloadableitem",{"_index":1587,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadableitem(id",{"_index":1599,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistener",{"_index":1588,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistener(callback",{"_index":1601,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistenerwithcheck",{"_index":1589,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistenerwithcheck(callback",{"_index":1604,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addoutlinepassforselection",{"_index":1264,"title":{},"body":{"classes/EffectsManager.html":{}}}],["addprogresslistener",{"_index":1590,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addprogresslistener(callback",{"_index":1606,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addrenderer",{"_index":2255,"title":{},"body":{"classes/RendererManager.html":{}}}],["addrenderer(renderer",{"_index":2277,"title":{},"body":{"classes/RendererManager.html":{}}}],["adds",{"_index":3051,"title":{},"body":{"interfaces/Window.html":{}}}],["addtrack",{"_index":2778,"title":{},"body":{"classes/TracksMesh.html":{}}}],["addtrack(points",{"_index":2658,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["ae76d4a",{"_index":3458,"title":{},"body":{"changelog.html":{}}}],["again",{"_index":378,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["against",{"_index":644,"title":{},"body":{"classes/ColorManager.html":{}}}],["aliases",{"_index":3883,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allcolorbyoptions",{"_index":684,"title":{},"body":{"classes/ColorOptions.html":{}}}],["alleventdata",{"_index":447,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alleventdata.getobjectbyname('track",{"_index":506,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alleventdata.traverse((eventobject",{"_index":470,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alleventdata.visible",{"_index":513,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["allfacepositions",{"_index":564,"title":{},"body":{"classes/CMSObjects.html":{}}}],["allfacepositions.concat",{"_index":567,"title":{},"body":{"classes/CMSObjects.html":{}}}],["allgeometriesuiparameters",{"_index":3094,"title":{},"body":{"interfaces/Window.html":{}}}],["allow",{"_index":862,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["allowcustomvalue",{"_index":832,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{}}}],["allowed",{"_index":980,"title":{},"body":{"classes/Cut.html":{}}}],["allowing",{"_index":1393,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["allows",{"_index":2135,"title":{},"body":{"classes/PresetView.html":{}}}],["allowselection(selectedobject",{"_index":3173,"title":{},"body":{"interfaces/Window.html":{}}}],["allowurloptions",{"_index":854,"title":{},"body":{"interfaces/Configuration.html":{}}}],["alltweens",{"_index":329,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens.push(animationspheretween",{"_index":429,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens.push(eventobjecttween",{"_index":357,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens.push(scaletween",{"_index":382,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens.push(tween",{"_index":460,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens[0].onstart",{"_index":430,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens[alltweens.length",{"_index":462,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["along",{"_index":289,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixObjects.html":{},"index.html":{}}}],["alongaxisposition",{"_index":292,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alpha",{"_index":2314,"title":{},"body":{"classes/RendererManager.html":{}}}],["already",{"_index":1160,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/ScriptLoader.html":{}}}],["always",{"_index":3671,"title":{},"body":{"changelog.html":{}}}],["ambientlight",{"_index":2460,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ambientlight().type",{"_index":2467,"title":{},"body":{"classes/SelectionManager.html":{}}}],["amount",{"_index":1935,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["angle",{"_index":301,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/PresetView.html":{},"classes/StateManager.html":{},"changelog.html":{}}}],["angles",{"_index":901,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["anglesaresane",{"_index":891,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["anglesaresane(theta",{"_index":897,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["angular",{"_index":3262,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["animate",{"_index":279,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["animateclippingwithcollision",{"_index":519,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["animateevent",{"_index":319,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animateeventafterinterval",{"_index":225,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animateeventwithclipping",{"_index":445,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animateeventwithcollision(tweenduration",{"_index":517,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["animatepreset(animationpreset",{"_index":3193,"title":{},"body":{"interfaces/Window.html":{}}}],["animatethroughevent",{"_index":285,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["animatewithcollision",{"_index":504,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animating",{"_index":266,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["animation",{"_index":223,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["animationclipplane",{"_index":457,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationclipplane.constant",{"_index":458,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationclipplanes",{"_index":451,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationfunction",{"_index":503,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationfunction(tweenduration",{"_index":516,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationpreset",{"_index":220,"title":{"interfaces/AnimationPreset.html":{}},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["animations",{"_index":315,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["animationsmanager",{"_index":256,"title":{},"body":{"interfaces/AnimationPreset.html":{},"coverage.html":{}}}],["animationsphere",{"_index":325,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretween",{"_index":402,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretween.chain(animationspheretweenclone",{"_index":428,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretween.onupdate(onanimationsphereupdate",{"_index":423,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretweenclone",{"_index":425,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretweenclone.oncomplete",{"_index":434,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretweenclone.onupdate(onanimationsphereupdate",{"_index":427,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["another",{"_index":3762,"title":{},"body":{"changelog.html":{}}}],["antialias",{"_index":1284,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"changelog.html":{}}}],["antialiasing",{"_index":1260,"title":{},"body":{"classes/EffectsManager.html":{},"changelog.html":{}}}],["antialiasrender",{"_index":1265,"title":{},"body":{"classes/EffectsManager.html":{}}}],["antialiasrender(scene",{"_index":1291,"title":{},"body":{"classes/EffectsManager.html":{}}}],["any).geometry",{"_index":410,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["any)?.material.color",{"_index":510,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["any)?.material?.color",{"_index":509,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["any)?.xr",{"_index":3221,"title":{},"body":{"classes/XRManager.html":{}}}],["apache",{"_index":3876,"title":{},"body":{"properties.html":{}}}],["api",{"_index":3841,"title":{},"body":{"index.html":{},"properties.html":{}}}],["app",{"_index":3278,"title":{},"body":{"changelog.html":{}}}],["appended",{"_index":2376,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["application",{"_index":3845,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":3919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applied",{"_index":469,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["applies",{"_index":920,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["apply",{"_index":716,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["applychargecoloroptions",{"_index":690,"title":{},"body":{"classes/ColorOptions.html":{}}}],["applyconfigstate",{"_index":1654,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["applyconfigstate(config",{"_index":1684,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["applyembedoption",{"_index":2794,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyeventoptions",{"_index":2795,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyeventoptions(defaulteventpath",{"_index":2806,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyhidewidgetsoptions",{"_index":2796,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applying",{"_index":3707,"title":{},"body":{"changelog.html":{}}}],["applymomcoloroptions",{"_index":691,"title":{},"body":{"classes/ColorOptions.html":{}}}],["applyoptions",{"_index":2797,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyvertexcoloroptions",{"_index":692,"title":{},"body":{"classes/ColorOptions.html":{}}}],["ar",{"_index":10,"title":{},"body":{"classes/ARManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["archive",{"_index":3639,"title":{},"body":{"changelog.html":{}}}],["armanager",{"_index":1,"title":{"classes/ARManager.html":{}},"body":{"classes/ARManager.html":{},"changelog.html":{},"coverage.html":{}}}],["armanager.enabledomoverlay",{"_index":163,"title":{},"body":{"classes/ARManager.html":{}}}],["around",{"_index":2906,"title":{},"body":{"classes/VRManager.html":{}}}],["array",{"_index":522,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["array.from",{"_index":390,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["array.isarray(first",{"_index":2107,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["array.isarray(hitsparams",{"_index":2101,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["arraybuffer",{"_index":3092,"title":{},"body":{"interfaces/Window.html":{}}}],["arraycamera",{"_index":3216,"title":{},"body":{"classes/XRManager.html":{}}}],["arraycamera([camera.clone",{"_index":3242,"title":{},"body":{"classes/XRManager.html":{}}}],["arrays",{"_index":2112,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{}}}],["aspect",{"_index":2724,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["aspect.x",{"_index":2754,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["aspects",{"_index":2990,"title":{},"body":{"interfaces/Window.html":{}}}],["assets/preset",{"_index":2161,"title":{},"body":{"classes/PresetView.html":{}}}],["assign",{"_index":3682,"title":{},"body":{"changelog.html":{}}}],["associated",{"_index":649,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["async",{"_index":35,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["atlas",{"_index":817,"title":{},"body":{"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["atlasquaternion",{"_index":892,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["attach",{"_index":1065,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["attempt",{"_index":3476,"title":{},"body":{"changelog.html":{}}}],["attribute",{"_index":969,"title":{},"body":{"classes/Cut.html":{},"classes/ScriptLoader.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"changelog.html":{}}}],["attributename",{"_index":2508,"title":{},"body":{"classes/SelectionManager.html":{}}}],["attributes",{"_index":2039,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{}}}],["attributevalue",{"_index":2509,"title":{},"body":{"classes/SelectionManager.html":{}}}],["author",{"_index":3879,"title":{},"body":{"properties.html":{}}}],["available",{"_index":732,"title":{},"body":{"classes/ColorOptions.html":{},"classes/RendererManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["available/created",{"_index":2276,"title":{},"body":{"classes/RendererManager.html":{}}}],["averageprogress",{"_index":1634,"title":{},"body":{"classes/LoadingManager.html":{}}}],["await",{"_index":176,"title":{},"body":{"classes/ARManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["axes",{"_index":477,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["axeshelper",{"_index":2461,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axeshelper().type",{"_index":2469,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axis",{"_index":291,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixObjects.html":{}}}],["azimuthal",{"_index":906,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["b",{"_index":2313,"title":{},"body":{"classes/RendererManager.html":{}}}],["b10bb7a",{"_index":3579,"title":{},"body":{"changelog.html":{}}}],["b46c49f",{"_index":3755,"title":{},"body":{"changelog.html":{}}}],["b52282f",{"_index":3604,"title":{},"body":{"changelog.html":{}}}],["b7a324a",{"_index":3597,"title":{},"body":{"changelog.html":{}}}],["b7e8da0",{"_index":3683,"title":{},"body":{"changelog.html":{}}}],["b8e88b8",{"_index":3572,"title":{},"body":{"changelog.html":{}}}],["b_first",{"_index":1480,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["b_last",{"_index":1475,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["b_middle",{"_index":1474,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["back",{"_index":577,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["back_1",{"_index":583,"title":{},"body":{"classes/CMSObjects.html":{}}}],["back_2",{"_index":579,"title":{},"body":{"classes/CMSObjects.html":{}}}],["back_3",{"_index":580,"title":{},"body":{"classes/CMSObjects.html":{}}}],["back_4",{"_index":582,"title":{},"body":{"classes/CMSObjects.html":{}}}],["background",{"_index":3431,"title":{},"body":{"changelog.html":{}}}],["barrel",{"_index":1922,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["based",{"_index":751,"title":{},"body":{"classes/ColorOptions.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{},"properties.html":{}}}],["bb41683",{"_index":3449,"title":{},"body":{"changelog.html":{}}}],["bbcdf0c",{"_index":3601,"title":{},"body":{"changelog.html":{}}}],["bbea6b0",{"_index":3556,"title":{},"body":{"changelog.html":{}}}],["become",{"_index":142,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["before",{"_index":2433,"title":{},"body":{"classes/SelectionManager.html":{}}}],["being",{"_index":1573,"title":{},"body":{"classes/InfoLogger.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["better",{"_index":2105,"title":{},"body":{"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["bf98a24",{"_index":3392,"title":{},"body":{"changelog.html":{}}}],["big",{"_index":3749,"title":{},"body":{"changelog.html":{}}}],["bind",{"_index":3573,"title":{},"body":{"changelog.html":{}}}],["blob",{"_index":3939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blob([data",{"_index":3940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["block",{"_index":2875,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["bloom",{"_index":1259,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["boolean",{"_index":56,"title":{},"body":{"classes/ARManager.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["both",{"_index":2055,"title":{},"body":{"classes/PhoenixObjects.html":{},"interfaces/Window.html":{}}}],["bottom",{"_index":585,"title":{},"body":{"classes/CMSObjects.html":{},"classes/URLOptionsManager.html":{}}}],["bounded",{"_index":2915,"title":{},"body":{"classes/VRManager.html":{}}}],["bounds",{"_index":1547,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["box",{"_index":603,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["boxbuffer",{"_index":589,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffer.attributes.position",{"_index":590,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffer.computevertexnormals",{"_index":592,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxedges",{"_index":605,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxes",{"_index":1977,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["boxgeometry",{"_index":1989,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["boxobject",{"_index":593,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.name",{"_index":600,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.userdata",{"_index":598,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.uuid",{"_index":613,"title":{},"body":{"classes/CMSObjects.html":{}}}],["browser",{"_index":3605,"title":{},"body":{"changelog.html":{}}}],["browsers",{"_index":2322,"title":{},"body":{"classes/RendererManager.html":{}}}],["bufferattribute",{"_index":247,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["bufferattribute(new",{"_index":2675,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["bufferattribute).copyarray",{"_index":2685,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["buffergeometry",{"_index":240,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["buffergeometry().setfrompoints",{"_index":2943,"title":{},"body":{"classes/VRManager.html":{}}}],["buffergeometry().setfrompoints(vertices",{"_index":2050,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["buffergeometryutils",{"_index":1997,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["bug",{"_index":3299,"title":{},"body":{"changelog.html":{}}}],["bugged",{"_index":3757,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":1961,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["build(obj",{"_index":3123,"title":{},"body":{"interfaces/Window.html":{}}}],["build(object",{"_index":3111,"title":{},"body":{"interfaces/Window.html":{}}}],["build:bundlethis",{"_index":3861,"title":{},"body":{"index.html":{}}}],["buildeventdata",{"_index":1335,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["buildeventdata(eventdata",{"_index":1344,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["buildeventdatafromjson(eventdata",{"_index":3029,"title":{},"body":{"interfaces/Window.html":{}}}],["buildgeometryfromparameters",{"_index":3164,"title":{},"body":{"interfaces/Window.html":{}}}],["buildgeometryfromparameters(parameters",{"_index":3126,"title":{},"body":{"interfaces/Window.html":{}}}],["building",{"_index":3865,"title":{},"body":{"index.html":{}}}],["builds",{"_index":3028,"title":{},"body":{"interfaces/Window.html":{}}}],["bump",{"_index":3274,"title":{},"body":{"changelog.html":{}}}],["bundle",{"_index":3364,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["bundled",{"_index":3859,"title":{},"body":{"index.html":{}}}],["button",{"_index":2897,"title":{},"body":{"classes/VRManager.html":{},"miscellaneous/typealiases.html":{}}}],["buttons",{"_index":2596,"title":{},"body":{"classes/StateManager.html":{}}}],["c0af497",{"_index":3381,"title":{},"body":{"changelog.html":{}}}],["c1",{"_index":2952,"title":{},"body":{"classes/VRManager.html":{}}}],["c36a222",{"_index":3710,"title":{},"body":{"changelog.html":{}}}],["c39ecd3",{"_index":3722,"title":{},"body":{"changelog.html":{}}}],["c446567",{"_index":3534,"title":{},"body":{"changelog.html":{}}}],["c60b3c1",{"_index":3370,"title":{},"body":{"changelog.html":{}}}],["c7a35db",{"_index":3750,"title":{},"body":{"changelog.html":{}}}],["c897ab3",{"_index":3433,"title":{},"body":{"changelog.html":{}}}],["c91aa0e",{"_index":3335,"title":{},"body":{"changelog.html":{}}}],["c92d65f",{"_index":3491,"title":{},"body":{"changelog.html":{}}}],["c9781e5",{"_index":3561,"title":{},"body":{"changelog.html":{}}}],["c991e54",{"_index":3677,"title":{},"body":{"changelog.html":{}}}],["c9d4880",{"_index":3661,"title":{},"body":{"changelog.html":{}}}],["ca3cc2f",{"_index":3596,"title":{},"body":{"changelog.html":{}}}],["calculate",{"_index":2066,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["calculated",{"_index":818,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["calculation",{"_index":3485,"title":{},"body":{"changelog.html":{}}}],["call",{"_index":97,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/LoadingManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["callback",{"_index":96,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/LoadingManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/typealiases.html":{}}}],["callback(averageprogress",{"_index":1636,"title":{},"body":{"classes/LoadingManager.html":{}}}],["callback(eventdata",{"_index":3038,"title":{},"body":{"interfaces/Window.html":{}}}],["callback(eventkeys",{"_index":3027,"title":{},"body":{"interfaces/Window.html":{}}}],["callback(updatedvalue",{"_index":217,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["callbackfunction",{"_index":204,"title":{},"body":{"classes/ActiveVariable.html":{},"miscellaneous/typealiases.html":{}}}],["callbacks",{"_index":196,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/LoadingManager.html":{},"interfaces/Window.html":{}}}],["called",{"_index":1060,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{}}}],["calling",{"_index":1686,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{}}}],["calls",{"_index":3339,"title":{},"body":{"changelog.html":{}}}],["calo",{"_index":1913,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["calocell",{"_index":1904,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["calocells",{"_index":1905,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["calocluster",{"_index":3564,"title":{},"body":{"changelog.html":{}}}],["caloclusters",{"_index":3581,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["calorimeter",{"_index":1906,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["camera",{"_index":45,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["camera.near",{"_index":160,"title":{},"body":{"classes/ARManager.html":{}}}],["cameragroup",{"_index":25,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["cameranear",{"_index":72,"title":{},"body":{"classes/ARManager.html":{}}}],["camerapos",{"_index":2137,"title":{},"body":{"classes/PresetView.html":{}}}],["cameraposition",{"_index":2602,"title":{},"body":{"classes/StateManager.html":{},"classes/XRManager.html":{}}}],["cameras",{"_index":3128,"title":{},"body":{"interfaces/Window.html":{}}}],["cameratarget",{"_index":2138,"title":{},"body":{"classes/PresetView.html":{}}}],["canvas",{"_index":1085,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["canvas.appendchild(this.gui.domelement",{"_index":1087,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["canvaswrapper",{"_index":2330,"title":{},"body":{"classes/RendererManager.html":{}}}],["canvaswrapper.appendchild(this.getmainrenderer().domelement",{"_index":2340,"title":{},"body":{"classes/RendererManager.html":{}}}],["canvaswrapper.offsetheight",{"_index":2335,"title":{},"body":{"classes/RendererManager.html":{}}}],["canvaswrapper.offsetwidth",{"_index":2332,"title":{},"body":{"classes/RendererManager.html":{}}}],["care",{"_index":1351,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["cartesian",{"_index":918,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["case",{"_index":2032,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/PresetView.html":{}}}],["catch",{"_index":3625,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["catch((error",{"_index":2859,"title":{},"body":{"classes/URLOptionsManager.html":{},"classes/XRManager.html":{}}}],["catmullromcurve3",{"_index":1985,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["catmullromcurve3(points",{"_index":2010,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cb2ec40",{"_index":3675,"title":{},"body":{"changelog.html":{}}}],["cb68283",{"_index":3516,"title":{},"body":{"changelog.html":{}}}],["cc04d5a",{"_index":3523,"title":{},"body":{"changelog.html":{}}}],["cdn",{"_index":3649,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["cell",{"_index":1907,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cells",{"_index":1960,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cfb1b6a",{"_index":3756,"title":{},"body":{"changelog.html":{}}}],["cg",{"_index":2954,"title":{},"body":{"classes/VRManager.html":{}}}],["chaining",{"_index":3676,"title":{},"body":{"changelog.html":{}}}],["chamber",{"_index":555,"title":{},"body":{"classes/CMSObjects.html":{}}}],["change",{"_index":194,"title":{},"body":{"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/Cut.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["changeable",{"_index":1032,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["changed",{"_index":193,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["changelog",{"_index":3249,"title":{"changelog.html":{}},"body":{}}],["changes",{"_index":626,"title":{},"body":{"classes/ColorManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["changing",{"_index":337,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["charge",{"_index":712,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"miscellaneous/enumerations.html":{}}}],["chargecolors",{"_index":685,"title":{},"body":{"classes/ColorOptions.html":{}}}],["chargevalue",{"_index":769,"title":{},"body":{"classes/ColorOptions.html":{}}}],["check",{"_index":341,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/LoadingManager.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["checkbox",{"_index":1739,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["checked",{"_index":2281,"title":{},"body":{"classes/RendererManager.html":{}}}],["checking",{"_index":1515,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["checks",{"_index":900,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["chi2",{"_index":2169,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["child",{"_index":660,"title":{},"body":{"classes/ColorManager.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["child.findintree(name",{"_index":1789,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.name",{"_index":1796,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.nodelevel",{"_index":1717,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.parent",{"_index":1716,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.toggleselfanddescendants(child.togglestate",{"_index":1736,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.toggleselfanddescendants(value",{"_index":1735,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.togglestate",{"_index":1734,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.traverse((object",{"_index":662,"title":{},"body":{"classes/ColorManager.html":{}}}],["childindex",{"_index":1720,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["children",{"_index":1644,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["childrenactive",{"_index":1645,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childrentogglestate",{"_index":1646,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate",{"_index":1779,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate.name",{"_index":1784,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate.nodelevel",{"_index":1786,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["class",{"_index":0,"title":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"index.html":{},"overview.html":{}}}],["clean",{"_index":3436,"title":{},"body":{"changelog.html":{}}}],["cleanup",{"_index":3567,"title":{},"body":{"changelog.html":{}}}],["clear",{"_index":1013,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["clearing",{"_index":3033,"title":{},"body":{"interfaces/Window.html":{}}}],["clearinterval(intervalid",{"_index":2959,"title":{},"body":{"classes/VRManager.html":{}}}],["click",{"_index":2428,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicked",{"_index":2522,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicking",{"_index":3177,"title":{},"body":{"interfaces/Window.html":{}}}],["clipping",{"_index":439,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["clippingconstant",{"_index":441,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["clippingenabled",{"_index":2559,"title":{},"body":{"classes/StateManager.html":{}}}],["clippingopeningangle",{"_index":2139,"title":{},"body":{"classes/PresetView.html":{}}}],["clippingsetting",{"_index":2142,"title":{},"body":{"classes/PresetView.html":{},"miscellaneous/enumerations.html":{}}}],["clippingsetting.notforced",{"_index":2155,"title":{},"body":{"classes/PresetView.html":{}}}],["clippingstartangle",{"_index":2140,"title":{},"body":{"classes/PresetView.html":{}}}],["clone",{"_index":1492,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["cloned",{"_index":127,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["close",{"_index":3547,"title":{},"body":{"changelog.html":{}}}],["closes",{"_index":3367,"title":{},"body":{"changelog.html":{}}}],["closest",{"_index":2539,"title":{},"body":{"classes/SelectionManager.html":{}}}],["cluster",{"_index":1914,"title":{},"body":{"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["clusterparams",{"_index":1910,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusters",{"_index":1923,"title":{},"body":{"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["cms",{"_index":547,"title":{},"body":{"classes/CMSObjects.html":{},"changelog.html":{}}}],["cmsloader",{"_index":3696,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["cmsobjects",{"_index":542,"title":{"classes/CMSObjects.html":{}},"body":{"classes/CMSObjects.html":{},"changelog.html":{},"coverage.html":{}}}],["code",{"_index":3420,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["col",{"_index":2659,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["collection",{"_index":628,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["collection's",{"_index":1190,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"changelog.html":{}}}],["collection.name",{"_index":1444,"title":{},"body":{"classes/ExportManager.html":{}}}],["collectioncolor",{"_index":617,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["collectioncolor(collectionname",{"_index":624,"title":{},"body":{"classes/ColorManager.html":{}}}],["collectioncolor?.gethexstring",{"_index":786,"title":{},"body":{"classes/ColorOptions.html":{}}}],["collectioncolorrandom",{"_index":618,"title":{},"body":{"classes/ColorManager.html":{}}}],["collectioncolorrandom(collectionname",{"_index":632,"title":{},"body":{"classes/ColorManager.html":{}}}],["collectionfolder",{"_index":701,"title":{},"body":{"classes/ColorOptions.html":{}}}],["collectionfolder.addchild('color",{"_index":783,"title":{},"body":{"classes/ColorOptions.html":{}}}],["collectionfolder.name",{"_index":781,"title":{},"body":{"classes/ColorOptions.html":{}}}],["collectionname",{"_index":629,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{}}}],["collectionnode",{"_index":1852,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["collectionnode.addchild('cut",{"_index":1861,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["collectionnode.addchild('draw",{"_index":1855,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["collectionobject",{"_index":1188,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["collections",{"_index":1366,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["collfolder",{"_index":1185,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["collfolder.addfolder('cuts",{"_index":1196,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["collideparticles",{"_index":479,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["colliding",{"_index":505,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["collision",{"_index":231,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["collisionduration",{"_index":226,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["collison",{"_index":502,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["color",{"_index":169,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["color(0x2194ce",{"_index":3906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xff0000",{"_index":3905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xffd166",{"_index":3907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xfff69a",{"_index":3910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xffffff",{"_index":481,"title":{},"body":{"interfaces/AnimationPreset.html":{},"miscellaneous/variables.html":{}}}],["color(color",{"_index":2660,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["color(color).gethexstring",{"_index":1839,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["color)?.set(color",{"_index":664,"title":{},"body":{"classes/ColorManager.html":{}}}],["color)?.set(math.random",{"_index":665,"title":{},"body":{"classes/ColorManager.html":{}}}],["colorbymomentum",{"_index":693,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbymomentum(minormax",{"_index":749,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoption",{"_index":709,"title":{},"body":{"classes/ColorOptions.html":{},"miscellaneous/typealiases.html":{}}}],["colorbyoption.initialize",{"_index":800,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoption.name",{"_index":806,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoptionkeys",{"_index":704,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{},"miscellaneous/enumerations.html":{}}}],["colorbyoptionkeys.charge",{"_index":711,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{}}}],["colorbyoptionkeys.mom",{"_index":718,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{}}}],["colorbyoptionkeys.vertex",{"_index":723,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{}}}],["colorbyoptions",{"_index":686,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{}}}],["colorbyoptions.push",{"_index":1871,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["colorbyoptionstoinclude",{"_index":703,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoptionstoinclude.includes(colorbyoption.key",{"_index":797,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoptionstoinclude?.length",{"_index":794,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colored",{"_index":771,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorfortracksvertex",{"_index":673,"title":{},"body":{"classes/ColorManager.html":{}}}],["coloring",{"_index":616,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["colormanager",{"_index":614,"title":{"classes/ColorManager.html":{}},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"coverage.html":{}}}],["colormenu",{"_index":1122,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["colormenu.onchange((color",{"_index":1241,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["colormenu.onchange((value",{"_index":1125,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["colormenu.onchange(oncolorchange",{"_index":1225,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["colormenu.setvalue(collectioncolor?.gethex",{"_index":1193,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["colorobjectsbyproperty",{"_index":619,"title":{},"body":{"classes/ColorManager.html":{}}}],["colorobjectsbyproperty(color",{"_index":635,"title":{},"body":{"classes/ColorManager.html":{}}}],["coloroptions",{"_index":680,"title":{"classes/ColorOptions.html":{}},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{},"coverage.html":{}}}],["coloroptionsfolder",{"_index":687,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorrepresentation",{"_index":2638,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["colors",{"_index":729,"title":{},"body":{"classes/ColorOptions.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["colortracksbyvertex",{"_index":620,"title":{},"body":{"classes/ColorManager.html":{}}}],["colortracksbyvertex(collectionname",{"_index":646,"title":{},"body":{"classes/ColorManager.html":{}}}],["colour",{"_index":3162,"title":{},"body":{"interfaces/Window.html":{}}}],["combine",{"_index":3453,"title":{},"body":{"changelog.html":{}}}],["commit",{"_index":3255,"title":{},"body":{"changelog.html":{}}}],["commits",{"_index":3254,"title":{},"body":{"changelog.html":{}}}],["common",{"_index":2121,"title":{},"body":{"interfaces/PhoenixUI.html":{},"changelog.html":{}}}],["complete",{"_index":3134,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["completely",{"_index":3705,"title":{},"body":{"changelog.html":{}}}],["completes",{"_index":433,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["component",{"_index":3309,"title":{},"body":{"changelog.html":{}}}],["components",{"_index":3760,"title":{},"body":{"changelog.html":{}}}],["composer",{"_index":1261,"title":{},"body":{"classes/EffectsManager.html":{}}}],["compound",{"_index":3441,"title":{},"body":{"changelog.html":{}}}],["computed",{"_index":1460,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["cone",{"_index":2087,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["coner",{"_index":3415,"title":{},"body":{"changelog.html":{}}}],["config",{"_index":1683,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["config.group",{"_index":849,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{}}}],["config.hidden",{"_index":850,"title":{},"body":{"classes/ColorOptions.html":{}}}],["config.onchange",{"_index":1749,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['color",{"_index":1745,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['ischecked",{"_index":1741,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['value",{"_index":1747,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.type",{"_index":1738,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['color",{"_index":1742,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['highvalue",{"_index":1751,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['ischecked",{"_index":1740,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['value",{"_index":1746,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configactive",{"_index":1647,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configbutton",{"_index":3885,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configcheckbox",{"_index":3888,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configcolor",{"_index":3889,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configfile",{"_index":3928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configfunctions",{"_index":1064,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["configlabel",{"_index":3890,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configrangeslider",{"_index":3891,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configs",{"_index":767,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["configselect",{"_index":3892,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configslength",{"_index":1728,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configslider",{"_index":3893,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configstate",{"_index":1767,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate['label",{"_index":1774,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate['type",{"_index":1772,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate[prop",{"_index":1777,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configurable",{"_index":912,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["configuration",{"_index":851,"title":{"interfaces/Configuration.html":{}},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["configuration.allowurloptions",{"_index":3008,"title":{},"body":{"interfaces/Window.html":{}}}],["configurations",{"_index":737,"title":{},"body":{"classes/ColorOptions.html":{}}}],["configure",{"_index":133,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["console",{"_index":3010,"title":{},"body":{"interfaces/Window.html":{}}}],["console.error",{"_index":1724,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["console.error('could",{"_index":2862,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["console.error('error",{"_index":2396,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["console.error(`${xrtype.touppercase",{"_index":3228,"title":{},"body":{"classes/XRManager.html":{}}}],["console.log",{"_index":2036,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/VRManager.html":{}}}],["console.log('no",{"_index":2109,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["console.warn('exception",{"_index":3913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["const",{"_index":270,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":442,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["construct",{"_index":1968,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["constructing",{"_index":2657,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["constructor",{"_index":42,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["constructor(camera",{"_index":1269,"title":{},"body":{"classes/EffectsManager.html":{}}}],["constructor(colormanager",{"_index":700,"title":{},"body":{"classes/ColorOptions.html":{}}}],["constructor(configuration",{"_index":2991,"title":{},"body":{"interfaces/Window.html":{}}}],["constructor(elementid",{"_index":1017,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["constructor(eventdisplay",{"_index":2800,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["constructor(field",{"_index":976,"title":{},"body":{"classes/Cut.html":{}}}],["constructor(name",{"_index":1662,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["constructor(params",{"_index":2635,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["constructor(phoenixmenuroot",{"_index":1801,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["constructor(private",{"_index":155,"title":{},"body":{"classes/ARManager.html":{},"classes/ColorManager.html":{},"classes/XRManager.html":{}}}],["constructor(public",{"_index":214,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["constructor(scene",{"_index":43,"title":{},"body":{"classes/ARManager.html":{}}}],["constructor(scenemanager",{"_index":621,"title":{},"body":{"classes/ColorManager.html":{}}}],["constructor(sessiontype",{"_index":3210,"title":{},"body":{"classes/XRManager.html":{}}}],["constructor(value",{"_index":199,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["contain",{"_index":1941,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["containing",{"_index":88,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["containingevent",{"_index":3138,"title":{},"body":{"interfaces/Window.html":{}}}],["containment",{"_index":2282,"title":{},"body":{"classes/RendererManager.html":{}}}],["contains",{"_index":1378,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/RendererManager.html":{}}}],["containsobject",{"_index":2256,"title":{},"body":{"classes/RendererManager.html":{}}}],["containsobject(obj",{"_index":2279,"title":{},"body":{"classes/RendererManager.html":{}}}],["content",{"_index":3069,"title":{},"body":{"interfaces/Window.html":{}}}],["contents",{"_index":1830,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["contenttype",{"_index":3918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["continue",{"_index":2223,"title":{},"body":{"classes/RKHelper.html":{}}}],["contributors",{"_index":3880,"title":{},"body":{"properties.html":{}}}],["controller",{"_index":2892,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["controller1",{"_index":2884,"title":{},"body":{"classes/VRManager.html":{}}}],["controller2",{"_index":2885,"title":{},"body":{"classes/VRManager.html":{}}}],["controllergrip1",{"_index":2886,"title":{},"body":{"classes/VRManager.html":{}}}],["controllergrip2",{"_index":2887,"title":{},"body":{"classes/VRManager.html":{}}}],["controllermodelfactory",{"_index":2932,"title":{},"body":{"classes/VRManager.html":{}}}],["controllermodelfactory.createcontrollermodel(this.controllergrip1",{"_index":2936,"title":{},"body":{"classes/VRManager.html":{}}}],["controllermodelfactory.createcontrollermodel(this.controllergrip2",{"_index":2941,"title":{},"body":{"classes/VRManager.html":{}}}],["controllers",{"_index":2925,"title":{},"body":{"classes/VRManager.html":{}}}],["controls",{"_index":1021,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["controlsmanager",{"_index":3810,"title":{},"body":{"coverage.html":{}}}],["conventional",{"_index":3253,"title":{},"body":{"changelog.html":{}}}],["conversions",{"_index":890,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["convert",{"_index":929,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["coordinate",{"_index":889,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["coordinatehelper",{"_index":885,"title":{"classes/CoordinateHelper.html":{}},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"changelog.html":{},"coverage.html":{}}}],["coordinatehelper.etatotheta(eta",{"_index":2068,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["coordinates",{"_index":1921,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["coordlength",{"_index":2099,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["coords",{"_index":910,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["copy",{"_index":2183,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["copy(new",{"_index":3241,"title":{},"body":{"classes/XRManager.html":{}}}],["correct",{"_index":3713,"title":{},"body":{"changelog.html":{}}}],["corrected",{"_index":1926,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["correctly",{"_index":3284,"title":{},"body":{"changelog.html":{}}}],["count",{"_index":344,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["counter",{"_index":2641,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["coverage",{"_index":3774,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covering",{"_index":424,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["cphi",{"_index":2076,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cpu",{"_index":3646,"title":{},"body":{"changelog.html":{}}}],["create",{"_index":49,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["created",{"_index":140,"title":{},"body":{"classes/ARManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["creating",{"_index":2044,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{}}}],["cross(b_last",{"_index":1508,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["cross(b_middle",{"_index":1498,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["ctheta",{"_index":2080,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cuboid",{"_index":1912,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["curently",{"_index":1408,"title":{},"body":{"classes/ExportManager.html":{}}}],["curp",{"_index":2738,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["current",{"_index":121,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["currently",{"_index":92,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/ExportManager.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["currentxrsession",{"_index":27,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["curve",{"_index":2009,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["curve.getpoints(50",{"_index":2011,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["custom",{"_index":643,"title":{},"body":{"classes/ColorManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["customcheck",{"_index":637,"title":{},"body":{"classes/ColorManager.html":{}}}],["customcheck(object.userdata",{"_index":654,"title":{},"body":{"classes/ColorManager.html":{}}}],["customize",{"_index":2989,"title":{},"body":{"interfaces/Window.html":{}}}],["cut",{"_index":965,"title":{"classes/Cut.html":{}},"body":{"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"changelog.html":{},"coverage.html":{}}}],["cut.field",{"_index":1203,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["cut.maxvalue",{"_index":1201,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["cut.minvalue",{"_index":1200,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["cut.reset",{"_index":1863,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["cut.step",{"_index":1867,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["cuts",{"_index":1036,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"changelog.html":{}}}],["cuts.length",{"_index":1859,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["cutsfolder",{"_index":1195,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["cutsoptionsnode",{"_index":1860,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["cutsoptionsnode.addconfig('rangeslider",{"_index":1865,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["cycle",{"_index":3311,"title":{},"body":{"changelog.html":{}}}],["cylindergeometry",{"_index":1987,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cylindergeometry(width",{"_index":2085,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["d0",{"_index":2240,"title":{},"body":{"classes/RKHelper.html":{}}}],["d207bad",{"_index":3642,"title":{},"body":{"changelog.html":{}}}],["d2874b8",{"_index":3627,"title":{},"body":{"changelog.html":{}}}],["d2c02d5",{"_index":3331,"title":{},"body":{"changelog.html":{}}}],["d2e0547",{"_index":3513,"title":{},"body":{"changelog.html":{}}}],["d3920c4",{"_index":3736,"title":{},"body":{"changelog.html":{}}}],["d4866ea",{"_index":3337,"title":{},"body":{"changelog.html":{}}}],["d4b62c2",{"_index":3417,"title":{},"body":{"changelog.html":{}}}],["d677089",{"_index":3662,"title":{},"body":{"changelog.html":{}}}],["d90e3a6",{"_index":3663,"title":{},"body":{"changelog.html":{}}}],["da3ead5",{"_index":3718,"title":{},"body":{"changelog.html":{}}}],["dat.gui",{"_index":871,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"dependencies.html":{}}}],["data",{"_index":258,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["data.json",{"_index":3853,"title":{},"body":{"index.html":{}}}],["datguimenuui",{"_index":991,"title":{"classes/DatGUIMenuUI.html":{}},"body":{"classes/DatGUIMenuUI.html":{},"coverage.html":{}}}],["db261a6",{"_index":3673,"title":{},"body":{"changelog.html":{}}}],["db3ca8b",{"_index":3550,"title":{},"body":{"changelog.html":{}}}],["dc05ed9",{"_index":3674,"title":{},"body":{"changelog.html":{}}}],["dc140dd",{"_index":3694,"title":{},"body":{"changelog.html":{}}}],["dc5d489",{"_index":3686,"title":{},"body":{"changelog.html":{}}}],["dc7d74a",{"_index":3421,"title":{},"body":{"changelog.html":{}}}],["dcf6cec",{"_index":3716,"title":{},"body":{"changelog.html":{}}}],["debug",{"_index":3469,"title":{},"body":{"changelog.html":{}}}],["debugging",{"_index":3479,"title":{},"body":{"changelog.html":{}}}],["declare",{"_index":2981,"title":{},"body":{"interfaces/Window.html":{}}}],["default",{"_index":57,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["defaulteventfile",{"_index":855,"title":{},"body":{"interfaces/Configuration.html":{}}}],["defaulteventpath",{"_index":2810,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["defaulteventtype",{"_index":2807,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["defaultmaxvalue",{"_index":970,"title":{},"body":{"classes/Cut.html":{}}}],["defaultminvalue",{"_index":971,"title":{},"body":{"classes/Cut.html":{}}}],["defaultrenderpass",{"_index":1262,"title":{},"body":{"classes/EffectsManager.html":{}}}],["defaults",{"_index":2371,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["defaultview",{"_index":856,"title":{},"body":{"interfaces/Configuration.html":{},"changelog.html":{}}}],["define",{"_index":1450,"title":{},"body":{"classes/Field.html":{},"classes/PresetView.html":{},"index.html":{}}}],["defined",{"_index":47,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["defining",{"_index":3157,"title":{},"body":{"interfaces/Window.html":{}}}],["definition",{"_index":931,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["delete",{"_index":1725,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["deleted",{"_index":1161,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["deleting",{"_index":1153,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["dependencies",{"_index":3827,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dependency",{"_index":3362,"title":{},"body":{"changelog.html":{}}}],["deployment",{"_index":3771,"title":{},"body":{"changelog.html":{}}}],["depth",{"_index":1847,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{}}}],["depthtest",{"_index":1044,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["depthtestmenu",{"_index":1169,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["depthtestmenu.onchange((value",{"_index":1172,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["descendants",{"_index":1704,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["describe",{"_index":2145,"title":{},"body":{"classes/PresetView.html":{}}}],["description",{"_index":9,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"properties.html":{}}}],["desired",{"_index":1364,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["detector",{"_index":290,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"index.html":{}}}],["detectoropacity",{"_index":1116,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["determine",{"_index":3416,"title":{},"body":{"changelog.html":{}}}],["dev",{"_index":3388,"title":{},"body":{"changelog.html":{}}}],["df425ee",{"_index":3499,"title":{},"body":{"changelog.html":{}}}],["df9ce07",{"_index":3481,"title":{},"body":{"changelog.html":{}}}],["dfbc6a2",{"_index":3375,"title":{},"body":{"changelog.html":{}}}],["dfe8e8d",{"_index":3466,"title":{},"body":{"changelog.html":{}}}],["dflt_colors",{"_index":3112,"title":{},"body":{"interfaces/Window.html":{}}}],["dialog",{"_index":3575,"title":{},"body":{"changelog.html":{}}}],["different",{"_index":1020,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["differently",{"_index":3460,"title":{},"body":{"changelog.html":{}}}],["dimensional",{"_index":524,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["dimensions",{"_index":1979,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["dir",{"_index":1548,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["dir.x",{"_index":2750,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["dir.y",{"_index":2749,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["direction",{"_index":1540,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["directionallight",{"_index":2459,"title":{},"body":{"classes/SelectionManager.html":{}}}],["directionallight().type",{"_index":2468,"title":{},"body":{"classes/SelectionManager.html":{}}}],["directly",{"_index":3860,"title":{},"body":{"index.html":{}}}],["directory",{"_index":3864,"title":{},"body":{"index.html":{}}}],["disable",{"_index":2438,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["disabled",{"_index":1275,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["disableselecting",{"_index":2411,"title":{},"body":{"classes/SelectionManager.html":{}}}],["disappearing",{"_index":3358,"title":{},"body":{"changelog.html":{}}}],["discard",{"_index":2761,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["display",{"_index":853,"title":{},"body":{"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["display#readme",{"_index":3874,"title":{},"body":{"properties.html":{}}}],["display's",{"_index":260,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ExportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["display.ts",{"_index":2968,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["displayed",{"_index":1369,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["displaying",{"_index":3393,"title":{},"body":{"changelog.html":{}}}],["displayusage",{"_index":3849,"title":{},"body":{"index.html":{}}}],["dist/bundle",{"_index":3863,"title":{},"body":{"index.html":{}}}],["distance",{"_index":443,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{}}}],["distancefromorigin",{"_index":476,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["divide",{"_index":3524,"title":{},"body":{"changelog.html":{}}}],["dividescalar(previousscale",{"_index":380,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["docs",{"_index":3332,"title":{},"body":{"changelog.html":{}}}],["document",{"_index":2478,"title":{},"body":{"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{}}}],["document.body",{"_index":167,"title":{},"body":{"classes/ARManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{}}}],["document.body.style.removeproperty('background",{"_index":178,"title":{},"body":{"classes/ARManager.html":{}}}],["document.body.style.setproperty('background",{"_index":168,"title":{},"body":{"classes/ARManager.html":{}}}],["document.createelement('a",{"_index":3942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document.createelement('input",{"_index":3923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document.createelement('script",{"_index":2387,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["document.getelementbyid('gui",{"_index":1092,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["document.getelementbyid(elementid",{"_index":1086,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{}}}],["document.getelementsbytagname('head')[0",{"_index":2375,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["document.queryselectorall",{"_index":2383,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["documentation",{"_index":3562,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["documented",{"_index":3252,"title":{},"body":{"changelog.html":{}}}],["dof",{"_index":2171,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["dom",{"_index":63,"title":{},"body":{"classes/ARManager.html":{},"classes/RendererManager.html":{},"changelog.html":{}}}],["domoverlay",{"_index":165,"title":{},"body":{"classes/ARManager.html":{}}}],["don't",{"_index":2184,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["dosplay",{"_index":3540,"title":{},"body":{"changelog.html":{}}}],["doubleside",{"_index":559,"title":{},"body":{"classes/CMSObjects.html":{}}}],["doublesided",{"_index":3056,"title":{},"body":{"interfaces/Window.html":{}}}],["download",{"_index":3949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dparams",{"_index":2198,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["dparams[0",{"_index":2241,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[1",{"_index":2243,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[2",{"_index":2244,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[3",{"_index":2245,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[4",{"_index":819,"title":{},"body":{"classes/ColorOptions.html":{},"classes/RKHelper.html":{}}}],["draw",{"_index":1355,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixObjects.html":{}}}],["drawing",{"_index":3549,"title":{},"body":{"changelog.html":{}}}],["drawoptionsnode",{"_index":1854,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["drawoptionsnode.addconfig('checkbox",{"_index":1857,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["drawoptionsnode.addconfig('slider",{"_index":1856,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["drawradius",{"_index":1917,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["drawrange",{"_index":343,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["drawz",{"_index":1916,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["driven",{"_index":3842,"title":{},"body":{"index.html":{}}}],["drop",{"_index":3644,"title":{},"body":{"changelog.html":{}}}],["duration",{"_index":232,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["dynamically",{"_index":2362,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["e",{"_index":3927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e.target?.files[0",{"_index":3929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e07725a",{"_index":3512,"title":{},"body":{"changelog.html":{}}}],["e10a68d",{"_index":3665,"title":{},"body":{"changelog.html":{}}}],["e152933",{"_index":3287,"title":{},"body":{"changelog.html":{}}}],["e297c98",{"_index":3714,"title":{},"body":{"changelog.html":{}}}],["e2e",{"_index":3279,"title":{},"body":{"changelog.html":{}}}],["e6f69a0",{"_index":3660,"title":{},"body":{"changelog.html":{}}}],["e96136b",{"_index":3657,"title":{},"body":{"changelog.html":{}}}],["e9f1bc9",{"_index":3688,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":235,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/LoadingManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["easily",{"_index":2132,"title":{},"body":{"classes/PresetView.html":{}}}],["easing",{"_index":234,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["edcd567",{"_index":3552,"title":{},"body":{"changelog.html":{}}}],["edges",{"_index":604,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry",{"_index":557,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry(boxbuffer",{"_index":606,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edit",{"_index":387,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["edward's",{"_index":3702,"title":{},"body":{"changelog.html":{}}}],["effect",{"_index":1279,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectcomposer",{"_index":1277,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectcomposer(renderer",{"_index":1306,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effects",{"_index":1255,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["effectsmanager",{"_index":1253,"title":{"classes/EffectsManager.html":{}},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["effectsrender",{"_index":1266,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectsrender(scene",{"_index":1293,"title":{},"body":{"classes/EffectsManager.html":{}}}],["electrons",{"_index":3395,"title":{},"body":{"changelog.html":{}}}],["element",{"_index":870,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["elementid",{"_index":857,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{},"index.html":{}}}],["elements",{"_index":1289,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["embed",{"_index":2804,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["empty",{"_index":3089,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["enable",{"_index":62,"title":{},"body":{"classes/ARManager.html":{},"interfaces/Configuration.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["enabled",{"_index":1274,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["enabledatguimenu",{"_index":858,"title":{},"body":{"interfaces/Configuration.html":{}}}],["enabledomoverlay",{"_index":19,"title":{},"body":{"classes/ARManager.html":{}}}],["enableeventdisplayconsole",{"_index":3156,"title":{},"body":{"interfaces/Window.html":{}}}],["enablekeyboardcontrols",{"_index":3189,"title":{},"body":{"interfaces/Window.html":{}}}],["enables",{"_index":3155,"title":{},"body":{"interfaces/Window.html":{}}}],["enableselecting",{"_index":2412,"title":{},"body":{"classes/SelectionManager.html":{}}}],["enableselecting(enable",{"_index":3179,"title":{},"body":{"interfaces/Window.html":{}}}],["enabling",{"_index":2434,"title":{},"body":{"classes/SelectionManager.html":{}}}],["enabling/disabling",{"_index":1106,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["end",{"_index":120,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["end.chain(startclone",{"_index":310,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["endcap",{"_index":1933,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["ended",{"_index":316,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["ends",{"_index":98,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["endxr(xrsessiontype",{"_index":3016,"title":{},"body":{"interfaces/Window.html":{}}}],["endxrsession",{"_index":38,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["energy",{"_index":1937,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"changelog.html":{}}}],["energyscaling",{"_index":1928,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["entries",{"_index":1564,"title":{},"body":{"classes/InfoLogger.html":{}}}],["entry",{"_index":1570,"title":{},"body":{"classes/InfoLogger.html":{}}}],["enum",{"_index":778,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PresetView.html":{},"classes/XRManager.html":{}}}],["enumerable",{"_index":2772,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["enumerations",{"_index":3836,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equal",{"_index":772,"title":{},"body":{"classes/ColorOptions.html":{}}}],["equatorial",{"_index":905,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["error",{"_index":1516,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["error_estimate",{"_index":1518,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["errors",{"_index":3374,"title":{},"body":{"changelog.html":{}}}],["estimate",{"_index":1517,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["et",{"_index":2070,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{}}}],["eta",{"_index":916,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"changelog.html":{}}}],["eta/phi",{"_index":919,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["eta=0",{"_index":951,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etaphitocartesian",{"_index":893,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etaphitocartesian(radius",{"_index":915,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etatotheta",{"_index":894,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etatotheta(eta",{"_index":927,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["eta~infinite",{"_index":957,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etc",{"_index":1038,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["even",{"_index":2047,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["event",{"_index":230,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["event's",{"_index":2578,"title":{},"body":{"classes/StateManager.html":{}}}],["event.clientx",{"_index":2529,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.clienty",{"_index":2532,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.preventdefault",{"_index":2524,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event_data_type_colors",{"_index":561,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["event_data_type_colors.jets",{"_index":2089,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["event_data_type_colors.muonchambers",{"_index":595,"title":{},"body":{"classes/CMSObjects.html":{}}}],["event_data_type_colors.tracks.gethex",{"_index":2015,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["eventdata",{"_index":323,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["eventdata.children",{"_index":1440,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdata.traverse((eventobject",{"_index":332,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventdataconfig",{"_index":1435,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name",{"_index":1442,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name].push(collection.name",{"_index":1445,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataloader",{"_index":859,"title":{"interfaces/EventDataLoader.html":{}},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"coverage.html":{},"index.html":{}}}],["eventdatatype",{"_index":1039,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["eventdatatypenode",{"_index":1850,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["eventdatatypenode.name",{"_index":1851,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["eventdisplay",{"_index":1078,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["eventdisplay.init(configuration",{"_index":3851,"title":{},"body":{"index.html":{}}}],["eventdisplay.loadobjgeometry",{"_index":3855,"title":{},"body":{"index.html":{}}}],["eventdisplay.parsephoenixevents(res",{"_index":3854,"title":{},"body":{"index.html":{}}}],["eventfile",{"_index":883,"title":{},"body":{"interfaces/Configuration.html":{}}}],["eventfolder",{"_index":999,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["eventfolderstate",{"_index":1799,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["eventkey",{"_index":3041,"title":{},"body":{"interfaces/Window.html":{}}}],["eventkeys",{"_index":3019,"title":{},"body":{"interfaces/Window.html":{}}}],["eventmetadata",{"_index":2560,"title":{},"body":{"classes/StateManager.html":{}}}],["eventnumber",{"_index":2577,"title":{},"body":{"classes/StateManager.html":{}}}],["eventobject",{"_index":328,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry",{"_index":333,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.attributes['position'].array",{"_index":391,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.boundingsphere.center",{"_index":386,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.computeboundingsphere",{"_index":393,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.deleteattribute('position",{"_index":392,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.drawrange",{"_index":362,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.drawrange.count",{"_index":359,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.setdrawrange(0",{"_index":360,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry?.attributes?.position?.count",{"_index":347,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.material",{"_index":455,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.material.clippingplanes",{"_index":456,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.material.progress",{"_index":353,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.name",{"_index":338,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.position",{"_index":379,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.position.equals",{"_index":384,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.scale.setscalar(updatedscale.x",{"_index":374,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.scale.x",{"_index":367,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.scale.y",{"_index":368,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.scale.z",{"_index":369,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.visible",{"_index":400,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobjecttween",{"_index":354,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobjecttween.oncomplete",{"_index":356,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["events",{"_index":1376,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["eventsdata",{"_index":1377,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["eventtype",{"_index":884,"title":{},"body":{"interfaces/Configuration.html":{}}}],["example",{"_index":1053,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["examples",{"_index":3866,"title":{},"body":{"index.html":{}}}],["except",{"_index":3425,"title":{},"body":{"changelog.html":{}}}],["exception",{"_index":3912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["existing",{"_index":3034,"title":{},"body":{"interfaces/Window.html":{}}}],["exists",{"_index":345,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/ScriptLoader.html":{}}}],["experiment",{"_index":914,"title":{},"body":{"classes/CoordinateHelper.html":{},"interfaces/EventDataLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"index.html":{},"properties.html":{}}}],["experimental",{"_index":925,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["experimentinfo",{"_index":2868,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["experiments",{"_index":3711,"title":{},"body":{"changelog.html":{}}}],["export",{"_index":152,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["exported",{"_index":1397,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter",{"_index":1416,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse",{"_index":1429,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse(scene",{"_index":1418,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportmanager",{"_index":1382,"title":{"classes/ExportManager.html":{}},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["exportphoenixdisplay",{"_index":3087,"title":{},"body":{"interfaces/Window.html":{}}}],["exportphoenixscene",{"_index":1384,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportphoenixscene(scene",{"_index":1389,"title":{},"body":{"classes/ExportManager.html":{}}}],["exports",{"_index":1391,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["exportscenetoobj",{"_index":1385,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportscenetoobj(scene",{"_index":1399,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporttoobj",{"_index":3074,"title":{},"body":{"interfaces/Window.html":{}}}],["extend",{"_index":3457,"title":{},"body":{"changelog.html":{}}}],["extends",{"_index":14,"title":{},"body":{"classes/ARManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{}}}],["extension",{"_index":3546,"title":{},"body":{"changelog.html":{}}}],["external",{"_index":2363,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["externalize",{"_index":3361,"title":{},"body":{"changelog.html":{}}}],["extra",{"_index":1868,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["extraanimationsphereduration",{"_index":320,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["extract",{"_index":2854,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["extrainfo",{"_index":1942,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["extrapolate",{"_index":2217,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolated",{"_index":2026,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["extrapolatetrackpositions",{"_index":2212,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolatetrackpositions(track",{"_index":2215,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolating",{"_index":334,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["extrapolation",{"_index":2034,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["extrapolationlimit",{"_index":2213,"title":{},"body":{"classes/RKHelper.html":{},"changelog.html":{}}}],["extrapolationlimit(pos",{"_index":2220,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolator",{"_index":2222,"title":{},"body":{"classes/RKHelper.html":{}}}],["f1d2cef",{"_index":3518,"title":{},"body":{"changelog.html":{}}}],["f2376cc",{"_index":3341,"title":{},"body":{"changelog.html":{}}}],["f279898",{"_index":3571,"title":{},"body":{"changelog.html":{}}}],["f2ed0a3",{"_index":3350,"title":{},"body":{"changelog.html":{}}}],["f40beac",{"_index":3265,"title":{},"body":{"changelog.html":{}}}],["f41920b",{"_index":3497,"title":{},"body":{"changelog.html":{}}}],["f4c2e31",{"_index":3680,"title":{},"body":{"changelog.html":{}}}],["f7cd6b4",{"_index":3599,"title":{},"body":{"changelog.html":{}}}],["f87c587",{"_index":3746,"title":{},"body":{"changelog.html":{}}}],["f8a0080",{"_index":3560,"title":{},"body":{"changelog.html":{}}}],["f94c0e4",{"_index":3684,"title":{},"body":{"changelog.html":{}}}],["faces",{"_index":566,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces.map((face",{"_index":568,"title":{},"body":{"classes/CMSObjects.html":{}}}],["facing",{"_index":2962,"title":{},"body":{"classes/VRManager.html":{}}}],["factor",{"_index":3129,"title":{},"body":{"interfaces/Window.html":{}}}],["failed",{"_index":3740,"title":{},"body":{"changelog.html":{}}}],["fallback",{"_index":2811,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["false",{"_index":107,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/variables.html":{}}}],["fbd584e",{"_index":3652,"title":{},"body":{"changelog.html":{}}}],["fdd492a",{"_index":3473,"title":{},"body":{"changelog.html":{}}}],["fe0b2e6",{"_index":3668,"title":{},"body":{"changelog.html":{}}}],["features",{"_index":105,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["fetch",{"_index":2835,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["fetch('path/to/event",{"_index":3852,"title":{},"body":{"index.html":{}}}],["fetch(file",{"_index":2851,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["fetch(this.urloptions.get('config",{"_index":2843,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["few",{"_index":2025,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["ff0000",{"_index":727,"title":{},"body":{"classes/ColorOptions.html":{}}}],["ff10477",{"_index":3726,"title":{},"body":{"changelog.html":{}}}],["ff666e2",{"_index":3582,"title":{},"body":{"changelog.html":{}}}],["ff77aaa",{"_index":3285,"title":{},"body":{"changelog.html":{}}}],["ffffff",{"_index":3147,"title":{},"body":{"interfaces/Window.html":{}}}],["fh",{"_index":1523,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["fh2",{"_index":1524,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field",{"_index":972,"title":{"classes/Field.html":{}},"body":{"classes/Cut.html":{},"classes/Field.html":{},"coverage.html":{}}}],["field.get(pos1",{"_index":1495,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field.get(pos2",{"_index":1505,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field.get(state.pos",{"_index":1481,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["file.readobject(objectname",{"_index":3122,"title":{},"body":{"interfaces/Window.html":{}}}],["filename",{"_index":3050,"title":{},"body":{"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["filereader",{"_index":3931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["files",{"_index":3635,"title":{},"body":{"changelog.html":{}}}],["filter",{"_index":978,"title":{},"body":{"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"changelog.html":{}}}],["filter((val",{"_index":2517,"title":{},"body":{"classes/SelectionManager.html":{}}}],["filtered",{"_index":979,"title":{},"body":{"classes/Cut.html":{}}}],["filters",{"_index":968,"title":{},"body":{"classes/Cut.html":{}}}],["finally",{"_index":2848,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["finalposition",{"_index":2732,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["finalposition.w",{"_index":2740,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["finalposition.xy",{"_index":2739,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["find",{"_index":1689,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/URLOptionsManager.html":{}}}],["finding",{"_index":2447,"title":{},"body":{"classes/SelectionManager.html":{}}}],["findintree",{"_index":1655,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintree(name",{"_index":1687,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintreeorcreate",{"_index":1656,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintreeorcreate(name",{"_index":1692,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["finished",{"_index":1611,"title":{},"body":{"classes/LoadingManager.html":{}}}],["first",{"_index":318,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["first.type",{"_index":2108,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["firsttween",{"_index":530,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["firsttween.start",{"_index":541,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["fix",{"_index":3264,"title":{},"body":{"changelog.html":{}}}],["fixed",{"_index":2272,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["fixeddepth",{"_index":1929,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["fixedoverlay",{"_index":2251,"title":{},"body":{"classes/RendererManager.html":{}}}],["fixes",{"_index":3181,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["fixing",{"_index":3695,"title":{},"body":{"changelog.html":{}}}],["fixoverlayview(fixed",{"_index":3182,"title":{},"body":{"interfaces/Window.html":{}}}],["flat",{"_index":2719,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["float",{"_index":2715,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["float32array([].concat(...reachedhits",{"_index":419,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["float32array(allfacepositions",{"_index":591,"title":{},"body":{"classes/CMSObjects.html":{}}}],["float32array(hitlength",{"_index":2113,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["float32array(this.colors",{"_index":2681,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["float32array(this.counter",{"_index":2682,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["float32array(this.next",{"_index":2678,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["float32array(this.positions",{"_index":2676,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["float32array(this.previous",{"_index":2677,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["float32array(this.side",{"_index":2679,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["floor",{"_index":2914,"title":{},"body":{"classes/VRManager.html":{}}}],["folder",{"_index":706,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["folders",{"_index":1068,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{}}}],["foreach((groupname",{"_index":184,"title":{},"body":{"classes/ARManager.html":{}}}],["form",{"_index":3578,"title":{},"body":{"changelog.html":{}}}],["format",{"_index":1392,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["formatted",{"_index":3754,"title":{},"body":{"changelog.html":{}}}],["forming",{"_index":237,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["found",{"_index":1691,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["fragment",{"_index":2758,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["fragmentshader",{"_index":2768,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["front",{"_index":570,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_1",{"_index":576,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_2",{"_index":572,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_3",{"_index":573,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_4",{"_index":575,"title":{},"body":{"classes/CMSObjects.html":{}}}],["full",{"_index":3291,"title":{},"body":{"changelog.html":{}}}],["function",{"_index":94,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["functionality",{"_index":1354,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["functions",{"_index":261,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["general",{"_index":3463,"title":{},"body":{"changelog.html":{}}}],["generalize",{"_index":3528,"title":{},"body":{"changelog.html":{}}}],["generate",{"_index":1426,"title":{},"body":{"classes/ExportManager.html":{},"index.html":{}}}],["generation",{"_index":313,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["generic",{"_index":3342,"title":{},"body":{"changelog.html":{}}}],["geom",{"_index":3144,"title":{},"body":{"interfaces/Window.html":{}}}],["geometrical",{"_index":3557,"title":{},"body":{"changelog.html":{}}}],["geometries",{"_index":1024,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["geometries.children.foreach((object",{"_index":1446,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometries/event",{"_index":3176,"title":{},"body":{"interfaces/Window.html":{}}}],["geometriesconfig",{"_index":1437,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometriesconfig.push(object.name",{"_index":1447,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometry",{"_index":342,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["geometry.computeboundingsphere",{"_index":420,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["geometry.setattribute",{"_index":418,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["geometry/event",{"_index":3172,"title":{},"body":{"interfaces/Window.html":{}}}],["geometryposcount",{"_index":346,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["geometryuiparameters",{"_index":3894,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["geomfolder",{"_index":1000,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["get(field",{"_index":1451,"title":{},"body":{"classes/Field.html":{}}}],["getactiveobjectid",{"_index":2413,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["getcalocell",{"_index":1887,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcalocell(calocells",{"_index":1902,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcalocube",{"_index":1888,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcalocube(length",{"_index":1908,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcaloposition",{"_index":1889,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcaloposition(clusterparams",{"_index":1915,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcamera",{"_index":3240,"title":{},"body":{"classes/XRManager.html":{}}}],["getcameragroup",{"_index":39,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["getcameragroup(camera",{"_index":122,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["getcameratween",{"_index":268,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["getcluster",{"_index":1890,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcluster(clusterparams",{"_index":1927,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcollection",{"_index":1336,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["getcollection(collectionname",{"_index":1361,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["getcollections",{"_index":1337,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["getcompound",{"_index":3464,"title":{},"body":{"changelog.html":{}}}],["getelementbyid('embedmenu",{"_index":2873,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["getelementbyid('three",{"_index":2479,"title":{},"body":{"classes/SelectionManager.html":{}}}],["getelementbyid(singleid",{"_index":2880,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["geteventdatatypefolder",{"_index":1014,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["geteventdatatypefolder(typename",{"_index":1069,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["geteventmetadata",{"_index":1338,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["geteventslist",{"_index":1339,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["geteventslist(eventsdata",{"_index":1373,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["getfromlocalstorage",{"_index":3782,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gethits",{"_index":1891,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gethits(hitsparams",{"_index":1938,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gethitspositions(positions",{"_index":525,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["geticonurl",{"_index":2141,"title":{},"body":{"classes/PresetView.html":{}}}],["getinfologger",{"_index":2860,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["getinfologgerlist",{"_index":1560,"title":{},"body":{"classes/InfoLogger.html":{}}}],["getinstance",{"_index":2563,"title":{},"body":{"classes/StateManager.html":{}}}],["getjet",{"_index":1892,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getjet(jetparams",{"_index":1947,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getlabelsobject",{"_index":1340,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["getlabeltitle",{"_index":2979,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getlabeltitle(eventdatatype",{"_index":3209,"title":{},"body":{"interfaces/Window.html":{}}}],["getloadingmanager",{"_index":3046,"title":{},"body":{"interfaces/Window.html":{}}}],["getlocalclipping",{"_index":2257,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmainrenderer",{"_index":2258,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmissingenergy",{"_index":1893,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getmissingenergy(metparams",{"_index":1950,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getmomentum",{"_index":694,"title":{},"body":{"classes/ColorOptions.html":{}}}],["getmomentum(objectparams",{"_index":759,"title":{},"body":{"classes/ColorOptions.html":{}}}],["getmuon",{"_index":3465,"title":{},"body":{"changelog.html":{}}}],["getmuonchamber",{"_index":550,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getmuonchamber(muonchamberparams",{"_index":551,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getnodestate",{"_index":1657,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["getobjectbyname(collectionname",{"_index":659,"title":{},"body":{"classes/ColorManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["getobjectbyname(labelid",{"_index":1237,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["getobjectbyname(scenemanager.event_data_id",{"_index":658,"title":{},"body":{"classes/ColorManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["getobjectbyname(scenemanager.labels_id",{"_index":1236,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["getobjectbyname(typename",{"_index":1177,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["getopeningclippingangle",{"_index":2564,"title":{},"body":{"classes/StateManager.html":{}}}],["getoverlayrenderer",{"_index":2259,"title":{},"body":{"classes/RendererManager.html":{}}}],["getplanarcalocell",{"_index":1894,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getplanarcalocell(calocells",{"_index":1954,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getplanarcalocells",{"_index":1895,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getplanarcalocells(calocells",{"_index":1958,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getprettyparams",{"_index":2166,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettyparams(params",{"_index":2173,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettysymbol",{"_index":2167,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettysymbol(param",{"_index":2177,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getrenderers",{"_index":2260,"title":{},"body":{"classes/RendererManager.html":{}}}],["getscene",{"_index":657,"title":{},"body":{"classes/ColorManager.html":{}}}],["getstartclippingangle",{"_index":2565,"title":{},"body":{"classes/StateManager.html":{}}}],["getstatemanager",{"_index":3047,"title":{},"body":{"interfaces/Window.html":{}}}],["getthreemanager",{"_index":3045,"title":{},"body":{"interfaces/Window.html":{}}}],["getting",{"_index":3248,"title":{"changelog.html":{},"index.html":{}},"body":{"changelog.html":{}}}],["gettrack",{"_index":1896,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gettrack(trackparams",{"_index":1962,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gettracks",{"_index":1897,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gettracks(tracks",{"_index":1965,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gettrackswithrungekutta",{"_index":2214,"title":{},"body":{"classes/RKHelper.html":{}}}],["gettrackswithrungekutta(trackscollectionsevent",{"_index":2226,"title":{},"body":{"classes/RKHelper.html":{}}}],["getuimanager",{"_index":2623,"title":{},"body":{"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["geturloptions",{"_index":2798,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["geturloptionsmanager",{"_index":3049,"title":{},"body":{"interfaces/Window.html":{}}}],["getvertex",{"_index":1898,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getvertex(vertexparams",{"_index":1970,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getxrcamera",{"_index":40,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["git://github.com/hsf/phoenix.git",{"_index":3878,"title":{},"body":{"properties.html":{}}}],["github:9inpachi/jsroot#7.2.0",{"_index":3830,"title":{},"body":{"dependencies.html":{}}}],["given",{"_index":144,"title":{},"body":{"classes/ARManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/variables.html":{}}}],["giving",{"_index":2445,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["gl_fragcolor",{"_index":2762,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["gl_position",{"_index":2756,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["global",{"_index":2982,"title":{},"body":{"interfaces/Window.html":{}}}],["globalthis",{"_index":3659,"title":{},"body":{"changelog.html":{}}}],["gltf",{"_index":1427,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["gltfexporter",{"_index":1411,"title":{},"body":{"classes/ExportManager.html":{}}}],["go",{"_index":2187,"title":{},"body":{"classes/PrettySymbols.html":{},"interfaces/Window.html":{}}}],["graphic",{"_index":1352,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["graphicslibrary",{"_index":1345,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["greater",{"_index":3130,"title":{},"body":{"interfaces/Window.html":{}}}],["grid",{"_index":3595,"title":{},"body":{"changelog.html":{}}}],["group",{"_index":85,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["groupnotselected",{"_index":848,"title":{},"body":{"classes/ColorOptions.html":{}}}],["gui",{"_index":993,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/URLOptionsManager.html":{},"coverage.html":{}}}],["gui.remove",{"_index":1093,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["guidelines",{"_index":3256,"title":{},"body":{"changelog.html":{}}}],["guiparameters",{"_index":1001,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["h",{"_index":1486,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["h).cross(b_last",{"_index":1506,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["h2",{"_index":1472,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["half_h",{"_index":1473,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["half_h).cross(b_middle",{"_index":1496,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["hand",{"_index":2916,"title":{},"body":{"classes/VRManager.html":{}}}],["handle",{"_index":3372,"title":{},"body":{"changelog.html":{}}}],["handling",{"_index":3300,"title":{},"body":{"changelog.html":{}}}],["hash",{"_index":3751,"title":{},"body":{"changelog.html":{}}}],["hasposition",{"_index":383,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["helper",{"_index":888,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["helper.ts",{"_index":887,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"coverage.html":{}}}],["helper.ts:13",{"_index":899,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:14",{"_index":2221,"title":{},"body":{"classes/RKHelper.html":{}}}],["helper.ts:24",{"_index":2227,"title":{},"body":{"classes/RKHelper.html":{}}}],["helper.ts:25",{"_index":928,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:35",{"_index":938,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:44",{"_index":2216,"title":{},"body":{"classes/RKHelper.html":{}}}],["helper.ts:46",{"_index":936,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:65",{"_index":917,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:81",{"_index":907,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helpers/active",{"_index":2463,"title":{},"body":{"classes/SelectionManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["helpers/constants",{"_index":562,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["helpers/coordinate",{"_index":1993,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["helpers/file",{"_index":1414,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{}}}],["helpers/info",{"_index":1381,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["helpers/labels",{"_index":2980,"title":{},"body":{"interfaces/Window.html":{}}}],["helpers/pretty",{"_index":774,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{},"classes/SelectionManager.html":{}}}],["helpers/rk",{"_index":1992,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["here",{"_index":932,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["hex",{"_index":630,"title":{},"body":{"classes/ColorManager.html":{}}}],["hide",{"_index":511,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["hideidswithurloption",{"_index":2799,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["hideidswithurloption(urloptionwithids",{"_index":2817,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["hidewidgets",{"_index":2805,"title":{},"body":{"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["hidewidgetsoptions",{"_index":2864,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["hiding",{"_index":3687,"title":{},"body":{"changelog.html":{}}}],["hierarchical",{"_index":1829,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["hierarchy",{"_index":3054,"title":{},"body":{"interfaces/Window.html":{}}}],["high",{"_index":2316,"title":{},"body":{"classes/RendererManager.html":{}}}],["higher",{"_index":1831,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["highlight",{"_index":2444,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highlighting",{"_index":1287,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["highlightobject",{"_index":2414,"title":{},"body":{"classes/SelectionManager.html":{}}}],["highlightobject(uuid",{"_index":2442,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highly",{"_index":3526,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["highvalue",{"_index":1750,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{}}}],["hit",{"_index":389,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["hitlength",{"_index":2111,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitlines",{"_index":3591,"title":{},"body":{"changelog.html":{}}}],["hits",{"_index":388,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["hitsparams",{"_index":1946,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparams.length",{"_index":2103,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparams.pos",{"_index":2102,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparams[0",{"_index":2106,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparamsclone",{"_index":2098,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitspositions",{"_index":411,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["hitspositions.filter((hitposition",{"_index":414,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["hitstoboxes",{"_index":1899,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitstoboxes(pointpos",{"_index":1973,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitstolines",{"_index":1900,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitstolines(pointpos",{"_index":1980,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitstopoints",{"_index":1901,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitstopoints(pointpos",{"_index":1982,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["home",{"_index":3721,"title":{},"body":{"changelog.html":{}}}],["homepage",{"_index":3872,"title":{},"body":{"properties.html":{}}}],["hovered",{"_index":1288,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["hovering",{"_index":2423,"title":{},"body":{"classes/SelectionManager.html":{}}}],["html",{"_index":3169,"title":{},"body":{"interfaces/Window.html":{},"index.html":{}}}],["htmlcanvaselement",{"_index":2302,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["htmlelement",{"_index":2369,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["http://github.com/hsf/phoenix/tree/master/packages/phoenix",{"_index":3873,"title":{},"body":{"properties.html":{}}}],["httprequest",{"_index":2969,"title":{},"body":{"interfaces/Window.html":{}}}],["httprequest(url",{"_index":3109,"title":{},"body":{"interfaces/Window.html":{}}}],["https://en.wikipedia.org/wiki/pseudorapidity",{"_index":933,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["https://github.com/hsf/phoenix/graphs/contributors",{"_index":3881,"title":{},"body":{"properties.html":{}}}],["https://github.com/root",{"_index":3118,"title":{},"body":{"interfaces/Window.html":{}}}],["icon",{"_index":1648,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"changelog.html":{}}}],["id",{"_index":868,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/RendererManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{}}}],["identifier",{"_index":3775,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":2374,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["ids",{"_index":2819,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["idstohide",{"_index":2877,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["idstohide.foreach((singleid",{"_index":2879,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["ig",{"_index":3638,"title":{},"body":{"changelog.html":{}}}],["ignore",{"_index":1743,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["ignored",{"_index":2422,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ignorelist",{"_index":2404,"title":{},"body":{"classes/SelectionManager.html":{}}}],["immersive",{"_index":81,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["implement",{"_index":2122,"title":{},"body":{"interfaces/PhoenixUI.html":{},"changelog.html":{}}}],["implementations",{"_index":3333,"title":{},"body":{"changelog.html":{}}}],["implementing",{"_index":1332,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["implements",{"_index":997,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["implicitly",{"_index":3767,"title":{},"body":{"changelog.html":{}}}],["import",{"_index":135,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"index.html":{}}}],["importmanager",{"_index":3814,"title":{},"body":{"coverage.html":{}}}],["imports",{"_index":3376,"title":{},"body":{"changelog.html":{}}}],["improve",{"_index":3266,"title":{},"body":{"changelog.html":{}}}],["improvement",{"_index":3520,"title":{},"body":{"changelog.html":{}}}],["improvements",{"_index":3490,"title":{},"body":{"changelog.html":{}}}],["improving",{"_index":3645,"title":{},"body":{"changelog.html":{}}}],["inbounds",{"_index":1544,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["include",{"_index":708,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixObjects.html":{},"index.html":{}}}],["included",{"_index":793,"title":{},"body":{"classes/ColorOptions.html":{},"index.html":{}}}],["including",{"_index":1407,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["increase",{"_index":3412,"title":{},"body":{"changelog.html":{}}}],["increases",{"_index":1608,"title":{},"body":{"classes/LoadingManager.html":{}}}],["independent",{"_index":3843,"title":{},"body":{"index.html":{},"properties.html":{}}}],["index",{"_index":16,"title":{"index.html":{}},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexincollection",{"_index":1342,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["indices",{"_index":2643,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["indices_array",{"_index":2644,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["infinity",{"_index":350,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["infologger",{"_index":1347,"title":{"classes/InfoLogger.html":{}},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["infologgerlist",{"_index":1558,"title":{},"body":{"classes/InfoLogger.html":{}}}],["information",{"_index":1566,"title":{},"body":{"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["inherited",{"_index":86,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["init",{"_index":2261,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["init(camera",{"_index":2448,"title":{},"body":{"classes/SelectionManager.html":{}}}],["init(configuration",{"_index":2998,"title":{},"body":{"interfaces/Window.html":{}}}],["init(elementid",{"_index":2288,"title":{},"body":{"classes/RendererManager.html":{}}}],["initchargecoloroptions",{"_index":695,"title":{},"body":{"classes/ColorOptions.html":{}}}],["initcolorbyoptions",{"_index":696,"title":{},"body":{"classes/ColorOptions.html":{}}}],["initial",{"_index":203,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["initialize",{"_index":714,"title":{},"body":{"classes/ColorOptions.html":{},"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["initialized",{"_index":2425,"title":{},"body":{"classes/SelectionManager.html":{}}}],["initializes",{"_index":3171,"title":{},"body":{"interfaces/Window.html":{}}}],["initializing",{"_index":2271,"title":{},"body":{"classes/RendererManager.html":{}}}],["initially",{"_index":3059,"title":{},"body":{"interfaces/Window.html":{}}}],["initiallyvisible",{"_index":3058,"title":{},"body":{"interfaces/Window.html":{}}}],["initmomcoloroptions",{"_index":697,"title":{},"body":{"classes/ColorOptions.html":{}}}],["initrenderer",{"_index":2262,"title":{},"body":{"classes/RendererManager.html":{}}}],["initrenderer(elementid",{"_index":2290,"title":{},"body":{"classes/RendererManager.html":{}}}],["initxr(xrsessiontype",{"_index":3014,"title":{},"body":{"interfaces/Window.html":{}}}],["input",{"_index":1425,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["inputfile",{"_index":3922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.accept",{"_index":3925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.click",{"_index":3936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.onchange",{"_index":3926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.remove",{"_index":3934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.type",{"_index":3924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inside",{"_index":627,"title":{},"body":{"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["install",{"_index":3846,"title":{},"body":{"index.html":{}}}],["instance",{"_index":733,"title":{},"body":{"classes/ColorOptions.html":{},"classes/LoadingManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["instanceof",{"_index":351,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["instantiate",{"_index":1415,"title":{},"body":{"classes/ExportManager.html":{}}}],["instead",{"_index":1727,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["int",{"_index":2714,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["int32array(this.track_id",{"_index":2680,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["integrator",{"_index":1471,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["interface",{"_index":219,"title":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{}},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["interfaces",{"_index":221,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["intersected",{"_index":2453,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject",{"_index":2494,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.name",{"_index":2499,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.userdata",{"_index":2505,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.userdata[key",{"_index":2516,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject",{"_index":2415,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject(event",{"_index":2450,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects",{"_index":2452,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects.length",{"_index":2537,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects[0].object",{"_index":2540,"title":{},"body":{"classes/SelectionManager.html":{}}}],["interval",{"_index":2949,"title":{},"body":{"classes/VRManager.html":{}}}],["intervalid",{"_index":2950,"title":{},"body":{"classes/VRManager.html":{}}}],["intitialize",{"_index":2988,"title":{},"body":{"interfaces/Window.html":{}}}],["introduce",{"_index":3598,"title":{},"body":{"changelog.html":{}}}],["invisible",{"_index":395,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["io",{"_index":3283,"title":{},"body":{"changelog.html":{}}}],["ischecked",{"_index":1821,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["isfixedoverlay",{"_index":2263,"title":{},"body":{"classes/RendererManager.html":{}}}],["isinit",{"_index":2405,"title":{},"body":{"classes/SelectionManager.html":{}}}],["issimplearray",{"_index":2100,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["issue",{"_index":2033,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["issues",{"_index":3419,"title":{},"body":{"changelog.html":{}}}],["istracksmaterial",{"_index":2634,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["it's",{"_index":2193,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["item",{"_index":1597,"title":{},"body":{"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"miscellaneous/variables.html":{}}}],["itemloaded",{"_index":1591,"title":{},"body":{"classes/LoadingManager.html":{}}}],["itemloaded(id",{"_index":1609,"title":{},"body":{"classes/LoadingManager.html":{}}}],["items",{"_index":437,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/LoadingManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["itself",{"_index":1703,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{}}}],["j",{"_index":2114,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jasmine",{"_index":3692,"title":{},"body":{"changelog.html":{}}}],["jet",{"_index":365,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["jetparams",{"_index":1949,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams.color",{"_index":2088,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams.coner",{"_index":2082,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams.energy",{"_index":2071,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams.et",{"_index":2072,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams.eta",{"_index":2064,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams.phi",{"_index":2065,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams.theta",{"_index":2067,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams.uuid",{"_index":2096,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jets",{"_index":3357,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["jive",{"_index":3405,"title":{},"body":{"changelog.html":{}}}],["jivexml",{"_index":2809,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["jivexmlloader",{"_index":2821,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{}}}],["jixexml",{"_index":3568,"title":{},"body":{"changelog.html":{}}}],["join('\\n",{"_index":2757,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["js",{"_index":3833,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":1697,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["json.parse(input",{"_index":3080,"title":{},"body":{"interfaces/Window.html":{}}}],["json.parse(json",{"_index":1763,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["json.stringify(jsonresult",{"_index":1432,"title":{},"body":{"classes/ExportManager.html":{}}}],["json.stringify(state",{"_index":2607,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata",{"_index":2609,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay",{"_index":2613,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']?.['cameraposition",{"_index":2615,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']?.['openingclippingangle",{"_index":2619,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']?.['startclippingangle",{"_index":2617,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']['openingclippingangle",{"_index":2627,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']['startclippingangle",{"_index":2625,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['phoenixmenu",{"_index":2610,"title":{},"body":{"classes/StateManager.html":{}}}],["jsonobject",{"_index":1761,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['children",{"_index":1780,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['childrenactive",{"_index":1764,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['configs",{"_index":1768,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['togglestate",{"_index":1765,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonresult",{"_index":1430,"title":{},"body":{"classes/ExportManager.html":{}}}],["jsroot",{"_index":2970,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{},"dependencies.html":{}}}],["jsroot/geom",{"_index":2973,"title":{},"body":{"interfaces/Window.html":{}}}],["jsroot/io",{"_index":2975,"title":{},"body":{"interfaces/Window.html":{}}}],["jsrooteventloader",{"_index":3289,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["jsrootsettings",{"_index":2972,"title":{},"body":{"interfaces/Window.html":{}}}],["jsrootsettings.usestamp",{"_index":3120,"title":{},"body":{"interfaces/Window.html":{}}}],["jszip",{"_index":3831,"title":{},"body":{"dependencies.html":{}}}],["k1",{"_index":1483,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k1.clone().sub(k2).sub(k3).add(k4",{"_index":1510,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k2",{"_index":1476,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k3",{"_index":1477,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k4",{"_index":1478,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k4).lpnorm",{"_index":1511,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["keep",{"_index":3602,"title":{},"body":{"changelog.html":{}}}],["key",{"_index":710,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["keyboard",{"_index":3012,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["keys",{"_index":777,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"miscellaneous/enumerations.html":{}}}],["kutta",{"_index":1456,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["kutta.ts",{"_index":1449,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["kutta.ts:12",{"_index":2358,"title":{},"body":{"classes/RungeKutta.html":{}}}],["kutta.ts:126",{"_index":2357,"title":{},"body":{"classes/RungeKutta.html":{}}}],["kutta.ts:168",{"_index":2550,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:170",{"_index":2546,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:172",{"_index":2548,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:174",{"_index":2551,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:176",{"_index":2554,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:178",{"_index":2552,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:180",{"_index":2547,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:182",{"_index":2549,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:192",{"_index":1452,"title":{},"body":{"classes/Field.html":{}}}],["label",{"_index":785,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["labelfolderreference",{"_index":1248,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["labelid",{"_index":1058,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{}}}],["labelitem",{"_index":1230,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["labelitem.add(this.guiparameters[labelid",{"_index":1246,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["labelitemfolder",{"_index":1072,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["labelnode",{"_index":1814,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["labelnode.addconfig('button",{"_index":1880,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["labelnode.addconfig('color",{"_index":1879,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["labelnode?.remove",{"_index":1884,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["labelobject",{"_index":1235,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["labels",{"_index":1027,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["labelsfolder",{"_index":1002,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["labelsobject",{"_index":3205,"title":{},"body":{"interfaces/Window.html":{}}}],["labelsobject[eventdatatype",{"_index":3207,"title":{},"body":{"interfaces/Window.html":{}}}],["labelsobject[eventdatatype][collection",{"_index":3208,"title":{},"body":{"interfaces/Window.html":{}}}],["labelsobject[eventdatatype][collection][index",{"_index":3204,"title":{},"body":{"interfaces/Window.html":{}}}],["labelssizemenu",{"_index":1221,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["labelssizemenu.onfinishchange(onsizechange",{"_index":1223,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["last",{"_index":149,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["later",{"_index":1394,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["latest",{"_index":3651,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":587,"title":{},"body":{"classes/CMSObjects.html":{},"classes/URLOptionsManager.html":{}}}],["length",{"_index":1543,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["level",{"_index":1674,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["lhcb",{"_index":3307,"title":{},"body":{"changelog.html":{}}}],["lib/models/cut.model",{"_index":1077,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["lib/types/configuration",{"_index":2825,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["library",{"_index":1353,"title":{},"body":{"interfaces/EventDataLoader.html":{},"changelog.html":{}}}],["license",{"_index":3875,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":3448,"title":{},"body":{"changelog.html":{}}}],["limits",{"_index":3558,"title":{},"body":{"changelog.html":{}}}],["line",{"_index":1945,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["line(geometry",{"_index":2944,"title":{},"body":{"classes/VRManager.html":{}}}],["line(linegeometry",{"_index":2053,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["line.name",{"_index":2945,"title":{},"body":{"classes/VRManager.html":{}}}],["line.scale.z",{"_index":2946,"title":{},"body":{"classes/VRManager.html":{}}}],["linebasicmaterial",{"_index":558,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["lineboxobject",{"_index":607,"title":{},"body":{"classes/CMSObjects.html":{}}}],["linedashedmaterial",{"_index":1990,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["linegeometry",{"_index":2049,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["linehit",{"_index":340,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["linehits",{"_index":3610,"title":{},"body":{"changelog.html":{}}}],["linematerial",{"_index":2051,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["lineobject",{"_index":2052,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["lineobject.name",{"_index":2054,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["lines",{"_index":602,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["linesegments",{"_index":560,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["linewidth",{"_index":1999,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["link",{"_index":563,"title":{},"body":{"classes/CMSObjects.html":{},"changelog.html":{}}}],["linkedtrackcollection",{"_index":669,"title":{},"body":{"classes/ColorManager.html":{}}}],["linkedtracks",{"_index":670,"title":{},"body":{"classes/ColorManager.html":{}}}],["linkedtracks.foreach((trackindex",{"_index":677,"title":{},"body":{"classes/ColorManager.html":{}}}],["linting",{"_index":3418,"title":{},"body":{"changelog.html":{}}}],["list",{"_index":1367,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["listen",{"_index":1102,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/LoadingManager.html":{}}}],["listener",{"_index":1603,"title":{},"body":{"classes/LoadingManager.html":{},"classes/VRManager.html":{}}}],["listentodisplayedeventchange(callback",{"_index":3150,"title":{},"body":{"interfaces/Window.html":{}}}],["listentoloadedeventschange(callback",{"_index":3152,"title":{},"body":{"interfaces/Window.html":{}}}],["literal",{"_index":233,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":864,"title":{},"body":{"interfaces/Configuration.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/ScriptLoader.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["loadable",{"_index":1582,"title":{},"body":{"classes/LoadingManager.html":{},"interfaces/Window.html":{}}}],["loadconfig",{"_index":2840,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loaded",{"_index":1398,"title":{},"body":{"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["loader",{"_index":872,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["loader.geteventdata",{"_index":2856,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loader.process(res",{"_index":2855,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loader.ts",{"_index":1331,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ScriptLoader.html":{},"coverage.html":{}}}],["loader.ts:15",{"_index":2370,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loader.ts:17",{"_index":1348,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:29",{"_index":1374,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:35",{"_index":1365,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:42",{"_index":1362,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:48",{"_index":1370,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:57",{"_index":1343,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:67",{"_index":1379,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loaders",{"_index":1333,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loaders/event",{"_index":880,"title":{},"body":{"interfaces/Configuration.html":{}}}],["loaders/jivexml",{"_index":2822,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loaders/objects/tracks",{"_index":252,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["loaders/phoenix",{"_index":2824,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loadevent(eventkey",{"_index":3042,"title":{},"body":{"interfaces/Window.html":{}}}],["loadeventfolderstate",{"_index":1800,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["loadfile",{"_index":2594,"title":{},"body":{"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loadfile((data",{"_index":2598,"title":{},"body":{"classes/StateManager.html":{}}}],["loadgltfgeometry",{"_index":3098,"title":{},"body":{"interfaces/Window.html":{}}}],["loading",{"_index":874,"title":{},"body":{"interfaces/Configuration.html":{},"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["loadingmanager",{"_index":1580,"title":{"classes/LoadingManager.html":{}},"body":{"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["loadingmanager.addloadableitem('single_script",{"_index":2379,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadingmanager.instance",{"_index":1616,"title":{},"body":{"classes/LoadingManager.html":{}}}],["loadingmanager.itemloaded('single_script",{"_index":2394,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadjsongeometry",{"_index":3103,"title":{},"body":{"interfaces/Window.html":{}}}],["loadjsrootscripts",{"_index":3286,"title":{},"body":{"changelog.html":{}}}],["loadlabels",{"_index":1218,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["loadobjgeometry",{"_index":3062,"title":{},"body":{"interfaces/Window.html":{}}}],["loadrootgeometry",{"_index":3116,"title":{},"body":{"interfaces/Window.html":{}}}],["loadrootjsongeometry",{"_index":3107,"title":{},"body":{"interfaces/Window.html":{}}}],["loads",{"_index":3021,"title":{},"body":{"interfaces/Window.html":{}}}],["loadsceneconfiguration(sceneconfiguration",{"_index":3139,"title":{},"body":{"interfaces/Window.html":{}}}],["loadscript",{"_index":2365,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadscript(scripturl",{"_index":2366,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadstatefromjson",{"_index":1658,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["loadstatefromjson(json",{"_index":1695,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["local",{"_index":465,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["localstorage",{"_index":3914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["localstorage.getitem(item",{"_index":3911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["localstorage.setitem(item",{"_index":3915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["location",{"_index":2224,"title":{},"body":{"classes/RKHelper.html":{}}}],["log",{"_index":1571,"title":{},"body":{"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["logger",{"_index":1359,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["logger.ts",{"_index":1557,"title":{},"body":{"classes/InfoLogger.html":{},"coverage.html":{}}}],["logger.ts:15",{"_index":1569,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:26",{"_index":1572,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:6",{"_index":1561,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:8",{"_index":1563,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logging",{"_index":1360,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/SelectionManager.html":{}}}],["logo",{"_index":2866,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["logs",{"_index":1562,"title":{},"body":{"classes/InfoLogger.html":{},"interfaces/Window.html":{}}}],["long",{"_index":2194,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["longer",{"_index":3447,"title":{},"body":{"changelog.html":{}}}],["look",{"_index":3185,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["lookatobject(uuid",{"_index":3186,"title":{},"body":{"interfaces/Window.html":{}}}],["loop",{"_index":2320,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["lower",{"_index":3323,"title":{},"body":{"changelog.html":{}}}],["lowres",{"_index":1026,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["m",{"_index":2728,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["made",{"_index":526,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["main",{"_index":1273,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{}}}],["mainlogo",{"_index":2865,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["mainrenderer",{"_index":2252,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.domelement.id",{"_index":2339,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.setpixelratio(window.devicepixelratio",{"_index":2338,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.setsize(rendererwidth",{"_index":2337,"title":{},"body":{"classes/RendererManager.html":{}}}],["major",{"_index":3763,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":396,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["making",{"_index":394,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["manage",{"_index":3471,"title":{},"body":{"changelog.html":{}}}],["manager",{"_index":11,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["manager.ts",{"_index":8,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["manager.ts:10",{"_index":2274,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:102",{"_index":2457,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:104",{"_index":2581,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:105",{"_index":1607,"title":{},"body":{"classes/LoadingManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:109",{"_index":3213,"title":{},"body":{"classes/XRManager.html":{}}}],["manager.ts:11",{"_index":1595,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:111",{"_index":2440,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:112",{"_index":1615,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:119",{"_index":2306,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:12",{"_index":1278,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:127",{"_index":2284,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:128",{"_index":2437,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:129",{"_index":2812,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:135",{"_index":2285,"title":{},"body":{"classes/RendererManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:14",{"_index":1276,"title":{},"body":{"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:143",{"_index":2286,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:145",{"_index":2431,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:147",{"_index":2585,"title":{},"body":{"classes/StateManager.html":{},"classes/URLOptionsManager.html":{}}}],["manager.ts:149",{"_index":2902,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:15",{"_index":82,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:153",{"_index":2278,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:155",{"_index":2593,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:158",{"_index":2426,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:16",{"_index":1285,"title":{},"body":{"classes/EffectsManager.html":{},"classes/LoadingManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:163",{"_index":2293,"title":{},"body":{"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:17",{"_index":60,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:171",{"_index":2589,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:172",{"_index":2818,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:175",{"_index":2309,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:179",{"_index":2580,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:18",{"_index":1281,"title":{},"body":{"classes/EffectsManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:187",{"_index":2280,"title":{},"body":{"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:188",{"_index":2815,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:19",{"_index":74,"title":{},"body":{"classes/ARManager.html":{},"classes/LoadingManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:195",{"_index":2587,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:20",{"_index":639,"title":{},"body":{"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:200",{"_index":2299,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:207",{"_index":2429,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:21",{"_index":2894,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:210",{"_index":2283,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:218",{"_index":2451,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:22",{"_index":48,"title":{},"body":{"classes/ARManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:220",{"_index":2291,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:228",{"_index":2297,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:23",{"_index":1270,"title":{},"body":{"classes/EffectsManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:24",{"_index":2420,"title":{},"body":{"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:241",{"_index":2443,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:26",{"_index":2435,"title":{},"body":{"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:27",{"_index":1390,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:28",{"_index":2436,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:29",{"_index":2573,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:30",{"_index":2419,"title":{},"body":{"classes/SelectionManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:32",{"_index":2421,"title":{},"body":{"classes/SelectionManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:34",{"_index":2289,"title":{},"body":{"classes/RendererManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:36",{"_index":2432,"title":{},"body":{"classes/SelectionManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:37",{"_index":1600,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:38",{"_index":625,"title":{},"body":{"classes/ColorManager.html":{},"classes/SelectionManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:41",{"_index":2424,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:42",{"_index":2813,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:43",{"_index":2418,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:46",{"_index":1610,"title":{},"body":{"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:48",{"_index":1294,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:52",{"_index":1406,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:53",{"_index":3215,"title":{},"body":{"classes/XRManager.html":{}}}],["manager.ts:54",{"_index":2591,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:55",{"_index":633,"title":{},"body":{"classes/ColorManager.html":{}}}],["manager.ts:58",{"_index":2808,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:6",{"_index":1594,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:61",{"_index":1292,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:64",{"_index":1613,"title":{},"body":{"classes/LoadingManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:65",{"_index":2449,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:66",{"_index":1401,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:69",{"_index":1286,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:7",{"_index":622,"title":{},"body":{"classes/ColorManager.html":{}}}],["manager.ts:72",{"_index":647,"title":{},"body":{"classes/ColorManager.html":{}}}],["manager.ts:75",{"_index":118,"title":{},"body":{"classes/ARManager.html":{}}}],["manager.ts:77",{"_index":2905,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:78",{"_index":3214,"title":{},"body":{"classes/XRManager.html":{}}}],["manager.ts:8",{"_index":2273,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:80",{"_index":2582,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:83",{"_index":2455,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:84",{"_index":1602,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:85",{"_index":1404,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:88",{"_index":1296,"title":{},"body":{"classes/EffectsManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:9",{"_index":1598,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:93",{"_index":1605,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:94",{"_index":2441,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:97",{"_index":1298,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:99",{"_index":3212,"title":{},"body":{"classes/XRManager.html":{}}}],["manager/animations",{"_index":222,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["manager/color",{"_index":615,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["manager/controls",{"_index":3809,"title":{},"body":{"coverage.html":{}}}],["manager/dat",{"_index":992,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"coverage.html":{}}}],["manager/effects",{"_index":1254,"title":{},"body":{"classes/EffectsManager.html":{},"coverage.html":{}}}],["manager/export",{"_index":1383,"title":{},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["manager/import",{"_index":3813,"title":{},"body":{"coverage.html":{}}}],["manager/index.ts",{"_index":3815,"title":{},"body":{"coverage.html":{}}}],["manager/phoenix",{"_index":882,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["manager/renderer",{"_index":2250,"title":{},"body":{"classes/RendererManager.html":{},"coverage.html":{}}}],["manager/scene",{"_index":1076,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"coverage.html":{}}}],["manager/selection",{"_index":2402,"title":{},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["manager/xr/ar",{"_index":7,"title":{},"body":{"classes/ARManager.html":{},"coverage.html":{}}}],["manager/xr/vr",{"_index":2882,"title":{},"body":{"classes/VRManager.html":{},"coverage.html":{}}}],["manager/xr/xr",{"_index":2978,"title":{},"body":{"interfaces/Window.html":{},"classes/XRManager.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["managers/loading",{"_index":2378,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["managers/state",{"_index":2976,"title":{},"body":{"interfaces/Window.html":{}}}],["managers/three",{"_index":1380,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["managers/ui",{"_index":881,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["managers/url",{"_index":2977,"title":{},"body":{"interfaces/Window.html":{}}}],["manages",{"_index":1271,"title":{},"body":{"classes/EffectsManager.html":{},"interfaces/Window.html":{}}}],["managing",{"_index":253,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["manipulate",{"_index":1358,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["manual",{"_index":1737,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["manually",{"_index":370,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["many",{"_index":3488,"title":{},"body":{"changelog.html":{}}}],["map((key",{"_index":2513,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mat4",{"_index":2727,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["match",{"_index":3439,"title":{},"body":{"changelog.html":{}}}],["matching",{"_index":187,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":1112,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{}}}],["material.opacity",{"_index":2091,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["material?.color",{"_index":1113,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["math.abs(1",{"_index":843,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PrettySymbols.html":{}}}],["math.abs(position.z",{"_index":2119,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.abs(returnvec.x",{"_index":1512,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.abs(returnvec.y",{"_index":1513,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.abs(returnvec.z",{"_index":1514,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.atan(math.pow(math.e",{"_index":941,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["math.cos(phi",{"_index":2077,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.cos(theta",{"_index":2081,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.log(math.tan(theta",{"_index":942,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["math.pi",{"_index":303,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{}}}],["math.pow(fh",{"_index":1525,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.sign(1",{"_index":823,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PrettySymbols.html":{}}}],["math.sin(jetparams.coner",{"_index":2083,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.sin(phi",{"_index":2075,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.sin(theta",{"_index":2079,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.sqrt(cylradius2",{"_index":2118,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.sqrt(maxr2",{"_index":2117,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.sqrt(pos.x",{"_index":2230,"title":{},"body":{"classes/RKHelper.html":{}}}],["max",{"_index":739,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["maxcut",{"_index":1206,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["maxcut.onchange((value",{"_index":1208,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["maxentries",{"_index":1559,"title":{},"body":{"classes/InfoLogger.html":{}}}],["maximum",{"_index":755,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/PhoenixObjects.html":{}}}],["maxpositionx",{"_index":1003,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["maxpositiony",{"_index":1004,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["maxpositionz",{"_index":1005,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["maxr2",{"_index":1918,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["maxstepsize",{"_index":2542,"title":{},"body":{"classes/State.html":{}}}],["maxvalue",{"_index":973,"title":{},"body":{"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{}}}],["maxz",{"_index":1919,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["menu",{"_index":735,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["menu's",{"_index":1051,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["menu.onchange((value",{"_index":1167,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["menu/config",{"_index":3897,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["menu/phoenix",{"_index":776,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"coverage.html":{}}}],["menunodename",{"_index":3052,"title":{},"body":{"interfaces/Window.html":{}}}],["menus",{"_index":1357,"title":{},"body":{"interfaces/EventDataLoader.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["menusubfolder",{"_index":1808,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["mergebuffergeometries",{"_index":1994,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh",{"_index":243,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["mesh(geometry",{"_index":2043,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh(particlegeometry",{"_index":488,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["mesh(tracksmesh",{"_index":2021,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.name",{"_index":2095,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.position.copy(translation",{"_index":2092,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.quaternion.copy(quaternion",{"_index":2093,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.userdata",{"_index":2094,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.uuid",{"_index":2097,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["meshbasicmaterial",{"_index":242,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["meshphongmaterial",{"_index":650,"title":{},"body":{"classes/ColorManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{}}}],["meshtoonmaterial",{"_index":1986,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["met",{"_index":1953,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["metadata",{"_index":1371,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["method",{"_index":3555,"title":{},"body":{"changelog.html":{}}}],["methods",{"_index":33,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["metparams",{"_index":1952,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mev",{"_index":2239,"title":{},"body":{"classes/RKHelper.html":{}}}],["mid",{"_index":757,"title":{},"body":{"classes/ColorOptions.html":{}}}],["min",{"_index":738,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{}}}],["min/max",{"_index":742,"title":{},"body":{"classes/ColorOptions.html":{}}}],["mincut",{"_index":1198,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["mincut.onchange((value",{"_index":1204,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["minimum",{"_index":754,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Cut.html":{}}}],["minor",{"_index":3689,"title":{},"body":{"changelog.html":{}}}],["minormax",{"_index":758,"title":{},"body":{"classes/ColorOptions.html":{}}}],["minvalue",{"_index":974,"title":{},"body":{"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{}}}],["misc",{"_index":3500,"title":{},"body":{"changelog.html":{}}}],["miscellaneous",{"_index":3835,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":3429,"title":{},"body":{"changelog.html":{}}}],["missingenergy",{"_index":3909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mm",{"_index":2238,"title":{},"body":{"classes/RKHelper.html":{}}}],["mock",{"_index":3920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mocking",{"_index":3938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":128,"title":{},"body":{"classes/ARManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["model",{"_index":2826,"title":{},"body":{"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["models/preset",{"_index":878,"title":{},"body":{"interfaces/Configuration.html":{}}}],["modelviewmatrix",{"_index":2730,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["modular",{"_index":3840,"title":{},"body":{"index.html":{}}}],["module",{"_index":3850,"title":{},"body":{"index.html":{}}}],["modules",{"_index":3868,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["mom",{"_index":779,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PrettySymbols.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["momcolors",{"_index":688,"title":{},"body":{"classes/ColorOptions.html":{}}}],["momentum",{"_index":719,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["momvalue",{"_index":827,"title":{},"body":{"classes/ColorOptions.html":{}}}],["momvalue.color",{"_index":836,"title":{},"body":{"classes/ColorOptions.html":{}}}],["more",{"_index":3600,"title":{},"body":{"changelog.html":{}}}],["mouse",{"_index":2427,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.x",{"_index":2528,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.y",{"_index":2531,"title":{},"body":{"classes/SelectionManager.html":{}}}],["move",{"_index":286,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["moveindirection",{"_index":2890,"title":{},"body":{"classes/VRManager.html":{}}}],["moveindirection(direction",{"_index":2900,"title":{},"body":{"classes/VRManager.html":{}}}],["movement",{"_index":2893,"title":{},"body":{"classes/VRManager.html":{}}}],["moving",{"_index":377,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{}}}],["mss",{"_index":1541,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multidimensional",{"_index":521,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["multiple",{"_index":1375,"title":{},"body":{"interfaces/EventDataLoader.html":{},"changelog.html":{}}}],["multiplyscalar(fh",{"_index":1534,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multiplyscalar(fh2",{"_index":1529,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multiplyscalar(qop",{"_index":1499,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multiplyscalar(updatedscale.x",{"_index":381,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["multply",{"_index":1936,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["muon",{"_index":554,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber",{"_index":601,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(boxobject",{"_index":610,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(lineboxobject",{"_index":611,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams",{"_index":556,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams.color",{"_index":594,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams.uuid",{"_index":612,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams[face",{"_index":569,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchambers",{"_index":3908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":52,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["name('color",{"_index":1124,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('depth",{"_index":1170,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('load",{"_index":1227,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('max",{"_index":1207,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('min",{"_index":1202,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('opacity",{"_index":1129,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('random",{"_index":1194,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('reset",{"_index":1197,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('save",{"_index":1226,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('scale",{"_index":1138,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('show",{"_index":1101,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('size",{"_index":1222,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('wireframe",{"_index":1109,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('x",{"_index":1144,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('y",{"_index":1148,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('z",{"_index":1151,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('çolor",{"_index":1240,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name.lastindexof",{"_index":1834,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["name.split('>').foreach((nodename",{"_index":1791,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["name.substring(namestart",{"_index":1836,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["named",{"_index":1596,"title":{},"body":{"classes/LoadingManager.html":{}}}],["names",{"_index":1832,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["namespace",{"_index":3606,"title":{},"body":{"changelog.html":{}}}],["namestart",{"_index":1833,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["native",{"_index":924,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["navigator",{"_index":3220,"title":{},"body":{"classes/XRManager.html":{}}}],["ndof",{"_index":2170,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["near",{"_index":78,"title":{},"body":{"classes/ARManager.html":{}}}],["necessary",{"_index":921,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["need",{"_index":371,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["needed",{"_index":2195,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["needing",{"_index":3445,"title":{},"body":{"changelog.html":{}}}],["new",{"_index":213,"title":{},"body":{"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newcolorbyoption",{"_index":808,"title":{},"body":{"classes/ColorOptions.html":{}}}],["newcolorbyoption?.apply",{"_index":811,"title":{},"body":{"classes/ColorOptions.html":{}}}],["newcolorbyoption?.key",{"_index":810,"title":{},"body":{"classes/ColorOptions.html":{}}}],["newvalue",{"_index":1132,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["next",{"_index":2639,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["next_track_id",{"_index":2640,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["nextp",{"_index":2744,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["nextpos",{"_index":2736,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["nextpos.w",{"_index":2746,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["nextpos.xy",{"_index":2745,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["ng",{"_index":3267,"title":{},"body":{"changelog.html":{}}}],["node",{"_index":736,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["node.ts",{"_index":1643,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"coverage.html":{}}}],["node.ts:10",{"_index":1671,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:105",{"_index":1705,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:115",{"_index":1682,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:12",{"_index":1675,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:129",{"_index":1702,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:14",{"_index":1677,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:149",{"_index":1685,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:16",{"_index":1665,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:173",{"_index":1694,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:18",{"_index":1670,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:194",{"_index":1696,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:20",{"_index":1673,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:22",{"_index":1676,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:240",{"_index":1688,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:258",{"_index":1693,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:27",{"_index":1667,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:30",{"_index":1666,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:32",{"_index":1663,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:66",{"_index":1679,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:8",{"_index":1672,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:83",{"_index":1700,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:92",{"_index":1698,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild",{"_index":1781,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.loadstatefromjson(childstate",{"_index":1787,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.name",{"_index":1783,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.nodelevel",{"_index":1785,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig",{"_index":1769,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig.label",{"_index":1773,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig.type",{"_index":1771,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig[prop",{"_index":1776,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodefound",{"_index":1788,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodejs.timeout",{"_index":2951,"title":{},"body":{"classes/VRManager.html":{}}}],["nodelevel",{"_index":1649,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodename",{"_index":1792,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodename.trim",{"_index":1793,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodes",{"_index":1668,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["none",{"_index":865,"title":{},"body":{"interfaces/Configuration.html":{},"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["normal",{"_index":1283,"title":{},"body":{"classes/EffectsManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["normal.x",{"_index":2753,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["normal.xy",{"_index":2751,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["normalblending",{"_index":1301,"title":{},"body":{"classes/EffectsManager.html":{}}}],["normalize(curp",{"_index":2748,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["normalize(nextp",{"_index":2747,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["notable",{"_index":3250,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":139,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["notforced",{"_index":2154,"title":{},"body":{"classes/PresetView.html":{},"miscellaneous/enumerations.html":{}}}],["nothing",{"_index":950,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["now",{"_index":962,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["nowdisplayingevent",{"_index":2985,"title":{},"body":{"interfaces/Window.html":{}}}],["npm",{"_index":3847,"title":{},"body":{"index.html":{}}}],["null",{"_index":90,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":117,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["number'].includes",{"_index":2515,"title":{},"body":{"classes/SelectionManager.html":{}}}],["numofsteps",{"_index":299,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["obejct",{"_index":1967,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["obj",{"_index":1154,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/ExportManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["obj.eventobject",{"_index":409,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["obj.eventobject.name",{"_index":408,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["obj.eventobject.visible",{"_index":422,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["obj.obj",{"_index":1420,"title":{},"body":{"classes/ExportManager.html":{}}}],["object",{"_index":69,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["object's",{"_index":821,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["object(s",{"_index":642,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.assign",{"_index":599,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["object.defineproperties(this",{"_index":2771,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["object.entries(this.momcolors).foreach(([key",{"_index":826,"title":{},"body":{"classes/ColorOptions.html":{}}}],["object.entries(urloptionwithids).foreach(([urloption",{"_index":2876,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["object.keys(intersectedobject.userdata",{"_index":2512,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(paramscopy",{"_index":2189,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["object.keys(prettyparams",{"_index":2506,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(prettysymbols.symbols).find((symbol",{"_index":2181,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["object.keys(sceneconfiguration.eventdata",{"_index":3140,"title":{},"body":{"interfaces/Window.html":{}}}],["object.keys(this.progressitems).length",{"_index":1633,"title":{},"body":{"classes/LoadingManager.html":{}}}],["object.keys(trackscollections",{"_index":2236,"title":{},"body":{"classes/RKHelper.html":{}}}],["object.material.color.set(color",{"_index":655,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.material?.color",{"_index":653,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.name",{"_index":672,"title":{},"body":{"classes/ColorManager.html":{},"classes/ExportManager.html":{},"classes/PhoenixObjects.html":{}}}],["object.userdata",{"_index":671,"title":{},"body":{"classes/ColorManager.html":{},"classes/PhoenixObjects.html":{}}}],["object.values(collection.children",{"_index":661,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.values(this.progressitems).reduce",{"_index":1629,"title":{},"body":{"classes/LoadingManager.html":{}}}],["object3d",{"_index":246,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/SelectionManager.html":{}}}],["object['material",{"_index":674,"title":{},"body":{"classes/ColorManager.html":{}}}],["object['material']?.color",{"_index":663,"title":{},"body":{"classes/ColorManager.html":{}}}],["objectcolor",{"_index":2041,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objectname",{"_index":3115,"title":{},"body":{"interfaces/Window.html":{}}}],["objectparams",{"_index":761,"title":{},"body":{"classes/ColorOptions.html":{}}}],["objectparams?.charge",{"_index":825,"title":{},"body":{"classes/ColorOptions.html":{}}}],["objectparams?.dparams?.[4",{"_index":842,"title":{},"body":{"classes/ColorOptions.html":{}}}],["objectparams?.mom",{"_index":845,"title":{},"body":{"classes/ColorOptions.html":{}}}],["objects",{"_index":257,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["objects.traverse((object",{"_index":652,"title":{},"body":{"classes/ColorManager.html":{}}}],["objects.ts",{"_index":544,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["objects.ts:100",{"_index":1963,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:196",{"_index":1948,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:25",{"_index":552,"title":{},"body":{"classes/CMSObjects.html":{}}}],["objects.ts:255",{"_index":1939,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:340",{"_index":1983,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:372",{"_index":1981,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:40",{"_index":1966,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:405",{"_index":1975,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:448",{"_index":1930,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:488",{"_index":1920,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:525",{"_index":1911,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:548",{"_index":1903,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:586",{"_index":1959,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:632",{"_index":1955,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:688",{"_index":1971,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:714",{"_index":1951,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objectsgroup",{"_index":636,"title":{},"body":{"classes/ColorManager.html":{},"classes/SelectionManager.html":{}}}],["objectsgroup.getobjectbyproperty('uuid",{"_index":2541,"title":{},"body":{"classes/SelectionManager.html":{}}}],["objectstoanimatewithsphere",{"_index":327,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["objectstoanimatewithsphere.foreach((obj",{"_index":407,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["objectstoanimatewithsphere.push",{"_index":401,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["objecttype",{"_index":1439,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["objecttype.children",{"_index":1443,"title":{},"body":{"classes/ExportManager.html":{}}}],["objecttype.name",{"_index":1441,"title":{},"body":{"classes/ExportManager.html":{}}}],["objectuserdata",{"_index":638,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{}}}],["objexporter",{"_index":1409,"title":{},"body":{"classes/ExportManager.html":{}}}],["objfolder",{"_index":1119,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["objfolder.add(this.guiparameters[name",{"_index":1155,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["objfolder.remove",{"_index":1842,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["objfolder.togglestate",{"_index":1837,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["objs",{"_index":3444,"title":{},"body":{"changelog.html":{}}}],["observable",{"_index":202,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["observed",{"_index":195,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["olddrawrangecount",{"_index":358,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["older",{"_index":3551,"title":{},"body":{"changelog.html":{}}}],["omit",{"_index":1681,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["onanimationend",{"_index":284,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["onanimationsphereupdate",{"_index":405,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["onanimationsphereupdate(new",{"_index":438,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["onanimationstart",{"_index":317,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["once",{"_index":398,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["onchange",{"_index":788,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{}}}],["onchange((value",{"_index":1145,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["onclick",{"_index":791,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{}}}],["oncolorchange",{"_index":1211,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["oncontrollerselectend",{"_index":2888,"title":{},"body":{"classes/VRManager.html":{}}}],["oncontrollerselectstart",{"_index":2889,"title":{},"body":{"classes/VRManager.html":{}}}],["ondisplayedeventchange",{"_index":2984,"title":{},"body":{"interfaces/Window.html":{}}}],["ondocumentmousedown",{"_index":2406,"title":{},"body":{"classes/SelectionManager.html":{}}}],["one",{"_index":1162,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["onend",{"_index":314,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["oneventschange",{"_index":2983,"title":{},"body":{"interfaces/Window.html":{}}}],["onfileread",{"_index":3917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onfileread?.(e.target.result.tostring",{"_index":3933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onloadcallbacks",{"_index":1583,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onloadlabels",{"_index":1213,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["onlyselectedcolorbyoption",{"_index":698,"title":{},"body":{"classes/ColorOptions.html":{}}}],["onprogress",{"_index":1592,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onprogress(id",{"_index":1612,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onprogresscallbacks",{"_index":1584,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onremovelabel",{"_index":1056,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["onsavelabels",{"_index":1212,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["onsessionended",{"_index":28,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["onsessionstarted",{"_index":131,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["onsizechange",{"_index":1210,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["ontoggle",{"_index":1209,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{}}}],["ontouchdown",{"_index":2407,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ontouchmove",{"_index":2408,"title":{},"body":{"classes/SelectionManager.html":{}}}],["onupdate",{"_index":197,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["onupdate(callback",{"_index":207,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["onxrsessionended",{"_index":34,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["onxrsessionstarted",{"_index":36,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["onxrsessionstarted(session",{"_index":113,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["opacity",{"_index":486,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["opacity.onfinishchange((newvalue",{"_index":1130,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["openfile",{"_index":2974,"title":{},"body":{"interfaces/Window.html":{}}}],["openfile(url",{"_index":3121,"title":{},"body":{"interfaces/Window.html":{}}}],["opening",{"_index":2149,"title":{},"body":{"classes/PresetView.html":{},"classes/StateManager.html":{},"changelog.html":{}}}],["openingangle",{"_index":2618,"title":{},"body":{"classes/StateManager.html":{}}}],["openingclippingangle",{"_index":2561,"title":{},"body":{"classes/StateManager.html":{}}}],["operations",{"_index":13,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["optimal",{"_index":3717,"title":{},"body":{"changelog.html":{}}}],["optimize",{"_index":3527,"title":{},"body":{"changelog.html":{}}}],["option",{"_index":745,"title":{},"body":{"classes/ColorOptions.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["optional",{"_index":54,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["optionalfeatures",{"_index":164,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["optionally",{"_index":1940,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["options",{"_index":683,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["options.ts",{"_index":682,"title":{},"body":{"classes/ColorOptions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["options.ts:124",{"_index":764,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:150",{"_index":763,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:176",{"_index":746,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:193",{"_index":770,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:207",{"_index":765,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:246",{"_index":747,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:256",{"_index":750,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:26",{"_index":730,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:28",{"_index":731,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:282",{"_index":760,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:293",{"_index":748,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:30",{"_index":743,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:300",{"_index":766,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:32",{"_index":734,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:35",{"_index":725,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:57",{"_index":728,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:65",{"_index":741,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:74",{"_index":705,"title":{},"body":{"classes/ColorOptions.html":{}}}],["origin",{"_index":444,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["original",{"_index":376,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PrettySymbols.html":{}}}],["otherwise",{"_index":820,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"classes/RKHelper.html":{}}}],["out",{"_index":364,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["outdated",{"_index":143,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["outline",{"_index":1256,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["outlinepass",{"_index":1290,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["outlinepass.overlaymaterial.blending",{"_index":1323,"title":{},"body":{"classes/EffectsManager.html":{}}}],["outlinepass.visibleedgecolor.set(0xdf5330",{"_index":1325,"title":{},"body":{"classes/EffectsManager.html":{}}}],["outlinepass.visibleedgecolor.set(0xffff66",{"_index":1324,"title":{},"body":{"classes/EffectsManager.html":{}}}],["output",{"_index":1428,"title":{},"body":{"classes/ExportManager.html":{},"changelog.html":{}}}],["over",{"_index":331,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["overlay",{"_index":64,"title":{},"body":{"classes/ARManager.html":{},"classes/RendererManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["overlaycanvas",{"_index":2303,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["overlayed",{"_index":3168,"title":{},"body":{"interfaces/Window.html":{}}}],["overlayrenderer",{"_index":2253,"title":{},"body":{"classes/RendererManager.html":{}}}],["overlays",{"_index":67,"title":{},"body":{"classes/ARManager.html":{}}}],["overridden",{"_index":1744,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["override",{"_index":154,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["overview",{"_index":3869,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":2185,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["p",{"_index":1463,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["p.y",{"_index":2665,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["p.z",{"_index":2666,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["p[1",{"_index":2007,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["p[2",{"_index":2008,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["package",{"_index":3275,"title":{"dependencies.html":{},"properties.html":{}},"body":{"changelog.html":{},"index.html":{}}}],["packages",{"_index":3313,"title":{},"body":{"changelog.html":{}}}],["page",{"_index":2814,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["panel",{"_index":1567,"title":{},"body":{"classes/InfoLogger.html":{},"classes/SelectionManager.html":{}}}],["param",{"_index":153,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["parameter",{"_index":2069,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{}}}],["parameters",{"_index":50,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/typealiases.html":{}}}],["parameters.ts",{"_index":3896,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["parameterss",{"_index":2176,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parametrised",{"_index":3731,"title":{},"body":{"changelog.html":{}}}],["paramkey",{"_index":2188,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["params",{"_index":645,"title":{},"body":{"classes/ColorManager.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"changelog.html":{}}}],["paramscopy",{"_index":2186,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams",{"_index":2210,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[0",{"_index":2207,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[1",{"_index":2209,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[2",{"_index":2202,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[3",{"_index":2201,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[4",{"_index":2204,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy?.dparams",{"_index":2199,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy['pos",{"_index":2196,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy[paramkey",{"_index":2192,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy[symbol",{"_index":2191,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parent",{"_index":1650,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{}}}],["parentelement",{"_index":2368,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["parentelement.appendchild(scriptelement",{"_index":2397,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["parentnode",{"_index":1826,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["parentnode.addchild",{"_index":1835,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["parse",{"_index":1424,"title":{},"body":{"classes/ExportManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["parsefloat(objectparams?.dparams?.[4",{"_index":844,"title":{},"body":{"classes/ColorOptions.html":{}}}],["parsegltfgeometry",{"_index":3091,"title":{},"body":{"interfaces/Window.html":{}}}],["parseint(objectparams?.dparams?.[4",{"_index":824,"title":{},"body":{"classes/ColorOptions.html":{}}}],["parseint(track.color",{"_index":2013,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["parseobjgeometry",{"_index":3070,"title":{},"body":{"interfaces/Window.html":{}}}],["parsephoenixdisplay(input",{"_index":3078,"title":{},"body":{"interfaces/Window.html":{}}}],["parsephoenixevents(eventsdata",{"_index":3022,"title":{},"body":{"interfaces/Window.html":{}}}],["parses",{"_index":3068,"title":{},"body":{"interfaces/Window.html":{}}}],["parsing",{"_index":3685,"title":{},"body":{"changelog.html":{}}}],["part",{"_index":548,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["particle",{"_index":473,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["particle1",{"_index":487,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particle1.clone",{"_index":490,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particle1.position.setz(distancefromorigin",{"_index":491,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particle2",{"_index":489,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particle2.position.setz",{"_index":492,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particlecolor",{"_index":478,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particlegeometry",{"_index":482,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particlematerial",{"_index":485,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particles",{"_index":472,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particlesize",{"_index":474,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particletoorigin",{"_index":497,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particletweens",{"_index":494,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particletweens.push(particletoorigin",{"_index":499,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particletweens[0].oncomplete",{"_index":500,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["pass",{"_index":1257,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["passed",{"_index":1546,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["passes",{"_index":1272,"title":{},"body":{"classes/EffectsManager.html":{}}}],["passindex",{"_index":1327,"title":{},"body":{"classes/EffectsManager.html":{}}}],["path",{"_index":238,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["path/to/geometry.obj",{"_index":3856,"title":{},"body":{"index.html":{}}}],["pathlength",{"_index":2543,"title":{},"body":{"classes/State.html":{}}}],["paths",{"_index":3268,"title":{},"body":{"changelog.html":{}}}],["peek",{"_index":2104,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["per",{"_index":913,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["perform",{"_index":995,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["performance",{"_index":2317,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["performed",{"_index":1459,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["performing",{"_index":1454,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["periodically",{"_index":3310,"title":{},"body":{"changelog.html":{}}}],["permission",{"_index":3373,"title":{},"body":{"changelog.html":{}}}],["permitted",{"_index":1924,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["persist",{"_index":3492,"title":{},"body":{"changelog.html":{}}}],["perspective",{"_index":1819,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["perspectivecamera",{"_index":46,"title":{},"body":{"classes/ARManager.html":{},"classes/XRManager.html":{}}}],["phi",{"_index":898,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["phi=0",{"_index":952,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["phi=pi",{"_index":959,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["phnx",{"_index":3077,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenix",{"_index":66,"title":{},"body":{"classes/ARManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["phoenix.min.js",{"_index":3862,"title":{},"body":{"index.html":{}}}],["phoenixloader",{"_index":2823,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{},"index.html":{}}}],["phoenixmenu",{"_index":2600,"title":{},"body":{"classes/StateManager.html":{},"classes/URLOptionsManager.html":{}}}],["phoenixmenuconfigs",{"_index":1706,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["phoenixmenuconfigs[keyof",{"_index":1708,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixmenunode",{"_index":702,"title":{"classes/PhoenixMenuNode.html":{}},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"coverage.html":{}}}],["phoenixmenunode(name",{"_index":1715,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixmenunode.name",{"_index":1877,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["phoenixmenuroot",{"_index":860,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{}}}],["phoenixmenuui",{"_index":1798,"title":{"classes/PhoenixMenuUI.html":{}},"body":{"classes/PhoenixMenuUI.html":{},"coverage.html":{}}}],["phoenixnodejson",{"_index":1752,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['children",{"_index":1759,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['children'].push(child.getnodestate",{"_index":1760,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['childrenactive",{"_index":1756,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['configs",{"_index":1758,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['name",{"_index":1753,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['nodelevel",{"_index":1754,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['togglestate",{"_index":1755,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixobjects",{"_index":549,"title":{"classes/PhoenixObjects.html":{}},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["phoenixscene",{"_index":3079,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.scene",{"_index":3082,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.sceneconfiguration",{"_index":3081,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixui",{"_index":998,"title":{"interfaces/PhoenixUI.html":{}},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"changelog.html":{},"coverage.html":{}}}],["phoenixurloptions",{"_index":2827,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["physics",{"_index":545,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["pi",{"_index":903,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["picker",{"_index":1121,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["pipe",{"_index":3744,"title":{},"body":{"changelog.html":{}}}],["planar",{"_index":1957,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["planarcalocell",{"_index":1956,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["planarcalocells",{"_index":3541,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["planarcalorimeters",{"_index":3496,"title":{},"body":{"changelog.html":{}}}],["plane",{"_index":248,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixObjects.html":{}}}],["planes",{"_index":440,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["playground",{"_index":3403,"title":{},"body":{"changelog.html":{}}}],["plength",{"_index":1542,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["point",{"_index":1479,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pointing",{"_index":2144,"title":{},"body":{"classes/PresetView.html":{}}}],["pointpos",{"_index":1978,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["points",{"_index":1984,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["points.length",{"_index":2667,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["points[0].y",{"_index":2662,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["points[0].z",{"_index":2663,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["points[i].y",{"_index":2669,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["points[i].z",{"_index":2670,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["pointsmaterial",{"_index":1988,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos",{"_index":267,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos.x",{"_index":2231,"title":{},"body":{"classes/RKHelper.html":{}}}],["pos.y",{"_index":2232,"title":{},"body":{"classes/RKHelper.html":{}}}],["pos.z",{"_index":2229,"title":{},"body":{"classes/RKHelper.html":{}}}],["pos1",{"_index":1491,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos2",{"_index":1502,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos[0",{"_index":273,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["pos[1",{"_index":275,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["pos[2",{"_index":277,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["position",{"_index":79,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["position.length",{"_index":2116,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["position.setlength",{"_index":2115,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["position.setlength((position.length",{"_index":2120,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["positioning",{"_index":1141,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["positions",{"_index":227,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["positions.concat(extrapolatedpos",{"_index":2249,"title":{},"body":{"classes/RKHelper.html":{}}}],["positions.length",{"_index":2035,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["positions.slice(1).foreach",{"_index":537,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["positions[0].duration",{"_index":533,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["positions[0].easing",{"_index":535,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["positions[0].position",{"_index":532,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["positive",{"_index":958,"title":{},"body":{"classes/CoordinateHelper.html":{},"changelog.html":{}}}],["possible",{"_index":726,"title":{},"body":{"classes/ColorOptions.html":{},"changelog.html":{}}}],["post",{"_index":2464,"title":{},"body":{"classes/SelectionManager.html":{}}}],["powerpreference",{"_index":2315,"title":{},"body":{"classes/RendererManager.html":{}}}],["preselectionantialias",{"_index":2409,"title":{},"body":{"classes/SelectionManager.html":{}}}],["presenting",{"_index":3844,"title":{},"body":{"index.html":{}}}],["preset",{"_index":224,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["presetview",{"_index":875,"title":{"classes/PresetView.html":{}},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"coverage.html":{}}}],["presetviews",{"_index":861,"title":{},"body":{"interfaces/Configuration.html":{}}}],["prettier",{"_index":3480,"title":{},"body":{"changelog.html":{}}}],["pretty",{"_index":2165,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams",{"_index":2200,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['d0",{"_index":2206,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['q",{"_index":2205,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['z0",{"_index":2208,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['|p",{"_index":2203,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettyparams",{"_index":2503,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettyparams[key",{"_index":2510,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettysymbol",{"_index":2180,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettysymbols",{"_index":773,"title":{"classes/PrettySymbols.html":{}},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{},"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["prettysymbols.getprettyparams",{"_index":2504,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettysymbols.getprettysymbol('charge",{"_index":713,"title":{},"body":{"classes/ColorOptions.html":{}}}],["prettysymbols.getprettysymbol('charge')}=${chargevalue",{"_index":813,"title":{},"body":{"classes/ColorOptions.html":{}}}],["prettysymbols.getprettysymbol('mom",{"_index":720,"title":{},"body":{"classes/ColorOptions.html":{}}}],["prettysymbols.getprettysymbol(cut.field",{"_index":1866,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["prettysymbols.getprettysymbol(paramkey",{"_index":2190,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettysymbols.symbols[symbol].includes(param",{"_index":2182,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["previous",{"_index":75,"title":{},"body":{"classes/ARManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["previousscale",{"_index":373,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["previoustween",{"_index":536,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["previoustween.chain(tween",{"_index":539,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["previoustween.oncomplete(onend",{"_index":540,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["previousvalues",{"_index":21,"title":{},"body":{"classes/ARManager.html":{}}}],["prevlocalclipping",{"_index":466,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["prevnode",{"_index":1790,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.addchild(nodename",{"_index":1797,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.children.find(child",{"_index":1795,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.findintree(nodename",{"_index":1794,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevp",{"_index":2741,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["prevpos",{"_index":2734,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["prevpos.w",{"_index":2743,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["prevpos.xy",{"_index":2742,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["print",{"_index":2197,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["printed",{"_index":2175,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["private",{"_index":20,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["process",{"_index":553,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{}}}],["processes",{"_index":3137,"title":{},"body":{"interfaces/Window.html":{}}}],["processing",{"_index":873,"title":{},"body":{"interfaces/Configuration.html":{},"classes/SelectionManager.html":{},"changelog.html":{},"index.html":{}}}],["progress",{"_index":148,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/LoadingManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["progresses",{"_index":1614,"title":{},"body":{"classes/LoadingManager.html":{}}}],["progressitems",{"_index":1585,"title":{},"body":{"classes/LoadingManager.html":{}}}],["project",{"_index":3251,"title":{},"body":{"changelog.html":{}}}],["project/jsroot/blob/19ce116b68701ab45e0a092c673119bf97ede0c2/modules/core.mjs#l241",{"_index":3119,"title":{},"body":{"interfaces/Window.html":{}}}],["projectionmatrix",{"_index":2729,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["promise",{"_index":2377,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["promise((resolve",{"_index":2380,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["prop",{"_index":1775,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["propagate",{"_index":1536,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["propagate(startpos",{"_index":2356,"title":{},"body":{"classes/RungeKutta.html":{}}}],["propagation",{"_index":312,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["propagator",{"_index":2218,"title":{},"body":{"classes/RKHelper.html":{}}}],["proper",{"_index":3378,"title":{},"body":{"changelog.html":{}}}],["properly",{"_index":3495,"title":{},"body":{"changelog.html":{}}}],["properties",{"_index":17,"title":{"properties.html":{}},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"properties.html":{}}}],["property",{"_index":752,"title":{},"body":{"classes/ColorOptions.html":{}}}],["property's",{"_index":640,"title":{},"body":{"classes/ColorManager.html":{}}}],["props",{"_index":2511,"title":{},"body":{"classes/SelectionManager.html":{}}}],["props.join",{"_index":2520,"title":{},"body":{"classes/SelectionManager.html":{}}}],["props.length",{"_index":2519,"title":{},"body":{"classes/SelectionManager.html":{}}}],["protected",{"_index":26,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["providing",{"_index":1828,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["pseudorapidity",{"_index":926,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["pt",{"_index":2168,"title":{},"body":{"classes/PrettySymbols.html":{},"changelog.html":{}}}],["public",{"_index":24,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["pushed",{"_index":2899,"title":{},"body":{"classes/VRManager.html":{}}}],["put",{"_index":2045,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["puts",{"_index":956,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["q",{"_index":1462,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["qop",{"_index":1467,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["quaternion",{"_index":908,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["quaternion.multiply(quaternion2",{"_index":964,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["quaternion.setfromunitvectors(v1",{"_index":955,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["quaternion2",{"_index":960,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["quaternion2.setfromaxisangle(new",{"_index":961,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["query",{"_index":2816,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["radians",{"_index":934,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["radius",{"_index":297,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["random",{"_index":634,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"changelog.html":{}}}],["randomcolor",{"_index":1181,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["randomly",{"_index":648,"title":{},"body":{"classes/ColorManager.html":{}}}],["range",{"_index":641,"title":{},"body":{"classes/ColorManager.html":{},"classes/CoordinateHelper.html":{},"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["rangeslider",{"_index":1748,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["ratio",{"_index":1464,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["raycaster",{"_index":2458,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.intersectobjects(this.scene.children",{"_index":2536,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.params.line.threshold",{"_index":2535,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.setfromcamera(mouse",{"_index":2534,"title":{},"body":{"classes/SelectionManager.html":{}}}],["reachedhits",{"_index":413,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["reachedhits.length",{"_index":417,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["reaches",{"_index":399,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["react",{"_index":3867,"title":{},"body":{"index.html":{}}}],["read",{"_index":3921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reader",{"_index":3930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reader.onload",{"_index":3932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reader.readastext(configfile",{"_index":3935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["readonly",{"_index":22,"title":{},"body":{"classes/ARManager.html":{},"classes/PrettySymbols.html":{},"classes/VRManager.html":{}}}],["realistic",{"_index":3641,"title":{},"body":{"changelog.html":{}}}],["receives",{"_index":3018,"title":{},"body":{"interfaces/Window.html":{}}}],["recover",{"_index":1395,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["redundant",{"_index":3632,"title":{},"body":{"changelog.html":{}}}],["refactor",{"_index":3462,"title":{},"body":{"changelog.html":{}}}],["refactoring",{"_index":3764,"title":{},"body":{"changelog.html":{}}}],["reference",{"_index":1249,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["reject",{"_index":2381,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["related",{"_index":12,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["released",{"_index":2898,"title":{},"body":{"classes/VRManager.html":{}}}],["reload",{"_index":3039,"title":{},"body":{"interfaces/Window.html":{}}}],["remaining",{"_index":436,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["remove",{"_index":468,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["remove').name('remove",{"_index":1156,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["removechild",{"_index":1659,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["removechild(child",{"_index":1699,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["removecontrols",{"_index":2264,"title":{},"body":{"classes/RendererManager.html":{}}}],["removecontrols(renderer",{"_index":2292,"title":{},"body":{"classes/RendererManager.html":{}}}],["removed",{"_index":1061,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/RendererManager.html":{}}}],["removeeventlistener('click",{"_index":2490,"title":{},"body":{"classes/SelectionManager.html":{}}}],["removeeventlistener('mousemove",{"_index":2489,"title":{},"body":{"classes/SelectionManager.html":{}}}],["removeeventlistener('touchstart",{"_index":2491,"title":{},"body":{"classes/SelectionManager.html":{}}}],["removelabel",{"_index":1015,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["removelabel').name('remove",{"_index":1247,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["removelabel(labelid",{"_index":1071,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["removeobj",{"_index":1016,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["removeobj(object",{"_index":1074,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["removepass",{"_index":1267,"title":{},"body":{"classes/EffectsManager.html":{}}}],["removepass(pass",{"_index":1295,"title":{},"body":{"classes/EffectsManager.html":{}}}],["removing",{"_index":1067,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"changelog.html":{}}}],["render",{"_index":1263,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["render(scene",{"_index":2295,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendered",{"_index":2304,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderer",{"_index":29,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["renderer.localclippingenabled",{"_index":2352,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderera",{"_index":2311,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererb",{"_index":2308,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererelement",{"_index":2526,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererelement.clientheight",{"_index":2533,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererelement.clientwidth",{"_index":2530,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererheight",{"_index":2334,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderermanager",{"_index":250,"title":{"classes/RendererManager.html":{}},"body":{"interfaces/AnimationPreset.html":{},"classes/RendererManager.html":{},"coverage.html":{}}}],["renderers",{"_index":2254,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererwidth",{"_index":2331,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendering",{"_index":1282,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"changelog.html":{}}}],["renderpass",{"_index":1280,"title":{},"body":{"classes/EffectsManager.html":{}}}],["renderpass(this.scene",{"_index":1310,"title":{},"body":{"classes/EffectsManager.html":{}}}],["renders",{"_index":3102,"title":{},"body":{"interfaces/Window.html":{}}}],["repeating",{"_index":3454,"title":{},"body":{"changelog.html":{}}}],["repo",{"_index":3636,"title":{},"body":{"changelog.html":{}}}],["repository",{"_index":3877,"title":{},"body":{"properties.html":{}}}],["representation",{"_index":2895,"title":{},"body":{"classes/VRManager.html":{}}}],["representing",{"_index":631,"title":{},"body":{"classes/ColorManager.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["represents",{"_index":1350,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["request",{"_index":3626,"title":{},"body":{"changelog.html":{}}}],["requesting",{"_index":106,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["requestsession(`immersive",{"_index":3225,"title":{},"body":{"classes/XRManager.html":{}}}],["required",{"_index":104,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"index.html":{}}}],["res.json",{"_index":2845,"title":{},"body":{"classes/URLOptionsManager.html":{},"index.html":{}}}],["res.text",{"_index":2852,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["reset",{"_index":975,"title":{},"body":{"classes/Cut.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["reset/remove",{"_index":3202,"title":{},"body":{"interfaces/Window.html":{}}}],["resetcut",{"_index":1183,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["resetlabels",{"_index":3203,"title":{},"body":{"interfaces/Window.html":{}}}],["resize",{"_index":3643,"title":{},"body":{"changelog.html":{}}}],["resolution",{"_index":2723,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["resolution.y",{"_index":2726,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["resolve",{"_index":2393,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["resources",{"_index":2987,"title":{},"body":{"interfaces/Window.html":{}}}],["responsible",{"_index":623,"title":{},"body":{"classes/ColorManager.html":{},"interfaces/Configuration.html":{},"interfaces/Window.html":{}}}],["restore",{"_index":435,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixMenuNode.html":{}}}],["restored",{"_index":1669,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["restoring",{"_index":375,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["restructure",{"_index":3612,"title":{},"body":{"changelog.html":{}}}],["result",{"_index":1417,"title":{},"body":{"classes/ExportManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["resultant",{"_index":1943,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["results",{"_index":186,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":1363,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["return",{"_index":162,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":103,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["returnvec",{"_index":1509,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["reverse",{"_index":945,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["revert",{"_index":464,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["reverts",{"_index":3260,"title":{},"body":{"changelog.html":{}}}],["right",{"_index":588,"title":{},"body":{"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"changelog.html":{}}}],["rk",{"_index":3503,"title":{},"body":{"changelog.html":{}}}],["rkhelper",{"_index":1991,"title":{"classes/RKHelper.html":{}},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"changelog.html":{},"coverage.html":{}}}],["rkhelper.extrapolatetrackpositions(track",{"_index":2003,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["rkhelper.extrapolatetrackpositions(trackparams",{"_index":2030,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["rkhelper.extrapolationlimit",{"_index":2219,"title":{},"body":{"classes/RKHelper.html":{}}}],["rkstate",{"_index":1549,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.dir",{"_index":1551,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.maxstepsize",{"_index":1554,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.p",{"_index":1552,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.pathlength",{"_index":1555,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.pos",{"_index":1550,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.q",{"_index":1553,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["robustness",{"_index":3477,"title":{},"body":{"changelog.html":{}}}],["rollup",{"_index":3658,"title":{},"body":{"changelog.html":{}}}],["root",{"_index":166,"title":{},"body":{"classes/ARManager.html":{},"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["rotate",{"_index":909,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{}}}],["rotate.chain(end",{"_index":309,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["rotateopeningangleclipping",{"_index":2626,"title":{},"body":{"classes/StateManager.html":{}}}],["rotatestartangleclipping",{"_index":2624,"title":{},"body":{"classes/StateManager.html":{}}}],["rotationpositions",{"_index":305,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["rotations",{"_index":922,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["routes",{"_index":3752,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":1372,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["run${this.eventmetadata.runnumber}_evt${this.eventmetadata.eventnumber}.json",{"_index":2608,"title":{},"body":{"classes/StateManager.html":{}}}],["runge",{"_index":1455,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rungekutta",{"_index":1457,"title":{"classes/RungeKutta.html":{}},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["runnumber",{"_index":2575,"title":{},"body":{"classes/StateManager.html":{}}}],["same",{"_index":3708,"title":{},"body":{"changelog.html":{}}}],["sample",{"_index":3511,"title":{},"body":{"changelog.html":{}}}],["save",{"_index":1402,"title":{},"body":{"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["saved",{"_index":1396,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["saveeventdataconfiguration",{"_index":1386,"title":{},"body":{"classes/ExportManager.html":{}}}],["saveeventdataconfiguration(eventdata",{"_index":1400,"title":{},"body":{"classes/ExportManager.html":{}}}],["savefile",{"_index":1413,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["savefile(output",{"_index":1433,"title":{},"body":{"classes/ExportManager.html":{}}}],["savefile(result",{"_index":1419,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration",{"_index":1387,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration(geometries",{"_index":1403,"title":{},"body":{"classes/ExportManager.html":{}}}],["savelabels",{"_index":1217,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["saves",{"_index":3020,"title":{},"body":{"interfaces/Window.html":{}}}],["savesceneconfig",{"_index":1388,"title":{},"body":{"classes/ExportManager.html":{}}}],["savesceneconfig(eventdata",{"_index":1405,"title":{},"body":{"classes/ExportManager.html":{}}}],["savestateasjson",{"_index":2566,"title":{},"body":{"classes/StateManager.html":{}}}],["scale",{"_index":77,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["scalemenu",{"_index":1137,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["scalemenu.onchange((value",{"_index":1139,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["scalescene",{"_index":37,"title":{},"body":{"classes/ARManager.html":{}}}],["scalescene(scale",{"_index":116,"title":{},"body":{"classes/ARManager.html":{}}}],["scaletween",{"_index":366,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["scaletween.onupdate((updatedscale",{"_index":372,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["scaling",{"_index":363,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["scene",{"_index":44,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["scene's",{"_index":2558,"title":{},"body":{"classes/StateManager.html":{}}}],["scene.background",{"_index":2327,"title":{},"body":{"classes/RendererManager.html":{}}}],["scene.getobjectbyname('vertices",{"_index":667,"title":{},"body":{"classes/ColorManager.html":{}}}],["scene.getobjectbyname(linkedtrackcollection",{"_index":676,"title":{},"body":{"classes/ColorManager.html":{}}}],["scene.phnx",{"_index":1434,"title":{},"body":{"classes/ExportManager.html":{}}}],["scene.scale.x",{"_index":158,"title":{},"body":{"classes/ARManager.html":{}}}],["scene/geometry",{"_index":3097,"title":{},"body":{"interfaces/Window.html":{}}}],["scenecolor",{"_index":2326,"title":{},"body":{"classes/RendererManager.html":{}}}],["sceneconfig",{"_index":1422,"title":{},"body":{"classes/ExportManager.html":{}}}],["sceneconfiguration",{"_index":1431,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["sceneconfiguration.eventdata[objecttype",{"_index":3142,"title":{},"body":{"interfaces/Window.html":{}}}],["sceneconfiguration.geometries",{"_index":3145,"title":{},"body":{"interfaces/Window.html":{}}}],["scenemanager",{"_index":137,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"coverage.html":{}}}],["scenemanager.event_data_id",{"_index":181,"title":{},"body":{"classes/ARManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["scenemanager.geometries_id",{"_index":182,"title":{},"body":{"classes/ARManager.html":{}}}],["scenemanager.labels_id",{"_index":183,"title":{},"body":{"classes/ARManager.html":{},"classes/PhoenixMenuUI.html":{}}}],["scenescale",{"_index":70,"title":{},"body":{"classes/ARManager.html":{}}}],["sceneurl",{"_index":3160,"title":{},"body":{"interfaces/Window.html":{}}}],["screen",{"_index":3178,"title":{},"body":{"interfaces/Window.html":{}}}],["screenshot",{"_index":3724,"title":{},"body":{"changelog.html":{}}}],["script",{"_index":2361,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{},"index.html":{}}}],["script[src",{"_index":2384,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement",{"_index":2386,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.addeventlistener('load",{"_index":2392,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.onerror",{"_index":2395,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.setattribute('data",{"_index":2391,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.src",{"_index":2390,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.type",{"_index":2388,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists",{"_index":2382,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists.length",{"_index":2385,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists[0].addeventlistener('load",{"_index":2400,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists[0].dataset.loaded",{"_index":2399,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptfor",{"_index":2367,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptloader",{"_index":2359,"title":{"classes/ScriptLoader.html":{}},"body":{"classes/ScriptLoader.html":{},"coverage.html":{}}}],["scripts",{"_index":2364,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{}}}],["scripturl",{"_index":2373,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["search",{"_index":2802,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["second",{"_index":1488,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["secondary",{"_index":2275,"title":{},"body":{"classes/RendererManager.html":{}}}],["see",{"_index":930,"title":{},"body":{"classes/CoordinateHelper.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["select",{"_index":2896,"title":{},"body":{"classes/VRManager.html":{},"miscellaneous/typealiases.html":{}}}],["selected",{"_index":744,"title":{},"body":{"classes/ColorOptions.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["selectedcolorbyoption",{"_index":689,"title":{},"body":{"classes/ColorOptions.html":{}}}],["selectedobject",{"_index":2410,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selectend",{"_index":2923,"title":{},"body":{"classes/VRManager.html":{}}}],["selecting",{"_index":2439,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selection",{"_index":2060,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["selectionmanager",{"_index":2401,"title":{"classes/SelectionManager.html":{}},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["selectstart",{"_index":2921,"title":{},"body":{"classes/VRManager.html":{}}}],["separate",{"_index":3614,"title":{},"body":{"changelog.html":{}}}],["separated",{"_index":756,"title":{},"body":{"classes/ColorOptions.html":{}}}],["separator",{"_index":3053,"title":{},"body":{"interfaces/Window.html":{}}}],["service",{"_index":1574,"title":{},"body":{"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"index.html":{}}}],["session",{"_index":83,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["session.addeventlistener('end",{"_index":3230,"title":{},"body":{"classes/XRManager.html":{}}}],["session_type",{"_index":23,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["sessioninit",{"_index":30,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["sessiontype",{"_index":3211,"title":{},"body":{"classes/XRManager.html":{}}}],["set",{"_index":101,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["set/get",{"_index":2342,"title":{},"body":{"classes/RendererManager.html":{}}}],["setantialiasing",{"_index":1268,"title":{},"body":{"classes/EffectsManager.html":{}}}],["setantialiasing(antialias",{"_index":1297,"title":{},"body":{"classes/EffectsManager.html":{}}}],["setcamera",{"_index":2567,"title":{},"body":{"classes/StateManager.html":{}}}],["setcamera(camera",{"_index":2583,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingenabled",{"_index":2568,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingenabled(clipping",{"_index":2584,"title":{},"body":{"classes/StateManager.html":{}}}],["seteventdisplay",{"_index":2569,"title":{},"body":{"classes/StateManager.html":{}}}],["seteventdisplay(eventdisplay",{"_index":2586,"title":{},"body":{"classes/StateManager.html":{}}}],["setfixoverlay",{"_index":2265,"title":{},"body":{"classes/RendererManager.html":{}}}],["setfixoverlay(value",{"_index":2296,"title":{},"body":{"classes/RendererManager.html":{}}}],["setflat",{"_index":3060,"title":{},"body":{"interfaces/Window.html":{}}}],["setinterval",{"_index":2956,"title":{},"body":{"classes/VRManager.html":{}}}],["setlocalclippingenabled",{"_index":2266,"title":{},"body":{"classes/RendererManager.html":{}}}],["setlocalclippingenabled(value",{"_index":2298,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer",{"_index":2267,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer(renderer",{"_index":2300,"title":{},"body":{"classes/RendererManager.html":{}}}],["setopeningclippingangle",{"_index":2570,"title":{},"body":{"classes/StateManager.html":{}}}],["setopeningclippingangle(angle",{"_index":2588,"title":{},"body":{"classes/StateManager.html":{}}}],["setoverlayrenderer",{"_index":2268,"title":{},"body":{"classes/RendererManager.html":{}}}],["setoverlayrenderer(overlaycanvas",{"_index":2301,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["setphoenixmenuroot",{"_index":2571,"title":{},"body":{"classes/StateManager.html":{}}}],["setphoenixmenuroot(phoenixmenuroot",{"_index":2590,"title":{},"body":{"classes/StateManager.html":{}}}],["setrenderers",{"_index":2269,"title":{},"body":{"classes/RendererManager.html":{}}}],["setrenderers(renderers",{"_index":2305,"title":{},"body":{"classes/RendererManager.html":{}}}],["sets",{"_index":3167,"title":{},"body":{"interfaces/Window.html":{}}}],["setselectedobject",{"_index":2416,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselectedobject(selectedobject",{"_index":2454,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting",{"_index":2417,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting(enable",{"_index":2456,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setstartclippingangle",{"_index":2572,"title":{},"body":{"classes/StateManager.html":{}}}],["setstartclippingangle(angle",{"_index":2592,"title":{},"body":{"classes/StateManager.html":{}}}],["settimeout",{"_index":528,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["setting",{"_index":2059,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{}}}],["settings",{"_index":2971,"title":{},"body":{"interfaces/Window.html":{},"miscellaneous/enumerations.html":{}}}],["settolocalstorage",{"_index":3784,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["setup",{"_index":3467,"title":{},"body":{"changelog.html":{}}}],["setupvrcontrols",{"_index":2891,"title":{},"body":{"classes/VRManager.html":{}}}],["setxrsession",{"_index":41,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["setxrsession(renderer",{"_index":130,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["shade",{"_index":3715,"title":{},"body":{"changelog.html":{}}}],["shaded",{"_index":3061,"title":{},"body":{"interfaces/Window.html":{}}}],["shader",{"_index":2711,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["shaderchunk",{"_index":2637,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["shaderchunk.tracks_frag",{"_index":2769,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["shaderchunk.tracks_vert",{"_index":2767,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["shaderchunk['tracks_frag",{"_index":2760,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["shaderchunk['tracks_vert",{"_index":2712,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["shadermaterial",{"_index":2633,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["shadre",{"_index":2759,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["sharable",{"_index":3505,"title":{},"body":{"changelog.html":{}}}],["share",{"_index":3576,"title":{},"body":{"changelog.html":{}}}],["shouldcolorbycharge",{"_index":699,"title":{},"body":{"classes/ColorOptions.html":{}}}],["shouldcolorbycharge(objectparams",{"_index":768,"title":{},"body":{"classes/ColorOptions.html":{}}}],["show",{"_index":512,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["show/hide",{"_index":1043,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["showgeometriesmenu",{"_index":1099,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["showgeometriesmenu.onchange((value",{"_index":1103,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["showing",{"_index":1356,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["showing/hiding",{"_index":1098,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["showmenu",{"_index":1133,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["showmenu.onchange((value",{"_index":1134,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["showmenu.onchange(ontoggle",{"_index":1220,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["shown",{"_index":1565,"title":{},"body":{"classes/InfoLogger.html":{}}}],["shows",{"_index":65,"title":{},"body":{"classes/ARManager.html":{}}}],["si",{"_index":1465,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["side",{"_index":597,"title":{},"body":{"classes/CMSObjects.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["sides",{"_index":3057,"title":{},"body":{"interfaces/Window.html":{}}}],["simple",{"_index":3261,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["simplify",{"_index":3369,"title":{},"body":{"changelog.html":{}}}],["single",{"_index":523,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{},"miscellaneous/typealiases.html":{}}}],["singlelabelnode",{"_index":1882,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["singlelabelnode.name",{"_index":1883,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["singleton",{"_index":1593,"title":{},"body":{"classes/LoadingManager.html":{},"classes/StateManager.html":{}}}],["size",{"_index":475,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["slider",{"_index":1136,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["sliders",{"_index":1864,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["slidervalue",{"_index":833,"title":{},"body":{"classes/ColorOptions.html":{}}}],["smaller",{"_index":3131,"title":{},"body":{"interfaces/Window.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"index.html":{}}}],["space",{"_index":1538,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["spec",{"_index":3693,"title":{},"body":{"changelog.html":{}}}],["specific",{"_index":1869,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["specified",{"_index":2134,"title":{},"body":{"classes/PresetView.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["specifying",{"_index":967,"title":{},"body":{"classes/Cut.html":{},"interfaces/Window.html":{}}}],["sphere",{"_index":245,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["sphere(new",{"_index":326,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["sphere.attributes.position",{"_index":453,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["spheregeometry",{"_index":244,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixObjects.html":{}}}],["spheregeometry(1",{"_index":449,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["spheregeometry(particlesize",{"_index":483,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["spherical",{"_index":448,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{}}}],["sphericaltocartesian",{"_index":895,"title":{},"body":{"classes/CoordinateHelper.html":{},"changelog.html":{}}}],["sphericaltocartesian(radius",{"_index":935,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["sphi",{"_index":2074,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["split",{"_index":3617,"title":{},"body":{"changelog.html":{}}}],["splitting",{"_index":3619,"title":{},"body":{"changelog.html":{}}}],["squared",{"_index":1925,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["src/.../active",{"_index":3884,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../browser",{"_index":3901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../color",{"_index":3838,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../config",{"_index":3886,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../constants.ts",{"_index":3900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../file.ts",{"_index":3903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../geometry",{"_index":3895,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../labels.ts",{"_index":3902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../preset",{"_index":3837,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../url",{"_index":3904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../xr",{"_index":3839,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/event",{"_index":2967,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["src/helpers/active",{"_index":189,"title":{},"body":{"classes/ActiveVariable.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/helpers/browser",{"_index":3780,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/constants.ts",{"_index":3785,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/coordinate",{"_index":886,"title":{},"body":{"classes/CoordinateHelper.html":{},"coverage.html":{}}}],["src/helpers/file.ts",{"_index":3787,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/info",{"_index":1556,"title":{},"body":{"classes/InfoLogger.html":{},"coverage.html":{}}}],["src/helpers/labels.ts",{"_index":3789,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/pretty",{"_index":2163,"title":{},"body":{"classes/PrettySymbols.html":{},"coverage.html":{}}}],["src/helpers/rk",{"_index":2211,"title":{},"body":{"classes/RKHelper.html":{},"coverage.html":{}}}],["src/helpers/runge",{"_index":1448,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["src/lib/models/cut.model.ts",{"_index":966,"title":{},"body":{"classes/Cut.html":{},"coverage.html":{}}}],["src/lib/models/cut.model.ts:18",{"_index":982,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:19",{"_index":984,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:20",{"_index":983,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:21",{"_index":985,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:30",{"_index":986,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:6",{"_index":981,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:8",{"_index":977,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/preset",{"_index":2130,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/lib/types/configuration.ts",{"_index":852,"title":{},"body":{"interfaces/Configuration.html":{},"coverage.html":{}}}],["src/lib/types/geometry",{"_index":3898,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/loaders/cms",{"_index":3794,"title":{},"body":{"coverage.html":{}}}],["src/loaders/event",{"_index":1330,"title":{},"body":{"interfaces/EventDataLoader.html":{},"coverage.html":{}}}],["src/loaders/jivexml",{"_index":3797,"title":{},"body":{"coverage.html":{}}}],["src/loaders/jsroot",{"_index":3799,"title":{},"body":{"coverage.html":{}}}],["src/loaders/objects/cms",{"_index":543,"title":{},"body":{"classes/CMSObjects.html":{},"coverage.html":{}}}],["src/loaders/objects/phoenix",{"_index":1886,"title":{},"body":{"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["src/loaders/objects/tracks.ts",{"_index":2632,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"coverage.html":{}}}],["src/loaders/objects/tracks.ts:102",{"_index":2790,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:17",{"_index":2784,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:19",{"_index":2785,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:21",{"_index":2786,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:23",{"_index":2783,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:230",{"_index":2636,"title":{},"body":{"classes/TracksMaterial.html":{}}}],["src/loaders/objects/tracks.ts:25",{"_index":2780,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:27",{"_index":2781,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:29",{"_index":2788,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:31",{"_index":2787,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:33",{"_index":2782,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:35",{"_index":2779,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:60",{"_index":2789,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/phoenix",{"_index":3803,"title":{},"body":{"coverage.html":{}}}],["src/loaders/script",{"_index":2360,"title":{},"body":{"classes/ScriptLoader.html":{},"coverage.html":{}}}],["src/loaders/trackml",{"_index":3805,"title":{},"body":{"coverage.html":{}}}],["src/managers/loading",{"_index":1581,"title":{},"body":{"classes/LoadingManager.html":{},"coverage.html":{}}}],["src/managers/state",{"_index":2557,"title":{},"body":{"classes/StateManager.html":{},"coverage.html":{}}}],["src/managers/three",{"_index":6,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/managers/ui",{"_index":681,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/managers/url",{"_index":2792,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["standalone",{"_index":3858,"title":{},"body":{"index.html":{}}}],["start",{"_index":229,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PresetView.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["start.chain(startxaxis",{"_index":307,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["start.start",{"_index":311,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["startangle",{"_index":2616,"title":{},"body":{"classes/StateManager.html":{}}}],["startclippingangle",{"_index":2562,"title":{},"body":{"classes/StateManager.html":{}}}],["startclone.delay(500",{"_index":306,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["startdir",{"_index":1539,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["started",{"_index":115,"title":{"changelog.html":{},"index.html":{}},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["starting",{"_index":1312,"title":{},"body":{"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/StateManager.html":{}}}],["startpos",{"_index":281,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["startpos[2",{"_index":294,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["starts",{"_index":134,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/PhoenixMenuUI.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["startxaxis",{"_index":295,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["startxaxis.chain(rotatestart",{"_index":308,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["state",{"_index":1458,"title":{"classes/State.html":{}},"body":{"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["state.dir",{"_index":1490,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.add",{"_index":1530,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().cross(b_first).multiplyscalar(qop",{"_index":1484,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.cross(b_first",{"_index":1482,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.normalize",{"_index":1535,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.p",{"_index":1470,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos",{"_index":1489,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos.add(state.dir.clone().multiplyscalar(fh)).add",{"_index":1526,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.q",{"_index":1468,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.stepsize",{"_index":1521,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.unitc",{"_index":1469,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["statemanager",{"_index":2556,"title":{"classes/StateManager.html":{}},"body":{"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["statemanager.instance",{"_index":2595,"title":{},"body":{"classes/StateManager.html":{}}}],["statemanager.loadstatefromjson(jsonstate",{"_index":2847,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["statements",{"_index":3776,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":18,"title":{},"body":{"classes/ARManager.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/Field.html":{},"classes/LoadingManager.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["stats",{"_index":2870,"title":{},"body":{"classes/URLOptionsManager.html":{},"dependencies.html":{}}}],["statselement",{"_index":2869,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["step",{"_index":304,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/Field.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["step(state",{"_index":1461,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["stepdistance",{"_index":2901,"title":{},"body":{"classes/VRManager.html":{}}}],["steps",{"_index":1537,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["stepsize",{"_index":2544,"title":{},"body":{"classes/State.html":{}}}],["stheta",{"_index":2078,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["still",{"_index":146,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["stop",{"_index":2958,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["storage",{"_index":3379,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["storage.ts",{"_index":3781,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stored",{"_index":753,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["storing",{"_index":2986,"title":{},"body":{"interfaces/Window.html":{}}}],["string",{"_index":80,"title":{},"body":{"classes/ARManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":1368,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["style.setproperty('display",{"_index":2874,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["styles",{"_index":3501,"title":{},"body":{"changelog.html":{}}}],["sub",{"_index":3055,"title":{},"body":{"interfaces/Window.html":{}}}],["subfolder",{"_index":1052,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["super",{"_index":2646,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["super(xrsessiontype.ar",{"_index":156,"title":{},"body":{"classes/ARManager.html":{}}}],["super(xrsessiontype.vr",{"_index":2913,"title":{},"body":{"classes/VRManager.html":{}}}],["super.onxrsessionended",{"_index":180,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["super.onxrsessionstarted(session",{"_index":177,"title":{},"body":{"classes/ARManager.html":{}}}],["super.setxrsession(renderer",{"_index":2918,"title":{},"body":{"classes/VRManager.html":{}}}],["support",{"_index":3590,"title":{},"body":{"changelog.html":{}}}],["sure",{"_index":3315,"title":{},"body":{"changelog.html":{}}}],["svg",{"_index":2162,"title":{},"body":{"classes/PresetView.html":{}}}],["swap",{"_index":2310,"title":{},"body":{"classes/RendererManager.html":{}}}],["swapped",{"_index":2312,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers",{"_index":2270,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers(renderera",{"_index":2307,"title":{},"body":{"classes/RendererManager.html":{}}}],["switch",{"_index":3603,"title":{},"body":{"changelog.html":{}}}],["switching",{"_index":877,"title":{},"body":{"interfaces/Configuration.html":{}}}],["symbol",{"_index":2179,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols",{"_index":775,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{},"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{}}}],["symbols.ts",{"_index":2164,"title":{},"body":{"classes/PrettySymbols.html":{},"coverage.html":{}}}],["symbols.ts:24",{"_index":2178,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols.ts:37",{"_index":2174,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols.ts:6",{"_index":2172,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["t",{"_index":200,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{}}}],["table",{"_index":3826,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3825,"title":{},"body":{"coverage.html":{}}}],["tacks",{"_index":1969,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["tag",{"_index":2372,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["take",{"_index":2514,"title":{},"body":{"classes/SelectionManager.html":{}}}],["taken",{"_index":3090,"title":{},"body":{"interfaces/Window.html":{}}}],["takes",{"_index":1349,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["target",{"_index":2136,"title":{},"body":{"classes/PresetView.html":{}}}],["tells",{"_index":1944,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["temp",{"_index":2351,"title":{},"body":{"classes/RendererManager.html":{}}}],["tempanchor",{"_index":3941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.click",{"_index":3947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.download",{"_index":3946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.href",{"_index":3944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.remove",{"_index":3948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.style.display",{"_index":3943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["templates",{"_index":3347,"title":{},"body":{"changelog.html":{}}}],["temporary",{"_index":911,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["tesla",{"_index":1453,"title":{},"body":{"classes/Field.html":{}}}],["test",{"_index":1171,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["tested",{"_index":2225,"title":{},"body":{"classes/RKHelper.html":{}}}],["tests",{"_index":3280,"title":{},"body":{"changelog.html":{}}}],["text",{"_index":2518,"title":{},"body":{"classes/SelectionManager.html":{},"changelog.html":{}}}],["text/javascript",{"_index":2389,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["text/plain",{"_index":1421,"title":{},"body":{"classes/ExportManager.html":{}}}],["then((jsonstate",{"_index":2846,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["then((res",{"_index":2844,"title":{},"body":{"classes/URLOptionsManager.html":{},"index.html":{}}}],["then((session",{"_index":3226,"title":{},"body":{"classes/XRManager.html":{}}}],["theta",{"_index":904,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["thetafrompos",{"_index":2038,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["thetatoeta",{"_index":896,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["thetatoeta(theta",{"_index":937,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["third",{"_index":1500,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["this._attributes",{"_index":2672,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.color",{"_index":2695,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.color.needsupdate",{"_index":2696,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.counter",{"_index":2697,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.counter.needsupdate",{"_index":2698,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.index",{"_index":2699,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.index.needsupdate",{"_index":2700,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.next",{"_index":2689,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.next.needsupdate",{"_index":2690,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.position",{"_index":2684,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.position.count",{"_index":2673,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.position.needsupdate",{"_index":2686,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.previous",{"_index":2687,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.previous.needsupdate",{"_index":2688,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.side",{"_index":2691,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.side.needsupdate",{"_index":2692,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.track_id",{"_index":2693,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.track_id.needsupdate",{"_index":2694,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.activecamera",{"_index":2631,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activecamera.position.fromarray",{"_index":2614,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activecamera.position.toarray",{"_index":2603,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activeobject",{"_index":2475,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.activeobject.update(intersectedobject.uuid",{"_index":2502,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.addrenderer(overlayrenderer",{"_index":2344,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.addrenderer(renderer",{"_index":2318,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.allcolorbyoptions.filter((colorbyoption",{"_index":796,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.animateevent",{"_index":262,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animateevent.bind(this",{"_index":263,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animateeventwithclipping",{"_index":264,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animateeventwithclipping.bind(this",{"_index":265,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animateeventwithcollision(collisionduration",{"_index":529,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animatewithcollision",{"_index":520,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animatewithcollision(this.animateevent",{"_index":518,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.antialiasing",{"_index":1314,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.antialiasrender",{"_index":1315,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.applychargecoloroptions.bind(this",{"_index":717,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.applyconfigstate(nodeconfig",{"_index":1778,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.applyconfigstate(this.configs[configslength",{"_index":1730,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.applyembedoption",{"_index":2834,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.applyeventoptions",{"_index":2830,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.applyhidewidgetsoptions",{"_index":2833,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.applymomcoloroptions.bind(this",{"_index":722,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.applyvertexcoloroptions.bind(this",{"_index":724,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.buildeventdatafromjson(event",{"_index":3044,"title":{},"body":{"interfaces/Window.html":{}}}],["this.buildgeometryfromparameters(parameters",{"_index":3165,"title":{},"body":{"interfaces/Window.html":{}}}],["this.callbacks.foreach((callback",{"_index":216,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["this.callbacks.push(callback",{"_index":218,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["this.camera",{"_index":1307,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["this.camera.near",{"_index":172,"title":{},"body":{"classes/ARManager.html":{}}}],["this.cameragroup",{"_index":3236,"title":{},"body":{"classes/XRManager.html":{}}}],["this.cameragroup.add(this.xrcamera",{"_index":3247,"title":{},"body":{"classes/XRManager.html":{}}}],["this.cameragroup.position.addscaledvector(direction",{"_index":2965,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.position.copy(cameraposition",{"_index":3246,"title":{},"body":{"classes/XRManager.html":{}}}],["this.cameragroup.position.toarray().join",{"_index":2955,"title":{},"body":{"classes/VRManager.html":{}}}],["this.camerapos",{"_index":2156,"title":{},"body":{"classes/PresetView.html":{}}}],["this.cameratarget",{"_index":2157,"title":{},"body":{"classes/PresetView.html":{}}}],["this.chargecolors[chargevalue",{"_index":814,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.children",{"_index":1712,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.filter",{"_index":1782,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.indexof(child",{"_index":1721,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.push(child",{"_index":1719,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.splice(childindex",{"_index":1722,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.childrenactive",{"_index":1757,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.childrentogglestate[child.name",{"_index":1733,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.clipping",{"_index":2158,"title":{},"body":{"classes/PresetView.html":{}}}],["this.clippingenabled.update(clipping",{"_index":2628,"title":{},"body":{"classes/StateManager.html":{}}}],["this.clippingenabled.value",{"_index":2604,"title":{},"body":{"classes/StateManager.html":{}}}],["this.clippingopeningangle",{"_index":2160,"title":{},"body":{"classes/PresetView.html":{}}}],["this.clippingstartangle",{"_index":2159,"title":{},"body":{"classes/PresetView.html":{}}}],["this.collectionname",{"_index":780,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.collideparticles(1500",{"_index":514,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.colorbymomentum('max",{"_index":835,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbymomentum('min",{"_index":834,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbymomentum(key",{"_index":838,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions",{"_index":795,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions.find",{"_index":809,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions.foreach((colorbyoption",{"_index":799,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions.map((colorbyoption",{"_index":805,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions[0].key",{"_index":803,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colormanager.collectioncolor(this.collectionname",{"_index":789,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colormanager.collectioncolorrandom(this.collectionname",{"_index":792,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colormanager.colorobjectsbyproperty",{"_index":815,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colormanager.colortracksbyvertex(this.collectionname",{"_index":846,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder",{"_index":782,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder.addconfig('button",{"_index":790,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder.addconfig('color",{"_index":784,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder.addconfig('select",{"_index":804,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder.addconfig('slider",{"_index":828,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder.configs.foreach((config",{"_index":847,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colors",{"_index":2654,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.composer",{"_index":1305,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.addpass(outlinepass",{"_index":1326,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.addpass(this.defaultrenderpass",{"_index":1311,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.passes.indexof(pass",{"_index":1328,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.passes.splice(passindex",{"_index":1329,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.render",{"_index":1319,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.renderer.render(scene",{"_index":1320,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.computeboundingbox",{"_index":2710,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.computeboundingsphere",{"_index":2709,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.configs",{"_index":1713,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configs.find",{"_index":1770,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configs.push",{"_index":1729,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configuration",{"_index":2999,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.defaulteventfile?.eventfile",{"_index":2831,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.configuration.defaulteventfile?.eventtype",{"_index":2832,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.configuration.eventdataloader",{"_index":2853,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.configuration.eventdataloader.addlabeltoeventobject",{"_index":3198,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.buildeventdata",{"_index":3036,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.getcollection(collectionname",{"_index":3148,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.getcollections",{"_index":3149,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.geteventmetadata",{"_index":3154,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.geteventslist(eventsdata",{"_index":3024,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.getlabelsobject",{"_index":3206,"title":{},"body":{"interfaces/Window.html":{}}}],["this.containsobject(renderer",{"_index":2347,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.controller.getworlddirection(direction",{"_index":2963,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1",{"_index":2926,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.add(line.clone",{"_index":2947,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.addeventlistener",{"_index":2960,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.addeventlistener('selectend",{"_index":2961,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.position.toarray().join",{"_index":2953,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1?.removeeventlistener",{"_index":2920,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller2",{"_index":2929,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller2.add(line.clone",{"_index":2948,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip1",{"_index":2933,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip1.add",{"_index":2935,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip2",{"_index":2938,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip2.add",{"_index":2940,"title":{},"body":{"classes/VRManager.html":{}}}],["this.counter",{"_index":2652,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.currentxrsession",{"_index":3233,"title":{},"body":{"classes/XRManager.html":{}}}],["this.currentxrsession.removeeventlistener('end",{"_index":3234,"title":{},"body":{"classes/XRManager.html":{}}}],["this.currentxrsession?.end",{"_index":3237,"title":{},"body":{"classes/XRManager.html":{}}}],["this.defaultmaxvalue",{"_index":988,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultminvalue",{"_index":987,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultrenderpass",{"_index":1309,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.defaultrenderpass.camera",{"_index":1317,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.defaultrenderpass.scene",{"_index":1318,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.disableselecting",{"_index":2477,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager",{"_index":2471,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.addoutlinepassforselection",{"_index":2473,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.antialiasing",{"_index":2487,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.composer.renderer.domelement",{"_index":2527,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.setantialiasing(false",{"_index":2488,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.setantialiasing(this.preselectionantialias",{"_index":2493,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsrender",{"_index":1316,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.enableeventdisplayconsole",{"_index":3011,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enablekeyboardcontrols",{"_index":3013,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enableselecting",{"_index":2476,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.etatotheta(eta",{"_index":949,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["this.eventdisplay",{"_index":2622,"title":{},"body":{"classes/StateManager.html":{},"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.buildeventdatafromjson(eventdata",{"_index":2857,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().addloadableitem('url_config",{"_index":2842,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().addloadableitem('url_event",{"_index":2850,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().itemloaded('url_config",{"_index":2849,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().itemloaded('url_event",{"_index":2863,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getuimanager().setclipping(true",{"_index":2621,"title":{},"body":{"classes/StateManager.html":{}}}],["this.eventdisplay.parsephoenixevents(res",{"_index":2858,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventfolder",{"_index":1089,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.eventfolder.__folders[eventdatatype",{"_index":1178,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.eventfolder.__folders[typename",{"_index":1252,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.eventfolder.addchild(typename",{"_index":1848,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventfolder.addconfig('checkbox",{"_index":1846,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventfolder.addfolder(typename",{"_index":1175,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.eventfolder.children.find",{"_index":1849,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventfolder.getnodestate",{"_index":1844,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventfolder.loadstatefromjson(this.eventfolderstate",{"_index":1885,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventfolder.remove",{"_index":1845,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventfolderstate",{"_index":1843,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventsdata",{"_index":3023,"title":{},"body":{"interfaces/Window.html":{}}}],["this.eventsdata[eventkey",{"_index":3043,"title":{},"body":{"interfaces/Window.html":{}}}],["this.fixedoverlay",{"_index":2355,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.geomfolder",{"_index":1088,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.geomfolder.__folders[object.name",{"_index":1157,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.geomfolder.addfolder(name",{"_index":1120,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.geomfolder.findintreeorcreate(menusubfolder",{"_index":1827,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.geomfolder.removefolder(folder",{"_index":1158,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.getcameragroup().add(this.controller1",{"_index":2928,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controller2",{"_index":2931,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controllergrip1",{"_index":2937,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controllergrip2",{"_index":2942,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameratween",{"_index":531,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.getcameratween(alongaxisposition",{"_index":296,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.getcameratween(position",{"_index":538,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.getcameratween(startpos",{"_index":287,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.gethitspositions(obj.position",{"_index":412,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.getmainrenderer",{"_index":2336,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmainrenderer().setanimationloop(null",{"_index":2321,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmomentum(objectparams",{"_index":840,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.getoverlayrenderer",{"_index":2324,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().domelement.hidden",{"_index":2325,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().render(scene",{"_index":2329,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getstatemanager().seteventdisplay(this",{"_index":3002,"title":{},"body":{"interfaces/Window.html":{}}}],["this.getthreemanager().getscenemanager().getscene",{"_index":3166,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary",{"_index":2993,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.addgeometryfromparameters(parameters",{"_index":3127,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.addlabeltoobject(label",{"_index":3201,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animateclippingwithcollision(tweenduration",{"_index":3196,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animateeventwithcollision(tweenduration",{"_index":3195,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animatepreset(animationpreset",{"_index":3194,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animatethroughevent",{"_index":3192,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.cleareventdata",{"_index":3035,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enablekeyboardcontrols",{"_index":3191,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enableselecting(enable",{"_index":3180,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.endxrsession(xrsessiontype",{"_index":3017,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportphoenixscene",{"_index":3088,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportscenetoobj",{"_index":3075,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.fixoverlayview(fixed",{"_index":3183,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.getactiveobjectid",{"_index":3184,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.highlightobject(uuid",{"_index":3188,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.init(configuration",{"_index":3000,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.initxrsession(xrsessiontype",{"_index":3015,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadgltfgeometry",{"_index":3100,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadjsongeometry",{"_index":3105,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadobjgeometry",{"_index":3064,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.lookatobject(uuid",{"_index":3187,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsegltfgeometry(input",{"_index":3095,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parseobjgeometry",{"_index":3072,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsephnxscene(phoenixscene.scene",{"_index":3085,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setanimationloop(uiloop",{"_index":3005,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setoverlayrenderer(overlaycanvas",{"_index":3170,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setselectedobjectdisplay(selectedobject",{"_index":3174,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.zoomto(zoomfactor",{"_index":3136,"title":{},"body":{"interfaces/Window.html":{}}}],["this.gui",{"_index":1079,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.addfolder('event",{"_index":1164,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.addfolder(scenemanager.geometries_id",{"_index":1094,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.addfolder(scenemanager.labels_id",{"_index":1214,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.domelement.id",{"_index":1080,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.domelement.style.csstext",{"_index":1081,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.removefolder(this.eventfolder",{"_index":1163,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters.eventdata",{"_index":1165,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters.eventdata[typename",{"_index":1176,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters.geometries",{"_index":1095,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters.labels",{"_index":1215,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters[collectionname",{"_index":1179,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters[labelid",{"_index":1228,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters[labelid]['removelabel",{"_index":1244,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters[name",{"_index":1114,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.hideidswithurloption(hidewidgetsoptions",{"_index":2871,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.icon",{"_index":1710,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["this.ignorelist",{"_index":2466,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ignorelist.includes(intersectedobject.type",{"_index":2496,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.indices_array",{"_index":2655,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.infologger",{"_index":2470,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["this.infologger.add('exported",{"_index":3076,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologger.add(log",{"_index":2521,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.infologger.add(name",{"_index":3067,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologgerlist",{"_index":1579,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.length",{"_index":1575,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.pop",{"_index":1577,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.unshift(label",{"_index":1578,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.init(configuration",{"_index":2997,"title":{},"body":{"interfaces/Window.html":{}}}],["this.initchargecoloroptions.bind(this",{"_index":715,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.initcolorbyoptions",{"_index":798,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.initmomcoloroptions.bind(this",{"_index":721,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.initrenderer(elementid",{"_index":2323,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.intersectobject(event",{"_index":2495,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.isfixedoverlay",{"_index":2328,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.isinit",{"_index":2465,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.istracksmaterial",{"_index":2770,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.labelsfolder",{"_index":1090,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.__folders[labelid",{"_index":1250,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.labelsfolder.addchild(labelid",{"_index":1878,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.addconfig('button",{"_index":1875,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.addconfig('color",{"_index":1874,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.addconfig('slider",{"_index":1873,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.addfolder(labelid",{"_index":1231,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.labelsfolder.children.find",{"_index":1876,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.removefolder(labelitemfolder",{"_index":1251,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.labelsfolder?.children.find",{"_index":1881,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.loaded",{"_index":1640,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.length",{"_index":1623,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.push(id",{"_index":1619,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.sort().join",{"_index":1625,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loadevent(eventkeys[0",{"_index":3025,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadgltfgeometry(sceneurl",{"_index":3161,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager",{"_index":2992,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem('root_geom",{"_index":3117,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem('root_json_geom",{"_index":3108,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`gltf_geom_${name",{"_index":3099,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`json_geom_${name",{"_index":3104,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`obj_geom_${name",{"_index":3063,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_gltf_${name",{"_index":3093,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_obj_${name",{"_index":3071,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_phnx_${name",{"_index":3084,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded('root_geom",{"_index":3124,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded('root_json_geom",{"_index":3114,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded(`gltf_geom_${name",{"_index":3101,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded(`json_geom_${name",{"_index":3106,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded(`obj_geom_${name",{"_index":3066,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded(`parse_gltf_${name",{"_index":3096,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded(`parse_obj_${name",{"_index":3073,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded(`parse_phnx_${name",{"_index":3086,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadjsongeometry",{"_index":3110,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadobjgeometry(filename",{"_index":3163,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadsceneconfiguration(phoenixscene.sceneconfiguration",{"_index":3083,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadstatefromjson(json.parse(data",{"_index":2599,"title":{},"body":{"classes/StateManager.html":{}}}],["this.mainrenderer",{"_index":2343,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.maxentries",{"_index":1576,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.maxpositionx",{"_index":1143,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.maxpositiony",{"_index":1147,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.maxpositionz",{"_index":1150,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.maxvalue",{"_index":990,"title":{},"body":{"classes/Cut.html":{}}}],["this.minvalue",{"_index":989,"title":{},"body":{"classes/Cut.html":{}}}],["this.momcolors.max.value",{"_index":830,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.momcolors.min.value",{"_index":829,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.momcolors[key].color",{"_index":837,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.momcolors[key].value",{"_index":831,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.momcolors[minormax].color",{"_index":839,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.moveindirection(direction",{"_index":2957,"title":{},"body":{"classes/VRManager.html":{}}}],["this.name",{"_index":1709,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["this.next",{"_index":2650,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.next.push(p.x",{"_index":2664,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.next.push(points[i].x",{"_index":2668,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.next_track_id",{"_index":2656,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.nodelevel",{"_index":1718,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.oncontrollerselectend",{"_index":2924,"title":{},"body":{"classes/VRManager.html":{}}}],["this.oncontrollerselectstart",{"_index":2922,"title":{},"body":{"classes/VRManager.html":{}}}],["this.ondisplayedeventchange.foreach((callback",{"_index":3037,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondisplayedeventchange.push(callback",{"_index":3151,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondocumentmousedown",{"_index":2483,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.oneventschange.foreach((callback",{"_index":3026,"title":{},"body":{"interfaces/Window.html":{}}}],["this.oneventschange.push(callback",{"_index":3153,"title":{},"body":{"interfaces/Window.html":{}}}],["this.onloadcallbacks",{"_index":1641,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onloadcallbacks.foreach((callback",{"_index":1626,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onloadcallbacks.push(callback",{"_index":1637,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onlyselectedcolorbyoption",{"_index":801,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.onprogress(id",{"_index":1620,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onprogresscallbacks",{"_index":1635,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onprogresscallbacks.push(callback",{"_index":1638,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onsessionended",{"_index":3219,"title":{},"body":{"classes/XRManager.html":{}}}],["this.ontoggle",{"_index":1711,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontoggle?.(this.togglestate",{"_index":1766,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontoggle?.(value",{"_index":1731,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontouchdown",{"_index":2485,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ontouchmove",{"_index":2481,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ontouchmove(event.targettouches[0",{"_index":2525,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.onxrsessionended",{"_index":3235,"title":{},"body":{"classes/XRManager.html":{}}}],["this.onxrsessionended.bind(this",{"_index":3231,"title":{},"body":{"classes/XRManager.html":{}}}],["this.onxrsessionstarted.bind(this)(session",{"_index":3227,"title":{},"body":{"classes/XRManager.html":{}}}],["this.openingclippingangle.update(angle",{"_index":2630,"title":{},"body":{"classes/StateManager.html":{}}}],["this.openingclippingangle.value",{"_index":2606,"title":{},"body":{"classes/StateManager.html":{}}}],["this.outlinepass",{"_index":2472,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects",{"_index":2492,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects[0",{"_index":2497,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.overlayrenderer",{"_index":2345,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.parent",{"_index":1714,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.parent.removechild(this",{"_index":1723,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.phoenixmenuroot",{"_index":1815,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{}}}],["this.phoenixmenuroot.addchild",{"_index":1817,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.phoenixmenuroot.configactive",{"_index":2612,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.getnodestate",{"_index":2601,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.loadstatefromjson(jsondata['phoenixmenu",{"_index":2611,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.truncate",{"_index":1816,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.positions",{"_index":2648,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.positions.length",{"_index":2674,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.preselectionantialias",{"_index":2486,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.previous",{"_index":2649,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.previous.push(points[0].x",{"_index":2661,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.previousvalues.cameranear",{"_index":159,"title":{},"body":{"classes/ARManager.html":{}}}],["this.previousvalues.scenescale",{"_index":157,"title":{},"body":{"classes/ARManager.html":{}}}],["this.process",{"_index":2671,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.progressitems",{"_index":1642,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.progressitems[id",{"_index":1618,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.removelabel(labelid",{"_index":1245,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.removeobj(object",{"_index":1118,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.render",{"_index":1313,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.renderer",{"_index":3218,"title":{},"body":{"classes/XRManager.html":{}}}],["this.renderer.xr",{"_index":3239,"title":{},"body":{"classes/XRManager.html":{}}}],["this.renderer.xr.getcontroller(0",{"_index":2927,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontroller(1",{"_index":2930,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontrollergrip(0",{"_index":2934,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontrollergrip(1",{"_index":2939,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.setreferencespacetype('local",{"_index":175,"title":{},"body":{"classes/ARManager.html":{}}}],["this.renderer.xr.setsession(session",{"_index":3232,"title":{},"body":{"classes/XRManager.html":{}}}],["this.renderermanager.getmainrenderer().localclippingenabled",{"_index":467,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.renderers",{"_index":2346,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.indexof(renderer",{"_index":2349,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.length",{"_index":2353,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.push(renderer",{"_index":2348,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.splice(index",{"_index":2350,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers[0].localclippingenabled",{"_index":2354,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.reset",{"_index":1627,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.resetlabels",{"_index":3030,"title":{},"body":{"interfaces/Window.html":{}}}],["this.saveeventdataconfiguration(eventdata",{"_index":1436,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savegeometriesconfiguration(geometries",{"_index":1438,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savesceneconfig(eventdata",{"_index":1423,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savestateasjson",{"_index":2597,"title":{},"body":{"classes/StateManager.html":{}}}],["this.scalescene(0.00001",{"_index":173,"title":{},"body":{"classes/ARManager.html":{}}}],["this.scalescene(this.previousvalues.scenescale",{"_index":179,"title":{},"body":{"classes/ARManager.html":{}}}],["this.scene",{"_index":1308,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["this.scene.add(...particles",{"_index":493,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.scene.getobjectbyname(groupname)?.scale.setscalar(scale",{"_index":185,"title":{},"body":{"classes/ARManager.html":{}}}],["this.scene.getobjectbyname(scenemanager.event_data_id",{"_index":324,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.scene.getobjectbyname(scenemanager.event_data_id).visible",{"_index":527,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.scene.remove(...particles",{"_index":501,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.scene.scale.x",{"_index":171,"title":{},"body":{"classes/ARManager.html":{}}}],["this.scenemanager",{"_index":656,"title":{},"body":{"classes/ColorManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.changeobjectcolor",{"_index":1242,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.changeobjectcolor(object",{"_index":1126,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.collectionfilter(collectionname",{"_index":1205,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.getobjectbyname(labelid",{"_index":1243,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.getobjectbyname(scenemanager.geometries_id",{"_index":1105,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.getobjectposition(name).setx(value",{"_index":1146,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.scenemanager.getobjectposition(name).sety(value",{"_index":1149,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.scenemanager.getobjectposition(name).setz(value",{"_index":1152,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.scenemanager.getscene",{"_index":666,"title":{},"body":{"classes/ColorManager.html":{}}}],["this.scenemanager.getscene().getobjectbyname(objectsgroup",{"_index":651,"title":{},"body":{"classes/ColorManager.html":{}}}],["this.scenemanager.groupvisibility",{"_index":1184,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.groupvisibility(scenemanager.event_data_id",{"_index":1168,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.groupvisibility(scenemanager.geometries_id",{"_index":1818,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.objectvisibility",{"_index":1104,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.objectvisibility(collectionobject",{"_index":1189,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.objectvisibility(labelobject",{"_index":1238,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.objectvisibility(object",{"_index":1135,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.removegeometry(object",{"_index":1159,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.scaleobject",{"_index":1825,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.scaleobject(object",{"_index":1140,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.scenemanager.setgeometryopacity",{"_index":1823,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.setgeometryopacity(object",{"_index":1131,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.wireframegeometries(value",{"_index":1111,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.wireframeobjects",{"_index":1858,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.selectedcolorbyoption",{"_index":802,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.selectedobject",{"_index":2474,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.length",{"_index":2501,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.push",{"_index":2507,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.splice",{"_index":2500,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.name",{"_index":2498,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.sessioninit",{"_index":161,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["this.sessiontype",{"_index":3223,"title":{},"body":{"classes/XRManager.html":{}}}],["this.setattribute('color",{"_index":2706,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setattribute('counter",{"_index":2707,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setattribute('next",{"_index":2703,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setattribute('position",{"_index":2701,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setattribute('previous",{"_index":2702,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setattribute('side",{"_index":2704,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setattribute('track_id",{"_index":2705,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setclippingenabled(true",{"_index":2620,"title":{},"body":{"classes/StateManager.html":{}}}],["this.setindex(this._attributes.index",{"_index":2708,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setmainrenderer(renderer",{"_index":2319,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.setupvrcontrols",{"_index":2919,"title":{},"body":{"classes/VRManager.html":{}}}],["this.setvalues(params",{"_index":2777,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.shouldcolorbycharge(objectuserdata",{"_index":816,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.side",{"_index":2651,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.startclippingangle.update(angle",{"_index":2629,"title":{},"body":{"classes/StateManager.html":{}}}],["this.startclippingangle.value",{"_index":2605,"title":{},"body":{"classes/StateManager.html":{}}}],["this.statemanager",{"_index":3048,"title":{},"body":{"interfaces/Window.html":{}}}],["this.three.eventdatadepthtest(value",{"_index":1173,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getcolormanager",{"_index":1872,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.three.getcolormanager().collectioncolor(collectionname",{"_index":1192,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.three.getcolormanager().collectioncolorrandom(collectionname",{"_index":1182,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.three.getobjectposition(name",{"_index":1142,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.togglestate",{"_index":1732,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.toload",{"_index":1639,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.length",{"_index":1622,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.push(id",{"_index":1617,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.sort().join",{"_index":1624,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.track_id",{"_index":2653,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.type",{"_index":2647,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.ui",{"_index":2995,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addcollection(objecttype",{"_index":3143,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatafolder",{"_index":3031,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatatypefolder(objecttype",{"_index":3141,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addgeometry(geom",{"_index":3146,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addgeometry(object",{"_index":3065,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addlabel(labelid",{"_index":3200,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addlabelsfolder",{"_index":3032,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.enablekeyboardcontrols",{"_index":3190,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.init(configuration",{"_index":3001,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.loadeventfolderphoenixmenustate",{"_index":3040,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.removelabel(labelid",{"_index":3199,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.updateui",{"_index":3004,"title":{},"body":{"interfaces/Window.html":{}}}],["this.uniforms.linewidth.value",{"_index":2773,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.uniforms.progress.value",{"_index":2776,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.uniforms.resolution.value",{"_index":2774,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.uniforms.resolution.value.copy(value",{"_index":2775,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.urloptions",{"_index":2828,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('config",{"_index":2841,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('embed",{"_index":2872,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('file",{"_index":2837,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('type",{"_index":2838,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('type').tolowercase",{"_index":2839,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get(urloption",{"_index":2878,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptionsmanager",{"_index":3006,"title":{},"body":{"interfaces/Window.html":{}}}],["this.urloptionsmanager.applyoptions",{"_index":3009,"title":{},"body":{"interfaces/Window.html":{}}}],["this.value",{"_index":215,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["this.xractive",{"_index":3229,"title":{},"body":{"classes/XRManager.html":{}}}],["this.xrcamera",{"_index":3238,"title":{},"body":{"classes/XRManager.html":{}}}],["this.xrcamera.name",{"_index":3243,"title":{},"body":{"classes/XRManager.html":{}}}],["this.xrcamera.position",{"_index":3245,"title":{},"body":{"classes/XRManager.html":{}}}],["this.xrcamera.position.addscaledvector(direction",{"_index":2966,"title":{},"body":{"classes/VRManager.html":{}}}],["this.xrcamera?.getworlddirection(direction",{"_index":2964,"title":{},"body":{"classes/VRManager.html":{}}}],["thr",{"_index":3125,"title":{},"body":{"interfaces/Window.html":{}}}],["three",{"_index":136,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"dependencies.html":{}}}],["three,js",{"_index":2294,"title":{},"body":{"classes/RendererManager.html":{}}}],["three.getscenemanager",{"_index":1091,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["three.js",{"_index":55,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["three/examples/jsm/exporters/gltfexporter",{"_index":1412,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/exporters/objexporter",{"_index":1410,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/postprocessing/effectcomposer",{"_index":1299,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/outlinepass",{"_index":1303,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/outlinepass.js",{"_index":2462,"title":{},"body":{"classes/SelectionManager.html":{}}}],["three/examples/jsm/postprocessing/pass",{"_index":1304,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/renderpass",{"_index":1302,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/utils/buffergeometryutils",{"_index":1998,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three/examples/jsm/utils/buffergeometryutils.js",{"_index":1995,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three/examples/jsm/webxr/xrcontrollermodelfactory",{"_index":2910,"title":{},"body":{"classes/VRManager.html":{}}}],["threejs",{"_index":923,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["threemanager",{"_index":1018,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["threemanager(this.infologger",{"_index":2994,"title":{},"body":{"interfaces/Window.html":{}}}],["through",{"_index":280,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["throwing",{"_index":3409,"title":{},"body":{"changelog.html":{}}}],["time",{"_index":228,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["title",{"_index":3916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tmp1",{"_index":940,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["tmp2",{"_index":939,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["toggle",{"_index":1097,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["toggled",{"_index":3493,"title":{},"body":{"changelog.html":{}}}],["toggles",{"_index":1042,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{}}}],["toggleselfanddescendants",{"_index":1660,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggleselfanddescendants(value",{"_index":1701,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["togglestate",{"_index":1651,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggling",{"_index":1664,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["tojson",{"_index":3113,"title":{},"body":{"interfaces/Window.html":{}}}],["toload",{"_index":1586,"title":{},"body":{"classes/LoadingManager.html":{}}}],["top",{"_index":68,"title":{},"body":{"classes/ARManager.html":{},"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{}}}],["totalitems",{"_index":1632,"title":{},"body":{"classes/LoadingManager.html":{}}}],["totalprogress",{"_index":1628,"title":{},"body":{"classes/LoadingManager.html":{}}}],["touch",{"_index":2430,"title":{},"body":{"classes/SelectionManager.html":{}}}],["touchevent",{"_index":2523,"title":{},"body":{"classes/SelectionManager.html":{}}}],["towards",{"_index":2903,"title":{},"body":{"classes/VRManager.html":{}}}],["track",{"_index":339,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"changelog.html":{}}}],["track.children[0",{"_index":508,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["track.color",{"_index":2012,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["track.dparams",{"_index":2001,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["track.extended",{"_index":2004,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["track.material",{"_index":2018,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["track.pos",{"_index":2002,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["track.pos.length",{"_index":2005,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["track.pos?.length",{"_index":2000,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["track.tid",{"_index":2016,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["track.uuid",{"_index":2023,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["track_id",{"_index":2642,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["trackcollection",{"_index":675,"title":{},"body":{"classes/ColorManager.html":{}}}],["trackcollection.children[trackindex].traverse((trackobject",{"_index":678,"title":{},"body":{"classes/ColorManager.html":{}}}],["trackcolor",{"_index":507,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tracking",{"_index":2917,"title":{},"body":{"classes/VRManager.html":{}}}],["trackmlloader",{"_index":3806,"title":{},"body":{"coverage.html":{}}}],["trackobject",{"_index":2056,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["trackobject.add(lineobject",{"_index":2058,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["trackobject.add(tubeobject",{"_index":2057,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["trackobject.uuid",{"_index":2063,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["trackobject?.['material']?.color?.set(colorfortracksvertex",{"_index":679,"title":{},"body":{"classes/ColorManager.html":{}}}],["trackparams",{"_index":1964,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["trackparams.dparams",{"_index":2028,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["trackparams.dparams[3",{"_index":2037,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["trackparams.extended",{"_index":2031,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["trackparams.pos",{"_index":2029,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["trackparams.pos?.length",{"_index":2027,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["trackparams.uuid",{"_index":2062,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["tracks",{"_index":335,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/RKHelper.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["trackscollection",{"_index":2235,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollections",{"_index":2234,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollections[trackscollection",{"_index":2237,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollectionsevent",{"_index":2228,"title":{},"body":{"classes/RKHelper.html":{}}}],["tracksmaterial",{"_index":1996,"title":{"classes/TracksMaterial.html":{}},"body":{"classes/PhoenixObjects.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"coverage.html":{}}}],["tracksmesh",{"_index":251,"title":{"classes/TracksMesh.html":{}},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixObjects.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"coverage.html":{}}}],["tracksmesh.addtrack(vertices",{"_index":2017,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["tracksmesh.process",{"_index":2019,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["tracksobject",{"_index":2020,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["tracksobject.name",{"_index":2022,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["tracksobject.uuid",{"_index":2024,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["transformations",{"_index":3586,"title":{},"body":{"changelog.html":{}}}],["transforming/changing",{"_index":2133,"title":{},"body":{"classes/PresetView.html":{}}}],["translation",{"_index":282,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{}}}],["transparent",{"_index":170,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["traverse",{"_index":330,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["traversed",{"_index":2446,"title":{},"body":{"classes/SelectionManager.html":{}}}],["tree",{"_index":1690,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["true",{"_index":59,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["truncate",{"_index":1661,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["try",{"_index":1485,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["tryrungekuttastep",{"_index":1487,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tryrungekuttastep(state.stepsize",{"_index":1519,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tube",{"_index":2046,"title":{},"body":{"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["tubegeometry",{"_index":239,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixObjects.html":{}}}],["tubegeometry(curve",{"_index":2040,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["tubeobject",{"_index":2042,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["tween",{"_index":236,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["tween.easing(easing",{"_index":278,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.easing(tween.easing.quartic.out).start",{"_index":432,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.easing.cubic.out",{"_index":288,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.js",{"_index":255,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.start",{"_index":461,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.tween",{"_index":361,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.tween(animationclipplane).to",{"_index":459,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.tween(animationsphere).to",{"_index":403,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.tween(eventobject.material).to",{"_index":355,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.tween(particle.material",{"_index":495,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.tween(particle.position",{"_index":498,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.tween(this.activecamera.position).to",{"_index":271,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tweenduration",{"_index":283,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["tweenjs/tween.js",{"_index":249,"title":{},"body":{"interfaces/AnimationPreset.html":{},"dependencies.html":{}}}],["tweens",{"_index":431,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["two",{"_index":471,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/RendererManager.html":{}}}],["type",{"_index":53,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":3882,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typefolder",{"_index":1174,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["typefolder.addchild",{"_index":1853,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["typefolder.addfolder(collectionname",{"_index":1186,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["typefolder.name",{"_index":1870,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["typename",{"_index":1047,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["typeof",{"_index":1762,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["types",{"_index":1707,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["types.ts",{"_index":3887,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["types/three",{"_index":3387,"title":{},"body":{"changelog.html":{}}}],["typing",{"_index":3654,"title":{},"body":{"changelog.html":{}}}],["ui",{"_index":996,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["ui.ts",{"_index":994,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"coverage.html":{}}}],["ui.ts:109",{"_index":1050,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:11",{"_index":2127,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:116",{"_index":1809,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:16",{"_index":2124,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:175",{"_index":1806,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:187",{"_index":1075,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:19",{"_index":1034,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:200",{"_index":1041,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:201",{"_index":1807,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:21",{"_index":1025,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["ui.ts:219",{"_index":1805,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:23",{"_index":1028,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["ui.ts:230",{"_index":1046,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:25",{"_index":1803,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:254",{"_index":1037,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:27",{"_index":1804,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:28",{"_index":2123,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:29",{"_index":1802,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:32",{"_index":1023,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:332",{"_index":1063,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:334",{"_index":1811,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:34",{"_index":1022,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["ui.ts:36",{"_index":1029,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:384",{"_index":1057,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["ui.ts:39",{"_index":1031,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:41",{"_index":1033,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:425",{"_index":1073,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["ui.ts:43",{"_index":1019,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["ui.ts:440",{"_index":1070,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["ui.ts:449",{"_index":1813,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:49",{"_index":1812,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:54",{"_index":2126,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:61",{"_index":2125,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:63",{"_index":1810,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:67",{"_index":1066,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:68",{"_index":2129,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:75",{"_index":2128,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:78",{"_index":1054,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["uiloop",{"_index":3003,"title":{},"body":{"interfaces/Window.html":{}}}],["uimanager",{"_index":1346,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["uimanager(this.graphicslibrary",{"_index":2996,"title":{},"body":{"interfaces/Window.html":{}}}],["uimenu",{"_index":2867,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["uint32array(this.indices_array",{"_index":2683,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["undefined",{"_index":787,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/StateManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["undefined/null",{"_index":1726,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["uniform",{"_index":2721,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["uniforms",{"_index":2764,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["unique",{"_index":1059,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"changelog.html":{}}}],["unit",{"_index":2555,"title":{},"body":{"classes/State.html":{},"classes/VRManager.html":{}}}],["unitc",{"_index":2545,"title":{},"body":{"classes/State.html":{}}}],["units",{"_index":1466,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["unreal",{"_index":1258,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["until",{"_index":1545,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["up",{"_index":546,"title":{},"body":{"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["update",{"_index":198,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["update(updatedvalue",{"_index":210,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["updateanimationsphere",{"_index":406,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["updateanimationsphere.containspoint",{"_index":415,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["updateanimationsphere.containspoint(obj.position",{"_index":421,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["updated",{"_index":150,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["updatedcolorbyoption",{"_index":807,"title":{},"body":{"classes/ColorOptions.html":{}}}],["updatedvalue",{"_index":212,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["updating",{"_index":209,"title":{},"body":{"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{}}}],["upgrade",{"_index":3398,"title":{},"body":{"changelog.html":{}}}],["upper",{"_index":3322,"title":{},"body":{"changelog.html":{}}}],["url",{"_index":863,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["url.createobjecturl(blob",{"_index":3945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urloptions",{"_index":2793,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["urloptionsmanager",{"_index":2791,"title":{"classes/URLOptionsManager.html":{}},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["urloptionsmanager(this",{"_index":3007,"title":{},"body":{"interfaces/Window.html":{}}}],["urloptionwithids",{"_index":2820,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["urlsearchparams",{"_index":2801,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["usage",{"_index":3288,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["use",{"_index":84,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/PhoenixObjects.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":110,"title":{},"body":{"classes/ARManager.html":{},"classes/EffectsManager.html":{},"classes/InfoLogger.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["user",{"_index":3937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata",{"_index":822,"title":{},"body":{"classes/ColorOptions.html":{},"changelog.html":{}}}],["uses",{"_index":944,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"index.html":{}}}],["using",{"_index":254,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["uuid",{"_index":2061,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["v1",{"_index":953,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["v2",{"_index":954,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["v_color",{"_index":2717,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["v_counter",{"_index":2718,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["v_track_id",{"_index":2720,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["val",{"_index":1631,"title":{},"body":{"classes/LoadingManager.html":{},"classes/SelectionManager.html":{}}}],["val.pos.x",{"_index":2246,"title":{},"body":{"classes/RKHelper.html":{}}}],["val.pos.y",{"_index":2247,"title":{},"body":{"classes/RKHelper.html":{}}}],["val.pos.z",{"_index":2248,"title":{},"body":{"classes/RKHelper.html":{}}}],["value",{"_index":58,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":76,"title":{},"body":{"classes/ARManager.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["variable",{"_index":191,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["variable.ts",{"_index":190,"title":{},"body":{"classes/ActiveVariable.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["variable.ts:12",{"_index":206,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:17",{"_index":205,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:23",{"_index":211,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:32",{"_index":208,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:7",{"_index":201,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variables",{"_index":3899,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["varying",{"_index":2716,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vec2",{"_index":2722,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vec2(resolution.x",{"_index":2725,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vec3",{"_index":2713,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vec4",{"_index":2731,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vec4(next",{"_index":2737,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vec4(position",{"_index":2733,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vec4(previous",{"_index":2735,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vec4(v_color",{"_index":2763,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vector",{"_index":946,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/VRManager.html":{}}}],["vector.applyquaternion(coordinatehelper.atlasquaternion",{"_index":948,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["vector.setfromsphericalcoords(radius",{"_index":947,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["vector2",{"_index":1300,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vector2(1",{"_index":2765,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vector2(window.innerwidth",{"_index":1321,"title":{},"body":{"classes/EffectsManager.html":{}}}],["vector3",{"_index":241,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["vector3().fromarray(hitposition",{"_index":416,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["vector3(0",{"_index":385,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{},"classes/State.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["vector3(p[0",{"_index":2006,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vector3(x",{"_index":2084,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["version",{"_index":3273,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["vertex",{"_index":454,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/PhoenixObjects.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["vertexparams",{"_index":1972,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexshader",{"_index":2766,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vertices",{"_index":452,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["vertices.traverse((object",{"_index":668,"title":{},"body":{"classes/ColorManager.html":{}}}],["view",{"_index":866,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["view.model",{"_index":879,"title":{},"body":{"interfaces/Configuration.html":{}}}],["view.model.ts",{"_index":2131,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["view.model.ts:16",{"_index":2151,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:18",{"_index":2146,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:20",{"_index":2147,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:22",{"_index":2152,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:24",{"_index":2148,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:26",{"_index":2150,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:28",{"_index":2143,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:59",{"_index":2153,"title":{},"body":{"classes/PresetView.html":{}}}],["views",{"_index":876,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["visibilitytoggle",{"_index":1232,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["visibilitytoggle.onchange((value",{"_index":1234,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["visible",{"_index":397,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["void",{"_index":112,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/variables.html":{}}}],["volumes",{"_index":3316,"title":{},"body":{"changelog.html":{}}}],["vr",{"_index":2883,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["vrmanager",{"_index":2881,"title":{"classes/VRManager.html":{}},"body":{"classes/VRManager.html":{},"changelog.html":{},"coverage.html":{}}}],["wait",{"_index":2398,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["want",{"_index":2538,"title":{},"body":{"classes/SelectionManager.html":{}}}],["web",{"_index":3871,"title":{},"body":{"properties.html":{}}}],["webglrenderer",{"_index":99,"title":{},"body":{"classes/ARManager.html":{},"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["webglrenderers",{"_index":2287,"title":{},"body":{"classes/RendererManager.html":{}}}],["webpack",{"_index":3363,"title":{},"body":{"changelog.html":{}}}],["webxr",{"_index":145,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["well",{"_index":3330,"title":{},"body":{"changelog.html":{}}}],["whether",{"_index":61,"title":{},"body":{"classes/ARManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"classes/PresetView.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["whose",{"_index":192,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/PhoenixMenuNode.html":{}}}],["widgets",{"_index":2803,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["width",{"_index":1909,"title":{},"body":{"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["window",{"_index":2836,"title":{"interfaces/Window.html":{}},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["window.addeventlistener('resize",{"_index":2341,"title":{},"body":{"classes/RendererManager.html":{}}}],["window.eventdisplay",{"_index":3159,"title":{},"body":{"interfaces/Window.html":{}}}],["window.innerheight",{"_index":1322,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["window.innerwidth",{"_index":2333,"title":{},"body":{"classes/RendererManager.html":{}}}],["window.location.href.substr(window.location.href.lastindexof",{"_index":2829,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["wireframe",{"_index":1096,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["wireframegeometriesmenu",{"_index":1108,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["wireframegeometriesmenu.onchange((value",{"_index":1110,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["wireframing",{"_index":1107,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"changelog.html":{}}}],["within",{"_index":902,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["without",{"_index":336,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/EffectsManager.html":{},"changelog.html":{},"index.html":{}}}],["work",{"_index":147,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["workaround",{"_index":348,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["working",{"_index":3402,"title":{},"body":{"changelog.html":{}}}],["works",{"_index":124,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["wrapper",{"_index":869,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{}}}],["wrong",{"_index":3565,"title":{},"body":{"changelog.html":{}}}],["x",{"_index":272,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixObjects.html":{}}}],["x,y,z",{"_index":867,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixObjects.html":{}}}],["xml",{"_index":3406,"title":{},"body":{"changelog.html":{}}}],["xr",{"_index":89,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["xr_camera",{"_index":3244,"title":{},"body":{"classes/XRManager.html":{}}}],["xractive",{"_index":31,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["xrcamera",{"_index":32,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["xrcontrollermodelfactory",{"_index":2909,"title":{},"body":{"classes/VRManager.html":{}}}],["xrmanager",{"_index":15,"title":{"classes/XRManager.html":{}},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{}}}],["xrmanager:109",{"_index":123,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:135",{"_index":129,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:26",{"_index":108,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:28",{"_index":102,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:30",{"_index":100,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:32",{"_index":91,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:34",{"_index":95,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:36",{"_index":87,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:38",{"_index":109,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:48",{"_index":2907,"title":{},"body":{"classes/VRManager.html":{}}}],["xrmanager:50",{"_index":114,"title":{},"body":{"classes/ARManager.html":{}}}],["xrmanager:53",{"_index":132,"title":{},"body":{"classes/ARManager.html":{}}}],["xrmanager:61",{"_index":2904,"title":{},"body":{"classes/VRManager.html":{}}}],["xrmanager:64",{"_index":111,"title":{},"body":{"classes/ARManager.html":{}}}],["xrmanager:78",{"_index":2908,"title":{},"body":{"classes/VRManager.html":{}}}],["xrmanager:99",{"_index":119,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrsessioninit",{"_index":3384,"title":{},"body":{"changelog.html":{}}}],["xrsessiontype",{"_index":138,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/enumerations.html":{}}}],["xrsessiontype.vr",{"_index":3224,"title":{},"body":{"classes/XRManager.html":{}}}],["xrtype",{"_index":3222,"title":{},"body":{"classes/XRManager.html":{}}}],["y",{"_index":274,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixObjects.html":{}}}],["yarn",{"_index":3848,"title":{},"body":{"index.html":{}}}],["yes",{"_index":126,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/InfoLogger.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["z",{"_index":276,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixObjects.html":{}}}],["z0",{"_index":2242,"title":{},"body":{"classes/RKHelper.html":{}}}],["zero",{"_index":3741,"title":{},"body":{"changelog.html":{}}}],["zoom",{"_index":2048,"title":{},"body":{"classes/PhoenixObjects.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["zoomfactor",{"_index":3132,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomtime",{"_index":3133,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomto(zoomfactor",{"_index":3135,"title":{},"body":{"interfaces/Window.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ARManager.html":{"url":"classes/ARManager.html","title":"class - ARManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ARManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/xr/ar-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                AR manager for AR related operations.\n\n            \n\n            \n                Extends\n            \n            \n                        XRManager\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                enableDomOverlay\n                            \n                            \n                                    Private\n                                previousValues\n                            \n                            \n                                    Static\n                                    Readonly\n                                SESSION_TYPE\n                            \n                            \n                                    Public\n                                cameraGroup\n                            \n                            \n                                    Protected\n                                currentXRSession\n                            \n                            \n                                    Protected\n                                onSessionEnded\n                            \n                            \n                                    Protected\n                                renderer\n                            \n                            \n                                    Protected\n                                sessionInit\n                            \n                            \n                                    Protected\n                                xrActive\n                            \n                            \n                                    Public\n                                xrCamera\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                onXRSessionEnded\n                            \n                            \n                                    Protected\n                                    Async\n                                onXRSessionStarted\n                            \n                            \n                                    Private\n                                scaleScene\n                            \n                            \n                                    Public\n                                endXRSession\n                            \n                            \n                                    Public\n                                getCameraGroup\n                            \n                            \n                                    Public\n                                getXRCamera\n                            \n                            \n                                    Public\n                                setXRSession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scene: Scene, camera: PerspectiveCamera)\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/xr/ar-manager.ts:22\n                            \n                        \n\n                \n                    \n                            Create the AR manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scene\n                                                  \n                                                        \n                                                                    Scene\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The three.js scene.\n\n                                                        \n                                                \n                                                \n                                                        camera\n                                                  \n                                                        \n                                                                    PerspectiveCamera\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Camera in the scene.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        enableDomOverlay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/ar-manager.ts:17\n                        \n                    \n\n            \n                \n                    Whether to enable DOM overlay which shows Phoenix overlays on top of the AR scene.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        previousValues\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    sceneScale: 1,\n    cameraNear: 10,\n  }\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/ar-manager.ts:19\n                        \n                    \n\n            \n                \n                    Previous values of scene scale, camera near and camera position.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        SESSION_TYPE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'immersive-ar'\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/ar-manager.ts:15\n                        \n                    \n\n            \n                \n                    Session type to use for AR.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cameraGroup\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Group\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:36\n\n                        \n                    \n\n            \n                \n                    Group containing the the camera for XR.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        currentXRSession\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:32\n\n                        \n                    \n\n            \n                \n                    Currently active XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onSessionEnded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:34\n\n                        \n                    \n\n            \n                \n                    Callback to call when the XR session ends.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:30\n\n                        \n                    \n\n            \n                \n                    Renderer to set the XR session for.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        sessionInit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:28\n\n                        \n                    \n\n            \n                \n                    Returns required and optional features when requesting an XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        xrActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:26\n\n                        \n                    \n\n            \n                \n                    Whether the XR is currently active or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        xrCamera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:38\n\n                        \n                    \n\n            \n                \n                    The camera used by XR.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        onXRSessionEnded\n                        \n                    \n                \n            \n            \n                \n                    \n                    onXRSessionEnded()\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:64\n\n                \n            \n\n\n            \n                \n                    Callback when the AR session ends.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        onXRSessionStarted\n                        \n                    \n                \n            \n            \n                \n                    \n                    onXRSessionStarted(session: any)\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:50\n\n                \n            \n\n\n            \n                \n                    Callback for when the AR session is started.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The AR session.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        scaleScene\n                        \n                    \n                \n            \n            \n                \n                    \n                    scaleScene(scale: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/xr/ar-manager.ts:75\n                \n            \n\n\n            \n                \n                    Scale the three.js scene.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scale\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Number to scale the scene to.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        endXRSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    endXRSession()\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:99\n\n                \n            \n\n\n            \n                \n                    End the current XR session.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCameraGroup\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraGroup(camera?: Camera)\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:109\n\n                \n            \n\n\n            \n                \n                    Get the group containing the camera for XR.\nXR camera works by adding a Group with Camera to the scene.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Camera which is to be cloned for XR use.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Group\n\n                    \n                    \n                        The camera group used in XR mode.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getXRCamera\n                        \n                    \n                \n            \n            \n                \n                    \n                    getXRCamera()\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:135\n\n                \n            \n\n\n            \n                \n                    Get the camera used by XR.\n\n\n                    \n                    \n                    \n                        Returns :     Camera\n\n                    \n                    \n                        The camera used by XR.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setXRSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    setXRSession(renderer: WebGLRenderer, onSessionStarted?: () => void, onSessionEnded?: () => void)\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:53\n\n                \n            \n\n\n            \n                \n                    Set and configure the XR session.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer to set the XR session for.\n\n                                    \n                                \n                                \n                                    onSessionStarted\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the XR session starts.\n\n                                    \n                                \n                                \n                                    onSessionEnded\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the XR session ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PerspectiveCamera, Scene } from 'three';\nimport { SceneManager } from '../scene-manager';\nimport { XRManager, XRSessionType } from './xr-manager';\n\n// NOTE: This was created on 28/06/2021\n// It might become outdated given how WebXR is still a work in progress\n\n// LAST UPDATED ON 07/07/2021\n\n/**\n * AR manager for AR related operations.\n */\nexport class ARManager extends XRManager {\n  /** Session type to use for AR. */\n  static readonly SESSION_TYPE: string = 'immersive-ar';\n  /** Whether to enable DOM overlay which shows Phoenix overlays on top of the AR scene. */\n  public static enableDomOverlay: boolean = true;\n  /** Previous values of scene scale, camera near and camera position. */\n  private previousValues = {\n    sceneScale: 1,\n    cameraNear: 10,\n  };\n\n  /**\n   * Create the AR manager.\n   * @param scene The three.js scene.\n   * @param camera Camera in the scene.\n   * @override\n   */\n  constructor(private scene: Scene, private camera: PerspectiveCamera) {\n    super(XRSessionType.AR);\n\n    this.previousValues.sceneScale = scene.scale.x;\n    this.previousValues.cameraNear = camera.near;\n    this.sessionInit = () => {\n      return ARManager.enableDomOverlay\n        ? {\n            optionalFeatures: ['dom-overlay'],\n            domOverlay: { root: document.body },\n          }\n        : {};\n    };\n  }\n\n  /**\n   * Callback for when the AR session is started.\n   * @param session The AR session.\n   * @override\n   */\n  protected async onXRSessionStarted(session: any) {\n    document.body.style.setProperty('background-color', 'transparent');\n    this.previousValues.sceneScale = this.scene.scale.x;\n    this.previousValues.cameraNear = this.camera.near;\n    this.scaleScene(0.00001);\n    this.camera.near = 0.01;\n    this.renderer.xr.setReferenceSpaceType('local');\n    await super.onXRSessionStarted(session);\n  }\n\n  /**\n   * Callback when the AR session ends.\n   * @override\n   */\n  protected onXRSessionEnded() {\n    document.body.style.removeProperty('background-color');\n    this.scaleScene(this.previousValues.sceneScale);\n    this.camera.near = this.previousValues.cameraNear;\n    super.onXRSessionEnded();\n  }\n\n  /**\n   * Scale the three.js scene.\n   * @param scale Number to scale the scene to.\n   */\n  private scaleScene(scale: number) {\n    [\n      SceneManager.EVENT_DATA_ID,\n      SceneManager.GEOMETRIES_ID,\n      SceneManager.LABELS_ID,\n    ].forEach((groupName) => {\n      this.scene.getObjectByName(groupName)?.scale.setScalar(scale);\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ActiveVariable.html":{"url":"classes/ActiveVariable.html","title":"class - ActiveVariable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ActiveVariable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/active-variable.ts\n        \n\n\n            \n                Description\n            \n            \n                An active variable whose value can be changed and the change can be observed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                callbacks\n                            \n                            \n                                    Public\n                                    Optional\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                onUpdate\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value?: T)\n                    \n                \n                        \n                            \n                                Defined in src/helpers/active-variable.ts:7\n                            \n                        \n\n                \n                    \n                            Create the observable active variable.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Initial value.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        callbacks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CallbackFunction[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/helpers/active-variable.ts:17\n                        \n                    \n\n            \n                \n                    Callbacks to call on update.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                    \n                        \n                                Defined in src/helpers/active-variable.ts:12\n                        \n                    \n\n            \n                \n                    Initial value.\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        onUpdate\n                        \n                    \n                \n            \n            \n                \n                    \n                    onUpdate(callback: CallbackFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/active-variable.ts:32\n                \n            \n\n\n            \n                \n                    Call a function on updating the value of variable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                CallbackFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call with updated value when the variable is updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(updatedValue: T)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/active-variable.ts:23\n                \n            \n\n\n            \n                \n                    Update the value of variable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    updatedValue\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        New updated value.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export type CallbackFunction = (updatedValue: T) => void;\n\n/**\n * An active variable whose value can be changed and the change can be observed.\n */\nexport class ActiveVariable {\n  /**\n   * Create the observable active variable.\n   * @param value Initial value.\n   */\n  constructor(public value?: T) {}\n\n  /**\n   * Callbacks to call on update.\n   */\n  private callbacks: CallbackFunction[] = [];\n\n  /**\n   * Update the value of variable.\n   * @param updatedValue New updated value.\n   */\n  public update(updatedValue: T) {\n    this.value = updatedValue;\n    this.callbacks.forEach((callback) => callback(updatedValue));\n  }\n\n  /**\n   * Call a function on updating the value of variable.\n   * @param callback Callback to call with updated value when the variable is updated.\n   */\n  public onUpdate(callback: CallbackFunction) {\n    this.callbacks.push(callback);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AnimationPreset.html":{"url":"interfaces/AnimationPreset.html","title":"interface - AnimationPreset","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AnimationPreset\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/animations-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Type for animation preset.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            animateEventAfterInterval\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            collisionDuration\n                                        \n                                \n                                \n                                        \n                                            positions\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        animateEventAfterInterval\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        animateEventAfterInterval:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Time after which to start the event collision animation.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        collisionDuration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        collisionDuration:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Duration of the event collision.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        positions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        positions:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Positions with duration and easing of each tween forming a path.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { SceneManager } from './scene-manager';\nimport {\n  TubeGeometry,\n  BufferGeometry,\n  Vector3,\n  Color,\n  MeshBasicMaterial,\n  Mesh,\n  SphereGeometry,\n  Sphere,\n  Object3D,\n  BufferAttribute,\n  Scene,\n  Camera,\n  Plane,\n  Group,\n} from 'three';\nimport * as TWEEN from '@tweenjs/tween.js';\nimport { RendererManager } from './renderer-manager';\nimport { TracksMesh } from '../../loaders/objects/tracks';\n\n/** Type for animation preset. */\nexport interface AnimationPreset {\n  /** Positions with duration and easing of each tween forming a path. */\n  positions: { position: number[]; duration: number; easing?: any }[];\n  /** Time after which to start the event collision animation. */\n  animateEventAfterInterval?: number;\n  /** Duration of the event collision. */\n  collisionDuration?: number;\n}\n\n/**\n * Manager for managing animation related operations using three.js and tween.js.\n */\nexport class AnimationsManager {\n  /**\n   * Constructor for the animation manager.\n   * @param scene Three.js scene containing all the objects and event data.\n   * @param activeCamera Currently active camera.\n   * @param rendererManager Manager for managing event display's renderer related functions.\n   */\n  constructor(\n    private scene: Scene,\n    private activeCamera: Camera,\n    private rendererManager: RendererManager\n  ) {\n    this.animateEvent = this.animateEvent.bind(this);\n    this.animateEventWithClipping = this.animateEventWithClipping.bind(this);\n  }\n\n  /**\n   * Get the camera tween for animating camera to a position.\n   * @param pos End position of the camera tween.\n   * @param duration Duration of the tween.\n   * @param easing Animation easing of the tween if any.\n   * @returns Tween object of the camera animation.\n   */\n  public getCameraTween(\n    pos: number[],\n    duration: number = 1000,\n    easing?: any\n  ): any {\n    const tween = new TWEEN.Tween(this.activeCamera.position).to(\n      { x: pos[0], y: pos[1], z: pos[2] },\n      duration\n    );\n\n    if (easing) {\n      tween.easing(easing);\n    }\n\n    return tween;\n  }\n\n  /**\n   * Animate the camera through the event scene.\n   * @param startPos Start position of the translation animation.\n   * @param tweenDuration Duration of each tween in the translation animation.\n   * @param onAnimationEnd Callback when the last animation ends.\n   */\n  public animateThroughEvent(\n    startPos: number[],\n    tweenDuration: number,\n    onAnimationEnd?: () => void\n  ) {\n    // Move to start\n    const start = this.getCameraTween(startPos, 1000, TWEEN.Easing.Cubic.Out);\n    // Move to position along the detector axis\n    const alongAxisPosition = [0, 0, startPos[2]];\n    const startXAxis = this.getCameraTween(alongAxisPosition, tweenDuration);\n\n    const radius = 500;\n    const numOfSteps = 24;\n    const angle = 3 * Math.PI;\n    const step = angle / numOfSteps;\n\n    const rotationPositions = [];\n    for (let i = 1; i  onAnimationEnd?.());\n    startClone.delay(500);\n\n    start.chain(startXAxis);\n    startXAxis.chain(rotateStart);\n    rotate.chain(end);\n    end.chain(startClone);\n\n    start.start();\n  }\n\n  /**\n   * Animate the propagation and generation of event data.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Callback when all animations have ended.\n   * @param onAnimationStart Callback when the first animation starts.\n   */\n  public animateEvent(\n    tweenDuration: number,\n    onEnd?: () => void,\n    onAnimationStart?: () => void\n  ) {\n    const extraAnimationSphereDuration = tweenDuration * 0.25;\n    tweenDuration *= 0.75;\n\n    const eventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    const animationSphere = new Sphere(new Vector3(), 0);\n    const objectsToAnimateWithSphere: {\n      eventObject: Object3D;\n      position: any;\n    }[] = [];\n\n    const allTweens = [];\n    // Traverse over all event data\n    eventData.traverse((eventObject: any) => {\n      if (eventObject.geometry) {\n        // Animation for extrapolating tracks without changing scale\n        if (eventObject.name === 'Track' || eventObject.name === 'LineHit') {\n          // Check if geometry drawRange count exists\n          let geometryPosCount =\n            eventObject.geometry?.attributes?.position?.count;\n          if (geometryPosCount) {\n            // WORKAROUND\n            // Changing position count for TubeGeometry because\n            // what we get is not the actual and it has Infinity drawRange count\n            if (eventObject.geometry instanceof TubeGeometry) {\n              geometryPosCount *= 6;\n            }\n\n            if (eventObject.geometry instanceof TracksMesh) {\n              eventObject.material.progress = 0;\n              const eventObjectTween = new TWEEN.Tween(eventObject.material).to(\n                {\n                  progress: 1,\n                },\n                tweenDuration\n              );\n              eventObjectTween.onComplete(() => {\n                eventObject.material.progress = 1;\n              });\n              allTweens.push(eventObjectTween);\n            } else if (eventObject.geometry instanceof BufferGeometry) {\n              const oldDrawRangeCount = eventObject.geometry.drawRange.count;\n              eventObject.geometry.setDrawRange(0, 0);\n              const eventObjectTween = new TWEEN.Tween(\n                eventObject.geometry.drawRange\n              ).to(\n                {\n                  count: geometryPosCount,\n                },\n                tweenDuration\n              );\n              eventObjectTween.onComplete(() => {\n                eventObject.geometry.drawRange.count = oldDrawRangeCount;\n              });\n              allTweens.push(eventObjectTween);\n            }\n          }\n        }\n        // Animation for scaling out objects with or without position\n        else if (eventObject.name === 'Jet') {\n          const scaleTween = new TWEEN.Tween({\n            x: 0.01,\n            y: 0.01,\n            z: 0.01,\n          }).to(\n            {\n              x: eventObject.scale.x,\n              y: eventObject.scale.y,\n              z: eventObject.scale.z,\n            },\n            tweenDuration\n          );\n          // Manually updating scale since we need to change position\n          scaleTween.onUpdate((updatedScale: Vector3) => {\n            const previousScale = eventObject.scale.x;\n            eventObject.scale.setScalar(updatedScale.x);\n            // Restoring to original position and then moving again with the current value\n            eventObject.position\n              .divideScalar(previousScale)\n              .multiplyScalar(updatedScale.x);\n          });\n          allTweens.push(scaleTween);\n        } else {\n          const hasPosition = !eventObject.position.equals(\n            new Vector3(0, 0, 0)\n          );\n          let position = hasPosition\n            ? eventObject.position\n            : eventObject.geometry.boundingSphere.center;\n\n          // Edit geometry for hits\n          if (eventObject.name === 'Hit') {\n            position = Array.from(\n              eventObject.geometry.attributes['position'].array\n            );\n            eventObject.geometry.deleteAttribute('position');\n            eventObject.geometry.computeBoundingSphere();\n          } else {\n            // Making the object invisible and will make visible\n            // once the animation sphere reaches the object\n            eventObject.visible = false;\n          }\n\n          objectsToAnimateWithSphere.push({\n            eventObject: eventObject,\n            position: position,\n          });\n        }\n      }\n    });\n\n    // Tween for the animation sphere\n    const animationSphereTween = new TWEEN.Tween(animationSphere).to(\n      { radius: 3000 },\n      tweenDuration\n    );\n\n    const onAnimationSphereUpdate = (updateAnimationSphere: Sphere) => {\n      objectsToAnimateWithSphere.forEach((obj) => {\n        if (obj.eventObject.name === 'Hit') {\n          const geometry = (obj.eventObject as any).geometry;\n\n          const hitsPositions = this.getHitsPositions(obj.position);\n          const reachedHits = hitsPositions.filter((hitPosition) =>\n            updateAnimationSphere.containsPoint(\n              new Vector3().fromArray(hitPosition)\n            )\n          );\n\n          if (reachedHits.length > 0) {\n            geometry.setAttribute(\n              'position',\n              new BufferAttribute(\n                new Float32Array([].concat(...reachedHits)),\n                3\n              )\n            );\n            geometry.computeBoundingSphere();\n          }\n        } else if (updateAnimationSphere.containsPoint(obj.position)) {\n          obj.eventObject.visible = true;\n        }\n      });\n    };\n\n    animationSphereTween.onUpdate(onAnimationSphereUpdate);\n\n    // Animation sphere tween after covering the tracks\n    const animationSphereTweenClone = new TWEEN.Tween(animationSphere).to(\n      { radius: 10000 },\n      extraAnimationSphereDuration\n    );\n    animationSphereTweenClone.onUpdate(onAnimationSphereUpdate);\n\n    animationSphereTween.chain(animationSphereTweenClone);\n\n    allTweens.push(animationSphereTween);\n\n    // Call onAnimationStart when the first tween starts\n    allTweens[0].onStart(() => onAnimationStart?.());\n\n    // Start all tweens\n    for (const tween of allTweens) {\n      tween.easing(TWEEN.Easing.Quartic.Out).start();\n    }\n\n    // Call onEnd when the last tween completes\n    animationSphereTweenClone.onComplete(() => {\n      // Restore all remaining event data items\n      onAnimationSphereUpdate(new Sphere(new Vector3(), Infinity));\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data using clipping planes.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   * @param onAnimationStart Callback when the first animation starts.\n   * @param clippingConstant Constant for the clipping planes for distance from the origin.\n   */\n  public animateEventWithClipping(\n    tweenDuration: number,\n    onEnd?: () => void,\n    onAnimationStart?: () => void,\n    clippingConstant: number = 11000\n  ) {\n    const allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    // Sphere to get spherical set of clipping planes from\n    const sphere = new SphereGeometry(1, 8, 8);\n    // Clipping planes for animation\n    const animationClipPlanes: Plane[] = [];\n\n    // Get clipping planes from the vertices of sphere\n    const position = sphere.attributes.position;\n    const vertex = new Vector3();\n    for (let i = 0; i  {\n      if (eventObject.geometry && eventObject.material) {\n        eventObject.material.clippingPlanes = animationClipPlanes;\n      }\n    });\n\n    const allTweens = [];\n    // Create tweens for the animation clipping planes\n    for (const animationClipPlane of animationClipPlanes) {\n      animationClipPlane.constant = 0;\n      const tween = new TWEEN.Tween(animationClipPlane).to(\n        { constant: clippingConstant },\n        tweenDuration\n      );\n      allTweens.push(tween);\n    }\n\n    allTweens[0].onStart(() => onAnimationStart?.());\n\n    // Start all the tweens\n    for (const tween of allTweens) {\n      tween.start();\n    }\n\n    allTweens[allTweens.length - 1].onComplete(() => {\n      // Revert local clipping of the renderer\n      if (!prevLocalClipping) {\n        this.rendererManager.getMainRenderer().localClippingEnabled =\n          prevLocalClipping /* false */;\n      }\n      // Remove the applied clipping planes from the event data objects\n      allEventData.traverse((eventObject: any) => {\n        if (eventObject.geometry && eventObject.material) {\n          eventObject.material.clippingPlanes = null;\n        }\n      });\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the collision of two particles.\n   * @param tweenDuration Duration of the particle collision animation tween.\n   * @param particleSize Size of the particles.\n   * @param distanceFromOrigin Distance of the particles (along z-axes) from the origin.\n   * @param particleColor Color of the particles.\n   * @param onEnd Callback to call when the particle collision ends.\n   */\n  public collideParticles(\n    tweenDuration: number,\n    particleSize: number = 10,\n    distanceFromOrigin: number = 5000,\n    particleColor: Color = new Color(0xffffff),\n    onEnd?: () => void\n  ) {\n    const particleGeometry = new SphereGeometry(particleSize, 32, 32);\n    const particleMaterial = new MeshBasicMaterial({\n      color: particleColor,\n      transparent: true,\n      opacity: 0,\n    });\n\n    const particle1 = new Mesh(particleGeometry, particleMaterial);\n    const particle2 = particle1.clone() as Mesh;\n\n    particle1.position.setZ(distanceFromOrigin);\n    particle2.position.setZ(-distanceFromOrigin);\n\n    const particles = [particle1, particle2];\n\n    this.scene.add(...particles);\n\n    const particleTweens = [];\n\n    for (const particle of particles) {\n      new TWEEN.Tween(particle.material)\n        .to(\n          {\n            opacity: 1,\n          },\n          300\n        )\n        .start();\n\n      const particleToOrigin = new TWEEN.Tween(particle.position)\n        .to(\n          {\n            z: 0,\n          },\n          tweenDuration\n        )\n        .start();\n\n      particleTweens.push(particleToOrigin);\n    }\n\n    particleTweens[0].onComplete(() => {\n      this.scene.remove(...particles);\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param animationFunction Animation function to call after collision.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateWithCollision(\n    animationFunction: (\n      tweenDuration: number,\n      onEnd?: () => void,\n      onAnimationStart?: () => void\n    ) => void,\n    tweenDuration: number,\n    onEnd?: () => void\n  ) {\n    const allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    // Get the color of the first track to use for colliding particles\n    const track = allEventData.getObjectByName('Track');\n    let trackColor: Color;\n    if (track instanceof Group) {\n      trackColor = (track.children[0] as any)?.material?.color;\n    } else {\n      trackColor = (track as any)?.material.color;\n    }\n\n    // Hide event data to show particles collision\n    if (allEventData) {\n      allEventData.visible = false;\n    }\n\n    this.collideParticles(1500, 30, 5000, trackColor, () => {\n      animationFunction(tweenDuration, onEnd, () => {\n        if (allEventData) {\n          allEventData.visible = true;\n        }\n      });\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateEventWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.animateWithCollision(this.animateEvent, tweenDuration, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data\n   * using clipping planes after particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateClippingWithCollision(\n    tweenDuration: number,\n    onEnd?: () => void\n  ) {\n    this.animateWithCollision(\n      this.animateEventWithClipping,\n      tweenDuration,\n      onEnd\n    );\n  }\n\n  /**\n   * Get the positions of hits in a multidimensional array\n   * from a single dimensional array.\n   * @param positions Positions of hits in a single dimensional array.\n   * @returns Positions of hits in a multidimensional array.\n   */\n  private getHitsPositions(positions: number[]): number[][] {\n    const hitsPositions: number[][] = [];\n    for (let i = 0; i  void) {\n    const { positions, animateEventAfterInterval, collisionDuration } =\n      animationPreset;\n\n    if (animateEventAfterInterval && collisionDuration) {\n      // Will be made visible after collision animation ends.\n      this.scene.getObjectByName(SceneManager.EVENT_DATA_ID).visible = false;\n      setTimeout(() => {\n        this.animateEventWithCollision(collisionDuration);\n      }, animateEventAfterInterval);\n    }\n\n    const firstTween = this.getCameraTween(\n      positions[0].position,\n      positions[0].duration ?? 2000,\n      positions[0].easing\n    );\n\n    let previousTween = firstTween;\n    positions.slice(1).forEach(({ position, duration, easing }) => {\n      const tween = this.getCameraTween(position, duration ?? 2000, easing);\n      previousTween.chain(tween);\n      previousTween = tween;\n    });\n    previousTween.onComplete(onEnd);\n\n    firstTween.start();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CMSObjects.html":{"url":"classes/CMSObjects.html","title":"class - CMSObjects","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CMSObjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/cms-objects.ts\n        \n\n\n            \n                Description\n            \n            \n                Physics objects that make up an event in CMS that are not a part of PhoenixObjects.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getMuonChamber\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getMuonChamber\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuonChamber(muonChamberParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/cms-objects.ts:25\n                \n            \n\n\n            \n                \n                    Process the Muon Chamber from the given parameters.\nand get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonChamberParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon Chamber.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon Chamber object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Object3D,\n  Group,\n  Mesh,\n  MeshBasicMaterial,\n  EdgesGeometry,\n  LineBasicMaterial,\n  DoubleSide,\n  LineSegments,\n  BufferGeometry,\n  BufferAttribute,\n} from 'three';\nimport { EVENT_DATA_TYPE_COLORS } from '../../helpers/constants';\n\n/**\n * Physics objects that make up an event in CMS that are not a part of {@link PhoenixObjects}.\n */\nexport class CMSObjects {\n  /**\n   * Process the Muon Chamber from the given parameters.\n   * and get it as a geometry.\n   * @param muonChamberParams Parameters of the Muon Chamber.\n   * @returns Muon Chamber object.\n   */\n  public static getMuonChamber(muonChamberParams: any): Object3D {\n    let allFacePositions: number[] = [];\n\n    const addFace3 = (...faces: string[]) => {\n      allFacePositions = allFacePositions.concat(\n        ...faces.map((face) => muonChamberParams[face])\n      );\n    };\n\n    // front\n    addFace3('front_1', 'front_2', 'front_3');\n    addFace3('front_3', 'front_4', 'front_1');\n\n    // back\n    addFace3('back_1', 'back_2', 'back_3');\n    addFace3('back_3', 'back_4', 'back_1');\n\n    // top\n    addFace3('back_1', 'back_2', 'front_2');\n    addFace3('front_2', 'front_1', 'back_1');\n\n    // bottom\n    addFace3('back_4', 'back_3', 'front_3');\n    addFace3('front_3', 'front_4', 'back_4');\n\n    // left\n    addFace3('front_1', 'front_4', 'back_4');\n    addFace3('back_4', 'back_1', 'front_1');\n\n    // right\n    addFace3('front_2', 'back_2', 'back_3');\n    addFace3('back_3', 'front_3', 'front_2');\n\n    const boxBuffer = new BufferGeometry();\n    boxBuffer.attributes.position = new BufferAttribute(\n      new Float32Array(allFacePositions),\n      3\n    );\n    boxBuffer.computeVertexNormals();\n\n    const boxObject = new Mesh(\n      boxBuffer,\n      new MeshBasicMaterial({\n        color: muonChamberParams.color ?? EVENT_DATA_TYPE_COLORS.MuonChambers,\n        transparent: true,\n        opacity: 0.1,\n        side: DoubleSide,\n      })\n    );\n\n    boxObject.userData = Object.assign({}, muonChamberParams);\n    boxObject.name = 'MuonChamber';\n\n    // These are the lines along the box edges\n\n    const boxEdges = new EdgesGeometry(boxBuffer);\n    const lineBoxObject = new LineSegments(\n      boxEdges,\n      new LineBasicMaterial({\n        color: 0xffffff,\n        transparent: true,\n        opacity: 0.7,\n      })\n    );\n\n    const muonChamber = new Group();\n    muonChamber.add(boxObject);\n    muonChamber.add(lineBoxObject);\n\n    muonChamberParams.uuid = boxObject.uuid;\n\n    return muonChamber;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ColorManager.html":{"url":"classes/ColorManager.html","title":"class - ColorManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ColorManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/color-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Color manager for three.js functions related to coloring of objects.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                collectionColor\n                            \n                            \n                                    Public\n                                collectionColorRandom\n                            \n                            \n                                colorObjectsByProperty\n                            \n                            \n                                    Public\n                                colorTracksByVertex\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sceneManager: SceneManager)\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/color-manager.ts:7\n                            \n                        \n\n                \n                    \n                            Create the coloring manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sceneManager\n                                                  \n                                                        \n                                                                        SceneManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The scene manager responsible for managing the three.js scene.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        collectionColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    collectionColor(collectionName: string, color: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/color-manager.ts:38\n                \n            \n\n\n            \n                \n                    Changes the color of all objects inside an event data collection.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Hex value representing the color.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        collectionColorRandom\n                        \n                    \n                \n            \n            \n                \n                    \n                    collectionColorRandom(collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/color-manager.ts:55\n                \n            \n\n\n            \n                \n                    Changes the color of all objects inside an event data collection to some random color.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        colorObjectsByProperty\n                        \n                    \n                \n            \n            \n                \ncolorObjectsByProperty(color: any, objectsGroup: string, customCheck: (objectUserData: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/color-manager.ts:20\n                \n            \n\n\n            \n                \n                    Color objects by a property's value or range.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Color to set for the object.\n\n                                    \n                                \n                                \n                                    objectsGroup\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the object(s) group to color.\n\n                                    \n                                \n                                \n                                    customCheck\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to custom check values against object params.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        colorTracksByVertex\n                        \n                    \n                \n            \n            \n                \n                    \n                    colorTracksByVertex(collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/color-manager.ts:72\n                \n            \n\n\n            \n                \n                    Randomly color tracks by the vertex they are associated with.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Color, MeshPhongMaterial } from 'three';\nimport { SceneManager } from './scene-manager';\n\n/**\n * Color manager for three.js functions related to coloring of objects.\n */\nexport class ColorManager {\n  /**\n   * Create the coloring manager.\n   * @param sceneManager The scene manager responsible for managing the three.js scene.\n   */\n  constructor(private sceneManager: SceneManager) {}\n\n  /**\n   * Color objects by a property's value or range.\n   * @param color Color to set for the object.\n   * @param objectsGroup Name of the object(s) group to color.\n   * @param customCheck Function to custom check values against object params.\n   */\n  colorObjectsByProperty(\n    color: any,\n    objectsGroup: string,\n    customCheck: (objectUserData: any) => boolean\n  ) {\n    const objects = this.sceneManager.getScene().getObjectByName(objectsGroup);\n    objects.traverse((object: any) => {\n      if (object.material?.color && customCheck(object.userData)) {\n        object.material.color.set(color);\n      }\n    });\n  }\n\n  /**\n   * Changes the color of all objects inside an event data collection.\n   * @param collectionName Name of the collection.\n   * @param color Hex value representing the color.\n   */\n  public collectionColor(collectionName: string, color: any) {\n    const collection = this.sceneManager\n      .getScene()\n      .getObjectByName(SceneManager.EVENT_DATA_ID)\n      .getObjectByName(collectionName);\n\n    for (const child of Object.values(collection.children)) {\n      child.traverse((object) => {\n        (object['material']?.color as Color)?.set(color);\n      });\n    }\n  }\n\n  /**\n   * Changes the color of all objects inside an event data collection to some random color.\n   * @param collectionName Name of the collection.\n   */\n  public collectionColorRandom(collectionName: string) {\n    const collection = this.sceneManager\n      .getScene()\n      .getObjectByName(SceneManager.EVENT_DATA_ID)\n      .getObjectByName(collectionName);\n\n    for (const child of Object.values(collection.children)) {\n      child.traverse((object) => {\n        (object['material']?.color as Color)?.set(Math.random() * 0xffffff);\n      });\n    }\n  }\n\n  /**\n   * Randomly color tracks by the vertex they are associated with.\n   * @param collectionName Name of the collection.\n   */\n  public colorTracksByVertex(collectionName: string) {\n    const scene = this.sceneManager.getScene();\n    const vertices = scene.getObjectByName('Vertices');\n    vertices.traverse((object) => {\n      const { linkedTrackCollection, linkedTracks } = object.userData;\n\n      if (\n        object.name === 'Vertex' &&\n        linkedTrackCollection === collectionName &&\n        linkedTracks\n      ) {\n        const colorForTracksVertex = (object['material'] as MeshPhongMaterial)\n          .color;\n        const trackCollection = scene.getObjectByName(linkedTrackCollection);\n\n        linkedTracks.forEach((trackIndex: number) => {\n          trackCollection.children[trackIndex].traverse((trackObject) => {\n            trackObject?.['material']?.color?.set(colorForTracksVertex);\n          });\n        });\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ColorOptions.html":{"url":"classes/ColorOptions.html","title":"class - ColorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ColorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/ui-manager/color-options.ts\n        \n\n\n            \n                Description\n            \n            \n                Color options with functions to color event data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                allColorByOptions\n                            \n                            \n                                    Private\n                                chargeColors\n                            \n                            \n                                    Private\n                                collectionName\n                            \n                            \n                                    Private\n                                colorByOptions\n                            \n                            \n                                    Private\n                                colorOptionsFolder\n                            \n                            \n                                    Private\n                                momColors\n                            \n                            \n                                    Private\n                                selectedColorByOption\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                applyChargeColorOptions\n                            \n                            \n                                    Private\n                                applyMomColorOptions\n                            \n                            \n                                    Private\n                                applyVertexColorOptions\n                            \n                            \n                                    Private\n                                colorByMomentum\n                            \n                            \n                                    Private\n                                getMomentum\n                            \n                            \n                                    Private\n                                initChargeColorOptions\n                            \n                            \n                                    Private\n                                initColorByOptions\n                            \n                            \n                                    Private\n                                initMomColorOptions\n                            \n                            \n                                    Private\n                                onlySelectedColorByOption\n                            \n                            \n                                    Private\n                                shouldColorByCharge\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorManager: ColorManager, collectionFolder: PhoenixMenuNode, collectionColor: Color, colorByOptionsToInclude?: ColorByOptionKeys[])\n                    \n                \n                        \n                            \n                                Defined in src/managers/ui-manager/color-options.ts:74\n                            \n                        \n\n                \n                    \n                            Create the color options.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        colorManager\n                                                  \n                                                        \n                                                                        ColorManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Color manager for three.js functions related to coloring of objects.\n\n                                                        \n                                                \n                                                \n                                                        collectionFolder\n                                                  \n                                                        \n                                                                        PhoenixMenuNode\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Collection folder to add the color by options to.\n\n                                                        \n                                                \n                                                \n                                                        collectionColor\n                                                  \n                                                        \n                                                                    Color\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        colorByOptionsToInclude\n                                                  \n                                                        \n                                                                        ColorByOptionKeys[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Options to include for this collection to color event data by.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        allColorByOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ColorByOption[]\n\n                    \n                \n                \n                    \n                        Default value : [\n    {\n      key: ColorByOptionKeys.CHARGE,\n      name: 'Charge ' + PrettySymbols.getPrettySymbol('charge'),\n      initialize: this.initChargeColorOptions.bind(this),\n      apply: this.applyChargeColorOptions.bind(this),\n    },\n    {\n      key: ColorByOptionKeys.MOM,\n      name: 'Momentum ' + PrettySymbols.getPrettySymbol('mom'),\n      initialize: this.initMomColorOptions.bind(this),\n      apply: this.applyMomColorOptions.bind(this),\n    },\n    {\n      key: ColorByOptionKeys.VERTEX,\n      name: 'Vertex',\n      apply: this.applyVertexColorOptions.bind(this),\n    },\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:35\n                        \n                    \n\n            \n                \n                    All color by options possible.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        chargeColors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    '-1': '#ff0000',\n    '0': '#ff0000',\n    '1': '#ff0000',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:57\n                        \n                    \n\n            \n                \n                    Default values for colors for color by charge.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        collectionName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:26\n                        \n                    \n\n            \n                \n                    Collection name of the event data type.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        colorByOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ColorByOption[]\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:28\n                        \n                    \n\n            \n                \n                    Available options to color by in this instance of color options.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        colorOptionsFolder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:32\n                        \n                    \n\n            \n                \n                    Phoenix menu node containing color configurations.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        momColors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    min: {\n      value: 0,\n      color: '#ff0000',\n    },\n    max: {\n      value: 50000,\n      color: '#ff0000',\n    },\n  }\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:65\n                        \n                    \n\n            \n                \n                    Default values for colors and min/max for color by momentum.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedColorByOption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ColorByOptionKeys\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:30\n                        \n                    \n\n            \n                \n                    Currently selected option to color by.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        applyChargeColorOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyChargeColorOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:176\n                \n            \n\n\n            \n                \n                    Apply charge color options.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        applyMomColorOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyMomColorOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:246\n                \n            \n\n\n            \n                \n                    Apply momentum color options.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        applyVertexColorOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyVertexColorOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:293\n                \n            \n\n\n            \n                \n                    Apply color by vertex to tracks.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        colorByMomentum\n                        \n                    \n                \n            \n            \n                \n                    \n                    colorByMomentum(minOrMax: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:256\n                \n            \n\n\n            \n                \n                    Color event data based on the momentum property of each object.\nThis is to apply the stored momentum colors for minimum and maximum separated at the mid value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    minOrMax\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the momentum to color objects by is minimum or maximum momentum.\nThis is to apply the stored momentum colors for minimum and maximum separated at the mid value.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getMomentum\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMomentum(objectParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:282\n                \n            \n\n\n            \n                \n                    Get momentum from object parameters.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters associated to the 3D object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        THe momentum value.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        initChargeColorOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    initChargeColorOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:150\n                \n            \n\n\n            \n                \n                    Initialize charge color options.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        initColorByOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    initColorByOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:124\n                \n            \n\n\n            \n                \n                    Initialize the color options.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        initMomColorOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    initMomColorOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:207\n                \n            \n\n\n            \n                \n                    Initialize momentum color options.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        onlySelectedColorByOption\n                        \n                    \n                \n            \n            \n                \n                    \n                    onlySelectedColorByOption()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:300\n                \n            \n\n\n            \n                \n                    Show configs of only the currently selected color by option.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        shouldColorByCharge\n                        \n                    \n                \n            \n            \n                \n                    \n                    shouldColorByCharge(objectParams: any, chargeValue: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:193\n                \n            \n\n\n            \n                \n                    Check if object should be colored based on charge value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object parameters associated to the 3D object.\n\n                                    \n                                \n                                \n                                    chargeValue\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value of charge (-1, 0, 1).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Whether the charge is equal to the value.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Color } from 'three';\nimport { PrettySymbols } from '../../helpers/pretty-symbols';\nimport { ColorManager } from '../three-manager/color-manager';\nimport { PhoenixMenuNode } from './phoenix-menu/phoenix-menu-node';\n\n/** Keys for options available for coloring event data by. */\nexport enum ColorByOptionKeys {\n  CHARGE = 'charge',\n  MOM = 'mom',\n  VERTEX = 'vertex',\n}\n\n/** Type for a single color by option. */\ntype ColorByOption = {\n  key: ColorByOptionKeys;\n  name: string;\n  initialize?: () => void;\n  apply?: () => void;\n};\n\n/**\n * Color options with functions to color event data.\n */\nexport class ColorOptions {\n  /** Collection name of the event data type. */\n  private collectionName: string;\n  /** Available options to color by in this instance of color options. */\n  private colorByOptions: ColorByOption[];\n  /** Currently selected option to color by. */\n  private selectedColorByOption: ColorByOptionKeys;\n  /** Phoenix menu node containing color configurations. */\n  private colorOptionsFolder: PhoenixMenuNode;\n\n  /** All color by options possible. */\n  private allColorByOptions: ColorByOption[] = [\n    {\n      key: ColorByOptionKeys.CHARGE,\n      name: 'Charge ' + PrettySymbols.getPrettySymbol('charge'),\n      initialize: this.initChargeColorOptions.bind(this),\n      apply: this.applyChargeColorOptions.bind(this),\n    },\n    {\n      key: ColorByOptionKeys.MOM,\n      name: 'Momentum ' + PrettySymbols.getPrettySymbol('mom'),\n      initialize: this.initMomColorOptions.bind(this),\n      apply: this.applyMomColorOptions.bind(this),\n    },\n    {\n      key: ColorByOptionKeys.VERTEX,\n      name: 'Vertex',\n      apply: this.applyVertexColorOptions.bind(this),\n    },\n  ];\n\n  // Charge options.\n  /** Default values for colors for color by charge. */\n  private chargeColors = {\n    '-1': '#ff0000',\n    '0': '#ff0000',\n    '1': '#ff0000',\n  };\n\n  // Momentum options.\n  /** Default values for colors and min/max for color by momentum. */\n  private momColors = {\n    min: {\n      value: 0,\n      color: '#ff0000',\n    },\n    max: {\n      value: 50000,\n      color: '#ff0000',\n    },\n  };\n\n  /**\n   * Create the color options.\n   * @param colorManager Color manager for three.js functions related to coloring of objects.\n   * @param collectionFolder Collection folder to add the color by options to.\n   * @param colorByOptionsToInclude Options to include for this collection to color event data by.\n   */\n  constructor(\n    private colorManager: ColorManager,\n    collectionFolder: PhoenixMenuNode,\n    collectionColor: Color,\n    colorByOptionsToInclude?: ColorByOptionKeys[]\n  ) {\n    this.collectionName = collectionFolder.name;\n    this.colorOptionsFolder = collectionFolder.addChild('Color Options');\n\n    this.colorOptionsFolder.addConfig('color', {\n      label: 'Color',\n      color: collectionColor\n        ? `#${collectionColor?.getHexString()}`\n        : undefined,\n      onChange: (value) =>\n        this.colorManager.collectionColor(this.collectionName, value),\n    });\n\n    this.colorOptionsFolder.addConfig('button', {\n      label: 'Random',\n      onClick: () =>\n        this.colorManager.collectionColorRandom(this.collectionName),\n    });\n\n    // Check which color by options are to be included.\n\n    if (colorByOptionsToInclude?.length > 0) {\n      this.colorByOptions = this.allColorByOptions.filter((colorByOption) =>\n        colorByOptionsToInclude.includes(colorByOption.key)\n      );\n\n      this.initColorByOptions();\n      this.colorByOptions.forEach((colorByOption) =>\n        colorByOption.initialize?.()\n      );\n      this.onlySelectedColorByOption();\n    }\n  }\n\n  /**\n   * Initialize the color options.\n   */\n  private initColorByOptions() {\n    this.selectedColorByOption = this.colorByOptions[0].key;\n\n    // Configurations\n\n    this.colorOptionsFolder.addConfig('select', {\n      label: 'Color by',\n      options: this.colorByOptions.map((colorByOption) => colorByOption.name),\n      onChange: (updatedColorByOption) => {\n        const newColorByOption = this.colorByOptions.find(\n          (colorByOption) => colorByOption.name === updatedColorByOption\n        );\n\n        this.selectedColorByOption = newColorByOption?.key;\n        newColorByOption?.apply?.();\n\n        this.onlySelectedColorByOption();\n      },\n    });\n  }\n\n  // Charge options.\n\n  /**\n   * Initialize charge color options.\n   */\n  private initChargeColorOptions() {\n    // Charge configurations\n    [-1, 0, 1].forEach((chargeValue) => {\n      this.colorOptionsFolder.addConfig('color', {\n        label: `${PrettySymbols.getPrettySymbol('charge')}=${chargeValue}`,\n        group: ColorByOptionKeys.CHARGE,\n        color: this.chargeColors[chargeValue],\n        onChange: (color) => {\n          this.chargeColors[chargeValue] = color;\n\n          if (this.selectedColorByOption === ColorByOptionKeys.CHARGE) {\n            this.colorManager.colorObjectsByProperty(\n              color,\n              this.collectionName,\n              (objectUserData) =>\n                this.shouldColorByCharge(objectUserData, chargeValue)\n            );\n          }\n        },\n      });\n    });\n  }\n\n  /**\n   * Apply charge color options.\n   */\n  private applyChargeColorOptions() {\n    [-1, 0, 1].forEach((chargeValue) => {\n      this.colorManager.colorObjectsByProperty(\n        this.chargeColors[chargeValue],\n        this.collectionName,\n        (objectUserData) =>\n          this.shouldColorByCharge(objectUserData, chargeValue)\n      );\n    });\n  }\n\n  /**\n   * Check if object should be colored based on charge value.\n   * @param objectParams Object parameters associated to the 3D object.\n   * @param chargeValue Value of charge (-1, 0, 1).\n   * @returns Whether the charge is equal to the value.\n   */\n  private shouldColorByCharge(objectParams: any, chargeValue: number) {\n    // For ATLAS data, the charge is calculated from dparams[4] otherwise it exists as an object's userData\n    if (Math.sign(1 / parseInt(objectParams?.dparams?.[4])) === chargeValue) {\n      return true;\n    } else if (objectParams?.charge === chargeValue) {\n      return true;\n    }\n  }\n\n  // Momentum options.\n\n  /**\n   * Initialize momentum color options.\n   */\n  private initMomColorOptions() {\n    // Momentum configurations\n    Object.entries(this.momColors).forEach(([key, momValue]) => {\n      this.colorOptionsFolder.addConfig('slider', {\n        label: PrettySymbols.getPrettySymbol('mom') + ' ' + key,\n        group: ColorByOptionKeys.MOM,\n        min: this.momColors.min.value,\n        max: this.momColors.max.value,\n        value: this.momColors[key].value,\n        step: 10,\n        allowCustomValue: true,\n        onChange: (sliderValue) => {\n          this.momColors[key].value = sliderValue;\n\n          if (this.selectedColorByOption === ColorByOptionKeys.MOM) {\n            this.colorByMomentum('min');\n            this.colorByMomentum('max');\n          }\n        },\n      });\n\n      this.colorOptionsFolder.addConfig('color', {\n        label: PrettySymbols.getPrettySymbol('mom') + ' ' + key + ' color',\n        group: ColorByOptionKeys.MOM,\n        color: momValue.color,\n        onChange: (color) => {\n          this.momColors[key].color = color;\n\n          if (this.selectedColorByOption === ColorByOptionKeys.MOM) {\n            this.colorByMomentum(key);\n          }\n        },\n      });\n    });\n  }\n\n  /**\n   * Apply momentum color options.\n   */\n  private applyMomColorOptions() {\n    this.colorByMomentum('min');\n    this.colorByMomentum('max');\n  }\n\n  /**\n   * Color event data based on the momentum property of each object.\n   * @param minOrMax If the momentum to color objects by is minimum or maximum momentum.\n   * This is to apply the stored momentum colors for minimum and maximum separated at the mid value.\n   */\n  private colorByMomentum(minOrMax: string) {\n    this.colorManager.colorObjectsByProperty(\n      this.momColors[minOrMax].color,\n      this.collectionName,\n      (objectParams) => {\n        const mom = this.getMomentum(objectParams);\n        const mid = (this.momColors.min.value + this.momColors.max.value) / 2;\n\n        if (minOrMax === 'max' && mom > mid && mom  this.momColors.min.value\n        ) {\n          return true;\n        }\n      }\n    );\n  }\n\n  /**\n   * Get momentum from object parameters.\n   * @param objectParams Parameters associated to the 3D object.\n   * @returns THe momentum value.\n   */\n  private getMomentum(objectParams: any) {\n    return objectParams?.dparams?.[4]\n      ? Math.abs(1 / parseFloat(objectParams?.dparams?.[4]))\n      : objectParams?.mom;\n  }\n\n  // Vertex options.\n\n  /**\n   * Apply color by vertex to tracks.\n   */\n  private applyVertexColorOptions() {\n    this.colorManager.colorTracksByVertex(this.collectionName);\n  }\n\n  /**\n   * Show configs of only the currently selected color by option.\n   */\n  private onlySelectedColorByOption() {\n    this.colorOptionsFolder.configs.forEach((config) => {\n      const groupNotSelected =\n        config.group !== undefined &&\n        config.group !== this.selectedColorByOption;\n\n      config.hidden = groupNotSelected ? true : false;\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Configuration.html":{"url":"interfaces/Configuration.html","title":"interface - Configuration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Configuration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/types/configuration.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration of the event display.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowUrlOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            defaultEventFile\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            defaultView\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            elementId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            enableDatGUIMenu\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            eventDataLoader\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            phoenixMenuRoot\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            presetViews\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowUrlOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowUrlOptions:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to allow URL options or not (true by default).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultEventFile\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultEventFile:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default event to load when none given in URL.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultView\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultView:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default view [x,y,z].\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elementId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        elementId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    ID of the wrapper element.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableDatGUIMenu\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableDatGUIMenu:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to enable dat.GUI menu or not.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventDataLoader\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        eventDataLoader:         EventDataLoader\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EventDataLoader\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Event data loader responsible for processing and loading event data.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phoenixMenuRoot\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phoenixMenuRoot:         PhoenixMenuNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PhoenixMenuNode\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Root node of the phoenix menu.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        presetViews\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        presetViews:         PresetView[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PresetView[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Preset views for switching event display camera.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { PresetView } from '../models/preset-view.model';\nimport { EventDataLoader } from '../../loaders/event-data-loader';\nimport { PhoenixMenuNode } from '../../managers/ui-manager/phoenix-menu/phoenix-menu-node';\n\n/**\n * Configuration of the event display.\n */\nexport interface Configuration {\n  /** Default view [x,y,z]. */\n  defaultView?: number[];\n  /** Preset views for switching event display camera. */\n  presetViews?: PresetView[];\n  /** Event data loader responsible for processing and loading event data. */\n  eventDataLoader?: EventDataLoader;\n  /** Root node of the phoenix menu. */\n  phoenixMenuRoot?: PhoenixMenuNode;\n  /** Whether to enable dat.GUI menu or not. */\n  enableDatGUIMenu?: boolean;\n  /** ID of the wrapper element. */\n  elementId?: string;\n  /** Default event to load when none given in URL. */\n  defaultEventFile?: { eventFile: string; eventType: string };\n  /** Whether to allow URL options or not (true by default). */\n  allowUrlOptions?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CoordinateHelper.html":{"url":"classes/CoordinateHelper.html","title":"class - CoordinateHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CoordinateHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/coordinate-helper.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper methods for coordinate conversions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                anglesAreSane\n                            \n                            \n                                    Static\n                                atlasQuaternion\n                            \n                            \n                                    Static\n                                etaPhiToCartesian\n                            \n                            \n                                    Static\n                                etaToTheta\n                            \n                            \n                                    Static\n                                sphericalToCartesian\n                            \n                            \n                                    Static\n                                thetaToEta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        anglesAreSane\n                        \n                    \n                \n            \n            \n                \n                    \n                    anglesAreSane(theta: number, phi: number)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:13\n                \n            \n\n\n            \n                \n                    Checks if angles are within range: -PI \n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    theta\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        equatorial angle\n\n                                    \n                                \n                                \n                                    phi\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        azimuthal angle\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        atlasQuaternion\n                        \n                    \n                \n            \n            \n                \n                    \n                    atlasQuaternion()\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:81\n                \n            \n\n\n            \n                \n                    Returns the Quaternion to rotate to ATLAS coords.\nTemporary. We will need to make this configurable per experiment.\n\n\n                    \n                        Returns :     Quaternion\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        etaPhiToCartesian\n                        \n                    \n                \n            \n            \n                \n                    \n                    etaPhiToCartesian(radius: number, eta: number, phi: number)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:65\n                \n            \n\n\n            \n                \n                    Get cartesian from eta/phi parameters.\nApplies the necessary rotations to move from threejs native to experimental.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    radius\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The radius.\n\n                                    \n                                \n                                \n                                    eta\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Pseudorapidity\n\n                                    \n                                \n                                \n                                    phi\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Phi angle.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Vector3\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        etaToTheta\n                        \n                    \n                \n            \n            \n                \n                    \n                    etaToTheta(eta: number)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:25\n                \n            \n\n\n            \n                \n                    Convert pseudorapidity eta to spherical coordinate theta.\nSee definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eta\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Pseudorapidity eta to convert to theta.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        theta in radians\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        sphericalToCartesian\n                        \n                    \n                \n            \n            \n                \n                    \n                    sphericalToCartesian(radius: number, theta: number, phi: number)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:46\n                \n            \n\n\n            \n                \n                    Get cartesian from spherical parameters.\nApplies the necessary rotations to move from threejs to experimental.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    radius\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The radius.\n\n                                    \n                                \n                                \n                                    theta\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Theta angle.\n\n                                    \n                                \n                                \n                                    phi\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Phi angle.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Vector3\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        thetaToEta\n                        \n                    \n                \n            \n            \n                \n                    \n                    thetaToEta(theta: number)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:35\n                \n            \n\n\n            \n                \n                    Convert spherical theta to pseudorapidity eta.\nSee definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    theta\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Angle in radians to convert to pseudorapidity eta.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        pseudorapidity eta\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3, Quaternion } from 'three';\n\n/**\n * Helper methods for coordinate conversions.\n */\nexport class CoordinateHelper {\n  /**\n   * Checks if angles are within range: -PI  phi;\n    const tmp2 = 0  theta;\n    return tmp1 && tmp2;\n  }\n\n  /**\n   * Convert pseudorapidity eta to spherical coordinate theta.\n   * See definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n   * @param eta Pseudorapidity eta to convert to theta.\n   * @returns theta in radians\n   */\n  public static etaToTheta(eta: number): number {\n    return 2 * Math.atan(Math.pow(Math.E, -eta));\n  }\n\n  /**\n   * Convert spherical theta to pseudorapidity eta.\n   * See definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n   * @param theta Angle in radians to convert to pseudorapidity eta.\n   * @returns pseudorapidity eta\n   */\n  public static thetaToEta(theta: number): number {\n    return -Math.log(Math.tan(theta / 2.0));\n  }\n\n  /**\n   * Get cartesian from spherical parameters.\n   * Applies the necessary rotations to move from threejs to experimental.\n   * @param radius The radius.\n   * @param theta Theta angle.\n   * @param phi Phi angle.\n   */\n  public static sphericalToCartesian(\n    radius: number,\n    theta: number,\n    phi: number\n  ): Vector3 {\n    // Threejs uses theta as azimuthal, so need to reverse.\n    const vector = new Vector3();\n    vector.setFromSphericalCoords(radius, theta, phi);\n    vector.applyQuaternion(CoordinateHelper.atlasQuaternion());\n    return vector;\n  }\n\n  /**\n   * Get cartesian from eta/phi parameters.\n   * Applies the necessary rotations to move from threejs native to experimental.\n   * @param radius The radius.\n   * @param eta Pseudorapidity\n   * @param phi Phi angle.\n   */\n  public static etaPhiToCartesian(\n    radius: number,\n    eta: number,\n    phi: number\n  ): Vector3 {\n    const vector = new Vector3();\n    // Threejs uses theta as azimuthal, so need to reverse.\n    vector.setFromSphericalCoords(radius, this.etaToTheta(eta), phi);\n    vector.applyQuaternion(CoordinateHelper.atlasQuaternion());\n    return vector;\n  }\n\n  /**\n   * Returns the Quaternion to rotate to ATLAS coords.\n   * Temporary. We will need to make this configurable per experiment.\n   */\n  public static atlasQuaternion(): Quaternion {\n    // With nothing, we have eta=0 on x, and phi=0 on z\n    // Should be eta=0 on y, and phi=0 on x\n    const v1 = new Vector3(0, 1, 0);\n    const v2 = new Vector3(0, 0, 1);\n    const quaternion = new Quaternion();\n    quaternion.setFromUnitVectors(v1, v2); // This puts eta~infinite on z-axis, eta=0 on  but y-positive is phi=PI (and eta=0 on x)\n    const quaternion2 = new Quaternion();\n    quaternion2.setFromAxisAngle(new Vector3(0, 1, 0), Math.PI / 2.0); // Now have eta = 3.0 on -x, eta =0 on +y, and phi = 0 on +z\n    quaternion.multiply(quaternion2);\n    return quaternion;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Cut.html":{"url":"classes/Cut.html","title":"class - Cut","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Cut\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/cut.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Cut for specifying filters on event data attribute.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                defaultMaxValue\n                            \n                            \n                                    Private\n                                defaultMinValue\n                            \n                            \n                                    Public\n                                field\n                            \n                            \n                                    Public\n                                maxValue\n                            \n                            \n                                    Public\n                                minValue\n                            \n                            \n                                    Public\n                                step\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: string, minValue: number, maxValue: number, step: number)\n                    \n                \n                        \n                            \n                                Defined in src/lib/models/cut.model.ts:8\n                            \n                        \n\n                \n                    \n                            Create the cut to filter an event data attribute.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the event data attribute to be filtered.\n\n                                                        \n                                                \n                                                \n                                                        minValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Minimum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                                \n                                                        maxValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Maximum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                                \n                                                        step\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Step for each value change.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        defaultMaxValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:8\n                        \n                    \n\n            \n                \n                    Default maximum allowed value of the event data attribute.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        defaultMinValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:6\n                        \n                    \n\n            \n                \n                    Default minimum allowed value of the event data attribute.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        field\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:18\n                        \n                    \n\n            \n                \n                    Name of the event data attribute to be filtered.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        maxValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:20\n                        \n                    \n\n            \n                \n                    Maximum allowed value of the event data attribute.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        minValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:19\n                        \n                    \n\n            \n                \n                    Minimum allowed value of the event data attribute.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        step\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:21\n                        \n                    \n\n            \n                \n                    Step for each value change.\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        reset\n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/models/cut.model.ts:30\n                \n            \n\n\n            \n                \n                    Reset the minimum and maximum value of the cut to default.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Cut {\n  /** Default minimum allowed value of the event data attribute. */\n  private defaultMinValue: number;\n  /** Default maximum allowed value of the event data attribute. */\n  private defaultMaxValue: number;\n\n  /**\n   * Create the cut to filter an event data attribute.\n   * @param field Name of the event data attribute to be filtered.\n   * @param minValue Minimum allowed value of the event data attribute.\n   * @param maxValue Maximum allowed value of the event data attribute.\n   * @param step Step for each value change.\n   */\n  constructor(\n    public field: string,\n    public minValue: number,\n    public maxValue: number,\n    public step: number = 1\n  ) {\n    this.defaultMinValue = minValue;\n    this.defaultMaxValue = maxValue;\n  }\n\n  /**\n   * Reset the minimum and maximum value of the cut to default.\n   */\n  reset() {\n    this.minValue = this.defaultMinValue;\n    this.maxValue = this.defaultMaxValue;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatGUIMenuUI.html":{"url":"classes/DatGUIMenuUI.html","title":"class - DatGUIMenuUI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatGUIMenuUI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/ui-manager/dat-gui-ui.ts\n        \n\n\n            \n                Description\n            \n            \n                A wrapper class for dat.GUI menu to perform UI related operations.\n\n            \n\n\n            \n                Implements\n            \n            \n                            PhoenixUI\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                eventFolder\n                            \n                            \n                                    Private\n                                geomFolder\n                            \n                            \n                                    Private\n                                gui\n                            \n                            \n                                    Private\n                                guiParameters\n                            \n                            \n                                    Private\n                                labelsFolder\n                            \n                            \n                                    Private\n                                maxPositionX\n                            \n                            \n                                    Private\n                                maxPositionY\n                            \n                            \n                                    Private\n                                maxPositionZ\n                            \n                            \n                                    Private\n                                sceneManager\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addCollection\n                            \n                            \n                                    Public\n                                addEventDataFolder\n                            \n                            \n                                    Public\n                                addEventDataTypeFolder\n                            \n                            \n                                    Public\n                                addGeometry\n                            \n                            \n                                    Public\n                                addGeometryFolder\n                            \n                            \n                                    Public\n                                addLabel\n                            \n                            \n                                    Public\n                                addLabelsFolder\n                            \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                getEventDataTypeFolder\n                            \n                            \n                                    Public\n                                removeLabel\n                            \n                            \n                                    Private\n                                removeOBJ\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elementId: string, three: ThreeManager)\n                    \n                \n                        \n                            \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:43\n                            \n                        \n\n                \n                    \n                            Create dat.GUI menu UI with different controls related to detector geometry and event data.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        elementId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                ID of the wrapper element.\n\n                                                        \n                                                \n                                                \n                                                        three\n                                                  \n                                                        \n                                                                        ThreeManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The three manager for managing three.js related operations.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        eventFolder\n                        \n                    \n                \n            \n                \n                    \n                        Type :     GUI\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:34\n                        \n                    \n\n            \n                \n                    dat.GUI menu folder containing event related data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        geomFolder\n                        \n                    \n                \n            \n                \n                    \n                        Type :     GUI\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:32\n                        \n                    \n\n            \n                \n                    dat.GUI menu folder containing geometries data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        gui\n                        \n                    \n                \n            \n                \n                    \n                        Type :     GUI\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:21\n                        \n                    \n\n            \n                \n                    dat.GUI menu.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        guiParameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    rotate: undefined,\n    axis: undefined,\n    lowRes: undefined,\n    eventData: undefined,\n    geometries: undefined,\n    labels: undefined,\n  }\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:23\n                        \n                    \n\n            \n                \n                    Options for the dat.GUI menu.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        labelsFolder\n                        \n                    \n                \n            \n                \n                    \n                        Type :     GUI\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:36\n                        \n                    \n\n            \n                \n                    dat.GUI menu folder containing labels.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        maxPositionX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 4000\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:39\n                        \n                    \n\n            \n                \n                    Max changeable position of an object along the x-axis.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        maxPositionY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 4000\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:41\n                        \n                    \n\n            \n                \n                    Max changeable position of an object along the y-axis.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        maxPositionZ\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 4000\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:43\n                        \n                    \n\n            \n                \n                    Max changeable position of an object along the z-axis.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sceneManager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SceneManager\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:19\n                        \n                    \n\n            \n                \n                    Manager for managing functions of the three.js scene.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addCollection\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(eventDataType: string, collectionName: string, cuts?: Cut[], collectionColor?: Color)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:254\n                \n            \n\n\n            \n                \n                    Add collection folder and its configurable options to the event data type (tracks, hits etc.) folder.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventDataType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the event data type.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to be added in the type of event data (tracks, hits etc.).\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Cuts to the collection of event data that are to be made configurable to filter event data.\n\n                                    \n                                \n                                \n                                    collectionColor\n                                    \n                                            Color\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Default color of the collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addEventDataFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    addEventDataFolder()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:200\n                \n            \n\n\n            \n                \n                    Add event data folder with functions for event data toggles like show/hide and depthTest.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addEventDataTypeFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    addEventDataTypeFolder(typeName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:230\n                \n            \n\n\n            \n                \n                    Add folder for event data type like tracks or hits to the menu.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the type of event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addGeometry\n                        \n                    \n                \n            \n            \n                \n                    \n                    addGeometry(object: Object3D, _menuSubfolder?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:109\n                \n            \n\n\n            \n                \n                    Add geometry to the menu's geometry folder and set up its configurable options.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the UI menu.\n\n                                    \n                                \n                                \n                                    _menuSubfolder\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Subfolder in the menu to add the geometry to. Example Folder > Subfolder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addGeometryFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    addGeometryFolder()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:78\n                \n            \n\n\n            \n                \n                    Add geometry (detector geometry) folder to the menu.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addLabel\n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabel(labelId: string, onRemoveLabel?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:384\n                \n            \n\n\n            \n                \n                    Add folder for configuration of label.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    labelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Unique ID of the label.\n\n                                    \n                                \n                                \n                                    onRemoveLabel\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function called when label is removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addLabelsFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabelsFolder(configFunctions: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:332\n                \n            \n\n\n            \n                \n                    Add labels folder to the menu.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configFunctions\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Functions to attach to the labels folder configuration.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clear\n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:67\n                \n            \n\n\n            \n                \n                    Clear the menu by removing all folders.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getEventDataTypeFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventDataTypeFolder(typeName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:440\n                \n            \n\n\n            \n                \n                    Get the folder of the event data type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the event data type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     GUI\n\n                    \n                    \n                        Folder of the event data type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeLabel\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLabel(labelId: string, labelItemFolder?: GUI)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:425\n                \n            \n\n\n            \n                \n                    Remove label from the menu and scene if it exists.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    labelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A unique label ID string.\n\n                                    \n                                \n                                \n                                    labelItemFolder\n                                    \n                                            GUI\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        removeOBJ\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeOBJ(object: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:187\n                \n            \n\n\n            \n                \n                    Remove object from the dat.GUI menu.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Geometry object to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     () => void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { GUI } from 'dat.gui';\nimport {\n  BufferGeometry,\n  Color,\n  Mesh,\n  MeshPhongMaterial,\n  Object3D,\n} from 'three';\nimport { ThreeManager } from '../three-manager';\nimport { SceneManager } from '../three-manager/scene-manager';\nimport { Cut } from '../../lib/models/cut.model';\nimport { PhoenixUI } from './phoenix-ui';\n\n/**\n * A wrapper class for dat.GUI menu to perform UI related operations.\n */\nexport class DatGUIMenuUI implements PhoenixUI {\n  /** Manager for managing functions of the three.js scene. */\n  private sceneManager: SceneManager;\n  /** dat.GUI menu. */\n  private gui: GUI;\n  /** Options for the dat.GUI menu. */\n  private guiParameters = {\n    rotate: undefined,\n    axis: undefined,\n    lowRes: undefined,\n    eventData: undefined,\n    geometries: undefined,\n    labels: undefined,\n  };\n  /** dat.GUI menu folder containing geometries data. */\n  private geomFolder: GUI;\n  /** dat.GUI menu folder containing event related data. */\n  private eventFolder: GUI;\n  /** dat.GUI menu folder containing labels. */\n  private labelsFolder: GUI;\n\n  /** Max changeable position of an object along the x-axis. */\n  private maxPositionX = 4000;\n  /** Max changeable position of an object along the y-axis. */\n  private maxPositionY = 4000;\n  /** Max changeable position of an object along the z-axis. */\n  private maxPositionZ = 4000;\n\n  /**\n   * Create dat.GUI menu UI with different controls related to detector geometry and event data.\n   * @param elementId ID of the wrapper element.\n   * @param three The three manager for managing three.js related operations.\n   */\n  constructor(elementId: string = 'eventDisplay', private three: ThreeManager) {\n    this.gui = new GUI();\n    this.gui.domElement.id = 'gui';\n    this.gui.domElement.style.cssText =\n      'position: absolute; right: 0; top: 2rem; z-index: 11;';\n    const canvas = document.getElementById(elementId) ?? document.body;\n    canvas.appendChild(this.gui.domElement);\n    this.geomFolder = null;\n    this.eventFolder = null;\n    this.labelsFolder = null;\n\n    this.sceneManager = three.getSceneManager();\n  }\n\n  /**\n   * Clear the menu by removing all folders.\n   */\n  public clear() {\n    const gui = document.getElementById('gui');\n    if (gui != null) {\n      gui.remove();\n    }\n    this.geomFolder = null;\n  }\n\n  /**\n   * Add geometry (detector geometry) folder to the menu.\n   */\n  public addGeometryFolder() {\n    if (this.geomFolder === null) {\n      this.geomFolder = this.gui.addFolder(SceneManager.GEOMETRIES_ID);\n    }\n    this.guiParameters.geometries = { show: true, wireframe: false };\n    // A boolean toggle for showing/hiding the geometries is added to the 'Geometry' folder.\n    const showGeometriesMenu = this.geomFolder\n      .add(this.guiParameters.geometries, 'show')\n      .name('Show')\n      .listen();\n    showGeometriesMenu.onChange((value) => {\n      this.sceneManager.objectVisibility(\n        this.sceneManager.getObjectByName(SceneManager.GEOMETRIES_ID),\n        value\n      );\n    });\n    // A boolean toggle for enabling/disabling the geometries' wireframing.\n    const wireframeGeometriesMenu = this.geomFolder\n      .add(this.guiParameters.geometries, 'wireframe')\n      .name('Wireframe')\n      .listen();\n    wireframeGeometriesMenu.onChange((value) => {\n      this.sceneManager.wireframeGeometries(value);\n    });\n  }\n\n  /**\n   * Add geometry to the menu's geometry folder and set up its configurable options.\n   * @param object Object to add to the UI menu.\n   * @param _menuSubfolder Subfolder in the menu to add the geometry to. Example `Folder > Subfolder`.\n   */\n  public addGeometry(object: Object3D, _menuSubfolder?: string) {\n    const { name, material, visible } = object as Mesh;\n    const color = material?.color;\n\n    // A new folder for the object is added to the 'Geometry' folder\n    this.guiParameters[name] = {\n      show: visible,\n      color: color ?? '#000000',\n      x: 0,\n      y: 0,\n      z: 0,\n      detectorOpacity: 1.0,\n      remove: this.removeOBJ(object),\n      scale: 1,\n    };\n\n    const objFolder = this.geomFolder.addFolder(name);\n    // A color picker is added to the object's folder\n    const colorMenu = objFolder\n      .addColor(this.guiParameters[name], 'color')\n      .name('Color');\n    colorMenu.onChange((value) =>\n      this.sceneManager.changeObjectColor(object, value)\n    );\n\n    const opacity = objFolder\n      .add(this.guiParameters[name], 'detectorOpacity', 0.0, 1.0)\n      .name('Opacity');\n    opacity.onFinishChange((newValue) =>\n      this.sceneManager.setGeometryOpacity(object, newValue)\n    );\n\n    // A boolean toggle for showing/hiding the object is added to its folder\n    const showMenu = objFolder\n      .add(this.guiParameters[name], 'show')\n      .name('Show')\n      .listen();\n    showMenu.onChange((value) =>\n      this.sceneManager.objectVisibility(object, value)\n    );\n    // Scale slider\n    const scaleMenu = objFolder\n      .add(this.guiParameters[name], 'scale', 0, 1000)\n      .name('Scale');\n    scaleMenu.onChange((value) => {\n      this.sceneManager.scaleObject(object, value);\n    });\n    // Controls for positioning.\n    // const position = this.three.getObjectPosition(name);\n    objFolder\n      .add(this.guiParameters[name], 'x', -this.maxPositionX, this.maxPositionX)\n      .name('X')\n      .onChange((value) =>\n        this.sceneManager.getObjectPosition(name).setX(value)\n      );\n    objFolder\n      .add(this.guiParameters[name], 'y', -this.maxPositionY, this.maxPositionY)\n      .name('Y')\n      .onChange((value) =>\n        this.sceneManager.getObjectPosition(name).setY(value)\n      );\n    objFolder\n      .add(this.guiParameters[name], 'z', -this.maxPositionZ, this.maxPositionZ)\n      .name('Z')\n      .onChange((value) =>\n        this.sceneManager.getObjectPosition(name).setZ(value)\n      );\n    // Controls for deleting the obj\n    objFolder.add(this.guiParameters[name], 'remove').name('Remove');\n  }\n\n  /**\n   * Remove object from the dat.GUI menu.\n   * @param object Geometry object to be removed.\n   */\n  private removeOBJ(object: Object3D) {\n    return () => {\n      const folder = this.geomFolder.__folders[object.name];\n      if (folder) {\n        this.geomFolder.removeFolder(folder);\n      }\n      this.sceneManager.removeGeometry(object);\n    };\n  }\n\n  /**\n   * Add event data folder with functions for event data toggles like show/hide and depthTest.\n   */\n  public addEventDataFolder() {\n    // If there is already an event data folder it is deleted and we create a new one.\n    if (this.eventFolder !== null) {\n      this.gui.removeFolder(this.eventFolder);\n    }\n\n    // A new folder for the Event Data is added to the GUI.\n    this.eventFolder = this.gui.addFolder('Event Data');\n    this.guiParameters.eventData = { show: true, depthTest: true };\n    // A boolean toggle for showing/hiding the event data is added to the 'Event Data' folder.\n    const menu = this.eventFolder\n      .add(this.guiParameters.eventData, 'show')\n      .name('Show')\n      .listen();\n    menu.onChange((value) =>\n      this.sceneManager.groupVisibility(SceneManager.EVENT_DATA_ID, value)\n    );\n\n    // A boolean toggle for enabling/disabling depthTest of event data.\n    const depthTestMenu = this.eventFolder\n      .add(this.guiParameters.eventData, 'depthTest')\n      .name('Depth Test')\n      .listen();\n    depthTestMenu.onChange((value) => this.three.eventDataDepthTest(value));\n  }\n\n  /**\n   * Add folder for event data type like tracks or hits to the menu.\n   * @param typeName Name of the type of event data.\n   */\n  public addEventDataTypeFolder(typeName: string): void {\n    const typeFolder = this.eventFolder.addFolder(typeName);\n    this.guiParameters.eventData[typeName] = true;\n    const menu = typeFolder\n      .add(this.guiParameters.eventData, typeName)\n      .name('Show')\n      .listen();\n    menu.onChange((value) =>\n      this.sceneManager.objectVisibility(\n        this.sceneManager\n          .getObjectByName(SceneManager.EVENT_DATA_ID)\n          .getObjectByName(typeName),\n        value\n      )\n    );\n  }\n\n  /**\n   * Add collection folder and its configurable options to the event data type (tracks, hits etc.) folder.\n   * @param eventDataType Name of the event data type.\n   * @param collectionName Name of the collection to be added in the type of event data (tracks, hits etc.).\n   * @param cuts Cuts to the collection of event data that are to be made configurable to filter event data.\n   * @param collectionColor Default color of the collection.\n   */\n  public addCollection(\n    eventDataType: string,\n    collectionName: string,\n    cuts?: Cut[],\n    collectionColor?: Color\n  ) {\n    const typeFolder = this.eventFolder.__folders[eventDataType];\n    if (!typeFolder) {\n      return;\n    }\n\n    // A new folder for the collection is added to the 'Event Data' folder\n    this.guiParameters[collectionName] = {\n      show: true,\n      color: 0x000000,\n      randomColor: () =>\n        this.three.getColorManager().collectionColorRandom(collectionName),\n      resetCut: () =>\n        this.sceneManager.groupVisibility(\n          collectionName,\n          true,\n          SceneManager.EVENT_DATA_ID\n        ),\n    };\n    const collFolder = typeFolder.addFolder(collectionName);\n\n    // A boolean toggle for showing/hiding the collection is added to its folder\n    const showMenu = collFolder\n      .add(this.guiParameters[collectionName], 'show')\n      .name('Show')\n      .listen();\n    showMenu.onChange((value) => {\n      const collectionObject = this.sceneManager\n        .getObjectByName(SceneManager.EVENT_DATA_ID)\n        .getObjectByName(collectionName);\n      this.sceneManager.objectVisibility(collectionObject, value);\n    });\n\n    // A color picker is added to the collection's folder\n    const colorMenu = collFolder\n      .addColor(this.guiParameters[collectionName], 'color')\n      .name('Color');\n    colorMenu.onChange((value) =>\n      this.three.getColorManager().collectionColor(collectionName, value)\n    );\n    colorMenu.setValue(collectionColor?.getHex());\n    collFolder\n      .add(this.guiParameters[collectionName], 'randomColor')\n      .name('Random Color');\n\n    // Cuts menu\n    if (cuts) {\n      const cutsFolder = collFolder.addFolder('Cuts');\n      cutsFolder\n        .add(this.guiParameters[collectionName], 'resetCut')\n        .name('Reset cuts');\n\n      for (const cut of cuts) {\n        const minCut = cutsFolder\n          .add(cut, 'minValue', cut.minValue, cut.maxValue)\n          .name('min ' + cut.field);\n        minCut.onChange((value) => {\n          this.sceneManager.collectionFilter(collectionName, cuts);\n        });\n        const maxCut = cutsFolder\n          .add(cut, 'maxValue', cut.minValue, cut.maxValue)\n          .name('max ' + cut.field);\n        maxCut.onChange((value) => {\n          this.sceneManager.collectionFilter(collectionName, cuts);\n        });\n      }\n    }\n  }\n\n  /**\n   * Add labels folder to the menu.\n   * @param configFunctions Functions to attach to the labels folder configuration.\n   */\n  public addLabelsFolder(configFunctions: any) {\n    if (this.labelsFolder !== null) {\n      return;\n    }\n\n    const {\n      onToggle,\n      onSizeChange,\n      onColorChange,\n      onSaveLabels,\n      onLoadLabels,\n    } = configFunctions;\n\n    this.labelsFolder = this.gui.addFolder(SceneManager.LABELS_ID);\n\n    this.guiParameters.labels = {\n      show: true,\n      size: 1,\n      color: '#a8a8a8',\n      saveLabels: onSaveLabels,\n      loadLabels: onLoadLabels,\n    };\n\n    const showMenu = this.labelsFolder\n      .add(this.guiParameters.labels, 'show')\n      .name('Show')\n      .listen();\n    showMenu.onChange(onToggle);\n\n    const labelsSizeMenu = this.labelsFolder\n      .add(this.guiParameters.labels, 'size', 0, 10)\n      .name('Size');\n    labelsSizeMenu.onFinishChange(onSizeChange);\n\n    const colorMenu = this.labelsFolder\n      .addColor(this.guiParameters.labels, 'color')\n      .name('Color');\n    colorMenu.onChange(onColorChange);\n\n    this.labelsFolder\n      .add(this.guiParameters.labels, 'saveLabels')\n      .name('Save Labels');\n    this.labelsFolder\n      .add(this.guiParameters.labels, 'loadLabels')\n      .name('Load Labels');\n  }\n\n  /**\n   * Add folder for configuration of label.\n   * @param labelId Unique ID of the label.\n   * @param onRemoveLabel Function called when label is removed.\n   */\n  public addLabel(labelId: string, onRemoveLabel?: () => void) {\n    this.guiParameters[labelId] = {\n      show: true,\n      color: 0xafafaf,\n    };\n\n    const labelItem = this.labelsFolder.addFolder(labelId);\n\n    const visibilityToggle = labelItem\n      .add(this.guiParameters[labelId], 'show')\n      .name('Show')\n      .listen();\n    visibilityToggle.onChange((value) => {\n      const labelObject = this.sceneManager\n        .getObjectByName(SceneManager.LABELS_ID)\n        .getObjectByName(labelId);\n      this.sceneManager.objectVisibility(labelObject, value);\n    });\n\n    const colorMenu = labelItem\n      .addColor(this.guiParameters[labelId], 'color')\n      .name('Çolor');\n    colorMenu.onChange((color) =>\n      this.sceneManager.changeObjectColor(\n        this.sceneManager.getObjectByName(labelId),\n        color\n      )\n    );\n\n    this.guiParameters[labelId]['removeLabel'] = () => {\n      onRemoveLabel?.();\n      this.removeLabel(labelId, labelItem);\n    };\n    labelItem.add(this.guiParameters[labelId], 'removeLabel').name('Remove');\n  }\n\n  /**\n   * Remove label from the menu and scene if it exists.\n   * @param labelId A unique label ID string.\n   * @param labelFolderReference Reference to the label folder.\n   */\n  public removeLabel(labelId: string, labelItemFolder?: GUI) {\n    if (!labelItemFolder) {\n      labelItemFolder = this.labelsFolder.__folders[labelId];\n    }\n\n    if (labelItemFolder) {\n      this.labelsFolder.removeFolder(labelItemFolder);\n    }\n  }\n\n  /**\n   * Get the folder of the event data type.\n   * @param typeName Name of the event data type.\n   * @returns Folder of the event data type.\n   */\n  public getEventDataTypeFolder(typeName: string): GUI {\n    return this.eventFolder.__folders[typeName];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EffectsManager.html":{"url":"classes/EffectsManager.html","title":"class - EffectsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EffectsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/effects-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Manager for managing three.js event display effects like outline pass and unreal bloom.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                antialiasing\n                            \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Public\n                                composer\n                            \n                            \n                                    Private\n                                defaultRenderPass\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Private\n                                scene\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addOutlinePassForSelection\n                            \n                            \n                                    Private\n                                antialiasRender\n                            \n                            \n                                    Private\n                                effectsRender\n                            \n                            \n                                    Public\n                                removePass\n                            \n                            \n                                    Public\n                                setAntialiasing\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(camera: Camera, scene: Scene, renderer: WebGLRenderer)\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/effects-manager.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for the effects manager which manages effects and three.js passes.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        camera\n                                                  \n                                                        \n                                                                    Camera\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The camera inside the scene.\n\n                                                        \n                                                \n                                                \n                                                        scene\n                                                  \n                                                        \n                                                                    Scene\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The default scene used for event display.\n\n                                                        \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    WebGLRenderer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The main renderer used by the event display.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        antialiasing\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:20\n                        \n                    \n\n            \n                \n                    Whether antialiasing is enabled or disabled.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        camera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:14\n                        \n                    \n\n            \n                \n                    The camera inside the scene.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        composer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EffectComposer\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:12\n                        \n                    \n\n            \n                \n                    Effect composer for effect passes.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        defaultRenderPass\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RenderPass\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:18\n                        \n                    \n\n            \n                \n                    Render pass for rendering the default scene.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        render\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:23\n                        \n                    \n\n            \n                \n                    Render function with (normal render) or without antialias (effects render).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        scene\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Scene\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:16\n                        \n                    \n\n            \n                \n                    The default scene used for event display.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addOutlinePassForSelection\n                        \n                    \n                \n            \n            \n                \n                    \n                    addOutlinePassForSelection()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/effects-manager.ts:69\n                \n            \n\n\n            \n                \n                    Initialize the outline pass for highlighting hovered over event display elements.\n\n\n                    \n                    \n                    \n                        Returns :     OutlinePass\n\n                    \n                    \n                        OutlinePass for highlighting hovered over event display elements.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        antialiasRender\n                        \n                    \n                \n            \n            \n                \n                    \n                    antialiasRender(scene: Scene, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/effects-manager.ts:61\n                \n            \n\n\n            \n                \n                    Render for antialias without the effects composer.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The default scene used for event display.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        effectsRender\n                        \n                    \n                \n            \n            \n                \n                    \n                    effectsRender(scene: Scene, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/effects-manager.ts:48\n                \n            \n\n\n            \n                \n                    Render the effects composer.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The default scene used for event display.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removePass\n                        \n                    \n                \n            \n            \n                \n                    \n                    removePass(pass: Pass)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/effects-manager.ts:88\n                \n            \n\n\n            \n                \n                    Remove a pass from the effect composer.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pass\n                                    \n                                            Pass\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Effect pass to be removed from the effect composer.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setAntialiasing\n                        \n                    \n                \n            \n            \n                \n                    \n                    setAntialiasing(antialias: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/effects-manager.ts:97\n                \n            \n\n\n            \n                \n                    Set the antialiasing of renderer.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    antialias\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether antialiasing is to enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { Camera, Scene, WebGLRenderer, Vector2, NormalBlending } from 'three';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass';\nimport { Pass } from 'three/examples/jsm/postprocessing/Pass';\n\n/**\n * Manager for managing three.js event display effects like outline pass and unreal bloom.\n */\nexport class EffectsManager {\n  /** Effect composer for effect passes. */\n  public composer: EffectComposer;\n  /** The camera inside the scene. */\n  private camera: Camera;\n  /** The default scene used for event display. */\n  private scene: Scene;\n  /** Render pass for rendering the default scene. */\n  private defaultRenderPass: RenderPass;\n  /** Whether antialiasing is enabled or disabled. */\n  public antialiasing: boolean = true;\n\n  /** Render function with (normal render) or without antialias (effects render). */\n  public render: (scene: Scene, camera: Camera) => void;\n\n  /**\n   * Constructor for the effects manager which manages effects and three.js passes.\n   * @param camera The camera inside the scene.\n   * @param scene The default scene used for event display.\n   * @param renderer The main renderer used by the event display.\n   */\n  constructor(camera: Camera, scene: Scene, renderer: WebGLRenderer) {\n    this.composer = new EffectComposer(renderer);\n    this.camera = camera;\n    this.scene = scene;\n\n    this.defaultRenderPass = new RenderPass(this.scene, this.camera);\n    this.composer.addPass(this.defaultRenderPass);\n\n    // Set the starting render function\n    this.render = this.antialiasing ? this.antialiasRender : this.effectsRender;\n  }\n\n  /**\n   * Render the effects composer.\n   * @param scene The default scene used for event display.\n   * @param camera The camera inside the scene.\n   */\n  private effectsRender(scene: Scene, camera: Camera) {\n    if (this.composer) {\n      this.defaultRenderPass.camera = camera;\n      this.defaultRenderPass.scene = scene;\n      this.composer.render();\n    }\n  }\n\n  /**\n   * Render for antialias without the effects composer.\n   * @param scene The default scene used for event display.\n   * @param camera The camera inside the scene.\n   */\n  private antialiasRender(scene: Scene, camera: Camera) {\n    this.composer.renderer.render(scene, camera);\n  }\n\n  /**\n   * Initialize the outline pass for highlighting hovered over event display elements.\n   * @returns OutlinePass for highlighting hovered over event display elements.\n   */\n  public addOutlinePassForSelection(): OutlinePass {\n    const outlinePass = new OutlinePass(\n      new Vector2(window.innerWidth, window.innerHeight),\n      this.scene,\n      this.camera\n    );\n    outlinePass.overlayMaterial.blending = NormalBlending;\n    outlinePass.visibleEdgeColor.set(0xffff66);\n    outlinePass.visibleEdgeColor.set(0xdf5330);\n\n    this.composer.addPass(outlinePass);\n\n    return outlinePass;\n  }\n\n  /**\n   * Remove a pass from the effect composer.\n   * @param pass Effect pass to be removed from the effect composer.\n   */\n  public removePass(pass: Pass) {\n    const passIndex = this.composer.passes.indexOf(pass);\n    this.composer.passes.splice(passIndex, 1);\n  }\n\n  /**\n   * Set the antialiasing of renderer.\n   * @param antialias Whether antialiasing is to enabled or disabled.\n   */\n  public setAntialiasing(antialias: boolean) {\n    this.antialiasing = antialias;\n    this.render = this.antialiasing ? this.antialiasRender : this.effectsRender;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EventDataLoader.html":{"url":"interfaces/EventDataLoader.html","title":"interface - EventDataLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EventDataLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/event-data-loader.ts\n        \n\n\n            \n                Description\n            \n            \n                Event data loader for implementing different event data loaders.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        addLabelToEventObject\n                                    \n                                \n                                \n                                    \n                                        buildEventData\n                                    \n                                \n                                \n                                    \n                                        getCollection\n                                    \n                                \n                                \n                                    \n                                        getCollections\n                                    \n                                \n                                \n                                    \n                                        getEventMetadata\n                                    \n                                \n                                \n                                    \n                                        getEventsList\n                                    \n                                \n                                \n                                    \n                                        getLabelsObject\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addLabelToEventObject\n                        \n                    \n                \n            \n            \n                \naddLabelToEventObject(label: string, collection: string, indexInCollection: number)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:57\n                \n            \n\n\n            \n                \n                    Add label of event object to the labels object.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to add to the event object.\n\n                                    \n                                \n                                \n                                    collection\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Collection the event object is a part of.\n\n                                    \n                                \n                                \n                                    indexInCollection\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event object's index in collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A unique label ID string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildEventData\n                        \n                    \n                \n            \n            \n                \nbuildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:17\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Logger for logging event display data..\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCollection\n                        \n                    \n                \n            \n            \n                \ngetCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:42\n                \n            \n\n\n            \n                \n                    Get all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Key of the collection that will be retrieved.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Object containing all physics objects from the desired collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCollections\n                        \n                    \n                \n            \n            \n                \ngetCollections()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:35\n                \n            \n\n\n            \n                \n                    Get the different collections for the current stored event.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of strings, each representing a collection of the event displayed.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEventMetadata\n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:48\n                \n            \n\n\n            \n                \n                    Get metadata associated to the displayed event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the displayed event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEventsList\n                        \n                    \n                \n            \n            \n                \ngetEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:29\n                \n            \n\n\n            \n                \n                    Takes an object containing multiple events and returns the keys of these events.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object that contains the different events.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of keys of the different events.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLabelsObject\n                        \n                    \n                \n            \n            \n                \ngetLabelsObject()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:67\n                \n            \n\n\n            \n                \n                    Get the object containing labels.\n\n\n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        The labels object.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ThreeManager } from '../managers/three-manager';\nimport { UIManager } from '../managers/ui-manager';\nimport { InfoLogger } from '../helpers/info-logger';\n\n/**\n * Event data loader for implementing different event data loaders.\n */\nexport interface EventDataLoader {\n  /**\n   * Takes an object that represents ONE event and takes care of adding\n   * the different objects to the graphic library and the UI controls.\n   * @param eventData Object representing the event.\n   * @param graphicsLibrary Manager containing functionality to draw the 3D objects.\n   * @param ui Manager for showing menus and controls to manipulate the geometries.\n   * @param infoLogger Logger for logging event display data..\n   */\n  buildEventData(\n    eventData: any,\n    graphicsLibrary: ThreeManager,\n    ui: UIManager,\n    infoLogger: InfoLogger\n  ): void;\n\n  /**\n   * Takes an object containing multiple events and returns the keys of these events.\n   * @param eventsData Object that contains the different events.\n   * @returns List of keys of the different events.\n   */\n  getEventsList(eventsData: any): string[];\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  getCollections(): string[];\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  getCollection(collectionName: string): any;\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  getEventMetadata(): any[];\n\n  /**\n   * Add label of event object to the labels object.\n   * @param label Label to add to the event object.\n   * @param collection Collection the event object is a part of.\n   * @param indexInCollection Event object's index in collection.\n   * @returns A unique label ID string.\n   */\n  addLabelToEventObject(\n    label: string,\n    collection: string,\n    indexInCollection: number\n  ): string;\n\n  /**\n   * Get the object containing labels.\n   * @returns The labels object.\n   */\n  getLabelsObject(): { [key: string]: any };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExportManager.html":{"url":"classes/ExportManager.html","title":"class - ExportManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExportManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/export-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Manager for managing event display's export related functionality.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                exportPhoenixScene\n                            \n                            \n                                    Public\n                                exportSceneToOBJ\n                            \n                            \n                                    Private\n                                saveEventDataConfiguration\n                            \n                            \n                                    Private\n                                saveGeometriesConfiguration\n                            \n                            \n                                    Private\n                                saveSceneConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        exportPhoenixScene\n                        \n                    \n                \n            \n            \n                \n                    \n                    exportPhoenixScene(scene: Scene, eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/export-manager.ts:27\n                \n            \n\n\n            \n                \n                    Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene to be exported.\n\n                                    \n                                \n                                \n                                    eventData\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded event data.\n\n                                    \n                                \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        exportSceneToOBJ\n                        \n                    \n                \n            \n            \n                \n                    \n                    exportSceneToOBJ(scene: Scene)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/export-manager.ts:14\n                \n            \n\n\n            \n                \n                    Exports scene to OBJ file format.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene to be exported.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        saveEventDataConfiguration\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveEventDataConfiguration(eventData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/export-manager.ts:66\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded event data.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        saveGeometriesConfiguration\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveGeometriesConfiguration(geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/export-manager.ts:85\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded geometries.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        saveSceneConfig\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveSceneConfig(eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/export-manager.ts:52\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded scene including event data and geometries.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Curently loaded event data.\n\n                                    \n                                \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { eventData: {}; geometries: {}; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { OBJExporter } from 'three/examples/jsm/exporters/OBJExporter';\nimport { Scene, Object3D } from 'three';\nimport { GLTFExporter } from 'three/examples/jsm/exporters/GLTFExporter';\nimport { saveFile } from '../../helpers/file';\n\n/**\n * Manager for managing event display's export related functionality.\n */\nexport class ExportManager {\n  /**\n   * Exports scene to OBJ file format.\n   * @param scene The scene to be exported.\n   */\n  public exportSceneToOBJ(scene: Scene) {\n    // Instantiate a exporter\n    const exporter = new OBJExporter();\n    const result = exporter.parse(scene);\n    saveFile(result, 'phoenix-obj.obj', 'text/plain');\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   * @param scene The scene to be exported.\n   * @param eventData Currently loaded event data.\n   * @param geometries Currently loaded geometries.\n   */\n  public exportPhoenixScene(\n    scene: Scene,\n    eventData: Object3D,\n    geometries: Object3D\n  ) {\n    const exporter = new GLTFExporter();\n\n    const sceneConfig = this.saveSceneConfig(eventData, geometries);\n    // Parse the input and generate the glTF output\n    exporter.parse(\n      scene,\n      (result) => {\n        const jsonResult = { sceneConfiguration: sceneConfig, scene: result };\n        const output = JSON.stringify(jsonResult, null, 2);\n        saveFile(output, 'phoenix-scene.phnx', 'text/plain');\n      },\n      null\n    );\n  }\n\n  /**\n   * Save the configuration of the currently loaded scene including event data and geometries.\n   * @param eventData Curently loaded event data.\n   * @param geometries Currently loaded geometries.\n   */\n  private saveSceneConfig(eventData: Object3D, geometries: Object3D) {\n    const eventDataConfig = this.saveEventDataConfiguration(eventData);\n    const geometriesConfig = this.saveGeometriesConfiguration(geometries);\n    const sceneConfig = {\n      eventData: eventDataConfig,\n      geometries: geometriesConfig,\n    };\n    return sceneConfig;\n  }\n\n  /**\n   * Save the configuration of the currently loaded event data.\n   * @param eventData Currently loaded event data.\n   */\n  private saveEventDataConfiguration(eventData: any) {\n    const eventDataConfig = {};\n    for (const objectType of eventData.children) {\n      if (objectType.name) {\n        eventDataConfig[objectType.name] = [];\n        for (const collection of objectType.children) {\n          if (collection.name) {\n            eventDataConfig[objectType.name].push(collection.name);\n          }\n        }\n      }\n    }\n    return eventDataConfig;\n  }\n\n  /**\n   * Save the configuration of the currently loaded geometries.\n   * @param geometries Currently loaded geometries.\n   */\n  private saveGeometriesConfiguration(geometries: Object3D) {\n    const geometriesConfig = [];\n    geometries.children.forEach((object) => {\n      if (object.name !== 'EventData') {\n        geometriesConfig.push(object.name);\n      }\n    });\n    return geometriesConfig;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Field.html":{"url":"classes/Field.html","title":"class - Field","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n\n            \n                Description\n            \n            \n                 Default class to define the field.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(field: Vector3)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:192\n                \n            \n\n\n            \n                \n                    Returns field as a Vector3 in Tesla.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Vector3\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(half_h))\n        .add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir\n        .clone()\n        .add(k1.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir\n        .clone()\n        .add(k2.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(h))\n        .add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir\n        .clone()\n        .add(k3.clone().multiplyScalar(h))\n        .cross(B_last)\n        .multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return (\n        h *\n        (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z))\n      );\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    const fh: number = state.stepSize;\n    const fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(\n      k1\n        .clone()\n        .add(k2)\n        .add(k3)\n        .multiplyScalar(fh2 / 6)\n    );\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(\n      k1\n        .clone()\n        .add(k2.clone().multiplyScalar(2))\n        .add(k3.clone().multiplyScalar(2))\n        .add(k4)\n        .multiplyScalar(fh / 6)\n    );\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3,\n    startDir: Vector3,\n    p: number,\n    q: number,\n    mss: number = -1,\n    plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3; dir: Vector3 }[] {\n    const rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    const result: { pos: Vector3; dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InfoLogger.html":{"url":"classes/InfoLogger.html","title":"class - InfoLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InfoLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/info-logger.ts\n        \n\n\n            \n                Description\n            \n            \n                Logger for logging event display data\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                infoLoggerList\n                            \n                            \n                                    Private\n                                maxEntries\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                getInfoLoggerList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        infoLoggerList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/helpers/info-logger.ts:6\n                        \n                    \n\n            \n                \n                    List that contains all the info logs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        maxEntries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                    \n                        \n                                Defined in src/helpers/info-logger.ts:8\n                        \n                    \n\n            \n                \n                    Max entries to be shown inside the information panel\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(data: string, label?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/info-logger.ts:15\n                \n            \n\n\n            \n                \n                    Add an entry to the info logger\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Data of the info log\n\n                                    \n                                \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Label of the info log\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInfoLoggerList\n                        \n                    \n                \n            \n            \n                \ngetInfoLoggerList()\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/info-logger.ts:26\n                \n            \n\n\n            \n                \n                    Get the info logger list being used by the info logger service\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        The info logger list containing log data\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class InfoLogger {\n  /** List that contains all the info logs */\n  private infoLoggerList: any[] = [];\n  /** Max entries to be shown inside the information panel */\n  private maxEntries: number = 10;\n\n  /**\n   * Add an entry to the info logger\n   * @param data Data of the info log\n   * @param label Label of the info log\n   */\n  add(data: string, label?: string) {\n    if (this.infoLoggerList.length > this.maxEntries) {\n      this.infoLoggerList.pop();\n    }\n    this.infoLoggerList.unshift(label ? label + ': ' + data : data);\n  }\n\n  /**\n   * Get the info logger list being used by the info logger service\n   * @returns The info logger list containing log data\n   */\n  getInfoLoggerList(): any[] {\n    return this.infoLoggerList;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadingManager.html":{"url":"classes/LoadingManager.html","title":"class - LoadingManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadingManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/loading-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Phoenix loading manager for managing loadable items.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                instance\n                            \n                            \n                                    Public\n                                loaded\n                            \n                            \n                                    Private\n                                onLoadCallbacks\n                            \n                            \n                                    Private\n                                onProgressCallbacks\n                            \n                            \n                                    Private\n                                progressItems\n                            \n                            \n                                    Public\n                                toLoad\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addLoadableItem\n                            \n                            \n                                    Public\n                                addLoadListener\n                            \n                            \n                                    Public\n                                addLoadListenerWithCheck\n                            \n                            \n                                    Public\n                                addProgressListener\n                            \n                            \n                                    Public\n                                itemLoaded\n                            \n                            \n                                    Public\n                                onProgress\n                            \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/loading-manager.ts:19\n                            \n                        \n\n                \n                    \n                            Create the singleton Phoenix loading manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        instance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LoadingManager\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:6\n                        \n                    \n\n            \n                \n                    Instance of the loading manager\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        loaded\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:11\n                        \n                    \n\n            \n                \n                    Items loaded\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onLoadCallbacks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     (function)[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:14\n                        \n                    \n\n            \n                \n                    Callbacks to call on load.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onProgressCallbacks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     (function)[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:16\n                        \n                    \n\n            \n                \n                    Callbacks to call on progress.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        progressItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:19\n                        \n                    \n\n            \n                \n                    Progress for each named item.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        toLoad\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:9\n                        \n                    \n\n            \n                \n                    Items to load.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addLoadableItem\n                        \n                    \n                \n            \n            \n                \n                    \n                    addLoadableItem(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:37\n                \n            \n\n\n            \n                \n                    Add an item which is to be loaded.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        ID of the item to be loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addLoadListener\n                        \n                    \n                \n            \n            \n                \n                    \n                    addLoadListener(callback: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:84\n                \n            \n\n\n            \n                \n                    Add a listener for when all items have loaded.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call when all items have loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addLoadListenerWithCheck\n                        \n                    \n                \n            \n            \n                \n                    \n                    addLoadListenerWithCheck(callback: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:93\n                \n            \n\n\n            \n                \n                    Add a listener for when all items have loaded with check if there\nare any items to load when the listener is added.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call when all items have loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addProgressListener\n                        \n                    \n                \n            \n            \n                \n                    \n                    addProgressListener(callback: (progress: number) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:105\n                \n            \n\n\n            \n                \n                    Add a callback to listen when the progress of an item increases.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call when the progress of a loading item increases.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        itemLoaded\n                        \n                    \n                \n            \n            \n                \n                    \n                    itemLoaded(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:46\n                \n            \n\n\n            \n                \n                    Function to call when an item has finished loading.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        ID of the item loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        onProgress\n                        \n                    \n                \n            \n            \n                \n                    \n                    onProgress(id: string, progress: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:64\n                \n            \n\n\n            \n                \n                    Function to call when loading of an item progresses.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the item with the progress.\n\n                                    \n                                \n                                \n                                    progress\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Progress of the item.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        reset\n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:112\n                \n            \n\n\n            \n                \n                    Reset the loading manager and its items.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class LoadingManager {\n  /** Instance of the loading manager */\n  private static instance: LoadingManager;\n\n  /** Items to load. */\n  public toLoad: string[] = [];\n  /** Items loaded */\n  public loaded: string[] = [];\n\n  /** Callbacks to call on load. */\n  private onLoadCallbacks: (() => void)[] = [];\n  /** Callbacks to call on progress. */\n  private onProgressCallbacks: ((progress: number) => void)[] = [];\n\n  /** Progress for each named item. */\n  private progressItems: { [key: string]: number } = {};\n\n  /**\n   * Create the singleton Phoenix loading manager.\n   * @returns The loading manager instance.\n   */\n  constructor() {\n    if (LoadingManager.instance === undefined) {\n      LoadingManager.instance = this;\n    }\n\n    return LoadingManager.instance;\n  }\n\n  /**\n   * Add an item which is to be loaded.\n   * @param id ID of the item to be loaded.\n   */\n  public addLoadableItem(id: string = '') {\n    this.toLoad.push(id);\n    this.progressItems[id] = 0;\n  }\n\n  /**\n   * Function to call when an item has finished loading.\n   * @param id ID of the item loaded.\n   */\n  public itemLoaded(id: string = '') {\n    this.loaded.push(id);\n    this.onProgress(id, 100);\n\n    if (\n      this.toLoad.length === this.loaded.length &&\n      this.toLoad.sort().join(',') === this.loaded.sort().join(',')\n    ) {\n      this.onLoadCallbacks.forEach((callback) => callback());\n      this.reset();\n    }\n  }\n\n  /**\n   * Function to call when loading of an item progresses.\n   * @param id ID of the item with the progress.\n   * @param progress Progress of the item.\n   */\n  public onProgress(id: string, progress: number) {\n    this.progressItems[id] = progress;\n\n    const totalProgress = Object.values(this.progressItems).reduce(\n      (acc, val) => acc + val,\n      0\n    );\n    const totalItems = Object.keys(this.progressItems).length;\n\n    const averageProgress = totalProgress / totalItems;\n\n    for (const callback of this.onProgressCallbacks) {\n      callback(averageProgress);\n    }\n  }\n\n  /**\n   * Add a listener for when all items have loaded.\n   * @param callback Callback to call when all items have loaded.\n   */\n  public addLoadListener(callback: () => void) {\n    this.onLoadCallbacks.push(callback);\n  }\n\n  /**\n   * Add a listener for when all items have loaded with check if there\n   * are any items to load when the listener is added.\n   * @param callback Callback to call when all items have loaded.\n   */\n  public addLoadListenerWithCheck(callback: () => void) {\n    if (this.toLoad.length > 0 && this.toLoad.length !== this.loaded.length) {\n      this.onLoadCallbacks.push(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Add a callback to listen when the progress of an item increases.\n   * @param callback Callback to call when the progress of a loading item increases.\n   */\n  public addProgressListener(callback: (progress: number) => void) {\n    this.onProgressCallbacks.push(callback);\n  }\n\n  /**\n   * Reset the loading manager and its items.\n   */\n  public reset() {\n    this.toLoad = [];\n    this.loaded = [];\n    this.onLoadCallbacks = [];\n    this.onProgressCallbacks = [];\n    this.progressItems = {};\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixMenuNode.html":{"url":"classes/PhoenixMenuNode.html","title":"class - PhoenixMenuNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixMenuNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts\n        \n\n\n            \n                Description\n            \n            \n                A single node of phoenix menu item.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                children\n                            \n                            \n                                childrenActive\n                            \n                            \n                                    Private\n                                childrenToggleState\n                            \n                            \n                                configActive\n                            \n                            \n                                configs\n                            \n                            \n                                icon\n                            \n                            \n                                name\n                            \n                            \n                                nodeLevel\n                            \n                            \n                                onToggle\n                            \n                            \n                                    Private\n                                parent\n                            \n                            \n                                toggleState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addChild\n                            \n                            \n                                addConfig\n                            \n                            \n                                applyConfigState\n                            \n                            \n                                findInTree\n                            \n                            \n                                findInTreeOrCreate\n                            \n                            \n                                getNodeState\n                            \n                            \n                                loadStateFromJSON\n                            \n                            \n                                remove\n                            \n                            \n                                removeChild\n                            \n                            \n                                toggleSelfAndDescendants\n                            \n                            \n                                truncate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, icon?: string, onToggle?: (value?: boolean) => void, children?: PhoenixMenuNode[], configs?: [], parent?: PhoenixMenuNode)\n                    \n                \n                        \n                            \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:32\n                            \n                        \n\n                \n                    \n                            Create the phoenix menu node.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the node.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Icon of the node.\n\n                                                        \n                                                \n                                                \n                                                        onToggle\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Function on toggling the node.\n\n                                                        \n                                                \n                                                \n                                                        children\n                                                  \n                                                        \n                                                                        PhoenixMenuNode[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Children of the node.\n\n                                                        \n                                                \n                                                \n                                                        configs\n                                                  \n                                                        \n                                                                    []\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Configuration options in the node.\n\n                                                        \n                                                \n                                                \n                                                        parent\n                                                  \n                                                        \n                                                                        PhoenixMenuNode\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Parent of the node.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:16\n                        \n                    \n\n            \n                \n                    Children of the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        childrenActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:30\n                        \n                    \n\n            \n                \n                    If the node children are active or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        childrenToggleState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:27\n                        \n                    \n\n            \n                \n                    Previous toggle state of child nodes. This is so that the\nprevious state of child can be restored if we toggle the parent back on.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:32\n                        \n                    \n\n            \n                \n                    If the node configuration options are active or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:18\n                        \n                    \n\n            \n                \n                    Configuration options in the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:10\n                        \n                    \n\n            \n                \n                    Icon of the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:8\n                        \n                    \n\n            \n                \n                    Name of the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodeLevel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:20\n                        \n                    \n\n            \n                \n                    Level of the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onToggle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:12\n                        \n                    \n\n            \n                \n                    Function on toggling the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:22\n                        \n                    \n\n            \n                \n                    Parent of the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:14\n                        \n                    \n\n            \n                \n                    If the node toggle state is true or false.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addChild\n                        \n                    \n                \n            \n            \n                \naddChild(name: string, onToggle?: (value?: boolean) => void, icon?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:66\n                \n            \n\n\n            \n                \n                    Add a child to the phoenix menu item.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the child.\n\n                                    \n                                \n                                \n                                    onToggle\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function on toggling the child.\n\n                                    \n                                \n                                \n                                    icon\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Icon of the child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The child node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addConfig\n                        \n                    \n                \n            \n            \n                \naddConfig(type: T, options: Omit)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:115\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Add a config to the phoenix menu item.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Type of configuration.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                            Omit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Options for the config.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The current node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        applyConfigState\n                        \n                    \n                \n            \n            \n                \napplyConfigState(config: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:149\n                \n            \n\n\n            \n                \n                    Apply the current values of config by calling the change function.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Config whose values are to be applied.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findInTree\n                        \n                    \n                \n            \n            \n                \nfindInTree(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:240\n                \n            \n\n\n            \n                \n                    Find a node in the tree by name.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the node to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The found node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findInTreeOrCreate\n                        \n                    \n                \n            \n            \n                \nfindInTreeOrCreate(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:258\n                \n            \n\n\n            \n                \n                    Find a node in the tree by name or create one.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the node to find or create.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The found or created node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeState\n                        \n                    \n                \n            \n            \n                \ngetNodeState()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:173\n                \n            \n\n\n            \n                \n                    Get current state of the node as an object.\n\n\n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        State of the node as an object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadStateFromJSON\n                        \n                    \n                \n            \n            \n                \nloadStateFromJSON(json: string | literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:194\n                \n            \n\n\n            \n                \n                    Load the state of the phoenix menu node from JSON.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    json\n                                    \n                                            string | literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        JSON containing the phoenix menu node state.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:92\n                \n            \n\n\n            \n                \n                    Remove the current node.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeChild\n                        \n                    \n                \n            \n            \n                \nremoveChild(child: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:83\n                \n            \n\n\n            \n                \n                    Remove a child node.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The child node to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The current node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleSelfAndDescendants\n                        \n                    \n                \n            \n            \n                \ntoggleSelfAndDescendants(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:129\n                \n            \n\n\n            \n                \n                    Function for toggling the current and all child nodes.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the node itself and descendants are to be made true or false.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        truncate\n                        \n                    \n                \n            \n            \n                \ntruncate()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:105\n                \n            \n\n\n            \n                \n                    Remove all children.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PhoenixMenuConfigs } from './config-types';\n\n/**\n * A single node of phoenix menu item.\n */\nexport class PhoenixMenuNode {\n  /** Name of the node. */\n  name: string;\n  /** Icon of the node. */\n  icon: string;\n  /** Function on toggling the node. */\n  onToggle: (value: boolean) => void;\n  /** If the node toggle state is true or false. */\n  toggleState: boolean = true;\n  /** Children of the node. */\n  children: PhoenixMenuNode[] = [];\n  /** Configuration options in the node. */\n  configs: PhoenixMenuConfigs[keyof PhoenixMenuConfigs][] = [];\n  /** Level of the node. */\n  nodeLevel: number = 0;\n  /** Parent of the node. */\n  private parent: PhoenixMenuNode;\n  /**\n   * Previous toggle state of child nodes. This is so that the\n   * previous state of child can be restored if we toggle the parent back on.\n   */\n  private childrenToggleState = {};\n\n  /** If the node children are active or not. */\n  childrenActive: boolean = false;\n  /** If the node configuration options are active or not. */\n  configActive: boolean = false;\n\n  /**\n   * Create the phoenix menu node.\n   * @param name Name of the node.\n   * @param icon Icon of the node.\n   * @param onToggle Function on toggling the node.\n   * @param children Children of the node.\n   * @param configs Configuration options in the node.\n   * @param parent Parent of the node.\n   */\n  constructor(\n    name: string,\n    icon?: string,\n    onToggle?: (value: boolean) => void,\n    children?: PhoenixMenuNode[],\n    configs?: PhoenixMenuConfigs[keyof PhoenixMenuConfigs][],\n    parent?: PhoenixMenuNode\n  ) {\n    this.name = name;\n    this.icon = icon;\n    this.onToggle = onToggle;\n    if (children) this.children = children;\n    if (configs) this.configs = configs;\n    if (parent) this.parent = parent;\n  }\n\n  /**\n   * Add a child to the phoenix menu item.\n   * @param name Name of the child.\n   * @param onToggle Function on toggling the child.\n   * @param icon Icon of the child.\n   * @returns The child node.\n   */\n  addChild(\n    name: string,\n    onToggle?: (value: boolean) => void,\n    icon?: string\n  ): PhoenixMenuNode {\n    const child = new PhoenixMenuNode(name, icon, onToggle);\n    child.parent = this;\n    child.nodeLevel = this.nodeLevel + 1;\n    this.children.push(child);\n    return child;\n  }\n\n  /**\n   * Remove a child node.\n   * @param child The child node to be removed.\n   * @returns The current node.\n   */\n  removeChild(child: PhoenixMenuNode): PhoenixMenuNode {\n    const childIndex = this.children.indexOf(child);\n    this.children.splice(childIndex, 1);\n    return this;\n  }\n\n  /**\n   * Remove the current node.\n   */\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    } else {\n      console.error(\n        'Cannot delete root node of phoenix menu. Set it to undefined/null instead.'\n      );\n    }\n  }\n\n  /**\n   * Remove all children.\n   */\n  truncate() {\n    this.children = [];\n  }\n\n  /**\n   * Add a config to the phoenix menu item.\n   * @param type Type of configuration.\n   * @param options Options for the config.\n   * @returns The current node.\n   */\n  addConfig(\n    type: T,\n    options: Omit\n  ): PhoenixMenuNode {\n    const configsLength = this.configs.push({ type, ...options });\n    // Apply the values of config\n    this.applyConfigState(this.configs[configsLength - 1]);\n    return this;\n  }\n\n  /**\n   * Function for toggling the current and all child nodes.\n   * @param value If the node itself and descendants are to be made true or false.\n   */\n  toggleSelfAndDescendants(value: boolean) {\n    this.onToggle?.(value);\n    this.toggleState = value;\n    for (const child of this.children) {\n      if (!value) {\n        // Save previous toggle state of children and toggle them false\n        this.childrenToggleState[child.name] = child.toggleState;\n        child.toggleSelfAndDescendants(value);\n      } else {\n        // Restore previous toggle state of children\n        child.toggleState = this.childrenToggleState[child.name];\n        child.toggleSelfAndDescendants(child.toggleState);\n      }\n    }\n  }\n\n  /**\n   * Apply the current values of config by calling the change function.\n   * @param config Config whose values are to be applied.\n   */\n  applyConfigState(config: any) {\n    // Apply configs of different config types - manual\n    if (config.type === 'checkbox' && config?.['isChecked']) {\n      config.onChange?.(config?.['isChecked']);\n    } else if (config.type === 'color' && config?.['color'] && !config.group) {\n      // Ignore color by options with `!config.group`, otherwise the collection color is overridden\n      config.onChange?.(config?.['color']);\n    } else if (config.type === 'slider' && config?.['value']) {\n      config.onChange?.(config?.['value']);\n    } else if (\n      config.type === 'rangeSlider' &&\n      config?.['value'] !== undefined\n    ) {\n      config.onChange?.({\n        value: config?.['value'],\n        highValue: config?.['highValue'],\n      });\n    }\n  }\n\n  /**\n   * Get current state of the node as an object.\n   * @returns State of the node as an object.\n   */\n  getNodeState(): { [key: string]: any } {\n    const phoenixNodeJSON: { [key: string]: any } = {};\n\n    phoenixNodeJSON['name'] = this.name;\n    phoenixNodeJSON['nodeLevel'] = this.nodeLevel;\n    phoenixNodeJSON['toggleState'] = this.toggleState;\n    phoenixNodeJSON['childrenActive'] = this.childrenActive;\n    phoenixNodeJSON['configs'] = this.configs;\n    phoenixNodeJSON['children'] = [];\n\n    for (const child of this.children) {\n      phoenixNodeJSON['children'].push(child.getNodeState());\n    }\n\n    return phoenixNodeJSON;\n  }\n\n  /**\n   * Load the state of the phoenix menu node from JSON.\n   * @param json JSON containing the phoenix menu node state.\n   */\n  loadStateFromJSON(json: string | { [key: string]: any }) {\n    let jsonObject: any;\n    if (typeof json === 'string') {\n      jsonObject = JSON.parse(json);\n    } else {\n      jsonObject = json;\n    }\n\n    this.childrenActive = jsonObject['childrenActive'];\n    this.toggleState = jsonObject['toggleState'];\n    this.toggleState !== undefined && this.onToggle?.(this.toggleState);\n\n    for (const configState of jsonObject['configs']) {\n      const nodeConfig = this.configs.find(\n        (nodeConfig) =>\n          nodeConfig.type === configState['type'] &&\n          nodeConfig.label === configState['label']\n      );\n\n      if (nodeConfig) {\n        for (const prop in configState) {\n          nodeConfig[prop] = configState[prop];\n        }\n\n        this.applyConfigState(nodeConfig);\n      }\n    }\n\n    for (const childState of jsonObject['children']) {\n      const nodeChild = this.children.filter(\n        (nodeChild) =>\n          nodeChild.name === childState.name &&\n          nodeChild.nodeLevel === childState.nodeLevel\n      )[0];\n\n      if (nodeChild) {\n        nodeChild.loadStateFromJSON(childState);\n      }\n    }\n  }\n\n  /**\n   * Find a node in the tree by name.\n   * @param name Name of the node to find.\n   * @returns The found node.\n   */\n  findInTree(name: string): PhoenixMenuNode {\n    if (this.name === name) {\n      return this;\n    } else {\n      for (const child of this.children) {\n        const nodeFound = child.findInTree(name);\n        if (nodeFound) {\n          return nodeFound;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find a node in the tree by name or create one.\n   * @param name Name of the node to find or create.\n   * @returns The found or created node.\n   */\n  findInTreeOrCreate(name: string): PhoenixMenuNode {\n    let prevNode: PhoenixMenuNode = this;\n    name.split('>').forEach((nodeName) => {\n      nodeName = nodeName.trim();\n      const nodeFound = prevNode.findInTree(nodeName);\n      // const nodeFound = prevNode.children.find(child => child.name === nodeName);\n\n      prevNode = nodeFound ? nodeFound : prevNode.addChild(nodeName, () => {});\n    });\n    return prevNode;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixMenuUI.html":{"url":"classes/PhoenixMenuUI.html","title":"class - PhoenixMenuUI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixMenuUI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts\n        \n\n\n            \n                Description\n            \n            \n                A wrapper class for Phoenix menu to perform UI related operations.\n\n            \n\n\n            \n                Implements\n            \n            \n                            PhoenixUI\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                eventFolder\n                            \n                            \n                                    Private\n                                eventFolderState\n                            \n                            \n                                    Private\n                                geomFolder\n                            \n                            \n                                    Private\n                                labelsFolder\n                            \n                            \n                                    Private\n                                sceneManager\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addCollection\n                            \n                            \n                                    Public\n                                addEventDataFolder\n                            \n                            \n                                    Public\n                                addEventDataTypeFolder\n                            \n                            \n                                    Public\n                                addGeometry\n                            \n                            \n                                    Public\n                                addGeometryFolder\n                            \n                            \n                                    Public\n                                addLabel\n                            \n                            \n                                    Public\n                                addLabelsFolder\n                            \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                getEventDataTypeFolder\n                            \n                            \n                                    Public\n                                loadEventFolderState\n                            \n                            \n                                    Public\n                                removeLabel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(phoenixMenuRoot: PhoenixMenuNode, three: ThreeManager)\n                    \n                \n                        \n                            \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:29\n                            \n                        \n\n                \n                    \n                            Create Phoenix menu UI with different controls related to detector geometry and event data.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        phoenixMenuRoot\n                                                  \n                                                        \n                                                                        PhoenixMenuNode\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Root node of the Phoenix menu.\n\n                                                        \n                                                \n                                                \n                                                        three\n                                                  \n                                                        \n                                                                        ThreeManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The three manager for managing three.js related operations.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        eventFolder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:23\n                        \n                    \n\n            \n                \n                    Phoenix menu node containing event related data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        eventFolderState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:25\n                        \n                    \n\n            \n                \n                    State of the Phoenix menu node containing event related data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        geomFolder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:21\n                        \n                    \n\n            \n                \n                    Phoenix menu node containing geometries data\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        labelsFolder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:27\n                        \n                    \n\n            \n                \n                    Phoenix menu node containing labels.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sceneManager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SceneManager\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:29\n                        \n                    \n\n            \n                \n                    Manager for managing functions of the three.js scene.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addCollection\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(eventDataType: string, collectionName: string, cuts?: Cut[], collectionColor?: Color)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:219\n                \n            \n\n\n            \n                \n                    Add collection folder and its configurable options to the event data type (tracks, hits etc.) folder.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventDataType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the event data type.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to be added in the type of event data (tracks, hits etc.).\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Cuts to the collection of event data that are to be made configurable to filter event data.\n\n                                    \n                                \n                                \n                                    collectionColor\n                                    \n                                            Color\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Default color of the collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addEventDataFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    addEventDataFolder()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:175\n                \n            \n\n\n            \n                \n                    Add event data folder with functions for event data toggles like show/hide and depthTest.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addEventDataTypeFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    addEventDataTypeFolder(typeName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:201\n                \n            \n\n\n            \n                \n                    Add folder for event data type like tracks or hits to the menu.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the type of event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addGeometry\n                        \n                    \n                \n            \n            \n                \n                    \n                    addGeometry(object: Object3D, menuSubfolder?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:116\n                \n            \n\n\n            \n                \n                    Add geometry to the menu's geometry folder and set up its configurable options.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the UI menu.\n\n                                    \n                                \n                                \n                                    menuSubfolder\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Subfolder in the menu to add the geometry to. Example Folder > Subfolder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addGeometryFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    addGeometryFolder()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:63\n                \n            \n\n\n            \n                \n                    Add geometry (detector geometry) folder to the menu.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addLabel\n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabel(labelId: string, onRemoveLabel?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:384\n                \n            \n\n\n            \n                \n                    Add folder for configuration of label.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    labelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Unique ID of the label.\n\n                                    \n                                \n                                \n                                    onRemoveLabel\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function called when label is removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addLabelsFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabelsFolder(configFunctions: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:334\n                \n            \n\n\n            \n                \n                    Add labels folder to the menu.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configFunctions\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Functions to attach to the labels folder configuration.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clear\n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:49\n                \n            \n\n\n            \n                \n                    Clear the menu by removing all folders.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getEventDataTypeFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventDataTypeFolder(typeName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:440\n                \n            \n\n\n            \n                \n                    Get the folder of the event data type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the event data type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        Folder of the event data type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        loadEventFolderState\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadEventFolderState()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:449\n                \n            \n\n\n            \n                \n                    Load previous state of the event data folder in Phoenix menu if any.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeLabel\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLabel(labelId: string, labelNode?: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:425\n                \n            \n\n\n            \n                \n                    Remove label from the menu and scene if it exists.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    labelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A unique label ID string.\n\n                                    \n                                \n                                \n                                    labelNode\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BufferGeometry,\n  Color,\n  Mesh,\n  MeshPhongMaterial,\n  Object3D,\n} from 'three';\nimport { SceneManager } from '../../three-manager/scene-manager';\nimport { ThreeManager } from '../../three-manager';\nimport { PhoenixMenuNode } from './phoenix-menu-node';\nimport { Cut } from '../../../lib/models/cut.model';\nimport { PrettySymbols } from '../../../helpers/pretty-symbols';\nimport { ColorByOptionKeys, ColorOptions } from '../color-options';\nimport { PhoenixUI } from '../phoenix-ui';\n\n/**\n * A wrapper class for Phoenix menu to perform UI related operations.\n */\nexport class PhoenixMenuUI implements PhoenixUI {\n  /** Phoenix menu node containing geometries data */\n  private geomFolder: PhoenixMenuNode;\n  /** Phoenix menu node containing event related data. */\n  private eventFolder: PhoenixMenuNode;\n  /** State of the Phoenix menu node containing event related data. */\n  private eventFolderState: any;\n  /** Phoenix menu node containing labels. */\n  private labelsFolder: PhoenixMenuNode;\n  /** Manager for managing functions of the three.js scene. */\n  private sceneManager: SceneManager;\n\n  /**\n   * Create Phoenix menu UI with different controls related to detector geometry and event data.\n   * @param phoenixMenuRoot Root node of the Phoenix menu.\n   * @param three The three manager for managing three.js related operations.\n   */\n  constructor(\n    private phoenixMenuRoot: PhoenixMenuNode,\n    private three: ThreeManager\n  ) {\n    this.geomFolder = null;\n    this.eventFolder = null;\n    this.labelsFolder = null;\n    this.sceneManager = three.getSceneManager();\n  }\n\n  /**\n   * Clear the menu by removing all folders.\n   */\n  public clear() {\n    if (this.phoenixMenuRoot) {\n      this.phoenixMenuRoot.truncate();\n      this.phoenixMenuRoot = undefined;\n    }\n\n    this.geomFolder = null;\n    this.eventFolder = null;\n    this.labelsFolder = null;\n  }\n\n  /**\n   * Add geometry (detector geometry) folder to the menu.\n   */\n  public addGeometryFolder() {\n    // Phoenix menu\n    if (this.geomFolder === null) {\n      this.geomFolder = this.phoenixMenuRoot.addChild(\n        'Detector',\n        (value) => {\n          this.sceneManager.groupVisibility(SceneManager.GEOMETRIES_ID, value);\n        },\n        'perspective'\n      );\n    }\n\n    this.geomFolder\n      .addConfig('checkbox', {\n        label: 'Wireframe',\n        isChecked: false,\n        onChange: (value) => {\n          this.sceneManager.wireframeGeometries(value);\n        },\n      })\n      .addConfig('slider', {\n        label: 'Opacity',\n        min: 0,\n        max: 1,\n        step: 0.01,\n        allowCustomValue: true,\n        onChange: (value) => {\n          this.sceneManager.setGeometryOpacity(\n            this.sceneManager.getObjectByName(SceneManager.GEOMETRIES_ID),\n            value\n          );\n        },\n      })\n      .addConfig('slider', {\n        label: 'Scale',\n        min: 0,\n        max: 20,\n        step: 0.01,\n        allowCustomValue: true,\n        onChange: (scale) => {\n          this.sceneManager.scaleObject(\n            this.sceneManager.getObjectByName(SceneManager.GEOMETRIES_ID),\n            scale\n          );\n        },\n      });\n  }\n\n  /**\n   * Add geometry to the menu's geometry folder and set up its configurable options.\n   * @param object Object to add to the UI menu.\n   * @param menuSubfolder Subfolder in the menu to add the geometry to. Example `Folder > Subfolder`.\n   */\n  public addGeometry(object: Object3D, menuSubfolder?: string) {\n    const { name, material, visible } = object as Mesh;\n    const color = material?.color;\n\n    let parentNode: PhoenixMenuNode = this.geomFolder;\n    if (menuSubfolder) {\n      parentNode = this.geomFolder.findInTreeOrCreate(menuSubfolder);\n    }\n\n    // find out where the actual object name starts, providing that the name\n    // is hierarchical and contents higher level menu names too\n    let nameStart = name.lastIndexOf(' > ');\n    if (nameStart  '\n    }\n    const objFolder = parentNode.addChild(\n      name.substring(nameStart),\n      (value: boolean) => {\n        this.sceneManager.objectVisibility(object, value);\n      }\n    );\n\n    objFolder.toggleState = visible;\n\n    objFolder\n      .addConfig('color', {\n        label: 'Color',\n        color: color ? `#${new Color(color).getHexString()}` : undefined,\n        onChange: (value) => {\n          this.sceneManager.changeObjectColor(object, value);\n        },\n      })\n      .addConfig('slider', {\n        label: 'Opacity',\n        min: 0,\n        max: 1,\n        step: 0.05,\n        allowCustomValue: true,\n        onChange: (opacity) => {\n          this.sceneManager.setGeometryOpacity(object, opacity);\n        },\n      })\n      .addConfig('button', {\n        label: 'Remove',\n        onClick: () => {\n          objFolder.remove();\n          this.sceneManager.removeGeometry(object);\n        },\n      });\n  }\n\n  /**\n   * Add event data folder with functions for event data toggles like show/hide and depthTest.\n   */\n  public addEventDataFolder() {\n    // Phoenix menu\n    if (this.eventFolder !== null) {\n      this.eventFolderState = this.eventFolder.getNodeState();\n      this.eventFolder.remove();\n    }\n    this.eventFolder = this.phoenixMenuRoot.addChild(\n      'Event Data',\n      (value: boolean) => {\n        this.sceneManager.groupVisibility(SceneManager.EVENT_DATA_ID, value);\n      },\n      'event-folder'\n    );\n    this.eventFolder.addConfig('checkbox', {\n      label: 'Depth Test',\n      isChecked: true,\n      onChange: (value) => {\n        this.three.eventDataDepthTest(value);\n      },\n    });\n  }\n\n  /**\n   * Add folder for event data type like tracks or hits to the menu.\n   * @param typeName Name of the type of event data.\n   */\n  public addEventDataTypeFolder(typeName: string): void {\n    this.eventFolder.addChild(typeName, (value: boolean) => {\n      this.sceneManager.objectVisibility(\n        this.sceneManager\n          .getObjectByName(SceneManager.EVENT_DATA_ID)\n          .getObjectByName(typeName),\n        value\n      );\n    });\n  }\n\n  /**\n   * Add collection folder and its configurable options to the event data type (tracks, hits etc.) folder.\n   * @param eventDataType Name of the event data type.\n   * @param collectionName Name of the collection to be added in the type of event data (tracks, hits etc.).\n   * @param cuts Cuts to the collection of event data that are to be made configurable to filter event data.\n   * @param collectionColor Default color of the collection.\n   */\n  public addCollection(\n    eventDataType: string,\n    collectionName: string,\n    cuts?: Cut[],\n    collectionColor?: Color\n  ) {\n    const typeFolder = this.eventFolder.children.find(\n      (eventDataTypeNode) => eventDataTypeNode.name === eventDataType\n    );\n\n    if (!typeFolder) {\n      return;\n    }\n\n    const collectionNode = typeFolder.addChild(\n      collectionName,\n      (value: boolean) => {\n        const collectionObject = this.sceneManager\n          .getObjectByName(SceneManager.EVENT_DATA_ID)\n          .getObjectByName(collectionName);\n        this.sceneManager.objectVisibility(collectionObject, value);\n      }\n    );\n\n    const drawOptionsNode = collectionNode.addChild('Draw Options');\n\n    drawOptionsNode.addConfig('slider', {\n      label: 'Opacity',\n      min: 0.1,\n      step: 0.1,\n      max: 1,\n      onChange: (value) => {\n        this.sceneManager.setGeometryOpacity(\n          this.sceneManager\n            .getObjectByName(SceneManager.EVENT_DATA_ID)\n            .getObjectByName(collectionName),\n          value\n        );\n      },\n    });\n\n    drawOptionsNode.addConfig('checkbox', {\n      label: 'Wireframe',\n      onChange: (value) =>\n        this.sceneManager.wireframeObjects(\n          this.sceneManager\n            .getObjectByName(SceneManager.EVENT_DATA_ID)\n            .getObjectByName(collectionName),\n          value\n        ),\n    });\n\n    if (cuts && cuts.length > 0) {\n      const cutsOptionsNode = collectionNode.addChild('Cut Options');\n\n      cutsOptionsNode\n        .addConfig('label', {\n          label: 'Cuts',\n        })\n        .addConfig('button', {\n          label: 'Reset cuts',\n          onClick: () => {\n            this.sceneManager.groupVisibility(\n              collectionName,\n              true,\n              SceneManager.EVENT_DATA_ID\n            );\n\n            for (const cut of cuts) {\n              cut.reset();\n            }\n          },\n        });\n\n      // Add range sliders for cuts\n      for (const cut of cuts) {\n        cutsOptionsNode.addConfig('rangeSlider', {\n          label: PrettySymbols.getPrettySymbol(cut.field),\n          min: cut.minValue,\n          max: cut.maxValue,\n          step: cut.step,\n          value: cut.minValue,\n          highValue: cut.maxValue,\n          onChange: ({ value, highValue }) => {\n            cut.minValue = value;\n            cut.maxValue = highValue;\n            this.sceneManager.collectionFilter(collectionName, cuts);\n          },\n        });\n      }\n    }\n\n    const colorByOptions: ColorByOptionKeys[] = [];\n\n    // Extra config options specific to tracks\n    if (typeFolder.name === 'Tracks') {\n      colorByOptions.push(\n        ColorByOptionKeys.CHARGE,\n        ColorByOptionKeys.MOM,\n        ColorByOptionKeys.VERTEX\n      );\n    }\n\n    new ColorOptions(\n      this.three.getColorManager(),\n      collectionNode,\n      collectionColor,\n      colorByOptions\n    );\n  }\n\n  /**\n   * Add labels folder to the menu.\n   * @param configFunctions Functions to attach to the labels folder configuration.\n   */\n  public addLabelsFolder(configFunctions: any) {\n    if (this.labelsFolder !== null) {\n      return;\n    }\n\n    const {\n      onToggle,\n      onSizeChange,\n      onColorChange,\n      onSaveLabels,\n      onLoadLabels,\n    } = configFunctions;\n\n    this.labelsFolder = this.phoenixMenuRoot.addChild(\n      SceneManager.LABELS_ID,\n      onToggle,\n      'info'\n    );\n\n    this.labelsFolder.addConfig('slider', {\n      label: 'Size',\n      min: 0,\n      max: 10,\n      step: 0.01,\n      allowCustomValue: true,\n      onChange: onSizeChange,\n    });\n\n    this.labelsFolder.addConfig('color', {\n      label: 'Color',\n      color: '#a8a8a8',\n      onChange: onColorChange,\n    });\n\n    this.labelsFolder.addConfig('button', {\n      label: 'Save Labels',\n      onClick: onSaveLabels,\n    });\n\n    this.labelsFolder.addConfig('button', {\n      label: 'Load Labels',\n      onClick: onLoadLabels,\n    });\n  }\n\n  /**\n   * Add folder for configuration of label.\n   * @param labelId Unique ID of the label.\n   * @param onRemoveLabel Function called when label is removed.\n   */\n  public addLabel(labelId: string, onRemoveLabel?: () => void) {\n    let labelNode = this.labelsFolder.children.find(\n      (phoenixMenuNode) => phoenixMenuNode.name === labelId\n    );\n\n    if (labelNode) {\n      return;\n    }\n\n    labelNode = this.labelsFolder.addChild(labelId, (value) => {\n      const labelObject = this.sceneManager\n        .getObjectByName(SceneManager.LABELS_ID)\n        .getObjectByName(labelId);\n      this.sceneManager.objectVisibility(labelObject, value);\n    });\n\n    labelNode.addConfig('color', {\n      label: 'Color',\n      color: '#a8a8a8',\n      onChange: (value) => {\n        this.sceneManager.changeObjectColor(\n          this.sceneManager.getObjectByName(labelId),\n          value\n        );\n      },\n    });\n\n    labelNode.addConfig('button', {\n      label: 'Remove',\n      onClick: () => {\n        onRemoveLabel?.();\n        this.removeLabel(labelId, labelNode);\n      },\n    });\n  }\n\n  /**\n   * Remove label from the menu and scene if it exists.\n   * @param labelId A unique label ID string.\n   * @param labelFolderReference Reference to the label folder.\n   */\n  public removeLabel(labelId: string, labelNode?: PhoenixMenuNode) {\n    if (!labelNode) {\n      labelNode = this.labelsFolder?.children.find(\n        (singleLabelNode) => singleLabelNode.name === labelId\n      );\n    }\n\n    labelNode?.remove();\n  }\n\n  /**\n   * Get the folder of the event data type.\n   * @param typeName Name of the event data type.\n   * @returns Folder of the event data type.\n   */\n  public getEventDataTypeFolder(typeName: string): PhoenixMenuNode {\n    return this.eventFolder.children.find(\n      (eventDataTypeNode) => eventDataTypeNode.name === typeName\n    );\n  }\n\n  /**\n   * Load previous state of the event data folder in Phoenix menu if any.\n   */\n  public loadEventFolderState() {\n    if (this.eventFolderState) {\n      this.eventFolder.loadStateFromJSON(this.eventFolderState);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixObjects.html":{"url":"classes/PhoenixObjects.html","title":"class - PhoenixObjects","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixObjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/phoenix-objects.ts\n        \n\n\n            \n                Description\n            \n            \n                Physics objects that make up an event in Phoenix.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getCaloCell\n                            \n                            \n                                    Private\n                                    Static\n                                getCaloCube\n                            \n                            \n                                    Private\n                                    Static\n                                getCaloPosition\n                            \n                            \n                                    Static\n                                getCluster\n                            \n                            \n                                    Static\n                                getHits\n                            \n                            \n                                    Static\n                                getJet\n                            \n                            \n                                    Static\n                                getMissingEnergy\n                            \n                            \n                                    Static\n                                getPlanarCaloCell\n                            \n                            \n                                    Static\n                                getPlanarCaloCells\n                            \n                            \n                                    Static\n                                getTrack\n                            \n                            \n                                    Static\n                                getTracks\n                            \n                            \n                                    Static\n                                getVertex\n                            \n                            \n                                    Private\n                                    Static\n                                hitsToBoxes\n                            \n                            \n                                    Private\n                                    Static\n                                hitsToLines\n                            \n                            \n                                    Private\n                                    Static\n                                hitsToPoints\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getCaloCell\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCaloCell(caloCells: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:548\n                \n            \n\n\n            \n                \n                    Process the CaloCell from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    caloCells\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the CaloCell.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Calorimeter Cell object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        getCaloCube\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCaloCube(length: number, width: number, clusterParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:525\n                \n            \n\n\n            \n                \n                    Get the cuboid geometry for a Calo hit\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        length of the cuboid\n\n                                    \n                                \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                    \n                                        width of the cuboid\n\n                                    \n                                \n                                \n                                    clusterParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Parameters for the Cluster (which must include color\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Geometry.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        getCaloPosition\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCaloPosition(clusterParams: literal type, drawZ: number, drawRadius: number, maxR2: number, maxZ: number)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:488\n                \n            \n\n\n            \n                \n                    Get the position for a Calo hit in cartesian coordinates\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    clusterParams\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Cluster (which must include theta and phi)\n\n                                    \n                                \n                                \n                                    drawZ\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    drawRadius\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Radius where to draw barrel Clusters\n\n                                    \n                                \n                                \n                                    maxR2\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Maximum permitted radius squared\n\n                                    \n                                \n                                \n                                    maxZ\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Maximum position along the z axis\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Corrected cartesian position.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getCluster\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCluster(clusterParams: any, drawRadius: number, drawZ: number, energyScaling: number, fixedDepth: number)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:448\n                \n            \n\n\n            \n                \n                    Process the Cluster from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    clusterParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Parameters for the Cluster.\n\n                                    \n                                \n                                \n                                    drawRadius\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1800.0\n                                    \n\n                                    \n                                        Radius where to draw barrel Clusters\n\n                                    \n                                \n                                \n                                    drawZ\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        3600.0\n                                    \n\n                                    \n                                        Plane in z where to draw endcap Clusters\n\n                                    \n                                \n                                \n                                    energyScaling\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0.03\n                                    \n\n                                    \n                                        Amount to multply the energy by to get the depth of the cell\n\n                                    \n                                \n                                \n                                    fixedDepth\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0.0\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Cluster object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getHits\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHits(hitsParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:255\n                \n            \n\n\n            \n                \n                    Process the Hits from the given parameters and get them as a geometry.\nCan optionally contain extraInfo, which will be added to the resultant hit.\ntype tells Phoenix how to draw this - currently can be Point (default), or Line.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hitsParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Either an array of positions, or of Hit objects. If objects, they must contain 'pos', the array of [x,y,z] positions,\nCan optionally contain extraInfo, which will be added to the resultant hit.\ntype tells Phoenix how to draw this - currently can be Point (default), or Line.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Hits object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getJet\n                        \n                    \n                \n            \n            \n                \n                    \n                    getJet(jetParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:196\n                \n            \n\n\n            \n                \n                    Process the Jet from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jetParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Jet.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Jet object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getMissingEnergy\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMissingEnergy(metParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:714\n                \n            \n\n\n            \n                \n                    Process the Vertex from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    metParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Vertex.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        MET object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getPlanarCaloCell\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPlanarCaloCell(caloCells: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:632\n                \n            \n\n\n            \n                \n                    Process the PlanarCaloCell from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    caloCells\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Planar Calorimeter.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Planar Calorimeter object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getPlanarCaloCells\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPlanarCaloCells(caloCells: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:586\n                \n            \n\n\n            \n                \n                    Get the planar calo cells from parameters.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    caloCells\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters to build planar calo cells.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Geometry.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getTrack\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTrack(trackParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:100\n                \n            \n\n\n            \n                \n                    Process the Track from the given parameters (and positions)\nand get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    trackParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Track.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Track object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getTracks\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTracks(tracks)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:40\n                \n            \n\n\n            \n                \n                    Get tracks as three.js obejct.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tracks\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Tracks params to construct tacks from.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        The object containing tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getVertex\n                        \n                    \n                \n            \n            \n                \n                    \n                    getVertex(vertexParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:688\n                \n            \n\n\n            \n                \n                    Process the Vertex from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    vertexParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Vertex.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Vertex object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        hitsToBoxes\n                        \n                    \n                \n            \n            \n                \n                    \n                    hitsToBoxes(pointPos: any, hitsParams: any, _hitParamsClone: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:405\n                \n            \n\n\n            \n                \n                    Get a Mesh object from Hits parameters. The Mesh is actually a set of boxes, one per hit\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pointPos\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Positions and dimensions of boxes\n\n                                    \n                                \n                                \n                                    hitsParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Hit.\n\n                                    \n                                \n                                \n                                    _hitParamsClone\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        A 3D object of type Mesh.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        hitsToLines\n                        \n                    \n                \n            \n            \n                \n                    \n                    hitsToLines(pointPos: any, hitsParams: any, _hitParamsClone: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:372\n                \n            \n\n\n            \n                \n                    Get a Lines object from Hits parameters.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pointPos\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Position of the HIt.\n\n                                    \n                                \n                                \n                                    hitsParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Hit.\n\n                                    \n                                \n                                \n                                    _hitParamsClone\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        A 3D object of type LineSegments.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        hitsToPoints\n                        \n                    \n                \n            \n            \n                \n                    \n                    hitsToPoints(pointPos: any, hitsParams: any, _hitParamsClone: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:340\n                \n            \n\n\n            \n                \n                    Get a Points object from Hits parameters.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pointPos\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Position of the point.\n\n                                    \n                                \n                                \n                                    hitsParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Hit.\n\n                                    \n                                \n                                \n                                    _hitParamsClone\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        A 3D object of type Points.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Vector3,\n  Object3D,\n  CatmullRomCurve3,\n  TubeGeometry,\n  MeshToonMaterial,\n  Mesh,\n  BufferGeometry,\n  LineBasicMaterial,\n  Line,\n  Group,\n  Quaternion,\n  CylinderGeometry,\n  MeshBasicMaterial,\n  BufferAttribute,\n  PointsMaterial,\n  Points,\n  BoxGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  LineSegments,\n  LineDashedMaterial,\n} from 'three';\nimport { EVENT_DATA_TYPE_COLORS } from '../../helpers/constants';\nimport { RKHelper } from '../../helpers/rk-helper';\nimport { CoordinateHelper } from '../../helpers/coordinate-helper';\nimport { mergeBufferGeometries } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport { TracksMaterial, TracksMesh } from './tracks';\nimport * as BufferGeometryUtils from 'three/examples/jsm/utils/BufferGeometryUtils';\n\n/**\n * Physics objects that make up an event in Phoenix.\n */\nexport class PhoenixObjects {\n  /**\n   * Get tracks as three.js obejct.\n   * @param tracks Tracks params to construct tacks from.\n   * @returns The object containing tracks.\n   */\n  public static getTracks(tracks): Object3D {\n    const tracksMesh = new TracksMesh();\n    const tracksMaterial = new TracksMaterial({ lineWidth: 2 });\n\n    for (const track of tracks) {\n      if (!(track.pos?.length > 2)) {\n        if (track.dparams) {\n          track.pos = RKHelper.extrapolateTrackPositions(track);\n        }\n        track.extended = true;\n      }\n\n      if (track.pos.length  new Vector3(p[0], p[1], p[2]));\n      const curve = new CatmullRomCurve3(points);\n      const vertices = curve.getPoints(50);\n\n      const color = track.color\n        ? parseInt(track.color, 16)\n        : EVENT_DATA_TYPE_COLORS.Tracks.getHex();\n\n      track.tid = tracksMesh.addTrack(vertices, color);\n      track.material = tracksMaterial;\n    }\n    tracksMesh.process();\n\n    const tracksObject = new Mesh(tracksMesh, tracksMaterial);\n    tracksObject.name = 'Track';\n    for (const track of tracks) {\n      track.uuid = tracksObject.uuid;\n    }\n    return tracksObject;\n  }\n\n  /**\n   * Process the Track from the given parameters (and positions)\n   * and get it as a geometry.\n   * @param trackParams Parameters of the Track.\n   * @returns Track object.\n   */\n  public static getTrack(trackParams: any): Object3D {\n    // Track with too few points are extrapolated with RungeKutta\n    if (!(trackParams.pos?.length > 2)) {\n      if (trackParams.dparams) {\n        trackParams.pos = RKHelper.extrapolateTrackPositions(trackParams);\n      }\n      trackParams.extended = true;\n    }\n\n    const positions = trackParams.pos;\n\n    // Check again, in case there was an issue with the extrapolation.\n    if (positions.length 0.1) {\n      //   console.log( 'theta:', trackParams.dparams[3], 'theta from hit', thetaFromPos, 'radius', radius );\n      // }\n    }\n\n    // attributes\n    const curve = new CatmullRomCurve3(points);\n\n    // TubeGeometry\n    const geometry = new TubeGeometry(curve, undefined, 2);\n    const material = new MeshToonMaterial({ color: objectColor });\n    const tubeObject = new Mesh(geometry, material);\n\n    // Line - Creating a Line to put inside the tube to show tracks even on zoom out\n    const vertices = curve.getPoints(50);\n    const lineGeometry = new BufferGeometry().setFromPoints(vertices);\n    const lineMaterial = new LineBasicMaterial({\n      color: objectColor,\n      linewidth: 2,\n    });\n    const lineObject = new Line(lineGeometry, lineMaterial);\n    lineObject.name = 'Track';\n\n    // Creating a group to add both the Tube curve and the Line\n    const trackObject = new Group();\n    trackObject.add(tubeObject);\n    trackObject.add(lineObject);\n\n    // Setting info to the tubeObject and trackObject for selection and cuts\n    for (const object of [tubeObject, trackObject, lineObject]) {\n      object.userData = Object.assign({}, trackParams);\n      object.name = 'Track';\n    }\n\n    // Setting uuid for selection from collections info\n    trackParams.uuid = trackObject.uuid;\n\n    return trackObject;\n  }\n\n  /**\n   * Process the Jet from the given parameters and get it as a geometry.\n   * @param jetParams Parameters for the Jet.\n   * @returns Jet object.\n   */\n  public static getJet(jetParams: any): Object3D {\n    const eta = jetParams.eta;\n    const phi = jetParams.phi;\n    // If theta is given then use that else calculate from eta\n    const theta = jetParams.theta\n      ? jetParams.theta\n      : CoordinateHelper.etaToTheta(eta);\n    // Jet energy parameter can either be 'energy' or 'et'\n    const length = (jetParams.energy ? jetParams.energy : jetParams.et) * 0.2;\n\n    const sphi = Math.sin(phi);\n    const cphi = Math.cos(phi);\n    const stheta = Math.sin(theta);\n    const ctheta = Math.cos(theta);\n    //\n    const translation = new Vector3(\n      0.5 * length * cphi * stheta,\n      0.5 * length * sphi * stheta,\n      0.5 * length * ctheta\n    );\n\n    const width = jetParams.coneR\n      ? length * Math.sin(jetParams.coneR)\n      : length * 0.1;\n\n    const x = cphi * stheta;\n    const y = sphi * stheta;\n    const z = ctheta;\n    const v1 = new Vector3(0, 1, 0);\n    const v2 = new Vector3(x, y, z);\n    const quaternion = new Quaternion();\n    quaternion.setFromUnitVectors(v1, v2);\n\n    const geometry = new CylinderGeometry(width, 10, length, 50, 50, false); // Cone\n\n    const material = new MeshBasicMaterial({\n      color: jetParams.color ?? EVENT_DATA_TYPE_COLORS.Jets,\n      opacity: 0.3,\n      transparent: true,\n    });\n    material.opacity = 0.5;\n    const mesh = new Mesh(geometry, material);\n    mesh.position.copy(translation);\n    mesh.quaternion.copy(quaternion);\n    mesh.userData = Object.assign({}, jetParams);\n    mesh.name = 'Jet';\n    // Setting uuid for selection from collections info\n    jetParams.uuid = mesh.uuid;\n\n    return mesh;\n  }\n\n  /**\n   * Process the Hits from the given parameters and get them as a geometry.\n   * @param hitsParams Either an array of positions, or of Hit objects. If objects, they must contain 'pos', the array of [x,y,z] positions,\n   * Can optionally contain extraInfo, which will be added to the resultant hit.\n   * `type` tells Phoenix how to draw this - currently can be Point (default), or Line.\n   * @returns Hits object.\n   */\n  public static getHits(hitsParams: any): Object3D {\n    let hitsParamsClone: any;\n    let positions: any[];\n    let type: string = 'Point'; // Default is point and 3 coordinates per hit\n    let coordlength = 3;\n    let isSimpleArray = false;\n\n    // if (typeof hitsParams === 'object' && !Array.isArray(hitsParams)) {\n    //   positions = [hitsParams.pos];\n    //   hitsParamsClone = hitsParams;\n    // } else {\n    //   positions = hitsParams;\n    //   hitsParamsClone = { pos: hitsParams };\n    // }\n\n    if (hitsParams.length > 0) {\n      // Peek at first one. Would be better to make these properties of the collections.\n      const first = hitsParams[0];\n      if (Array.isArray(first)) {\n        isSimpleArray = true;\n        hitsParamsClone = { pos: hitsParams };\n      } else {\n        hitsParamsClone = hitsParams;\n        if ('type' in first) {\n          type = first.type;\n        }\n      }\n    } else {\n      console.log('No hits! Aborting from getHits.');\n      return new Object3D();\n    }\n\n    // Lines need 6 coords\n    if (type === 'Line' || type === 'Box') {\n      coordlength = 6;\n    }\n\n    // attributes\n    const hitLength = hitsParams.length * coordlength;\n    if (isSimpleArray) length = hitLength; // These are already arrays\n    const pointPos = new Float32Array(hitLength);\n    let i = 0;\n    for (const hit of hitsParams) {\n      for (let j = 0; j  maxR2) {\n      position.setLength(\n        (position.length() * Math.sqrt(maxR2)) / Math.sqrt(cylRadius2)\n      );\n    }\n\n    if (Math.abs(position.z) > maxZ) {\n      position.setLength((position.length() * maxZ) / Math.abs(position.z));\n    }\n    return position;\n  }\n\n  /**\n   * Get the cuboid geometry for a Calo hit\n   * @param length length of the cuboid\n   * @param width width of the cuboid\n   * @param clusterParams Parameters for the Cluster (which must include color\n   * @returns Geometry.\n   */\n  private static getCaloCube(\n    length: number,\n    width: number = 30,\n    clusterParams: any\n  ) {\n    if (length \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PhoenixUI.html":{"url":"interfaces/PhoenixUI.html","title":"interface - PhoenixUI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PhoenixUI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/ui-manager/phoenix-ui.ts\n        \n\n\n            \n                Description\n            \n            \n                Common interface for implement Phoenix UI menu.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        addCollection\n                                    \n                                \n                                \n                                    \n                                        addEventDataFolder\n                                    \n                                \n                                \n                                    \n                                        addEventDataTypeFolder\n                                    \n                                \n                                \n                                    \n                                        addGeometry\n                                    \n                                \n                                \n                                    \n                                        addGeometryFolder\n                                    \n                                \n                                \n                                    \n                                        addLabel\n                                    \n                                \n                                \n                                    \n                                        addLabelsFolder\n                                    \n                                \n                                \n                                    \n                                        clear\n                                    \n                                \n                                \n                                    \n                                        getEventDataTypeFolder\n                                    \n                                \n                                \n                                    \n                                        removeLabel\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addCollection\n                        \n                    \n                \n            \n            \n                \naddCollection(eventDataType: string, collectionName: string, cuts?: Cut[], collectionColor?: Color)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-ui.ts:43\n                \n            \n\n\n            \n                \n                    Add collection folder and its configurable options to the event data type (tracks, hits etc.) folder.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventDataType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the event data type.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to be added in the type of event data (tracks, hits etc.).\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Cuts to the collection of event data that are to be made configurable to filter event data.\n\n                                    \n                                \n                                \n                                    collectionColor\n                                    \n                                            Color\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Default color of the collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addEventDataFolder\n                        \n                    \n                \n            \n            \n                \naddEventDataFolder()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-ui.ts:28\n                \n            \n\n\n            \n                \n                    Add event data folder with functions for event data toggles like show/hide and depthTest.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addEventDataTypeFolder\n                        \n                    \n                \n            \n            \n                \naddEventDataTypeFolder(typeName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-ui.ts:34\n                \n            \n\n\n            \n                \n                    Add folder for event data type like tracks or hits to the menu.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the type of event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addGeometry\n                        \n                    \n                \n            \n            \n                \naddGeometry(object: Object3D, menuSubfolder?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-ui.ts:23\n                \n            \n\n\n            \n                \n                    Add geometry to the menu's geometry folder and set up its configurable options.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the UI menu.\n\n                                    \n                                \n                                \n                                    menuSubfolder\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Subfolder in the menu to add the geometry to. Example Folder > Subfolder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addGeometryFolder\n                        \n                    \n                \n            \n            \n                \naddGeometryFolder()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-ui.ts:16\n                \n            \n\n\n            \n                \n                    Add geometry (detector geometry) folder to the menu.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addLabel\n                        \n                    \n                \n            \n            \n                \naddLabel(labelId: string, onRemoveLabel: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-ui.ts:61\n                \n            \n\n\n            \n                \n                    Add folder for configuration of label.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    labelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Unique ID of the label.\n\n                                    \n                                \n                                \n                                    onRemoveLabel\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function called when label is removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addLabelsFolder\n                        \n                    \n                \n            \n            \n                \naddLabelsFolder(configFunctions: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-ui.ts:54\n                \n            \n\n\n            \n                \n                    Add labels folder to the menu.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configFunctions\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Functions to attach to the labels folder configuration.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-ui.ts:11\n                \n            \n\n\n            \n                \n                    Clear the menu by removing all folders.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEventDataTypeFolder\n                        \n                    \n                \n            \n            \n                \ngetEventDataTypeFolder(typeName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-ui.ts:75\n                \n            \n\n\n            \n                \n                    Get the folder of the event data type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the event data type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        Folder of the event data type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeLabel\n                        \n                    \n                \n            \n            \n                \nremoveLabel(labelId: string, labelFolderReference?: T)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-ui.ts:68\n                \n            \n\n\n            \n                \n                    Remove label from the menu and scene if it exists.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    labelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A unique label ID string.\n\n                                    \n                                \n                                \n                                    labelFolderReference\n                                    \n                                            T\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Reference to the label folder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Color, Object3D } from 'three';\nimport { Cut } from '../../lib/models/cut.model';\n\n/**\n * Common interface for implement Phoenix UI menu.\n */\nexport interface PhoenixUI {\n  /**\n   * Clear the menu by removing all folders.\n   */\n  clear(): void;\n\n  /**\n   * Add geometry (detector geometry) folder to the menu.\n   */\n  addGeometryFolder(): void;\n\n  /**\n   * Add geometry to the menu's geometry folder and set up its configurable options.\n   * @param object Object to add to the UI menu.\n   * @param menuSubfolder Subfolder in the menu to add the geometry to. Example `Folder > Subfolder`.\n   */\n  addGeometry(object: Object3D, menuSubfolder?: string): void;\n\n  /**\n   * Add event data folder with functions for event data toggles like show/hide and depthTest.\n   */\n  addEventDataFolder(): void;\n\n  /**\n   * Add folder for event data type like tracks or hits to the menu.\n   * @param typeName Name of the type of event data.\n   */\n  addEventDataTypeFolder(typeName: string): void;\n\n  /**\n   * Add collection folder and its configurable options to the event data type (tracks, hits etc.) folder.\n   * @param eventDataType Name of the event data type.\n   * @param collectionName Name of the collection to be added in the type of event data (tracks, hits etc.).\n   * @param cuts Cuts to the collection of event data that are to be made configurable to filter event data.\n   * @param collectionColor Default color of the collection.\n   */\n  addCollection(\n    eventDataType: string,\n    collectionName: string,\n    cuts?: Cut[],\n    collectionColor?: Color\n  ): void;\n\n  /**\n   * Add labels folder to the menu.\n   * @param configFunctions Functions to attach to the labels folder configuration.\n   */\n  addLabelsFolder(configFunctions: any): void;\n\n  /**\n   * Add folder for configuration of label.\n   * @param labelId Unique ID of the label.\n   * @param onRemoveLabel Function called when label is removed.\n   */\n  addLabel(labelId: string, onRemoveLabel: () => void): void;\n\n  /**\n   * Remove label from the menu and scene if it exists.\n   * @param labelId A unique label ID string.\n   * @param labelFolderReference Reference to the label folder.\n   */\n  removeLabel(labelId: string, labelFolderReference?: T): void;\n\n  /**\n   * Get the folder of the event data type.\n   * @param typeName Name of the event data type.\n   * @returns Folder of the event data type.\n   */\n  getEventDataTypeFolder(typeName: string): T;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresetView.html":{"url":"classes/PresetView.html","title":"class - PresetView","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresetView\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/preset-view.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Preset view for easily transforming/changing camera position to a specified position.\nAlso allows to point the camera to a given target and to define the default clipping for that view\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraPos\n                            \n                            \n                                    Public\n                                cameraTarget\n                            \n                            \n                                    Public\n                                clipping\n                            \n                            \n                                    Public\n                                clippingOpeningAngle\n                            \n                            \n                                    Public\n                                clippingStartAngle\n                            \n                            \n                                    Public\n                                icon\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getIconURL\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, cameraPos: number[], cameraTarget: number[], icon: string, clipping: ClippingSetting, clippingStartAngle: number, clippingOpeningAngle: number)\n                    \n                \n                        \n                            \n                                Defined in src/lib/models/preset-view.model.ts:28\n                            \n                        \n\n                \n                    \n                            Create a preset view.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the preset view.\n\n                                                        \n                                                \n                                                \n                                                        cameraPos\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Position to which the camera is to be set.\n\n                                                        \n                                                \n                                                \n                                                        cameraTarget\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Target to which the camera is pointing.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Icon of the preset view (to describe the view angle).\n\n                                                        \n                                                \n                                                \n                                                        clipping\n                                                  \n                                                        \n                                                                        ClippingSetting\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        clippingStartAngle\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        clippingOpeningAngle\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cameraPos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:18\n                        \n                    \n\n            \n                \n                    Position to which the camera is to be set.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cameraTarget\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:20\n                        \n                    \n\n            \n                \n                    Target to which the camera is pointing.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clipping\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClippingSetting\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:24\n                        \n                    \n\n            \n                \n                    Whether clipping should be used.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clippingOpeningAngle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:28\n                        \n                    \n\n            \n                \n                    In case of clipping, value of the opening angle.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clippingStartAngle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:26\n                        \n                    \n\n            \n                \n                    In case of clipping, value of the start angle.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:16\n                        \n                    \n\n            \n                \n                    Icon of the preset view (to describe the view angle).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:22\n                        \n                    \n\n            \n                \n                    Name of the preset view.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getIconURL\n                        \n                    \n                \n            \n            \n                \ngetIconURL()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/models/preset-view.model.ts:59\n                \n            \n\n\n            \n                \n                    Get the URL of the preset view icon.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Icon URL.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export enum ClippingSetting {\n  NotForced,\n  On,\n  Off,\n}\n\n/**\n * Preset view for easily transforming/changing camera position to a specified position.\n * Also allows to point the camera to a given target and to define the default clipping for that view\n */\nexport class PresetView {\n  /** Icon of the preset view (to describe the view angle). */\n  public icon: string;\n  /** Position to which the camera is to be set. */\n  public cameraPos: number[];\n  /** Target to which the camera is pointing. */\n  public cameraTarget: number[];\n  /** Name of the preset view. */\n  public name: string;\n  /** Whether clipping should be used. */\n  public clipping: ClippingSetting;\n  /** In case of clipping, value of the start angle. */\n  public clippingStartAngle: number;\n  /** In case of clipping, value of the opening angle. */\n  public clippingOpeningAngle: number;\n\n  /**\n   * Create a preset view.\n   * @param name Name of the preset view.\n   * @param cameraPos Position to which the camera is to be set.\n   * @param cameraTarget Target to which the camera is pointing.\n   * @param icon Icon of the preset view (to describe the view angle).\n   */\n  constructor(\n    name: string,\n    cameraPos: number[],\n    cameraTarget: number[],\n    icon: string,\n    clipping: ClippingSetting = ClippingSetting.NotForced,\n    clippingStartAngle: number = 0,\n    clippingOpeningAngle: number = 0\n  ) {\n    this.name = name;\n    this.cameraPos = cameraPos;\n    this.cameraTarget = cameraTarget;\n    this.icon = icon;\n    this.clipping = clipping;\n    this.clippingStartAngle = clippingStartAngle;\n    this.clippingOpeningAngle = clippingOpeningAngle;\n  }\n\n  /**\n   * Get the URL of the preset view icon.\n   * @returns Icon URL.\n   */\n  getIconURL(): string {\n    return 'assets/preset-views/' + this.icon + '.svg#' + this.icon;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrettySymbols.html":{"url":"classes/PrettySymbols.html","title":"class - PrettySymbols","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrettySymbols\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/pretty-symbols.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper for pretty symbols functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                symbols\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getPrettyParams\n                            \n                            \n                                    Static\n                                getPrettySymbol\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        symbols\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    θ: ['theta'],\n    ϕ: ['phi'],\n    pT: ['pt'],\n    '𝛘2': ['chi2'],\n    η: ['eta'],\n    q: ['charge'],\n    NDOF: ['ndof'],\n    DOF: ['dof'],\n    Energy: ['energy'],\n    ET: ['et'],\n    '|p|': ['momentum', 'mom'],\n  }\n                    \n                \n                    \n                        \n                                Defined in src/helpers/pretty-symbols.ts:6\n                        \n                    \n\n            \n                \n                    Pretty symbols for object params.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getPrettyParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrettyParams(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/pretty-symbols.ts:37\n                \n            \n\n\n            \n                \n                    Get pretty printed parameters of an object.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object parameters to be pretty printed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        New pretty printed parameterss.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getPrettySymbol\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrettySymbol(param: string)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/pretty-symbols.ts:24\n                \n            \n\n\n            \n                \n                    Get pretty symbol of a parameter.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    param\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameter of a physics object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class PrettySymbols {\n  /** Pretty symbols for object params. */\n  public static readonly symbols: { [key: string]: string[] } = {\n    θ: ['theta'],\n    ϕ: ['phi'],\n    pT: ['pt'],\n    '𝛘2': ['chi2'],\n    η: ['eta'],\n    q: ['charge'],\n    NDOF: ['ndof'],\n    DOF: ['dof'],\n    Energy: ['energy'],\n    ET: ['et'],\n    '|p|': ['momentum', 'mom'],\n  };\n\n  /**\n   * Get pretty symbol of a parameter.\n   * @param param Parameter of a physics object.\n   */\n  public static getPrettySymbol(param: string) {\n    const prettySymbol = Object.keys(PrettySymbols.symbols).find((symbol) =>\n      PrettySymbols.symbols[symbol].includes(param)\n    );\n\n    return prettySymbol ? prettySymbol : param;\n  }\n\n  /**\n   * Get pretty printed parameters of an object.\n   * @param params Object parameters to be pretty printed.\n   * @returns New pretty printed parameterss.\n   */\n  public static getPrettyParams(params: { [key: string]: any }): {\n    [key: string]: any;\n  } {\n    // Create a copy of the params so we don't overwrite the original object\n    const paramsCopy = Object.assign({}, params);\n    // Go through all the parameters\n    for (const paramKey of Object.keys(paramsCopy)) {\n      // Get the pretty printed symbol\n      const symbol = PrettySymbols.getPrettySymbol(paramKey);\n      // If we do get a symbol\n      if (symbol !== paramKey) {\n        // Add a parameter with pretty printed symbol\n        paramsCopy[symbol] = paramsCopy[paramKey];\n        delete paramsCopy[paramKey];\n      }\n    }\n\n    // Delete 'pos' since it's too long and not needed\n    delete paramsCopy['pos'];\n\n    // Pretty print the dparams if any\n    if (paramsCopy?.dparams) {\n      const prettyDParams: { [key: string]: any } = {};\n\n      prettyDParams['θ'] = paramsCopy.dparams[3];\n      prettyDParams['ϕ'] = paramsCopy.dparams[2];\n      prettyDParams['|p|'] = Math.abs(1 / paramsCopy.dparams[4]);\n      prettyDParams['q'] = Math.sign(1 / paramsCopy.dparams[4]);\n      prettyDParams['d0'] = paramsCopy.dparams[0];\n      prettyDParams['z0'] = paramsCopy.dparams[1];\n\n      delete paramsCopy.dparams;\n\n      return { ...paramsCopy, ...prettyDParams };\n    }\n\n    return paramsCopy;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RKHelper.html":{"url":"classes/RKHelper.html","title":"class - RKHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RKHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/rk-helper.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper methods for RungeKutta functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                extrapolateTrackPositions\n                            \n                            \n                                    Static\n                                extrapolationLimit\n                            \n                            \n                                    Static\n                                getTracksWithRungeKutta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        extrapolateTrackPositions\n                        \n                    \n                \n            \n            \n                \n                    \n                    extrapolateTrackPositions(track: literal type, inbounds: (pos: Vector3) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/rk-helper.ts:44\n                \n            \n\n\n            \n                \n                    Extrapolate tracks using RungeKutta propagator.\nis out of bounds, when it returns false. Default is RKHelper.extrapolationLimit\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    track\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Track which is to be extrapolated.\n\n                                    \n                                \n                                \n                                    inbounds\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        RKHelper.extrapolationLimit\n                                    \n\n                                    \n                                        Function which returns true until the passed position\nis out of bounds, when it returns false. Default is RKHelper.extrapolationLimit\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An array of track positions.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        extrapolationLimit\n                        \n                    \n                \n            \n            \n                \n                    \n                    extrapolationLimit(pos: Vector3)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/rk-helper.ts:14\n                \n            \n\n\n            \n                \n                    Function used by the extrapolator to check if the extrapolation should continue.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pos\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Location to be tested\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        A boolean: true, if the position is in-bounds, false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getTracksWithRungeKutta\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTracksWithRungeKutta(tracksCollectionsEvent: any)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/rk-helper.ts:24\n                \n            \n\n\n            \n                \n                    Get extrapolated tracks using RungeKutta.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tracksCollectionsEvent\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event containing tracks collections.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { RungeKutta } from './runge-kutta';\nimport { Vector3 } from 'three';\nimport { CoordinateHelper } from './coordinate-helper';\n\n/**\n * Helper methods for RungeKutta functions.\n */\nexport class RKHelper {\n  /**\n   * Function used by the extrapolator to check if the extrapolation should continue.\n   * @param pos Location to be tested\n   * @returns A boolean: true, if the position is in-bounds, false otherwise.\n   */\n  public static extrapolationLimit(pos: Vector3) {\n    if (pos.z > 3000) return false;\n    if (Math.sqrt(pos.x * pos.x + pos.y * pos.y) > 1100) return false;\n    return true;\n  }\n\n  /**\n   * Get extrapolated tracks using RungeKutta.\n   * @param tracksCollectionsEvent Event containing tracks collections.\n   */\n  public static getTracksWithRungeKutta(tracksCollectionsEvent: any) {\n    const tracksCollections = Object.assign({}, tracksCollectionsEvent);\n    const Tracks = {};\n    for (const tracksCollection of Object.keys(tracksCollections)) {\n      for (const track of tracksCollections[tracksCollection]) {\n        track.pos = RKHelper.extrapolateTrackPositions(track);\n      }\n    }\n\n    return Tracks;\n  }\n\n  /**\n   * Extrapolate tracks using RungeKutta propagator.\n   * @param track Track which is to be extrapolated.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false. Default is RKHelper.extrapolationLimit\n   * @returns An array of track positions.\n\n   */\n  public static extrapolateTrackPositions(\n    track: { dparams: any },\n    inbounds: (pos: Vector3) => boolean = RKHelper.extrapolationLimit\n  ): any {\n    const dparams = track.dparams;\n    // ATLAS uses mm, MeV\n    const d0 = dparams[0];\n    const z0 = dparams[1];\n    const phi = dparams[2];\n    let theta = dparams[3];\n    const qop = dparams[4];\n\n    if (theta  [\n      val.pos.x,\n      val.pos.y,\n      val.pos.z,\n    ]);\n\n    return positions.concat(extrapolatedPos);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RendererManager.html":{"url":"classes/RendererManager.html","title":"class - RendererManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RendererManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/renderer-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Manager for managing event display's renderer related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fixedOverlay\n                            \n                            \n                                    Private\n                                mainRenderer\n                            \n                            \n                                    Private\n                                overlayRenderer\n                            \n                            \n                                    Private\n                                renderers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addRenderer\n                            \n                            \n                                    Private\n                                containsObject\n                            \n                            \n                                    Public\n                                getLocalClipping\n                            \n                            \n                                getMainRenderer\n                            \n                            \n                                getOverlayRenderer\n                            \n                            \n                                getRenderers\n                            \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Private\n                                initRenderer\n                            \n                            \n                                isFixedOverlay\n                            \n                            \n                                    Public\n                                removeControls\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                setFixOverlay\n                            \n                            \n                                    Public\n                                setLocalClippingEnabled\n                            \n                            \n                                setMainRenderer\n                            \n                            \n                                    Public\n                                setOverlayRenderer\n                            \n                            \n                                setRenderers\n                            \n                            \n                                    Public\n                                swapRenderers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/renderer-manager.ts:14\n                            \n                        \n\n                \n                    \n                            Create the renderer manager by initializing the main renderer.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        fixedOverlay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/renderer-manager.ts:14\n                        \n                    \n\n            \n                \n                    If the overlay is fixed or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mainRenderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/renderer-manager.ts:8\n                        \n                    \n\n            \n                \n                    Main renderer to be used by the event display.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        overlayRenderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/renderer-manager.ts:10\n                        \n                    \n\n            \n                \n                    Overlay renderer for rendering a secondary overlay canvas.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/renderer-manager.ts:12\n                        \n                    \n\n            \n                \n                    A list of all available/created renderers.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addRenderer\n                        \n                    \n                \n            \n            \n                \n                    \n                    addRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:153\n                \n            \n\n\n            \n                \n                    Add a renderer to the available renderers list.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three.js WebGLRenderer to be added.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        containsObject\n                        \n                    \n                \n            \n            \n                \n                    \n                    containsObject(obj: WebGLRenderer, list: WebGLRenderer[])\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:187\n                \n            \n\n\n            \n                \n                    Check if the list of available renderers contains a renderer.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    obj\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The renderer to be checked for containment.\n\n                                    \n                                \n                                \n                                    list\n                                    \n                                            WebGLRenderer[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of available renderers.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If the list contains the renderer or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getLocalClipping\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLocalClipping()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:210\n                \n            \n\n\n            \n                \n                    Get if the local clipping for the first renderer is enabled or disabled.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        If the renderer local clipping is enabled or disabled.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMainRenderer\n                        \n                    \n                \n            \n            \n                \ngetMainRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:127\n                \n            \n\n\n            \n                \n                    Get the main renderer.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer\n\n                    \n                    \n                        The main renderer.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOverlayRenderer\n                        \n                    \n                \n            \n            \n                \ngetOverlayRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:135\n                \n            \n\n\n            \n                \n                    Get the renderer used for overlay.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer\n\n                    \n                    \n                        The overlay renderer.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRenderers\n                        \n                    \n                \n            \n            \n                \ngetRenderers()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:143\n                \n            \n\n\n            \n                \n                    Get all the available renderers.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer[]\n\n                    \n                    \n                        A list of three.js WebGLRenderers\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        init\n                        \n                    \n                \n            \n            \n                \n                    \n                    init(elementId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:34\n                \n            \n\n\n            \n                \n                    Initialize the renderer manager by setting up the main renderer.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    elementId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'eventDisplay'\n                                    \n\n                                    \n                                        ID of the wrapper element.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        initRenderer\n                        \n                    \n                \n            \n            \n                \n                    \n                    initRenderer(elementId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:64\n                \n            \n\n\n            \n                \n                    Set up the renderer with the DOM.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    elementId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the wrapper element.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFixedOverlay\n                        \n                    \n                \n            \n            \n                \nisFixedOverlay()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:220\n                \n            \n\n\n            \n                \n                    Check if the overlay is fixed or not.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If the overlay is fixed or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeControls\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeControls(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:163\n                \n            \n\n\n            \n                \n                    Remove a renderer from the available renderers list.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three,js WebGLRenderer to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render(scene: Scene, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:46\n                \n            \n\n\n            \n                \n                    Render the overlay.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event display scene to render.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Camera for render.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFixOverlay\n                        \n                    \n                \n            \n            \n                \nsetFixOverlay(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:228\n                \n            \n\n\n            \n                \n                    Set if the overlay is to be fixed or not.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the overlay is to be fixed or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLocalClippingEnabled\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLocalClippingEnabled(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:200\n                \n            \n\n\n            \n                \n                    Set if local clipping is to be enabled or disabled for all the available renderers.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the local clipping is to be enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setMainRenderer\n                        \n                    \n                \n            \n            \n                \nsetMainRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:97\n                \n            \n\n\n            \n                \n                    Set the main renderer.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three.js WebGLRenderer.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setOverlayRenderer\n                        \n                    \n                \n            \n            \n                \n                    \n                    setOverlayRenderer(overlayCanvas: HTMLCanvasElement)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:105\n                \n            \n\n\n            \n                \n                    Set the renderer for overlay event display view.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    overlayCanvas\n                                    \n                                            HTMLCanvasElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Canvas on which the overlay is to be rendered.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setRenderers\n                        \n                    \n                \n            \n            \n                \nsetRenderers(renderers: WebGLRenderer[])\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:119\n                \n            \n\n\n            \n                \n                    Set the available renderers.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderers\n                                    \n                                            WebGLRenderer[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of three.js WebGLRenderers.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        swapRenderers\n                        \n                    \n                \n            \n            \n                \n                    \n                    swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:175\n                \n            \n\n\n            \n                \n                    Swap any two renderers.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    rendererA\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer A to be swapped with renderer B.\n\n                                    \n                                \n                                \n                                    rendererB\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer B to be swapped with renderer A.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebGLRenderer, Scene, Camera } from 'three';\n\n/**\n * Manager for managing event display's renderer related functions.\n */\nexport class RendererManager {\n  /** Main renderer to be used by the event display. */\n  private mainRenderer: WebGLRenderer = null;\n  /** Overlay renderer for rendering a secondary overlay canvas. */\n  private overlayRenderer: WebGLRenderer = null;\n  /** A list of all available/created renderers. */\n  private renderers: WebGLRenderer[] = [];\n  /** If the overlay is fixed or not. */\n  private fixedOverlay: boolean;\n\n  /**\n   * Create the renderer manager by initializing the main renderer.\n   */\n  constructor() {\n    const renderer: WebGLRenderer = new WebGLRenderer({\n      antialias: true,\n      alpha: true,\n      powerPreference: 'high-performance',\n    });\n\n    this.addRenderer(renderer);\n    this.setMainRenderer(renderer);\n  }\n\n  /**\n   * Initialize the renderer manager by setting up the main renderer.\n   * @param elementId ID of the wrapper element.\n   */\n  public init(elementId: string = 'eventDisplay') {\n    // Reset the animation loop\n    this.getMainRenderer().setAnimationLoop(null);\n    // Main renderer for current browsers\n    this.initRenderer(elementId);\n  }\n\n  /**\n   * Render the overlay.\n   * @param scene The event display scene to render.\n   * @param camera Camera for render.\n   */\n  public render(scene: Scene, camera: Camera) {\n    if (this.getOverlayRenderer()) {\n      if (!this.getOverlayRenderer().domElement.hidden) {\n        const sceneColor = scene.background;\n        scene.background = null;\n\n        if (!this.isFixedOverlay()) {\n          this.getOverlayRenderer().render(scene, camera);\n        }\n        scene.background = sceneColor;\n      }\n    }\n  }\n\n  /**\n   * Set up the renderer with the DOM.\n   * @param elementId ID of the wrapper element.\n   */\n  private initRenderer(elementId: string) {\n    let canvasWrapper = document.getElementById(elementId);\n    if (!canvasWrapper) {\n      canvasWrapper = document.body;\n    }\n\n    const rendererWidth = () =>\n      canvasWrapper.offsetWidth > 0\n        ? canvasWrapper.offsetWidth\n        : window.innerWidth;\n    const rendererHeight = () =>\n      canvasWrapper.offsetHeight > 0\n        ? canvasWrapper.offsetHeight\n        : window.innerHeight;\n\n    const mainRenderer = this.getMainRenderer();\n    mainRenderer.setSize(rendererWidth(), rendererHeight(), false);\n    mainRenderer.setPixelRatio(window.devicePixelRatio);\n    mainRenderer.domElement.id = 'three-canvas';\n\n    canvasWrapper.appendChild(this.getMainRenderer().domElement);\n\n    window.addEventListener('resize', () => {\n      mainRenderer.setSize(rendererWidth(), rendererHeight());\n    });\n  }\n\n  // SET/GET\n\n  /**\n   * Set the main renderer.\n   * @param renderer Three.js WebGLRenderer.\n   */\n  setMainRenderer(renderer: WebGLRenderer) {\n    this.mainRenderer = renderer;\n  }\n\n  /**\n   * Set the renderer for overlay event display view.\n   * @param overlayCanvas Canvas on which the overlay is to be rendered.\n   */\n  public setOverlayRenderer(overlayCanvas: HTMLCanvasElement): void {\n    const overlayRenderer: WebGLRenderer = new WebGLRenderer({\n      canvas: overlayCanvas,\n      antialias: false,\n      alpha: true,\n    });\n    this.addRenderer(overlayRenderer);\n    this.overlayRenderer = overlayRenderer;\n  }\n\n  /**\n   * Set the available renderers.\n   * @param renderers List of three.js WebGLRenderers.\n   */\n  setRenderers(renderers: WebGLRenderer[]) {\n    this.renderers = renderers;\n  }\n\n  /**\n   * Get the main renderer.\n   * @returns The main renderer.\n   */\n  getMainRenderer(): WebGLRenderer {\n    return this.mainRenderer;\n  }\n\n  /**\n   * Get the renderer used for overlay.\n   * @returns The overlay renderer.\n   */\n  getOverlayRenderer(): WebGLRenderer {\n    return this.overlayRenderer;\n  }\n\n  /**\n   * Get all the available renderers.\n   * @returns A list of three.js WebGLRenderers\n   */\n  getRenderers(): WebGLRenderer[] {\n    return this.renderers;\n  }\n\n  // FUNCTIONS\n\n  /**\n   * Add a renderer to the available renderers list.\n   * @param renderer Three.js WebGLRenderer to be added.\n   */\n  public addRenderer(renderer: WebGLRenderer) {\n    if (!this.containsObject(renderer, this.renderers)) {\n      this.renderers.push(renderer);\n    }\n  }\n\n  /**\n   * Remove a renderer from the available renderers list.\n   * @param renderer Three,js WebGLRenderer to be removed.\n   */\n  public removeControls(renderer: WebGLRenderer) {\n    const index: number = this.renderers.indexOf(renderer);\n    if (index > -1) {\n      this.renderers.splice(index, 1);\n    }\n  }\n\n  /**\n   * Swap any two renderers.\n   * @param rendererA Renderer A to be swapped with renderer B.\n   * @param rendererB Renderer B to be swapped with renderer A.\n   */\n  public swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer) {\n    const temp: WebGLRenderer = rendererA;\n    rendererA = rendererB;\n    rendererB = temp;\n  }\n\n  /**\n   * Check if the list of available renderers contains a renderer.\n   * @param obj The renderer to be checked for containment.\n   * @param list List of available renderers.\n   * @returns If the list contains the renderer or not.\n   */\n  private containsObject(obj: WebGLRenderer, list: WebGLRenderer[]): boolean {\n    for (const object of list) {\n      if (object === obj) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set if local clipping is to be enabled or disabled for all the available renderers.\n   * @param value If the local clipping is to be enabled or disabled.\n   */\n  public setLocalClippingEnabled(value: boolean) {\n    for (const renderer of this.renderers) {\n      renderer.localClippingEnabled = value;\n    }\n  }\n\n  /**\n   * Get if the local clipping for the first renderer is enabled or disabled.\n   * @returns If the renderer local clipping is enabled or disabled.\n   */\n  public getLocalClipping() {\n    if (this.renderers.length > 0) {\n      return this.renderers[0].localClippingEnabled;\n    }\n  }\n\n  /**\n   * Check if the overlay is fixed or not.\n   * @returns If the overlay is fixed or not.\n   */\n  isFixedOverlay(): boolean {\n    return this.fixedOverlay;\n  }\n\n  /**\n   * Set if the overlay is to be fixed or not.\n   * @param value If the overlay is to be fixed or not.\n   */\n  setFixOverlay(value: boolean) {\n    this.fixedOverlay = value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RungeKutta.html":{"url":"classes/RungeKutta.html","title":"class - RungeKutta","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RungeKutta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n\n            \n                Description\n            \n            \n                Class for performing Runge-Kutta operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                propagate\n                            \n                            \n                                    Static\n                                step\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        propagate\n                        \n                    \n                \n            \n            \n                \n                    \n                    propagate(startPos: Vector3, startDir: Vector3, p: number, q: number, mss: number, plength: number, inbounds: (pos: Vector3) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:126\n                \n            \n\n\n            \n                \n                    Propagate using the given properties by performing the Runge-Kutta steps.\nis out of bounds, when it returns false.\nthrough the Runge-Kutta steps.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    startPos\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Starting position in 3D space.\n\n                                    \n                                \n                                \n                                    startDir\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Starting direction in 3D space.\n\n                                    \n                                \n                                \n                                    p\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Momentum.\n\n                                    \n                                \n                                \n                                    q\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Charge.\n\n                                    \n                                \n                                \n                                    mss\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        -1\n                                    \n\n                                    \n                                        Max step size.\n\n                                    \n                                \n                                \n                                    plength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1000\n                                    \n\n                                    \n                                        Path length.\n\n                                    \n                                \n                                \n                                    inbounds\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        () => true\n                                    \n\n                                    \n                                        Function which returns true until the passed position\nis out of bounds, when it returns false.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type[]\n\n                    \n                    \n                        An array containing position and direction at that position calculated\nthrough the Runge-Kutta steps.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        step\n                        \n                    \n                \n            \n            \n                \n                    \n                    step(state: State)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:12\n                \n            \n\n\n            \n                \n                    Perform a Runge-Kutta step for the given state.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                State\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State at which the step is to be performed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The computed step size.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(half_h))\n        .add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir\n        .clone()\n        .add(k1.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir\n        .clone()\n        .add(k2.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(h))\n        .add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir\n        .clone()\n        .add(k3.clone().multiplyScalar(h))\n        .cross(B_last)\n        .multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return (\n        h *\n        (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z))\n      );\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    const fh: number = state.stepSize;\n    const fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(\n      k1\n        .clone()\n        .add(k2)\n        .add(k3)\n        .multiplyScalar(fh2 / 6)\n    );\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(\n      k1\n        .clone()\n        .add(k2.clone().multiplyScalar(2))\n        .add(k3.clone().multiplyScalar(2))\n        .add(k4)\n        .multiplyScalar(fh / 6)\n    );\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3,\n    startDir: Vector3,\n    p: number,\n    q: number,\n    mss: number = -1,\n    plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3; dir: Vector3 }[] {\n    const rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    const result: { pos: Vector3; dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScriptLoader.html":{"url":"classes/ScriptLoader.html","title":"class - ScriptLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScriptLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/script-loader.ts\n        \n\n\n            \n                Description\n            \n            \n                Script loader for dynamically loading external scripts.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                loadScript\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        loadScript\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadScript(scriptURL: string, scriptFor?: string, parentElement: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/script-loader.ts:15\n                \n            \n\n\n            \n                \n                    Load a script dynamically from a URL.\nDefaults to  tag.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    scriptURL\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        URL of the script to be loaded.\n\n                                    \n                                \n                                \n                                    scriptFor\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Optional data attribute to identify what the script is for. [data-scriptFor]\n\n                                    \n                                \n                                \n                                    parentElement\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        document.getElementsByTagName('head')[0]\n                                    \n\n                                    \n                                        Parent element to which the script is to be appended.\nDefaults to  tag.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise for the script load.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { LoadingManager } from '../managers/loading-manager';\n\n/**\n * Script loader for dynamically loading external scripts.\n */\nexport class ScriptLoader {\n  /**\n   * Load a script dynamically from a URL.\n   * @param scriptURL URL of the script to be loaded.\n   * @param scriptFor Optional data attribute to identify what the script is for. `[data-scriptFor]`\n   * @param parentElement Parent element to which the script is to be appended.\n   * Defaults to `` tag.\n   * @returns Promise for the script load.\n   */\n  public static loadScript(\n    scriptURL: string,\n    scriptFor?: string,\n    parentElement: HTMLElement = document.getElementsByTagName('head')[0]\n  ): Promise {\n    const loadingManager = new LoadingManager();\n    loadingManager.addLoadableItem('single_script');\n\n    return new Promise((resolve, reject) => {\n      const scriptExists = document.querySelectorAll(\n        'script[src=\"' + scriptURL + '\"]'\n      );\n\n      // If no script exists - add one\n      if (scriptExists.length === 0) {\n        const scriptElement = document.createElement('script');\n        scriptElement.type = 'text/javascript';\n        scriptElement.src = scriptURL;\n        if (scriptFor) {\n          scriptElement.setAttribute('data-scriptfor', scriptFor);\n        }\n\n        scriptElement.addEventListener('load', () => {\n          scriptElement.setAttribute('data-loaded', 'true');\n          resolve();\n          loadingManager.itemLoaded('single_script');\n        });\n        scriptElement.onerror = (event) => {\n          console.error('ERROR LOADING SCRIPT: ', event);\n          reject();\n          loadingManager.itemLoaded('single_script');\n        };\n\n        parentElement.appendChild(scriptElement);\n      } else {\n        // If script has already loaded then resolve else wait for it to load\n        if (scriptExists[0].dataset.loaded === 'true') {\n          resolve();\n          loadingManager.itemLoaded('single_script');\n        } else {\n          scriptExists[0].addEventListener('load', () => {\n            resolve();\n            loadingManager.itemLoaded('single_script');\n          });\n        }\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectionManager.html":{"url":"classes/SelectionManager.html","title":"class - SelectionManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectionManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/selection-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Manager for managing event display's selection related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeObject\n                            \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Private\n                                effectsManager\n                            \n                            \n                                    Private\n                                ignoreList\n                            \n                            \n                                    Private\n                                infoLogger\n                            \n                            \n                                    Private\n                                isInit\n                            \n                            \n                                    Private\n                                onDocumentMouseDown\n                            \n                            \n                                    Private\n                                onTouchDown\n                            \n                            \n                                    Private\n                                onTouchMove\n                            \n                            \n                                    Private\n                                outlinePass\n                            \n                            \n                                    Private\n                                preSelectionAntialias\n                            \n                            \n                                    Private\n                                scene\n                            \n                            \n                                    Private\n                                selectedObject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                disableSelecting\n                            \n                            \n                                    Private\n                                enableSelecting\n                            \n                            \n                                    Public\n                                getActiveObjectId\n                            \n                            \n                                    Public\n                                highlightObject\n                            \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Private\n                                intersectObject\n                            \n                            \n                                    Public\n                                setSelectedObject\n                            \n                            \n                                    Public\n                                setSelecting\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/selection-manager.ts:43\n                            \n                        \n\n                \n                    \n                            Constructor for the selection manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        activeObject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ActiveVariable('')\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:30\n                        \n                    \n\n            \n                \n                    The currently selected object which is observable for changes.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        camera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:24\n                        \n                    \n\n            \n                \n                    The camera inside the scene.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        effectsManager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EffectsManager\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:38\n                        \n                    \n\n            \n                \n                    Manager for managing three.js event display effects like outline pass and unreal bloom.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        ignoreList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:32\n                        \n                    \n\n            \n                \n                    Objects to be ignored on hovering over the scene.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        infoLogger\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InfoLogger\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:41\n                        \n                    \n\n            \n                \n                    Service for logging data to the information panel.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isInit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:22\n                        \n                    \n\n            \n                \n                    Is initialized.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onDocumentMouseDown\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:158\n                        \n                    \n\n            \n                \n                    Function to call on mouse click when object selection is enabled.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onTouchDown\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:207\n                        \n                    \n\n            \n                \n                    Function to call on touch when object selection is enabled.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    event\n                                                    \n                                                            Event containing touch data.\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onTouchMove\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:145\n                        \n                    \n\n            \n                \n                    Function to call on mouse move when object selection is enabled.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        outlinePass\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutlinePass\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:36\n                        \n                    \n\n            \n                \n                    Outline pass for highlighting the hovered over event display elements.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        preSelectionAntialias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:43\n                        \n                    \n\n            \n                \n                    Performance mode value before enabling selection.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        scene\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Scene\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:26\n                        \n                    \n\n            \n                \n                    The scene used for event display.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedObject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:28\n                        \n                    \n\n            \n                \n                    Object used to display the information of the selected 3D object.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        disableSelecting\n                        \n                    \n                \n            \n            \n                \n                    \n                    disableSelecting()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:128\n                \n            \n\n\n            \n                \n                    Disable selecting of event display elements and remove mouse move and click events.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        enableSelecting\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableSelecting()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:111\n                \n            \n\n\n            \n                \n                    Enable selecting of event display elements and set mouse move and click events.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getActiveObjectId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getActiveObjectId()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:94\n                \n            \n\n\n            \n                \n                    Get the uuid of the currently selected object.\n\n\n                    \n                    \n                    \n                        Returns :         ActiveVariable\n\n                    \n                    \n                        uuid of the currently selected object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        highlightObject\n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightObject(uuid: string, objectsGroup: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:241\n                \n            \n\n\n            \n                \n                    Highlight the object with the given uuid by giving it an outline.\nwith the given uuid.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        uuid of the object.\n\n                                    \n                                \n                                \n                                    objectsGroup\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group of objects to be traversed for finding the object\nwith the given uuid.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        init\n                        \n                    \n                \n            \n            \n                \n                    \n                    init(camera: Camera, scene: Scene, effectsManager: EffectsManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:65\n                \n            \n\n\n            \n                \n                    Initialize the selection manager.\nlike outline pass and unreal bloom.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene used for event display.\n\n                                    \n                                \n                                \n                                    effectsManager\n                                    \n                                                EffectsManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager for managing three.js event display effects\nlike outline pass and unreal bloom.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        intersectObject\n                        \n                    \n                \n            \n            \n                \n                    \n                    intersectObject(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:218\n                \n            \n\n\n            \n                \n                    Check if any object intersects on mouse move.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event containing data of the mouse move.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Intersected or hovered over object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setSelectedObject\n                        \n                    \n                \n            \n            \n                \n                    \n                    setSelectedObject(selectedObject: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:83\n                \n            \n\n\n            \n                \n                    Set the currently selected object.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selectedObject\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The currently selected object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setSelecting\n                        \n                    \n                \n            \n            \n                \n                    \n                    setSelecting(enable: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:102\n                \n            \n\n\n            \n                \n                    Set if selecting is to be enabled or disabled.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    enable\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If selecting is to be enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Vector2,\n  Raycaster,\n  Camera,\n  Scene,\n  Object3D,\n  DirectionalLight,\n  AmbientLight,\n  AxesHelper,\n} from 'three';\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass.js';\nimport { InfoLogger } from '../../helpers/info-logger';\nimport { EffectsManager } from './effects-manager';\nimport { PrettySymbols } from '../../helpers/pretty-symbols';\nimport { ActiveVariable } from '../../helpers/active-variable';\n\n/**\n * Manager for managing event display's selection related functions.\n */\nexport class SelectionManager {\n  /** Is initialized. */\n  private isInit: boolean;\n  /** The camera inside the scene. */\n  private camera: Camera;\n  /** The scene used for event display. */\n  private scene: Scene;\n  /** Object used to display the information of the selected 3D object. */\n  private selectedObject: { name: string; attributes: any[] };\n  /** The currently selected object which is observable for changes. */\n  private activeObject = new ActiveVariable('');\n  /** Objects to be ignored on hovering over the scene. */\n  private ignoreList: string[];\n\n  // Post processing\n  /** Outline pass for highlighting the hovered over event display elements. */\n  private outlinePass: OutlinePass;\n  /** Manager for managing three.js event display effects like outline pass and unreal bloom. */\n  private effectsManager: EffectsManager;\n\n  /** Service for logging data to the information panel. */\n  private infoLogger: InfoLogger;\n  /** Performance mode value before enabling selection. */\n  private preSelectionAntialias: boolean;\n\n  /**\n   * Constructor for the selection manager.\n   */\n  constructor() {\n    this.isInit = false;\n    this.ignoreList = [\n      new AmbientLight().type,\n      new DirectionalLight().type,\n      new AxesHelper().type,\n    ];\n  }\n\n  /**\n   * Initialize the selection manager.\n   * @param camera The camera inside the scene.\n   * @param scene The scene used for event display.\n   * @param effectsManager Manager for managing three.js event display effects\n   * like outline pass and unreal bloom.\n   * @param infoLogger Service for logging data to the information panel.\n   */\n  public init(\n    camera: Camera,\n    scene: Scene,\n    effectsManager: EffectsManager,\n    infoLogger: InfoLogger\n  ) {\n    this.camera = camera;\n    this.scene = scene;\n    this.isInit = true;\n    this.infoLogger = infoLogger;\n    this.effectsManager = effectsManager;\n    this.outlinePass = this.effectsManager.addOutlinePassForSelection();\n  }\n\n  /**\n   * Set the currently selected object.\n   * @param selectedObject The currently selected object.\n   */\n  public setSelectedObject(selectedObject: {\n    name: string;\n    attributes: any[];\n  }) {\n    this.selectedObject = selectedObject;\n  }\n\n  /**\n   * Get the uuid of the currently selected object.\n   * @returns uuid of the currently selected object.\n   */\n  public getActiveObjectId(): ActiveVariable {\n    return this.activeObject;\n  }\n\n  /**\n   * Set if selecting is to be enabled or disabled.\n   * @param enable If selecting is to be enabled or disabled.\n   */\n  public setSelecting(enable: boolean) {\n    if (this.isInit) {\n      enable ? this.enableSelecting() : this.disableSelecting();\n    }\n  }\n\n  /**\n   * Enable selecting of event display elements and set mouse move and click events.\n   */\n  private enableSelecting() {\n    document\n      .getElementById('three-canvas')\n      .addEventListener('mousemove', this.onTouchMove, true);\n    document\n      .getElementById('three-canvas')\n      .addEventListener('click', this.onDocumentMouseDown, true);\n    document\n      .getElementById('three-canvas')\n      .addEventListener('touchstart', this.onTouchDown);\n    this.preSelectionAntialias = this.effectsManager.antialiasing;\n    this.effectsManager.setAntialiasing(false);\n  }\n\n  /**\n   * Disable selecting of event display elements and remove mouse move and click events.\n   */\n  private disableSelecting() {\n    document\n      .getElementById('three-canvas')\n      .removeEventListener('mousemove', this.onTouchMove, true);\n    document\n      .getElementById('three-canvas')\n      .removeEventListener('click', this.onDocumentMouseDown, true);\n    document\n      .getElementById('three-canvas')\n      .removeEventListener('touchstart', this.onTouchDown);\n    this.outlinePass.selectedObjects = [];\n    this.effectsManager.setAntialiasing(this.preSelectionAntialias);\n  }\n\n  /**\n   * Function to call on mouse move when object selection is enabled.\n   */\n  private onTouchMove = (event: any) => {\n    const intersectedObject = this.intersectObject(event);\n    if (intersectedObject) {\n      if (this.ignoreList.includes(intersectedObject.type)) {\n        return;\n      }\n      this.outlinePass.selectedObjects = [intersectedObject];\n    }\n  };\n\n  /**\n   * Function to call on mouse click when object selection is enabled.\n   */\n  private onDocumentMouseDown = () => {\n    const intersectedObject = this.outlinePass.selectedObjects[0];\n    if (intersectedObject) {\n      this.selectedObject.name = intersectedObject.name;\n      this.selectedObject.attributes.splice(\n        0,\n        this.selectedObject.attributes.length\n      );\n\n      this.activeObject.update(intersectedObject.uuid);\n\n      const prettyParams = PrettySymbols.getPrettyParams(\n        intersectedObject.userData\n      );\n\n      for (const key of Object.keys(prettyParams)) {\n        this.selectedObject.attributes.push({\n          attributeName: key,\n          attributeValue: prettyParams[key],\n        });\n      }\n\n      // Process properties of the selected object\n      const props = Object.keys(intersectedObject.userData)\n        .map((key) => {\n          // Only take properties that are a string or number (no arrays or objects)\n          if (\n            ['string', 'number'].includes(\n              typeof intersectedObject.userData[key]\n            )\n          ) {\n            return key + '=' + intersectedObject.userData[key];\n          }\n        })\n        .filter((val) => val);\n      // Build the log text and add to the logger\n      const log =\n        intersectedObject.name +\n        (props.length > 0 ? ' with ' + props.join(', ') : '');\n      if (log) {\n        this.infoLogger.add(log, 'Clicked');\n      }\n    }\n  };\n\n  /**\n   * Function to call on touch when object selection is enabled.\n   * @param event Event containing touch data.\n   */\n  private onTouchDown = (event: TouchEvent) => {\n    event.preventDefault();\n    this.onTouchMove(event.targetTouches[0]);\n    this.onDocumentMouseDown();\n  };\n\n  /**\n   * Check if any object intersects on mouse move.\n   * @param event Event containing data of the mouse move.\n   * @returns Intersected or hovered over object.\n   */\n  private intersectObject(event: any): Object3D {\n    event.preventDefault?.();\n    const mouse = new Vector2();\n    const rendererElement = this.effectsManager.composer.renderer.domElement;\n    mouse.x = (event.clientX / rendererElement.clientWidth) * 2 - 1;\n    mouse.y = -(event.clientY / rendererElement.clientHeight) * 2 + 1;\n    const raycaster = new Raycaster();\n    raycaster.setFromCamera(mouse, this.camera);\n    raycaster.params.Line.threshold = 3;\n    const intersects = raycaster.intersectObjects(this.scene.children, true);\n\n    if (intersects.length > 0) {\n      // We want the closest one\n      return intersects[0].object;\n    }\n  }\n\n  /**\n   * Highlight the object with the given uuid by giving it an outline.\n   * @param uuid uuid of the object.\n   * @param objectsGroup Group of objects to be traversed for finding the object\n   * with the given uuid.\n   */\n  public highlightObject(uuid: string, objectsGroup: Object3D) {\n    const object = objectsGroup.getObjectByProperty('uuid', uuid);\n    if (object) {\n      this.outlinePass.selectedObjects = [object];\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/State.html":{"url":"classes/State.html","title":"class - State","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  State\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n\n            \n                Description\n            \n            \n                State of the particle.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dir\n                            \n                            \n                                maxStepSize\n                            \n                            \n                                p\n                            \n                            \n                                pathLength\n                            \n                            \n                                pos\n                            \n                            \n                                q\n                            \n                            \n                                stepSize\n                            \n                            \n                                unitC\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        dir\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Vector3\n\n                    \n                \n                \n                    \n                        Default value : new Vector3(0, 0, 0)\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:170\n                        \n                    \n\n            \n                \n                    Direction.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        maxStepSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:180\n                        \n                    \n\n            \n                \n                    Max step size.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        p\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:172\n                        \n                    \n\n            \n                \n                    Momentum.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pathLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:182\n                        \n                    \n\n            \n                \n                    Path length..\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Vector3\n\n                    \n                \n                \n                    \n                        Default value : new Vector3(0, 0, 0)\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:168\n                        \n                    \n\n            \n                \n                    Position.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        q\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:174\n                        \n                    \n\n            \n                \n                    Charge.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stepSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1000\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:178\n                        \n                    \n\n            \n                \n                    Step size.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unitC\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 3.3333\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:176\n                        \n                    \n\n            \n                \n                    Unit.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(half_h))\n        .add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir\n        .clone()\n        .add(k1.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir\n        .clone()\n        .add(k2.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(h))\n        .add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir\n        .clone()\n        .add(k3.clone().multiplyScalar(h))\n        .cross(B_last)\n        .multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return (\n        h *\n        (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z))\n      );\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    const fh: number = state.stepSize;\n    const fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(\n      k1\n        .clone()\n        .add(k2)\n        .add(k3)\n        .multiplyScalar(fh2 / 6)\n    );\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(\n      k1\n        .clone()\n        .add(k2.clone().multiplyScalar(2))\n        .add(k3.clone().multiplyScalar(2))\n        .add(k4)\n        .multiplyScalar(fh / 6)\n    );\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3,\n    startDir: Vector3,\n    p: number,\n    q: number,\n    mss: number = -1,\n    plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3; dir: Vector3 }[] {\n    const rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    const result: { pos: Vector3; dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StateManager.html":{"url":"classes/StateManager.html","title":"class - StateManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StateManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/state-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                A singleton manager for managing the scene's state.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                activeCamera\n                            \n                            \n                                clippingEnabled\n                            \n                            \n                                eventDisplay\n                            \n                            \n                                eventMetadata\n                            \n                            \n                                    Private\n                                    Static\n                                instance\n                            \n                            \n                                openingClippingAngle\n                            \n                            \n                                phoenixMenuRoot\n                            \n                            \n                                startClippingAngle\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getInstance\n                            \n                            \n                                getOpeningClippingAngle\n                            \n                            \n                                getStartClippingAngle\n                            \n                            \n                                loadStateFromJSON\n                            \n                            \n                                saveStateAsJSON\n                            \n                            \n                                setCamera\n                            \n                            \n                                setClippingEnabled\n                            \n                            \n                                setEventDisplay\n                            \n                            \n                                setOpeningClippingAngle\n                            \n                            \n                                setPhoenixMenuRoot\n                            \n                            \n                                setStartClippingAngle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/state-manager.ts:29\n                            \n                        \n\n                \n                    \n                            Create the state manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        activeCamera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:22\n                        \n                    \n\n            \n                \n                    The active camera.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clippingEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ActiveVariable(false)\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:16\n                        \n                    \n\n            \n                \n                    Whether the clipping is enabled or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eventDisplay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EventDisplay\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:24\n                        \n                    \n\n            \n                \n                    The event display.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eventMetadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    runNumber: '000',\n    eventNumber: '000',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:26\n                        \n                    \n\n            \n                \n                    Current loaded event's metadata.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        instance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StateManager\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:12\n                        \n                    \n\n            \n                \n                    Instance of the state manager.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openingClippingAngle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ActiveVariable(0)\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:20\n                        \n                    \n\n            \n                \n                    Opening angle of the clipping.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoenixMenuRoot\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:14\n                        \n                    \n\n            \n                \n                    Root node of the phoenix menu.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startClippingAngle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ActiveVariable(0)\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:18\n                        \n                    \n\n            \n                \n                    Starting angle of the clipping.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getInstance\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInstance()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:46\n                \n            \n\n\n            \n                \n                    Get the instance of state manager.\n\n\n                    \n                    \n                    \n                        Returns :         StateManager\n\n                    \n                    \n                        The state manager instance.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOpeningClippingAngle\n                        \n                    \n                \n            \n            \n                \ngetOpeningClippingAngle()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:179\n                \n            \n\n\n            \n                \n                    Get the opening angle of clipping.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The opening angle of clipping.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStartClippingAngle\n                        \n                    \n                \n            \n            \n                \ngetStartClippingAngle()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:163\n                \n            \n\n\n            \n                \n                    Get the start clipping angle of clipping.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The starting angle of clipping.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadStateFromJSON\n                        \n                    \n                \n            \n            \n                \nloadStateFromJSON(json: string | literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:104\n                \n            \n\n\n            \n                \n                    Load the state from JSON.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    json\n                                    \n                                            string | literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        JSON for state.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveStateAsJSON\n                        \n                    \n                \n            \n            \n                \nsaveStateAsJSON()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:80\n                \n            \n\n\n            \n                \n                    Save the state of the event display as JSON.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setCamera\n                        \n                    \n                \n            \n            \n                \nsetCamera(camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:187\n                \n            \n\n\n            \n                \n                    Set the scene camera for state.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setClippingEnabled\n                        \n                    \n                \n            \n            \n                \nsetClippingEnabled(clipping: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:147\n                \n            \n\n\n            \n                \n                    Set the state of clipping.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    clipping\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether the clipping is enabled or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setEventDisplay\n                        \n                    \n                \n            \n            \n                \nsetEventDisplay(eventDisplay: EventDisplay)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:195\n                \n            \n\n\n            \n                \n                    Set the event display.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventDisplay\n                                    \n                                                EventDisplay\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event display.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setOpeningClippingAngle\n                        \n                    \n                \n            \n            \n                \nsetOpeningClippingAngle(angle: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:171\n                \n            \n\n\n            \n                \n                    Set the opening angle of clipping.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    angle\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Angle for clipping.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPhoenixMenuRoot\n                        \n                    \n                \n            \n            \n                \nsetPhoenixMenuRoot(phoenixMenuRoot: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:54\n                \n            \n\n\n            \n                \n                    Set the root node of Phoenix menu.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    phoenixMenuRoot\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Phoenix menu root node.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setStartClippingAngle\n                        \n                    \n                \n            \n            \n                \nsetStartClippingAngle(angle: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:155\n                \n            \n\n\n            \n                \n                    Set the start clipping angle of clipping.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    angle\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Angle for clipping.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventDisplay } from '../event-display';\nimport { Camera } from 'three';\nimport { PhoenixMenuNode } from './ui-manager/phoenix-menu/phoenix-menu-node';\nimport { loadFile, saveFile } from '../helpers/file';\nimport { ActiveVariable } from '../helpers/active-variable';\n\n/**\n * A singleton manager for managing the scene's state.\n */\nexport class StateManager {\n  /** Instance of the state manager. */\n  private static instance: StateManager;\n  /** Root node of the phoenix menu. */\n  phoenixMenuRoot: PhoenixMenuNode;\n  /** Whether the clipping is enabled or not. */\n  clippingEnabled = new ActiveVariable(false);\n  /** Starting angle of the clipping. */\n  startClippingAngle = new ActiveVariable(0);\n  /** Opening angle of the clipping. */\n  openingClippingAngle = new ActiveVariable(0);\n  /** The active camera. */\n  activeCamera: Camera;\n  /** The event display. */\n  eventDisplay: EventDisplay;\n  /** Current loaded event's metadata. */\n  eventMetadata: { runNumber: string; eventNumber: string } = {\n    runNumber: '000',\n    eventNumber: '000',\n  };\n\n  /**\n   * Create the state manager.\n   * @returns The state manager instance.\n   */\n  constructor() {\n    if (StateManager.instance === undefined) {\n      StateManager.instance = this;\n    }\n    return StateManager.instance;\n  }\n\n  /**\n   * Get the instance of state manager.\n   * @returns The state manager instance.\n   */\n  static getInstance(): StateManager {\n    return StateManager.instance;\n  }\n\n  /**\n   * Set the root node of Phoenix menu.\n   * @param phoenixMenuRoot Phoenix menu root node.\n   */\n  setPhoenixMenuRoot(phoenixMenuRoot: PhoenixMenuNode) {\n    this.phoenixMenuRoot = phoenixMenuRoot;\n\n    if (this.phoenixMenuRoot) {\n      // Add save and load config buttons to the root node\n      this.phoenixMenuRoot\n        .addConfig('button', {\n          label: 'Save state',\n          onClick: () => {\n            this.saveStateAsJSON();\n          },\n        })\n        .addConfig('button', {\n          label: 'Load state',\n          onClick: () => {\n            loadFile((data) => {\n              this.loadStateFromJSON(JSON.parse(data));\n            });\n          },\n        });\n    }\n  }\n\n  /**\n   * Save the state of the event display as JSON.\n   */\n  saveStateAsJSON() {\n    const state: { [key: string]: any } = {\n      phoenixMenu: this.phoenixMenuRoot.getNodeState(),\n      eventDisplay: {\n        cameraPosition: this.activeCamera.position.toArray(),\n        startClippingAngle: this.clippingEnabled.value\n          ? this.startClippingAngle.value\n          : null,\n        openingClippingAngle: this.clippingEnabled.value\n          ? this.openingClippingAngle.value\n          : null,\n      },\n    };\n\n    saveFile(\n      JSON.stringify(state),\n      `run${this.eventMetadata.runNumber}_evt${this.eventMetadata.eventNumber}.json`\n    );\n  }\n\n  /**\n   * Load the state from JSON.\n   * @param json JSON for state.\n   */\n  loadStateFromJSON(json: string | { [key: string]: any }) {\n    const jsonData: { [key: string]: any } =\n      typeof json === 'string' ? JSON.parse(json) : json;\n\n    if (jsonData['phoenixMenu'] && this.phoenixMenuRoot) {\n      this.phoenixMenuRoot.loadStateFromJSON(jsonData['phoenixMenu']);\n      this.phoenixMenuRoot.configActive = false;\n    }\n\n    if (jsonData['eventDisplay']) {\n      this.activeCamera.position.fromArray(\n        jsonData['eventDisplay']?.['cameraPosition']\n      );\n\n      const startAngle = jsonData['eventDisplay']?.['startClippingAngle'];\n      const openingAngle = jsonData['eventDisplay']?.['openingClippingAngle'];\n\n      if (startAngle || openingAngle) {\n        this.setClippingEnabled(true);\n        this.eventDisplay.getUIManager().setClipping(true);\n\n        if (startAngle) {\n          this.eventDisplay\n            .getUIManager()\n            .rotateStartAngleClipping(\n              jsonData['eventDisplay']['startClippingAngle']\n            );\n        }\n        if (openingAngle) {\n          this.eventDisplay\n            .getUIManager()\n            .rotateOpeningAngleClipping(\n              jsonData['eventDisplay']['openingClippingAngle']\n            );\n        }\n      }\n    }\n  }\n\n  /**\n   * Set the state of clipping.\n   * @param clipping Whether the clipping is enabled or not.\n   */\n  setClippingEnabled(clipping: boolean) {\n    this.clippingEnabled.update(clipping);\n  }\n\n  /**\n   * Set the start clipping angle of clipping.\n   * @param angle Angle for clipping.\n   */\n  setStartClippingAngle(angle: number) {\n    this.startClippingAngle.update(angle);\n  }\n\n  /**\n   * Get the start clipping angle of clipping.\n   * @returns The starting angle of clipping.\n   */\n  getStartClippingAngle(): number {\n    return this.startClippingAngle.value;\n  }\n\n  /**\n   * Set the opening angle of clipping.\n   * @param angle Angle for clipping.\n   */\n  setOpeningClippingAngle(angle: number) {\n    this.openingClippingAngle.update(angle);\n  }\n\n  /**\n   * Get the opening angle of clipping.\n   * @returns The opening angle of clipping.\n   */\n  getOpeningClippingAngle(): number {\n    return this.openingClippingAngle.value;\n  }\n\n  /**\n   * Set the scene camera for state.\n   * @param camera The camera.\n   */\n  setCamera(camera: Camera) {\n    this.activeCamera = camera;\n  }\n\n  /**\n   * Set the event display.\n   * @param eventDisplay The event display.\n   */\n  setEventDisplay(eventDisplay: EventDisplay) {\n    this.eventDisplay = eventDisplay;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TracksMaterial.html":{"url":"classes/TracksMaterial.html","title":"class - TracksMaterial","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TracksMaterial\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/tracks.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom material for the tracks.\n\n            \n\n            \n                Extends\n            \n            \n                    ShaderMaterial\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isTracksMaterial\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(params)\n                    \n                \n                        \n                            \n                                Defined in src/loaders/objects/tracks.ts:230\n                            \n                        \n\n                \n                    \n                            Create the tracks material.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Params for creating the tracks material.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isTracksMaterial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:230\n                        \n                    \n\n            \n                \n                    If the material is of track.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BufferGeometry,\n  BufferAttribute,\n  ShaderMaterial,\n  ShaderChunk,\n  Vector2,\n  Vector3,\n  Color,\n  ColorRepresentation,\n} from 'three';\n\n/**\n * Custom mesh for tracks.\n */\nexport class TracksMesh extends BufferGeometry {\n  /** ID of the next track. */\n  next_track_id: number;\n  /** Positions. */\n  positions: number[];\n  /** Previous. */\n  previous: number[];\n  /** Next. */\n  next: number[];\n  /** Colors. */\n  colors: number[];\n  /** Counter. */\n  counter: number[];\n  /** Track ID. */\n  track_id: any[];\n  /** Side. */\n  side: any[];\n  /** Indices. */\n  indices_array: any[];\n  /** Attributes. */\n  _attributes: any;\n\n  /**\n   * Create the tracks mesh.\n   */\n  constructor() {\n    super();\n    this.type = 'TracksMesh';\n    this.positions = [];\n    this.previous = [];\n    this.next = [];\n    this.side = [];\n    this.counter = [];\n    this.track_id = [];\n    this.colors = [];\n    this.indices_array = [];\n    this.next_track_id = 0;\n  }\n\n  /**\n   * Add a track to the tracks mesh.\n   * @param points Points for constructing the track.\n   * @param color Color of the track.\n   * @returns ID of the track.\n   */\n  addTrack(points: Vector3[], color: ColorRepresentation) {\n    const id = this.next_track_id++;\n\n    const col = new Color(color);\n\n    this.previous.push(points[0].x, points[0].y, points[0].z);\n    this.previous.push(points[0].x, points[0].y, points[0].z);\n\n    for (let i = 0; i  0) {\n        this.next.push(p.x, p.y, p.z);\n        this.next.push(p.x, p.y, p.z);\n      }\n    }\n\n    const i = points.length - 1;\n    this.next.push(points[i].x, points[i].y, points[i].z);\n    this.next.push(points[i].x, points[i].y, points[i].z);\n\n    //this.process()\n    return id;\n  }\n\n  /**\n   * Process the track mesh.\n   */\n  process() {\n    if (\n      !this._attributes ||\n      this._attributes.position.count !== this.positions.length\n    ) {\n      this._attributes = {\n        position: new BufferAttribute(new Float32Array(this.positions), 3),\n        previous: new BufferAttribute(new Float32Array(this.previous), 3),\n        next: new BufferAttribute(new Float32Array(this.next), 3),\n        side: new BufferAttribute(new Float32Array(this.side), 1),\n        track_id: new BufferAttribute(new Int32Array(this.track_id), 1),\n        color: new BufferAttribute(new Float32Array(this.colors), 3),\n        counter: new BufferAttribute(new Float32Array(this.counter), 1),\n        index: new BufferAttribute(new Uint32Array(this.indices_array), 1),\n      };\n    } else {\n      (this._attributes.position as BufferAttribute).copyArray(\n        new Float32Array(this.positions)\n      );\n      this._attributes.position.needsUpdate = true;\n      (this._attributes.previous as BufferAttribute).copyArray(\n        new Float32Array(this.previous)\n      );\n      this._attributes.previous.needsUpdate = true;\n      (this._attributes.next as BufferAttribute).copyArray(\n        new Float32Array(this.next)\n      );\n      this._attributes.next.needsUpdate = true;\n      (this._attributes.side as BufferAttribute).copyArray(\n        new Float32Array(this.side)\n      );\n      this._attributes.side.needsUpdate = true;\n      (this._attributes.track_id as BufferAttribute).copyArray(\n        new Int32Array(this.track_id)\n      );\n      this._attributes.track_id.needsUpdate = true;\n      (this._attributes.color as BufferAttribute).copyArray(\n        new Float32Array(this.colors)\n      );\n      this._attributes.color.needsUpdate = true;\n      (this._attributes.counter as BufferAttribute).copyArray(\n        new Float32Array(this.counter)\n      );\n      this._attributes.counter.needsUpdate = true;\n      (this._attributes.index as BufferAttribute).copyArray(\n        new Uint32Array(this.indices_array)\n      );\n      this._attributes.index.needsUpdate = true;\n    }\n\n    this.setAttribute('position', this._attributes.position);\n    this.setAttribute('previous', this._attributes.previous);\n    this.setAttribute('next', this._attributes.next);\n    this.setAttribute('side', this._attributes.side);\n    this.setAttribute('track_id', this._attributes.track_id);\n    this.setAttribute('color', this._attributes.color);\n    this.setAttribute('counter', this._attributes.counter);\n\n    this.setIndex(this._attributes.index as BufferAttribute);\n\n    this.computeBoundingSphere();\n    this.computeBoundingBox();\n  }\n}\n\n/** Custom vertex shader for tracks. */\nShaderChunk['tracks_vert'] = [\n  'attribute vec3 previous;',\n  'attribute vec3 next;',\n  'attribute int track_id;',\n  'attribute float side;',\n  'attribute vec3 color;',\n  'attribute float counter;',\n\n  'varying vec3 v_color;',\n  'varying float v_counter;',\n  'flat varying int v_track_id;',\n\n  'uniform vec2 resolution;',\n  'uniform float lineWidth;',\n  'void main() {',\n  '  vec2 aspect = vec2(resolution.x / resolution.y, 1.0);',\n  '',\n  '  v_color = color;',\n  '  v_counter = counter;',\n  '  v_track_id = track_id;',\n  '',\n  '  mat4 m = projectionMatrix * modelViewMatrix;',\n  '  vec4 finalPosition = m * vec4(position, 1.0);',\n  '  vec4 prevPos = m * vec4(previous, 1.0);',\n  '  vec4 nextPos = m * vec4(next, 1.0);',\n  '',\n  '  vec2 curP = finalPosition.xy / finalPosition.w * aspect;',\n  '  vec2 prevP = prevPos.xy / prevPos.w * aspect;',\n  '  vec2 nextP = nextPos.xy / nextPos.w * aspect;',\n  '',\n  '  vec2 dir;',\n  '  if (curP == prevP) dir = normalize(nextP - curP);',\n  '  else if (curP == nextP) dir = normalize(curP - prevP);',\n  '  else dir = normalize(curP - prevP);',\n  '',\n  '  vec2 normal = vec2(-dir.y, dir.x);',\n  '  normal.xy *= .5 * lineWidth;',\n  '  normal.x /= aspect.x;',\n  '  normal.xy *= finalPosition.w * 0.001;',\n\n  '  finalPosition.xy += normal.xy * side;',\n  '  gl_Position = finalPosition;',\n  '}',\n].join('\\n');\n\n/** Custom fragment shadre for track. */\nShaderChunk['tracks_frag'] = [\n  'uniform float progress;',\n  'varying vec3 v_color;',\n  'varying float v_counter;',\n  'flat varying int v_track_id;',\n  'void main() {',\n  '  if (v_counter > progress) discard;',\n  '  gl_FragColor = vec4(v_color, 1.0);',\n  '}',\n].join('\\n');\n\n/**\n * Custom material for the tracks.\n */\nexport class TracksMaterial extends ShaderMaterial {\n  /** If the material is of track. */\n  isTracksMaterial: boolean;\n\n  /**\n   * Create the tracks material.\n   * @param params Params for creating the tracks material.\n   */\n  constructor(params) {\n    super({\n      uniforms: Object.assign(\n        {},\n        {\n          lineWidth: { value: 1 },\n          resolution: { value: new Vector2(1, 1) },\n          progress: { value: 1 },\n        }\n      ),\n      vertexShader: ShaderChunk.tracks_vert,\n      fragmentShader: ShaderChunk.tracks_frag,\n    });\n    this.isTracksMaterial = true;\n    this.type = 'TracksMaterial';\n\n    Object.defineProperties(this, {\n      lineWidth: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.lineWidth.value;\n        },\n        set: function (value) {\n          this.uniforms.lineWidth.value = value;\n        },\n      },\n      resolution: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.resolution.value;\n        },\n        set: function (value) {\n          this.uniforms.resolution.value.copy(value);\n        },\n      },\n      progress: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.progress.value;\n        },\n        set: function (value) {\n          this.uniforms.progress.value = value;\n        },\n      },\n    });\n\n    this.setValues(params);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TracksMesh.html":{"url":"classes/TracksMesh.html","title":"class - TracksMesh","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TracksMesh\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/tracks.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom mesh for tracks.\n\n            \n\n            \n                Extends\n            \n            \n                    BufferGeometry\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _attributes\n                            \n                            \n                                colors\n                            \n                            \n                                counter\n                            \n                            \n                                indices_array\n                            \n                            \n                                next\n                            \n                            \n                                next_track_id\n                            \n                            \n                                positions\n                            \n                            \n                                previous\n                            \n                            \n                                side\n                            \n                            \n                                track_id\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addTrack\n                            \n                            \n                                process\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/loaders/objects/tracks.ts:35\n                            \n                        \n\n                \n                    \n                            Create the tracks mesh.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _attributes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:35\n                        \n                    \n\n            \n                \n                    Attributes.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        colors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:25\n                        \n                    \n\n            \n                \n                    Colors.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        counter\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:27\n                        \n                    \n\n            \n                \n                    Counter.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        indices_array\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:33\n                        \n                    \n\n            \n                \n                    Indices.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        next\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:23\n                        \n                    \n\n            \n                \n                    Next.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        next_track_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:17\n                        \n                    \n\n            \n                \n                    ID of the next track.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        positions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:19\n                        \n                    \n\n            \n                \n                    Positions.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        previous\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:21\n                        \n                    \n\n            \n                \n                    Previous.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        side\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:31\n                        \n                    \n\n            \n                \n                    Side.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        track_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:29\n                        \n                    \n\n            \n                \n                    Track ID.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addTrack\n                        \n                    \n                \n            \n            \n                \naddTrack(points: Vector3[], color: ColorRepresentation)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/tracks.ts:60\n                \n            \n\n\n            \n                \n                    Add a track to the tracks mesh.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    points\n                                    \n                                            Vector3[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Points for constructing the track.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                            ColorRepresentation\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Color of the track.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        ID of the track.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        process\n                        \n                    \n                \n            \n            \n                \nprocess()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/tracks.ts:102\n                \n            \n\n\n            \n                \n                    Process the track mesh.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BufferGeometry,\n  BufferAttribute,\n  ShaderMaterial,\n  ShaderChunk,\n  Vector2,\n  Vector3,\n  Color,\n  ColorRepresentation,\n} from 'three';\n\n/**\n * Custom mesh for tracks.\n */\nexport class TracksMesh extends BufferGeometry {\n  /** ID of the next track. */\n  next_track_id: number;\n  /** Positions. */\n  positions: number[];\n  /** Previous. */\n  previous: number[];\n  /** Next. */\n  next: number[];\n  /** Colors. */\n  colors: number[];\n  /** Counter. */\n  counter: number[];\n  /** Track ID. */\n  track_id: any[];\n  /** Side. */\n  side: any[];\n  /** Indices. */\n  indices_array: any[];\n  /** Attributes. */\n  _attributes: any;\n\n  /**\n   * Create the tracks mesh.\n   */\n  constructor() {\n    super();\n    this.type = 'TracksMesh';\n    this.positions = [];\n    this.previous = [];\n    this.next = [];\n    this.side = [];\n    this.counter = [];\n    this.track_id = [];\n    this.colors = [];\n    this.indices_array = [];\n    this.next_track_id = 0;\n  }\n\n  /**\n   * Add a track to the tracks mesh.\n   * @param points Points for constructing the track.\n   * @param color Color of the track.\n   * @returns ID of the track.\n   */\n  addTrack(points: Vector3[], color: ColorRepresentation) {\n    const id = this.next_track_id++;\n\n    const col = new Color(color);\n\n    this.previous.push(points[0].x, points[0].y, points[0].z);\n    this.previous.push(points[0].x, points[0].y, points[0].z);\n\n    for (let i = 0; i  0) {\n        this.next.push(p.x, p.y, p.z);\n        this.next.push(p.x, p.y, p.z);\n      }\n    }\n\n    const i = points.length - 1;\n    this.next.push(points[i].x, points[i].y, points[i].z);\n    this.next.push(points[i].x, points[i].y, points[i].z);\n\n    //this.process()\n    return id;\n  }\n\n  /**\n   * Process the track mesh.\n   */\n  process() {\n    if (\n      !this._attributes ||\n      this._attributes.position.count !== this.positions.length\n    ) {\n      this._attributes = {\n        position: new BufferAttribute(new Float32Array(this.positions), 3),\n        previous: new BufferAttribute(new Float32Array(this.previous), 3),\n        next: new BufferAttribute(new Float32Array(this.next), 3),\n        side: new BufferAttribute(new Float32Array(this.side), 1),\n        track_id: new BufferAttribute(new Int32Array(this.track_id), 1),\n        color: new BufferAttribute(new Float32Array(this.colors), 3),\n        counter: new BufferAttribute(new Float32Array(this.counter), 1),\n        index: new BufferAttribute(new Uint32Array(this.indices_array), 1),\n      };\n    } else {\n      (this._attributes.position as BufferAttribute).copyArray(\n        new Float32Array(this.positions)\n      );\n      this._attributes.position.needsUpdate = true;\n      (this._attributes.previous as BufferAttribute).copyArray(\n        new Float32Array(this.previous)\n      );\n      this._attributes.previous.needsUpdate = true;\n      (this._attributes.next as BufferAttribute).copyArray(\n        new Float32Array(this.next)\n      );\n      this._attributes.next.needsUpdate = true;\n      (this._attributes.side as BufferAttribute).copyArray(\n        new Float32Array(this.side)\n      );\n      this._attributes.side.needsUpdate = true;\n      (this._attributes.track_id as BufferAttribute).copyArray(\n        new Int32Array(this.track_id)\n      );\n      this._attributes.track_id.needsUpdate = true;\n      (this._attributes.color as BufferAttribute).copyArray(\n        new Float32Array(this.colors)\n      );\n      this._attributes.color.needsUpdate = true;\n      (this._attributes.counter as BufferAttribute).copyArray(\n        new Float32Array(this.counter)\n      );\n      this._attributes.counter.needsUpdate = true;\n      (this._attributes.index as BufferAttribute).copyArray(\n        new Uint32Array(this.indices_array)\n      );\n      this._attributes.index.needsUpdate = true;\n    }\n\n    this.setAttribute('position', this._attributes.position);\n    this.setAttribute('previous', this._attributes.previous);\n    this.setAttribute('next', this._attributes.next);\n    this.setAttribute('side', this._attributes.side);\n    this.setAttribute('track_id', this._attributes.track_id);\n    this.setAttribute('color', this._attributes.color);\n    this.setAttribute('counter', this._attributes.counter);\n\n    this.setIndex(this._attributes.index as BufferAttribute);\n\n    this.computeBoundingSphere();\n    this.computeBoundingBox();\n  }\n}\n\n/** Custom vertex shader for tracks. */\nShaderChunk['tracks_vert'] = [\n  'attribute vec3 previous;',\n  'attribute vec3 next;',\n  'attribute int track_id;',\n  'attribute float side;',\n  'attribute vec3 color;',\n  'attribute float counter;',\n\n  'varying vec3 v_color;',\n  'varying float v_counter;',\n  'flat varying int v_track_id;',\n\n  'uniform vec2 resolution;',\n  'uniform float lineWidth;',\n  'void main() {',\n  '  vec2 aspect = vec2(resolution.x / resolution.y, 1.0);',\n  '',\n  '  v_color = color;',\n  '  v_counter = counter;',\n  '  v_track_id = track_id;',\n  '',\n  '  mat4 m = projectionMatrix * modelViewMatrix;',\n  '  vec4 finalPosition = m * vec4(position, 1.0);',\n  '  vec4 prevPos = m * vec4(previous, 1.0);',\n  '  vec4 nextPos = m * vec4(next, 1.0);',\n  '',\n  '  vec2 curP = finalPosition.xy / finalPosition.w * aspect;',\n  '  vec2 prevP = prevPos.xy / prevPos.w * aspect;',\n  '  vec2 nextP = nextPos.xy / nextPos.w * aspect;',\n  '',\n  '  vec2 dir;',\n  '  if (curP == prevP) dir = normalize(nextP - curP);',\n  '  else if (curP == nextP) dir = normalize(curP - prevP);',\n  '  else dir = normalize(curP - prevP);',\n  '',\n  '  vec2 normal = vec2(-dir.y, dir.x);',\n  '  normal.xy *= .5 * lineWidth;',\n  '  normal.x /= aspect.x;',\n  '  normal.xy *= finalPosition.w * 0.001;',\n\n  '  finalPosition.xy += normal.xy * side;',\n  '  gl_Position = finalPosition;',\n  '}',\n].join('\\n');\n\n/** Custom fragment shadre for track. */\nShaderChunk['tracks_frag'] = [\n  'uniform float progress;',\n  'varying vec3 v_color;',\n  'varying float v_counter;',\n  'flat varying int v_track_id;',\n  'void main() {',\n  '  if (v_counter > progress) discard;',\n  '  gl_FragColor = vec4(v_color, 1.0);',\n  '}',\n].join('\\n');\n\n/**\n * Custom material for the tracks.\n */\nexport class TracksMaterial extends ShaderMaterial {\n  /** If the material is of track. */\n  isTracksMaterial: boolean;\n\n  /**\n   * Create the tracks material.\n   * @param params Params for creating the tracks material.\n   */\n  constructor(params) {\n    super({\n      uniforms: Object.assign(\n        {},\n        {\n          lineWidth: { value: 1 },\n          resolution: { value: new Vector2(1, 1) },\n          progress: { value: 1 },\n        }\n      ),\n      vertexShader: ShaderChunk.tracks_vert,\n      fragmentShader: ShaderChunk.tracks_frag,\n    });\n    this.isTracksMaterial = true;\n    this.type = 'TracksMaterial';\n\n    Object.defineProperties(this, {\n      lineWidth: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.lineWidth.value;\n        },\n        set: function (value) {\n          this.uniforms.lineWidth.value = value;\n        },\n      },\n      resolution: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.resolution.value;\n        },\n        set: function (value) {\n          this.uniforms.resolution.value.copy(value);\n        },\n      },\n      progress: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.progress.value;\n        },\n        set: function (value) {\n          this.uniforms.progress.value = value;\n        },\n      },\n    });\n\n    this.setValues(params);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/URLOptionsManager.html":{"url":"classes/URLOptionsManager.html","title":"class - URLOptionsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  URLOptionsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/url-options-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                A manager for managing options given through URL.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                urlOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                applyEmbedOption\n                            \n                            \n                                    Public\n                                applyEventOptions\n                            \n                            \n                                    Public\n                                applyHideWidgetsOptions\n                            \n                            \n                                    Public\n                                applyOptions\n                            \n                            \n                                    Public\n                                getURLOptions\n                            \n                            \n                                    Private\n                                hideIdsWithURLOption\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventDisplay: EventDisplay, configuration: Configuration)\n                    \n                \n                        \n                            \n                                Defined in src/managers/url-options-manager.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for the URL options manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        eventDisplay\n                                                  \n                                                        \n                                                                        EventDisplay\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The Phoenix event display.\n\n                                                        \n                                                \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        Configuration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Configuration of the event display.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        urlOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     URLSearchParams\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/url-options-manager.ts:23\n                        \n                    \n\n            \n                \n                    Variable containing all URL search parameters.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        applyEmbedOption\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyEmbedOption()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:147\n                \n            \n\n\n            \n                \n                    Hide all overlay widgets and enable embed menu if \"hideWidgets\" option from the URL is true.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        applyEventOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyEventOptions(defaultEventPath?: string, defaultEventType?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:58\n                \n            \n\n\n            \n                \n                    Initialize the event display with event data and configuration from URL.\n(Only JiveXML and JSON)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    defaultEventPath\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Default event path to fallback to if none in URL.\n\n                                    \n                                \n                                \n                                    defaultEventType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Default event type to fallback to if none in URL.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        applyHideWidgetsOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyHideWidgetsOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:129\n                \n            \n\n\n            \n                \n                    Hide all overlay widgets if \"hideWidgets\" option from the URL is true.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        applyOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:42\n                \n            \n\n\n            \n                \n                    Initialize and apply all URL options on page load.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getURLOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getURLOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:188\n                \n            \n\n\n            \n                \n                    Get options from URL set through query parameters.\n\n\n                    \n                    \n                    \n                        Returns :     URLSearchParams\n\n                    \n                    \n                        URL options.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        hideIdsWithURLOption\n                        \n                    \n                \n            \n            \n                \n                    \n                    hideIdsWithURLOption(urlOptionWithIds: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:172\n                \n            \n\n\n            \n                \n                    Hide element with IDs based on a URL option.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    urlOptionWithIds\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        IDs to hide with keys as the URL option and its array value as IDs.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { JiveXMLLoader } from '../loaders/jivexml-loader';\nimport { PhoenixLoader } from '../loaders/phoenix-loader';\nimport { Configuration } from '../lib/types/configuration';\nimport { EventDisplay } from '../event-display';\nimport { StateManager } from './state-manager';\n\n/**\n * Model for Phoenix URL options.\n */\nexport const phoenixURLOptions = {\n  file: '',\n  type: '',\n  config: '',\n  hideWidgets: false,\n  embed: false,\n};\n\n/**\n * A manager for managing options given through URL.\n */\nexport class URLOptionsManager {\n  /** Variable containing all URL search parameters. */\n  private urlOptions: URLSearchParams;\n\n  /**\n   * Constructor for the URL options manager.\n   * @param eventDisplay The Phoenix event display.\n   * @param configuration Configuration of the event display.\n   */\n  constructor(\n    private eventDisplay: EventDisplay,\n    private configuration: Configuration\n  ) {\n    this.urlOptions = new URLSearchParams(\n      window.location.href.substr(window.location.href.lastIndexOf('?'))\n    );\n  }\n\n  /**\n   * Initialize and apply all URL options on page load.\n   */\n  public applyOptions() {\n    // Initialize event with data from URL if there is any\n    this.applyEventOptions(\n      this.configuration.defaultEventFile?.eventFile,\n      this.configuration.defaultEventFile?.eventType\n    );\n    this.applyHideWidgetsOptions();\n    this.applyEmbedOption();\n  }\n\n  /**\n   * Initialize the event display with event data and configuration from URL.\n   * (Only JiveXML and JSON)\n   * @param defaultEventPath Default event path to fallback to if none in URL.\n   * @param defaultEventType Default event type to fallback to if none in URL.\n   */\n  public applyEventOptions(\n    defaultEventPath?: string,\n    defaultEventType?: string\n  ) {\n    if (!('fetch' in window)) {\n      return;\n    }\n\n    let file: string, type: string;\n\n    if (!this.urlOptions.get('file') || !this.urlOptions.get('type')) {\n      file = defaultEventPath;\n      type = defaultEventType;\n    } else {\n      file = this.urlOptions.get('file');\n      type = this.urlOptions.get('type').toLowerCase();\n    }\n\n    // Load config from URL\n    const loadConfig = () => {\n      if (this.urlOptions.get('config')) {\n        this.eventDisplay.getLoadingManager().addLoadableItem('url_config');\n        fetch(this.urlOptions.get('config'))\n          .then((res) => res.json())\n          .then((jsonState) => {\n            const stateManager = new StateManager();\n            stateManager.loadStateFromJSON(jsonState);\n          })\n          .finally(() => {\n            this.eventDisplay.getLoadingManager().itemLoaded('url_config');\n          });\n      }\n    };\n\n    // Load event file from URL\n    if (file && type) {\n      this.eventDisplay.getLoadingManager().addLoadableItem('url_event');\n      fetch(file)\n        .then((res) => (type === 'jivexml' ? res.text() : res.json()))\n        .then((res: { [key: string]: any } | string) => {\n          if (type === 'jivexml') {\n            const loader = new JiveXMLLoader();\n            this.configuration.eventDataLoader = loader;\n            // Parse the JSON to extract events and their data\n            loader.process(res);\n            const eventData = loader.getEventData();\n            this.eventDisplay.buildEventDataFromJSON(eventData);\n          } else {\n            this.configuration.eventDataLoader = new PhoenixLoader();\n            this.eventDisplay.parsePhoenixEvents(res);\n          }\n        })\n        .catch((error) => {\n          this.eventDisplay\n            .getInfoLogger()\n            .add('Could not find the file specified in URL.', 'Error');\n          console.error('Could not find the file specified in URL.', error);\n        })\n        .finally(() => {\n          // Load config from URL after loading the event\n          loadConfig();\n          this.eventDisplay.getLoadingManager().itemLoaded('url_event');\n        });\n    } else {\n      loadConfig();\n    }\n  }\n\n  /**\n   * Hide all overlay widgets if \"hideWidgets\" option from the URL is true.\n   */\n  public applyHideWidgetsOptions() {\n    const hideWidgetsOptions = {\n      hideWidgets: [\n        'mainLogo', // Main logo\n        'uiMenu', // UI menu\n        'experimentInfo', // Experiment info\n        'phoenixMenu', // Phoenix menu\n        'statsElement', // Stats at the bottom left\n        'gui', // dat.GUI menu\n      ],\n    };\n\n    this.hideIdsWithURLOption(hideWidgetsOptions);\n  }\n\n  /**\n   * Hide all overlay widgets and enable embed menu if \"hideWidgets\" option from the URL is true.\n   */\n  public applyEmbedOption() {\n    if (this.urlOptions.get('embed') === 'true') {\n      const hideWidgetsOptions = {\n        embed: [\n          'mainLogo', // Main logo\n          'uiMenu', // UI menu\n          'experimentInfo', // Experiment info\n          'phoenixMenu', // Phoenix menu\n          'statsElement', // Stats at the bottom left\n          'gui', // dat.GUI menu\n        ],\n      };\n\n      this.hideIdsWithURLOption(hideWidgetsOptions);\n\n      document\n        .getElementById('embedMenu')\n        ?.style.setProperty('display', 'block');\n    }\n  }\n\n  /**\n   * Hide element with IDs based on a URL option.\n   * @param urlOptionWithIds IDs to hide with keys as the URL option and its array value as IDs.\n   */\n  private hideIdsWithURLOption(urlOptionWithIds: { [key: string]: string[] }) {\n    Object.entries(urlOptionWithIds).forEach(([urlOption, idsToHide]) => {\n      if (this.urlOptions.get(urlOption) === 'true') {\n        idsToHide.forEach((singleId) => {\n          document\n            .getElementById(singleId)\n            ?.style.setProperty('display', 'none');\n        });\n      }\n    });\n  }\n\n  /**\n   * Get options from URL set through query parameters.\n   * @returns URL options.\n   */\n  public getURLOptions() {\n    return this.urlOptions;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VRManager.html":{"url":"classes/VRManager.html","title":"class - VRManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VRManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/xr/vr-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                VR manager for VR related operations.\n\n            \n\n            \n                Extends\n            \n            \n                        XRManager\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                controller1\n                            \n                            \n                                    Private\n                                controller2\n                            \n                            \n                                    Private\n                                controllerGrip1\n                            \n                            \n                                    Private\n                                controllerGrip2\n                            \n                            \n                                    Private\n                                onControllerSelectEnd\n                            \n                            \n                                    Private\n                                onControllerSelectStart\n                            \n                            \n                                    Static\n                                    Readonly\n                                SESSION_TYPE\n                            \n                            \n                                    Public\n                                cameraGroup\n                            \n                            \n                                    Protected\n                                currentXRSession\n                            \n                            \n                                    Protected\n                                onSessionEnded\n                            \n                            \n                                    Protected\n                                renderer\n                            \n                            \n                                    Protected\n                                sessionInit\n                            \n                            \n                                    Protected\n                                xrActive\n                            \n                            \n                                    Public\n                                xrCamera\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                moveInDirection\n                            \n                            \n                                    Protected\n                                onXRSessionEnded\n                            \n                            \n                                    Private\n                                setupVRControls\n                            \n                            \n                                    Public\n                                setXRSession\n                            \n                            \n                                    Public\n                                endXRSession\n                            \n                            \n                                    Public\n                                getCameraGroup\n                            \n                            \n                                    Public\n                                getXRCamera\n                            \n                            \n                                    Protected\n                                    Async\n                                onXRSessionStarted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:28\n                            \n                        \n\n                \n                    \n                            Create the VR manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        controller1\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:17\n                        \n                    \n\n            \n                \n                    The VR controller for movement.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        controller2\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:19\n                        \n                    \n\n            \n                \n                    The VR controller for movement.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        controllerGrip1\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:21\n                        \n                    \n\n            \n                \n                    The VR controller representation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        controllerGrip2\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:23\n                        \n                    \n\n            \n                \n                    The VR controller representation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onControllerSelectEnd\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:28\n                        \n                    \n\n            \n                \n                    Listener for when the \"Select Start\" button is released.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onControllerSelectStart\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:26\n                        \n                    \n\n            \n                \n                    Listener for when the \"Select Start\" button is pushed.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        SESSION_TYPE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'immersive-vr'\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:15\n                        \n                    \n\n            \n                \n                    Session type to use for VR.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cameraGroup\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Group\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:36\n\n                        \n                    \n\n            \n                \n                    Group containing the the camera for XR.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        currentXRSession\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:32\n\n                        \n                    \n\n            \n                \n                    Currently active XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onSessionEnded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:34\n\n                        \n                    \n\n            \n                \n                    Callback to call when the XR session ends.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:30\n\n                        \n                    \n\n            \n                \n                    Renderer to set the XR session for.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        sessionInit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:28\n\n                        \n                    \n\n            \n                \n                    Returns required and optional features when requesting an XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        xrActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:26\n\n                        \n                    \n\n            \n                \n                    Whether the XR is currently active or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        xrCamera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:38\n\n                        \n                    \n\n            \n                \n                    The camera used by XR.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        moveInDirection\n                        \n                    \n                \n            \n            \n                \n                    \n                    moveInDirection(direction: Vector3, stepDistance: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/xr/vr-manager.ts:149\n                \n            \n\n\n            \n                \n                    Move the camera in the given direction.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    direction\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Direction to move towards.\n\n                                    \n                                \n                                \n                                    stepDistance\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Distance to move by.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        onXRSessionEnded\n                        \n                    \n                \n            \n            \n                \n                    \n                    onXRSessionEnded()\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:61\n\n                \n            \n\n\n            \n                \n                    Callback when the VR session ends.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        setupVRControls\n                        \n                    \n                \n            \n            \n                \n                    \n                    setupVRControls()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/xr/vr-manager.ts:77\n                \n            \n\n\n            \n                \n                    Set up VR controls for moving around the event display.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setXRSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    setXRSession(renderer: WebGLRenderer, onSessionStarted?: () => void, onSessionEnded?: () => void)\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:48\n\n                \n            \n\n\n            \n                \n                    Set and configure the VR session.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer to set the VR session for.\n\n                                    \n                                \n                                \n                                    onSessionStarted\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the VR session starts.\n\n                                    \n                                \n                                \n                                    onSessionEnded\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the VR session ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        endXRSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    endXRSession()\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:99\n\n                \n            \n\n\n            \n                \n                    End the current XR session.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCameraGroup\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraGroup(camera?: Camera)\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:109\n\n                \n            \n\n\n            \n                \n                    Get the group containing the camera for XR.\nXR camera works by adding a Group with Camera to the scene.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Camera which is to be cloned for XR use.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Group\n\n                    \n                    \n                        The camera group used in XR mode.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getXRCamera\n                        \n                    \n                \n            \n            \n                \n                    \n                    getXRCamera()\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:135\n\n                \n            \n\n\n            \n                \n                    Get the camera used by XR.\n\n\n                    \n                    \n                    \n                        Returns :     Camera\n\n                    \n                    \n                        The camera used by XR.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        onXRSessionStarted\n                        \n                    \n                \n            \n            \n                \n                    \n                    onXRSessionStarted(session: any)\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:78\n\n                \n            \n\n\n            \n                \n                    Callback for when the XR session is started.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The XR session.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebGLRenderer, Vector3, BufferGeometry, Line } from 'three';\nimport { XRControllerModelFactory } from 'three/examples/jsm/webxr/XRControllerModelFactory';\nimport { XRManager, XRSessionType } from './xr-manager';\n\n// NOTE: This was created on 29/08/2020\n// It might become outdated given how WebXR is still a work in progress\n\n// LAST UPDATED ON 20/06/2021\n\n/**\n * VR manager for VR related operations.\n */\nexport class VRManager extends XRManager {\n  /** Session type to use for VR. */\n  static readonly SESSION_TYPE: string = 'immersive-vr';\n  /** The VR controller for movement. */\n  private controller1: any;\n  /** The VR controller for movement. */\n  private controller2: any;\n  /** The VR controller representation */\n  private controllerGrip1: any;\n  /** The VR controller representation */\n  private controllerGrip2: any;\n\n  /** Listener for when the \"Select Start\" button is pushed. */\n  private onControllerSelectStart: () => void;\n  /** Listener for when the \"Select Start\" button is released. */\n  private onControllerSelectEnd: () => void;\n\n  /**\n   * Create the VR manager.\n   * @override\n   */\n  constructor() {\n    super(XRSessionType.VR);\n    this.sessionInit = () => ({\n      optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking'],\n    });\n  }\n\n  /**\n   * Set and configure the VR session.\n   * @param renderer Renderer to set the VR session for.\n   * @param onSessionStarted Callback to call when the VR session starts.\n   * @param onSessionEnded Callback to call when the VR session ends.\n   * @override\n   */\n  public setXRSession(\n    renderer: WebGLRenderer,\n    onSessionStarted?: () => void,\n    onSessionEnded?: () => void\n  ) {\n    super.setXRSession(renderer, onSessionStarted, onSessionEnded);\n    this.setupVRControls();\n  }\n\n  /**\n   * Callback when the VR session ends.\n   * @override\n   */\n  protected onXRSessionEnded() {\n    super.onXRSessionEnded();\n\n    this.controller1?.removeEventListener(\n      'selectstart',\n      this.onControllerSelectStart\n    );\n    this.controller1?.removeEventListener(\n      'selectend',\n      this.onControllerSelectEnd\n    );\n  }\n\n  /**\n   * Set up VR controls for moving around the event display.\n   */\n  private setupVRControls() {\n    // Get the controllers\n    this.controller1 = this.renderer.xr.getController(0);\n    this.getCameraGroup().add(this.controller1);\n    this.controller2 = this.renderer.xr.getController(1);\n    this.getCameraGroup().add(this.controller2);\n\n    const controllerModelFactory = new XRControllerModelFactory();\n    this.controllerGrip1 = this.renderer.xr.getControllerGrip(0);\n    this.controllerGrip1.add(\n      controllerModelFactory.createControllerModel(this.controllerGrip1)\n    );\n    this.getCameraGroup().add(this.controllerGrip1);\n\n    this.controllerGrip2 = this.renderer.xr.getControllerGrip(1);\n    this.controllerGrip2.add(\n      controllerModelFactory.createControllerModel(this.controllerGrip2)\n    );\n    this.getCameraGroup().add(this.controllerGrip2);\n\n    const geometry = new BufferGeometry().setFromPoints([\n      new Vector3(0, 0, 0),\n      new Vector3(0, 0, -1),\n    ]);\n\n    const line = new Line(geometry);\n    line.name = 'line';\n    line.scale.z = 50;\n\n    this.controller1.add(line.clone());\n    this.controller2.add(line.clone());\n\n    // Set up movement\n\n    // Distance for a single step\n    const stepDistance = 30;\n    // Unit vector in camera direction\n    const direction = new Vector3();\n    // Interval ID for the movement interval\n    let intervalId: NodeJS.Timeout;\n\n    this.onControllerSelectStart = () => {\n      console.log(\n        'Select: c1 position ' + this.controller1.position.toArray().join(', ')\n      );\n      console.log(\n        'Select: CG position ' + this.cameraGroup.position.toArray().join(', ')\n      );\n\n      // Start movement in camera direction\n      intervalId = setInterval(() => {\n        this.moveInDirection(direction, stepDistance);\n      }, 20);\n    };\n\n    this.onControllerSelectEnd = () => {\n      // Stop the movement\n      clearInterval(intervalId);\n    };\n\n    this.controller1.addEventListener(\n      'selectstart',\n      this.onControllerSelectStart\n    );\n    this.controller1.addEventListener('selectend', this.onControllerSelectEnd);\n  }\n\n  /**\n   * Move the camera in the given direction.\n   * @param direction Direction to move towards.\n   * @param stepDistance Distance to move by.\n   */\n  private moveInDirection(direction: Vector3, stepDistance: number) {\n    // Get the direction the controller is facing\n    //! this.controller.getWorldDirection(direction);\n\n    // Get direction the camera is facing\n    this.xrCamera?.getWorldDirection(direction);\n\n    // Move the camera in the given direction\n    this.cameraGroup.position.addScaledVector(direction, stepDistance);\n    this.xrCamera.position.addScaledVector(direction, stepDistance);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Window.html":{"url":"interfaces/Window.html","title":"interface - Window","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Window\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event-display.ts\n        \n\n\n            \n                Description\n            \n            \n                Window interface for adding objects to the window object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            EventDisplay\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        EventDisplay\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        EventDisplay:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    EventDisplay object containing event display related functions.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { httpRequest } from 'jsroot';\nimport { settings as jsrootSettings } from 'jsroot';\nimport { build } from 'jsroot/geom';\nimport { openFile } from 'jsroot/io';\nimport { ThreeManager } from './managers/three-manager';\nimport { UIManager } from './managers/ui-manager';\nimport { InfoLogger } from './helpers/info-logger';\nimport { Configuration } from './lib/types/configuration';\nimport { StateManager } from './managers/state-manager';\nimport { LoadingManager } from './managers/loading-manager';\nimport { URLOptionsManager } from './managers/url-options-manager';\nimport { ActiveVariable } from './helpers/active-variable';\nimport { AnimationPreset } from './managers/three-manager/animations-manager';\nimport { XRSessionType } from './managers/three-manager/xr/xr-manager';\nimport { getLabelTitle } from './helpers/labels';\n\ndeclare global {\n  /**\n   * Window interface for adding objects to the window object.\n   */\n  interface Window {\n    /** EventDisplay object containing event display related functions. */\n    EventDisplay: any;\n  }\n}\n\n/**\n * Phoenix event display class for managing detector geometries and event data.\n */\nexport class EventDisplay {\n  /** Configuration for preset views and event data loader. */\n  private configuration: Configuration;\n  /** An object containing event data. */\n  private eventsData: any;\n  /** Array containing callbacks to be called when events change. */\n  private onEventsChange: ((events: any) => void)[] = [];\n  /** Array containing callbacks to be called when the displayed event changes. */\n  private onDisplayedEventChange: ((nowDisplayingEvent: any) => void)[] = [];\n  /** Three manager for three.js operations. */\n  private graphicsLibrary: ThreeManager;\n  /** Info logger for storing event display logs. */\n  private infoLogger: InfoLogger;\n  /** UI manager for UI menu. */\n  private ui: UIManager;\n  /** Loading manager for loadable resources */\n  private loadingManager: LoadingManager;\n  /** State manager for managing event display state. */\n  private stateManager: StateManager;\n  /** URL manager for managing options given through URL. */\n  private urlOptionsManager: URLOptionsManager;\n\n  /**\n   * Create the Phoenix event display and intitialize all the elements.\n   * @param configuration Configuration used to customize different aspects.\n   */\n  constructor(configuration?: Configuration) {\n    this.loadingManager = new LoadingManager();\n    this.infoLogger = new InfoLogger();\n    this.graphicsLibrary = new ThreeManager(this.infoLogger);\n    this.ui = new UIManager(this.graphicsLibrary);\n    if (configuration) {\n      this.init(configuration);\n    }\n  }\n\n  /**\n   * Initialize all the Phoenix event display elements.\n   * @param configuration Configuration used to customize different aspects.\n   */\n  public init(configuration: Configuration) {\n    this.configuration = configuration;\n\n    // Initialize the three manager with configuration\n    this.graphicsLibrary.init(configuration);\n    // Initialize the UI with configuration\n    this.ui.init(configuration);\n    // Set up for the state manager\n    this.getStateManager().setEventDisplay(this);\n\n    // Animate loop\n    const uiLoop = () => {\n      this.ui.updateUI();\n    };\n    this.graphicsLibrary.setAnimationLoop(uiLoop);\n\n    // Process and apply URL options\n    this.urlOptionsManager = new URLOptionsManager(this, configuration);\n    if (configuration.allowUrlOptions !== false) {\n      this.urlOptionsManager.applyOptions();\n    }\n\n    // Allow adding elements through console\n    this.enableEventDisplayConsole();\n    // Allow keyboard controls\n    this.enableKeyboardControls();\n  }\n\n  /**\n   * Initialize XR.\n   * @param xrSessionType Type of the XR session. Either AR or VR.\n   * @param onSessionEnded Callback when the XR session ends.\n   */\n  public initXR(xrSessionType: XRSessionType, onSessionEnded?: () => void) {\n    this.graphicsLibrary.initXRSession(xrSessionType, onSessionEnded);\n  }\n\n  /**\n   * End VR and remove VR settings.\n   * @param xrSessionType Type of the XR session. Either AR or VR.\n   */\n  public endXR(xrSessionType: XRSessionType) {\n    this.graphicsLibrary.endXRSession(xrSessionType);\n  }\n\n  /**\n   * Receives an object containing all the eventKeys and saves it.\n   * Then it loads by default the first event.\n   * @param eventsData Object containing the event data.\n   * @returns Array of strings containing the keys of the eventsData object.\n   */\n  public parsePhoenixEvents(eventsData: any): string[] {\n    this.eventsData = eventsData;\n    const eventKeys =\n      this.configuration.eventDataLoader.getEventsList(eventsData);\n    this.loadEvent(eventKeys[0]);\n    this.onEventsChange.forEach((callback) => callback(eventKeys));\n\n    return eventKeys;\n  }\n\n  /**\n   * Receives an object containing one event and builds the different collections\n   * of physics objects.\n   * @param eventData Object containing the event data.\n   */\n  public buildEventDataFromJSON(eventData: any) {\n    // Reset labels\n    this.resetLabels();\n    // Creating UI folder\n    this.ui.addEventDataFolder();\n    this.ui.addLabelsFolder();\n    // Clearing existing event data\n    this.graphicsLibrary.clearEventData();\n    // Build data and add to scene\n    this.configuration.eventDataLoader.buildEventData(\n      eventData,\n      this.graphicsLibrary,\n      this.ui,\n      this.infoLogger\n    );\n    this.onDisplayedEventChange.forEach((callback) => callback(eventData));\n    // Reload the event data state in Phoenix menu\n    this.ui.loadEventFolderPhoenixMenuState();\n  }\n\n  /**\n   * Receives a string representing the key of an event and loads\n   * the event associated with that key.\n   * @param eventKey String that represents the event in the eventsData object.\n   */\n  public loadEvent(eventKey: any) {\n    const event = this.eventsData[eventKey];\n\n    if (event) {\n      this.buildEventDataFromJSON(event);\n    }\n  }\n\n  /**\n   * Get the three manager responsible for three.js functions.\n   * @returns The three.js manager.\n   */\n  public getThreeManager() {\n    return this.graphicsLibrary;\n  }\n\n  /**\n   * Get the UI manager responsible for UI related functions.\n   * @returns The UI manager.\n   */\n  public getUIManager() {\n    return this.ui;\n  }\n\n  /**\n   * Get the info logger containing event display logs.\n   * @returns The info logger instance being used by the event display.\n   */\n  public getInfoLogger() {\n    return this.infoLogger;\n  }\n\n  /**\n   * Get the loading manager for managing loadable items.\n   * @returns The loading manager.\n   */\n  public getLoadingManager() {\n    return this.loadingManager;\n  }\n\n  /**\n   * Get the state manager that manages event display's state.\n   * @returns The state manager.\n   */\n  public getStateManager() {\n    if (!this.stateManager) {\n      this.stateManager = new StateManager();\n    }\n\n    return this.stateManager;\n  }\n\n  /**\n   * Get the URL options manager that manages options given through URL.\n   * @returns The URL options manager.\n   */\n  public getURLOptionsManager() {\n    return this.urlOptionsManager;\n  }\n\n  // **********************\n  // * LOADING GEOMETRIES *\n  // **********************\n\n  /**\n   * Loads an OBJ (.obj) geometry from the given filename\n   * and adds it to the dat.GUI menu.\n   * @param filename Path to the geometry.\n   * @param name Name given to the geometry.\n   * @param color Color to initialize the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param doubleSided If true, render both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not. Default `true`.\n   * @param setFlat Whether object should be flat-shaded or not. Default `true`.\n   * @returns Promise for loading the geometry.\n   */\n  public async loadOBJGeometry(\n    filename: string,\n    name: string,\n    color: any,\n    menuNodeName?: string,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true,\n    setFlat: boolean = true\n  ): Promise {\n    this.loadingManager.addLoadableItem(`obj_geom_${name}`);\n\n    const { object } = await this.graphicsLibrary.loadOBJGeometry(\n      filename,\n      name,\n      color,\n      doubleSided,\n      initiallyVisible,\n      setFlat\n    );\n    this.ui.addGeometry(object, menuNodeName);\n\n    this.loadingManager.itemLoaded(`obj_geom_${name}`);\n    this.infoLogger.add(name, 'Loaded OBJ geometry');\n  }\n\n  /**\n   * Parses and loads an OBJ geometry from the given content\n   * and adds it to the dat.GUI menu.\n   * @param content Content of the OBJ geometry.\n   * @param name Name given to the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param initiallyVisible Whether the geometry is initially visible or not. Default `true`.\n   */\n  public parseOBJGeometry(\n    content: string,\n    name: string,\n    menuNodeName?: string,\n    initiallyVisible: boolean = true\n  ) {\n    this.loadingManager.addLoadableItem(`parse_obj_${name}`);\n    const { object } = this.graphicsLibrary.parseOBJGeometry(\n      content,\n      name,\n      initiallyVisible\n    );\n    this.ui.addGeometry(object, menuNodeName);\n    this.loadingManager.itemLoaded(`parse_obj_${name}`);\n  }\n\n  /**\n   * Exports scene to OBJ file format.\n   */\n  public exportToOBJ() {\n    this.graphicsLibrary.exportSceneToOBJ();\n    this.infoLogger.add('Exported scene to OBJ');\n  }\n\n  /**\n   * Parse and load an event from the Phoenix file format (.phnx).\n   * @param input Content containing the JSON with event data\n   * and other configuration.\n   * @returns Promise for loading the geometry.\n   */\n  public async parsePhoenixDisplay(input: any): Promise {\n    const phoenixScene = JSON.parse(input);\n\n    if (phoenixScene.sceneConfiguration && phoenixScene.scene) {\n      // Creating UI folder\n      this.ui.addEventDataFolder();\n      this.ui.addLabelsFolder();\n      // Clearing existing event data\n      this.graphicsLibrary.clearEventData();\n      // Add to scene\n      this.loadSceneConfiguration(phoenixScene.sceneConfiguration);\n\n      this.loadingManager.addLoadableItem(`parse_phnx_${name}`);\n      await this.graphicsLibrary.parsePhnxScene(phoenixScene.scene);\n      this.loadingManager.itemLoaded(`parse_phnx_${name}`);\n    }\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   */\n  public exportPhoenixDisplay() {\n    this.graphicsLibrary.exportPhoenixScene();\n  }\n\n  /**\n   * Parses and loads a geometry in GLTF (.gltf) format.\n   * @param input Data of the GLTF (.gltf) file.\n   * @param name Name given to the geometry. If empty Name will be taken from the geometry itself\n   * @returns Promise for loading the geometry.\n   */\n  public async parseGLTFGeometry(\n    input: string | ArrayBuffer,\n    name: string\n  ): Promise {\n    this.loadingManager.addLoadableItem(`parse_gltf_${name}`);\n\n    const allGeometriesUIParameters =\n      await this.graphicsLibrary.parseGLTFGeometry(input, name);\n    for (const { object } of allGeometriesUIParameters) {\n      this.ui.addGeometry(object);\n    }\n\n    this.loadingManager.itemLoaded(`parse_gltf_${name}`);\n  }\n\n  /**\n   * Loads a GLTF (.gltf) scene/geometry from the given URL.\n   * and adds it to the dat.GUI menu.\n   * @param url URL to the GLTF (.gltf) file.\n   * @param name Name of the loaded scene/geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param initiallyVisible Whether the geometry is initially visible or not. Default `true`.\n   * @returns Promise for loading the geometry.\n   */\n  public async loadGLTFGeometry(\n    url: any,\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    initiallyVisible: boolean = true\n  ): Promise {\n    this.loadingManager.addLoadableItem(`gltf_geom_${name}`);\n\n    const allGeometriesUIParameters =\n      await this.graphicsLibrary.loadGLTFGeometry(\n        url,\n        name,\n        menuNodeName,\n        scale,\n        initiallyVisible\n      );\n    for (const { object, menuNodeName } of allGeometriesUIParameters) {\n      this.ui.addGeometry(object, menuNodeName);\n    }\n\n    this.loadingManager.itemLoaded(`gltf_geom_${name}`);\n  }\n\n  /**\n   * Loads geometries from JSON.\n   * @param json JSON or URL to JSON file of the geometry.\n   * @param name Name of the geometry or group of geometries.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not. Default `true`.\n   * @returns Promise for loading the geometry.\n   */\n  public async loadJSONGeometry(\n    json: string | { [key: string]: any },\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true\n  ): Promise {\n    this.loadingManager.addLoadableItem(`json_geom_${name}`);\n\n    const { object } = await this.graphicsLibrary.loadJSONGeometry(\n      json,\n      name,\n      scale,\n      doubleSided,\n      initiallyVisible\n    );\n    this.ui.addGeometry(object, menuNodeName);\n\n    this.loadingManager.itemLoaded(`json_geom_${name}`);\n    this.infoLogger.add(name, 'Loaded JSON geometry');\n  }\n\n  /**\n   * Load JSON geometry from JSRoot.\n   * @param url URL of the JSRoot geometry file.\n   * @param name Name of the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not. Default `true`.\n   */\n  public async loadRootJSONGeometry(\n    url: string,\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true\n  ) {\n    this.loadingManager.addLoadableItem('root_json_geom');\n\n    const object = await httpRequest(url, 'object');\n    await this.loadJSONGeometry(\n      build(object, { dflt_colors: true }).toJSON(),\n      name,\n      menuNodeName,\n      scale,\n      doubleSided,\n      initiallyVisible\n    );\n\n    this.loadingManager.itemLoaded('root_json_geom');\n  }\n\n  /**\n   * Load ROOT geometry from JSRoot.\n   * @param url URL of the JSRoot file.\n   * @param objectName Name of the object inside the \".root\" file.\n   * @param name Name of the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not. Default `true`.\n   */\n  public async loadRootGeometry(\n    url: string,\n    objectName: string,\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true\n  ) {\n    this.loadingManager.addLoadableItem('root_geom');\n    // See https://github.com/root-project/jsroot/blob/19ce116b68701ab45e0a092c673119bf97ede0c2/modules/core.mjs#L241.\n    jsrootSettings.UseStamp = false;\n\n    const file = await openFile(url);\n    const obj = await file.readObject(objectName);\n\n    await this.loadJSONGeometry(\n      build(obj, { dflt_colors: true }).toJSON(),\n      name,\n      menuNodeName,\n      scale,\n      doubleSided,\n      initiallyVisible\n    );\n\n    this.loadingManager.itemLoaded('root_geom');\n  }\n\n  /**\n   * Build Geometry from thr passed parameters, where\n   * @param parameters\n   */\n  public buildGeometryFromParameters(parameters: any): void {\n    this.graphicsLibrary.addGeometryFromParameters(parameters);\n  }\n\n  /**\n   * Zoom all the cameras by a specific zoom factor.\n   * The factor may either be greater (zoom in) or smaller (zoom out) than 1.\n   * @param zoomFactor The factor to zoom by.\n   * @param zoomTime The time it takes for a zoom animation to complete.\n   */\n  public zoomTo(zoomFactor: number, zoomTime: number) {\n    this.graphicsLibrary.zoomTo(zoomFactor, zoomTime);\n  }\n\n  /**\n   * Processes event data and geometry for Loading the scene\n   * from Phoenix file format (.phnx).\n   * @param sceneConfiguration Scene configuration containingevent data and detector geometry.\n   */\n  private loadSceneConfiguration(sceneConfiguration: {\n    eventData: { [key: string]: any };\n    geometries: any[];\n  }) {\n    for (const objectType of Object.keys(sceneConfiguration.eventData)) {\n      this.ui.addEventDataTypeFolder(objectType);\n\n      const collections = sceneConfiguration.eventData[objectType];\n      for (const collection of collections) {\n        this.ui.addCollection(objectType, collection);\n      }\n    }\n\n    for (const geom of sceneConfiguration.geometries) {\n      this.ui.addGeometry(geom, '#ffffff');\n    }\n  }\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  public getCollection(collectionName: string) {\n    return this.configuration.eventDataLoader.getCollection(collectionName);\n  }\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  public getCollections(): string[] {\n    return this.configuration.eventDataLoader.getCollections();\n  }\n\n  /**\n   * Add a callback to onDisplayedEventChange array to call\n   * the callback on changes to the displayed event.\n   * @param callback Callback to be added to the onDisplayedEventChange array.\n   */\n  public listenToDisplayedEventChange(callback: (event) => any) {\n    this.onDisplayedEventChange.push(callback);\n  }\n\n  /**\n   * Add a callback to onEventsChange array to call\n   * the callback on changes to the events.\n   * @param callback Callback to be added to the onEventsChange array.\n   */\n  public listenToLoadedEventsChange(callback: (events) => any) {\n    this.onEventsChange.push(callback);\n  }\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  public getEventMetadata(): any[] {\n    return this.configuration.eventDataLoader.getEventMetadata();\n  }\n\n  /**\n   * Enables calling specified event display methods in console.\n   */\n  private enableEventDisplayConsole() {\n    // Defining an EventDisplay object in window to access methods through console\n    window.EventDisplay = {\n      loadGLTFGeometry: (sceneUrl: string, name: string) => {\n        this.loadGLTFGeometry(sceneUrl, name);\n      },\n      loadOBJGeometry: (\n        filename: string,\n        name: string,\n        colour: any,\n        menuNodeName: string,\n        doubleSided: boolean\n      ) => {\n        this.loadOBJGeometry(filename, name, colour, menuNodeName, doubleSided);\n      },\n      loadJSONGeometry: (\n        json: string | { [key: string]: any },\n        name: string,\n        menuNodeName: string,\n        scale?: number,\n        doubleSided?: boolean,\n        initiallyVisible: boolean = true\n      ) => {\n        this.loadJSONGeometry(\n          json,\n          name,\n          menuNodeName,\n          scale,\n          doubleSided,\n          initiallyVisible\n        );\n      },\n      buildGeometryFromParameters: (parameters: { [key: string]: any }) =>\n        this.buildGeometryFromParameters(parameters),\n      scene: this.getThreeManager().getSceneManager().getScene(),\n    };\n  }\n\n  /**\n   * Sets the renderer to be used to render the event display on the overlayed canvas.\n   * @param overlayCanvas An HTML canvas on which the overlay renderer is to be set.\n   */\n  public setOverlayRenderer(overlayCanvas: HTMLCanvasElement) {\n    this.graphicsLibrary.setOverlayRenderer(overlayCanvas);\n  }\n\n  /**\n   * Initializes the object which will show information of the selected geometry/event data.\n   * @param selectedObject Object to display the data.\n   */\n  public allowSelection(selectedObject: { name: string; attributes: any[] }) {\n    this.graphicsLibrary.setSelectedObjectDisplay(selectedObject);\n  }\n\n  /**\n   * Toggles the ability of selecting geometries/event data by clicking on the screen.\n   * @param enable Value to enable or disable the functionality.\n   */\n  public enableSelecting(enable: boolean) {\n    this.graphicsLibrary.enableSelecting(enable);\n  }\n\n  /**\n   * Fixes the camera position of the overlay view.\n   * @param fixed Whether the overlay view is to be fixed or not.\n   */\n  public fixOverlayView(fixed: boolean) {\n    this.graphicsLibrary.fixOverlayView(fixed);\n  }\n\n  /**\n   * Get the uuid of the currently selected object.\n   * @returns uuid of the currently selected object.\n   */\n  public getActiveObjectId(): ActiveVariable {\n    return this.graphicsLibrary.getActiveObjectId();\n  }\n\n  /**\n   * Move the camera to look at the object with the given uuid\n   * and highlight it.\n   * @param uuid uuid of the object.\n   */\n  public lookAtObject(uuid: string) {\n    this.graphicsLibrary.lookAtObject(uuid);\n    this.graphicsLibrary.highlightObject(uuid);\n  }\n\n  /**\n   * Highlight the object with the given uuid by giving it an outline.\n   * @param uuid uuid of the object.\n   */\n  public highlightObject(uuid: string) {\n    this.graphicsLibrary.highlightObject(uuid);\n  }\n\n  /**\n   * Enable keyboard controls for the event display.\n   */\n  public enableKeyboardControls() {\n    this.ui.enableKeyboardControls();\n    this.graphicsLibrary.enableKeyboardControls();\n  }\n\n  /**\n   * Animate the camera through the event scene.\n   * @param startPos Start position of the translation animation.\n   * @param tweenDuration Duration of each tween in the translation animation.\n   * @param onAnimationEnd Callback when the last animation ends.\n   */\n  public animateThroughEvent(\n    startPos: number[],\n    tweenDuration: number,\n    onAnimationEnd?: () => void\n  ) {\n    this.graphicsLibrary.animateThroughEvent(\n      startPos,\n      tweenDuration,\n      onAnimationEnd\n    );\n  }\n\n  /**\n   * Animate scene by animating camera through the scene and animating event collision.\n   * @param animationPreset Preset for animation including positions to go through and\n   * event collision animation options.\n   * @param onEnd Function to call when the animation ends.\n   */\n  public animatePreset(animationPreset: AnimationPreset, onEnd?: () => void) {\n    this.graphicsLibrary.animatePreset(animationPreset, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateEventWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.graphicsLibrary.animateEventWithCollision(tweenDuration, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data\n   * using clipping planes after particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateClippingWithCollision(\n    tweenDuration: number,\n    onEnd?: () => void\n  ) {\n    this.graphicsLibrary.animateClippingWithCollision(tweenDuration, onEnd);\n  }\n\n  /**\n   * Add label to a 3D object.\n   * @param label Label to add to the event object.\n   * @param collection Collection the event object is a part of.\n   * @param indexInCollection Event object's index in collection.\n   * @param uuid UUID of the three.js object.\n   */\n  public addLabelToObject(\n    label: string,\n    collection: string,\n    indexInCollection: number,\n    uuid: string\n  ) {\n    const labelId = this.configuration.eventDataLoader.addLabelToEventObject(\n      label,\n      collection,\n      indexInCollection\n    );\n\n    // Remove the label if the string is empty\n    if (!label) {\n      this.ui.removeLabel(labelId, true);\n      return;\n    }\n\n    this.ui.addLabel(labelId);\n    this.graphicsLibrary.addLabelToObject(label, uuid, labelId);\n  }\n\n  /**\n   * Reset/remove all labels.\n   */\n  public resetLabels() {\n    // labelsObject[EventDataType][Collection][Index]\n    const labelsObject = this.configuration.eventDataLoader.getLabelsObject();\n    for (const eventDataType in labelsObject) {\n      for (const collection in labelsObject[eventDataType]) {\n        for (const index in labelsObject[eventDataType][collection]) {\n          const labelId = getLabelTitle(eventDataType, collection, index);\n          this.ui.removeLabel(labelId, true);\n\n          delete labelsObject[eventDataType][collection][index];\n        }\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/XRManager.html":{"url":"classes/XRManager.html","title":"class - XRManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  XRManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/xr/xr-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                XR manager for XR related operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraGroup\n                            \n                            \n                                    Protected\n                                currentXRSession\n                            \n                            \n                                    Protected\n                                onSessionEnded\n                            \n                            \n                                    Protected\n                                renderer\n                            \n                            \n                                    Protected\n                                sessionInit\n                            \n                            \n                                    Protected\n                                xrActive\n                            \n                            \n                                    Public\n                                xrCamera\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                endXRSession\n                            \n                            \n                                    Public\n                                getCameraGroup\n                            \n                            \n                                    Public\n                                getXRCamera\n                            \n                            \n                                    Protected\n                                onXRSessionEnded\n                            \n                            \n                                    Protected\n                                    Async\n                                onXRSessionStarted\n                            \n                            \n                                    Public\n                                setXRSession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionType: XRSessionType)\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:38\n                            \n                        \n\n                \n                    \n                            Create the XR manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sessionType\n                                                  \n                                                        \n                                                                        XRSessionType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Type of the session, either AR or VR.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cameraGroup\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Group\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:36\n                        \n                    \n\n            \n                \n                    Group containing the the camera for XR.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        currentXRSession\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:32\n                        \n                    \n\n            \n                \n                    Currently active XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onSessionEnded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:34\n                        \n                    \n\n            \n                \n                    Callback to call when the XR session ends.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:30\n                        \n                    \n\n            \n                \n                    Renderer to set the XR session for.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        sessionInit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:28\n                        \n                    \n\n            \n                \n                    Returns required and optional features when requesting an XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        xrActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:26\n                        \n                    \n\n            \n                \n                    Whether the XR is currently active or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        xrCamera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:38\n                        \n                    \n\n            \n                \n                    The camera used by XR.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        endXRSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    endXRSession()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/xr/xr-manager.ts:99\n                \n            \n\n\n            \n                \n                    End the current XR session.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCameraGroup\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraGroup(camera?: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/xr/xr-manager.ts:109\n                \n            \n\n\n            \n                \n                    Get the group containing the camera for XR.\nXR camera works by adding a Group with Camera to the scene.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Camera which is to be cloned for XR use.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Group\n\n                    \n                    \n                        The camera group used in XR mode.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getXRCamera\n                        \n                    \n                \n            \n            \n                \n                    \n                    getXRCamera()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/xr/xr-manager.ts:135\n                \n            \n\n\n            \n                \n                    Get the camera used by XR.\n\n\n                    \n                    \n                    \n                        Returns :     Camera\n\n                    \n                    \n                        The camera used by XR.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        onXRSessionEnded\n                        \n                    \n                \n            \n            \n                \n                    \n                    onXRSessionEnded()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/xr/xr-manager.ts:88\n                \n            \n\n\n            \n                \n                    Callback when the XR session ends.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        onXRSessionStarted\n                        \n                    \n                \n            \n            \n                \n                    \n                    onXRSessionStarted(session: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/xr/xr-manager.ts:78\n                \n            \n\n\n            \n                \n                    Callback for when the XR session is started.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The XR session.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setXRSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    setXRSession(renderer: WebGLRenderer, onSessionStarted?: () => void, onSessionEnded?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/xr/xr-manager.ts:53\n                \n            \n\n\n            \n                \n                    Set and configure the XR session.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer to set the XR session for.\n\n                                    \n                                \n                                \n                                    onSessionStarted\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the XR session starts.\n\n                                    \n                                \n                                \n                                    onSessionEnded\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the XR session ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArrayCamera,\n  Camera,\n  Group,\n  PerspectiveCamera,\n  Vector3,\n  WebGLRenderer,\n} from 'three';\n\n// NOTE: This was created on 28/06/2021\n// It might become outdated given how WebXR is still a work in progress\n\n// LAST UPDATED ON 29/06/2021\n\n/** Type of the XR session. */\nexport enum XRSessionType {\n  VR = 'VR',\n  AR = 'AR',\n}\n\n/**\n * XR manager for XR related operations.\n */\nexport class XRManager {\n  /** Whether the XR is currently active or not. */\n  protected xrActive: boolean = false;\n  /** Returns required and optional features when requesting an XR session. */\n  protected sessionInit: () => { [key: string]: any };\n  /** Renderer to set the XR session for. */\n  protected renderer: WebGLRenderer;\n  /** Currently active XR session. */\n  protected currentXRSession: any = null;\n  /** Callback to call when the XR session ends. */\n  protected onSessionEnded: () => void;\n  /** Group containing the the camera for XR. */\n  public cameraGroup: Group;\n  /** The camera used by XR. */\n  public xrCamera: Camera;\n\n  /**\n   * Create the XR manager.\n   * @param sessionType Type of the session, either AR or VR.\n   * @param sessionInit Other options for the session like optional features.\n   */\n  constructor(private sessionType: XRSessionType) {}\n\n  /**\n   * Set and configure the XR session.\n   * @param renderer Renderer to set the XR session for.\n   * @param onSessionStarted Callback to call when the XR session starts.\n   * @param onSessionEnded Callback to call when the XR session ends.\n   */\n  public setXRSession(\n    renderer: WebGLRenderer,\n    onSessionStarted?: () => void,\n    onSessionEnded?: () => void\n  ) {\n    this.renderer = renderer;\n    this.onSessionEnded = onSessionEnded;\n    const webXR = (navigator as any)?.xr;\n    const xrType = this.sessionType === XRSessionType.VR ? 'vr' : 'ar';\n\n    webXR\n      ?.requestSession(`immersive-${xrType}`, this.sessionInit?.())\n      .then((session: any) => {\n        this.onXRSessionStarted.bind(this)(session);\n        onSessionStarted?.();\n      })\n      .catch((error: any) => {\n        console.error(`${xrType.toUpperCase()} Error:`, error);\n      });\n  }\n\n  /**\n   * Callback for when the XR session is started.\n   * @param session The XR session.\n   */\n  protected async onXRSessionStarted(session: any) {\n    this.xrActive = true;\n    session.addEventListener('end', this.onXRSessionEnded.bind(this));\n    await this.renderer.xr.setSession(session);\n    this.currentXRSession = session;\n  }\n\n  /**\n   * Callback when the XR session ends.\n   */\n  protected onXRSessionEnded() {\n    this.xrActive = false;\n    this.currentXRSession.removeEventListener('end', this.onXRSessionEnded);\n    this.currentXRSession = null;\n    this.cameraGroup = undefined;\n    this.onSessionEnded?.();\n  }\n\n  /**\n   * End the current XR session.\n   */\n  public endXRSession() {\n    this.currentXRSession?.end();\n  }\n\n  /**\n   * Get the group containing the camera for XR.\n   * XR camera works by adding a Group with Camera to the scene.\n   * @param camera Camera which is to be cloned for XR use.\n   * @returns The camera group used in XR mode.\n   */\n  public getCameraGroup(camera?: Camera): Group {\n    // Set up the camera position in the XR - Adding a group with camera does it\n    if (!this.cameraGroup) {\n      this.cameraGroup = new Group();\n    }\n    if (camera && this.xrActive) {\n      this.xrCamera = this.renderer.xr\n        .getCamera()\n        .copy(new ArrayCamera([camera.clone() as PerspectiveCamera]));\n      this.xrCamera.name = 'XR_CAMERA';\n\n      const cameraPosition =\n        this.sessionType === XRSessionType.VR\n          ? this.xrCamera.position\n          : new Vector3(0, 0, 0.1);\n      this.cameraGroup.position.copy(cameraPosition);\n      this.cameraGroup.add(this.xrCamera);\n    }\n\n    return this.cameraGroup;\n  }\n\n  /**\n   * Get the camera used by XR.\n   * @returns The camera used by XR.\n   */\n  public getXRCamera() {\n    return this.xrCamera;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file.\nSee Conventional Commits for commit guidelines.\n2.11.2 (2022-10-03)\nReverts\n\nRevert \"Simple angular 14 fix\" (f40beac)\nRevert \"Improve scripts after removing phoenix-event-display from phoenix-ng 'paths'\" (24ecd77)\n\n2.11.1 (2022-09-29)\nNote: Version bump only for package phoenix-event-display\n2.11.0 (2022-09-13)\nFeatures\n\napp: add e2e tests for phoenix app (69544e6)\nevent-display: add root geometry loading to loading manager (6c92e33)\nevent-display: load root geometry in io options correctly (ff77aaa)\nevent-display: remove loadJSRootScripts function from script loader (e152933)\nevent-display: update jsroot usage in JSRootEventLoader (4791f53)\nevent-display: use full path for object names to make them unique (3d1f91c)\nevent-display: use jsroot 7 to load root json geometry (5518a3e)\nevent-display: use url inside of objects for loading jsroot geometries (a54d302)\n\n2.10.0 (2022-07-21)\nBug Fixes\n\nevent-display: fixed handling of event properties (6ace2f6)\n\n2.9.0 (2022-06-17)\nBug Fixes\n\nevent-display: fix clipping angle not being applied from menu config (62bf178)\nevent-display: fix geometry not being loaded correctly in menu (7e0870b)\nevent-display: fix opacity not being set for LHCb geometry (65e657b)\n\nFeatures\n\napp: add component to periodically cycle through events (05ae1d6)\nupdate all packages (9276ef9)\napp: make sure all volumes are transparent in LHCb (7e36462)\n\n2.8.0 (2022-05-16)\nNote: Version bump only for package phoenix-event-display\n2.7.0 (2022-04-05)\nFeatures\n\napp: add object clipping for upper and lower geometry (1788560)\napp: add start clipping angle and opening angle for object clipping (9bc48e0)\napp: add start clipping angle and opening angle for object clipping (12b1754)\napp: add start clipping angle and opening angle for object clipping (4c5fac9)\napp: add start clipping angle and opening angle for object clipping (a8336ae)\napp: add start clipping angle and opening angle for object clipping (3255a65)\nevent-display: add 'start' clipping angle as well as opening angle (d2c02d5)\nevent-display: add docs to phoenix ui implementations (0c48b27)\nevent-display: add function to get event data type folder of each menu (c91aa0e)\nevent-display: add interface for Phoenix UI (aaed8f5)\nevent-display: implement phoenix-ui interface for phoenix menu (d4866ea)\nevent-display: implement PhoenixUI interface for dat.GUI menu (a4e8aaa)\nevent-display: update calls to ui-manager (473a39c)\nevent-display: update phoenix loader UI manager for PhoenixUI interface (f2376cc)\nevent-display: use generic menus in ui-manager (7a42b65)\n\n2.6.0 (2022-02-28)\nBug Fixes\n\napp: fix types in templates (545c956)\napp: use workaround for phoenix menu config types in templates (9d109e5)\n\nFeatures\n\nupdate packages (f2ed0a3)\n\n2.5.2 (2022-01-15)\nNote: Version bump only for package phoenix-event-display\n2.5.0 (2021-12-20)\nBug Fixes\n\nevent-display: fix jets disappearing on scaling to 0 (14cdc8f)\n\nFeatures\n\nupdate packages (26444f1)\nevent-display: externalize three.js dependency in webpack bundle (6a7e82f)\nevent-display: improve JiveXML loader (34a783c), closes #364\nevent-display: simplify phoenix menu node types (c60b3c1)\n\n2.4.0 (2021-10-28)\nBug Fixes\n\nevent-display: handle AR and VR permission errors (dfbc6a2)\nevent-display: update three.js imports (4e41f72)\nevent-display: use proper error handling for local storage (55cad7c)\n\nFeatures\n\nupdate all packages (c0af497)\nevent-display: remove labels on event load (75f829a)\n\n2.3.2 (2021-09-28)\nBug Fixes\n\nevent-display: remove XRSessionInit type from xr-manager (608f529)\n\n2.3.1 (2021-09-28)\nBug Fixes\n\nevent-display: add @types/three package as a dev dependency (10244f7)\n\nFeatures\n\nevent-display: function to get url options from url options manager (0ba5097)\n\n2.3.0 (2021-09-20)\nBug Fixes\n\nevent-display: do not apply Phoenix menu node toggle if undefined in config (bf98a24)\nevent-display: fix cuts not displaying for tracks in collections info (14d5f3a)\nevent-display: fix error in adding labels for electrons (98c7055)\nevent-display: fix opacity for tracks (094261c)\n\nFeatures\n\nUpgrade all packages (4698ea4)\n\n2.2.0 (2021-08-03)\nBug Fixes\n\nevent-display: fix AR not working in playground (7f35fdb)\nevent-display: fix bug in jive xml loader (39241a4)\nevent-display: fix collection color not working with load state (4603dbc)\nevent-display: fix load state throwing error (16ea0df)\nevent-display: fix tests (7e9c733)\nevent-display: increase max cut value for jets (9f4cf7c), closes #336\nevent-display: use coneR, if available, to determine jet width (d4b62c2)\nFix linting issues and update code (dc7d74a)\n\nFeatures\n\nevent-display: add option to scale vertices (08c8e00)\nevent-display: improve handling of scale option and add it for vertices (34d9b2c)\nupdate all packages including Angular (9a88331)\nupdate packages except Angular (26eff0e)\nupgrade all packages (36486b8)\napp: option to start AR with or without DOM overlay (9a6c243)\nevent-display: JiveXML, load coneR (set default if missing). (867d28a)\nevent-display: make background transparent in AR mode (46b8aee)\nevent-display: use dom overlay for AR (c897ab3)\nevent-display: use DOM overlay for AR (a5eaa34)\n\n2.1.0 (2021-06-28)\nBug Fixes\n\napp: clean packages not used in phoenix-ng (037af62)\nevent-display: bug when handling out-of-bounds theta (717304e)\nevent-display: cuts to match pT values (62ae417)\nevent-display: fix pt scale of compound objects for JiveXML (a821e42)\nevent-display: handle track pT as p (scale correctly) (7b839e3)\nevent-display: simplify handling of compound objs needing a track extrapolation (3daabc5)\nevent-display: since can scale jets, no longer limit length (bb41683)\n\nFeatures\n\nevent-display: add AR manager (3017ca9)\nevent-display: add docs to AR manager (5334996)\nevent-display: add scene to window EventDisplay object (07d8633)\nevent-display: combine repeating code for VR and AR into XR (50fc5f7)\nevent-display: create a common xr-manager (2700aaf)\nevent-display: extend ARManager from XRManager (ae76d4a)\nevent-display: extend VRManager from XRManager (15dd07c)\nevent-display: handle camera position differently for AR (5894cac)\nevent-display: refactor to make general getCompound from getMuon (dfe8e8d)\nevent-display: setup AR with event display (8e7396f)\nevent-display: use new extrapolationLimit of RKHelper and better debug output (14e4cbb)\nevent-display: use workaround to manage scale in AR (a5481e1)\nevent-display: working AR setup in event display (fdd492a)\n\n2.0.0 (2021-06-08)\nBug Fixes\n\nevent-display: add energy cut, refactor (000ab78)\nevent-display: attempt to improve robustness of tracks (689da29)\nevent-display: better debugging info and prettier (df9ce07)\nevent-display: fix #289 cluster rendering (1a01248)\nevent-display: fix collision animation (3e5d80d)\nevent-display: fix eta calculation for JiveXML (6dbd797)\nevent-display: fix phoenix menu node types (1af6ae2)\nevent-display: fix too many params for hits (8b994a7)\nevent-display: fixes and improvements for track import from JiveXML (c92d65f)\nevent-display: persist cuts when collection is toggled (1dd0431)\nevent-display: properly display the PlanarCalorimeters (f41920b)\nevent-display: random colors for collections and fix color by vertex (303187a)\nevent-display: use line animation for line hit (df425ee)\nfix misc errors and improve styles (124a272)\nevent-display: rk-helper should use CoordinateHelper (6085f50)\n\nFeatures\n\napp: add embed in sharable link constructor (8a0c0b1)\napp: add embed menu with a URL option for embed (56c6eff)\napp: add load progress based on number of loaded items (20ef288)\napp: improve background colors (2c97f5c)\napp: setup for preset scene animations (6e919e1)\nevent-display: add a sample animation preset (e07725a)\nevent-display: add color by vertex options (d2e0547)\nevent-display: add color options to tracks collections (90aea3c)\nevent-display: add docs for color options class (6cd5d53)\nevent-display: add embed option to URL (cb68283)\nevent-display: add function to animate scene (a411631)\nevent-display: add momentum color options UI (f1d2cef)\nevent-display: add types for Phoenix menu configs (68f3d45)\nevent-display: code improvement for momentum sliders (1a17e99)\nevent-display: color options for event data objects (9908cc9)\nevent-display: complete types for phoenix menu node (cc04d5a)\nevent-display: divide collection config options into child nodes (2e52c22)\nevent-display: highly optimize and generalize color by options (595d9e5)\nevent-display: implement color by momentum (9222e04)\nevent-display: implement embed menu (872f708)\nevent-display: improve preset animation (2371f75)\nupdate all packages (7d2eb64)\nevent-display: create coloring manager and color tracks by properties (c446567)\nevent-display: improve color manager code (3839578)\nevent-display: only show selected color by options (3041166)\nevent-display: type changes for phoenix menu (9a79692)\nevent-display: use child node for collection's color options (8559830)\nevent-display: use class for color options in UI (4acca1a)\nevent-dosplay: improve processing of PlanarCaloCells in Phoenix loader (5a8fe9f)\n\n1.9.0 (2021-05-16)\nBug Fixes\n\nevent-display: add energy cut, refactor (000ab78)\nevent-display: attempt to improve robustness of tracks (689da29)\nevent-display: better debugging info and prettier (df9ce07)\nevent-display: fix #289 cluster rendering (1a01248)\nevent-display: fix eta calculation for JiveXML (6dbd797)\nevent-display: fix phoenix menu node types (1af6ae2)\nevent-display: fixes and improvements for track import from JiveXML (c92d65f)\nevent-display: properly display the PlanarCalorimeters (f41920b)\nevent-display: rk-helper should use CoordinateHelper (6085f50)\n\nFeatures\n\napp: add embed in sharable link constructor (8a0c0b1)\napp: add embed menu with a URL option for embed (56c6eff)\napp: add load progress based on number of loaded items (20ef288)\nevent-display: add color by vertex options (d2e0547)\nevent-display: add color options to tracks collections (90aea3c)\nevent-display: add docs for color options class (6cd5d53)\nevent-display: add embed option to URL (cb68283)\nevent-display: add momentum color options UI (f1d2cef)\nevent-display: add types for Phoenix menu configs (68f3d45)\nevent-display: code improvement for momentum sliders (1a17e99)\nevent-display: color options for event data objects (9908cc9)\nevent-display: complete types for phoenix menu node (cc04d5a)\nevent-display: create coloring manager and color tracks by properties (c446567)\nevent-display: divide collection config options into child nodes (2e52c22)\nevent-display: highly optimize and generalize color by options (595d9e5)\nevent-display: implement color by momentum (9222e04)\nevent-display: implement embed menu (872f708)\nevent-display: improve color manager code (3839578)\nevent-display: only show selected color by options (3041166)\nevent-display: type changes for phoenix menu (9a79692)\nevent-display: use child node for collection's color options (8559830)\nevent-display: use class for color options in UI (4acca1a)\nevent-dosplay: improve processing of PlanarCaloCells in Phoenix loader (5a8fe9f)\n\n1.8.0 (2021-05-01)\nBug Fixes\n\nevent-display: better debugging info and prettier (df9ce07)\nevent-display: fix #289 cluster rendering (1a01248)\nevent-display: fixes and improvements for track import from JiveXML (c92d65f)\nevent-display: rk-helper should use CoordinateHelper (6085f50)\n\nFeatures\n\napp: add embed in sharable link constructor (8a0c0b1)\napp: add embed menu with a URL option for embed (56c6eff)\napp: add load progress based on number of loaded items (20ef288)\nevent-display: add color options to tracks collections (90aea3c)\nevent-display: add docs for color options class (6cd5d53)\nevent-display: add embed option to URL (cb68283)\nevent-display: add momentum color options UI (f1d2cef)\nevent-display: code improvement for momentum sliders (1a17e99)\nevent-display: color options for event data objects (9908cc9)\nevent-display: create coloring manager and color tracks by properties (c446567)\nevent-display: divide collection config options into child nodes (2e52c22)\nevent-display: highly optimize and generalize color by options (595d9e5)\nevent-display: implement color by momentum (9222e04)\nevent-display: implement embed menu (872f708)\nevent-display: use child node for collection's color options (8559830)\nevent-display: use class for color options in UI (4acca1a)\n\n1.7.0 (2021-04-21)\nBug Fixes\n\nevent-display: attempt to improve the output of the track extension by removing close hits (5bdc562)\nevent-display: fix drawing of hits (db3ca8b)\nevent-display: handle older json hit format again (edcd567)\n\n1.6.0 (2021-04-18)\nBug Fixes\n\napp: add sphericalToCartesian method (bbea6b0)\nevent-display: add back in geometrical limits for clusters (0b95e5b)\nevent-display: add eta and phi cuts for tracks (f8a0080)\nevent-display: add missing docs (c9781e5)\nevent-display: add missing documentation (236bdf4)\nevent-display: calocluster eta position was wrong. (66cbbc0)\nevent-display: cleanup JixeXML loader (6a834e8)\nevent-display: prettier fixes (7528ee0)\nevent-display: run prettier (again) (f279898)\nevent-display: use BufferGeometry for CMS objects with new three.js update (b8e88b8)\n\nFeatures\n\napp: bind clipping state with UI menu (40bbba0)\napp: complete dialog for share link and embed (50c2584)\napp: setup link share form (b10bb7a)\nevent-display: ability to remove geometry in Phoenix menu (7d90d72)\nevent-display: ability to scale CaloClusters (ff666e2)\nevent-display: add ability to scale clusters in just one direction (5a562ab), closes #257\nevent-display: add coordinate helper (57e438f)\nevent-display: add guidelines and simplify some coordinate transformations (56f94f0)\nevent-display: Add missing energy (6ef17d0)\nevent-display: add opacity and wireframe for CaloClusters (85d4a14)\nevent-display: add support for HitLines (455f536)\nevent-display: add types for dat.GUI (7632a18)\nevent-display: create an active observable variable (854e543)\nevent-display: improve grid lines (ca3cc2f)\nevent-display: improve handling of UI menus in UI manager (b7a324a)\nevent-display: introduce new URL options and improve handling them (f7cd6b4)\nevent-display: JiveXML : add support for more hit types (bbcdf0c)\nevent-display: keep state of event data folder on event switch (b52282f)\nevent-display: make Phoenix available in browser without a namespace (5389282)\nevent-display: move opacity and wireframing to collection level (6486982)\nevent-display: options for CaloClusters (68cd7ad)\nevent-display: Remove LineHits and use hits to extend tracks (30b5160)\nevent-display: restructure phoenix-event-display (2e16371)\nevent-display: separate dat.GUI UI menu (29093a2)\nevent-display: separate Phoenix menu UI from UI manager (5743adc)\nevent-display: split dat.GUI menu options (45a0123)\nevent-display: start splitting UI manager (56ff275)\nevent-display: use run and event number and file name for config json (03a1de4)\nupgrade all packages except three.js (8e2eff4)\nupgrade three.js except for CMSObjects (0b2dd8a)\n\n1.5.0 (2021-03-24)\nBug Fixes\n\nevent-display: catch VR request session error (d2874b8)\nevent-display: fix jsroot loading root file (8cbcaa5)\nevent-display: handle tracks with no positions (3b1991c)\nevent-display: improve renderer init (a8f8353)\nevent-display: remove optimize controls function (266af04)\nevent-display: remove redundant import (359d353)\nevent-display: use per physics object color and not collection color (ac0c4f1)\nremove JSROOT source files from repo (7bcd7ba)\n\nFeatures\n\napp: ability to import ig archive in CMS (9540af5)\napp: Add more realistic geometry for ATLAS (d207bad)\nevent-display: allow resize and improve tests and drop improving CPU usage (a474af2)\nevent-display: resize canvas with window resize (5ea04f1)\nevent-display: update to use CDN for JSROOT (2fa310f)\nevent-display: use latest version of JSROOT (fbd584e)\n\n1.4.0 (2021-02-16)\nBug Fixes\n\nevent-display: disable keyboard controls when typing (4f80bd6)\nevent-display: improve object selection from uuid and label input (3475836)\nevent-display: persist toggle state of phoenix menu node children (e96136b)\nevent-display: remove rollup config and fix globalThis usage (e6f69a0)\n\nFeatures\n\nevent-display: ability to add 3D label text (c9d4880)\nevent-display: add labels configuration to dat.GUI menu (d677089)\nevent-display: add labels to UI configuration (d90e3a6)\nevent-display: add size and color options for labels (3ce675f)\nevent-display: better handling of labels object (e10a68d)\nevent-display: complete setup with webpack for browser (3f6367f)\nevent-display: complete support to save and load labels (2219a3e)\nevent-display: create a url options manager for url options (fe0b2e6)\nevent-display: create generic function for getting object position (8d7b160)\nevent-display: delete label on empty value and change add label icon (3756330)\nevent-display: make label always look at camera (0837334)\nevent-display: set up add label to object functions (db261a6)\nevent-display: setup webpack for browser bundle (dc05ed9)\nevent-display: support to hide widgets through URL (cb2ec40)\nevent-display: use optional chaining for hide widgets url option (c991e54)\nevent-display: Use types for phoenix menu configuration (79e6d7c)\nevent-display: working labels object (60269f7)\nUpdate Angular and all packages to latest (f4c2e31)\n\n1.3.0 (2021-01-16)\nBug Fixes\n\nevent-display: assign the right name to geometry (b7e8da0)\nevent-display: code improvements (f94c0e4)\nevent-display: fix parsing of GLTF geometry (dc5d489)\nevent-display: improve code for hiding tube tracks (e9f1bc9)\nevent-display: minor script fix (5139c6e)\nevent-display: remove color from obj file userdata (8ba94e7)\nevent-display: revert jasmine spec files (dc140dd)\nevent-display: try fixing CMSLoader tests (789da8b)\n\nFeatures\n\nevent-display: display size on selection (6943f79)\nevent-display: hide tube tracks on zoom (7d606b2)\n\n1.2.0 (2020-12-06)\nBug Fixes\n\nevent-display: add Edward's controller set up (a6a1c19)\nevent-display: changes to animation loop for VR (37df19f)\nevent-display: finally fix VR completely (4764196)\nevent-display: fix applying multiple cuts at the same time (8f3e8e1)\nevent-display: fix applying state for range slider (c36a222)\nevent-display: fix loading and add default view to experiments (ab8feb4)\nevent-display: initialize cuts with correct values (e297c98)\nevent-display: make it possible to flat shade (dcf6cec)\nevent-display: optimal animation loop set up (da3ead5)\nevent-display: optimal render for effects manager (1975d70)\nevent-display: reset clipping on init (029d526)\nevent-display: stop animation loop on home (c39ecd3)\nevent-display: update configuration in tests (18f8db2)\n\nFeatures\n\napp: add toggle for screenshot mode (22a1ec8)\napp: make loader generic (ff10477)\napp: set up performance mode with selection (947f6bf)\napp: use event display loader in Angular component (25b2a9d)\nevent-display: ability to add geometry to a menu folder (30b0383)\nevent-display: ability to initialize event display without init (69d3f75)\nevent-display: add ability to add parametrised geometry (04dc545)\nevent-display: add and set up loading manager (5f0f942)\nevent-display: handle loading better (9474565)\nevent-display: make loading functions return Promise for async await (4262a1b)\nevent-display: performance mode and antialias support (d3920c4)\nevent-display: support for toggling antialiasing (48130b2)\nevent-display: use object to simplify configuration (4b10452)\n\n1.1.0 (2020-11-07)\nBug Fixes\n\napp: cut filter failed if value return was zero (0a26fea)\napp: cut should be pT, not mom (73b7c27)\napp: fix attribute pipe (0980379)\napp: fix tests (f87c587)\napp: pT should always be positive (3918159)\nevent-display: add optional chaining to CMS event info (fixes tests) (5283e9a)\nevent-display: fix geometry too big in overlay view (c7a35db)\nevent-display: fix URL event not working with hash routes (9eb21f5)\nevent-display: Formatted correctly (b46c49f)\nevent-display: use optional chaining in CMS loader (cfb1b6a)\nVR: Fix bugged scene in VR mode (9efd9ca)\n\nFeatures\n\napp: Option to load config from URL in ATLAS (1906976)\napp: phoenix-ui-components library (17909eb)\napp: yet another MAJOR refactoring (1261358)\nevent-display: add defaultView to configuration (612205c)\nevent-display: implicitly load event data from URL (9e3dc20)\nevent-display: state manager for managing event display state for save and load (7d1ca22)\n\n1.0.2 (2020-10-05)\n\nComplete deployment set up (399ac77)\n\n1.0.1 (2020-10-05)\nNote: Version bump only for package phoenix-event-display\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/event-display.ts\n            \n            class\n            EventDisplay\n            \n                100 %\n                (57/57)\n            \n        \n        \n            \n                \n                src/event-display.ts\n            \n            interface\n            Window\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/helpers/active-variable.ts\n            \n            class\n            ActiveVariable\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/helpers/browser-storage.ts\n            \n            variable\n            getFromLocalStorage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/browser-storage.ts\n            \n            variable\n            setToLocalStorage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/constants.ts\n            \n            variable\n            EVENT_DATA_TYPE_COLORS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/coordinate-helper.ts\n            \n            class\n            CoordinateHelper\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/helpers/file.ts\n            \n            variable\n            loadFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/file.ts\n            \n            variable\n            saveFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/info-logger.ts\n            \n            class\n            InfoLogger\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/helpers/labels.ts\n            \n            variable\n            getLabelTitle\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/pretty-symbols.ts\n            \n            class\n            PrettySymbols\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/helpers/rk-helper.ts\n            \n            class\n            RKHelper\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            Field\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            RungeKutta\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            State\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/lib/models/cut.model.ts\n            \n            class\n            Cut\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/lib/models/preset-view.model.ts\n            \n            class\n            PresetView\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/lib/types/configuration.ts\n            \n            interface\n            Configuration\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/loaders/cms-loader.ts\n            \n            class\n            CMSLoader\n            \n                100 %\n                (33/33)\n            \n        \n        \n            \n                \n                src/loaders/event-data-loader.ts\n            \n            interface\n            EventDataLoader\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/loaders/jivexml-loader.ts\n            \n            class\n            JiveXMLLoader\n            \n                100 %\n                (43/43)\n            \n        \n        \n            \n                \n                src/loaders/jsroot-event-loader.ts\n            \n            class\n            JSRootEventLoader\n            \n                100 %\n                (28/28)\n            \n        \n        \n            \n                \n                src/loaders/objects/cms-objects.ts\n            \n            class\n            CMSObjects\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/loaders/objects/phoenix-objects.ts\n            \n            class\n            PhoenixObjects\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                src/loaders/objects/tracks.ts\n            \n            class\n            TracksMaterial\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/loaders/objects/tracks.ts\n            \n            class\n            TracksMesh\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/loaders/phoenix-loader.ts\n            \n            class\n            PhoenixLoader\n            \n                100 %\n                (21/21)\n            \n        \n        \n            \n                \n                src/loaders/script-loader.ts\n            \n            class\n            ScriptLoader\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/loaders/trackml-loader.ts\n            \n            class\n            TrackmlLoader\n            \n                100 %\n                (28/28)\n            \n        \n        \n            \n                \n                src/managers/loading-manager.ts\n            \n            class\n            LoadingManager\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/managers/state-manager.ts\n            \n            class\n            StateManager\n            \n                100 %\n                (21/21)\n            \n        \n        \n            \n                \n                src/managers/three-manager/animations-manager.ts\n            \n            class\n            AnimationsManager\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/managers/three-manager/animations-manager.ts\n            \n            interface\n            AnimationPreset\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/managers/three-manager/color-manager.ts\n            \n            class\n            ColorManager\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/managers/three-manager/controls-manager.ts\n            \n            class\n            ControlsManager\n            \n                100 %\n                (36/36)\n            \n        \n        \n            \n                \n                src/managers/three-manager/effects-manager.ts\n            \n            class\n            EffectsManager\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/managers/three-manager/export-manager.ts\n            \n            class\n            ExportManager\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/managers/three-manager/import-manager.ts\n            \n            class\n            ImportManager\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                src/managers/three-manager/index.ts\n            \n            class\n            ThreeManager\n            \n                100 %\n                (66/66)\n            \n        \n        \n            \n                \n                src/managers/three-manager/renderer-manager.ts\n            \n            class\n            RendererManager\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/managers/three-manager/scene-manager.ts\n            \n            class\n            SceneManager\n            \n                100 %\n                (42/42)\n            \n        \n        \n            \n                \n                src/managers/three-manager/selection-manager.ts\n            \n            class\n            SelectionManager\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/managers/three-manager/xr/ar-manager.ts\n            \n            class\n            ARManager\n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                src/managers/three-manager/xr/vr-manager.ts\n            \n            class\n            VRManager\n            \n                100 %\n                (24/24)\n            \n        \n        \n            \n                \n                src/managers/three-manager/xr/xr-manager.ts\n            \n            class\n            XRManager\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/color-options.ts\n            \n            class\n            ColorOptions\n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/dat-gui-ui.ts\n            \n            class\n            DatGUIMenuUI\n            \n                100 %\n                (22/22)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/index.ts\n            \n            class\n            UIManager\n            \n                100 %\n                (39/39)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts\n            \n            class\n            PhoenixMenuNode\n            \n                100 %\n                (24/24)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts\n            \n            class\n            PhoenixMenuUI\n            \n                100 %\n                (18/18)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/phoenix-ui.ts\n            \n            interface\n            PhoenixUI\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/managers/url-options-manager.ts\n            \n            class\n            URLOptionsManager\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/managers/url-options-manager.ts\n            \n            variable\n            phoenixURLOptions\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @tweenjs/tween.js : ^17.4.0\n        \n            dat.gui : ^0.7.9\n        \n            jsroot : github:9inpachi/jsroot#7.2.0-types\n        \n            jszip : ^3.10.1\n        \n            stats-js : ^1.0.1\n        \n            three : ^0.144.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ClippingSetting   (src/.../preset-view.model.ts)\n                        \n                        \n                            ColorByOptionKeys   (src/.../color-options.ts)\n                        \n                        \n                            XRSessionType   (src/.../xr-manager.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/models/preset-view.model.ts\n    \n        \n            \n                \n                    \n                        \n                        ClippingSetting\n                    \n                \n                    \n                        \n                            Preset view settings for clipping\n\n                        \n                    \n                        \n                            \n                                 NotForced\n                            \n                        \n                        \n                            \n                                 On\n                            \n                        \n                        \n                            \n                                 Off\n                            \n                        \n            \n        \n\n    src/managers/ui-manager/color-options.ts\n    \n        \n            \n                \n                    \n                        \n                        ColorByOptionKeys\n                    \n                \n                    \n                        \n                            Keys for options available for coloring event data by.\n\n                        \n                    \n                        \n                            \n                                 CHARGE\n                            \n                        \n                        \n                            \n                                Value : charge\n                            \n                        \n                        \n                            \n                                 MOM\n                            \n                        \n                        \n                            \n                                Value : mom\n                            \n                        \n                        \n                            \n                                 VERTEX\n                            \n                        \n                        \n                            \n                                Value : vertex\n                            \n                        \n            \n        \n\n    src/managers/three-manager/xr/xr-manager.ts\n    \n        \n            \n                \n                    \n                        \n                        XRSessionType\n                    \n                \n                    \n                        \n                            Type of the XR session.\n\n                        \n                    \n                        \n                            \n                                 VR\n                            \n                        \n                        \n                            \n                                Value : VR\n                            \n                        \n                        \n                            \n                                 AR\n                            \n                        \n                        \n                            \n                                Value : AR\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nPhoenix event display\n\n\n\nA highly modular and API driven experiment independent event display that uses three.js for processing and presenting detector geometry and event data.\nTo use in your application, install the package.\nnpm install phoenix-event-display\n# or\nyarn add phoenix-event-displayUsage\nAs a module\nTo create a simple event display.\n// Import required classes\nimport { EventDisplay, PhoenixLoader } from 'phoenix-event-display';\n\n// Create the event display\nconst eventDisplay = new EventDisplay();\n\n// Define the configuration\nconst configuration = {\n  elementId: '',\n  eventDataLoader: new PhoenixLoader(), // or some other event data loader\n  // ... other configuration options\n};\n\n// Initialize the event display with the configuration\neventDisplay.init(configuration);\n\n// Load and parse event data in Phoenix format and display it\nfetch('path/to/event-data.json')\n  .then((res) => res.json())\n  .then((res) => {\n    eventDisplay.parsePhoenixEvents(res);\n  });\n\n// Load detector geometry\neventDisplay.loadOBJGeometry(\n  'path/to/geometry.obj',\n  'Detector OBJ',\n  0x8c8c8c /* color */\n);As a standalone bundle\nPhoenix can be bundled and used directly in the HTML as a script along with three.js. You can either use the CDN or build from source.\nTo build Phoenix as a bundle.\nyarn build:bundleThis will generate a file phoenix.min.js in the ./dist/bundle directory which can be included in your HTML code.\nWithout building, you can include the bundle directly from CDN.\n\n  \n    ...\n  \n\n  \n    \n\n    \n    \n\n    \n      // Create the event display\n      const eventDisplay = new EventDisplay();\n\n      // Define the configuration\n      const configuration = {\n        elementId: 'eventDisplay',\n        eventDataLoader: new PhoenixLoader(), // or some other event data loader\n        // ... other configuration options\n      };\n\n      // Initialize the event display with the configuration\n      eventDisplay.init(configuration);\n\n      // ... other event display functions\n    \n  \nExamples\n\nUsage in Angular (as a service)\nUsage in React\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    42 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 2.11.2\n        \n            Description : API for web-based experiment independent event display.\n        \n            Homepage : http://github.com/HSF/phoenix/tree/master/packages/phoenix-event-display#readme\n        \n            License : Apache-2.0\n        \n            Repository : git://github.com/HSF/phoenix.git\n        \n            Author : Phoenix contributors (https://github.com/HSF/phoenix/graphs/contributors)\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CallbackFunction   (src/.../active-variable.ts)\n                        \n                        \n                            ColorByOption   (src/.../color-options.ts)\n                        \n                        \n                            ConfigButton   (src/.../config-types.ts)\n                        \n                        \n                            ConfigCheckbox   (src/.../config-types.ts)\n                        \n                        \n                            ConfigColor   (src/.../config-types.ts)\n                        \n                        \n                            ConfigLabel   (src/.../config-types.ts)\n                        \n                        \n                            ConfigRangeSlider   (src/.../config-types.ts)\n                        \n                        \n                            ConfigSelect   (src/.../config-types.ts)\n                        \n                        \n                            ConfigSlider   (src/.../config-types.ts)\n                        \n                        \n                            GeometryUIParameters   (src/.../geometry-ui-parameters.ts)\n                        \n                        \n                            PhoenixMenuConfigs   (src/.../config-types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/helpers/active-variable.ts\n    \n    \n        \n            \n                \n                    \n                    CallbackFunction\n                \n            \n            \n                \n                    Callback function type.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/managers/ui-manager/color-options.ts\n    \n    \n        \n            \n                \n                    \n                    ColorByOption\n                \n            \n            \n                \n                    Type for a single color by option.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/managers/ui-manager/phoenix-menu/config-types.ts\n    \n    \n        \n            \n                \n                    \n                    ConfigButton\n                \n            \n            \n                \n                    Type for Phoenix menu node \"button\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigCheckbox\n                \n            \n            \n                \n                    Type for Phoenix menu node \"checkbox\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigColor\n                \n            \n            \n                \n                    Type for Phoenix menu node \"color\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigLabel\n                \n            \n            \n                \n                    Type for Phoenix menu node \"label\" config.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigRangeSlider\n                \n            \n            \n                \n                    Type for Phoenix menu node \"rangeSlider\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigSelect\n                \n            \n            \n                \n                    Type for Phoenix menu node \"select\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigSlider\n                \n            \n            \n                \n                    Type for Phoenix menu node \"slider\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PhoenixMenuConfigs\n                \n            \n            \n                \n                    Type for all Phoenix menu mode configuration options.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/lib/types/geometry-ui-parameters.ts\n    \n    \n        \n            \n                \n                    \n                    GeometryUIParameters\n                \n            \n            \n                \n                    Parameters used when adding geometry to UI menus.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EVENT_DATA_TYPE_COLORS   (src/.../constants.ts)\n                        \n                        \n                            getFromLocalStorage   (src/.../browser-storage.ts)\n                        \n                        \n                            getLabelTitle   (src/.../labels.ts)\n                        \n                        \n                            loadFile   (src/.../file.ts)\n                        \n                        \n                            phoenixURLOptions   (src/.../url-options-manager.ts)\n                        \n                        \n                            saveFile   (src/.../file.ts)\n                        \n                        \n                            setToLocalStorage   (src/.../browser-storage.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/helpers/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EVENT_DATA_TYPE_COLORS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  Hits: new Color(0xff0000),\n  Tracks: new Color(0xff0000),\n  Jets: new Color(0x2194ce),\n  CaloClusters: new Color(0xffd166),\n  MuonChambers: new Color(0xff0000),\n  Vertices: new Color(0xffd166),\n  MissingEnergy: new Color(0xffffff),\n  PlanarCaloCells: new Color(0xfff69a),\n}\n                    \n                \n\n            \n                \n                    Colors of different event data types.\n\n                \n            \n\n        \n    \n\n    src/helpers/browser-storage.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getFromLocalStorage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (item: string) => {\n  try {\n    return localStorage.getItem(item);\n  } catch (exception) {\n    console.warn('Exception in localStorage', exception);\n  }\n}\n                    \n                \n\n            \n                \n                    Get an item from local storage.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setToLocalStorage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (item: string, value: string) => {\n  try {\n    localStorage.setItem(item, value);\n  } catch (exception) {\n    console.warn('Exception in localStorage', exception);\n  }\n}\n                    \n                \n\n            \n                \n                    Set item to local storage.\n\n                \n            \n\n        \n    \n\n    src/helpers/labels.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getLabelTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  eventDataType: string,\n  collection: string,\n  index: string | number\n) => `${eventDataType} > ${collection} > ${index}`\n                    \n                \n\n            \n                \n                    Get title of the label.\n\n                \n            \n\n        \n    \n\n    src/helpers/file.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        loadFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  onFileRead: (data: string) => void,\n  contentType: string = 'application/json'\n) => {\n  // Create a mock input file element and use that to read the file\n  let inputFile = document.createElement('input');\n  inputFile.type = 'file';\n  inputFile.accept = contentType;\n  inputFile.onchange = (e: any) => {\n    const configFile = e.target?.files[0];\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      onFileRead?.(e.target.result.toString());\n\n      inputFile.remove();\n      inputFile = null;\n    };\n    reader.readAsText(configFile);\n  };\n  inputFile.click();\n}\n                    \n                \n\n            \n                \n                    Load a file from user by mocking an input element.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  data: string,\n  fileName: string,\n  contentType: string = 'application/json'\n) => {\n  const blob = new Blob([data], { type: contentType });\n  const tempAnchor = document.createElement('a');\n  tempAnchor.style.display = 'none';\n  tempAnchor.href = URL.createObjectURL(blob);\n  tempAnchor.download = fileName;\n  tempAnchor.click();\n  tempAnchor.remove();\n}\n                    \n                \n\n            \n                \n                    Save and download file with the given data.\n\n                \n            \n\n        \n    \n\n    src/managers/url-options-manager.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        phoenixURLOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  file: '',\n  type: '',\n  config: '',\n  hideWidgets: false,\n  embed: false,\n}\n                    \n                \n\n            \n                \n                    Model for Phoenix URL options.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
