var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/ActiveVariable.html",[0,0.279,1,1.896]],["body/classes/ActiveVariable.html",[0,0.367,1,3.09,2,0.401,3,0.315,4,0.274,5,0.195,6,4.905,7,3.337,8,0.502,9,3.506,10,3.028,11,4.693,12,0.93,13,5.55,14,3.09,15,5.55,16,0.195,17,0.864,18,1.354,19,4.814,20,1.225,21,0.579,22,0.552,23,5.55,24,4.004,25,1.154,26,4.485,27,6.752,28,0.644,29,4.485,30,1.428,31,4.129,32,0.6,33,0.027,34,0.539,35,0.344,36,1.724,37,6.027,38,5.576,39,0.542,40,4.485,41,3.386,42,4.485,43,5.55,44,4.485,45,1.247,46,4.693,47,3.234,48,5.576,49,0.496,50,0.938,51,5.55,52,4.485,53,6.298,54,0.797,55,0.442,56,0.539,57,4.485,58,4.485,59,4.485,60,4.485,61,4.485,62,0.017,63,0.021,64,0.017]],["title/classes/AnimationsManager.html",[0,0.279,65,2.533]],["body/classes/AnimationsManager.html",[0,0.157,2,0.172,3,0.135,4,0.117,5,0.084,8,0.463,9,1.694,12,0.566,14,1.071,16,0.084,18,1.117,20,1.183,21,0.509,22,0.303,25,1.104,28,0.566,30,0.495,32,0.566,33,0.027,34,0.509,35,0.297,36,2.188,39,0.456,41,3.117,45,1.444,46,1.626,47,2.923,49,0.519,50,1.034,54,0.917,55,0.153,56,0.594,62,0.007,63,0.011,64,0.007,65,2.263,66,2.763,67,4.911,68,0.691,69,1.299,70,1.441,71,4.537,72,1.649,73,1.447,74,2.768,75,1.541,76,3.043,77,3.192,78,3.775,79,3.775,80,3.043,81,3.192,82,3.775,83,3.775,84,3.775,85,3.043,86,1.923,87,2.121,88,3.629,89,2.553,90,3.606,91,1.431,92,0.837,93,1.767,94,0.771,95,1.299,96,1.562,97,1.848,98,2.389,99,0.895,100,1.923,101,1.067,102,5.661,103,1.923,104,5.133,105,4.814,106,4.814,107,3.587,108,4.911,109,4.32,110,4.204,111,5.688,112,5.434,113,5.688,114,4.814,115,4.814,116,1.923,117,5.907,118,1.923,119,2.553,120,3.953,121,1.923,122,4.675,123,1.923,124,3.043,125,3.775,126,3.629,127,4.291,128,2.573,129,1.923,130,1.923,131,3.953,132,1.923,133,1.447,134,2.102,135,3.606,136,2.422,137,3.192,138,1.694,139,2.102,140,3.192,141,1.923,142,1.923,143,1.923,144,1.923,145,3.775,146,5.558,147,1.923,148,4.291,149,4.675,150,4.675,151,1.996,152,1.923,153,2.573,154,5.907,155,1.562,156,1.562,157,3.775,158,2.808,159,3.32,160,3.043,161,2.573,162,1.923,163,5.207,164,1.626,165,3.043,166,1.938,167,2.263,168,2.292,169,1.104,170,3.043,171,1.923,172,3.606,173,2.674,174,4.291,175,2.568,176,2.606,177,4.291,178,0.566,179,1.168,180,3.192,181,1.848,182,2.224,183,2.032,184,2.032,185,1.626,186,4.565,187,1.694,188,2.263,189,3.043,190,1.447,191,0.403,192,1.626,193,1.923,194,1.923,195,3.043,196,1.923,197,0.827,198,1.923,199,2.521,200,1.923,201,2.521,202,1.923,203,1.923,204,1.923,205,0.254,206,1.694,207,1.923,208,1.923,209,1.168,210,1.431,211,1.923,212,1.625,213,1.923,214,1.923,215,1.923,216,3.192,217,1.923,218,3.043,219,1.626,220,2.032,221,1.848,222,1.626,223,0.915,224,1.923,225,0.837,226,1.923,227,1.923,228,1.923,229,1.923,230,1.923,231,1.923,232,3.043,233,1.923,234,1.923,235,0.988,236,3.775,237,1.923,238,3.043,239,1.923,240,3.775,241,4.291,242,1.923,243,1.431,244,1.923,245,4.675,246,1.923,247,1.447,248,2.032,249,3.043,250,1.848,251,3.775,252,3.122,253,0.988,254,1.669,255,3.043,256,3.629,257,1.168,258,4.291,259,1.923,260,1.923,261,1.923,262,3.043,263,3.192,264,1.168,265,3.043,266,3.043,267,1.923,268,1.923,269,3.043,270,1.923,271,1.923,272,1.923,273,1.923,274,1.071,275,1.626,276,1.923,277,3.192,278,3.043,279,1.923,280,1.923,281,1.923,282,1.431,283,1.923,284,1.923,285,1.923,286,1.923,287,1.626,288,1.626,289,1.431,290,0.792,291,3.043,292,1.923,293,1.923,294,1.923,295,3.043,296,1.923,297,1.168,298,1.923,299,1.923,300,2.263,301,1.923,302,1.923,303,1.923,304,1.923,305,1.923,306,1.923,307,1.168,308,1.285,309,1.626,310,1.923,311,1.923,312,0.972,313,1.923,314,1.923,315,3.043,316,1.626,317,1.923,318,1.923,319,1.923,320,1.923,321,1.923,322,1.923,323,3.043,324,1.923,325,1.923,326,1.923,327,1.923,328,1.923,329,1.923,330,1.923,331,1.923,332,1.923,333,1.923,334,1.923,335,0.791,336,1.923,337,1.923,338,1.923,339,1.923,340,1.923,341,1.923,342,1.923,343,3.043,344,3.775,345,1.923,346,1.923,347,1.923,348,1.626,349,1.923,350,1.285,351,1.923,352,4.291,353,1.431,354,0.691,355,1.923,356,2.032,357,3.775,358,1.626,359,1.923,360,1.626,361,3.043,362,3.043,363,1.923,364,1.923,365,1.923,366,1.923,367,1.923,368,1.923,369,1.923,370,1.626,371,1.431,372,3.043,373,1.923,374,0.85,375,1.431,376,1.923,377,0.915,378,1.923,379,1.923,380,3.043,381,3.043,382,1.431,383,1.694,384,3.043,385,1.923,386,3.043,387,1.923,388,1.923,389,1.923,390,1.923,391,1.923,392,1.923,393,1.923,394,1.923,395,1.923,396,1.923,397,1.923,398,1.923,399,0.988,400,1.923,401,1.923,402,4.291,403,1.923,404,1.923,405,1.923,406,1.431,407,1.431,408,3.043,409,1.923,410,1.626,411,1.923,412,1.923,413,1.923]],["title/classes/CMSObjects.html",[0,0.279,414,2.274]],["body/classes/CMSObjects.html",[0,0.357,2,0.39,3,0.307,4,0.267,5,0.19,8,0.435,16,0.19,20,0.792,21,0.39,22,0.543,28,0.434,32,0.639,33,0.027,34,0.39,35,0.228,49,0.488,54,0.973,55,0.348,56,0.39,62,0.016,63,0.02,64,0.016,93,2.247,94,0.659,101,0.679,151,1.96,158,3.247,169,1.404,178,0.72,181,3.314,183,3.645,184,3.645,187,3.315,188,4.06,190,2.596,191,0.915,197,0.775,205,0.576,221,2.651,254,2.412,307,3.314,335,1.143,382,4.06,383,3.038,414,3.645,415,4.615,416,3.247,417,2.802,418,2.596,419,4.615,420,3.645,421,3.645,422,2.138,423,5.457,424,5.457,425,4.365,426,3.314,427,5.538,428,6.55,429,1.96,430,5.954,431,4.365,432,4.06,433,5.457,434,4.615,435,2.916,436,3.691,437,3.691,438,5.457,439,4.365,440,4.365,441,0.734,442,4.365,443,4.365,444,4.365,445,4.365,446,5.457,447,5.954,448,5.954,449,5.457,450,5.954,451,5.954,452,3.247,453,5.457,454,5.954,455,5.954,456,5.457,457,5.954,458,5.954,459,3.691,460,5.457,461,3.691,462,5.457,463,3.691,464,3.247,465,5.457,466,4.365,467,4.365,468,4.365,469,4.365,470,4.365,471,4.365,472,3.247,473,4.365,474,4.365,475,2.916,476,4.365,477,5.954,478,3.247,479,4.365,480,4.365,481,5.457,482,4.365,483,4.365,484,4.365,485,4.365,486,4.365,487,4.365,488,4.365,489,4.365]],["title/classes/ColorManager.html",[0,0.279,490,2.274]],["body/classes/ColorManager.html",[0,0.338,2,0.369,3,0.29,4,0.252,5,0.18,8,0.487,12,0.806,16,0.18,20,1.052,21,0.519,22,0.524,25,1.062,28,0.577,30,1.356,32,0.577,33,0.027,34,0.587,35,0.303,45,1.303,49,0.471,50,0.903,55,0.329,56,0.577,62,0.015,63,0.02,64,0.015,66,2.907,68,1.482,69,1.579,70,1.769,72,2.024,75,2.194,87,2.267,93,2.702,94,0.636,95,1.104,99,1.549,151,2.517,169,1.689,178,0.695,179,3.985,183,3.875,184,3.518,190,2.505,191,0.865,197,0.7,247,1.963,253,2.705,263,5.673,354,1.891,432,3.918,441,1.086,490,3.518,491,3.711,492,4.082,493,3.518,494,5.801,495,4.127,496,4.127,497,3.918,498,5.267,499,3.49,500,3.518,501,2.705,502,2.791,503,2.705,504,5.267,505,3.518,506,4.127,507,5.168,508,6.111,509,4.454,510,3.49,511,5.267,512,3.918,513,5.267,514,5.267,515,3.198,516,5.267,517,3.918,518,3.918,519,4.454,520,4.454,521,4.454,522,4.454,523,4.127,524,1.062,525,4.127,526,4.127,527,4.127,528,4.127,529,4.127,530,4.127,531,4.127,532,4.127,533,4.127,534,3.07,535,4.127,536,4.127,537,4.127,538,3.07,539,6.456,540,4.127,541,4.127]],["title/classes/ColorOptions.html",[0,0.279,542,2.274]],["body/classes/ColorOptions.html",[0,0.207,2,0.226,3,0.177,4,0.154,5,0.11,8,0.421,12,0.878,16,0.11,17,0.584,18,1.571,21,0.443,22,0.373,25,0.965,28,0.648,30,0.965,32,0.61,33,0.027,34,0.556,35,0.337,36,0.971,39,0.693,49,0.548,50,0.917,55,0.299,56,0.513,62,0.009,63,0.014,64,0.009,69,1.076,72,1.441,75,1.347,92,1.032,93,2.038,94,0.727,95,1.284,96,1.926,99,1.456,101,0.771,138,2.088,151,2.535,155,1.297,169,1.651,176,1.534,178,0.653,191,0.786,197,0.54,205,0.653,212,1.656,223,1.202,225,1.686,253,2.297,257,1.534,335,1.037,441,0.965,490,3.832,491,4.001,492,2.988,493,3.306,502,2.449,503,2.297,509,3.172,515,3.006,524,0.65,542,2.505,543,3.365,544,1.688,545,2.308,546,4.474,547,4.474,548,3.783,549,4.474,550,4.474,551,4.474,552,4.95,553,4.95,554,3.751,555,3.751,556,4.95,557,4.95,558,4.95,559,3.751,560,2.527,561,4.95,562,2.449,563,4.95,564,4.267,565,2.527,566,2.088,567,1.032,568,3.172,569,4.685,570,2.946,571,4.474,572,3.704,573,3.751,574,2.956,575,3.751,576,4.151,577,3.751,578,4.186,579,3.746,580,4.95,581,3.751,582,3.751,583,2.527,584,3.172,585,6.126,586,2.527,587,4.685,588,2.527,589,2.527,590,2.988,591,2.505,592,2.527,593,1.406,594,1.719,595,2.297,596,5.289,597,3.783,598,2.542,599,3.751,600,2.527,601,3.751,602,2.527,603,2.79,604,2.988,605,2.527,606,2.527,607,3.751,608,2.527,609,3.683,610,3.751,611,4.474,612,4.186,613,4.186,614,2.79,615,3.751,616,4.95,617,3.751,618,2.527,619,5.289,620,3.306,621,2.038,622,2.527,623,2.527,624,2.527,625,3.751,626,5.893,627,2.527,628,3.751,629,1.784,630,3.751,631,1.407,632,1.879,633,1.688,634,1.297,635,1.534,636,2.527,637,3.532,638,4.95,639,2.527,640,2.527,641,2.527,642,4.474,643,2.032,644,2.527,645,1.202,646,4.472,647,2.527,648,2.136,649,2.527,650,2.527,651,2.527,652,2.527,653,2.527,654,2.527,655,2.527,656,5.289,657,2.527,658,2.527,659,2.527,660,3.751,661,3.751,662,2.527,663,2.527,664,2.527,665,2.527,666,3.751,667,2.527,668,4.474,669,4.474,670,3.751,671,1.688,672,1.688,673,2.136,674,2.527,675,1.534,676,2.136,677,2.136,678,2.527,679,2.527,680,2.527,681,2.527,682,2.527,683,4.474,684,3.751,685,3.751,686,2.136,687,3.751,688,3.751,689,3.751,690,2.527,691,2.527,692,2.527,693,2.527,694,2.527,695,1.117,696,2.527,697,1.879,698,2.527,699,2.527]],["title/interfaces/Configuration.html",[700,1.749,701,1.223]],["body/interfaces/Configuration.html",[3,0.312,4,0.271,5,0.193,8,0.354,16,0.193,17,0.858,21,0.626,33,0.027,35,0.357,39,0.794,55,0.354,62,0.016,63,0.02,64,0.016,89,2.271,94,0.826,95,1.352,101,0.934,178,0.791,335,1.156,429,1.98,441,1.086,497,4.102,524,1.693,545,1.852,562,2.774,593,1.733,594,2.48,595,3.081,629,2.985,634,2.28,700,2.28,701,2.253,702,2.965,703,3.754,704,2.107,705,6.275,706,6.275,707,5.306,708,4.191,709,6.275,710,4.092,711,5.306,712,6.275,713,4.102,714,3.222,715,2.271,716,1.98,717,4.102,718,3.349,719,4.663,720,2.623,721,3.683,722,3.07,723,3.683,724,2.832,725,2.47,726,3.683,727,2.623,728,3.07,729,4.191,730,4.463,731,4.102,732,5.515,733,4.44,734,4.44,735,3.303,736,2.472,737,4.44,738,4.44]],["title/classes/CoordinateHelper.html",[0,0.279,739,1.896]],["body/classes/CoordinateHelper.html",[0,0.299,2,0.327,3,0.257,4,0.223,5,0.159,8,0.484,16,0.159,20,1.101,21,0.521,22,0.58,28,0.604,32,0.644,33,0.027,34,0.521,35,0.304,49,0.586,54,0.896,55,0.291,56,0.579,62,0.014,63,0.018,64,0.014,101,1.094,159,3.652,178,0.482,182,3.032,191,0.765,197,0.704,199,3.895,201,3.652,205,0.801,206,3.246,210,2.717,212,1.671,216,5.598,220,4.324,222,3.089,225,1.505,282,4.338,297,3.321,307,2.954,353,4.645,422,2.451,671,3.249,695,1.615,739,2.708,740,5.281,741,2.717,742,2.954,743,4.338,744,4.864,745,5.831,746,5.469,747,4.864,748,4.624,749,4.864,750,3.653,751,5.543,752,4.113,753,4.113,754,4.864,755,3.618,756,3.618,757,2.708,758,3.653,759,5.145,760,4.559,761,3.653,762,5.831,763,4.864,764,5.831,765,5.831,766,5.831,767,6.245,768,4.864,769,5.831,770,6.722,771,4.864,772,3.089,773,6.475,774,5.145,775,4.931,776,5.831,777,5.831,778,5.831,779,5.831,780,3.653,781,3.653,782,4.864,783,3.653,784,3.653,785,3.653,786,4.864,787,3.618,788,4.864,789,4.864,790,4.931,791,4.864,792,4.864,793,3.653,794,3.653,795,5.831,796,4.864,797,3.089,798,4.113,799,3.089,800,3.653,801,3.653,802,3.089,803,3.653,804,3.653,805,3.653,806,3.653,807,3.653,808,3.653]],["title/classes/Cut.html",[0,0.279,809,1.749]],["body/classes/Cut.html",[0,0.348,2,0.38,3,0.298,4,0.259,5,0.185,8,0.427,12,0.919,14,3.274,16,0.185,17,0.835,18,1.461,20,1.246,21,0.38,22,0.534,25,1.381,28,0.665,30,1.381,32,0.423,33,0.026,34,0.552,35,0.345,39,0.797,49,0.38,50,0.661,55,0.338,56,0.552,62,0.016,63,0.02,64,0.016,94,0.841,95,1.46,101,1.084,138,3.274,223,3.208,225,1.476,441,1.039,612,5.585,613,5.585,809,3.391,810,3.592,811,3.592,812,3.592,813,5.183,814,5.88,815,5.88,816,4.254,817,5.585,818,5.585,819,3.95,820,4.248,821,5.365,822,3.583,823,5.88,824,6.793,825,4.248,826,4.248,827,4.248,828,4.248,829,4.248,830,4.248,831,5.365,832,5.365,833,4.248,834,4.248]],["title/classes/DatGUIMenuUI.html",[0,0.279,835,2.533]],["body/classes/DatGUIMenuUI.html",[0,0.316,2,0.178,3,0.14,4,0.122,5,0.087,8,0.448,12,0.807,16,0.136,17,0.487,18,1.493,20,1.202,21,0.489,22,0.311,25,0.512,28,0.635,30,0.994,32,0.544,33,0.027,34,0.578,35,0.347,36,1.681,39,0.574,45,0.867,49,0.524,50,0.912,54,0.682,55,0.159,56,0.558,62,0.007,63,0.012,64,0.007,69,1.052,70,1.05,72,2.1,73,2.081,75,1.123,87,1.571,92,1.388,94,0.807,95,1.411,99,1.286,101,0.601,136,2.1,151,2.353,155,1.022,156,1.605,158,3.753,159,3.175,168,1.209,169,1.555,173,2.591,178,0.627,179,1.209,191,1.178,197,0.805,199,2.921,201,2.921,205,0.509,209,2.656,210,4.065,212,1.388,225,0.86,235,1.605,247,2.4,250,2.344,254,2.803,257,1.899,308,2.088,312,0.512,335,1.205,374,2.332,377,2.599,383,1.108,407,4.433,418,1.487,441,1.098,459,1.684,464,1.481,493,2.921,502,2.542,503,2.246,524,1.446,543,3.299,545,1.694,566,3.8,567,1.582,594,2.562,598,2.591,629,1.487,643,2.29,645,2.834,675,1.209,701,1.571,708,2.088,720,2.4,721,2.921,722,1.741,724,3.459,725,1.287,752,2.644,755,3.753,809,2.441,817,1.684,818,1.684,822,2.088,835,2.326,836,5.433,837,5.112,838,1.481,839,1.741,840,2.599,841,3.264,842,3.264,843,3.861,844,3.264,845,3.861,846,3.861,847,3.861,848,2.872,849,3.699,850,2.644,851,3.264,852,3.699,853,2.644,854,2.644,855,4.374,856,4.462,857,3.127,858,3.127,859,2.435,860,3.127,861,1.605,862,2.246,863,1.991,864,1.991,865,2.809,866,1.991,867,3.127,868,3.492,869,1.684,870,1.991,871,5.045,872,1.991,873,5.045,874,1.991,875,1.684,876,3.98,877,1.991,878,3.254,879,3.524,880,3.264,881,2.326,882,1.991,883,2.326,884,2.644,885,4.019,886,2.644,887,1.991,888,2.872,889,3.699,890,1.684,891,3.536,892,1.991,893,2.088,894,2.326,895,2.326,896,1.991,897,2.644,898,1.991,899,3.254,900,2.921,901,2.644,902,1.991,903,3.264,904,2.644,905,1.991,906,2.644,907,3.127,908,5.276,909,1.991,910,3.127,911,1.991,912,2.088,913,1.481,914,1.684,915,1.022,916,1.991,917,1.991,918,1.991,919,1.991,920,1.991,921,1.684,922,1.209,923,1.684,924,1.684,925,1.991,926,4.266,927,4.019,928,4.62,929,1.991,930,1.991,931,1.991,932,1.991,933,2.326,934,3.753,935,4.374,936,1.991,937,3.127,938,5.276,939,5.62,940,1.991,941,4.019,942,4.019,943,1.991,944,3.127,945,1.684,946,1.991,947,1.991,948,1.991,949,1.684,950,1.991,951,1.991,952,3.127,953,3.127,954,1.991,955,4.62,956,1.991,957,3.127,958,4.374,959,1.991,960,3.861,961,3.127,962,1.684,963,5.045,964,1.991,965,1.991,966,1.991,967,1.684,968,1.991,969,3.861,970,3.127,971,1.684,972,1.33,973,1.991,974,1.991,975,1.991,976,1.991,977,1.991,978,1.991,979,3.127,980,1.991,981,3.861,982,1.991,983,3.127,984,1.991,985,1.991,986,3.127,987,1.991,988,1.991,989,1.991,990,1.108,991,1.991,992,1.991,993,1.991,994,1.991,995,1.684,996,1.481,997,1.991,998,0.88,999,1.991,1000,1.991,1001,1.991,1002,3.861,1003,3.127,1004,1.991,1005,1.991,1006,1.991,1007,1.684,1008,1.991,1009,1.684,1010,1.991,1011,1.991,1012,1.684,1013,1.991,1014,1.991,1015,3.127,1016,1.991,1017,2.644,1018,3.861,1019,1.991,1020,3.127,1021,1.684,1022,1.684,1023,1.991,1024,1.991,1025,1.991,1026,4.374,1027,1.991,1028,1.991,1029,1.991,1030,3.127,1031,2.644,1032,2.644,1033,1.991,1034,3.127,1035,1.991,1036,2.644,1037,1.991,1038,1.991,1039,1.991,1040,1.481,1041,1.684,1042,1.684,1043,2.644,1044,2.644,1045,1.991,1046,1.991,1047,1.684,1048,3.127,1049,3.127,1050,4.374,1051,1.991,1052,1.991,1053,1.991,1054,1.991,1055,1.991,1056,1.991,1057,1.991,1058,1.991,1059,1.991,1060,1.991,1061,4.374,1062,1.991,1063,1.991,1064,1.991,1065,1.991,1066,1.991,1067,1.684,1068,1.991,1069,1.991,1070,1.991,1071,1.684,1072,1.991,1073,1.991,1074,1.991,1075,1.991,1076,1.991,1077,1.991]],["title/classes/EffectsManager.html",[0,0.279,1078,2.274]],["body/classes/EffectsManager.html",[0,0.265,2,0.289,3,0.227,4,0.198,5,0.141,8,0.48,12,0.427,16,0.141,17,0.697,18,1.509,20,1.234,21,0.521,22,0.446,25,1.322,28,0.656,32,0.579,33,0.027,34,0.521,35,0.341,39,0.789,45,1.246,49,0.539,50,0.906,54,0.796,55,0.258,56,0.572,62,0.012,63,0.017,64,0.012,66,3.158,68,1.162,69,1.334,70,1.504,75,1.991,87,2.543,89,2.901,94,0.815,98,3.505,178,0.768,191,0.678,197,0.541,205,0.427,225,0.89,243,4.125,248,3.704,335,0.939,354,1.845,374,1.98,499,2.736,501,3.232,524,1.499,574,2.131,629,2.638,704,2.267,912,2.992,1078,2.992,1079,5.614,1080,4.903,1081,4.125,1082,5.708,1083,3.788,1084,3.788,1085,5.404,1086,6.64,1087,5.138,1088,4.509,1089,5.546,1090,4.479,1091,4.479,1092,4.479,1093,4.479,1094,4.479,1095,4.125,1096,3.332,1097,3.788,1098,5.546,1099,3.322,1100,3.332,1101,2.736,1102,3.704,1103,4.125,1104,1.965,1105,5.138,1106,2.407,1107,6.47,1108,5.138,1109,2.736,1110,3.332,1111,4.479,1112,4.594,1113,2.407,1114,3.235,1115,4.689,1116,4.689,1117,4.125,1118,5.323,1119,4.479,1120,3.235,1121,4.479,1122,4.479,1123,3.235,1124,4.479,1125,2.736,1126,3.235,1127,2.736,1128,4.479,1129,3.235,1130,3.235,1131,3.235,1132,4.479,1133,3.235,1134,4.345,1135,3.788,1136,3.235,1137,3.235,1138,3.235,1139,2.161,1140,4.479,1141,5.138,1142,4.479,1143,4.479,1144,3.235,1145,3.235,1146,3.235,1147,3.235,1148,3.235,1149,2.736,1150,3.235,1151,3.235,1152,3.235,1153,3.235,1154,3.235,1155,3.235,1156,3.235]],["title/interfaces/EventDataLoader.html",[700,1.749,710,2.068]],["body/interfaces/EventDataLoader.html",[3,0.384,4,0.223,5,0.159,8,0.484,16,0.238,21,0.522,22,0.484,28,0.634,32,0.58,33,0.027,34,0.522,35,0.304,49,0.611,50,0.757,55,0.291,56,0.586,62,0.014,63,0.018,64,0.014,69,1.503,92,1.782,93,2.666,94,0.849,95,1.424,101,0.851,138,2.709,169,1.799,178,0.722,235,2.809,290,2.004,417,2.499,420,3.25,441,1.157,501,2.499,502,3.029,503,2.499,505,3.896,567,1.605,570,2.499,614,3.62,620,3.25,621,2.004,635,3.542,643,2.519,675,2.955,700,1.877,702,2.441,704,1.634,710,2.955,720,2.315,725,2.004,735,2.719,757,2.709,840,2.971,859,3.247,861,3.4,862,2.995,865,2.709,868,3.793,900,3.25,998,2.151,1157,5.476,1158,2.22,1159,4.866,1160,4.866,1161,4.626,1162,4.626,1163,4.115,1164,4.339,1165,4.339,1166,4.115,1167,4.932,1168,3.091,1169,4.339,1170,3.655,1171,3.091,1172,4.339,1173,3.896,1174,3.325,1175,3.655,1176,4.646,1177,3.62,1178,4.115,1179,3.25,1180,4.866,1181,3.62,1182,3.25,1183,3.62,1184,4.115,1185,3.62,1186,4.115,1187,3.654,1188,3.25,1189,3.62,1190,3.655,1191,4.115,1192,4.115,1193,3.655,1194,2.709,1195,3.542,1196,4.115,1197,5.282,1198,3.655,1199,3.896,1200,3.25,1201,3.25,1202,4.115,1203,3.655,1204,4.115,1205,4.325,1206,3.62,1207,3.25,1208,3.655,1209,3.091,1210,2.719]],["title/classes/ExportManager.html",[0,0.279,1211,2.533]],["body/classes/ExportManager.html",[0,0.3,2,0.328,3,0.257,4,0.224,5,0.238,8,0.498,16,0.159,18,1.473,20,1.134,21,0.544,22,0.485,28,0.605,32,0.605,33,0.027,34,0.544,35,0.317,49,0.544,50,0.758,54,0.7,55,0.436,56,0.579,62,0.022,63,0.018,64,0.014,66,2.973,68,1.315,69,1.172,70,1.636,72,1.873,87,2.51,94,0.812,95,1.388,96,3.52,97,2.959,178,0.77,187,3.816,191,0.767,197,0.817,205,0.722,235,3.429,377,2.318,502,1.619,593,1.834,695,1.619,701,2.326,716,1.75,865,3.885,990,2.713,1104,2.224,1182,3.255,1211,3.625,1212,5.285,1213,5.476,1214,4.873,1215,4.873,1216,4.873,1217,4.873,1218,3.663,1219,2.725,1220,4.936,1221,3.545,1222,4.121,1223,4.121,1224,4.121,1225,3.625,1226,5.838,1227,3.841,1228,4.873,1229,4.873,1230,3.663,1231,3.48,1232,4.873,1233,3.663,1234,4.873,1235,3.097,1236,4.873,1237,4.873,1238,4.873,1239,3.663,1240,4.873,1241,3.663,1242,2.446,1243,3.097,1244,3.663,1245,5.476,1246,3.663,1247,3.663,1248,3.663,1249,4.873,1250,5.838,1251,3.663,1252,2.446,1253,2.446,1254,3.097,1255,2.725,1256,4.121,1257,3.663,1258,3.663,1259,3.097,1260,3.663,1261,3.663,1262,3.663,1263,5.838,1264,3.663,1265,5.838,1266,3.663,1267,3.097,1268,3.663,1269,3.663,1270,3.663,1271,3.663,1272,3.663,1273,3.663,1274,3.663,1275,3.097,1276,3.663]],["title/classes/Field.html",[0,0.279,816,2.274]],["body/classes/Field.html",[0,0.442,2,0.319,3,0.251,4,0.218,5,0.155,8,0.284,16,0.155,17,0.556,21,0.319,22,0.477,24,2.168,28,0.355,32,0.355,33,0.027,34,0.319,35,0.186,39,0.431,45,0.802,49,0.555,54,0.512,55,0.284,56,0.576,62,0.018,63,0.018,64,0.013,73,1.698,74,1.988,92,0.982,101,1.043,119,1.833,133,1.698,134,3.01,136,2.384,139,1.988,156,2.776,166,2.776,168,2.168,175,1.698,178,0.471,182,3.299,191,0.748,197,0.765,205,0.632,223,2.951,225,0.982,264,3.508,274,1.988,290,1.47,312,0.919,335,1.004,356,3.199,422,2.075,429,1.72,524,0.919,572,2.667,579,3.01,598,1.833,621,1.973,672,2.384,695,2.742,816,3.859,839,1.988,1139,3.199,1277,3.199,1278,2.384,1279,3.019,1280,3.57,1281,3.57,1282,3.57,1283,3.563,1284,4.404,1285,4.404,1286,1.833,1287,2.435,1288,2.656,1289,2.656,1290,2.656,1291,3.508,1292,3.508,1293,2.656,1294,2.656,1295,2.656,1296,4.025,1297,2.656,1298,2.656,1299,2.656,1300,2.656,1301,4.298,1302,4.022,1303,3.563,1304,3.563,1305,4.714,1306,4.792,1307,4.298,1308,3.508,1309,2.656,1310,2.656,1311,2.656,1312,4.854,1313,2.656,1314,2.384,1315,4.792,1316,2.656,1317,2.656,1318,4.483,1319,4.904,1320,2.656,1321,4.714,1322,2.656,1323,2.656,1324,2.656,1325,3.563,1326,2.656,1327,3.563,1328,4.022,1329,2.656,1330,2.656,1331,2.656,1332,2.656,1333,2.656,1334,2.656,1335,2.656,1336,2.656,1337,2.656,1338,2.656,1339,2.656,1340,2.656,1341,2.656,1342,2.656,1343,2.656,1344,2.656,1345,1.988,1346,2.656,1347,4.022,1348,3.563,1349,2.656,1350,4.022,1351,2.384,1352,4.022,1353,3.563,1354,2.656,1355,2.656,1356,2.656,1357,2.656,1358,2.656,1359,2.656,1360,2.656,1361,2.656,1362,2.656,1363,2.656,1364,2.656,1365,3.563,1366,3.563,1367,3.563,1368,3.611,1369,2.909,1370,4.022,1371,3.563,1372,2.168,1373,2.384,1374,2.909,1375,2.384,1376,2.168,1377,2.384,1378,3.563,1379,2.656,1380,2.656,1381,2.656,1382,2.656,1383,2.656,1384,2.656,1385,2.656]],["title/classes/InfoLogger.html",[0,0.279,1174,1.749]],["body/classes/InfoLogger.html",[0,0.374,2,0.409,3,0.492,4,0.279,5,0.199,8,0.447,12,0.741,16,0.199,17,0.874,18,1.488,21,0.409,22,0.559,28,0.631,32,0.455,33,0.027,34,0.409,35,0.317,36,1.757,39,0.678,49,0.544,50,0.712,55,0.364,56,0.502,62,0.017,63,0.021,64,0.017,92,1.545,94,0.552,95,1.431,101,0.874,155,2.884,205,0.603,441,1.115,501,2.884,567,1.744,598,2.884,643,2.579,704,1.535,1099,2.884,1174,2.884,1187,4.561,1188,3.054,1195,4.023,1207,3.751,1386,5.503,1387,3.866,1388,6.079,1389,6.079,1390,6.34,1391,4.572,1392,4.749,1393,4.572,1394,5.616,1395,5.616,1396,3.751,1397,4.178,1398,5.616,1399,4.572,1400,5.616,1401,4.928,1402,4.572,1403,4.749,1404,3.751,1405,4.572,1406,4.572,1407,4.572,1408,4.572,1409,4.572]],["title/classes/LHCbLoader.html",[0,0.279,1410,2.533]],["body/classes/LHCbLoader.html",[0,0.245,2,0.268,3,0.346,4,0.183,5,0.13,8,0.513,12,0.559,16,0.185,17,0.66,18,1.447,20,1.223,21,0.569,22,0.422,25,1.456,28,0.682,32,0.647,33,0.026,34,0.581,35,0.361,36,1.63,39,0.595,45,1.107,47,1.536,49,0.597,50,0.94,55,0.238,56,0.268,62,0.011,63,0.016,64,0.011,69,1.02,72,1.63,75,1.074,92,1.698,93,2.585,94,0.846,95,1.442,99,1.247,101,0.66,169,1.759,173,2.529,178,0.395,187,1.666,190,2.874,197,0.512,212,0.823,235,2.905,247,2.691,312,1.091,335,0.889,354,1.523,375,2.226,417,1.536,420,1.998,426,3.813,427,4.165,429,2.169,441,1.118,501,1.536,502,2.937,503,2.529,505,2.832,517,2.226,524,1.379,538,3.664,545,1.005,562,1.323,566,1.666,567,1.167,593,1.332,620,2.832,621,1.232,643,2.258,675,1.817,704,1.424,715,1.232,720,1.423,725,2.419,726,2.832,727,2.549,757,2.361,809,2.178,812,2.53,839,2.361,840,2.874,848,3.155,859,2.743,861,2.178,862,2.178,865,1.666,868,3.254,876,2.832,878,3.155,879,1.998,888,3.155,893,2.832,900,1.998,998,1.875,1158,1.817,1161,3.586,1162,3.586,1163,3.586,1164,3.664,1165,4.37,1166,3.586,1167,4.165,1168,2.53,1169,3.155,1171,2.53,1172,3.986,1173,3.29,1174,2.752,1176,3.155,1177,2.226,1178,2.53,1179,1.998,1181,2.226,1182,1.998,1183,2.226,1184,2.53,1185,2.226,1186,2.53,1188,1.998,1189,2.226,1194,3.271,1195,3.435,1199,3.579,1200,2.832,1201,2.832,1202,2.53,1206,2.226,1207,3.29,1221,1.817,1225,2.226,1308,2.575,1396,1.998,1397,2.226,1404,3.29,1410,3.155,1411,4.968,1412,4.576,1413,5.657,1414,4.241,1415,6.602,1416,4.241,1417,2.743,1418,2.743,1419,5.359,1420,4.241,1421,4.241,1422,4.241,1423,4.241,1424,4.241,1425,5.657,1426,6.741,1427,2.992,1428,2.992,1429,2.992,1430,2.992,1431,2.992,1432,3.155,1433,3.586,1434,2.992,1435,2.992,1436,2.992,1437,2.992,1438,2.992,1439,2.226,1440,4.241,1441,2.992,1442,2.361,1443,2.992,1444,5.359,1445,4.241,1446,5.359,1447,2.992,1448,2.992,1449,2.992,1450,2.53,1451,4.241,1452,4.241,1453,2.53,1454,3.586,1455,4.241,1456,4.241,1457,2.992,1458,2.992,1459,4.241,1460,2.992,1461,2.992,1462,3.664,1463,2.992,1464,2.53,1465,2.992,1466,2.992,1467,2.992,1468,2.992,1469,5.657,1470,2.992,1471,2.992,1472,2.992,1473,2.992,1474,2.992,1475,2.992,1476,2.53,1477,2.992,1478,2.992,1479,2.992,1480,2.992,1481,2.53,1482,2.53,1483,2.992,1484,2.992,1485,2.992,1486,4.241,1487,2.992,1488,2.53,1489,2.992,1490,2.53,1491,2.992,1492,2.992,1493,4.241,1494,2.992,1495,3.586]],["title/classes/LoadingManager.html",[0,0.279,1417,1.896]],["body/classes/LoadingManager.html",[0,0.268,2,0.293,3,0.23,4,0.2,5,0.143,8,0.494,12,0.818,16,0.143,17,0.704,18,1.484,19,4.148,20,1.263,21,0.541,22,0.45,25,1.331,28,0.666,30,1.163,32,0.602,33,0.027,34,0.541,35,0.347,39,0.748,41,3.331,45,1.314,47,3.456,49,0.565,50,1.048,55,0.261,56,0.554,62,0.012,63,0.017,64,0.012,68,1.177,69,1.519,70,1.101,101,0.965,138,2.517,197,0.546,205,0.432,212,1.424,253,2.321,256,4.716,350,4.535,422,1.858,441,1.126,567,1.785,570,1.683,591,4.039,593,1.626,645,1.559,715,1.35,716,2.172,720,3.142,727,3.085,819,3.673,880,2.517,1104,1.991,1113,2.439,1227,3.807,1417,3.105,1432,3.849,1496,5.691,1497,5.174,1498,5.174,1499,5.174,1500,5.174,1501,4.52,1502,4.52,1503,4.52,1504,4.52,1505,4.52,1506,4.52,1507,4.52,1508,3.822,1509,3.278,1510,3.278,1511,5.103,1512,4.52,1513,5.763,1514,3.278,1515,4.52,1516,2.439,1517,4.52,1518,2.772,1519,5.34,1520,4.52,1521,3.278,1522,4.52,1523,2.772,1524,4.52,1525,2.439,1526,4.52,1527,2.772,1528,4.52,1529,2.772,1530,5.174,1531,3.278,1532,4.52,1533,3.278,1534,3.278,1535,2.772,1536,5.174,1537,4.52,1538,3.278,1539,3.278,1540,3.278,1541,3.278,1542,4.52,1543,3.278,1544,4.52,1545,3.822,1546,4.52,1547,3.278,1548,3.278,1549,4.52,1550,3.278,1551,4.52,1552,3.278,1553,3.278,1554,3.278,1555,3.278,1556,3.278]],["title/classes/PhoenixMenuNode.html",[0,0.279,562,1.505]],["body/classes/PhoenixMenuNode.html",[0,0.186,2,0.203,3,0.16,4,0.139,5,0.099,8,0.475,9,2.614,11,2.93,12,0.85,14,1.929,16,0.099,17,0.539,18,1.196,21,0.523,22,0.345,25,0.892,28,0.661,30,1.37,32,0.582,33,0.027,34,0.615,35,0.35,36,2.128,39,0.669,45,1.398,49,0.576,50,0.928,54,0.326,55,0.276,56,0.576,62,0.008,63,0.013,64,0.008,92,0.953,101,0.539,151,1.244,169,1.561,176,2.104,197,0.766,205,0.731,212,1.155,225,1.155,290,2.532,312,1.505,335,1.116,348,1.923,354,0.817,374,2.637,375,2.578,441,1.129,452,2.578,515,3.069,524,1.619,534,5.006,543,3.423,545,2.09,562,2.966,567,1.292,576,3.136,593,1.956,594,2.64,595,3.625,634,3.423,643,0.874,645,1.082,701,2.05,716,1.244,728,1.266,736,3.712,861,1.168,881,2.578,912,2.315,934,4.35,972,2.315,998,1.532,1040,4.63,1231,1.266,1287,2.459,1442,3.178,1513,4.503,1557,1.692,1558,5.515,1559,4.199,1560,4.199,1561,4.199,1562,5.965,1563,4.852,1564,4.199,1565,5.367,1566,4.199,1567,4.199,1568,3.465,1569,3.465,1570,3.465,1571,3.465,1572,4.695,1573,2.93,1574,3.465,1575,3.465,1576,4.695,1577,1.923,1578,3.465,1579,4.827,1580,2.274,1581,2.274,1582,2.274,1583,4.503,1584,3.97,1585,3.465,1586,2.274,1587,2.274,1588,2.274,1589,2.274,1590,2.93,1591,2.274,1592,2.274,1593,2.274,1594,2.274,1595,2.274,1596,3.465,1597,3.97,1598,2.274,1599,3.424,1600,3.465,1601,2.274,1602,2.93,1603,3.465,1604,2.274,1605,4.827,1606,4.695,1607,4.695,1608,3.465,1609,2.274,1610,2.93,1611,2.274,1612,2.93,1613,2.274,1614,2.274,1615,3.465,1616,2.274,1617,3.465,1618,2.274,1619,3.465,1620,3.465,1621,2.274,1622,2.93,1623,1.692,1624,2.93,1625,1.692,1626,3.55,1627,1.923,1628,2.274,1629,5.054,1630,3.465,1631,3.465,1632,2.274,1633,2.274,1634,2.274,1635,3.465,1636,2.274,1637,2.274,1638,2.274,1639,2.274,1640,2.274,1641,2.274,1642,1.692,1643,2.274,1644,2.274,1645,2.274,1646,2.274,1647,2.274,1648,2.274,1649,2.274,1650,2.274,1651,4.199,1652,3.465,1653,3.465,1654,2.274,1655,2.274,1656,1.519,1657,2.274,1658,4.695,1659,2.274,1660,2.274,1661,2.274,1662,2.274,1663,4.199,1664,2.274,1665,2.274,1666,1.923,1667,2.274,1668,3.465,1669,2.274,1670,2.274,1671,2.274,1672,2.274,1673,3.465,1674,2.274,1675,2.274,1676,2.274,1677,4.199,1678,1.519,1679,1.923,1680,2.274,1681,2.274,1682,2.274,1683,3.465,1684,2.274,1685,4.199,1686,2.274,1687,2.274,1688,2.274,1689,2.274,1690,2.274,1691,2.274,1692,2.274,1693,2.274,1694,2.274,1695,2.274,1696,2.274,1697,4.199,1698,2.274,1699,2.274,1700,2.274,1701,2.274,1702,2.274,1703,2.274,1704,5.537,1705,2.274,1706,4.199,1707,2.274,1708,3.465,1709,2.274,1710,2.274,1711,2.274,1712,2.274,1713,2.274]],["title/classes/PhoenixMenuUI.html",[0,0.279,1714,2.533]],["body/classes/PhoenixMenuUI.html",[0,0.329,2,0.189,3,0.231,4,0.129,5,0.092,8,0.445,12,0.878,16,0.092,17,0.511,18,1.449,20,1.221,21,0.483,22,0.327,25,0.545,28,0.633,30,0.845,32,0.537,33,0.027,34,0.573,35,0.346,36,1.881,39,0.485,45,0.902,49,0.533,50,0.927,54,0.471,55,0.169,56,0.56,62,0.008,63,0.012,64,0.008,69,1.088,70,1.102,72,2.249,73,2.152,75,1.179,87,1.624,92,1.535,94,0.817,95,1.42,99,1.522,101,0.704,151,2.373,155,1.088,156,1.088,173,2.658,178,0.712,179,1.287,191,1.2,197,0.674,205,0.433,209,2.972,212,1.347,223,2.462,225,1.105,247,2.654,250,2.44,254,2.834,257,1.993,277,3.397,308,2.192,312,0.545,335,1.169,374,2.288,377,2.725,383,2.725,418,1.561,441,1.092,472,2.441,493,3.269,502,2.466,503,2.658,512,1.576,515,1.287,524,1.534,542,3.606,543,3.292,545,1.965,548,2.775,562,2.896,564,2.441,566,3.486,567,1.687,578,1.792,593,2.138,594,2.669,595,3.349,597,4.378,598,2.658,629,1.561,631,1.18,632,1.576,633,1.415,634,3.292,643,2.587,645,1.911,646,5.116,686,3.825,701,1.624,716,1.443,720,2.152,721,2.192,724,1.685,725,1.352,728,1.827,736,3.569,755,3.851,809,2.658,819,1.287,822,2.192,838,1.576,839,1.827,840,2.654,841,3.397,842,3.397,844,3.397,848,2.988,849,3.825,850,2.775,851,3.397,852,3.825,853,2.775,854,2.775,856,4.139,859,2.519,861,1.685,862,1.685,865,1.827,868,3.388,869,1.792,875,1.792,876,4.094,878,3.365,879,2.683,880,1.827,881,2.441,883,2.441,884,2.775,885,2.775,886,2.775,888,2.441,889,3.825,890,1.792,891,3.641,893,2.192,894,2.441,895,2.441,897,2.775,899,3.851,900,3.022,901,2.775,903,3.397,904,2.775,906,2.775,913,1.576,914,1.792,926,4.378,927,3.825,928,3.825,933,2.441,941,4.378,942,4.378,949,1.792,955,2.775,962,1.792,967,1.792,971,1.792,995,1.792,1007,1.792,1009,1.792,1012,1.792,1017,2.775,1021,1.792,1031,3.397,1032,3.397,1036,1.792,1040,2.441,1041,2.775,1042,2.775,1043,2.775,1044,2.775,1047,2.775,1067,1.792,1071,1.792,1231,1.18,1287,1.738,1439,1.576,1583,2.775,1599,1.18,1666,1.792,1714,2.441,1715,4.017,1716,3.641,1717,4.524,1718,4.524,1719,3.282,1720,3.282,1721,3.282,1722,2.119,1723,2.119,1724,2.119,1725,2.119,1726,2.119,1727,2.119,1728,2.119,1729,4.139,1730,2.119,1731,2.119,1732,2.119,1733,2.119,1734,2.119,1735,2.119,1736,3.282,1737,5.853,1738,2.119,1739,4.894,1740,3.282,1741,4.017,1742,2.119,1743,2.119,1744,2.119,1745,3.282,1746,4.017,1747,2.119,1748,1.792,1749,2.119,1750,3.282,1751,2.119,1752,2.119,1753,2.119,1754,2.119,1755,2.119,1756,2.119,1757,2.775,1758,4.139,1759,2.119,1760,3.282,1761,2.119,1762,2.119,1763,2.119,1764,2.119,1765,2.119,1766,2.119,1767,3.282,1768,2.119,1769,2.119,1770,2.119,1771,2.119,1772,2.119,1773,2.119,1774,2.119,1775,2.119,1776,3.282,1777,2.119,1778,2.119,1779,2.119,1780,2.119,1781,1.792,1782,2.119,1783,2.119,1784,2.119,1785,2.119,1786,2.119,1787,2.119,1788,2.119,1789,2.119,1790,2.119,1791,2.119,1792,2.119,1793,3.282,1794,2.119,1795,2.119,1796,2.119,1797,2.119,1798,2.119,1799,2.119,1800,2.119,1801,2.119,1802,2.119,1803,2.119,1804,2.119,1805,2.119]],["title/classes/PhoenixObjects.html",[0,0.279,421,2.274]],["body/classes/PhoenixObjects.html",[0,0.225,2,0.246,3,0.385,4,0.168,5,0.12,8,0.49,16,0.12,17,0.429,18,1.159,20,0.936,21,0.54,22,0.398,28,0.601,32,0.689,33,0.027,34,0.54,35,0.344,39,0.568,49,0.572,54,0.942,55,0.219,56,0.461,62,0.01,63,0.015,64,0.01,93,2.353,94,0.482,96,2.052,119,2.415,136,1.535,137,2.048,151,1.688,159,2.669,166,2.649,169,1.737,172,4.275,173,3.027,175,2.454,178,0.681,180,2.328,181,1.672,182,1.9,183,2.669,184,3.141,185,2.328,186,3.378,187,3.626,188,2.048,190,1.31,191,0.577,197,0.824,199,1.839,201,2.669,205,0.812,212,1.693,221,2.426,225,1.099,252,3.937,253,1.414,254,2.899,264,2.426,275,4.362,282,2.048,289,2.048,297,2.855,300,4.71,307,2.855,312,1.328,316,3.976,335,0.985,353,2.048,360,5.354,382,2.048,383,1.533,416,2.048,417,2.052,418,1.9,421,2.669,422,2.415,426,3.796,429,2.244,432,2.048,434,3.378,435,1.839,436,2.328,441,0.463,472,2.048,475,3.446,478,2.972,518,3.837,519,4.632,520,2.328,521,3.378,522,2.328,593,1.621,621,1.645,695,1.766,719,3.378,739,1.533,742,2.426,751,3.976,753,2.328,756,2.048,797,2.328,798,3.378,799,2.328,880,2.224,996,2.048,998,1.217,1183,2.972,1194,3.05,1275,2.328,1286,1.414,1308,3.326,1351,3.446,1373,3.937,1374,1.672,1495,3.378,1678,1.839,1806,5.204,1807,3.995,1808,4.702,1809,3.995,1810,3.995,1811,3.995,1812,3.995,1813,3.995,1814,3.995,1815,2.753,1816,2.753,1817,4.362,1818,3.995,1819,3.995,1820,2.753,1821,6.461,1822,5.159,1823,3.995,1824,3.995,1825,3.995,1826,3.995,1827,2.753,1828,2.753,1829,3.995,1830,3.995,1831,2.753,1832,4.702,1833,3.995,1834,3.995,1835,2.753,1836,3.995,1837,3.995,1838,2.753,1839,4.702,1840,2.753,1841,5.159,1842,2.753,1843,4.702,1844,3.378,1845,3.995,1846,3.995,1847,2.753,1848,2.753,1849,2.753,1850,3.995,1851,2.753,1852,3.995,1853,1.839,1854,2.753,1855,2.753,1856,2.753,1857,2.753,1858,2.328,1859,3.995,1860,2.753,1861,2.753,1862,3.995,1863,2.753,1864,2.753,1865,2.753,1866,2.753,1867,2.753,1868,3.995,1869,4.702,1870,2.753,1871,4.702,1872,2.753,1873,5.478,1874,2.753,1875,4.702,1876,2.753,1877,2.753,1878,3.378,1879,2.753,1880,5.105,1881,2.753,1882,2.753,1883,2.753,1884,2.753,1885,3.995,1886,2.753,1887,2.753,1888,2.753,1889,2.753,1890,4.362,1891,3.446,1892,3.837,1893,2.753,1894,2.753,1895,5.478,1896,2.753,1897,4.702,1898,4.702,1899,2.753,1900,2.753,1901,3.995,1902,2.753,1903,2.328,1904,2.753,1905,2.753,1906,2.753,1907,2.753,1908,2.753,1909,2.048,1910,3.995,1911,2.328,1912,2.753,1913,2.753,1914,2.753,1915,2.753,1916,2.753,1917,2.753,1918,3.995,1919,3.995,1920,2.753,1921,2.753,1922,2.753,1923,2.753,1924,2.753,1925,2.753,1926,2.753,1927,2.753,1928,2.753,1929,2.753,1930,2.753,1931,2.753,1932,2.753,1933,2.753,1934,3.995,1935,2.753,1936,2.753,1937,2.753,1938,2.753,1939,2.753,1940,3.995,1941,2.753,1942,2.753,1943,2.753,1944,2.753,1945,2.753,1946,2.753,1947,2.753,1948,2.328,1949,2.753,1950,2.753,1951,2.328,1952,2.048,1953,2.753,1954,2.753]],["title/classes/PresetView.html",[0,0.279,729,2.274]],["body/classes/PresetView.html",[0,0.364,2,0.397,3,0.312,4,0.271,5,0.193,8,0.44,16,0.193,17,0.859,20,1.233,21,0.397,22,0.549,25,1.144,28,0.655,30,1.42,32,0.442,33,0.027,34,0.615,35,0.337,45,0.998,49,0.493,50,0.692,55,0.354,56,0.537,62,0.016,63,0.02,64,0.016,89,2.658,101,1.005,136,2.528,205,0.586,220,4.192,354,2.362,441,1.163,714,3.223,718,4.276,729,3.685,730,5.193,731,3.305,1563,5.206,1577,4.666,1626,3.757,1627,5.075,1955,5.64,1956,3.757,1957,4.443,1958,4.443,1959,3.305,1960,6.74,1961,6.002,1962,6.277,1963,5.518,1964,6.277,1965,4.443,1966,4.443,1967,4.443,1968,4.443,1969,4.443,1970,4.443,1971,4.443]],["title/classes/PrettySymbols.html",[0,0.279,631,1.896]],["body/classes/PrettySymbols.html",[0,0.337,2,0.369,3,0.29,4,0.252,5,0.18,8,0.462,12,0.544,16,0.18,17,0.819,20,1.052,21,0.471,22,0.524,28,0.577,30,1.061,32,0.653,33,0.027,34,0.471,35,0.337,39,0.498,49,0.519,54,0.756,55,0.329,56,0.564,62,0.015,63,0.02,64,0.015,99,1.213,133,1.961,166,2.117,169,1.761,197,0.762,205,0.765,287,3.487,417,2.703,422,2.409,441,1.086,475,2.754,517,4.802,567,1.135,570,2.703,572,2.931,579,2.931,631,2.931,633,4.311,637,3.516,677,3.487,695,2.327,697,3.067,715,2.388,742,2.504,759,3.916,760,3.516,774,3.916,1291,3.197,1292,3.197,1454,3.487,1642,4.545,1952,4.545,1972,5.166,1973,3.487,1974,6.901,1975,4.904,1976,5.264,1977,5.264,1978,5.166,1979,5.264,1980,6.109,1981,6.109,1982,6.109,1983,4.124,1984,5.264,1985,4.124,1986,6.643,1987,5.264,1988,5.264,1989,4.124,1990,6.561,1991,6.312,1992,5.799,1993,4.124,1994,4.124,1995,4.124,1996,4.124,1997,5.799,1998,4.124,1999,5.264,2000,4.124,2001,4.124,2002,4.124,2003,5.264,2004,4.124,2005,4.124,2006,4.124,2007,4.124,2008,4.124,2009,3.487,2010,4.124,2011,6.109,2012,4.124,2013,4.124,2014,4.124,2015,5.264,2016,4.124,2017,4.124,2018,4.124,2019,4.124,2020,4.124,2021,4.124]],["title/classes/RKHelper.html",[0,0.279,1853,2.274]],["body/classes/RKHelper.html",[0,0.343,2,0.375,3,0.294,4,0.256,5,0.182,8,0.466,12,0.553,16,0.182,20,0.965,21,0.476,22,0.612,28,0.529,32,0.529,33,0.027,34,0.476,35,0.321,39,0.705,45,1.313,49,0.602,50,0.652,55,0.334,56,0.522,62,0.016,63,0.02,64,0.016,74,3.421,92,1.463,94,0.642,99,1.564,101,0.828,134,2.333,136,2.044,166,2.731,172,4.105,175,2.53,178,0.771,182,2.779,191,0.878,197,0.795,205,0.702,212,1.463,247,3.17,252,4.451,274,2.961,312,1.369,335,1.358,422,2.327,475,2.798,524,1.078,671,2.798,673,3.543,697,3.117,715,2.19,739,2.333,741,3.117,742,3.548,743,3.117,760,3.902,772,3.543,774,4.346,787,3.117,1194,2.961,1284,2.798,1285,2.798,1286,3.381,1291,2.544,1292,3.732,1296,4.105,1368,2.798,1374,3.732,1375,3.552,1376,3.229,1377,3.552,1853,3.552,1858,5.197,2009,4.497,2022,4.94,2023,5.842,2024,5.318,2025,4.19,2026,4.19,2027,5.318,2028,5.318,2029,4.497,2030,5.318,2031,5.842,2032,4.19,2033,4.19,2034,4.19,2035,4.19,2036,4.19,2037,4.19,2038,4.19,2039,4.19,2040,4.19,2041,4.19,2042,4.19,2043,4.19,2044,4.19,2045,4.19,2046,4.19,2047,4.19,2048,4.19,2049,4.19,2050,4.19,2051,4.19,2052,3.543,2053,4.19,2054,4.19,2055,4.19,2056,4.19,2057,4.19,2058,4.19,2059,4.19,2060,4.19,2061,4.19]],["title/classes/RendererManager.html",[0,0.279,90,2.274]],["body/classes/RendererManager.html",[0,0.205,2,0.224,3,0.176,4,0.153,5,0.109,8,0.506,12,0.806,16,0.194,17,0.579,18,1.478,20,1.223,21,0.561,22,0.37,25,1.144,28,0.666,30,0.958,32,0.625,33,0.027,34,0.561,35,0.339,39,0.595,49,0.601,50,0.977,54,0.534,55,0.199,56,0.577,62,0.009,63,0.014,64,0.009,66,3.196,68,0.898,69,1.328,70,1.25,71,1.67,72,1.43,75,2.109,87,2.109,89,2.553,90,2.486,94,0.709,97,2.26,98,3.927,99,1.307,101,0.389,107,3.567,119,1.911,153,3.147,169,0.958,178,0.33,191,0.78,197,0.738,205,0.754,212,1.223,225,1.024,253,2.529,290,1.029,312,1.144,335,0.931,354,2.254,371,4.37,374,1.645,377,2.504,418,2.342,441,0.929,524,1.616,567,1.024,574,1.77,590,4.277,704,1.854,708,3.289,718,2.26,720,2.342,721,3.289,722,2.742,819,1.518,880,2.072,912,2.486,915,1.911,922,3.352,923,2.114,924,2.114,990,2.475,1088,3.924,1095,5.206,1099,2.529,1100,4.72,1102,3.924,1103,4.37,1104,2.26,1106,1.86,1110,2.768,1112,2.768,1149,2.114,1195,4.051,1207,3.289,1523,2.114,1525,1.86,1527,2.114,1890,3.147,2062,5.682,2063,4.446,2064,4.925,2065,5.265,2066,6.741,2067,3.722,2068,3.722,2069,4.925,2070,4.925,2071,4.925,2072,4.925,2073,2.768,2074,3.722,2075,4.925,2076,3.722,2077,3.722,2078,3.722,2079,3.722,2080,3.722,2081,3.722,2082,3.722,2083,3.722,2084,4.502,2085,5.167,2086,2.5,2087,2.5,2088,3.722,2089,3.722,2090,3.722,2091,2.5,2092,3.722,2093,2.5,2094,3.722,2095,3.722,2096,2.5,2097,2.5,2098,2.5,2099,2.5,2100,4.925,2101,3.722,2102,2.114,2103,3.722,2104,3.722,2105,2.5,2106,3.722,2107,2.114,2108,3.722,2109,3.722,2110,3.722,2111,2.5,2112,3.722,2113,2.5,2114,3.722,2115,2.5,2116,3.147,2117,3.759,2118,3.759,2119,3.722,2120,3.722,2121,2.5,2122,3.722,2123,5.52,2124,2.5,2125,3.722,2126,4.925,2127,4.925,2128,4.925,2129,2.5,2130,2.5,2131,1.86,2132,2.5,2133,2.5,2134,1.86,2135,2.5,2136,2.5,2137,2.5,2138,2.5,2139,2.5,2140,3.722,2141,4.446,2142,2.5,2143,2.5,2144,4.446,2145,2.5,2146,3.722,2147,2.5,2148,4.446,2149,3.722,2150,2.5,2151,3.722,2152,2.5,2153,2.5,2154,2.5,2155,2.5,2156,2.5,2157,3.722,2158,2.5,2159,2.5,2160,3.722,2161,4.925,2162,2.5,2163,2.5,2164,2.5,2165,2.5,2166,3.722,2167,2.5,2168,2.5,2169,2.5,2170,3.722]],["title/classes/RungeKutta.html",[0,0.279,1286,1.749]],["body/classes/RungeKutta.html",[0,0.426,2,0.297,3,0.233,4,0.203,5,0.145,8,0.415,12,0.438,16,0.145,17,0.71,21,0.408,22,0.454,24,2.016,28,0.454,32,0.454,33,0.027,34,0.408,35,0.272,39,0.401,45,1.17,49,0.566,50,0.517,54,0.477,55,0.265,56,0.566,62,0.017,63,0.017,64,0.012,73,2.169,74,2.539,92,1.255,101,1.072,119,1.705,133,2.169,134,3.122,136,2.499,139,1.848,156,3.018,166,2.879,168,2.769,175,2.169,178,0.438,182,3.284,191,0.696,197,0.751,205,0.602,223,3.149,225,1.255,264,3.405,274,2.539,290,1.367,312,1.174,335,1.175,356,3.045,422,2.18,429,2.013,524,0.854,572,2.9,579,3.122,598,2.341,621,2.309,672,3.045,695,2.684,715,1.367,839,2.539,1139,3.745,1277,3.479,1278,2.217,1283,4.171,1284,4.479,1285,4.479,1286,2.341,1287,2.544,1288,3.392,1289,3.392,1290,3.392,1291,3.687,1292,3.687,1293,2.47,1294,2.47,1295,2.47,1296,3.925,1297,2.47,1298,2.47,1299,2.47,1300,2.47,1301,4.171,1302,3.874,1303,3.392,1304,3.392,1305,4.626,1306,4.712,1307,4.171,1308,3.405,1309,2.47,1310,2.47,1311,2.47,1312,4.781,1313,2.47,1314,2.217,1315,4.712,1316,2.47,1317,2.47,1318,4.371,1319,4.837,1320,2.47,1321,4.626,1322,2.47,1323,2.47,1324,2.47,1325,3.392,1326,2.47,1327,3.392,1328,3.874,1329,2.47,1330,2.47,1331,2.47,1332,2.47,1333,2.47,1334,2.47,1335,2.47,1336,2.47,1337,2.47,1338,2.47,1339,2.47,1340,2.47,1341,2.47,1342,2.47,1343,2.47,1344,2.47,1345,1.848,1346,2.47,1347,3.874,1348,3.392,1349,2.47,1350,3.874,1351,2.217,1352,3.874,1353,3.392,1354,2.47,1355,2.47,1356,2.47,1357,2.47,1358,2.47,1359,2.47,1360,2.47,1361,2.47,1362,2.47,1363,2.47,1364,2.47,1365,4.371,1366,4.171,1367,4.171,1368,3.925,1369,3.405,1370,4.371,1371,4.171,1372,2.769,1373,3.045,1374,3.405,1375,3.045,1376,2.769,1377,3.045,1378,3.392,1379,2.47,1380,2.47,1381,2.47,1382,2.47,1383,2.47,1384,2.47,1385,2.47,2171,3.32,2172,3.32,2173,3.32]],["title/classes/ScriptLoader.html",[0,0.279,2174,2.533]],["body/classes/ScriptLoader.html",[0,0.327,2,0.357,3,0.281,4,0.244,5,0.174,8,0.455,10,1.767,12,0.681,16,0.174,20,0.936,21,0.54,22,0.513,28,0.513,32,0.513,33,0.027,34,0.461,35,0.269,36,1.536,39,0.623,41,2.65,49,0.54,54,0.82,55,0.318,56,0.54,62,0.015,63,0.019,64,0.015,69,0.962,94,0.623,95,1.265,99,1.175,178,0.527,197,0.797,205,0.681,212,1.1,257,2.427,309,4.363,335,1.081,399,2.65,422,2.299,441,1.122,567,1.1,714,3.101,716,2.339,722,2.873,725,2.125,727,2.872,813,3.838,996,2.973,998,1.767,1158,2.427,1227,3.362,1417,3.481,1450,4.363,1565,4.363,2174,3.838,2175,4.251,2176,5.164,2177,6.039,2178,5.16,2179,5.286,2180,4.832,2181,5.714,2182,5.714,2183,3.997,2184,3.997,2185,5.16,2186,4.113,2187,5.714,2188,5.106,2189,4.363,2190,6.039,2191,4.409,2192,5.16,2193,4.251,2194,5.16,2195,3.997,2196,6.67,2197,6.039,2198,5.714,2199,3.997,2200,6.252,2201,5.16,2202,5.16,2203,5.16,2204,3.38,2205,3.38,2206,3.38,2207,3.997,2208,3.997,2209,3.997,2210,5.16,2211,3.997,2212,3.997,2213,3.997,2214,3.997,2215,3.997,2216,3.38,2217,3.997,2218,3.997,2219,3.997,2220,3.997,2221,5.16,2222,3.997,2223,3.997,2224,3.997,2225,3.997,2226,3.997,2227,3.997,2228,3.997,2229,3.997,2230,3.997,2231,5.16,2232,3.997,2233,6.039,2234,6.039,2235,3.997,2236,3.997,2237,3.997,2238,3.997,2239,3.997,2240,3.997]],["title/classes/SelectionManager.html",[0,0.279,2241,2.533]],["body/classes/SelectionManager.html",[0,0.197,1,2.886,2,0.216,3,0.169,4,0.147,5,0.105,8,0.45,10,1.065,12,0.718,16,0.105,17,0.753,18,1.569,20,1.163,21,0.464,22,0.36,25,1.334,28,0.663,31,2.693,32,0.542,33,0.027,34,0.52,35,0.339,39,0.584,41,2.796,45,1.223,49,0.541,50,0.847,54,0.811,55,0.192,56,0.541,62,0.009,63,0.013,64,0.009,66,3.182,68,0.865,69,1.479,70,1.828,72,1.391,75,1.736,87,2.41,89,2.679,91,1.793,92,1.331,93,2.134,94,0.815,95,1.217,96,3.109,97,2.199,99,1.065,101,0.375,169,1.768,178,0.718,187,3.031,190,1.722,191,0.505,197,0.742,205,0.638,206,3.371,212,1.197,221,1.463,225,0.996,243,4.05,253,1.859,312,0.62,335,1.141,354,1.955,374,1.6,426,1.463,429,1.736,441,1,500,2.418,501,2.483,507,4.089,510,2.038,524,1.454,567,0.663,570,2.233,574,1.722,603,4.686,621,1.491,631,1.342,632,1.793,633,1.609,695,1.6,704,2.17,715,1.791,723,3.462,726,1.609,922,3.306,998,1.065,1078,4.248,1080,3.856,1081,4.322,1082,4.604,1083,4.089,1084,4.089,1099,2.796,1102,4.044,1103,3.597,1115,3.062,1116,4.089,1117,4.05,1118,4.604,1127,3.062,1134,3.062,1135,2.038,1174,3.266,1187,2.418,1188,3.23,1205,3.23,1210,1.793,1396,3.637,1397,3.597,1401,3.235,1404,3.23,1516,1.793,1518,2.038,1529,2.038,1545,2.038,1678,1.609,1891,4.207,1892,4.731,1909,2.693,1911,2.038,2073,3.235,2131,2.693,2241,2.693,2242,5.657,2243,4.349,2244,4.349,2245,4.349,2246,4.349,2247,4.349,2248,4.349,2249,4.349,2250,4.604,2251,4.836,2252,4.836,2253,4.089,2254,3.621,2255,3.621,2256,3.621,2257,3.621,2258,3.062,2259,2.038,2260,2.41,2261,3.621,2262,3.621,2263,2.41,2264,2.038,2265,3.621,2266,2.41,2267,6.299,2268,5.445,2269,2.41,2270,4.836,2271,2.41,2272,2.693,2273,3.621,2274,3.621,2275,2.41,2276,2.41,2277,2.41,2278,2.693,2279,4.913,2280,2.41,2281,3.062,2282,2.038,2283,3.062,2284,3.062,2285,3.621,2286,3.621,2287,2.41,2288,2.41,2289,3.621,2290,2.41,2291,4.349,2292,3.621,2293,3.621,2294,3.621,2295,2.41,2296,4.349,2297,2.41,2298,2.41,2299,2.41,2300,2.41,2301,1.793,2302,2.41,2303,4.349,2304,2.41,2305,2.41,2306,2.41,2307,2.41,2308,2.038,2309,2.41,2310,2.41,2311,2.41,2312,2.41,2313,2.41,2314,2.41,2315,2.41,2316,4.604,2317,5.445,2318,2.41,2319,3.621,2320,2.41,2321,4.349,2322,2.41,2323,3.621,2324,2.41,2325,2.41,2326,2.41,2327,2.41,2328,2.41,2329,2.41,2330,4.349,2331,2.41,2332,5.184,2333,2.41,2334,2.41,2335,2.41,2336,2.41,2337,3.621,2338,2.41,2339,2.41,2340,2.41,2341,2.41,2342,2.41,2343,2.41,2344,2.41,2345,2.41,2346,2.41,2347,2.41,2348,2.41,2349,2.41,2350,2.41,2351,2.41,2352,2.41,2353,2.41,2354,3.621,2355,2.41,2356,1.793,2357,2.038,2358,2.41,2359,2.41,2360,2.41,2361,2.41,2362,2.41,2363,3.621,2364,2.41,2365,2.41,2366,2.41,2367,2.41,2368,2.41,2369,2.41,2370,2.41,2371,2.41,2372,2.41,2373,2.41,2374,2.41,2375,2.41,2376,2.41,2377,2.41,2378,2.41,2379,2.41,2380,2.41]],["title/classes/State.html",[0,0.279,1287,1.309]],["body/classes/State.html",[0,0.376,2,0.301,3,0.236,4,0.205,5,0.146,8,0.268,12,0.838,16,0.146,17,0.816,24,2.041,28,0.632,33,0.027,35,0.331,39,0.767,45,0.755,49,0.504,54,0.752,55,0.268,56,0.568,62,0.017,63,0.017,64,0.012,73,1.598,74,1.871,92,0.925,101,1.064,109,2.5,119,1.726,133,1.598,134,2.918,136,2.397,139,1.871,155,1.726,156,3.031,166,3.031,168,2.792,175,1.598,178,0.443,182,3.262,191,0.704,197,0.753,205,0.607,212,1.677,223,3.021,225,1.265,264,3.422,274,1.871,290,1.384,297,2.792,312,0.865,335,0.963,356,3.071,422,1.651,429,1.651,524,0.865,572,2.918,579,3.138,598,2.361,621,1.893,672,2.245,695,2.694,839,1.871,1139,3.071,1277,4.304,1278,2.245,1283,3.42,1284,4.353,1285,4.353,1286,1.726,1287,2.476,1288,2.5,1289,2.5,1290,2.5,1291,3.7,1292,3.7,1293,2.5,1294,2.5,1295,2.5,1296,3.942,1297,2.5,1298,2.5,1299,2.5,1300,2.5,1301,4.192,1302,3.899,1303,3.42,1304,3.42,1305,4.641,1306,4.725,1307,4.192,1308,3.422,1309,2.5,1310,2.5,1311,2.5,1312,4.793,1313,2.5,1314,2.245,1315,4.725,1316,2.5,1317,2.5,1318,4.39,1319,4.849,1320,2.5,1321,4.641,1322,2.5,1323,2.5,1324,2.5,1325,3.42,1326,2.5,1327,3.42,1328,3.899,1329,2.5,1330,2.5,1331,2.5,1332,2.5,1333,2.5,1334,2.5,1335,2.5,1336,2.5,1337,2.5,1338,2.5,1339,2.5,1340,2.5,1341,2.5,1342,2.5,1343,2.5,1344,2.5,1345,1.871,1346,2.5,1347,3.899,1348,3.42,1349,2.5,1350,3.899,1351,2.245,1352,3.899,1353,3.42,1354,2.5,1355,2.5,1356,2.5,1357,2.5,1358,2.5,1359,2.5,1360,2.5,1361,2.5,1362,2.5,1363,2.5,1364,2.5,1365,3.42,1366,3.42,1367,3.42,1368,3.501,1369,3.183,1370,3.899,1371,3.42,1372,2.792,1373,3.071,1374,2.792,1375,2.245,1376,2.041,1377,2.245,1378,4.192,1379,2.5,1380,2.5,1381,2.5,1382,2.5,1383,2.5,1384,2.5,1385,2.5,2381,4.598,2382,4.598,2383,4.598,2384,4.598,2385,3.361,2386,3.361,2387,3.361,2388,3.361,2389,3.361,2390,3.361,2391,3.361,2392,3.361,2393,3.361,2394,2.842]],["title/classes/StateManager.html",[0,0.279,1418,1.896]],["body/classes/StateManager.html",[0,0.266,1,1.809,2,0.291,3,0.228,4,0.198,5,0.141,8,0.493,9,2.501,10,1.436,12,0.679,16,0.141,17,0.699,18,1.157,21,0.539,22,0.447,25,1.325,28,0.672,30,1.156,32,0.6,33,0.027,34,0.539,35,0.344,39,0.622,49,0.579,50,0.962,54,0.798,55,0.259,56,0.539,62,0.012,63,0.017,64,0.012,68,1.167,69,1.573,70,1.509,87,1.613,88,4.355,89,2.768,91,2.417,94,0.772,101,0.802,107,4.06,169,1.501,178,0.769,191,0.681,197,0.542,205,0.593,220,4.209,290,1.85,312,0.836,354,2.325,377,1.546,422,2.166,441,1.015,524,1.325,562,2.666,567,0.894,591,4.325,593,1.895,594,2.376,595,3.236,629,2.643,634,1.669,643,1.727,645,1.546,704,2.148,711,5.1,715,1.338,716,1.995,728,3.442,736,1.809,840,1.546,915,3.412,1101,2.748,1102,3.711,1104,1.973,1106,2.417,1109,2.748,1113,2.417,1125,2.748,1199,3.001,1219,2.417,1227,2.501,1231,3.093,1235,2.748,1242,3.001,1243,2.748,1287,2.659,1418,3.358,1442,3.605,1488,4.355,1490,4.355,1508,3.799,1573,3.799,1599,1.809,1612,3.799,1678,2.17,1679,2.748,1716,2.417,1757,3.799,1758,3.799,2264,2.748,2301,2.417,2395,5.736,2396,4.493,2397,5.556,2398,5.15,2399,5.15,2400,5.556,2401,5.556,2402,4.493,2403,4.493,2404,4.493,2405,4.493,2406,4.493,2407,4.493,2408,4.493,2409,5.556,2410,4.493,2411,3.25,2412,3.25,2413,4.493,2414,3.25,2415,4.493,2416,3.25,2417,4.493,2418,4.493,2419,3.25,2420,4.493,2421,3.25,2422,4.493,2423,2.417,2424,5.556,2425,5.15,2426,3.25,2427,3.25,2428,3.25,2429,3.25,2430,3.25,2431,3.25,2432,3.25,2433,3.25,2434,3.25,2435,3.25,2436,3.25,2437,3.25,2438,3.25,2439,3.25,2440,3.25,2441,3.25,2442,3.25,2443,3.25,2444,3.25,2445,3.25,2446,3.25,2447,3.799,2448,2.748,2449,3.25,2450,3.25,2451,3.25,2452,3.25]],["title/classes/URLOptionsManager.html",[0,0.279,2453,2.274]],["body/classes/URLOptionsManager.html",[0,0.261,2,0.285,3,0.358,4,0.195,5,0.277,8,0.439,10,1.96,12,0.585,16,0.139,17,0.69,18,1.409,20,1.193,21,0.456,22,0.441,25,1.418,28,0.612,32,0.576,33,0.027,34,0.456,35,0.35,36,1.704,39,0.665,49,0.518,50,0.901,54,0.791,55,0.353,56,0.518,62,0.012,63,0.016,64,0.012,68,1.145,69,1.393,70,1.489,92,1.22,94,0.813,95,1.155,133,2.109,169,0.82,175,2.109,178,0.764,197,0.757,205,0.421,235,1.637,312,1.141,335,1.256,406,4.666,429,1.592,441,1.097,461,3.749,463,3.749,545,2.251,570,1.637,574,2.755,576,2.961,593,1.82,594,2.41,604,4.189,609,3.298,635,2.692,701,2.361,704,2.065,714,3.579,715,1.826,716,2.08,717,4.308,722,2.468,723,2.961,724,2.277,725,2.269,727,1.516,757,2.468,837,3.298,840,2.109,915,3.158,1096,3.298,1100,3.298,1205,2.129,1252,2.129,1287,1.225,1345,2.468,1372,2.692,1412,2.961,1418,2.838,1442,2.838,1599,2.838,1605,3.749,1716,3.298,1959,3.298,2084,3.68,2258,2.696,2316,3.749,2447,2.696,2453,2.961,2454,4.666,2455,5.098,2456,5.51,2457,5.098,2458,5.51,2459,5.51,2460,4.434,2461,3.188,2462,5.098,2463,4.434,2464,3.188,2465,4.66,2466,4.099,2467,5.07,2468,3.188,2469,5.792,2470,3.188,2471,4.66,2472,5.51,2473,5.51,2474,2.696,2475,4.434,2476,4.434,2477,3.188,2478,5.996,2479,4.434,2480,3.749,2481,3.188,2482,3.188,2483,2.696,2484,2.696,2485,2.371,2486,3.188,2487,3.188,2488,3.188,2489,3.188,2490,3.188,2491,3.188,2492,3.188,2493,3.188,2494,3.188,2495,3.188,2496,1.936,2497,4.434,2498,3.188,2499,3.188,2500,5.098,2501,3.188,2502,3.188,2503,3.188,2504,4.311,2505,3.749,2506,3.188,2507,3.188,2508,3.749,2509,3.188,2510,3.188,2511,3.188,2512,3.188,2513,4.434,2514,3.188,2515,3.188,2516,3.188,2517,3.188,2518,3.188,2519,2.696,2520,2.696,2521,3.188,2522,3.188,2523,3.188,2524,4.434,2525,4.434,2526,4.434,2527,4.434,2528,4.434,2529,4.434,2530,3.749,2531,4.434,2532,3.188,2533,3.188,2534,4.434,2535,3.188,2536,3.188,2537,3.188,2538,3.188,2539,3.188,2540,3.188]],["title/classes/VRManager.html",[0,0.279,2541,2.533]],["body/classes/VRManager.html",[0,0.209,2,0.229,3,0.18,4,0.156,5,0.111,8,0.423,9,3.292,12,0.701,16,0.111,17,0.589,18,1.566,20,1.213,21,0.403,22,0.377,28,0.668,32,0.495,33,0.027,34,0.445,35,0.344,36,1.731,39,0.642,41,2.857,45,1.194,47,3.154,48,2.162,49,0.549,50,0.97,54,0.827,55,0.204,56,0.515,62,0.009,63,0.014,64,0.009,66,3.204,68,0.918,69,0.91,72,1.454,73,1.8,87,1.359,89,2.854,92,1.37,94,0.457,96,2.857,98,3.469,101,0.701,120,3.199,126,3.809,135,3.55,136,1.731,139,1.423,140,4.139,164,2.162,167,2.815,176,1.552,178,0.499,181,1.552,182,2.528,190,3.082,191,0.536,197,0.695,205,0.594,206,3.206,212,1.239,223,1.216,225,0.703,254,1.13,288,3.199,290,1.558,297,2.298,312,1.159,335,0.536,354,2.206,371,1.902,377,2.143,399,2.557,410,2.162,418,2.368,422,1.617,429,1.788,441,0.637,518,3.351,524,1.432,629,2.368,645,1.216,704,1.271,720,1.216,790,2.162,862,1.943,1095,4.139,1096,1.902,1099,3.036,1179,3.009,1219,1.902,1345,2.107,1369,3.83,1511,1.902,1516,1.902,1519,4.21,1525,1.902,1610,2.162,1623,3.704,1625,4.139,1748,2.162,1844,3.199,1878,2.162,1948,2.162,1975,3.809,2102,2.162,2107,2.162,2191,1.707,2259,2.162,2272,2.815,2282,2.162,2394,2.162,2474,2.162,2519,2.162,2541,2.815,2542,5.697,2543,5.26,2544,4.505,2545,4.505,2546,4.505,2547,4.505,2548,4.505,2549,4.505,2550,4.505,2551,4.505,2552,5,2553,4.505,2554,4.505,2555,4.505,2556,4.505,2557,4.505,2558,4.979,2559,3.784,2560,4.979,2561,4.979,2562,3.784,2563,4.979,2564,4.505,2565,2.556,2566,5.106,2567,5.913,2568,2.556,2569,4.979,2570,2.556,2571,5.079,2572,3.784,2573,3.784,2574,2.556,2575,2.556,2576,2.556,2577,2.815,2578,2.556,2579,3.784,2580,2.556,2581,2.556,2582,3.784,2583,2.556,2584,3.784,2585,3.784,2586,5.913,2587,3.784,2588,2.556,2589,3.784,2590,2.556,2591,5.315,2592,2.556,2593,3.784,2594,3.784,2595,2.556,2596,2.162,2597,2.556,2598,2.556,2599,4.505,2600,2.556,2601,2.556,2602,2.556,2603,2.556,2604,3.784,2605,2.556,2606,2.556,2607,3.784,2608,2.556,2609,3.784,2610,2.556,2611,2.556,2612,2.556,2613,2.556,2614,2.556,2615,2.556,2616,2.556,2617,2.556,2618,2.556,2619,4.979,2620,2.556,2621,3.784,2622,2.556,2623,3.784,2624,2.556,2625,3.784,2626,3.784,2627,4.505,2628,2.556,2629,4.505,2630,4.979,2631,2.556,2632,3.784,2633,2.556,2634,2.556,2635,2.556,2636,2.556,2637,2.556,2638,2.556,2639,2.556,2640,2.556,2641,2.556,2642,2.556,2643,2.556,2644,2.556,2645,2.556,2646,2.556,2647,2.556,2648,2.556,2649,2.556,2650,2.556,2651,2.556,2652,2.556,2653,2.556,2654,2.556,2655,2.556,2656,2.556,2657,2.556,2658,2.556,2659,2.556,2660,2.556,2661,2.556,2662,2.556,2663,3.784,2664,3.784,2665,2.556,2666,3.784,2667,2.556,2668,2.556,2669,2.556,2670,2.556,2671,2.556,2672,2.556,2673,2.162,2674,2.556,2675,2.556,2676,2.556,2677,3.784,2678,2.556,2679,2.556,2680,2.556,2681,2.556]],["title/interfaces/Window.html",[700,1.749,2496,2.068]],["body/interfaces/Window.html",[0,0.229,1,1.558,3,0.312,4,0.106,5,0.24,8,0.138,10,0.766,12,0.229,14,0.964,16,0.122,17,0.436,18,1.266,19,2.082,20,1.222,22,0.278,30,0.446,32,0.35,33,0.027,34,0.605,35,0.09,39,0.209,41,2.076,45,0.629,47,2.831,49,0.536,50,0.777,54,0.681,55,0.138,56,0.622,62,0.006,63,0.01,64,0.006,69,1.498,70,1.182,71,3.17,72,1.353,73,0.824,74,0.964,75,1.452,77,1.465,81,1.465,87,1.866,89,1.45,92,1.65,93,1.827,94,0.82,95,1.295,96,1.437,97,1.052,98,1.558,99,1.395,101,0.894,102,4.013,104,3.418,105,2.366,106,2.366,107,1.052,108,1.465,109,2.082,110,2.366,111,4.013,112,2.977,113,2.977,114,2.366,115,2.366,119,0.889,128,1.465,131,2.977,133,1.675,134,1.96,135,1.157,136,1.075,137,2.082,138,1.558,139,0.964,140,2.082,151,1.593,167,1.289,169,1.707,175,2.375,178,0.686,190,0.824,191,0.738,197,0.681,205,0.8,206,0.964,209,1.699,212,0.477,225,0.477,235,1.808,250,3.752,254,2.999,274,0.964,290,0.713,308,3.17,312,0.446,335,1.204,350,1.157,354,1.005,374,1.237,399,2.437,407,1.289,417,1.437,418,0.824,420,1.157,426,1.052,429,1.866,441,1.134,497,2.082,500,2.352,501,1.437,502,2.492,503,0.889,505,1.869,524,1.561,545,0.94,566,1.558,567,1.581,570,1.808,574,2.11,576,1.157,591,1.157,593,1.835,594,2.166,595,2.437,603,2.619,614,1.289,620,1.869,621,0.713,629,2.472,635,1.052,643,1.919,645,1.675,675,1.052,700,1.808,701,2.219,702,1.157,704,1.961,713,2.082,714,2.999,716,1.452,718,1.699,723,2.352,724,1.808,725,0.713,727,2.622,728,1.558,730,1.289,731,1.289,735,1.289,757,0.964,811,4.013,840,2.553,859,1.558,861,2.076,862,1.437,865,2.47,879,1.869,880,1.558,883,1.289,891,4.777,893,2.352,894,1.289,895,3.53,899,2.082,915,2.669,922,1.699,990,2.894,998,0.766,1081,1.289,1088,1.869,1097,1.465,1099,2.076,1117,2.619,1164,1.289,1165,1.289,1169,2.619,1172,1.289,1173,1.869,1174,2.076,1176,1.289,1177,1.289,1179,2.352,1182,1.157,1187,2.7,1189,1.289,1191,1.465,1192,1.465,1194,2.251,1195,1.052,1196,2.366,1197,3.752,1199,1.869,1200,1.869,1201,1.157,1205,2.7,1206,3.53,1209,1.465,1210,1.289,1220,2.366,1221,2.694,1222,1.465,1223,1.465,1224,1.465,1225,1.289,1227,2.251,1252,1.157,1253,2.352,1255,4.101,1259,1.465,1267,2.366,1287,1.919,1372,1.052,1376,1.052,1392,2.366,1396,1.157,1403,1.465,1417,2.251,1418,2.251,1432,2.082,1433,1.465,1439,1.289,1442,3.138,1481,2.977,1482,2.366,1602,1.465,1729,5.372,1880,3.418,1891,3.837,1909,1.289,1959,1.289,2052,2.366,2084,2.352,2085,2.366,2116,1.465,2117,1.465,2118,1.465,2134,1.289,2186,3.489,2191,3.682,2193,1.289,2204,1.465,2206,1.465,2250,1.465,2253,1.465,2278,1.289,2279,1.465,2281,1.465,2283,2.366,2284,1.465,2301,1.289,2308,2.977,2356,2.082,2448,1.465,2453,1.869,2483,1.465,2496,3.033,2520,1.465,2543,3.007,2552,1.465,2571,1.289,2682,1.465,2683,1.465,2684,1.732,2685,1.732,2686,2.798,2687,3.521,2688,3.521,2689,1.732,2690,1.732,2691,1.732,2692,2.798,2693,2.798,2694,1.732,2695,2.798,2696,3.521,2697,1.732,2698,3.521,2699,1.732,2700,1.732,2701,1.732,2702,1.732,2703,1.732,2704,1.732,2705,1.732,2706,1.732,2707,1.732,2708,1.732,2709,1.732,2710,1.732,2711,1.732,2712,3.521,2713,1.732,2714,2.366,2715,1.732,2716,1.732,2717,1.732,2718,1.732,2719,1.732,2720,1.732,2721,3.521,2722,1.732,2723,4.994,2724,1.732,2725,1.732,2726,1.732,2727,1.732,2728,1.732,2729,1.732,2730,1.732,2731,1.732,2732,2.798,2733,2.798,2734,2.798,2735,2.798,2736,2.798,2737,1.732,2738,1.732,2739,1.732,2740,1.732,2741,1.732,2742,1.732,2743,1.732,2744,1.732,2745,1.732,2746,1.732,2747,1.732,2748,1.732,2749,3.521,2750,3.752,2751,4.746,2752,4.746,2753,4.746,2754,4.746,2755,6.064,2756,4.042,2757,4.042,2758,3.521,2759,1.465,2760,1.732,2761,2.798,2762,1.732,2763,4.437,2764,4.042,2765,1.732,2766,4.437,2767,1.732,2768,1.732,2769,1.732,2770,1.732,2771,1.732,2772,1.732,2773,1.732,2774,2.798,2775,1.732,2776,1.732,2777,1.732,2778,1.732,2779,1.732,2780,1.732,2781,1.732,2782,1.732,2783,1.732,2784,1.732,2785,1.732,2786,1.732,2787,1.732,2788,1.732,2789,1.732,2790,2.798,2791,2.798,2792,1.732,2793,1.732,2794,3.521,2795,2.798,2796,1.732,2797,1.732,2798,1.732,2799,1.732,2800,1.732,2801,3.521,2802,2.798,2803,2.798,2804,2.798,2805,1.732,2806,1.732,2807,2.798,2808,1.732,2809,1.732,2810,1.732,2811,1.732,2812,1.732,2813,1.732,2814,1.732,2815,4.013,2816,1.732,2817,3.521,2818,1.732,2819,1.732,2820,1.732,2821,3.521,2822,1.465,2823,1.732,2824,1.732,2825,1.732,2826,1.732,2827,1.732,2828,1.732,2829,2.798,2830,1.732,2831,1.732,2832,1.732,2833,1.732,2834,1.732,2835,1.732,2836,1.732,2837,1.732,2838,1.732,2839,1.732,2840,1.732,2841,1.732,2842,1.732,2843,1.732,2844,1.732,2845,1.732,2846,1.732,2847,1.732,2848,1.732,2849,1.732,2850,1.732,2851,2.798,2852,1.732,2853,1.732,2854,1.732,2855,1.732,2856,1.465,2857,1.732,2858,1.732,2859,1.732,2860,1.732,2861,1.732,2862,1.465,2863,1.732,2864,1.732,2865,1.732,2866,1.732,2867,1.732,2868,1.465,2869,1.732,2870,1.732,2871,1.732,2872,1.465,2873,1.732,2874,1.732,2875,2.798,2876,1.732,2877,1.732,2878,1.732,2879,1.732,2880,1.732,2881,1.732,2882,1.732,2883,1.732,2884,1.465,2885,1.732,2886,1.732,2887,1.732]],["title/changelog.html",[2577,2.118,2888,2.118,2889,2.848]],["body/changelog.html",[0,0.297,3,0.255,4,0.148,5,0.211,9,1.348,10,1.07,12,0.479,14,2.023,17,0.377,21,0.39,24,2.943,25,0.623,30,1.247,31,1.801,33,0.016,34,0.325,39,0.292,45,0.816,54,0.522,62,0.009,63,0.013,64,0.009,69,1.4,70,0.813,71,2.913,75,1.566,87,0.869,89,0.997,93,1.496,94,0.866,95,0.914,98,1.348,99,1.068,101,0.566,107,2.206,133,1.152,135,1.617,136,1.396,151,2.264,155,1.866,156,1.866,169,1.456,172,1.617,173,2.239,178,0.575,181,1.47,205,0.479,206,1.348,219,2.047,247,2.691,248,2.427,250,2.206,252,2.427,254,2.5,289,2.703,300,2.703,307,3.154,350,1.617,354,1.958,370,2.047,374,2.5,383,2.023,399,3.269,406,3.244,414,1.617,417,1.243,418,2.594,419,4.098,437,3.688,452,1.801,464,1.801,478,1.801,492,1.617,500,2.427,502,1.928,512,1.801,515,1.47,534,2.703,545,2.138,566,2.023,567,1.897,574,1.728,579,2.428,584,2.047,590,1.617,593,1.828,594,2.365,595,1.866,604,3.237,609,1.801,621,0.997,637,1.617,643,2.096,671,2.427,676,2.047,701,1.958,704,2.407,707,2.047,713,1.801,714,3.113,716,1.865,718,2.206,724,2.489,725,1.996,727,2.47,728,1.348,739,1.348,742,2.206,743,2.703,748,2.047,756,1.801,759,2.703,760,1.617,775,2.047,802,2.047,809,1.866,813,1.801,819,1.47,822,1.617,840,2.928,862,1.866,868,3.312,876,2.913,921,2.047,922,1.47,933,1.801,934,2.703,945,2.047,972,1.617,990,1.348,998,1.07,1022,2.047,1080,1.801,1085,2.047,1088,1.617,1110,1.801,1112,1.801,1181,1.801,1185,1.801,1194,1.348,1200,1.617,1201,2.427,1204,2.047,1221,1.47,1227,1.348,1231,2.023,1253,1.617,1255,1.801,1256,2.047,1287,2.096,1314,1.617,1345,1.348,1369,1.47,1401,1.801,1442,2.023,1453,2.047,1462,3.244,1464,3.072,1476,3.072,1511,1.801,1558,2.047,1563,1.801,1579,2.047,1584,2.047,1590,2.047,1599,2.698,1642,1.801,1656,2.913,1781,2.047,1817,2.047,1891,1.617,1892,3.244,1903,3.688,1951,3.688,1952,1.801,1978,3.072,2029,3.072,2073,3.244,2084,1.617,2131,2.703,2134,3.244,2176,1.801,2180,2.047,2186,2.943,2188,3.072,2189,3.072,2191,1.617,2216,2.047,2272,3.605,2278,1.801,2357,2.047,2465,3.072,2466,4.057,2471,3.072,2496,1.47,2508,2.047,2543,3.864,2566,2.047,2571,1.801,2596,2.047,2673,2.047,2714,2.047,2759,2.047,2815,2.047,2822,4.098,2862,4.92,2868,5.205,2872,2.047,2884,2.047,2888,1.801,2890,2.421,2891,2.421,2892,2.421,2893,2.421,2894,2.421,2895,2.421,2896,3.633,2897,2.421,2898,5.454,2899,4.361,2900,3.633,2901,5.819,2902,2.421,2903,4.361,2904,2.421,2905,6.419,2906,2.421,2907,2.421,2908,3.633,2909,2.421,2910,2.421,2911,2.421,2912,5.657,2913,6.643,2914,2.421,2915,2.421,2916,2.421,2917,2.421,2918,2.421,2919,3.633,2920,2.421,2921,2.421,2922,2.421,2923,3.688,2924,2.421,2925,2.421,2926,2.421,2927,2.421,2928,2.421,2929,2.421,2930,2.047,2931,3.633,2932,2.421,2933,2.421,2934,3.633,2935,2.421,2936,2.421,2937,2.421,2938,2.421,2939,2.421,2940,3.633,2941,2.421,2942,2.421,2943,5.819,2944,2.421,2945,2.421,2946,2.421,2947,2.421,2948,2.421,2949,2.421,2950,4.361,2951,2.421,2952,2.421,2953,2.421,2954,2.421,2955,2.421,2956,2.421,2957,2.421,2958,2.421,2959,2.421,2960,2.421,2961,2.421,2962,2.047,2963,2.421,2964,2.421,2965,2.421,2966,2.421,2967,2.421,2968,2.421,2969,2.421,2970,2.421,2971,2.421,2972,2.421,2973,2.421,2974,2.421,2975,2.421,2976,3.633,2977,2.421,2978,4.361,2979,2.421,2980,2.421,2981,2.421,2982,2.421,2983,2.421,2984,2.421,2985,2.421,2986,2.421,2987,3.633,2988,2.421,2989,2.421,2990,2.421,2991,2.421,2992,5.454,2993,2.421,2994,2.421,2995,2.421,2996,2.421,2997,2.421,2998,2.421,2999,4.361,3000,2.421,3001,2.421,3002,2.421,3003,2.421,3004,2.421,3005,2.421,3006,2.421,3007,4.361,3008,2.421,3009,2.421,3010,2.421,3011,2.421,3012,2.421,3013,2.421,3014,2.421,3015,2.421,3016,2.421,3017,3.633,3018,2.421,3019,2.421,3020,2.421,3021,2.421,3022,2.421,3023,2.421,3024,2.421,3025,3.633,3026,3.633,3027,3.633,3028,2.421,3029,2.421,3030,2.421,3031,2.421,3032,2.421,3033,2.421,3034,2.421,3035,2.421,3036,2.421,3037,2.421,3038,2.421,3039,2.421,3040,2.421,3041,2.421,3042,3.633,3043,2.421,3044,2.421,3045,2.421,3046,2.421,3047,2.421,3048,2.421,3049,2.421,3050,4.361,3051,5.194,3052,2.421,3053,2.421,3054,2.421,3055,3.072,3056,2.421,3057,2.421,3058,2.047,3059,2.421,3060,2.421,3061,2.421,3062,2.421,3063,3.633,3064,2.421,3065,2.421,3066,2.421,3067,2.421,3068,2.421,3069,2.421,3070,2.421,3071,2.421,3072,2.421,3073,2.421,3074,2.421,3075,2.421,3076,2.421,3077,3.633,3078,2.421,3079,2.421,3080,2.421,3081,3.633,3082,2.421,3083,2.421,3084,2.421,3085,2.421,3086,2.047,3087,2.421,3088,2.421,3089,4.361,3090,2.421,3091,2.421,3092,3.633,3093,2.421,3094,3.072,3095,2.421,3096,2.421,3097,2.421,3098,2.421,3099,2.421,3100,2.421,3101,2.421,3102,2.421,3103,3.633,3104,2.421,3105,2.421,3106,2.421,3107,2.421,3108,2.421,3109,2.421,3110,2.421,3111,2.421,3112,2.047,3113,2.421,3114,2.421,3115,2.421,3116,2.421,3117,4.847,3118,2.421,3119,2.421,3120,2.421,3121,2.421,3122,2.421,3123,2.421,3124,2.421,3125,3.633,3126,2.421,3127,2.421,3128,2.421,3129,2.421,3130,2.421,3131,2.421,3132,2.421,3133,2.421,3134,3.633,3135,2.421,3136,2.421,3137,2.421,3138,2.421,3139,2.421,3140,2.421,3141,2.421,3142,2.421,3143,2.421,3144,2.421,3145,2.421,3146,2.421,3147,2.421,3148,2.421,3149,2.421,3150,2.421,3151,2.421,3152,2.421,3153,2.421,3154,2.421,3155,2.421,3156,2.421,3157,2.421,3158,2.421,3159,2.421,3160,2.421,3161,2.421,3162,2.421,3163,2.421,3164,2.421,3165,2.421,3166,2.421,3167,2.421,3168,2.421,3169,2.421,3170,2.421,3171,2.421,3172,2.421,3173,2.421,3174,2.421,3175,2.421,3176,2.421,3177,2.421,3178,2.421,3179,2.421,3180,2.421,3181,2.421,3182,2.421,3183,2.421,3184,2.421,3185,2.421,3186,2.421,3187,2.421,3188,2.421,3189,2.421,3190,2.421,3191,2.421,3192,2.421,3193,2.047,3194,2.421,3195,1.801]],["title/coverage.html",[3196,3.923]],["body/coverage.html",[0,0.584,1,2.244,5,0.176,6,2.999,7,2.999,10,2.771,33,0.027,35,0.21,54,0.579,62,0.015,63,0.019,64,0.015,65,2.999,66,3.226,67,3.409,68,2.471,90,2.692,94,0.487,95,0.845,179,2.448,414,2.692,415,3.409,416,3.86,421,2.692,435,2.692,490,2.692,491,3.151,542,2.692,543,3.219,544,2.692,545,1.742,562,1.782,594,1.994,631,2.244,634,2.664,700,2.946,701,1.447,703,3.409,710,2.448,729,2.692,736,2.889,739,2.244,740,3.409,741,3.86,809,2.07,810,3.409,816,2.692,835,2.999,836,3.409,837,2.999,838,3.86,859,2.244,913,2.999,915,2.07,1078,2.692,1079,3.409,1157,3.409,1158,4.056,1173,2.692,1174,2.07,1211,2.999,1212,3.409,1242,2.692,1277,3.832,1278,3.832,1286,2.07,1287,1.549,1386,3.409,1387,3.409,1410,2.999,1411,3.409,1412,2.692,1417,2.244,1418,2.244,1496,3.409,1535,6.05,1557,2.999,1714,2.999,1806,3.409,1853,2.692,1955,3.409,1956,3.409,1972,3.409,1973,3.409,2022,3.409,2062,3.409,2174,2.999,2175,3.86,2186,2.448,2241,2.999,2242,3.409,2395,3.409,2423,2.999,2453,2.692,2454,3.86,2480,3.409,2485,2.999,2496,2.448,2541,2.999,2542,3.409,2682,4.387,2683,4.387,2962,3.409,3112,3.409,3196,3.409,3197,4.031,3198,4.031,3199,4.031,3200,5.737,3201,6.058,3202,4.031,3203,5.737,3204,3.409,3205,6.268,3206,4.387,3207,4.031,3208,5.188,3209,5.737,3210,4.031,3211,4.031,3212,5.188,3213,4.031,3214,5.188,3215,4.031,3216,4.031,3217,4.031,3218,5.188,3219,4.031,3220,5.188,3221,4.031,3222,4.031,3223,4.031,3224,4.031,3225,5.188,3226,4.031,3227,4.031,3228,4.031,3229,4.031,3230,4.031,3231,4.031,3232,4.031,3233,4.031,3234,5.188,3235,4.031,3236,5.737,3237,4.031,3238,4.031,3239,4.031,3240,4.031]],["title/dependencies.html",[3195,2.118,3241,3.461]],["body/dependencies.html",[33,0.026,62,0.02,63,0.023,64,0.02,191,1.145,192,4.62,724,2.805,2530,4.62,3193,4.62,3241,4.62,3242,5.463,3243,5.463,3244,5.463,3245,5.463,3246,5.463,3247,5.463]],["title/miscellaneous/enumerations.html",[3248,1.585,3249,3.461]],["body/miscellaneous/enumerations.html",[12,0.82,16,0.236,33,0.025,62,0.02,63,0.023,64,0.02,94,0.655,95,1.136,491,3.293,492,3.622,543,2.785,544,4.151,545,1.821,564,4.623,572,3.46,590,3.622,635,3.293,637,4.151,3248,3.02,3249,4.586,3250,4.586]],["title/index.html",[16,0.124,2577,2.118,2888,2.118]],["body/index.html",[2,0.412,4,0.281,5,0.2,30,1.569,33,0.027,54,0.912,62,0.017,63,0.021,64,0.017,75,1.653,94,0.846,95,1.332,99,1.354,151,1.653,178,0.744,197,0.767,209,3.703,248,3.075,254,2.493,399,2.896,545,1.894,567,1.267,568,3.893,574,2.683,593,2.112,648,3.893,701,2.436,704,2.321,708,3.767,710,3.425,716,2.025,725,2.323,726,3.075,757,2.563,787,3.425,915,3.407,990,2.563,1099,2.364,1221,2.796,1252,3.075,1254,3.893,1279,4.769,1404,3.075,1412,4.073,2176,3.425,2356,4.196,2504,4.769,2505,3.893,2856,4.769,2923,3.893,2930,3.893,3055,4.769,3058,4.769,3086,5.156,3094,3.893,3195,3.425,3251,4.604,3252,4.604,3253,4.604,3254,4.604,3255,4.604,3256,4.604,3257,5.64,3258,4.604,3259,5.64,3260,4.604,3261,4.604,3262,4.604,3263,4.604,3264,5.64,3265,4.604,3266,4.604,3267,4.604,3268,4.604,3269,4.604,3270,4.604,3271,4.604,3272,5.64,3273,4.604,3274,4.604,3275,4.604,3276,4.604,3277,4.604,3278,4.604,3279,4.604]],["title/modules.html",[3280,3.923]],["body/modules.html",[33,0.023,62,0.021,63,0.023,64,0.021,3280,4.699]],["title/overview.html",[3281,3.923]],["body/overview.html",[2,0.495,33,0.023,62,0.021,63,0.023,64,0.021,221,3.36,702,3.695,3281,4.679,3282,5.533]],["title/miscellaneous/typealiases.html",[3248,1.585,3283,4.093]],["body/miscellaneous/typealiases.html",[6,3.916,7,4.545,16,0.229,33,0.026,35,0.347,38,5.166,45,1.373,47,2.703,62,0.02,63,0.023,64,0.02,151,2.194,176,3.197,491,3.197,543,3.137,544,4.081,562,2.327,569,5.166,594,2.348,604,3.516,634,2.703,643,2.023,701,1.89,715,2.168,736,2.931,972,3.516,1557,4.545,1597,5.166,1622,4.452,1623,3.916,1624,4.452,1625,3.916,1656,3.516,3248,2.931,3250,4.452,3284,5.265,3285,5.265,3286,5.265]],["title/miscellaneous/variables.html",[3248,1.585,3287,3.461]],["body/miscellaneous/variables.html",[5,0.288,10,2.012,12,0.835,16,0.198,30,1.172,33,0.027,35,0.339,39,0.764,50,0.709,54,0.98,62,0.017,63,0.021,64,0.017,68,2.011,94,0.55,95,1.326,99,1.339,161,3.849,169,1.441,173,2.337,197,0.764,247,2.165,312,1.441,358,3.849,377,2.165,399,2.337,429,1.635,435,3.741,441,1.094,538,3.386,545,2.037,587,3.849,593,1.43,714,2.337,716,1.635,717,3.386,722,3.118,727,2.165,861,2.337,1158,3.401,1231,2.534,1242,3.741,1253,3.741,1462,3.386,1599,2.534,1656,3.04,2175,3.386,2179,3.849,2186,3.844,2193,3.386,2205,3.849,2423,4.166,2454,3.386,2466,3.386,2467,3.849,2484,3.849,2485,4.166,2750,4.736,3204,3.849,3206,3.849,3248,2.534,3287,3.849,3288,4.552,3289,4.552,3290,5.601,3291,4.552,3292,6.067,3293,4.552,3294,5.601,3295,4.552,3296,4.552,3297,4.552,3298,6.33,3299,5.601,3300,4.552,3301,4.552,3302,5.601,3303,4.552,3304,4.552,3305,4.552,3306,4.552,3307,5.601,3308,4.552,3309,4.552,3310,4.552,3311,4.552,3312,4.552,3313,4.552,3314,4.552,3315,4.552,3316,4.552,3317,4.552,3318,4.552,3319,4.552,3320,4.552,3321,4.552,3322,4.552,3323,4.552,3324,4.552,3325,4.552,3326,4.552,3327,4.552,3328,4.552,3329,4.552]]],"invertedIndex":[["",{"_index":33,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":212,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["0.0",{"_index":964,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["0.0002",{"_index":1349,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["0.01",{"_index":277,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixMenuUI.html":{}}}],["0.05",{"_index":1756,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["0.1",{"_index":472,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{}}}],["0.127.0",{"_index":3247,"title":{},"body":{"dependencies.html":{}}}],["0.25",{"_index":233,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["0.3",{"_index":1883,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0.5",{"_index":1351,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["0.7",{"_index":485,"title":{},"body":{"classes/CMSObjects.html":{}}}],["0.7.7",{"_index":3243,"title":{},"body":{"dependencies.html":{}}}],["0.75",{"_index":234,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["000",{"_index":2409,"title":{},"body":{"classes/StateManager.html":{}}}],["000000",{"_index":951,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["01",{"_index":2900,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":3062,"title":{},"body":{"changelog.html":{}}}],["029d526",{"_index":3137,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":3031,"title":{},"body":{"changelog.html":{}}}],["03a1de4",{"_index":3024,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":2940,"title":{},"body":{"changelog.html":{}}}],["04dc545",{"_index":3150,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":2899,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":3119,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":3158,"title":{},"body":{"changelog.html":{}}}],["0837334",{"_index":3084,"title":{},"body":{"changelog.html":{}}}],["0980379",{"_index":3164,"title":{},"body":{"changelog.html":{}}}],["0a26fea",{"_index":3161,"title":{},"body":{"changelog.html":{}}}],["0b2dd8a",{"_index":3029,"title":{},"body":{"changelog.html":{}}}],["0b95e5b",{"_index":2959,"title":{},"body":{"changelog.html":{}}}],["0x000000",{"_index":1014,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["0x000fff",{"_index":2770,"title":{},"body":{"interfaces/Window.html":{}}}],["0x8c8c8c",{"_index":3269,"title":{},"body":{"index.html":{}}}],["0xafafaf",{"_index":1060,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["0xffffff",{"_index":484,"title":{},"body":{"classes/CMSObjects.html":{}}}],["1",{"_index":225,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["1.0",{"_index":953,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["1.0.1",{"_index":3193,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["1.0.2",{"_index":3190,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":3157,"title":{},"body":{"changelog.html":{}}}],["1.2.0",{"_index":3116,"title":{},"body":{"changelog.html":{}}}],["1.3.0",{"_index":3096,"title":{},"body":{"changelog.html":{}}}],["1.4.0",{"_index":3061,"title":{},"body":{"changelog.html":{}}}],["1.5.0",{"_index":3030,"title":{},"body":{"changelog.html":{}}}],["1.6.0",{"_index":2953,"title":{},"body":{"changelog.html":{}}}],["1.7.0",{"_index":2939,"title":{},"body":{"changelog.html":{}}}],["1.8.0",{"_index":2897,"title":{},"body":{"changelog.html":{}}}],["1/1",{"_index":3205,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":155,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/InfoLogger.html":{},"classes/PhoenixMenuUI.html":{},"classes/State.html":{},"changelog.html":{}}}],["100",{"_index":1535,"title":{},"body":{"classes/LoadingManager.html":{},"coverage.html":{}}}],["1000",{"_index":168,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["10000",{"_index":339,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["11",{"_index":921,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"changelog.html":{}}}],["11/11",{"_index":3226,"title":{},"body":{"coverage.html":{}}}],["1100",{"_index":1863,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["11000",{"_index":124,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["12",{"_index":3118,"title":{},"body":{"changelog.html":{}}}],["1261358",{"_index":3185,"title":{},"body":{"changelog.html":{}}}],["13/13",{"_index":3230,"title":{},"body":{"coverage.html":{}}}],["15/15",{"_index":3224,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":3063,"title":{},"body":{"changelog.html":{}}}],["16/16",{"_index":3233,"title":{},"body":{"coverage.html":{}}}],["17.4.0",{"_index":3242,"title":{},"body":{"dependencies.html":{}}}],["17/17",{"_index":3225,"title":{},"body":{"coverage.html":{}}}],["17909eb",{"_index":3181,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":2954,"title":{},"body":{"changelog.html":{}}}],["18/18",{"_index":3238,"title":{},"body":{"coverage.html":{}}}],["18f8db2",{"_index":3140,"title":{},"body":{"changelog.html":{}}}],["1906976",{"_index":3179,"title":{},"body":{"changelog.html":{}}}],["1975d70",{"_index":3136,"title":{},"body":{"changelog.html":{}}}],["1].foreach((chargevalue",{"_index":666,"title":{},"body":{"classes/ColorOptions.html":{}}}],["1].oncomplete",{"_index":369,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["1a01248",{"_index":2907,"title":{},"body":{"changelog.html":{}}}],["1a17e99",{"_index":2925,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":695,"title":{},"body":{"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{}}}],["2.0",{"_index":786,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["2/2",{"_index":3200,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1748,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"classes/VRManager.html":{}}}],["20/20",{"_index":3220,"title":{},"body":{"coverage.html":{}}}],["2020",{"_index":3117,"title":{},"body":{"changelog.html":{}}}],["2021",{"_index":2898,"title":{},"body":{"changelog.html":{}}}],["20ef288",{"_index":2917,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":2941,"title":{},"body":{"changelog.html":{}}}],["2219a3e",{"_index":3079,"title":{},"body":{"changelog.html":{}}}],["22a1ec8",{"_index":3142,"title":{},"body":{"changelog.html":{}}}],["23/23",{"_index":3236,"title":{},"body":{"coverage.html":{}}}],["236bdf4",{"_index":2963,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":219,"title":{},"body":{"classes/AnimationsManager.html":{},"changelog.html":{}}}],["24/24",{"_index":3218,"title":{},"body":{"coverage.html":{}}}],["257",{"_index":2985,"title":{},"body":{"changelog.html":{}}}],["25b2a9d",{"_index":3146,"title":{},"body":{"changelog.html":{}}}],["266af04",{"_index":3038,"title":{},"body":{"changelog.html":{}}}],["27/27",{"_index":3223,"title":{},"body":{"coverage.html":{}}}],["28/11/2020",{"_index":2602,"title":{},"body":{"classes/VRManager.html":{}}}],["28/28",{"_index":3217,"title":{},"body":{"coverage.html":{}}}],["289",{"_index":2906,"title":{},"body":{"changelog.html":{}}}],["29/08/2020",{"_index":2597,"title":{},"body":{"classes/VRManager.html":{}}}],["29093a2",{"_index":3018,"title":{},"body":{"changelog.html":{}}}],["2e16371",{"_index":3016,"title":{},"body":{"changelog.html":{}}}],["2e52c22",{"_index":2929,"title":{},"body":{"changelog.html":{}}}],["2fa310f",{"_index":3059,"title":{},"body":{"changelog.html":{}}}],["2rem",{"_index":920,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["3",{"_index":221,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"overview.html":{}}}],["3.0",{"_index":807,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["3.3333",{"_index":2392,"title":{},"body":{"classes/State.html":{}}}],["3.6.0",{"_index":3245,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":3209,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":410,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{}}}],["300",{"_index":393,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["3000",{"_index":316,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["30b0383",{"_index":3147,"title":{},"body":{"changelog.html":{}}}],["30b5160",{"_index":3014,"title":{},"body":{"changelog.html":{}}}],["32",{"_index":380,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["34/34",{"_index":3211,"title":{},"body":{"coverage.html":{}}}],["3475836",{"_index":3066,"title":{},"body":{"changelog.html":{}}}],["359d353",{"_index":3040,"title":{},"body":{"changelog.html":{}}}],["36/36",{"_index":3229,"title":{},"body":{"coverage.html":{}}}],["3756330",{"_index":3083,"title":{},"body":{"changelog.html":{}}}],["37df19f",{"_index":3122,"title":{},"body":{"changelog.html":{}}}],["38/38",{"_index":3214,"title":{},"body":{"coverage.html":{}}}],["39",{"_index":3282,"title":{},"body":{"overview.html":{}}}],["3918159",{"_index":3166,"title":{},"body":{"changelog.html":{}}}],["399ac77",{"_index":3192,"title":{},"body":{"changelog.html":{}}}],["3b1991c",{"_index":3036,"title":{},"body":{"changelog.html":{}}}],["3ce675f",{"_index":3075,"title":{},"body":{"changelog.html":{}}}],["3d",{"_index":621,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["3f6367f",{"_index":3078,"title":{},"body":{"changelog.html":{}}}],["4/4",{"_index":3208,"title":{},"body":{"coverage.html":{}}}],["4000",{"_index":871,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["40bbba0",{"_index":2974,"title":{},"body":{"changelog.html":{}}}],["42/42",{"_index":3237,"title":{},"body":{"coverage.html":{}}}],["4262a1b",{"_index":3153,"title":{},"body":{"changelog.html":{}}}],["455f536",{"_index":2994,"title":{},"body":{"changelog.html":{}}}],["45a0123",{"_index":3021,"title":{},"body":{"changelog.html":{}}}],["4764196",{"_index":3124,"title":{},"body":{"changelog.html":{}}}],["48130b2",{"_index":3155,"title":{},"body":{"changelog.html":{}}}],["4acca1a",{"_index":2938,"title":{},"body":{"changelog.html":{}}}],["4b10452",{"_index":3156,"title":{},"body":{"changelog.html":{}}}],["4f80bd6",{"_index":3065,"title":{},"body":{"changelog.html":{}}}],["5/5",{"_index":3207,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1878,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/VRManager.html":{}}}],["500",{"_index":217,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["5000",{"_index":157,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["50000",{"_index":599,"title":{},"body":{"classes/ColorOptions.html":{}}}],["50c2584",{"_index":2977,"title":{},"body":{"changelog.html":{}}}],["5139c6e",{"_index":3106,"title":{},"body":{"changelog.html":{}}}],["5283e9a",{"_index":3167,"title":{},"body":{"changelog.html":{}}}],["53/53",{"_index":3199,"title":{},"body":{"coverage.html":{}}}],["5389282",{"_index":3009,"title":{},"body":{"changelog.html":{}}}],["56c6eff",{"_index":2916,"title":{},"body":{"changelog.html":{}}}],["56f94f0",{"_index":2989,"title":{},"body":{"changelog.html":{}}}],["56ff275",{"_index":3023,"title":{},"body":{"changelog.html":{}}}],["5743adc",{"_index":3019,"title":{},"body":{"changelog.html":{}}}],["57e438f",{"_index":2986,"title":{},"body":{"changelog.html":{}}}],["595d9e5",{"_index":2933,"title":{},"body":{"changelog.html":{}}}],["5a562ab",{"_index":2983,"title":{},"body":{"changelog.html":{}}}],["5bdc562",{"_index":2947,"title":{},"body":{"changelog.html":{}}}],["5ea04f1",{"_index":3057,"title":{},"body":{"changelog.html":{}}}],["5f0f942",{"_index":3151,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":264,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["6/6",{"_index":3203,"title":{},"body":{"coverage.html":{}}}],["60269f7",{"_index":3093,"title":{},"body":{"changelog.html":{}}}],["6085f50",{"_index":2911,"title":{},"body":{"changelog.html":{}}}],["612205c",{"_index":3186,"title":{},"body":{"changelog.html":{}}}],["63/63",{"_index":3235,"title":{},"body":{"coverage.html":{}}}],["6486982",{"_index":3010,"title":{},"body":{"changelog.html":{}}}],["66cbbc0",{"_index":2966,"title":{},"body":{"changelog.html":{}}}],["68cd7ad",{"_index":3011,"title":{},"body":{"changelog.html":{}}}],["6943f79",{"_index":3114,"title":{},"body":{"changelog.html":{}}}],["69d3f75",{"_index":3148,"title":{},"body":{"changelog.html":{}}}],["6a834e8",{"_index":2969,"title":{},"body":{"changelog.html":{}}}],["6cd5d53",{"_index":2920,"title":{},"body":{"changelog.html":{}}}],["6ef17d0",{"_index":2990,"title":{},"body":{"changelog.html":{}}}],["7/7",{"_index":3202,"title":{},"body":{"coverage.html":{}}}],["73b7c27",{"_index":3162,"title":{},"body":{"changelog.html":{}}}],["7528ee0",{"_index":2970,"title":{},"body":{"changelog.html":{}}}],["7632a18",{"_index":2995,"title":{},"body":{"changelog.html":{}}}],["789da8b",{"_index":3113,"title":{},"body":{"changelog.html":{}}}],["79e6d7c",{"_index":3091,"title":{},"body":{"changelog.html":{}}}],["7bcd7ba",{"_index":3044,"title":{},"body":{"changelog.html":{}}}],["7d1ca22",{"_index":3189,"title":{},"body":{"changelog.html":{}}}],["7d606b2",{"_index":3115,"title":{},"body":{"changelog.html":{}}}],["7d90d72",{"_index":2981,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":356,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["8/8",{"_index":3212,"title":{},"body":{"coverage.html":{}}}],["854e543",{"_index":2996,"title":{},"body":{"changelog.html":{}}}],["8559830",{"_index":2937,"title":{},"body":{"changelog.html":{}}}],["85d4a14",{"_index":2991,"title":{},"body":{"changelog.html":{}}}],["872f708",{"_index":2936,"title":{},"body":{"changelog.html":{}}}],["8a0c0b1",{"_index":2915,"title":{},"body":{"changelog.html":{}}}],["8ba94e7",{"_index":3107,"title":{},"body":{"changelog.html":{}}}],["8cbcaa5",{"_index":3035,"title":{},"body":{"changelog.html":{}}}],["8d7b160",{"_index":3082,"title":{},"body":{"changelog.html":{}}}],["8e2eff4",{"_index":3028,"title":{},"body":{"changelog.html":{}}}],["8f3e8e1",{"_index":3126,"title":{},"body":{"changelog.html":{}}}],["9/9",{"_index":3201,"title":{},"body":{"coverage.html":{}}}],["90aea3c",{"_index":2918,"title":{},"body":{"changelog.html":{}}}],["9222e04",{"_index":2935,"title":{},"body":{"changelog.html":{}}}],["9474565",{"_index":3152,"title":{},"body":{"changelog.html":{}}}],["947f6bf",{"_index":3144,"title":{},"body":{"changelog.html":{}}}],["9540af5",{"_index":3047,"title":{},"body":{"changelog.html":{}}}],["9908cc9",{"_index":2926,"title":{},"body":{"changelog.html":{}}}],["9e3dc20",{"_index":3188,"title":{},"body":{"changelog.html":{}}}],["9eb21f5",{"_index":3172,"title":{},"body":{"changelog.html":{}}}],["9efd9ca",{"_index":3178,"title":{},"body":{"changelog.html":{}}}],["a474af2",{"_index":3056,"title":{},"body":{"changelog.html":{}}}],["a6a1c19",{"_index":3121,"title":{},"body":{"changelog.html":{}}}],["a8a8a8",{"_index":1047,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["a8f8353",{"_index":3037,"title":{},"body":{"changelog.html":{}}}],["ab8feb4",{"_index":3129,"title":{},"body":{"changelog.html":{}}}],["ability",{"_index":2862,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["aborting",{"_index":1908,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["absolute",{"_index":919,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ac0c4f1",{"_index":3041,"title":{},"body":{"changelog.html":{}}}],["acc",{"_index":1544,"title":{},"body":{"classes/LoadingManager.html":{}}}],["access",{"_index":2847,"title":{},"body":{"interfaces/Window.html":{}}}],["accessing",{"_index":2205,"title":{},"body":{"classes/ScriptLoader.html":{},"miscellaneous/variables.html":{}}}],["active",{"_index":9,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["activecamera",{"_index":88,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/StateManager.html":{}}}],["activeobject",{"_index":2243,"title":{},"body":{"classes/SelectionManager.html":{}}}],["activevariable",{"_index":1,"title":{"classes/ActiveVariable.html":{}},"body":{"classes/ActiveVariable.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["activevariable(0",{"_index":2407,"title":{},"body":{"classes/StateManager.html":{}}}],["activevariable(false",{"_index":2408,"title":{},"body":{"classes/StateManager.html":{}}}],["actual",{"_index":261,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["add",{"_index":567,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["add('could",{"_index":2521,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["add(cut",{"_index":1030,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(data",{"_index":1398,"title":{},"body":{"classes/InfoLogger.html":{}}}],["add(k1.clone().multiplyscalar(h2",{"_index":1323,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k1.clone().multiplyscalar(half_h",{"_index":1326,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k2",{"_index":1356,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k2.clone().multiplyscalar(2",{"_index":1360,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k2.clone().multiplyscalar(half_h",{"_index":1330,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3",{"_index":1357,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3.clone().multiplyscalar(2",{"_index":1361,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3.clone().multiplyscalar(h",{"_index":1336,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3.clone().multiplyscalar(h2",{"_index":1333,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k4",{"_index":1362,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(state.dir.clone().multiplyscalar(h",{"_index":1332,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(state.dir.clone().multiplyscalar(half_h",{"_index":1322,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(this.guiparameters.eventdata",{"_index":1002,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(this.guiparameters.geometries",{"_index":937,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(this.guiparameters.labels",{"_index":1050,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(this.guiparameters[collectionname",{"_index":1020,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(this.guiparameters[labelid",{"_index":1064,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(this.guiparameters[name",{"_index":963,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["addchild",{"_index":1567,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addchild(name",{"_index":1594,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addcollection",{"_index":848,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{}}}],["addcollection(objectcollection",{"_index":1443,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["addcollection(typefolder",{"_index":875,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addcolor(this.guiparameters.labels",{"_index":1055,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["addcolor(this.guiparameters[collectionname",{"_index":1023,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["addcolor(this.guiparameters[labelid",{"_index":1068,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["addcolor(this.guiparameters[name",{"_index":959,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["addconfig",{"_index":1568,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addconfig('button",{"_index":1757,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{}}}],["addconfig('checkbox",{"_index":1744,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["addconfig('color",{"_index":1754,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["addconfig('label",{"_index":1778,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["addconfig('slider",{"_index":1746,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["addconfig(type",{"_index":1596,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["added",{"_index":880,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["addeventdatafolder",{"_index":849,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addeventdatatypefolder",{"_index":850,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addeventdatatypefolder(typename",{"_index":886,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addeventlistener('click",{"_index":2320,"title":{},"body":{"classes/SelectionManager.html":{}}}],["addeventlistener('mousemove",{"_index":2318,"title":{},"body":{"classes/SelectionManager.html":{}}}],["addeventlistener('touchstart",{"_index":2322,"title":{},"body":{"classes/SelectionManager.html":{}}}],["addface3",{"_index":439,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('back_1",{"_index":453,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('back_3",{"_index":456,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('back_4",{"_index":462,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('front_1",{"_index":446,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('front_2",{"_index":460,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('front_3",{"_index":449,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addgeometry",{"_index":851,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addgeometry(name",{"_index":890,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addgeomfolder",{"_index":852,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["adding",{"_index":1179,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["addlabel",{"_index":853,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addlabel(labelid",{"_index":897,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addlabelsfolder",{"_index":854,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addlabelsfolder(configfunctions",{"_index":901,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["addlabeltoeventobject",{"_index":1161,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["addlabeltoeventobject(label",{"_index":1168,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["addlabeltoobject",{"_index":2882,"title":{},"body":{"interfaces/Window.html":{}}}],["addloadableitem",{"_index":1501,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadableitem(id",{"_index":1515,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistener",{"_index":1502,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistener(callback",{"_index":1517,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistenerwithcheck",{"_index":1503,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistenerwithcheck(callback",{"_index":1520,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addobjecttype",{"_index":1420,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["addobjecttype(object",{"_index":1458,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["addoutlinepassforselection",{"_index":1089,"title":{},"body":{"classes/EffectsManager.html":{}}}],["addprogresslistener",{"_index":1504,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addprogresslistener(callback",{"_index":1522,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addrenderer",{"_index":2067,"title":{},"body":{"classes/RendererManager.html":{}}}],["addrenderer(renderer",{"_index":2090,"title":{},"body":{"classes/RendererManager.html":{}}}],["adds",{"_index":893,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["again",{"_index":289,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["against",{"_index":516,"title":{},"body":{"classes/ColorManager.html":{}}}],["aliases",{"_index":3284,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allcolorbyoptions",{"_index":546,"title":{},"body":{"classes/ColorOptions.html":{}}}],["alleventdata",{"_index":352,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alleventdata.getobjectbyname('track",{"_index":401,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alleventdata.traverse((eventobject",{"_index":376,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alleventdata.visible",{"_index":408,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["allfacepositions",{"_index":438,"title":{},"body":{"classes/CMSObjects.html":{}}}],["allfacepositions.concat",{"_index":442,"title":{},"body":{"classes/CMSObjects.html":{}}}],["allow",{"_index":713,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["allowcustomvalue",{"_index":686,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{}}}],["allowed",{"_index":824,"title":{},"body":{"classes/Cut.html":{}}}],["allowing",{"_index":1222,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["allowselection(selectedobject",{"_index":2860,"title":{},"body":{"interfaces/Window.html":{}}}],["allowurloptions",{"_index":705,"title":{},"body":{"interfaces/Configuration.html":{}}}],["allscripts",{"_index":2210,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["alltweens",{"_index":241,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(animationspheretween",{"_index":342,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(eventobjecttween",{"_index":272,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(scaletween",{"_index":294,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(tween",{"_index":366,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens[0].onstart",{"_index":343,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens[alltweens.length",{"_index":368,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["along",{"_index":158,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{}}}],["alongaxisposition",{"_index":211,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alpha",{"_index":2158,"title":{},"body":{"classes/RendererManager.html":{}}}],["already",{"_index":996,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/ScriptLoader.html":{}}}],["always",{"_index":2029,"title":{},"body":{"classes/RKHelper.html":{},"changelog.html":{}}}],["ambientlight",{"_index":2298,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ambientlight().type",{"_index":2305,"title":{},"body":{"classes/SelectionManager.html":{}}}],["angle",{"_index":220,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CoordinateHelper.html":{},"classes/PresetView.html":{},"classes/StateManager.html":{}}}],["angular",{"_index":3094,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["animate",{"_index":104,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animateclippingwithcollision",{"_index":77,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animateclippingwithcollision(tweenduration",{"_index":100,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateevent",{"_index":78,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateevent(tweenduration",{"_index":116,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithclipping",{"_index":79,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithclipping(tweenduration",{"_index":121,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithcollision",{"_index":80,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithcollision(tweenduration",{"_index":128,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animatethroughevent",{"_index":81,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animatethroughevent(startpos",{"_index":130,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animatewithcollision",{"_index":82,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animatewithcollision(animationfunction",{"_index":141,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animating",{"_index":165,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animation",{"_index":71,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["animationclipplane",{"_index":363,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationclipplane.constant",{"_index":364,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationclipplanes",{"_index":357,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationfunction",{"_index":145,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationfunction(tweenduration",{"_index":411,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animations",{"_index":114,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animationsmanager",{"_index":65,"title":{"classes/AnimationsManager.html":{}},"body":{"classes/AnimationsManager.html":{},"coverage.html":{}}}],["animationsphere",{"_index":237,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretween",{"_index":314,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretween.chain(animationspheretweenclone",{"_index":341,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretween.onupdate(onanimationsphereupdate",{"_index":336,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretweenclone",{"_index":338,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretweenclone.oncomplete",{"_index":347,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretweenclone.onupdate(onanimationsphereupdate",{"_index":340,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["another",{"_index":3182,"title":{},"body":{"changelog.html":{}}}],["antialias",{"_index":1112,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"changelog.html":{}}}],["antialiasing",{"_index":1085,"title":{},"body":{"classes/EffectsManager.html":{},"changelog.html":{}}}],["antialiasrender",{"_index":1090,"title":{},"body":{"classes/EffectsManager.html":{}}}],["antialiasrender(scene",{"_index":1119,"title":{},"body":{"classes/EffectsManager.html":{}}}],["any).geometry",{"_index":322,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["any)?.material.color",{"_index":405,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["any)?.material?.color",{"_index":404,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["any)?.xr",{"_index":2606,"title":{},"body":{"classes/VRManager.html":{}}}],["api",{"_index":3252,"title":{},"body":{"index.html":{}}}],["app",{"_index":2913,"title":{},"body":{"changelog.html":{}}}],["appended",{"_index":2202,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["application",{"_index":3256,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":3299,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applied",{"_index":375,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{}}}],["applies",{"_index":764,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["apply",{"_index":576,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["applychargecoloroptions",{"_index":552,"title":{},"body":{"classes/ColorOptions.html":{}}}],["applyconfigstate",{"_index":1569,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["applyconfigstate(config",{"_index":1600,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["applyembedoption",{"_index":2456,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyeventoptions",{"_index":2457,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyeventoptions(defaulteventpath",{"_index":2468,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyhidewidgetsoptions",{"_index":2458,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applying",{"_index":3125,"title":{},"body":{"changelog.html":{}}}],["applymomcoloroptions",{"_index":553,"title":{},"body":{"classes/ColorOptions.html":{}}}],["applyoptions",{"_index":2459,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["archive",{"_index":3046,"title":{},"body":{"changelog.html":{}}}],["around",{"_index":2589,"title":{},"body":{"classes/VRManager.html":{}}}],["array",{"_index":175,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["array.from",{"_index":301,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["array.isarray(first",{"_index":1905,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["array.isarray(hitsparams",{"_index":1899,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["arraybuffer",{"_index":2786,"title":{},"body":{"interfaces/Window.html":{}}}],["arrays",{"_index":1911,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{}}}],["aspects",{"_index":2693,"title":{},"body":{"interfaces/Window.html":{}}}],["assets/preset",{"_index":1970,"title":{},"body":{"classes/PresetView.html":{}}}],["assign",{"_index":3097,"title":{},"body":{"changelog.html":{}}}],["associated",{"_index":620,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["async",{"_index":2180,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{}}}],["atlas",{"_index":671,"title":{},"body":{"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["atlasquaternion",{"_index":745,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["attach",{"_index":904,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["attempt",{"_index":2942,"title":{},"body":{"changelog.html":{}}}],["attribute",{"_index":813,"title":{},"body":{"classes/Cut.html":{},"classes/ScriptLoader.html":{},"changelog.html":{}}}],["attributename",{"_index":2346,"title":{},"body":{"classes/SelectionManager.html":{}}}],["attributes",{"_index":1909,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["attributevalue",{"_index":2347,"title":{},"body":{"classes/SelectionManager.html":{}}}],["available",{"_index":590,"title":{},"body":{"classes/ColorOptions.html":{},"classes/RendererManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["available/created",{"_index":2089,"title":{},"body":{"classes/RendererManager.html":{}}}],["averageprogress",{"_index":1548,"title":{},"body":{"classes/LoadingManager.html":{}}}],["avoid",{"_index":1845,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["await",{"_index":2216,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{}}}],["axes",{"_index":160,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["axeshelper",{"_index":2299,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axeshelper().type",{"_index":2307,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axis",{"_index":210,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{}}}],["azimuthal",{"_index":788,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["b",{"_index":2128,"title":{},"body":{"classes/RendererManager.html":{}}}],["b10bb7a",{"_index":2980,"title":{},"body":{"changelog.html":{}}}],["b46c49f",{"_index":3175,"title":{},"body":{"changelog.html":{}}}],["b52282f",{"_index":3006,"title":{},"body":{"changelog.html":{}}}],["b7a324a",{"_index":3000,"title":{},"body":{"changelog.html":{}}}],["b7e8da0",{"_index":3098,"title":{},"body":{"changelog.html":{}}}],["b8e88b8",{"_index":2972,"title":{},"body":{"changelog.html":{}}}],["b_first",{"_index":1309,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["b_last",{"_index":1304,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["b_middle",{"_index":1303,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["back",{"_index":452,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["back_1",{"_index":458,"title":{},"body":{"classes/CMSObjects.html":{}}}],["back_2",{"_index":454,"title":{},"body":{"classes/CMSObjects.html":{}}}],["back_3",{"_index":455,"title":{},"body":{"classes/CMSObjects.html":{}}}],["back_4",{"_index":457,"title":{},"body":{"classes/CMSObjects.html":{}}}],["based",{"_index":609,"title":{},"body":{"classes/ColorOptions.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["bbcdf0c",{"_index":3003,"title":{},"body":{"changelog.html":{}}}],["bbea6b0",{"_index":2956,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":2273,"title":{},"body":{"classes/SelectionManager.html":{}}}],["being",{"_index":1403,"title":{},"body":{"classes/InfoLogger.html":{},"interfaces/Window.html":{}}}],["better",{"_index":1903,"title":{},"body":{"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["big",{"_index":3168,"title":{},"body":{"changelog.html":{}}}],["bind",{"_index":2973,"title":{},"body":{"changelog.html":{}}}],["blob",{"_index":3319,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blob([data",{"_index":3320,"title":{},"body":{"miscellaneous/variables.html":{}}}],["block",{"_index":2535,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["bloom",{"_index":1084,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["boolean",{"_index":524,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["both",{"_index":2756,"title":{},"body":{"interfaces/Window.html":{}}}],["bottom",{"_index":461,"title":{},"body":{"classes/CMSObjects.html":{},"classes/URLOptionsManager.html":{}}}],["bounded",{"_index":2610,"title":{},"body":{"classes/VRManager.html":{}}}],["bounds",{"_index":1377,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["box",{"_index":479,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffer",{"_index":465,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffer.attributes.position",{"_index":466,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffer.computevertexnormals",{"_index":468,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffergeometry",{"_index":1851,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["boxedges",{"_index":481,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject",{"_index":469,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.name",{"_index":476,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.userdata",{"_index":474,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.uuid",{"_index":489,"title":{},"body":{"classes/CMSObjects.html":{}}}],["browser",{"_index":3007,"title":{},"body":{"changelog.html":{}}}],["browsers",{"_index":2136,"title":{},"body":{"classes/RendererManager.html":{}}}],["bufferattribute",{"_index":188,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["buffergeometry",{"_index":181,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["buffergeometry().setfrompoints",{"_index":2658,"title":{},"body":{"classes/VRManager.html":{}}}],["buffergeometry().setfrompoints(points",{"_index":1943,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["bug",{"_index":2901,"title":{},"body":{"changelog.html":{}}}],["bugged",{"_index":3177,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":2356,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["build:bundlethis",{"_index":3273,"title":{},"body":{"index.html":{}}}],["buildeventdata",{"_index":1162,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["buildeventdata(eventdata",{"_index":1171,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["buildeventdatafromjson(eventdata",{"_index":2731,"title":{},"body":{"interfaces/Window.html":{}}}],["buildgeometryfromparameters",{"_index":2853,"title":{},"body":{"interfaces/Window.html":{}}}],["buildgeometryfromparameters(parameters",{"_index":2813,"title":{},"body":{"interfaces/Window.html":{}}}],["building",{"_index":3277,"title":{},"body":{"index.html":{}}}],["builds",{"_index":2730,"title":{},"body":{"interfaces/Window.html":{}}}],["bump",{"_index":3194,"title":{},"body":{"changelog.html":{}}}],["bundle",{"_index":3086,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["bundled",{"_index":3271,"title":{},"body":{"index.html":{}}}],["button",{"_index":1623,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{},"miscellaneous/typealiases.html":{}}}],["buttons",{"_index":2426,"title":{},"body":{"classes/StateManager.html":{}}}],["c1",{"_index":2667,"title":{},"body":{"classes/VRManager.html":{}}}],["c36a222",{"_index":3127,"title":{},"body":{"changelog.html":{}}}],["c39ecd3",{"_index":3139,"title":{},"body":{"changelog.html":{}}}],["c446567",{"_index":2927,"title":{},"body":{"changelog.html":{}}}],["c7a35db",{"_index":3169,"title":{},"body":{"changelog.html":{}}}],["c92d65f",{"_index":2909,"title":{},"body":{"changelog.html":{}}}],["c9781e5",{"_index":2961,"title":{},"body":{"changelog.html":{}}}],["c991e54",{"_index":3090,"title":{},"body":{"changelog.html":{}}}],["c9d4880",{"_index":3072,"title":{},"body":{"changelog.html":{}}}],["ca3cc2f",{"_index":2998,"title":{},"body":{"changelog.html":{}}}],["calculated",{"_index":672,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["call",{"_index":41,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["callback",{"_index":47,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"miscellaneous/typealiases.html":{}}}],["callback(averageprogress",{"_index":1550,"title":{},"body":{"classes/LoadingManager.html":{}}}],["callback(eventdata",{"_index":2739,"title":{},"body":{"interfaces/Window.html":{}}}],["callback(eventkeys",{"_index":2729,"title":{},"body":{"interfaces/Window.html":{}}}],["callback(updatedvalue",{"_index":60,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["callbackfunction",{"_index":38,"title":{},"body":{"classes/ActiveVariable.html":{},"miscellaneous/typealiases.html":{}}}],["callbacks",{"_index":19,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/LoadingManager.html":{},"interfaces/Window.html":{}}}],["called",{"_index":2686,"title":{},"body":{"interfaces/Window.html":{}}}],["calling",{"_index":1602,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{}}}],["calocluster",{"_index":2964,"title":{},"body":{"changelog.html":{}}}],["caloclusters",{"_index":1462,"title":{},"body":{"classes/LHCbLoader.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["camera",{"_index":89,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["cameragroup",{"_index":2544,"title":{},"body":{"classes/VRManager.html":{}}}],["camerapos",{"_index":1960,"title":{},"body":{"classes/PresetView.html":{}}}],["cameraposition",{"_index":2431,"title":{},"body":{"classes/StateManager.html":{}}}],["cameras",{"_index":2816,"title":{},"body":{"interfaces/Window.html":{}}}],["canvas",{"_index":922,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["canvas.appendchild(this.gui.domelement",{"_index":925,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["canvaswrapper",{"_index":2144,"title":{},"body":{"classes/RendererManager.html":{}}}],["canvaswrapper.appendchild(this.getmainrenderer().domelement",{"_index":2154,"title":{},"body":{"classes/RendererManager.html":{}}}],["canvaswrapper.offsetheight",{"_index":2149,"title":{},"body":{"classes/RendererManager.html":{}}}],["canvaswrapper.offsetwidth",{"_index":2146,"title":{},"body":{"classes/RendererManager.html":{}}}],["care",{"_index":1178,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["cartesian",{"_index":762,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["case",{"_index":1865,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["catch",{"_index":3032,"title":{},"body":{"changelog.html":{}}}],["catch((error",{"_index":2519,"title":{},"body":{"classes/URLOptionsManager.html":{},"classes/VRManager.html":{}}}],["catmullromcurve3",{"_index":1849,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cb2ec40",{"_index":3088,"title":{},"body":{"changelog.html":{}}}],["cb68283",{"_index":2921,"title":{},"body":{"changelog.html":{}}}],["cdn",{"_index":3058,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["cfb1b6a",{"_index":3176,"title":{},"body":{"changelog.html":{}}}],["cg",{"_index":2669,"title":{},"body":{"classes/VRManager.html":{}}}],["chaining",{"_index":3089,"title":{},"body":{"changelog.html":{}}}],["chamber",{"_index":428,"title":{},"body":{"classes/CMSObjects.html":{}}}],["change",{"_index":14,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["changeable",{"_index":873,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["changed",{"_index":13,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["changelog",{"_index":2889,"title":{"changelog.html":{}},"body":{}}],["changes",{"_index":500,"title":{},"body":{"classes/ColorManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["changing",{"_index":249,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["charge",{"_index":572,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"miscellaneous/enumerations.html":{}}}],["chargecolors",{"_index":547,"title":{},"body":{"classes/ColorOptions.html":{}}}],["chargevalue",{"_index":626,"title":{},"body":{"classes/ColorOptions.html":{}}}],["check",{"_index":253,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/LoadingManager.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["checkbox",{"_index":1622,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["checked",{"_index":2094,"title":{},"body":{"classes/RendererManager.html":{}}}],["checking",{"_index":1344,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["chi2",{"_index":1979,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["child",{"_index":534,"title":{},"body":{"classes/ColorManager.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["child.findintree(name",{"_index":1705,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.name",{"_index":1712,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.nodelevel",{"_index":1634,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.parent",{"_index":1633,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.toggleselfanddescendants(child.togglestate",{"_index":1655,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.toggleselfanddescendants(value",{"_index":1654,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.togglestate",{"_index":1653,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.traverse((object",{"_index":536,"title":{},"body":{"classes/ColorManager.html":{}}}],["childindex",{"_index":1637,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["children",{"_index":1558,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["childrenactive",{"_index":1559,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childrentogglestate",{"_index":1560,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate",{"_index":1695,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate.name",{"_index":1700,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate.nodelevel",{"_index":1702,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["class",{"_index":0,"title":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{}},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"index.html":{},"overview.html":{}}}],["cleanup",{"_index":2967,"title":{},"body":{"changelog.html":{}}}],["clear",{"_index":906,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["cleardatgui",{"_index":855,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["clearing",{"_index":2735,"title":{},"body":{"interfaces/Window.html":{}}}],["clearinterval(intervalid",{"_index":2674,"title":{},"body":{"classes/VRManager.html":{}}}],["clearphoenixmenu",{"_index":1717,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["click",{"_index":2268,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicked",{"_index":2361,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicking",{"_index":2864,"title":{},"body":{"interfaces/Window.html":{}}}],["clipping",{"_index":107,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["clippingangle",{"_index":2397,"title":{},"body":{"classes/StateManager.html":{}}}],["clippingconstant",{"_index":122,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["clippingenabled",{"_index":2398,"title":{},"body":{"classes/StateManager.html":{}}}],["clone",{"_index":1321,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["cloned",{"_index":1844,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/VRManager.html":{}}}],["close",{"_index":2946,"title":{},"body":{"changelog.html":{}}}],["closes",{"_index":2984,"title":{},"body":{"changelog.html":{}}}],["closest",{"_index":2378,"title":{},"body":{"classes/SelectionManager.html":{}}}],["cluster",{"_index":1817,"title":{},"body":{"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["clusterparams",{"_index":1818,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusterparams.uuid",{"_index":1925,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusters",{"_index":1476,"title":{},"body":{"classes/LHCbLoader.html":{},"changelog.html":{}}}],["cms",{"_index":419,"title":{},"body":{"classes/CMSObjects.html":{},"changelog.html":{}}}],["cmsloader",{"_index":3112,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["cmsobjects",{"_index":414,"title":{"classes/CMSObjects.html":{}},"body":{"classes/CMSObjects.html":{},"changelog.html":{},"coverage.html":{}}}],["code",{"_index":2923,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["collection",{"_index":502,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["collection's",{"_index":1022,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"changelog.html":{}}}],["collection.name",{"_index":1272,"title":{},"body":{"classes/ExportManager.html":{}}}],["collectioncolor",{"_index":493,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["collectioncolor(collectionname",{"_index":498,"title":{},"body":{"classes/ColorManager.html":{}}}],["collectioncolor?.gethexstring",{"_index":644,"title":{},"body":{"classes/ColorOptions.html":{}}}],["collectionfolder",{"_index":561,"title":{},"body":{"classes/ColorOptions.html":{}}}],["collectionfolder.addchild('color",{"_index":641,"title":{},"body":{"classes/ColorOptions.html":{}}}],["collectionfolder.name",{"_index":639,"title":{},"body":{"classes/ColorOptions.html":{}}}],["collectionname",{"_index":503,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["collectionnode",{"_index":1767,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["collectionnode.addchild('cut",{"_index":1777,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["collectionnode.addchild('draw",{"_index":1770,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["collections",{"_index":1194,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["collfolder",{"_index":1018,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["collfolder.addfolder('cuts",{"_index":1027,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["collideparticles",{"_index":83,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["collideparticles(tweenduration",{"_index":147,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["colliding",{"_index":400,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["collision",{"_index":146,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["collison",{"_index":110,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["color",{"_index":151,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["color(0x2194ce",{"_index":3293,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xff0000",{"_index":3292,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xffd166",{"_index":3294,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xffffff",{"_index":161,"title":{},"body":{"classes/AnimationsManager.html":{},"miscellaneous/variables.html":{}}}],["color(color).gethexstring",{"_index":1755,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["color).set(color",{"_index":541,"title":{},"body":{"classes/ColorManager.html":{}}}],["colorbymomentum",{"_index":554,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbymomentum(minormax",{"_index":607,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoption",{"_index":569,"title":{},"body":{"classes/ColorOptions.html":{},"miscellaneous/typealiases.html":{}}}],["colorbyoption.initialize",{"_index":655,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoption.name",{"_index":660,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoptionkeys",{"_index":564,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{},"miscellaneous/enumerations.html":{}}}],["colorbyoptionkeys.charge",{"_index":571,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoptionkeys.mom",{"_index":578,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{}}}],["colorbyoptions",{"_index":548,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{}}}],["colorbyoptions.push(colorbyoptionkeys.charge",{"_index":1789,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["colorbyoptionstoinclude",{"_index":563,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoptionstoinclude.includes(colorbyoption.key",{"_index":652,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoptionstoinclude?.length",{"_index":649,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colored",{"_index":628,"title":{},"body":{"classes/ColorOptions.html":{}}}],["coloring",{"_index":492,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["colormanager",{"_index":490,"title":{"classes/ColorManager.html":{}},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"coverage.html":{}}}],["colormenu",{"_index":958,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["colormenu.onchange((color",{"_index":1070,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["colormenu.onchange((value",{"_index":961,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["colormenu.onchange(oncolorchange",{"_index":1056,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["colormenu.setvalue(collectioncolor?.gethex",{"_index":1025,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["colorobjectsbyproperty",{"_index":494,"title":{},"body":{"classes/ColorManager.html":{}}}],["colorobjectsbyproperty(color",{"_index":506,"title":{},"body":{"classes/ColorManager.html":{}}}],["coloroptions",{"_index":542,"title":{"classes/ColorOptions.html":{}},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{},"coverage.html":{}}}],["coloroptionsfolder",{"_index":549,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colors",{"_index":587,"title":{},"body":{"classes/ColorOptions.html":{},"miscellaneous/variables.html":{}}}],["colour",{"_index":2851,"title":{},"body":{"interfaces/Window.html":{}}}],["commit",{"_index":2895,"title":{},"body":{"changelog.html":{}}}],["commits",{"_index":2894,"title":{},"body":{"changelog.html":{}}}],["complete",{"_index":2822,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["completely",{"_index":3123,"title":{},"body":{"changelog.html":{}}}],["completes",{"_index":346,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["component",{"_index":3145,"title":{},"body":{"changelog.html":{}}}],["components",{"_index":3180,"title":{},"body":{"changelog.html":{}}}],["composer",{"_index":1086,"title":{},"body":{"classes/EffectsManager.html":{}}}],["computed",{"_index":1289,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["concatonateobjs",{"_index":1446,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["cone",{"_index":1879,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["config",{"_index":1599,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["config.onchange",{"_index":1665,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['color",{"_index":1662,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['ischecked",{"_index":1660,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['value",{"_index":1664,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.type",{"_index":1658,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['color",{"_index":1661,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['highvalue",{"_index":1667,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['ischecked",{"_index":1659,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['value",{"_index":1663,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configactive",{"_index":1561,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configfile",{"_index":3308,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configfunctions",{"_index":903,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["configoptions",{"_index":1645,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configs",{"_index":1562,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configslength",{"_index":1647,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate",{"_index":1683,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate['label",{"_index":1690,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate['type",{"_index":1688,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate[prop",{"_index":1693,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configurable",{"_index":755,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["configuration",{"_index":701,"title":{"interfaces/Configuration.html":{}},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["configuration.allowurloptions",{"_index":2709,"title":{},"body":{"interfaces/Window.html":{}}}],["configurations",{"_index":596,"title":{},"body":{"classes/ColorOptions.html":{}}}],["configure",{"_index":2593,"title":{},"body":{"classes/VRManager.html":{}}}],["console",{"_index":2712,"title":{},"body":{"interfaces/Window.html":{}}}],["console.error",{"_index":1641,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["console.error('could",{"_index":2522,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["console.error('error",{"_index":2236,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["console.log",{"_index":2666,"title":{},"body":{"classes/VRManager.html":{}}}],["console.log('no",{"_index":1907,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["console.log('processing",{"_index":1487,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["console.log('vr",{"_index":2617,"title":{},"body":{"classes/VRManager.html":{}}}],["const",{"_index":197,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":125,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["constructor",{"_index":25,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["constructor(camera",{"_index":1094,"title":{},"body":{"classes/EffectsManager.html":{}}}],["constructor(colormanager",{"_index":560,"title":{},"body":{"classes/ColorOptions.html":{}}}],["constructor(configuration",{"_index":2694,"title":{},"body":{"interfaces/Window.html":{}}}],["constructor(elementid",{"_index":858,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["constructor(eventdisplay",{"_index":2461,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["constructor(field",{"_index":820,"title":{},"body":{"classes/Cut.html":{}}}],["constructor(name",{"_index":1577,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["constructor(phoenixmenu",{"_index":1720,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["constructor(private",{"_index":523,"title":{},"body":{"classes/ColorManager.html":{}}}],["constructor(public",{"_index":57,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["constructor(scene",{"_index":86,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["constructor(scenemanager",{"_index":495,"title":{},"body":{"classes/ColorManager.html":{}}}],["constructor(value",{"_index":26,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["contain",{"_index":1822,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["containing",{"_index":92,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["containingevent",{"_index":2826,"title":{},"body":{"interfaces/Window.html":{}}}],["containment",{"_index":2095,"title":{},"body":{"classes/RendererManager.html":{}}}],["contains",{"_index":1207,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/RendererManager.html":{}}}],["containsobject",{"_index":2068,"title":{},"body":{"classes/RendererManager.html":{}}}],["containsobject(obj",{"_index":2092,"title":{},"body":{"classes/RendererManager.html":{}}}],["content",{"_index":2766,"title":{},"body":{"interfaces/Window.html":{}}}],["contenttype",{"_index":3298,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controller",{"_index":2566,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["controller1",{"_index":2545,"title":{},"body":{"classes/VRManager.html":{}}}],["controller2",{"_index":2546,"title":{},"body":{"classes/VRManager.html":{}}}],["controllergrip1",{"_index":2547,"title":{},"body":{"classes/VRManager.html":{}}}],["controllergrip2",{"_index":2548,"title":{},"body":{"classes/VRManager.html":{}}}],["controllermodelfactory",{"_index":2647,"title":{},"body":{"classes/VRManager.html":{}}}],["controllermodelfactory.createcontrollermodel(this.controllergrip1",{"_index":2651,"title":{},"body":{"classes/VRManager.html":{}}}],["controllermodelfactory.createcontrollermodel(this.controllergrip2",{"_index":2656,"title":{},"body":{"classes/VRManager.html":{}}}],["controllers",{"_index":2640,"title":{},"body":{"classes/VRManager.html":{}}}],["controls",{"_index":862,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["controlsmanager",{"_index":3228,"title":{},"body":{"coverage.html":{}}}],["conventional",{"_index":2893,"title":{},"body":{"changelog.html":{}}}],["conversions",{"_index":744,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["convert",{"_index":773,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["coordinate",{"_index":743,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["coordinatehelper",{"_index":739,"title":{"classes/CoordinateHelper.html":{}},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"changelog.html":{},"coverage.html":{}}}],["coordinatehelper.sphericaltocartesian(d0",{"_index":2050,"title":{},"body":{"classes/RKHelper.html":{}}}],["coordinatehelper.sphericaltocartesian(p",{"_index":2049,"title":{},"body":{"classes/RKHelper.html":{}}}],["coordinates",{"_index":1896,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["coordlength",{"_index":1897,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["coords",{"_index":753,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["copy",{"_index":1995,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["copy(camera.clone",{"_index":2635,"title":{},"body":{"classes/VRManager.html":{}}}],["correct",{"_index":3130,"title":{},"body":{"changelog.html":{}}}],["correctly",{"_index":3174,"title":{},"body":{"changelog.html":{}}}],["count",{"_index":256,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LoadingManager.html":{}}}],["coverage",{"_index":3196,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covering",{"_index":337,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["cphi",{"_index":1871,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cpu",{"_index":3054,"title":{},"body":{"changelog.html":{}}}],["create",{"_index":30,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["created",{"_index":1610,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{}}}],["creating",{"_index":2732,"title":{},"body":{"interfaces/Window.html":{}}}],["cross(b_last",{"_index":1337,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["cross(b_middle",{"_index":1327,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["ctheta",{"_index":1875,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube",{"_index":1927,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.lookat(new",{"_index":1922,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.name",{"_index":1924,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.position.copy(position",{"_index":1921,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.userdata",{"_index":1923,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.uuid",{"_index":1926,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["curently",{"_index":1237,"title":{},"body":{"classes/ExportManager.html":{}}}],["current",{"_index":290,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["currently",{"_index":96,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ColorOptions.html":{},"classes/ExportManager.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["currentvrsession",{"_index":2549,"title":{},"body":{"classes/VRManager.html":{}}}],["custom",{"_index":514,"title":{},"body":{"classes/ColorManager.html":{}}}],["customcheck",{"_index":508,"title":{},"body":{"classes/ColorManager.html":{}}}],["customcheck(object.userdata",{"_index":528,"title":{},"body":{"classes/ColorManager.html":{}}}],["customize",{"_index":2692,"title":{},"body":{"interfaces/Window.html":{}}}],["cut",{"_index":809,"title":{"classes/Cut.html":{}},"body":{"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"changelog.html":{},"coverage.html":{}}}],["cut.field",{"_index":1034,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["cut.maxvalue",{"_index":1032,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["cut.minvalue",{"_index":1031,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["cut.reset",{"_index":1780,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["cut.step",{"_index":1784,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["cuts",{"_index":876,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["cuts.length",{"_index":1775,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["cutsfolder",{"_index":1026,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["cutsoptionsnode",{"_index":1776,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["cutsoptionsnode.addconfig('rangeslider",{"_index":1782,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["cylinderbuffergeometry",{"_index":1850,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["d0",{"_index":2041,"title":{},"body":{"classes/RKHelper.html":{}}}],["d207bad",{"_index":3049,"title":{},"body":{"changelog.html":{}}}],["d2874b8",{"_index":3034,"title":{},"body":{"changelog.html":{}}}],["d3920c4",{"_index":3154,"title":{},"body":{"changelog.html":{}}}],["d677089",{"_index":3073,"title":{},"body":{"changelog.html":{}}}],["d90e3a6",{"_index":3074,"title":{},"body":{"changelog.html":{}}}],["da3ead5",{"_index":3135,"title":{},"body":{"changelog.html":{}}}],["dashsize",{"_index":1945,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["dat.gui",{"_index":724,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"dependencies.html":{}}}],["data",{"_index":95,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["data.json",{"_index":3266,"title":{},"body":{"index.html":{}}}],["datguimenuui",{"_index":835,"title":{"classes/DatGUIMenuUI.html":{}},"body":{"classes/DatGUIMenuUI.html":{},"coverage.html":{}}}],["db261a6",{"_index":3085,"title":{},"body":{"changelog.html":{}}}],["db3ca8b",{"_index":2949,"title":{},"body":{"changelog.html":{}}}],["dc05ed9",{"_index":3087,"title":{},"body":{"changelog.html":{}}}],["dc140dd",{"_index":3110,"title":{},"body":{"changelog.html":{}}}],["dc5d489",{"_index":3101,"title":{},"body":{"changelog.html":{}}}],["dcf6cec",{"_index":3133,"title":{},"body":{"changelog.html":{}}}],["debugging",{"_index":2902,"title":{},"body":{"changelog.html":{}}}],["declare",{"_index":2206,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["default",{"_index":39,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["defaulteventfile",{"_index":706,"title":{},"body":{"interfaces/Configuration.html":{}}}],["defaulteventpath",{"_index":2472,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["defaulteventtype",{"_index":2469,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["defaultmaxvalue",{"_index":814,"title":{},"body":{"classes/Cut.html":{}}}],["defaultminvalue",{"_index":815,"title":{},"body":{"classes/Cut.html":{}}}],["defaultrenderpass",{"_index":1087,"title":{},"body":{"classes/EffectsManager.html":{}}}],["defaults",{"_index":2190,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["defaultview",{"_index":707,"title":{},"body":{"interfaces/Configuration.html":{},"changelog.html":{}}}],["define",{"_index":1279,"title":{},"body":{"classes/Field.html":{},"index.html":{}}}],["defined",{"_index":28,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{}}}],["defining",{"_index":2846,"title":{},"body":{"interfaces/Window.html":{}}}],["definition",{"_index":776,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["delete",{"_index":1642,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"changelog.html":{}}}],["deleted",{"_index":997,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["deleting",{"_index":989,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["dependencies",{"_index":3241,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["deployment",{"_index":3191,"title":{},"body":{"changelog.html":{}}}],["depth",{"_index":1765,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["depthtest",{"_index":885,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["depthtestmenu",{"_index":1005,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["depthtestmenu.onchange((value",{"_index":1008,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["descendants",{"_index":1620,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["describe",{"_index":1964,"title":{},"body":{"classes/PresetView.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["desired",{"_index":1192,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["detector",{"_index":209,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{},"index.html":{}}}],["detectoropacity",{"_index":952,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["df9ce07",{"_index":2904,"title":{},"body":{"changelog.html":{}}}],["dflt_colors",{"_index":2803,"title":{},"body":{"interfaces/Window.html":{}}}],["dialog",{"_index":2975,"title":{},"body":{"changelog.html":{}}}],["different",{"_index":861,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["dimensional",{"_index":177,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["dir",{"_index":1378,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["direction",{"_index":1369,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["directionallight",{"_index":2297,"title":{},"body":{"classes/SelectionManager.html":{}}}],["directionallight().type",{"_index":2306,"title":{},"body":{"classes/SelectionManager.html":{}}}],["directly",{"_index":3272,"title":{},"body":{"index.html":{}}}],["directory",{"_index":3276,"title":{},"body":{"index.html":{}}}],["disable",{"_index":2278,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["disabled",{"_index":1103,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["disableselecting",{"_index":2251,"title":{},"body":{"classes/SelectionManager.html":{}}}],["display",{"_index":704,"title":{},"body":{"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["display's",{"_index":97,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["display.ts",{"_index":2683,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["displayed",{"_index":1197,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["displayusage",{"_index":3260,"title":{},"body":{"index.html":{}}}],["dist/bundle",{"_index":3275,"title":{},"body":{"index.html":{}}}],["distance",{"_index":126,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{}}}],["distancefromorigin",{"_index":149,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["divide",{"_index":2928,"title":{},"body":{"changelog.html":{}}}],["dividescalar(previousscale",{"_index":292,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["docs",{"_index":2919,"title":{},"body":{"changelog.html":{}}}],["document",{"_index":2316,"title":{},"body":{"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{}}}],["document.body",{"_index":924,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{}}}],["document.createelement('a",{"_index":3322,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document.createelement('input",{"_index":3303,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document.createelement('script",{"_index":2227,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["document.getelementbyid('gui",{"_index":929,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["document.getelementbyid(elementid",{"_index":923,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{}}}],["document.getelementsbytagname('head')[0",{"_index":2201,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["document.queryselectorall",{"_index":2223,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["documentation",{"_index":2962,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["documented",{"_index":2892,"title":{},"body":{"changelog.html":{}}}],["dof",{"_index":1981,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["dom",{"_index":2104,"title":{},"body":{"classes/RendererManager.html":{}}}],["don't",{"_index":1454,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PrettySymbols.html":{}}}],["doubleside",{"_index":433,"title":{},"body":{"classes/CMSObjects.html":{}}}],["doublesided",{"_index":2755,"title":{},"body":{"interfaces/Window.html":{}}}],["download",{"_index":3329,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dparams",{"_index":2009,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["dparams[0",{"_index":2042,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[1",{"_index":2044,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[2",{"_index":2045,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[3",{"_index":2046,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[4",{"_index":673,"title":{},"body":{"classes/ColorOptions.html":{},"classes/RKHelper.html":{}}}],["draw",{"_index":1183,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{}}}],["drawing",{"_index":2948,"title":{},"body":{"changelog.html":{}}}],["drawoptionsnode",{"_index":1769,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["drawoptionsnode.addconfig('checkbox",{"_index":1773,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["drawoptionsnode.addconfig('slider",{"_index":1771,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["drawrange",{"_index":255,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["driven",{"_index":3253,"title":{},"body":{"index.html":{}}}],["drop",{"_index":3052,"title":{},"body":{"changelog.html":{}}}],["duration",{"_index":112,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["dynamically",{"_index":2177,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["e",{"_index":3307,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e.g",{"_index":1456,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["e.target?.files[0",{"_index":3309,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e10a68d",{"_index":3076,"title":{},"body":{"changelog.html":{}}}],["e297c98",{"_index":3131,"title":{},"body":{"changelog.html":{}}}],["e6f69a0",{"_index":3071,"title":{},"body":{"changelog.html":{}}}],["e96136b",{"_index":3068,"title":{},"body":{"changelog.html":{}}}],["e9f1bc9",{"_index":3104,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":138,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/LoadingManager.html":{},"interfaces/Window.html":{}}}],["easily",{"_index":1957,"title":{},"body":{"classes/PresetView.html":{}}}],["easing",{"_index":163,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["edcd567",{"_index":2952,"title":{},"body":{"changelog.html":{}}}],["edges",{"_index":480,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry",{"_index":431,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry(boxbuffer",{"_index":482,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edit",{"_index":299,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["edward's",{"_index":3120,"title":{},"body":{"changelog.html":{}}}],["effect",{"_index":1107,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectcomposer",{"_index":1105,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectcomposer(renderer",{"_index":1133,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effects",{"_index":1080,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["effectsmanager",{"_index":1078,"title":{"classes/EffectsManager.html":{}},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["effectsrender",{"_index":1091,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectsrender(scene",{"_index":1121,"title":{},"body":{"classes/EffectsManager.html":{}}}],["element",{"_index":722,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["elementid",{"_index":708,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{},"index.html":{}}}],["elements",{"_index":1117,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["embed",{"_index":2466,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["empty",{"_index":2884,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["enable",{"_index":723,"title":{},"body":{"interfaces/Configuration.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["enabled",{"_index":1102,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["enabledatguimenu",{"_index":709,"title":{},"body":{"interfaces/Configuration.html":{}}}],["enableeventdisplayconsole",{"_index":2845,"title":{},"body":{"interfaces/Window.html":{}}}],["enablekeyboardcontrols",{"_index":2876,"title":{},"body":{"interfaces/Window.html":{}}}],["enables",{"_index":2844,"title":{},"body":{"interfaces/Window.html":{}}}],["enableselecting",{"_index":2252,"title":{},"body":{"classes/SelectionManager.html":{}}}],["enableselecting(enable",{"_index":2866,"title":{},"body":{"interfaces/Window.html":{}}}],["enabling",{"_index":2274,"title":{},"body":{"classes/SelectionManager.html":{}}}],["enabling/disabling",{"_index":944,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["end",{"_index":167,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["end.chain(startclone",{"_index":230,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["ended",{"_index":115,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["ends",{"_index":140,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["endvr",{"_index":2719,"title":{},"body":{"interfaces/Window.html":{}}}],["endvrsession",{"_index":2558,"title":{},"body":{"classes/VRManager.html":{}}}],["energy",{"_index":1952,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"changelog.html":{}}}],["entries",{"_index":1394,"title":{},"body":{"classes/InfoLogger.html":{}}}],["entry",{"_index":1400,"title":{},"body":{"classes/InfoLogger.html":{}}}],["enum",{"_index":636,"title":{},"body":{"classes/ColorOptions.html":{}}}],["enumerations",{"_index":3249,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equal",{"_index":630,"title":{},"body":{"classes/ColorOptions.html":{}}}],["error",{"_index":1345,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["error_estimate",{"_index":1347,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["estimate",{"_index":1346,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["et",{"_index":1982,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["eta",{"_index":759,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PrettySymbols.html":{},"changelog.html":{}}}],["eta/phi",{"_index":763,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["eta=0",{"_index":795,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etaphitocartesian",{"_index":746,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etaphitocartesian(radius",{"_index":758,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etatotheta",{"_index":747,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etatotheta(eta",{"_index":771,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["eta~infinite",{"_index":801,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etc",{"_index":878,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{}}}],["event",{"_index":94,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["event's",{"_index":2410,"title":{},"body":{"classes/StateManager.html":{}}}],["event.clientx",{"_index":2368,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.clienty",{"_index":2371,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.preventdefault",{"_index":2363,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event_data_type_colors",{"_index":435,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["event_data_type_colors.jets",{"_index":1882,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["event_data_type_colors.missingenergy",{"_index":1947,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["event_data_type_colors.muonchambers",{"_index":471,"title":{},"body":{"classes/CMSObjects.html":{}}}],["event_data_type_colors.vertices",{"_index":1930,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["eventdata",{"_index":235,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["eventdata.children",{"_index":1268,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdata.traverse((eventobject",{"_index":244,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventdataconfig",{"_index":1263,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name",{"_index":1270,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name].push(collection.name",{"_index":1273,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataloader",{"_index":710,"title":{"interfaces/EventDataLoader.html":{}},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"coverage.html":{},"index.html":{}}}],["eventdisplay",{"_index":915,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"coverage.html":{},"index.html":{}}}],["eventdisplay.init(configuration",{"_index":3264,"title":{},"body":{"index.html":{}}}],["eventdisplay.loadobjgeometry('path/to/geometry.obj",{"_index":3268,"title":{},"body":{"index.html":{}}}],["eventdisplay.parsephoenixevents(res",{"_index":3267,"title":{},"body":{"index.html":{}}}],["eventfile",{"_index":737,"title":{},"body":{"interfaces/Configuration.html":{}}}],["eventfolder",{"_index":841,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["eventfolderstate",{"_index":1715,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["eventkey",{"_index":2742,"title":{},"body":{"interfaces/Window.html":{}}}],["eventkeys",{"_index":2721,"title":{},"body":{"interfaces/Window.html":{}}}],["eventmetadata",{"_index":2399,"title":{},"body":{"classes/StateManager.html":{}}}],["eventnumber",{"_index":1488,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/StateManager.html":{}}}],["eventobject",{"_index":240,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry",{"_index":245,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.attributes['position'].array",{"_index":302,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.boundingsphere.center",{"_index":298,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.computeboundingsphere",{"_index":304,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.deleteattribute('position",{"_index":303,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.drawrange",{"_index":270,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.drawrange.count",{"_index":266,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.setdrawrange(0",{"_index":267,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry?.attributes?.position?.count",{"_index":259,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.material",{"_index":361,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.material.clippingplanes",{"_index":362,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.name",{"_index":251,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.position",{"_index":291,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.position.equals",{"_index":296,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.setscalar(updatedscale.x",{"_index":285,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.x",{"_index":278,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.y",{"_index":279,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.z",{"_index":280,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.visible",{"_index":311,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobjecttween",{"_index":268,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobjecttween.oncomplete",{"_index":271,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["events",{"_index":1205,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["eventsdata",{"_index":1206,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["eventtype",{"_index":738,"title":{},"body":{"interfaces/Configuration.html":{}}}],["examples",{"_index":3278,"title":{},"body":{"index.html":{}}}],["except",{"_index":3027,"title":{},"body":{"changelog.html":{}}}],["existing",{"_index":2052,"title":{},"body":{"classes/RKHelper.html":{},"interfaces/Window.html":{}}}],["exists",{"_index":257,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/ScriptLoader.html":{}}}],["experiment",{"_index":757,"title":{},"body":{"classes/CoordinateHelper.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["experimental",{"_index":769,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["experimentinfo",{"_index":2528,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["experiments",{"_index":3128,"title":{},"body":{"changelog.html":{}}}],["export",{"_index":55,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["exported",{"_index":1226,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter",{"_index":1245,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse",{"_index":1257,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse(scene",{"_index":1246,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportmanager",{"_index":1211,"title":{"classes/ExportManager.html":{}},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["exportphoenixdisplay",{"_index":2783,"title":{},"body":{"interfaces/Window.html":{}}}],["exportphoenixscene",{"_index":1213,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportphoenixscene(scene",{"_index":1218,"title":{},"body":{"classes/ExportManager.html":{}}}],["exports",{"_index":1220,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["exportscenetoobj",{"_index":1214,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportscenetoobj(scene",{"_index":1228,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporttoobj",{"_index":2771,"title":{},"body":{"interfaces/Window.html":{}}}],["expressed",{"_index":1484,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["extend",{"_index":3013,"title":{},"body":{"changelog.html":{}}}],["extendeventdatatypeui",{"_index":1459,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["extends",{"_index":1414,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["extension",{"_index":2944,"title":{},"body":{"changelog.html":{}}}],["external",{"_index":2178,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["extra",{"_index":1787,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["extraanimationsphereduration",{"_index":232,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["extract",{"_index":2514,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["extrainfo",{"_index":1824,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["extrapolate",{"_index":2027,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolated",{"_index":1858,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["extrapolatetrackpositions",{"_index":2023,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolatetrackpositions(track",{"_index":2025,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolating",{"_index":246,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["extrapolation",{"_index":1867,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["extras/configuration",{"_index":2483,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["extras/cut.model",{"_index":914,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["f1d2cef",{"_index":2922,"title":{},"body":{"changelog.html":{}}}],["f279898",{"_index":2971,"title":{},"body":{"changelog.html":{}}}],["f4c2e31",{"_index":3095,"title":{},"body":{"changelog.html":{}}}],["f7cd6b4",{"_index":3002,"title":{},"body":{"changelog.html":{}}}],["f87c587",{"_index":3165,"title":{},"body":{"changelog.html":{}}}],["f8a0080",{"_index":2960,"title":{},"body":{"changelog.html":{}}}],["f94c0e4",{"_index":3099,"title":{},"body":{"changelog.html":{}}}],["faces",{"_index":440,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces.map((face",{"_index":443,"title":{},"body":{"classes/CMSObjects.html":{}}}],["facing",{"_index":2677,"title":{},"body":{"classes/VRManager.html":{}}}],["factor",{"_index":2817,"title":{},"body":{"interfaces/Window.html":{}}}],["failed",{"_index":3159,"title":{},"body":{"changelog.html":{}}}],["fallback",{"_index":2473,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["false",{"_index":312,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["fbd584e",{"_index":3060,"title":{},"body":{"changelog.html":{}}}],["fe0b2e6",{"_index":3080,"title":{},"body":{"changelog.html":{}}}],["features",{"_index":2912,"title":{},"body":{"changelog.html":{}}}],["fetch",{"_index":2495,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["fetch('path/to/event",{"_index":3265,"title":{},"body":{"index.html":{}}}],["fetch(file",{"_index":2511,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["fetch(this.urloptions.get('config",{"_index":2503,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["few",{"_index":1857,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["ff0000",{"_index":585,"title":{},"body":{"classes/ColorOptions.html":{}}}],["ff10477",{"_index":3143,"title":{},"body":{"changelog.html":{}}}],["ff666e2",{"_index":2982,"title":{},"body":{"changelog.html":{}}}],["ffffff",{"_index":2836,"title":{},"body":{"interfaces/Window.html":{}}}],["fh",{"_index":1352,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["fh2",{"_index":1353,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field",{"_index":816,"title":{"classes/Field.html":{}},"body":{"classes/Cut.html":{},"classes/Field.html":{},"coverage.html":{}}}],["field.get(pos1",{"_index":1324,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field.get(pos2",{"_index":1334,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field.get(state.pos",{"_index":1310,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["file.readobject(objectname).then((obj",{"_index":2811,"title":{},"body":{"interfaces/Window.html":{}}}],["filename",{"_index":2750,"title":{},"body":{"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["filereader",{"_index":3311,"title":{},"body":{"miscellaneous/variables.html":{}}}],["files",{"_index":3042,"title":{},"body":{"changelog.html":{}}}],["filter",{"_index":822,"title":{},"body":{"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["filter((val",{"_index":2355,"title":{},"body":{"classes/SelectionManager.html":{}}}],["filtered",{"_index":823,"title":{},"body":{"classes/Cut.html":{}}}],["filters",{"_index":812,"title":{},"body":{"classes/Cut.html":{},"classes/LHCbLoader.html":{}}}],["finally",{"_index":2508,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["find",{"_index":1605,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/URLOptionsManager.html":{}}}],["finding",{"_index":2286,"title":{},"body":{"classes/SelectionManager.html":{}}}],["findintree",{"_index":1570,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintree(name",{"_index":1603,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintreeorcreate",{"_index":1571,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintreeorcreate(name",{"_index":1608,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["first",{"_index":119,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["first.type",{"_index":1906,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["fix",{"_index":2905,"title":{},"body":{"changelog.html":{}}}],["fixed",{"_index":2085,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["fixedoverlay",{"_index":2063,"title":{},"body":{"classes/RendererManager.html":{}}}],["fixes",{"_index":2868,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["fixing",{"_index":3111,"title":{},"body":{"changelog.html":{}}}],["fixoverlayview(fixed",{"_index":2869,"title":{},"body":{"interfaces/Window.html":{}}}],["flat",{"_index":2759,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["float32array([].concat(...reachedhits",{"_index":331,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["float32array(allfacepositions",{"_index":467,"title":{},"body":{"classes/CMSObjects.html":{}}}],["float32array(hitlength",{"_index":1912,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["floor",{"_index":2609,"title":{},"body":{"classes/VRManager.html":{}}}],["fo",{"_index":2417,"title":{},"body":{"classes/StateManager.html":{}}}],["folder",{"_index":566,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["folders",{"_index":2754,"title":{},"body":{"interfaces/Window.html":{}}}],["form",{"_index":2979,"title":{},"body":{"changelog.html":{}}}],["format",{"_index":1221,"title":{},"body":{"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["formatted",{"_index":3173,"title":{},"body":{"changelog.html":{}}}],["found",{"_index":1607,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["front",{"_index":445,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_1",{"_index":451,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_2",{"_index":447,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_3",{"_index":448,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_4",{"_index":450,"title":{},"body":{"classes/CMSObjects.html":{}}}],["function",{"_index":45,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/ColorManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["function,onanimationstart",{"_index":143,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["functionality",{"_index":1182,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["functions",{"_index":99,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["generalize",{"_index":2932,"title":{},"body":{"changelog.html":{}}}],["generate",{"_index":1254,"title":{},"body":{"classes/ExportManager.html":{},"index.html":{}}}],["generation",{"_index":106,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["generic",{"_index":3081,"title":{},"body":{"changelog.html":{}}}],["geom",{"_index":2833,"title":{},"body":{"interfaces/Window.html":{}}}],["geometrical",{"_index":2957,"title":{},"body":{"changelog.html":{}}}],["geometries",{"_index":865,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["geometries.children.foreach((object",{"_index":1274,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometries/event",{"_index":2863,"title":{},"body":{"interfaces/Window.html":{}}}],["geometriesconfig",{"_index":1265,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometriesconfig.push(object.name",{"_index":1276,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometry",{"_index":254,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["geometry.computeboundingsphere",{"_index":332,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["geometry.setattribute",{"_index":330,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["geometry/event",{"_index":2859,"title":{},"body":{"interfaces/Window.html":{}}}],["geometryposcount",{"_index":258,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["geomfolder",{"_index":842,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["get(field",{"_index":1280,"title":{},"body":{"classes/Field.html":{}}}],["getactiveobjectid",{"_index":2253,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["getcamera(new",{"_index":2634,"title":{},"body":{"classes/VRManager.html":{}}}],["getcameragroup",{"_index":2559,"title":{},"body":{"classes/VRManager.html":{}}}],["getcameragroup(camera",{"_index":2582,"title":{},"body":{"classes/VRManager.html":{}}}],["getcameratween",{"_index":84,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["getcameratween(pos",{"_index":162,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["getcluster",{"_index":1807,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcluster(clusterparams",{"_index":1815,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcollection",{"_index":1163,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["getcollection(collectionname",{"_index":1189,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["getcollections",{"_index":1164,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["getelementbyid('embedmenu",{"_index":2533,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["getelementbyid('three",{"_index":2317,"title":{},"body":{"classes/SelectionManager.html":{}}}],["getelementbyid(singleid",{"_index":2540,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["geteventdata",{"_index":1419,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["geteventmetadata",{"_index":1165,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["geteventslist",{"_index":1166,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["geteventslist(eventsdata",{"_index":1202,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["gethits",{"_index":1808,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gethits(hitsparams",{"_index":1819,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gethitspositions",{"_index":85,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["gethitspositions(positions",{"_index":170,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["geticonurl",{"_index":1962,"title":{},"body":{"classes/PresetView.html":{}}}],["getinfologger",{"_index":2520,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["getinfologgerlist",{"_index":1390,"title":{},"body":{"classes/InfoLogger.html":{}}}],["getinstance",{"_index":2400,"title":{},"body":{"classes/StateManager.html":{}}}],["getjet",{"_index":1809,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getjet(jetparams",{"_index":1827,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getlabelsobject",{"_index":1167,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["getloadingmanager",{"_index":2747,"title":{},"body":{"interfaces/Window.html":{}}}],["getlocalclipping",{"_index":2069,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmainrenderer",{"_index":2070,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmissingenergy",{"_index":1810,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getmissingenergy(metparams",{"_index":1830,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getmomentum",{"_index":555,"title":{},"body":{"classes/ColorOptions.html":{}}}],["getmomentum(objectparams",{"_index":617,"title":{},"body":{"classes/ColorOptions.html":{}}}],["getmuon",{"_index":1421,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["getmuon(muonparams",{"_index":1473,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["getmuonchamber",{"_index":423,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getmuonchamber(muonchamberparams",{"_index":424,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getnodestate",{"_index":1572,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["getobject",{"_index":1444,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["getobjectbyname(collectionname",{"_index":533,"title":{},"body":{"classes/ColorManager.html":{}}}],["getobjectbyname(scenemanager.event_data_id",{"_index":532,"title":{},"body":{"classes/ColorManager.html":{}}}],["getobjecttypecollections",{"_index":1422,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["getobjecttypecollections(object",{"_index":1477,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["getoverlayrenderer",{"_index":2071,"title":{},"body":{"classes/RendererManager.html":{}}}],["getprettyparams",{"_index":1976,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettyparams(params",{"_index":1984,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettysymbol",{"_index":1977,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettysymbol(param",{"_index":1988,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getrenderers",{"_index":2072,"title":{},"body":{"classes/RendererManager.html":{}}}],["getscene",{"_index":531,"title":{},"body":{"classes/ColorManager.html":{}}}],["getscenemanager",{"_index":942,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["getstatemanager",{"_index":2748,"title":{},"body":{"interfaces/Window.html":{}}}],["getthreemanager",{"_index":2746,"title":{},"body":{"interfaces/Window.html":{}}}],["getting",{"_index":2888,"title":{"changelog.html":{},"index.html":{}},"body":{"changelog.html":{}}}],["gettrack",{"_index":1811,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gettrack(trackparams",{"_index":1834,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gettrackswithrungekutta",{"_index":2024,"title":{},"body":{"classes/RKHelper.html":{}}}],["gettrackswithrungekutta(trackscollectionsevent",{"_index":2030,"title":{},"body":{"classes/RKHelper.html":{}}}],["getuimanager",{"_index":2448,"title":{},"body":{"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["getvertex",{"_index":1812,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getvertex(vertexparams",{"_index":1837,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getvrcamera",{"_index":2560,"title":{},"body":{"classes/VRManager.html":{}}}],["given",{"_index":429,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["giving",{"_index":2284,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["global",{"_index":2193,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["globalmomentum",{"_index":2048,"title":{},"body":{"classes/RKHelper.html":{}}}],["globalmomentum.clone",{"_index":2056,"title":{},"body":{"classes/RKHelper.html":{}}}],["globalthis",{"_index":3070,"title":{},"body":{"changelog.html":{}}}],["gltf",{"_index":1255,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["gltfexporter",{"_index":1240,"title":{},"body":{"classes/ExportManager.html":{}}}],["go",{"_index":1998,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["graphic",{"_index":1180,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["graphics",{"_index":1466,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["graphicslibrary",{"_index":1172,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["greater",{"_index":2818,"title":{},"body":{"interfaces/Window.html":{}}}],["grid",{"_index":2997,"title":{},"body":{"changelog.html":{}}}],["group",{"_index":190,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["groupvisibility",{"_index":1779,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["groupvisibility(collectionname",{"_index":1016,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["groupvisibility(scenemanager.event_data_id",{"_index":1763,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["groupvisibility(scenemanager.geometries_id",{"_index":1742,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["gui",{"_index":837,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/URLOptionsManager.html":{},"coverage.html":{}}}],["gui,typefolderpm",{"_index":1460,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["gui.remove",{"_index":930,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["guidelines",{"_index":2896,"title":{},"body":{"changelog.html":{}}}],["guiparameters",{"_index":843,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["h",{"_index":1315,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["h).cross(b_last",{"_index":1335,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["h2",{"_index":1301,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["half_h",{"_index":1302,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["half_h).cross(b_middle",{"_index":1325,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["hand",{"_index":2611,"title":{},"body":{"classes/VRManager.html":{}}}],["handle",{"_index":2950,"title":{},"body":{"changelog.html":{}}}],["handles",{"_index":1451,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["handling",{"_index":2999,"title":{},"body":{"changelog.html":{}}}],["hash",{"_index":3170,"title":{},"body":{"changelog.html":{}}}],["hasposition",{"_index":295,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["helper",{"_index":742,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["helper.ts",{"_index":741,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"coverage.html":{}}}],["helper.ts:13",{"_index":772,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{}}}],["helper.ts:23",{"_index":783,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:33",{"_index":2026,"title":{},"body":{"classes/RKHelper.html":{}}}],["helper.ts:34",{"_index":781,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:53",{"_index":761,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:69",{"_index":750,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helpers/active",{"_index":2301,"title":{},"body":{"classes/SelectionManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["helpers/constants",{"_index":436,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["helpers/coordinate",{"_index":1855,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["helpers/file",{"_index":1243,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{}}}],["helpers/info",{"_index":1210,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["helpers/pretty",{"_index":632,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{},"classes/SelectionManager.html":{}}}],["helpers/rk",{"_index":1854,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["here",{"_index":777,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["hex",{"_index":504,"title":{},"body":{"classes/ColorManager.html":{}}}],["hide",{"_index":406,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["hideidswithurloption",{"_index":2460,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["hideidswithurloption(urloptionwithids",{"_index":2476,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["hidewidgets",{"_index":2467,"title":{},"body":{"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["hidewidgetsoptions",{"_index":2524,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["hiding",{"_index":3102,"title":{},"body":{"changelog.html":{}}}],["hierarchy",{"_index":2752,"title":{},"body":{"interfaces/Window.html":{}}}],["high",{"_index":2130,"title":{},"body":{"classes/RendererManager.html":{}}}],["highlight",{"_index":2283,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highlighting",{"_index":1115,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["highlightobject",{"_index":2254,"title":{},"body":{"classes/SelectionManager.html":{}}}],["highlightobject(uuid",{"_index":2281,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highly",{"_index":2930,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["highvalue",{"_index":1666,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{}}}],["hit",{"_index":300,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["hitlength",{"_index":1910,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitlines",{"_index":2993,"title":{},"body":{"changelog.html":{}}}],["hitparamsclone",{"_index":1841,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hits",{"_index":173,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["hitsparams",{"_index":1821,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparams.length",{"_index":1901,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparams.pos",{"_index":1900,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparams[0",{"_index":1904,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparamsclone",{"_index":1895,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitspositions",{"_index":323,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["hitspositions.filter((hitposition",{"_index":326,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["hitstolines",{"_index":1813,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitstolines(pointpos",{"_index":1840,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitstopoints",{"_index":1814,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitstopoints(pointpos",{"_index":1847,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["home",{"_index":3138,"title":{},"body":{"changelog.html":{}}}],["hovered",{"_index":1116,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["hovering",{"_index":2262,"title":{},"body":{"classes/SelectionManager.html":{}}}],["html",{"_index":2856,"title":{},"body":{"interfaces/Window.html":{},"index.html":{}}}],["htmlcanvaselement",{"_index":2117,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["htmlelement",{"_index":2198,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["https://cdn.jsdelivr.net/npm/jsroot@${jsrootversion}/scripts",{"_index":2209,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["https://en.wikipedia.org/wiki/pseudorapidity",{"_index":778,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["icon",{"_index":1563,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"changelog.html":{}}}],["id",{"_index":720,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["identifier",{"_index":3197,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1450,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/ScriptLoader.html":{}}}],["ids",{"_index":2478,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["idstohide",{"_index":2537,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["idstohide.foreach((singleid",{"_index":2539,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["ig",{"_index":3045,"title":{},"body":{"changelog.html":{}}}],["ignored",{"_index":2261,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ignorelist",{"_index":2244,"title":{},"body":{"classes/SelectionManager.html":{}}}],["immersive",{"_index":2579,"title":{},"body":{"classes/VRManager.html":{}}}],["implement",{"_index":2934,"title":{},"body":{"changelog.html":{}}}],["implementing",{"_index":1159,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["implicitly",{"_index":3187,"title":{},"body":{"changelog.html":{}}}],["import",{"_index":178,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["importmanager",{"_index":3232,"title":{},"body":{"coverage.html":{}}}],["improve",{"_index":2943,"title":{},"body":{"changelog.html":{}}}],["improvement",{"_index":2924,"title":{},"body":{"changelog.html":{}}}],["improvements",{"_index":2908,"title":{},"body":{"changelog.html":{}}}],["improving",{"_index":3053,"title":{},"body":{"changelog.html":{}}}],["inbounds",{"_index":1374,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["include",{"_index":568,"title":{},"body":{"classes/ColorOptions.html":{},"index.html":{}}}],["included",{"_index":648,"title":{},"body":{"classes/ColorOptions.html":{},"index.html":{}}}],["including",{"_index":1236,"title":{},"body":{"classes/ExportManager.html":{}}}],["independent",{"_index":3254,"title":{},"body":{"index.html":{}}}],["index",{"_index":16,"title":{"index.html":{}},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexincollection",{"_index":1169,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["individually",{"_index":1455,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["infinity",{"_index":262,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["infologger",{"_index":1174,"title":{"classes/InfoLogger.html":{}},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["infologgerlist",{"_index":1388,"title":{},"body":{"classes/InfoLogger.html":{}}}],["information",{"_index":1396,"title":{},"body":{"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["inherited",{"_index":1426,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["init",{"_index":2073,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["init(camera",{"_index":2287,"title":{},"body":{"classes/SelectionManager.html":{}}}],["init(configuration",{"_index":2701,"title":{},"body":{"interfaces/Window.html":{}}}],["init(elementid",{"_index":2101,"title":{},"body":{"classes/RendererManager.html":{}}}],["initchargecoloroptions",{"_index":556,"title":{},"body":{"classes/ColorOptions.html":{}}}],["initcolorbyoptions",{"_index":557,"title":{},"body":{"classes/ColorOptions.html":{}}}],["initial",{"_index":37,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["initialize",{"_index":574,"title":{},"body":{"classes/ColorOptions.html":{},"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["initialized",{"_index":2265,"title":{},"body":{"classes/SelectionManager.html":{}}}],["initializes",{"_index":2858,"title":{},"body":{"interfaces/Window.html":{}}}],["initializing",{"_index":2083,"title":{},"body":{"classes/RendererManager.html":{}}}],["initially",{"_index":895,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["initiallyvisible",{"_index":891,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["initmomcoloroptions",{"_index":558,"title":{},"body":{"classes/ColorOptions.html":{}}}],["initrenderer",{"_index":2074,"title":{},"body":{"classes/RendererManager.html":{}}}],["initrenderer(elementid",{"_index":2103,"title":{},"body":{"classes/RendererManager.html":{}}}],["initvr(onsessionended",{"_index":2716,"title":{},"body":{"interfaces/Window.html":{}}}],["input",{"_index":1253,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["inputfile",{"_index":3302,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.accept",{"_index":3305,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.click",{"_index":3316,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.onchange",{"_index":3306,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.remove",{"_index":3314,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.type",{"_index":3304,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inside",{"_index":501,"title":{},"body":{"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["install",{"_index":3257,"title":{},"body":{"index.html":{}}}],["instance",{"_index":591,"title":{},"body":{"classes/ColorOptions.html":{},"classes/LoadingManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["instanceof",{"_index":263,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ColorManager.html":{}}}],["instantiate",{"_index":1244,"title":{},"body":{"classes/ExportManager.html":{}}}],["instead",{"_index":1644,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["integrator",{"_index":1300,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["interface",{"_index":700,"title":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["interfaces",{"_index":702,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["intersected",{"_index":2292,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject",{"_index":2332,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.name",{"_index":2337,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.userdata",{"_index":2343,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.userdata[key",{"_index":2354,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject",{"_index":2255,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject(event",{"_index":2289,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects",{"_index":2291,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects.length",{"_index":2376,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects[0].object",{"_index":2379,"title":{},"body":{"classes/SelectionManager.html":{}}}],["interval",{"_index":2663,"title":{},"body":{"classes/VRManager.html":{}}}],["intervalid",{"_index":2664,"title":{},"body":{"classes/VRManager.html":{}}}],["intitialize",{"_index":2691,"title":{},"body":{"interfaces/Window.html":{}}}],["introduce",{"_index":3001,"title":{},"body":{"changelog.html":{}}}],["invisible",{"_index":306,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["ischecked",{"_index":1745,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["isfixedoverlay",{"_index":2075,"title":{},"body":{"classes/RendererManager.html":{}}}],["isinit",{"_index":2245,"title":{},"body":{"classes/SelectionManager.html":{}}}],["issimplearray",{"_index":1898,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["issue",{"_index":1866,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["isvractive",{"_index":2561,"title":{},"body":{"classes/VRManager.html":{}}}],["it's",{"_index":2004,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["item",{"_index":1513,"title":{},"body":{"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{}}}],["itemloaded",{"_index":1505,"title":{},"body":{"classes/LoadingManager.html":{}}}],["itemloaded(id",{"_index":1524,"title":{},"body":{"classes/LoadingManager.html":{}}}],["items",{"_index":350,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LoadingManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["itself",{"_index":1619,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["j",{"_index":1495,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{}}}],["jasmine",{"_index":3108,"title":{},"body":{"changelog.html":{}}}],["jet",{"_index":275,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["jetparams",{"_index":1829,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams.color",{"_index":1881,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams.uuid",{"_index":1893,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jets",{"_index":538,"title":{},"body":{"classes/ColorManager.html":{},"classes/LHCbLoader.html":{},"miscellaneous/variables.html":{}}}],["jivexml",{"_index":2471,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["jivexmlloader",{"_index":2480,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{}}}],["jixexml",{"_index":2968,"title":{},"body":{"changelog.html":{}}}],["js",{"_index":3246,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":1442,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["json.parse(input",{"_index":2777,"title":{},"body":{"interfaces/Window.html":{}}}],["json.parse(json",{"_index":1679,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["json.stringify(jsonresult",{"_index":1260,"title":{},"body":{"classes/ExportManager.html":{}}}],["json.stringify(state",{"_index":2435,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata",{"_index":2437,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay",{"_index":2441,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']?.['cameraposition",{"_index":2443,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']?.['clippingangle",{"_index":2444,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['phoenixmenu",{"_index":2438,"title":{},"body":{"classes/StateManager.html":{}}}],["jsonobject",{"_index":1677,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['children",{"_index":1696,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['childrenactive",{"_index":1680,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['configs",{"_index":1684,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['togglestate",{"_index":1681,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonresult",{"_index":1258,"title":{},"body":{"classes/ExportManager.html":{}}}],["jsroot",{"_index":2186,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jsroot.core.js",{"_index":2211,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsroot.csg.js",{"_index":2213,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsroot.geo.build(obj",{"_index":2802,"title":{},"body":{"interfaces/Window.html":{}}}],["jsroot.geom.js",{"_index":2215,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsroot.newhttprequest(url",{"_index":2800,"title":{},"body":{"interfaces/Window.html":{}}}],["jsroot.openfile(url).then((file",{"_index":2810,"title":{},"body":{"interfaces/Window.html":{}}}],["jsroot.painter.js",{"_index":2214,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsroot_cdn_url",{"_index":2208,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsrooteventloader",{"_index":3216,"title":{},"body":{"coverage.html":{}}}],["jsrootversion",{"_index":2187,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jszip",{"_index":3244,"title":{},"body":{"dependencies.html":{}}}],["k1",{"_index":1312,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k1.clone().sub(k2).sub(k3).add(k4",{"_index":1339,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k2",{"_index":1305,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k3",{"_index":1306,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k4",{"_index":1307,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k4).lpnorm",{"_index":1340,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["keep",{"_index":3004,"title":{},"body":{"changelog.html":{}}}],["key",{"_index":570,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/LoadingManager.html":{},"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["keyboard",{"_index":2714,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["keys",{"_index":635,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"miscellaneous/enumerations.html":{}}}],["kutta",{"_index":1285,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["kutta.ts",{"_index":1278,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["kutta.ts:12",{"_index":2173,"title":{},"body":{"classes/RungeKutta.html":{}}}],["kutta.ts:126",{"_index":2172,"title":{},"body":{"classes/RungeKutta.html":{}}}],["kutta.ts:168",{"_index":2389,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:170",{"_index":2385,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:172",{"_index":2387,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:174",{"_index":2390,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:176",{"_index":2393,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:178",{"_index":2391,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:180",{"_index":2386,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:182",{"_index":2388,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:192",{"_index":1281,"title":{},"body":{"classes/Field.html":{}}}],["label",{"_index":643,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["labelid",{"_index":899,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["labelitem",{"_index":1061,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["labelitem.add(this.guiparameters[labelid",{"_index":1074,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["labelitemfolder",{"_index":908,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["labelnode",{"_index":1737,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["labelnode.addconfig('button",{"_index":1799,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["labelnode.addconfig('color",{"_index":1798,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["labelnode?.remove",{"_index":1804,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["labels",{"_index":868,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["labelsfolder",{"_index":844,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["labelsobject",{"_index":1416,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["labelssizemenu",{"_index":1052,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["labelssizemenu.onfinishchange(onsizechange",{"_index":1054,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["last",{"_index":139,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["later",{"_index":1223,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["latest",{"_index":2188,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{}}}],["left",{"_index":463,"title":{},"body":{"classes/CMSObjects.html":{},"classes/URLOptionsManager.html":{}}}],["length",{"_index":1373,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["level",{"_index":1590,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["lhcb",{"_index":1413,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["lhcbloader",{"_index":1410,"title":{"classes/LHCbLoader.html":{}},"body":{"classes/LHCbLoader.html":{},"coverage.html":{}}}],["library",{"_index":1181,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"changelog.html":{}}}],["limits",{"_index":2958,"title":{},"body":{"changelog.html":{}}}],["line",{"_index":518,"title":{},"body":{"classes/ColorManager.html":{},"classes/PhoenixObjects.html":{},"classes/VRManager.html":{}}}],["line(geometry",{"_index":1948,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/VRManager.html":{}}}],["line.name",{"_index":2659,"title":{},"body":{"classes/VRManager.html":{}}}],["line.scale.z",{"_index":2660,"title":{},"body":{"classes/VRManager.html":{}}}],["linebasicmaterial",{"_index":432,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/PhoenixObjects.html":{}}}],["lineboxobject",{"_index":483,"title":{},"body":{"classes/CMSObjects.html":{}}}],["linedashedmaterial",{"_index":1852,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["linehits",{"_index":3012,"title":{},"body":{"changelog.html":{}}}],["lines",{"_index":478,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["linesegments",{"_index":434,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["linewidth",{"_index":1944,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["link",{"_index":437,"title":{},"body":{"classes/CMSObjects.html":{},"changelog.html":{}}}],["list",{"_index":1195,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["listen",{"_index":939,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["listener",{"_index":1519,"title":{},"body":{"classes/LoadingManager.html":{},"classes/VRManager.html":{}}}],["listentodisplayedeventchange(callback",{"_index":2839,"title":{},"body":{"interfaces/Window.html":{}}}],["listentoloadedeventschange(callback",{"_index":2841,"title":{},"body":{"interfaces/Window.html":{}}}],["literal",{"_index":715,"title":{},"body":{"interfaces/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":716,"title":{},"body":{"interfaces/Configuration.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/ScriptLoader.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["loadable",{"_index":1432,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"interfaces/Window.html":{}}}],["loadconfig",{"_index":2500,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loaded",{"_index":1227,"title":{},"body":{"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["loader",{"_index":725,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["loader.geteventdata",{"_index":2516,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loader.process(res",{"_index":2515,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loader.ts",{"_index":1158,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/ScriptLoader.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loader.ts:15",{"_index":2184,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loader.ts:17",{"_index":1175,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:22",{"_index":1441,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loader.ts:29",{"_index":1203,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:31",{"_index":1437,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loader.ts:35",{"_index":1193,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:42",{"_index":1190,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:46",{"_index":2199,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loader.ts:48",{"_index":1198,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:57",{"_index":1170,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:62",{"_index":1438,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loader.ts:67",{"_index":1208,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:8",{"_index":1424,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loaders",{"_index":1160,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loaders/event",{"_index":734,"title":{},"body":{"interfaces/Configuration.html":{}}}],["loaders/jivexml",{"_index":2481,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loaders/phoenix",{"_index":2482,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loadevent(eventkey",{"_index":2743,"title":{},"body":{"interfaces/Window.html":{}}}],["loadeventfolderstate",{"_index":1718,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["loadfile",{"_index":2423,"title":{},"body":{"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loadfile((data",{"_index":2428,"title":{},"body":{"classes/StateManager.html":{}}}],["loadgltfgeometry",{"_index":2791,"title":{},"body":{"interfaces/Window.html":{}}}],["loading",{"_index":727,"title":{},"body":{"interfaces/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["loadingmanager",{"_index":1417,"title":{"classes/LoadingManager.html":{}},"body":{"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["loadingmanager.addloadableitem('jsroot_scripts",{"_index":2207,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadingmanager.addloadableitem('single_script",{"_index":2219,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadingmanager.instance",{"_index":1530,"title":{},"body":{"classes/LoadingManager.html":{}}}],["loadingmanager.itemloaded('jsroot_scripts",{"_index":2218,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadingmanager.itemloaded('single_script",{"_index":2234,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadjsongeometry",{"_index":2795,"title":{},"body":{"interfaces/Window.html":{}}}],["loadjsrootscripts",{"_index":2181,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadjsrootscripts(jsrootversion",{"_index":2183,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadlabels",{"_index":1049,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["loadobjecttypes",{"_index":1423,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loadobjecttypes(eventdata",{"_index":1479,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loadobjgeometry",{"_index":2761,"title":{},"body":{"interfaces/Window.html":{}}}],["loadrootgeometry",{"_index":2808,"title":{},"body":{"interfaces/Window.html":{}}}],["loadrootjsongeometry",{"_index":2798,"title":{},"body":{"interfaces/Window.html":{}}}],["loads",{"_index":2723,"title":{},"body":{"interfaces/Window.html":{}}}],["loadsceneconfiguration(sceneconfiguration",{"_index":2827,"title":{},"body":{"interfaces/Window.html":{}}}],["loadscript",{"_index":2182,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadscript(scripturl",{"_index":2195,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadstatefromjson",{"_index":1573,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["loadstatefromjson(json",{"_index":1612,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["local",{"_index":371,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["locationhref",{"_index":2486,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["locationhref.substr(locationhref.lastindexof",{"_index":2489,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["log",{"_index":1401,"title":{},"body":{"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["logger",{"_index":1187,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["logger.ts",{"_index":1387,"title":{},"body":{"classes/InfoLogger.html":{},"coverage.html":{}}}],["logger.ts:15",{"_index":1399,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:26",{"_index":1402,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:6",{"_index":1391,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:8",{"_index":1393,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logging",{"_index":1188,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/SelectionManager.html":{}}}],["logo",{"_index":2526,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["logs",{"_index":1392,"title":{},"body":{"classes/InfoLogger.html":{},"interfaces/Window.html":{}}}],["long",{"_index":2005,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["look",{"_index":2872,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["lookatobject(uuid",{"_index":2873,"title":{},"body":{"interfaces/Window.html":{}}}],["loop",{"_index":2134,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["lowres",{"_index":867,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["made",{"_index":881,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{}}}],["main",{"_index":1100,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/URLOptionsManager.html":{}}}],["mainlogo",{"_index":2525,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["mainrenderer",{"_index":2064,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.domelement.id",{"_index":2153,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.setpixelratio(window.devicepixelratio",{"_index":2152,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.setsize(rendererwidth",{"_index":2151,"title":{},"body":{"classes/RendererManager.html":{}}}],["major",{"_index":3183,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":307,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["making",{"_index":305,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager",{"_index":69,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["manager.ts",{"_index":68,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["manager.ts:10",{"_index":2087,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:100",{"_index":2575,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:102",{"_index":2295,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:104",{"_index":1523,"title":{},"body":{"classes/LoadingManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:11",{"_index":1510,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:111",{"_index":1529,"title":{},"body":{"classes/LoadingManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:118",{"_index":2121,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:12",{"_index":1106,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:122",{"_index":2581,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:123",{"_index":2419,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:126",{"_index":2097,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:128",{"_index":2277,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:130",{"_index":2474,"title":{},"body":{"classes/URLOptionsManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:131",{"_index":2416,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:134",{"_index":2098,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:139",{"_index":2414,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:14",{"_index":1104,"title":{},"body":{"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:140",{"_index":2583,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:141",{"_index":118,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:142",{"_index":2099,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:145",{"_index":2271,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:147",{"_index":2421,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:148",{"_index":2464,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:152",{"_index":2091,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:158",{"_index":2266,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:16",{"_index":1113,"title":{},"body":{"classes/EffectsManager.html":{},"classes/LoadingManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:162",{"_index":2107,"title":{},"body":{"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:169",{"_index":2588,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:17",{"_index":496,"title":{},"body":{"classes/ColorManager.html":{}}}],["manager.ts:173",{"_index":2477,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:174",{"_index":2124,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:18",{"_index":1109,"title":{},"body":{"classes/EffectsManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:186",{"_index":2093,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:19",{"_index":1507,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:199",{"_index":2113,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:20",{"_index":1101,"title":{},"body":{"classes/EffectsManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:207",{"_index":2269,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:209",{"_index":2096,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:21",{"_index":2580,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:218",{"_index":2290,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:219",{"_index":2105,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:22",{"_index":2264,"title":{},"body":{"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:227",{"_index":2111,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:23",{"_index":1096,"title":{},"body":{"classes/EffectsManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:24",{"_index":91,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:241",{"_index":2282,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:25",{"_index":2578,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:26",{"_index":2275,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:27",{"_index":1219,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:28",{"_index":2276,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:29",{"_index":2574,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:30",{"_index":510,"title":{},"body":{"classes/ColorManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:31",{"_index":2565,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:314",{"_index":123,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:32",{"_index":2260,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:33",{"_index":2102,"title":{},"body":{"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:36",{"_index":1516,"title":{},"body":{"classes/LoadingManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:38",{"_index":2259,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:390",{"_index":152,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:40",{"_index":2568,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:41",{"_index":2263,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:42",{"_index":2570,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:43",{"_index":2258,"title":{},"body":{"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{}}}],["manager.ts:44",{"_index":2411,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:45",{"_index":1525,"title":{},"body":{"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:450",{"_index":144,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:47",{"_index":164,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:48",{"_index":499,"title":{},"body":{"classes/ColorManager.html":{},"classes/EffectsManager.html":{}}}],["manager.ts:489",{"_index":129,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:499",{"_index":103,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:516",{"_index":171,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:52",{"_index":1235,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:55",{"_index":2592,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:59",{"_index":2470,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:6",{"_index":1509,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:61",{"_index":1120,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:63",{"_index":1527,"title":{},"body":{"classes/LoadingManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:65",{"_index":2288,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:66",{"_index":1230,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:69",{"_index":1114,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:70",{"_index":132,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:78",{"_index":2412,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:8",{"_index":2086,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:83",{"_index":1518,"title":{},"body":{"classes/LoadingManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:85",{"_index":1233,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:88",{"_index":1123,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:9",{"_index":1514,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:90",{"_index":2576,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:92",{"_index":1521,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:94",{"_index":2280,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:96",{"_index":2115,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:97",{"_index":1125,"title":{},"body":{"classes/EffectsManager.html":{},"classes/StateManager.html":{}}}],["manager/animations",{"_index":67,"title":{},"body":{"classes/AnimationsManager.html":{},"coverage.html":{}}}],["manager/color",{"_index":491,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["manager/controls",{"_index":3227,"title":{},"body":{"coverage.html":{}}}],["manager/dat",{"_index":836,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"coverage.html":{}}}],["manager/effects",{"_index":1079,"title":{},"body":{"classes/EffectsManager.html":{},"coverage.html":{}}}],["manager/export",{"_index":1212,"title":{},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["manager/import",{"_index":3231,"title":{},"body":{"coverage.html":{}}}],["manager/index.ts",{"_index":3234,"title":{},"body":{"coverage.html":{}}}],["manager/phoenix",{"_index":736,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["manager/renderer",{"_index":2062,"title":{},"body":{"classes/RendererManager.html":{},"coverage.html":{}}}],["manager/scene",{"_index":913,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"coverage.html":{}}}],["manager/selection",{"_index":2242,"title":{},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["manager/vr",{"_index":2542,"title":{},"body":{"classes/VRManager.html":{},"coverage.html":{}}}],["managers/loading",{"_index":2204,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["managers/state",{"_index":2684,"title":{},"body":{"interfaces/Window.html":{}}}],["managers/three",{"_index":1209,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["managers/ui",{"_index":735,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["managers/url",{"_index":2685,"title":{},"body":{"interfaces/Window.html":{}}}],["manages",{"_index":1097,"title":{},"body":{"classes/EffectsManager.html":{},"interfaces/Window.html":{}}}],["managing",{"_index":70,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ColorManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["manipulate",{"_index":1186,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["manual",{"_index":1657,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["manually",{"_index":281,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["map((key",{"_index":2351,"title":{},"body":{"classes/SelectionManager.html":{}}}],["matching",{"_index":63,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":1880,"title":{},"body":{"classes/PhoenixObjects.html":{},"interfaces/Window.html":{}}}],["material.opacity",{"_index":1884,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.abs(1",{"_index":697,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["math.abs(position.z",{"_index":1918,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.abs(returnvec.x",{"_index":1341,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.abs(returnvec.y",{"_index":1342,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.abs(returnvec.z",{"_index":1343,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.atan(math.pow(math.e",{"_index":784,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["math.cos(phi",{"_index":1872,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.cos(theta",{"_index":1876,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.log(math.tan(theta",{"_index":785,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["math.pi",{"_index":222,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CoordinateHelper.html":{}}}],["math.pow(fh",{"_index":1354,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.round(p",{"_index":2047,"title":{},"body":{"classes/RKHelper.html":{}}}],["math.sign(1",{"_index":677,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PrettySymbols.html":{}}}],["math.sin(phi",{"_index":1870,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.sin(theta",{"_index":1874,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.sqrt(cylradius2",{"_index":1917,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.sqrt(maxr2",{"_index":1916,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.sqrt(pos.x",{"_index":1860,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["max",{"_index":598,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["maxcut",{"_index":1037,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["maxcut.onchange((value",{"_index":1039,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["maxentries",{"_index":1389,"title":{},"body":{"classes/InfoLogger.html":{}}}],["maximum",{"_index":613,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Cut.html":{}}}],["maxpositionx",{"_index":845,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["maxpositiony",{"_index":846,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["maxpositionz",{"_index":847,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["maxr2",{"_index":1913,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["maxstepsize",{"_index":2381,"title":{},"body":{"classes/State.html":{}}}],["maxvalue",{"_index":817,"title":{},"body":{"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{}}}],["maxz",{"_index":1919,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["menu",{"_index":594,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["menu's",{"_index":889,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["menu.onchange((value",{"_index":1003,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["menu/phoenix",{"_index":634,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["menunodename",{"_index":1729,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["menus",{"_index":1185,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"changelog.html":{}}}],["mesh",{"_index":184,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/PhoenixObjects.html":{}}}],["mesh(geometry",{"_index":1885,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh(particlegeometry",{"_index":385,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["mesh.name",{"_index":1889,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.position.copy(translation",{"_index":1886,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.quaternion.copy(quaternion",{"_index":1887,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.userdata",{"_index":1888,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.uuid",{"_index":1894,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["meshbasicmaterial",{"_index":183,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/PhoenixObjects.html":{}}}],["meshphongmaterial",{"_index":521,"title":{},"body":{"classes/ColorManager.html":{},"classes/PhoenixObjects.html":{}}}],["meshtoonmaterial",{"_index":522,"title":{},"body":{"classes/ColorManager.html":{},"classes/PhoenixObjects.html":{}}}],["met",{"_index":1833,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["metadata",{"_index":1199,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["method",{"_index":2955,"title":{},"body":{"changelog.html":{}}}],["methods",{"_index":22,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["metparams",{"_index":1832,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["metparams.color",{"_index":1946,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["metparams.ety",{"_index":1942,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["metparams.uuid",{"_index":1953,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mev",{"_index":2040,"title":{},"body":{"classes/RKHelper.html":{}}}],["mid",{"_index":616,"title":{},"body":{"classes/ColorOptions.html":{}}}],["min",{"_index":597,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{}}}],["min/max",{"_index":601,"title":{},"body":{"classes/ColorOptions.html":{}}}],["mincut",{"_index":1029,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["mincut.onchange((value",{"_index":1035,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["minimum",{"_index":612,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Cut.html":{}}}],["minor",{"_index":3105,"title":{},"body":{"changelog.html":{}}}],["minormax",{"_index":611,"title":{},"body":{"classes/ColorOptions.html":{}}}],["minvalue",{"_index":818,"title":{},"body":{"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{}}}],["miscellaneous",{"_index":3248,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":1951,"title":{},"body":{"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["missingenergy",{"_index":3296,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mm",{"_index":2039,"title":{},"body":{"classes/RKHelper.html":{}}}],["mock",{"_index":3300,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mocking",{"_index":3318,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":2272,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["model",{"_index":2484,"title":{},"body":{"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["modular",{"_index":3251,"title":{},"body":{"index.html":{}}}],["module",{"_index":3261,"title":{},"body":{"index.html":{}}}],["modules",{"_index":3280,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["mom",{"_index":637,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PrettySymbols.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["momcolors",{"_index":550,"title":{},"body":{"classes/ColorOptions.html":{}}}],["momentum",{"_index":579,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["momvalue",{"_index":681,"title":{},"body":{"classes/ColorOptions.html":{}}}],["momvalue.color",{"_index":690,"title":{},"body":{"classes/ColorOptions.html":{}}}],["more",{"_index":1464,"title":{},"body":{"classes/LHCbLoader.html":{},"changelog.html":{}}}],["mouse",{"_index":2267,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.x",{"_index":2367,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.y",{"_index":2370,"title":{},"body":{"classes/SelectionManager.html":{}}}],["move",{"_index":206,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CoordinateHelper.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["moveindirection",{"_index":2562,"title":{},"body":{"classes/VRManager.html":{}}}],["moveindirection(direction",{"_index":2585,"title":{},"body":{"classes/VRManager.html":{}}}],["movement",{"_index":2567,"title":{},"body":{"classes/VRManager.html":{}}}],["moving",{"_index":288,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{}}}],["mss",{"_index":1370,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multidimensional",{"_index":174,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["multiple",{"_index":1204,"title":{},"body":{"interfaces/EventDataLoader.html":{},"changelog.html":{}}}],["multiplyscalar(fh",{"_index":1363,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multiplyscalar(fh2",{"_index":1358,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multiplyscalar(qop",{"_index":1328,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multiplyscalar(updatedscale.x",{"_index":293,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["muon",{"_index":427,"title":{},"body":{"classes/CMSObjects.html":{},"classes/LHCbLoader.html":{}}}],["muonchamber",{"_index":477,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(boxobject",{"_index":486,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(lineboxobject",{"_index":487,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams",{"_index":430,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams.color",{"_index":470,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams.uuid",{"_index":488,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams[face",{"_index":444,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchambers",{"_index":3295,"title":{},"body":{"miscellaneous/variables.html":{}}}],["muonparams",{"_index":1475,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["name",{"_index":34,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["name('color",{"_index":960,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('depth",{"_index":1006,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('load",{"_index":1058,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('max",{"_index":1038,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('min",{"_index":1033,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('opacity",{"_index":965,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('reset",{"_index":1028,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('save",{"_index":1057,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('scale",{"_index":974,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('show",{"_index":938,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('size",{"_index":1053,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('wireframe",{"_index":947,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('x",{"_index":980,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('y",{"_index":984,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('z",{"_index":987,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('çolor",{"_index":1069,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name.split('>').foreach((nodename",{"_index":1707,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["named",{"_index":1512,"title":{},"body":{"classes/LoadingManager.html":{}}}],["names",{"_index":1469,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["namespace",{"_index":3008,"title":{},"body":{"changelog.html":{}}}],["naming",{"_index":1463,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["native",{"_index":768,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["navigator",{"_index":2605,"title":{},"body":{"classes/VRManager.html":{}}}],["ndof",{"_index":1980,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["necessary",{"_index":765,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["need",{"_index":282,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["needed",{"_index":2006,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["new",{"_index":54,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newcolorbyoption",{"_index":662,"title":{},"body":{"classes/ColorOptions.html":{}}}],["newcolorbyoption?.apply",{"_index":665,"title":{},"body":{"classes/ColorOptions.html":{}}}],["newcolorbyoption?.key",{"_index":664,"title":{},"body":{"classes/ColorOptions.html":{}}}],["newvalue",{"_index":968,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["node",{"_index":595,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["node.ts",{"_index":1557,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["node.ts:102",{"_index":1614,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:115",{"_index":1621,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:125",{"_index":1598,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:138",{"_index":1618,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:158",{"_index":1601,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:18",{"_index":1588,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:181",{"_index":1611,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:20",{"_index":1587,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:202",{"_index":1613,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:22",{"_index":1591,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:24",{"_index":1593,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:248",{"_index":1604,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:26",{"_index":1580,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:266",{"_index":1609,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:28",{"_index":1586,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:30",{"_index":1589,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:32",{"_index":1592,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:37",{"_index":1582,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:40",{"_index":1581,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:42",{"_index":1578,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:76",{"_index":1595,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:93",{"_index":1616,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild",{"_index":1697,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.loadstatefromjson(childstate",{"_index":1703,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.name",{"_index":1699,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.nodelevel",{"_index":1701,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig",{"_index":1685,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig.label",{"_index":1689,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig.type",{"_index":1687,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig[prop",{"_index":1692,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodefound",{"_index":1704,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodejs.timeout",{"_index":2665,"title":{},"body":{"classes/VRManager.html":{}}}],["nodelevel",{"_index":1564,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodename",{"_index":1708,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodename.trim",{"_index":1709,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodes",{"_index":1584,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["none",{"_index":717,"title":{},"body":{"interfaces/Configuration.html":{},"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["normal",{"_index":1111,"title":{},"body":{"classes/EffectsManager.html":{}}}],["normalblending",{"_index":1128,"title":{},"body":{"classes/EffectsManager.html":{}}}],["notable",{"_index":2890,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":2596,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["nothing",{"_index":794,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["now",{"_index":806,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["nowdisplayingevent",{"_index":2689,"title":{},"body":{"interfaces/Window.html":{}}}],["npm",{"_index":3258,"title":{},"body":{"index.html":{}}}],["null",{"_index":377,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":101,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["number'].includes",{"_index":2353,"title":{},"body":{"classes/SelectionManager.html":{}}}],["number,onend",{"_index":142,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["numofsteps",{"_index":218,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj",{"_index":990,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/ExportManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["obj.eventobject",{"_index":321,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj.eventobject.name",{"_index":320,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj.eventobject.visible",{"_index":334,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj.obj",{"_index":1248,"title":{},"body":{"classes/ExportManager.html":{}}}],["object",{"_index":169,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["object's",{"_index":675,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["object(s",{"_index":513,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.assign",{"_index":475,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["object.assign(configoptions",{"_index":1646,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["object.computelinedistances",{"_index":1949,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["object.entries(this.momcolors).foreach(([key",{"_index":680,"title":{},"body":{"classes/ColorOptions.html":{}}}],["object.entries(urloptionwithids).foreach(([urloption",{"_index":2536,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["object.keys(intersectedobject.userdata",{"_index":2350,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(paramscopy",{"_index":2000,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["object.keys(prettyparams",{"_index":2344,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(prettysymbols.symbols).find((symbol",{"_index":1993,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["object.keys(sceneconfiguration.eventdata",{"_index":2828,"title":{},"body":{"interfaces/Window.html":{}}}],["object.keys(this.progressitems).length",{"_index":1547,"title":{},"body":{"classes/LoadingManager.html":{}}}],["object.keys(trackscollections",{"_index":2034,"title":{},"body":{"classes/RKHelper.html":{}}}],["object.material",{"_index":539,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.material.color",{"_index":540,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.material.color.set(color",{"_index":529,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.material?.color",{"_index":527,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.name",{"_index":1275,"title":{},"body":{"classes/ExportManager.html":{},"classes/PhoenixObjects.html":{}}}],["object.userdata",{"_index":1950,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["object.uuid",{"_index":1954,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["object.values(collection.children",{"_index":535,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.values(this.progressitems).reduce",{"_index":1543,"title":{},"body":{"classes/LoadingManager.html":{}}}],["object3d",{"_index":187,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{}}}],["objectcollection",{"_index":1448,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["objectgroup",{"_index":1445,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["objectname",{"_index":2807,"title":{},"body":{"interfaces/Window.html":{}}}],["objectparams",{"_index":619,"title":{},"body":{"classes/ColorOptions.html":{}}}],["objectparams?.charge",{"_index":679,"title":{},"body":{"classes/ColorOptions.html":{}}}],["objectparams?.dparams?.[4",{"_index":696,"title":{},"body":{"classes/ColorOptions.html":{}}}],["objectparams?.mom",{"_index":699,"title":{},"body":{"classes/ColorOptions.html":{}}}],["objects",{"_index":93,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["objects.traverse((object",{"_index":526,"title":{},"body":{"classes/ColorManager.html":{}}}],["objects.ts",{"_index":416,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["objects.ts:129",{"_index":1828,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:196",{"_index":1820,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:25",{"_index":425,"title":{},"body":{"classes/CMSObjects.html":{}}}],["objects.ts:275",{"_index":1848,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:305",{"_index":1842,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:334",{"_index":1816,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:386",{"_index":1838,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:39",{"_index":1835,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:412",{"_index":1831,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objectsgroup",{"_index":507,"title":{},"body":{"classes/ColorManager.html":{},"classes/SelectionManager.html":{}}}],["objectsgroup.getobjectbyproperty('uuid",{"_index":2380,"title":{},"body":{"classes/SelectionManager.html":{}}}],["objectstoanimatewithsphere",{"_index":239,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["objectstoanimatewithsphere.foreach((obj",{"_index":319,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["objectstoanimatewithsphere.push",{"_index":313,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["objecttype",{"_index":1267,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["objecttype.children",{"_index":1271,"title":{},"body":{"classes/ExportManager.html":{}}}],["objecttype.name",{"_index":1269,"title":{},"body":{"classes/ExportManager.html":{}}}],["objectuserdata",{"_index":509,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{}}}],["objectvisibility(collectionname",{"_index":1021,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["objectvisibility(labelid",{"_index":1066,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["objectvisibility(scenemanager.event_data_id",{"_index":1004,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["objectvisibility(scenemanager.geometries_id",{"_index":943,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["objexporter",{"_index":1238,"title":{},"body":{"classes/ExportManager.html":{}}}],["objfolder",{"_index":955,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["objfolder.add(this.guiparameters[name",{"_index":991,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["objfolder.remove",{"_index":1759,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["objfolder.togglestate",{"_index":1753,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["observable",{"_index":31,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["observed",{"_index":15,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["olddrawrangecount",{"_index":265,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["older",{"_index":2951,"title":{},"body":{"changelog.html":{}}}],["onanimationend",{"_index":131,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["onanimationsphereupdate",{"_index":317,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["onanimationsphereupdate(new",{"_index":351,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["onanimationstart",{"_index":117,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["once",{"_index":309,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ScriptLoader.html":{}}}],["onchange",{"_index":646,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{}}}],["onchange((value",{"_index":981,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["onclick",{"_index":1758,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{}}}],["oncolorchange",{"_index":1042,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["oncontrollerselectend",{"_index":2550,"title":{},"body":{"classes/VRManager.html":{}}}],["oncontrollerselectstart",{"_index":2551,"title":{},"body":{"classes/VRManager.html":{}}}],["ondisplayedeventchange",{"_index":2688,"title":{},"body":{"interfaces/Window.html":{}}}],["ondocumentmousedown",{"_index":2246,"title":{},"body":{"classes/SelectionManager.html":{}}}],["one",{"_index":998,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["onend",{"_index":102,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["oneventschange",{"_index":2687,"title":{},"body":{"interfaces/Window.html":{}}}],["onfileread",{"_index":3297,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onfileread?.(e.target.result.tostring",{"_index":3313,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onloadcallbacks",{"_index":1497,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onloadlabels",{"_index":1044,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["onprogress",{"_index":1506,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onprogress(id",{"_index":1526,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onprogresscallbacks",{"_index":1498,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onsavelabels",{"_index":1043,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["onsessionended",{"_index":2552,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["onsessionstarted",{"_index":2591,"title":{},"body":{"classes/VRManager.html":{}}}],["onsizechange",{"_index":1041,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["ontoggle",{"_index":1040,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{}}}],["ontouchdown",{"_index":2247,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ontouchmove",{"_index":2248,"title":{},"body":{"classes/SelectionManager.html":{}}}],["onupdate",{"_index":23,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["onupdate(callback",{"_index":43,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["onvrsessionended",{"_index":2553,"title":{},"body":{"classes/VRManager.html":{}}}],["onvrsessionstarted",{"_index":2554,"title":{},"body":{"classes/VRManager.html":{}}}],["opacity",{"_index":383,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["opacity.onfinishchange((newvalue",{"_index":966,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["operations",{"_index":73,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["optimal",{"_index":3134,"title":{},"body":{"changelog.html":{}}}],["optimize",{"_index":2931,"title":{},"body":{"changelog.html":{}}}],["option",{"_index":604,"title":{},"body":{"classes/ColorOptions.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["optional",{"_index":21,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["optionalfeatures",{"_index":2608,"title":{},"body":{"classes/VRManager.html":{}}}],["optionally",{"_index":1823,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["options",{"_index":545,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["options.ts",{"_index":544,"title":{},"body":{"classes/ColorOptions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["options.ts:112",{"_index":623,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:136",{"_index":622,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:161",{"_index":605,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:178",{"_index":627,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:192",{"_index":624,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:229",{"_index":606,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:239",{"_index":608,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:25",{"_index":588,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:265",{"_index":618,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:27",{"_index":589,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:29",{"_index":602,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:31",{"_index":592,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:34",{"_index":583,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:51",{"_index":586,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:59",{"_index":600,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:68",{"_index":565,"title":{},"body":{"classes/ColorOptions.html":{}}}],["origin",{"_index":127,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["original",{"_index":287,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PrettySymbols.html":{}}}],["otherwise",{"_index":674,"title":{},"body":{"classes/ColorOptions.html":{}}}],["out",{"_index":274,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["outdated",{"_index":2598,"title":{},"body":{"classes/VRManager.html":{}}}],["outline",{"_index":1081,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["outlinepass",{"_index":1118,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["outlinepass.overlaymaterial.blending",{"_index":1150,"title":{},"body":{"classes/EffectsManager.html":{}}}],["outlinepass.visibleedgecolor.set(0xdf5330",{"_index":1152,"title":{},"body":{"classes/EffectsManager.html":{}}}],["outlinepass.visibleedgecolor.set(0xffff66",{"_index":1151,"title":{},"body":{"classes/EffectsManager.html":{}}}],["output",{"_index":1256,"title":{},"body":{"classes/ExportManager.html":{},"changelog.html":{}}}],["over",{"_index":243,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["overlay",{"_index":2084,"title":{},"body":{"classes/RendererManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["overlaycanvas",{"_index":2118,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["overlayed",{"_index":2855,"title":{},"body":{"interfaces/Window.html":{}}}],["overlayrenderer",{"_index":2065,"title":{},"body":{"classes/RendererManager.html":{}}}],["overview",{"_index":3281,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":1996,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["p",{"_index":1292,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["package",{"_index":3195,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"index.html":{}}}],["packages",{"_index":3026,"title":{},"body":{"changelog.html":{}}}],["page",{"_index":2475,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["panel",{"_index":1397,"title":{},"body":{"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/SelectionManager.html":{}}}],["param",{"_index":56,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["parameter",{"_index":1991,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parameters",{"_index":32,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["parameterss",{"_index":1987,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parametrised",{"_index":3149,"title":{},"body":{"changelog.html":{}}}],["paramkey",{"_index":1999,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["params",{"_index":517,"title":{},"body":{"classes/ColorManager.html":{},"classes/LHCbLoader.html":{},"classes/PrettySymbols.html":{}}}],["paramscopy",{"_index":1997,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams",{"_index":2021,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[0",{"_index":2018,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[1",{"_index":2020,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[2",{"_index":2013,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[3",{"_index":2012,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[4",{"_index":2015,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy?.dparams",{"_index":2010,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy['pos",{"_index":2007,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy[paramkey",{"_index":2003,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy[symbol",{"_index":2002,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parent",{"_index":1565,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{}}}],["parentelement",{"_index":2197,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["parentelement.appendchild(scriptelement",{"_index":2237,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["parentnode",{"_index":1750,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["parentnode.addchild(name",{"_index":1752,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["parse",{"_index":1252,"title":{},"body":{"classes/ExportManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["parsed",{"_index":2788,"title":{},"body":{"interfaces/Window.html":{}}}],["parsefloat(objectparams?.dparams?.[4",{"_index":698,"title":{},"body":{"classes/ColorOptions.html":{}}}],["parsegltfgeometry",{"_index":2785,"title":{},"body":{"interfaces/Window.html":{}}}],["parseint(objectparams?.dparams?.[4",{"_index":678,"title":{},"body":{"classes/ColorOptions.html":{}}}],["parseobjgeometry",{"_index":2767,"title":{},"body":{"interfaces/Window.html":{}}}],["parsephoenixdisplay(input",{"_index":2775,"title":{},"body":{"interfaces/Window.html":{}}}],["parsephoenixevents(eventsdata",{"_index":2724,"title":{},"body":{"interfaces/Window.html":{}}}],["parses",{"_index":1482,"title":{},"body":{"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["parsing",{"_index":3100,"title":{},"body":{"changelog.html":{}}}],["part",{"_index":420,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["part_list",{"_index":1492,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["particle",{"_index":109,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["particle1",{"_index":384,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle1.clone",{"_index":387,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle1.position.setz(distancefromorigin",{"_index":388,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle2",{"_index":386,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle2.position.setz",{"_index":389,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particlecolor",{"_index":150,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particlegeometry",{"_index":378,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particlematerial",{"_index":381,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particles",{"_index":154,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particlesize",{"_index":148,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletoorigin",{"_index":394,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletweens",{"_index":391,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletweens.push(particletoorigin",{"_index":396,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletweens[0].oncomplete",{"_index":397,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["pass",{"_index":1082,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["passed",{"_index":1376,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["passes",{"_index":1098,"title":{},"body":{"classes/EffectsManager.html":{}}}],["passindex",{"_index":1154,"title":{},"body":{"classes/EffectsManager.html":{}}}],["path",{"_index":1372,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["pathlength",{"_index":2382,"title":{},"body":{"classes/State.html":{}}}],["pdata_list",{"_index":1493,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["peek",{"_index":1902,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["per",{"_index":756,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["perform",{"_index":839,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["performance",{"_index":2131,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["performed",{"_index":1288,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["performing",{"_index":1283,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["persist",{"_index":3067,"title":{},"body":{"changelog.html":{}}}],["perspective",{"_index":1743,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["phi",{"_index":760,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["phi=0",{"_index":796,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["phi=pi",{"_index":803,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["phnx",{"_index":2774,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenix",{"_index":593,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["phoenix.min.js",{"_index":3274,"title":{},"body":{"index.html":{}}}],["phoenixloader",{"_index":1412,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/URLOptionsManager.html":{},"coverage.html":{},"index.html":{}}}],["phoenixloader:122",{"_index":1467,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:143",{"_index":1480,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:18",{"_index":1428,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:20",{"_index":1435,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:22",{"_index":1427,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:24",{"_index":1431,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:26",{"_index":1434,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:28",{"_index":1430,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:340",{"_index":1461,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:392",{"_index":1447,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:426",{"_index":1478,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:443",{"_index":1474,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:46",{"_index":1465,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:496",{"_index":1470,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:551",{"_index":1457,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:577",{"_index":1472,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:82",{"_index":1471,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixloader:98",{"_index":1468,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["phoenixmenu",{"_index":1716,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{}}}],["phoenixmenuconfig",{"_index":1597,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["phoenixmenunode",{"_index":562,"title":{"classes/PhoenixMenuNode.html":{}},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["phoenixmenunode(name",{"_index":1632,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixmenunode.name",{"_index":1795,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["phoenixmenuroot",{"_index":711,"title":{},"body":{"interfaces/Configuration.html":{},"classes/StateManager.html":{}}}],["phoenixmenuui",{"_index":1714,"title":{"classes/PhoenixMenuUI.html":{}},"body":{"classes/PhoenixMenuUI.html":{},"coverage.html":{}}}],["phoenixnodejson",{"_index":1668,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['children",{"_index":1675,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['children'].push(child.getnodestate",{"_index":1676,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['childrenactive",{"_index":1672,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['configs",{"_index":1674,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['name",{"_index":1669,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['nodelevel",{"_index":1670,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['togglestate",{"_index":1671,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixobjects",{"_index":421,"title":{"classes/PhoenixObjects.html":{}},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["phoenixscene",{"_index":2776,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.scene",{"_index":2779,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.sceneconfiguration",{"_index":2778,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixurloptions",{"_index":2485,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["physics",{"_index":417,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["picker",{"_index":957,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["pipe",{"_index":3163,"title":{},"body":{"changelog.html":{}}}],["plane",{"_index":189,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["planes",{"_index":108,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["plength",{"_index":1371,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["point",{"_index":1308,"title":{},"body":{"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pointpos",{"_index":1843,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["points",{"_index":519,"title":{},"body":{"classes/ColorManager.html":{},"classes/PhoenixObjects.html":{}}}],["points.push(new",{"_index":1940,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsmaterial",{"_index":520,"title":{},"body":{"classes/ColorManager.html":{},"classes/PhoenixObjects.html":{}}}],["pos",{"_index":166,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos.x",{"_index":1861,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos.y",{"_index":1862,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos1",{"_index":1320,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos2",{"_index":1331,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos[0",{"_index":200,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["pos[1",{"_index":202,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["pos[2",{"_index":203,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["position",{"_index":136,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["position.length",{"_index":1915,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["position.setlength",{"_index":1914,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["position.setlength((position.length",{"_index":1920,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["positioning",{"_index":977,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["positions",{"_index":172,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["positions.concat(extrapolatedpos",{"_index":2061,"title":{},"body":{"classes/RKHelper.html":{}}}],["positions.length",{"_index":1859,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["positions.push([startpos.x",{"_index":2053,"title":{},"body":{"classes/RKHelper.html":{}}}],["positive",{"_index":802,"title":{},"body":{"classes/CoordinateHelper.html":{},"changelog.html":{}}}],["possible",{"_index":584,"title":{},"body":{"classes/ColorOptions.html":{},"changelog.html":{}}}],["post",{"_index":2302,"title":{},"body":{"classes/SelectionManager.html":{}}}],["powerpreference",{"_index":2129,"title":{},"body":{"classes/RendererManager.html":{}}}],["preselectionantialias",{"_index":2249,"title":{},"body":{"classes/SelectionManager.html":{}}}],["presenting",{"_index":3255,"title":{},"body":{"index.html":{}}}],["preset",{"_index":730,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["presetview",{"_index":729,"title":{"classes/PresetView.html":{}},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"coverage.html":{}}}],["presetviews",{"_index":712,"title":{},"body":{"interfaces/Configuration.html":{}}}],["prettier",{"_index":2903,"title":{},"body":{"changelog.html":{}}}],["pretty",{"_index":1974,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams",{"_index":2011,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['d0",{"_index":2017,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['q",{"_index":2016,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['z0",{"_index":2019,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['|p",{"_index":2014,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettyparams",{"_index":2341,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettyparams[key",{"_index":2348,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettysymbol",{"_index":1992,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettysymbols",{"_index":631,"title":{"classes/PrettySymbols.html":{}},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{},"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["prettysymbols.getprettyparams",{"_index":2342,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettysymbols.getprettysymbol('charge",{"_index":573,"title":{},"body":{"classes/ColorOptions.html":{}}}],["prettysymbols.getprettysymbol('charge')}=${chargevalue",{"_index":667,"title":{},"body":{"classes/ColorOptions.html":{}}}],["prettysymbols.getprettysymbol('mom",{"_index":580,"title":{},"body":{"classes/ColorOptions.html":{}}}],["prettysymbols.getprettysymbol(cut.field",{"_index":1783,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["prettysymbols.getprettysymbol(paramkey",{"_index":2001,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettysymbols.symbols[symbol].includes(param",{"_index":1994,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["previous",{"_index":1583,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{}}}],["previousscale",{"_index":284,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["prevlocalclipping",{"_index":372,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["prevnode",{"_index":1706,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.addchild(nodename",{"_index":1713,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.children.find(child",{"_index":1711,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.findintree(nodename",{"_index":1710,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["print",{"_index":2008,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["printed",{"_index":1986,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["private",{"_index":18,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["process",{"_index":426,"title":{},"body":{"classes/CMSObjects.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["process(data",{"_index":1440,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["processed",{"_index":1425,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["processes",{"_index":2825,"title":{},"body":{"interfaces/Window.html":{}}}],["processing",{"_index":726,"title":{},"body":{"interfaces/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/SelectionManager.html":{},"index.html":{}}}],["progress",{"_index":1511,"title":{},"body":{"classes/LoadingManager.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["progresses",{"_index":1528,"title":{},"body":{"classes/LoadingManager.html":{}}}],["progressitems",{"_index":1499,"title":{},"body":{"classes/LoadingManager.html":{}}}],["project",{"_index":2891,"title":{},"body":{"changelog.html":{}}}],["promise",{"_index":2191,"title":{},"body":{"classes/ScriptLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["promise((resolve",{"_index":2220,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["prop",{"_index":1691,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["propagate",{"_index":1365,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["propagate(startpos",{"_index":2171,"title":{},"body":{"classes/RungeKutta.html":{}}}],["propagation",{"_index":105,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["propagator",{"_index":2028,"title":{},"body":{"classes/RKHelper.html":{}}}],["properties",{"_index":17,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["property",{"_index":610,"title":{},"body":{"classes/ColorOptions.html":{}}}],["property's",{"_index":511,"title":{},"body":{"classes/ColorManager.html":{}}}],["props",{"_index":2349,"title":{},"body":{"classes/SelectionManager.html":{}}}],["props.join",{"_index":2359,"title":{},"body":{"classes/SelectionManager.html":{}}}],["props.length",{"_index":2358,"title":{},"body":{"classes/SelectionManager.html":{}}}],["protected",{"_index":1415,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["pseudorapidity",{"_index":770,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["pt",{"_index":1978,"title":{},"body":{"classes/PrettySymbols.html":{},"changelog.html":{}}}],["public",{"_index":20,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["pushed",{"_index":2573,"title":{},"body":{"classes/VRManager.html":{}}}],["puts",{"_index":800,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["q",{"_index":1291,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["qop",{"_index":1296,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["quaternion",{"_index":751,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["quaternion.multiply(quaternion2",{"_index":808,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["quaternion.setfromunitvectors(v1",{"_index":799,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["quaternion2",{"_index":804,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["quaternion2.setfromaxisangle(new",{"_index":805,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["radians",{"_index":779,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["radius",{"_index":216,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CoordinateHelper.html":{}}}],["range",{"_index":512,"title":{},"body":{"classes/ColorManager.html":{},"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["rangeslider",{"_index":1624,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["ratio",{"_index":1293,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["raycaster",{"_index":2296,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.intersectobjects(this.scene.children",{"_index":2375,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.params.line.threshold",{"_index":2374,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.setfromcamera(mouse",{"_index":2373,"title":{},"body":{"classes/SelectionManager.html":{}}}],["reachedhits",{"_index":325,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["reachedhits.length",{"_index":329,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["reaches",{"_index":310,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["react",{"_index":3279,"title":{},"body":{"index.html":{}}}],["read",{"_index":3301,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reader",{"_index":3310,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reader.onload",{"_index":3312,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reader.readastext(configfile",{"_index":3315,"title":{},"body":{"miscellaneous/variables.html":{}}}],["readonly",{"_index":1975,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/VRManager.html":{}}}],["realistic",{"_index":3048,"title":{},"body":{"changelog.html":{}}}],["receives",{"_index":1481,"title":{},"body":{"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["reconstruct",{"_index":1483,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["reconstructing",{"_index":1452,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["recover",{"_index":1224,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["redundant",{"_index":3039,"title":{},"body":{"changelog.html":{}}}],["refactoring",{"_index":3184,"title":{},"body":{"changelog.html":{}}}],["references",{"_index":1846,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["reject",{"_index":2221,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["related",{"_index":72,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["released",{"_index":2572,"title":{},"body":{"classes/VRManager.html":{}}}],["reload",{"_index":2740,"title":{},"body":{"interfaces/Window.html":{}}}],["remaining",{"_index":349,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["remove",{"_index":374,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["remove').name('remove",{"_index":992,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["removechild",{"_index":1574,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["removechild(child",{"_index":1615,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["removecontrols",{"_index":2076,"title":{},"body":{"classes/RendererManager.html":{}}}],["removecontrols(renderer",{"_index":2106,"title":{},"body":{"classes/RendererManager.html":{}}}],["removed",{"_index":912,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{}}}],["removeeventlistener('click",{"_index":2328,"title":{},"body":{"classes/SelectionManager.html":{}}}],["removeeventlistener('mousemove",{"_index":2327,"title":{},"body":{"classes/SelectionManager.html":{}}}],["removeeventlistener('touchstart",{"_index":2329,"title":{},"body":{"classes/SelectionManager.html":{}}}],["removelabel",{"_index":856,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["removelabel').name('remove",{"_index":1075,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["removelabel(labelid",{"_index":907,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["removelabelnode",{"_index":1719,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["removelabelnode(labelid",{"_index":1736,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["removeobj",{"_index":857,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["removeobj(name",{"_index":910,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["removepass",{"_index":1092,"title":{},"body":{"classes/EffectsManager.html":{}}}],["removepass(pass",{"_index":1122,"title":{},"body":{"classes/EffectsManager.html":{}}}],["removing",{"_index":2945,"title":{},"body":{"changelog.html":{}}}],["render",{"_index":1088,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["render(scene",{"_index":2109,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendered",{"_index":2119,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderer",{"_index":98,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["renderer.localclippingenabled",{"_index":2167,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderera",{"_index":2126,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererb",{"_index":2123,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererelement",{"_index":2365,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererelement.clientheight",{"_index":2372,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererelement.clientwidth",{"_index":2369,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererheight",{"_index":2148,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderermanager",{"_index":90,"title":{"classes/RendererManager.html":{}},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"coverage.html":{}}}],["renderers",{"_index":2066,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererwidth",{"_index":2145,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendering",{"_index":1110,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"changelog.html":{}}}],["renderpass",{"_index":1108,"title":{},"body":{"classes/EffectsManager.html":{}}}],["renderpass(this.scene",{"_index":1137,"title":{},"body":{"classes/EffectsManager.html":{}}}],["renders",{"_index":2794,"title":{},"body":{"interfaces/Window.html":{}}}],["repo",{"_index":3043,"title":{},"body":{"changelog.html":{}}}],["representation",{"_index":2569,"title":{},"body":{"classes/VRManager.html":{}}}],["representing",{"_index":505,"title":{},"body":{"classes/ColorManager.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["represents",{"_index":1177,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["request",{"_index":3033,"title":{},"body":{"changelog.html":{}}}],["required",{"_index":3263,"title":{},"body":{"index.html":{}}}],["res.json",{"_index":2505,"title":{},"body":{"classes/URLOptionsManager.html":{},"index.html":{}}}],["res.text",{"_index":2512,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["reset",{"_index":819,"title":{},"body":{"classes/Cut.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"changelog.html":{}}}],["resetcut",{"_index":1015,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["resize",{"_index":3050,"title":{},"body":{"changelog.html":{}}}],["resolve",{"_index":2233,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["resolved",{"_index":2192,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["resources",{"_index":1433,"title":{},"body":{"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["responsible",{"_index":497,"title":{},"body":{"classes/ColorManager.html":{},"interfaces/Configuration.html":{},"interfaces/Window.html":{}}}],["restore",{"_index":348,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixMenuNode.html":{}}}],["restored",{"_index":1585,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["restoring",{"_index":286,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["restructure",{"_index":3015,"title":{},"body":{"changelog.html":{}}}],["result",{"_index":62,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["resultant",{"_index":1825,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["results",{"_index":64,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":1191,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["return",{"_index":205,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["returns",{"_index":49,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["returnvec",{"_index":1338,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["reverse",{"_index":789,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["revert",{"_index":370,"title":{},"body":{"classes/AnimationsManager.html":{},"changelog.html":{}}}],["right",{"_index":464,"title":{},"body":{"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"changelog.html":{}}}],["rk",{"_index":2910,"title":{},"body":{"changelog.html":{}}}],["rkhelper",{"_index":1853,"title":{"classes/RKHelper.html":{}},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"coverage.html":{}}}],["rkhelper.extrapolatetrackpositions(track",{"_index":2037,"title":{},"body":{"classes/RKHelper.html":{}}}],["rkhelper.extrapolatetrackpositions(trackparams",{"_index":1864,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["rkstate",{"_index":1379,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.dir",{"_index":1381,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.maxstepsize",{"_index":1384,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.p",{"_index":1382,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.pathlength",{"_index":1385,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.pos",{"_index":1380,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.q",{"_index":1383,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rollup",{"_index":3069,"title":{},"body":{"changelog.html":{}}}],["root",{"_index":728,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["rotate",{"_index":752,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{}}}],["rotate.chain(end",{"_index":229,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["rotateclipping(jsondata['eventdisplay']['clippingangle",{"_index":2449,"title":{},"body":{"classes/StateManager.html":{}}}],["rotationpositions",{"_index":224,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["rotations",{"_index":766,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["routes",{"_index":3171,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":1201,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["run${this.eventmetadata.runnumber}_evt${this.eventmetadata.eventnumber}.json",{"_index":2436,"title":{},"body":{"classes/StateManager.html":{}}}],["runge",{"_index":1284,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rungekutta",{"_index":1286,"title":{"classes/RungeKutta.html":{}},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["runnumber",{"_index":1490,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/StateManager.html":{}}}],["same",{"_index":1453,"title":{},"body":{"classes/LHCbLoader.html":{},"changelog.html":{}}}],["save",{"_index":1231,"title":{},"body":{"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["saved",{"_index":1225,"title":{},"body":{"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["saveeventdataconfiguration",{"_index":1215,"title":{},"body":{"classes/ExportManager.html":{}}}],["saveeventdataconfiguration(eventdata",{"_index":1229,"title":{},"body":{"classes/ExportManager.html":{}}}],["savefile",{"_index":1242,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["savefile(output",{"_index":1261,"title":{},"body":{"classes/ExportManager.html":{}}}],["savefile(result",{"_index":1247,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration",{"_index":1216,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration(geometries",{"_index":1232,"title":{},"body":{"classes/ExportManager.html":{}}}],["savelabels",{"_index":1048,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["saves",{"_index":2722,"title":{},"body":{"interfaces/Window.html":{}}}],["savesceneconfig",{"_index":1217,"title":{},"body":{"classes/ExportManager.html":{}}}],["savesceneconfig(eventdata",{"_index":1234,"title":{},"body":{"classes/ExportManager.html":{}}}],["savestateasjson",{"_index":2401,"title":{},"body":{"classes/StateManager.html":{}}}],["scale",{"_index":250,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["scalemenu",{"_index":973,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["scalemenu.onchange((value",{"_index":975,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["scaleobject(scenemanager.geometries_id",{"_index":1749,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["scaletween",{"_index":276,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["scaletween.onupdate((updatedscale",{"_index":283,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["scaling",{"_index":273,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["scene",{"_index":87,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ColorManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["scene's",{"_index":2396,"title":{},"body":{"classes/StateManager.html":{}}}],["scene.background",{"_index":2141,"title":{},"body":{"classes/RendererManager.html":{}}}],["scene.phnx",{"_index":1262,"title":{},"body":{"classes/ExportManager.html":{}}}],["scene/geometry",{"_index":2790,"title":{},"body":{"interfaces/Window.html":{}}}],["scenecolor",{"_index":2140,"title":{},"body":{"classes/RendererManager.html":{}}}],["sceneconfig",{"_index":1250,"title":{},"body":{"classes/ExportManager.html":{}}}],["sceneconfiguration",{"_index":1259,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["sceneconfiguration.eventdata[objecttype",{"_index":2831,"title":{},"body":{"interfaces/Window.html":{}}}],["sceneconfiguration.geometries",{"_index":2834,"title":{},"body":{"interfaces/Window.html":{}}}],["scenemanager",{"_index":179,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ColorManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"coverage.html":{}}}],["scenemanager.event_data_id",{"_index":1017,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["scenemanager.labels_id",{"_index":1067,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["sceneurl",{"_index":2849,"title":{},"body":{"interfaces/Window.html":{}}}],["screen",{"_index":2865,"title":{},"body":{"interfaces/Window.html":{}}}],["screenshot",{"_index":3141,"title":{},"body":{"changelog.html":{}}}],["script",{"_index":2176,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{},"index.html":{}}}],["script[src",{"_index":2224,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement",{"_index":2226,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.addeventlistener('load",{"_index":2232,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.onerror",{"_index":2235,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.setattribute('data",{"_index":2231,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.src",{"_index":2230,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.type",{"_index":2228,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists",{"_index":2222,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists.length",{"_index":2225,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists[0].addeventlistener('load",{"_index":2240,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists[0].dataset.loaded",{"_index":2239,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptfor",{"_index":2196,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptloader",{"_index":2174,"title":{"classes/ScriptLoader.html":{}},"body":{"classes/ScriptLoader.html":{},"coverage.html":{}}}],["scriptloader.loadscript(jsroot_cdn_url",{"_index":2217,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scripts",{"_index":2179,"title":{},"body":{"classes/ScriptLoader.html":{},"miscellaneous/variables.html":{}}}],["scripturl",{"_index":2200,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["search",{"_index":2463,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["second",{"_index":1317,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["secondary",{"_index":2088,"title":{},"body":{"classes/RendererManager.html":{}}}],["see",{"_index":775,"title":{},"body":{"classes/CoordinateHelper.html":{},"changelog.html":{}}}],["select",{"_index":1625,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{},"miscellaneous/typealiases.html":{}}}],["selected",{"_index":603,"title":{},"body":{"classes/ColorOptions.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selectedcolorbyoption",{"_index":551,"title":{},"body":{"classes/ColorOptions.html":{}}}],["selectedobject",{"_index":2250,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selectend",{"_index":2628,"title":{},"body":{"classes/VRManager.html":{}}}],["selecting",{"_index":2279,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selection",{"_index":1892,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["selectionmanager",{"_index":2241,"title":{"classes/SelectionManager.html":{}},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["selectstart",{"_index":2626,"title":{},"body":{"classes/VRManager.html":{}}}],["send",{"_index":2806,"title":{},"body":{"interfaces/Window.html":{}}}],["separate",{"_index":3017,"title":{},"body":{"changelog.html":{}}}],["separated",{"_index":615,"title":{},"body":{"classes/ColorOptions.html":{}}}],["separator",{"_index":2751,"title":{},"body":{"interfaces/Window.html":{}}}],["service",{"_index":1404,"title":{},"body":{"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/SelectionManager.html":{},"index.html":{}}}],["session",{"_index":2571,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["session.addeventlistener('end",{"_index":2620,"title":{},"body":{"classes/VRManager.html":{}}}],["session_type",{"_index":2555,"title":{},"body":{"classes/VRManager.html":{}}}],["sessioninit",{"_index":2607,"title":{},"body":{"classes/VRManager.html":{}}}],["set",{"_index":354,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["set/get",{"_index":2156,"title":{},"body":{"classes/RendererManager.html":{}}}],["setantialiasing",{"_index":1093,"title":{},"body":{"classes/EffectsManager.html":{}}}],["setantialiasing(antialias",{"_index":1124,"title":{},"body":{"classes/EffectsManager.html":{}}}],["setcamera",{"_index":2402,"title":{},"body":{"classes/StateManager.html":{}}}],["setcamera(camera",{"_index":2413,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingangle",{"_index":2403,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingangle(angle",{"_index":2415,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingenabled",{"_index":2404,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingenabled(clipping",{"_index":2418,"title":{},"body":{"classes/StateManager.html":{}}}],["seteventdisplay",{"_index":2405,"title":{},"body":{"classes/StateManager.html":{}}}],["seteventdisplay(eventdisplay",{"_index":2420,"title":{},"body":{"classes/StateManager.html":{}}}],["setfixoverlay",{"_index":2077,"title":{},"body":{"classes/RendererManager.html":{}}}],["setfixoverlay(value",{"_index":2110,"title":{},"body":{"classes/RendererManager.html":{}}}],["setflat",{"_index":2758,"title":{},"body":{"interfaces/Window.html":{}}}],["setgeometryopacity(scenemanager.geometries_id",{"_index":1747,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["setinterval",{"_index":2671,"title":{},"body":{"classes/VRManager.html":{}}}],["setlocalclippingenabled",{"_index":2078,"title":{},"body":{"classes/RendererManager.html":{}}}],["setlocalclippingenabled(value",{"_index":2112,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer",{"_index":2079,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer(renderer",{"_index":2114,"title":{},"body":{"classes/RendererManager.html":{}}}],["setoverlayrenderer",{"_index":2080,"title":{},"body":{"classes/RendererManager.html":{}}}],["setoverlayrenderer(overlaycanvas",{"_index":2116,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["setphoenixmenuroot",{"_index":2406,"title":{},"body":{"classes/StateManager.html":{}}}],["setphoenixmenuroot(phoenixmenuroot",{"_index":2422,"title":{},"body":{"classes/StateManager.html":{}}}],["setrenderers",{"_index":2081,"title":{},"body":{"classes/RendererManager.html":{}}}],["setrenderers(renderers",{"_index":2120,"title":{},"body":{"classes/RendererManager.html":{}}}],["sets",{"_index":894,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["setselectedobject",{"_index":2256,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselectedobject(selectedobject",{"_index":2293,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting",{"_index":2257,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting(enable",{"_index":2294,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setting",{"_index":1890,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{}}}],["settings",{"_index":2718,"title":{},"body":{"interfaces/Window.html":{}}}],["setup",{"_index":2978,"title":{},"body":{"changelog.html":{}}}],["setupvrcontrols",{"_index":2563,"title":{},"body":{"classes/VRManager.html":{}}}],["setview",{"_index":1961,"title":{},"body":{"classes/PresetView.html":{}}}],["setvrsession",{"_index":2564,"title":{},"body":{"classes/VRManager.html":{}}}],["setvrsession(renderer",{"_index":2590,"title":{},"body":{"classes/VRManager.html":{}}}],["shade",{"_index":3132,"title":{},"body":{"changelog.html":{}}}],["shaded",{"_index":2760,"title":{},"body":{"interfaces/Window.html":{}}}],["sharable",{"_index":2914,"title":{},"body":{"changelog.html":{}}}],["share",{"_index":2976,"title":{},"body":{"changelog.html":{}}}],["shouldcolorbycharge",{"_index":559,"title":{},"body":{"classes/ColorOptions.html":{}}}],["shouldcolorbycharge(objectparams",{"_index":625,"title":{},"body":{"classes/ColorOptions.html":{}}}],["show",{"_index":407,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/Window.html":{}}}],["show/hide",{"_index":884,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["showgeometriesmenu",{"_index":936,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["showgeometriesmenu.onchange((value",{"_index":940,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["showing",{"_index":1184,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["showing/hiding",{"_index":935,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["showmenu",{"_index":969,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["showmenu.onchange((value",{"_index":970,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["showmenu.onchange(ontoggle",{"_index":1051,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["shown",{"_index":1395,"title":{},"body":{"classes/InfoLogger.html":{}}}],["si",{"_index":1294,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["side",{"_index":473,"title":{},"body":{"classes/CMSObjects.html":{}}}],["sides",{"_index":2757,"title":{},"body":{"interfaces/Window.html":{}}}],["simple",{"_index":3262,"title":{},"body":{"index.html":{}}}],["simplify",{"_index":2987,"title":{},"body":{"changelog.html":{}}}],["single",{"_index":176,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{},"miscellaneous/typealiases.html":{}}}],["singlelabelnode",{"_index":1802,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["singlelabelnode.name",{"_index":1803,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["singleton",{"_index":1508,"title":{},"body":{"classes/LoadingManager.html":{},"classes/StateManager.html":{}}}],["size",{"_index":156,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["slider",{"_index":972,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["sliders",{"_index":1781,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["slidervalue",{"_index":687,"title":{},"body":{"classes/ColorOptions.html":{}}}],["smaller",{"_index":2819,"title":{},"body":{"interfaces/Window.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["space",{"_index":1367,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["spec",{"_index":3109,"title":{},"body":{"changelog.html":{}}}],["specific",{"_index":1439,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["specified",{"_index":1959,"title":{},"body":{"classes/PresetView.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["specifying",{"_index":811,"title":{},"body":{"classes/Cut.html":{},"interfaces/Window.html":{}}}],["sphere",{"_index":186,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["sphere(new",{"_index":238,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["sphere.attributes.position",{"_index":359,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["sphere.name",{"_index":1937,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.position.x",{"_index":1931,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.position.y",{"_index":1933,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.position.z",{"_index":1935,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.userdata",{"_index":1936,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.uuid",{"_index":1939,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["spherebuffergeometry",{"_index":185,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["spherebuffergeometry(1",{"_index":355,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spherebuffergeometry(3",{"_index":1928,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["spherebuffergeometry(particlesize",{"_index":379,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spherical",{"_index":353,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["sphericaltocartesian",{"_index":748,"title":{},"body":{"classes/CoordinateHelper.html":{},"changelog.html":{}}}],["sphericaltocartesian(radius",{"_index":780,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["sphi",{"_index":1869,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["split",{"_index":3020,"title":{},"body":{"changelog.html":{}}}],["splitting",{"_index":3022,"title":{},"body":{"changelog.html":{}}}],["src/.../active",{"_index":3285,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../color",{"_index":3250,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../constants.ts",{"_index":3288,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../file.ts",{"_index":3290,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../phoenix",{"_index":3286,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../script",{"_index":3289,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../url",{"_index":3291,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/event",{"_index":2682,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["src/extras/configuration.ts",{"_index":703,"title":{},"body":{"interfaces/Configuration.html":{},"coverage.html":{}}}],["src/extras/cut.model.ts",{"_index":810,"title":{},"body":{"classes/Cut.html":{},"coverage.html":{}}}],["src/extras/cut.model.ts:18",{"_index":826,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:19",{"_index":828,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:20",{"_index":827,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:21",{"_index":829,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:30",{"_index":830,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:6",{"_index":825,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:8",{"_index":821,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/preset",{"_index":1955,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{}}}],["src/helpers/active",{"_index":6,"title":{},"body":{"classes/ActiveVariable.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/helpers/constants.ts",{"_index":3204,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/coordinate",{"_index":740,"title":{},"body":{"classes/CoordinateHelper.html":{},"coverage.html":{}}}],["src/helpers/file.ts",{"_index":3206,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/info",{"_index":1386,"title":{},"body":{"classes/InfoLogger.html":{},"coverage.html":{}}}],["src/helpers/pretty",{"_index":1972,"title":{},"body":{"classes/PrettySymbols.html":{},"coverage.html":{}}}],["src/helpers/rk",{"_index":2022,"title":{},"body":{"classes/RKHelper.html":{},"coverage.html":{}}}],["src/helpers/runge",{"_index":1277,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["src/loaders/cms",{"_index":3210,"title":{},"body":{"coverage.html":{}}}],["src/loaders/event",{"_index":1157,"title":{},"body":{"interfaces/EventDataLoader.html":{},"coverage.html":{}}}],["src/loaders/jivexml",{"_index":3213,"title":{},"body":{"coverage.html":{}}}],["src/loaders/jsroot",{"_index":3215,"title":{},"body":{"coverage.html":{}}}],["src/loaders/lhcb",{"_index":1411,"title":{},"body":{"classes/LHCbLoader.html":{},"coverage.html":{}}}],["src/loaders/objects/cms",{"_index":415,"title":{},"body":{"classes/CMSObjects.html":{},"coverage.html":{}}}],["src/loaders/objects/phoenix",{"_index":1806,"title":{},"body":{"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["src/loaders/phoenix",{"_index":3219,"title":{},"body":{"coverage.html":{}}}],["src/loaders/script",{"_index":2175,"title":{},"body":{"classes/ScriptLoader.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/loaders/trackml",{"_index":3221,"title":{},"body":{"coverage.html":{}}}],["src/managers/loading",{"_index":1496,"title":{},"body":{"classes/LoadingManager.html":{},"coverage.html":{}}}],["src/managers/state",{"_index":2395,"title":{},"body":{"classes/StateManager.html":{},"coverage.html":{}}}],["src/managers/three",{"_index":66,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"coverage.html":{}}}],["src/managers/ui",{"_index":543,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/managers/url",{"_index":2454,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["standalone",{"_index":3270,"title":{},"body":{"index.html":{}}}],["start",{"_index":135,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["start.chain(startxaxis",{"_index":227,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["start.start",{"_index":231,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["startclone.delay(500",{"_index":226,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["startdir",{"_index":1368,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["startdir.normalize",{"_index":2057,"title":{},"body":{"classes/RKHelper.html":{}}}],["started",{"_index":2577,"title":{"changelog.html":{},"index.html":{}},"body":{"classes/VRManager.html":{}}}],["starting",{"_index":1139,"title":{},"body":{"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["startpos",{"_index":134,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["startpos.y",{"_index":2054,"title":{},"body":{"classes/RKHelper.html":{}}}],["startpos.z",{"_index":2055,"title":{},"body":{"classes/RKHelper.html":{}}}],["startpos[2",{"_index":213,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["starts",{"_index":120,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{}}}],["startxaxis",{"_index":214,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["startxaxis.chain(rotatestart",{"_index":228,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["state",{"_index":1287,"title":{"classes/State.html":{}},"body":{"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["state.dir",{"_index":1319,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.add",{"_index":1359,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().cross(b_first).multiplyscalar(qop",{"_index":1313,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.cross(b_first",{"_index":1311,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.normalize",{"_index":1364,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.p",{"_index":1299,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos",{"_index":1318,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos.add(state.dir.clone().multiplyscalar(fh)).add",{"_index":1355,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.q",{"_index":1297,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.stepsize",{"_index":1350,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.unitc",{"_index":1298,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["statemanager",{"_index":1418,"title":{"classes/StateManager.html":{}},"body":{"classes/LHCbLoader.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["statemanager.instance",{"_index":2424,"title":{},"body":{"classes/StateManager.html":{}}}],["statemanager.loadstatefromjson(jsonstate",{"_index":2507,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["statements",{"_index":3198,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":422,"title":{},"body":{"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/Field.html":{},"classes/LoadingManager.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["stats",{"_index":2530,"title":{},"body":{"classes/URLOptionsManager.html":{},"dependencies.html":{}}}],["statselement",{"_index":2529,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["step",{"_index":223,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/Field.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["step(state",{"_index":1290,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["stepdistance",{"_index":2586,"title":{},"body":{"classes/VRManager.html":{}}}],["steps",{"_index":1366,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["stepsize",{"_index":2383,"title":{},"body":{"classes/State.html":{}}}],["stheta",{"_index":1873,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["still",{"_index":2600,"title":{},"body":{"classes/VRManager.html":{}}}],["stop",{"_index":2673,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["stored",{"_index":614,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["storing",{"_index":2690,"title":{},"body":{"interfaces/Window.html":{}}}],["string",{"_index":441,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":1196,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["style.setproperty('display",{"_index":2534,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["sub",{"_index":2753,"title":{},"body":{"interfaces/Window.html":{}}}],["super",{"_index":1485,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["support",{"_index":2992,"title":{},"body":{"changelog.html":{}}}],["svg",{"_index":1971,"title":{},"body":{"classes/PresetView.html":{}}}],["swap",{"_index":2125,"title":{},"body":{"classes/RendererManager.html":{}}}],["swapped",{"_index":2127,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers",{"_index":2082,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers(renderera",{"_index":2122,"title":{},"body":{"classes/RendererManager.html":{}}}],["switch",{"_index":3005,"title":{},"body":{"changelog.html":{}}}],["switching",{"_index":732,"title":{},"body":{"interfaces/Configuration.html":{}}}],["symbol",{"_index":1990,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols",{"_index":633,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{},"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{}}}],["symbols.ts",{"_index":1973,"title":{},"body":{"classes/PrettySymbols.html":{},"coverage.html":{}}}],["symbols.ts:24",{"_index":1989,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols.ts:37",{"_index":1985,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols.ts:6",{"_index":1983,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["synchronously",{"_index":2185,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["t",{"_index":27,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["table",{"_index":3240,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3239,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":2203,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["take",{"_index":2352,"title":{},"body":{"classes/SelectionManager.html":{}}}],["takes",{"_index":1176,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["tells",{"_index":1826,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["temp",{"_index":2166,"title":{},"body":{"classes/RendererManager.html":{}}}],["tempanchor",{"_index":3321,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.click",{"_index":3327,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.download",{"_index":3326,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.href",{"_index":3324,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.remove",{"_index":3328,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.style.display",{"_index":3323,"title":{},"body":{"miscellaneous/variables.html":{}}}],["temporary",{"_index":754,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["tesla",{"_index":1282,"title":{},"body":{"classes/Field.html":{}}}],["test",{"_index":1007,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["tests",{"_index":3051,"title":{},"body":{"changelog.html":{}}}],["text",{"_index":2357,"title":{},"body":{"classes/SelectionManager.html":{},"changelog.html":{}}}],["text/javascript",{"_index":2229,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["text/plain",{"_index":1249,"title":{},"body":{"classes/ExportManager.html":{}}}],["then((jsonstate",{"_index":2506,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["then((res",{"_index":2504,"title":{},"body":{"classes/URLOptionsManager.html":{},"index.html":{}}}],["then((session",{"_index":2615,"title":{},"body":{"classes/VRManager.html":{}}}],["theta",{"_index":774,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["thetatoeta",{"_index":749,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["thetatoeta(theta",{"_index":782,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["third",{"_index":1329,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["this.activecamera",{"_index":2452,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activecamera.position.fromarray",{"_index":2442,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activecamera.position.toarray",{"_index":2432,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activeobject",{"_index":2313,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.activeobject.update(intersectedobject.uuid",{"_index":2340,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.addrenderer(overlayrenderer",{"_index":2159,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.addrenderer(renderer",{"_index":2132,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.allcolorbyoptions.filter((colorbyoption",{"_index":651,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.animateevent",{"_index":193,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animateevent.bind(this",{"_index":194,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animateeventwithclipping",{"_index":195,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animateeventwithclipping.bind(this",{"_index":196,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animatewithcollision",{"_index":413,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animatewithcollision(this.animateevent",{"_index":412,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.antialiasing",{"_index":1141,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.antialiasrender",{"_index":1142,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.applychargecoloroptions.bind(this",{"_index":577,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.applyconfigstate(nodeconfig",{"_index":1694,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.applyconfigstate(this.configs[configslength",{"_index":1649,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.applyembedoption",{"_index":2494,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.applyeventoptions",{"_index":2490,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.applyhidewidgetsoptions",{"_index":2493,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.applymomcoloroptions.bind(this",{"_index":582,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.buildeventdatafromjson(event",{"_index":2745,"title":{},"body":{"interfaces/Window.html":{}}}],["this.buildgeometryfromparameters(parameters",{"_index":2854,"title":{},"body":{"interfaces/Window.html":{}}}],["this.callbacks.foreach((callback",{"_index":59,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["this.callbacks.push(callback",{"_index":61,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["this.camera",{"_index":1134,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["this.cameragroup",{"_index":2630,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.add(this.vrcamera",{"_index":2639,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.position.addscaledvector(direction",{"_index":2680,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.position.copy(this.vrcamera.position",{"_index":2638,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.position.toarray().join",{"_index":2670,"title":{},"body":{"classes/VRManager.html":{}}}],["this.camerapos",{"_index":1969,"title":{},"body":{"classes/PresetView.html":{}}}],["this.chargecolors[chargevalue",{"_index":668,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.children",{"_index":1629,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.filter",{"_index":1698,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.indexof(child",{"_index":1638,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.push(child",{"_index":1636,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.splice(childindex",{"_index":1639,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.childrenactive",{"_index":1673,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.childrentogglestate[child.name",{"_index":1652,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.clippingangle",{"_index":2434,"title":{},"body":{"classes/StateManager.html":{}}}],["this.clippingangle.update(angle",{"_index":2451,"title":{},"body":{"classes/StateManager.html":{}}}],["this.clippingenabled",{"_index":2433,"title":{},"body":{"classes/StateManager.html":{}}}],["this.clippingenabled.update(clipping",{"_index":2450,"title":{},"body":{"classes/StateManager.html":{}}}],["this.collectionname",{"_index":638,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.collideparticles(1500",{"_index":409,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.colorbymomentum('max",{"_index":689,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbymomentum('min",{"_index":688,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbymomentum(key",{"_index":692,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions",{"_index":650,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions.find",{"_index":663,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions.foreach((colorbyoption",{"_index":654,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions.map((colorbyoption",{"_index":659,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions[0].key",{"_index":657,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colormanager.collectioncolor(this.collectionname",{"_index":647,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colormanager.colorobjectsbyproperty",{"_index":669,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder",{"_index":640,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder.addconfig('color",{"_index":642,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder.addconfig('select",{"_index":658,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder.addconfig('slider",{"_index":682,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.composer",{"_index":1132,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.addpass(outlinepass",{"_index":1153,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.addpass(this.defaultrenderpass",{"_index":1138,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.passes.indexof(pass",{"_index":1155,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.passes.splice(passindex",{"_index":1156,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.render",{"_index":1146,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.renderer.render(scene",{"_index":1147,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.configs",{"_index":1630,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configs.find",{"_index":1686,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configs.push(configoptions",{"_index":1648,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configuration",{"_index":2702,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.defaulteventfile?.eventfile",{"_index":2491,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.configuration.defaulteventfile?.eventtype",{"_index":2492,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.configuration.eventdataloader",{"_index":2513,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.configuration.eventdataloader.addlabeltoeventobject",{"_index":2883,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.buildeventdata",{"_index":2737,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.getcollection(collectionname",{"_index":2837,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.getcollections",{"_index":2838,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.geteventmetadata",{"_index":2843,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.geteventslist",{"_index":2726,"title":{},"body":{"interfaces/Window.html":{}}}],["this.containsobject(renderer",{"_index":2162,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.controller.getworlddirection(direction",{"_index":2678,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1",{"_index":2641,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.add(line.clone",{"_index":2661,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.addeventlistener",{"_index":2675,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.addeventlistener('selectend",{"_index":2676,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.position.toarray().join",{"_index":2668,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1?.removeeventlistener",{"_index":2625,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller2",{"_index":2644,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller2.add(line.clone",{"_index":2662,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip1",{"_index":2648,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip1.add",{"_index":2650,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip2",{"_index":2653,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip2.add",{"_index":2655,"title":{},"body":{"classes/VRManager.html":{}}}],["this.currentvrsession",{"_index":2623,"title":{},"body":{"classes/VRManager.html":{}}}],["this.currentvrsession?.end",{"_index":2631,"title":{},"body":{"classes/VRManager.html":{}}}],["this.currentvrsession?.removeeventlistener('end",{"_index":2624,"title":{},"body":{"classes/VRManager.html":{}}}],["this.data",{"_index":1486,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.eventnumber",{"_index":1489,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.particles",{"_index":1494,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.runnumber",{"_index":1491,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.defaultmaxvalue",{"_index":832,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultminvalue",{"_index":831,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultrenderpass",{"_index":1136,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.defaultrenderpass.camera",{"_index":1144,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.defaultrenderpass.scene",{"_index":1145,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.disableselecting",{"_index":2315,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager",{"_index":2309,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.addoutlinepassforselection",{"_index":2311,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.antialiasing",{"_index":2325,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.composer.renderer.domelement",{"_index":2366,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.setantialiasing(false",{"_index":2326,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.setantialiasing(this.preselectionantialias",{"_index":2331,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsrender",{"_index":1143,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.enableeventdisplayconsole",{"_index":2713,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enablekeyboardcontrols",{"_index":2715,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enableselecting",{"_index":2314,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.etatotheta(eta",{"_index":793,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["this.eventdisplay",{"_index":2447,"title":{},"body":{"classes/StateManager.html":{},"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.buildeventdatafromjson(eventdata",{"_index":2517,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().addloadableitem('url_config",{"_index":2502,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().addloadableitem('url_event",{"_index":2510,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().itemloaded('url_config",{"_index":2509,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().itemloaded('url_event",{"_index":2523,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getuimanager().setclipping(true",{"_index":2446,"title":{},"body":{"classes/StateManager.html":{}}}],["this.eventdisplay.parsephoenixevents(res",{"_index":2518,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventfolder",{"_index":927,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.eventfolder.addchild(typename",{"_index":1766,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventfolder.addconfig('checkbox",{"_index":1764,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventfolder.addfolder(typename",{"_index":1010,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.eventfolder.getnodestate",{"_index":1761,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventfolder.loadstatefromjson(this.eventfolderstate",{"_index":1805,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventfolder.remove",{"_index":1762,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventfolderstate",{"_index":1760,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventsdata",{"_index":2725,"title":{},"body":{"interfaces/Window.html":{}}}],["this.eventsdata[eventkey",{"_index":2744,"title":{},"body":{"interfaces/Window.html":{}}}],["this.fixedoverlay",{"_index":2170,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.geomfolder",{"_index":926,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.geomfolder.__folders[name",{"_index":993,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.geomfolder.addfolder(name",{"_index":956,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.geomfolder.findintreeorcreate(menunodename",{"_index":1751,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.geomfolder.removefolder(folder",{"_index":994,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.getcameragroup().add(this.controller1",{"_index":2643,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controller2",{"_index":2646,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controllergrip1",{"_index":2652,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controllergrip2",{"_index":2657,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameratween(alongaxisposition",{"_index":215,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.getcameratween(startpos",{"_index":207,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.gethitspositions(obj.position",{"_index":324,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.getmainrenderer",{"_index":2150,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmainrenderer().setanimationloop(null",{"_index":2135,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmomentum(objectparams",{"_index":694,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.getoverlayrenderer",{"_index":2138,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().domelement.hidden",{"_index":2139,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().render(scene",{"_index":2143,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getstatemanager().seteventdisplay(this",{"_index":2705,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary",{"_index":2696,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.addgeometryfromparameters(parameters",{"_index":2814,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.addlabeltoobject(label",{"_index":2887,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animateclippingwithcollision(tweenduration",{"_index":2881,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animateeventwithcollision(tweenduration",{"_index":2880,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animatethroughevent",{"_index":2879,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.cleareventdata",{"_index":2736,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enablekeyboardcontrols",{"_index":2878,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enableselecting(enable",{"_index":2867,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.endvrsession",{"_index":2720,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportphoenixscene",{"_index":2784,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportscenetoobj",{"_index":2772,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.fixoverlayview(fixed",{"_index":2870,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.getactiveobjectid",{"_index":2871,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.highlightobject(uuid",{"_index":2875,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.init(configuration",{"_index":2703,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.initvrsession(onsessionended",{"_index":2717,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadgltfgeometry",{"_index":2793,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadjsongeometry",{"_index":2797,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadobjgeometry",{"_index":2765,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.lookatobject(uuid",{"_index":2874,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsegltfgeometry(input",{"_index":2789,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parseobjgeometry(content",{"_index":2769,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsephnxscene(phoenixscene.scene",{"_index":2782,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setanimationloop(uiloop",{"_index":2708,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setoverlayrenderer(overlaycanvas",{"_index":2857,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setselectedobjectdisplay(selectedobject",{"_index":2861,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.zoomto(zoomfactor",{"_index":2824,"title":{},"body":{"interfaces/Window.html":{}}}],["this.gui",{"_index":916,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.addfolder('event",{"_index":1000,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.addfolder(scenemanager.geometries_id",{"_index":931,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.addfolder(scenemanager.labels_id",{"_index":1045,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.domelement.id",{"_index":917,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.domelement.style.csstext",{"_index":918,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.removefolder(this.eventfolder",{"_index":999,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters.eventdata",{"_index":1001,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters.eventdata[typename",{"_index":1011,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters.geometries",{"_index":932,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters.labels",{"_index":1046,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters[collectionname",{"_index":1013,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters[labelid",{"_index":1059,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters[labelid]['removelabel",{"_index":1072,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters[name",{"_index":950,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.hideidswithurloption(hidewidgetsoptions",{"_index":2531,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.icon",{"_index":1627,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["this.ignorelist",{"_index":2304,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ignorelist.includes(intersectedobject.type",{"_index":2334,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.infologger",{"_index":2308,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["this.infologger.add('exported",{"_index":2773,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologger.add(log",{"_index":2360,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.infologger.add(name",{"_index":2764,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologgerlist",{"_index":1409,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.length",{"_index":1405,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.pop",{"_index":1407,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.unshift(label",{"_index":1408,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.init(configuration",{"_index":2700,"title":{},"body":{"interfaces/Window.html":{}}}],["this.initchargecoloroptions.bind(this",{"_index":575,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.initcolorbyoptions",{"_index":653,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.initmomcoloroptions.bind(this",{"_index":581,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.initrenderer(elementid",{"_index":2137,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.intersectobject(event",{"_index":2333,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.isfixedoverlay",{"_index":2142,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.isinit",{"_index":2303,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.labelsfolder",{"_index":928,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.__folders[labelid",{"_index":1076,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.labelsfolder.addchild(labelid",{"_index":1796,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.addconfig('button",{"_index":1793,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.addconfig('color",{"_index":1792,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.addconfig('slider",{"_index":1791,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.addfolder(labelid",{"_index":1062,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.labelsfolder.children.find",{"_index":1794,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.removefolder(labelitemfolder",{"_index":1077,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.labelsfolder?.children.find",{"_index":1801,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.loaded",{"_index":1554,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.length",{"_index":1537,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.push(id",{"_index":1533,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.sort().join",{"_index":1539,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loadevent(eventkeys[0",{"_index":2727,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadgltfgeometry(sceneurl",{"_index":2850,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager",{"_index":2695,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem('root_json_geom",{"_index":2799,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`gltf_geom_${name",{"_index":2792,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`json_geom_${name",{"_index":2796,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`obj_geom_${name",{"_index":2762,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_gltf_${name",{"_index":2787,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_obj_${name",{"_index":2768,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_phnx_${name",{"_index":2781,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded('root_json_geom",{"_index":2805,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadjsongeometry",{"_index":2801,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadobjgeometry(filename",{"_index":2852,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadsceneconfiguration(phoenixscene.sceneconfiguration",{"_index":2780,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadstatefromjson(json.parse(data",{"_index":2429,"title":{},"body":{"classes/StateManager.html":{}}}],["this.mainrenderer",{"_index":2157,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.maxentries",{"_index":1406,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.maxpositionx",{"_index":979,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.maxpositiony",{"_index":983,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.maxpositionz",{"_index":986,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.maxvalue",{"_index":834,"title":{},"body":{"classes/Cut.html":{}}}],["this.minvalue",{"_index":833,"title":{},"body":{"classes/Cut.html":{}}}],["this.momcolors.max.value",{"_index":684,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.momcolors.min.value",{"_index":683,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.momcolors[key].color",{"_index":691,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.momcolors[key].value",{"_index":685,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.momcolors[minormax].color",{"_index":693,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.moveindirection(direction",{"_index":2672,"title":{},"body":{"classes/VRManager.html":{}}}],["this.name",{"_index":1626,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["this.nodelevel",{"_index":1635,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.oncontrollerselectend",{"_index":2629,"title":{},"body":{"classes/VRManager.html":{}}}],["this.oncontrollerselectstart",{"_index":2627,"title":{},"body":{"classes/VRManager.html":{}}}],["this.ondisplayedeventchange.foreach((callback",{"_index":2738,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondisplayedeventchange.push(callback",{"_index":2840,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondocumentmousedown",{"_index":2321,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.oneventschange.foreach((callback",{"_index":2728,"title":{},"body":{"interfaces/Window.html":{}}}],["this.oneventschange.push(callback",{"_index":2842,"title":{},"body":{"interfaces/Window.html":{}}}],["this.onloadcallbacks",{"_index":1555,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onloadcallbacks.foreach((callback",{"_index":1540,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onloadcallbacks.push(callback",{"_index":1551,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onprogress(id",{"_index":1534,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onprogresscallbacks",{"_index":1549,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onprogresscallbacks.push(callback",{"_index":1552,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onsessionended",{"_index":2604,"title":{},"body":{"classes/VRManager.html":{}}}],["this.ontoggle",{"_index":1628,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontoggle?.(this.togglestate",{"_index":1682,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontoggle?.(value",{"_index":1650,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontouchdown",{"_index":2323,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ontouchmove",{"_index":2319,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ontouchmove(event.targettouches[0",{"_index":2364,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.onvrsessionended",{"_index":2621,"title":{},"body":{"classes/VRManager.html":{}}}],["this.onvrsessionstarted(session",{"_index":2616,"title":{},"body":{"classes/VRManager.html":{}}}],["this.outlinepass",{"_index":2310,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects",{"_index":2330,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects[0",{"_index":2335,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.overlayrenderer",{"_index":2160,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.parent",{"_index":1631,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.parent.removechild(this",{"_index":1640,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.phoenixmenu",{"_index":1739,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.phoenixmenu.addchild",{"_index":1741,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.phoenixmenu.truncate",{"_index":1740,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.phoenixmenuroot",{"_index":2425,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.configactive",{"_index":2440,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.getnodestate",{"_index":2430,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.loadstatefromjson(jsondata['phoenixmenu",{"_index":2439,"title":{},"body":{"classes/StateManager.html":{}}}],["this.preselectionantialias",{"_index":2324,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.progressitems",{"_index":1556,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.progressitems[id",{"_index":1532,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.removelabel(labelid",{"_index":1073,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.removelabelnode(labelid",{"_index":1800,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.removeobj(name",{"_index":954,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.render",{"_index":1140,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.renderer",{"_index":2603,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr",{"_index":2633,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontroller(0",{"_index":2642,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontroller(1",{"_index":2645,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontrollergrip(0",{"_index":2649,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontrollergrip(1",{"_index":2654,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.setsession(session",{"_index":2622,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderermanager.getmainrenderer().localclippingenabled",{"_index":373,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.renderers",{"_index":2161,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.indexof(renderer",{"_index":2164,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.length",{"_index":2168,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.push(renderer",{"_index":2163,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.splice(index",{"_index":2165,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers[0].localclippingenabled",{"_index":2169,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.reset",{"_index":1541,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.saveeventdataconfiguration(eventdata",{"_index":1264,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savegeometriesconfiguration(geometries",{"_index":1266,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savesceneconfig(eventdata",{"_index":1251,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savestateasjson",{"_index":2427,"title":{},"body":{"classes/StateManager.html":{}}}],["this.scene",{"_index":1135,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["this.scene.add(...particles",{"_index":390,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.scene.getobjectbyname(scenemanager.event_data_id",{"_index":236,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.scene.remove(...particles",{"_index":398,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.scenemanager",{"_index":530,"title":{},"body":{"classes/ColorManager.html":{}}}],["this.scenemanager.getscene().getobjectbyname(objectsgroup",{"_index":525,"title":{},"body":{"classes/ColorManager.html":{}}}],["this.selectedcolorbyoption",{"_index":656,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.selectedobject",{"_index":2312,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.length",{"_index":2339,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.push",{"_index":2345,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.splice",{"_index":2338,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.name",{"_index":2336,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.setclippingenabled(true",{"_index":2445,"title":{},"body":{"classes/StateManager.html":{}}}],["this.setmainrenderer(renderer",{"_index":2133,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.setupvrcontrols",{"_index":2618,"title":{},"body":{"classes/VRManager.html":{}}}],["this.shouldcolorbycharge(objectuserdata",{"_index":670,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.statemanager",{"_index":2749,"title":{},"body":{"interfaces/Window.html":{}}}],["this.three",{"_index":941,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.eventdatadepthtest(value",{"_index":1009,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getcolormanager",{"_index":1790,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.three.getcolormanager().collectioncolor(collectionname",{"_index":1024,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.three.getobjectposition(name",{"_index":978,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.three.getscenemanager().changeobjectcolor(labelid",{"_index":1071,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().changeobjectcolor(name",{"_index":962,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().collectionfilter(collectionname",{"_index":1036,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().getobjectposition(name).setx(value",{"_index":982,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.three.getscenemanager().getobjectposition(name).sety(value",{"_index":985,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.three.getscenemanager().getobjectposition(name).setz(value",{"_index":988,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.three.getscenemanager().objectvisibility(labelid",{"_index":1797,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().objectvisibility(name",{"_index":971,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().objectvisibility(typename",{"_index":1012,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().removegeometry(name",{"_index":995,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().scaleobject(name",{"_index":976,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.three.getscenemanager().setgeometryopacity(collectionname",{"_index":1772,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().setgeometryopacity(name",{"_index":967,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().wireframegeometries(value",{"_index":949,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getscenemanager().wireframeobjects(collectionname",{"_index":1774,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.togglestate",{"_index":1651,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.toload",{"_index":1553,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.length",{"_index":1536,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.push(id",{"_index":1531,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.sort().join",{"_index":1538,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.ui",{"_index":2698,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addcollection",{"_index":2832,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatafolder",{"_index":2733,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatatypefolder",{"_index":2830,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addgeometry(geom",{"_index":2835,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addgeometry(name",{"_index":2763,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addlabel(labelid",{"_index":2886,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addlabelsfolder",{"_index":2734,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.enablekeyboardcontrols",{"_index":2877,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.init(configuration",{"_index":2704,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.loadeventfolderpmstate",{"_index":2741,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.removelabel(labelid",{"_index":2885,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.updateui",{"_index":2707,"title":{},"body":{"interfaces/Window.html":{}}}],["this.urloptions",{"_index":2488,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('config",{"_index":2501,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('embed",{"_index":2532,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('file",{"_index":2497,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('type",{"_index":2498,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('type').tolowercase",{"_index":2499,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get(urloption",{"_index":2538,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.value",{"_index":58,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["this.vractive",{"_index":2619,"title":{},"body":{"classes/VRManager.html":{}}}],["this.vrcamera",{"_index":2632,"title":{},"body":{"classes/VRManager.html":{}}}],["this.vrcamera.name",{"_index":2636,"title":{},"body":{"classes/VRManager.html":{}}}],["this.vrcamera.position.addscaledvector(direction",{"_index":2681,"title":{},"body":{"classes/VRManager.html":{}}}],["this.vrcamera?.getworlddirection(direction",{"_index":2679,"title":{},"body":{"classes/VRManager.html":{}}}],["thr",{"_index":2812,"title":{},"body":{"interfaces/Window.html":{}}}],["three",{"_index":191,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"dependencies.html":{}}}],["three,js",{"_index":2108,"title":{},"body":{"classes/RendererManager.html":{}}}],["three.extra.min.js",{"_index":2212,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["three.js",{"_index":75,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["three.object3d",{"_index":537,"title":{},"body":{"classes/ColorManager.html":{}}}],["three/examples/jsm/exporters/gltfexporter",{"_index":1241,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/exporters/objexporter",{"_index":1239,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/postprocessing/effectcomposer",{"_index":1126,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/outlinepass",{"_index":1130,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/outlinepass.js",{"_index":2300,"title":{},"body":{"classes/SelectionManager.html":{}}}],["three/examples/jsm/postprocessing/pass",{"_index":1131,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/renderpass",{"_index":1129,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/webxr/xrcontrollermodelfactory",{"_index":2595,"title":{},"body":{"classes/VRManager.html":{}}}],["threejs",{"_index":767,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["threemanager",{"_index":859,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["threemanager(this.infologger",{"_index":2697,"title":{},"body":{"interfaces/Window.html":{}}}],["threeservice",{"_index":1429,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["through",{"_index":133,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["time",{"_index":1200,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["toggle",{"_index":934,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["toggles",{"_index":883,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["toggleselfanddescendants",{"_index":1575,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggleselfanddescendants(value",{"_index":1617,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["togglestate",{"_index":1566,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggling",{"_index":1579,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["tojson",{"_index":2804,"title":{},"body":{"interfaces/Window.html":{}}}],["toload",{"_index":1500,"title":{},"body":{"classes/LoadingManager.html":{}}}],["top",{"_index":459,"title":{},"body":{"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{}}}],["totalitems",{"_index":1546,"title":{},"body":{"classes/LoadingManager.html":{}}}],["totalprogress",{"_index":1542,"title":{},"body":{"classes/LoadingManager.html":{}}}],["touch",{"_index":2270,"title":{},"body":{"classes/SelectionManager.html":{}}}],["touchevent",{"_index":2362,"title":{},"body":{"classes/SelectionManager.html":{}}}],["towards",{"_index":2587,"title":{},"body":{"classes/VRManager.html":{}}}],["track",{"_index":252,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["track.children[0",{"_index":403,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["track.dparams",{"_index":2038,"title":{},"body":{"classes/RKHelper.html":{}}}],["track.pos",{"_index":2036,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackcolor",{"_index":402,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tracking",{"_index":2612,"title":{},"body":{"classes/VRManager.html":{}}}],["trackmlloader",{"_index":3222,"title":{},"body":{"coverage.html":{}}}],["trackparams",{"_index":1836,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["trackparams.pos",{"_index":1856,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["tracks",{"_index":247,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ColorManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/RKHelper.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["trackscollection",{"_index":2033,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollections",{"_index":2032,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollections[trackscollection",{"_index":2035,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollectionsevent",{"_index":2031,"title":{},"body":{"classes/RKHelper.html":{}}}],["transformations",{"_index":2988,"title":{},"body":{"changelog.html":{}}}],["transforming/changing",{"_index":1958,"title":{},"body":{"classes/PresetView.html":{}}}],["translation",{"_index":137,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{}}}],["transparent",{"_index":382,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["traverse",{"_index":242,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["traversed",{"_index":2285,"title":{},"body":{"classes/SelectionManager.html":{}}}],["tree",{"_index":1606,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["true",{"_index":335,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["truncate",{"_index":1576,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["try",{"_index":1314,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["tryrungekuttastep",{"_index":1316,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tryrungekuttastep(state.stepsize",{"_index":1348,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tube",{"_index":3103,"title":{},"body":{"changelog.html":{}}}],["tubebuffergeometry",{"_index":180,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["tween",{"_index":113,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["tween.easing(easing",{"_index":204,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.easing(tween.easing.quartic.out).start",{"_index":345,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.easing.cubic.out",{"_index":208,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.js",{"_index":76,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.start",{"_index":367,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween",{"_index":269,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(animationclipplane).to",{"_index":365,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(animationsphere).to",{"_index":315,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(particle.material",{"_index":392,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(particle.position",{"_index":395,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(this.activecamera.position).to",{"_index":198,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tweenduration",{"_index":111,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["tweenjs/tween.js",{"_index":192,"title":{},"body":{"classes/AnimationsManager.html":{},"dependencies.html":{}}}],["tweens",{"_index":344,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["two",{"_index":153,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{}}}],["type",{"_index":35,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":3283,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typefolder",{"_index":879,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["typefolder.addchild",{"_index":1768,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["typefolder.addfolder(collectionname",{"_index":1019,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["typefolder.name",{"_index":1788,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["typefolderpm",{"_index":2829,"title":{},"body":{"interfaces/Window.html":{}}}],["typename",{"_index":888,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{}}}],["typeof",{"_index":1678,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["types",{"_index":1656,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typing",{"_index":3064,"title":{},"body":{"changelog.html":{}}}],["ui",{"_index":840,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["ui.ts",{"_index":838,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"coverage.html":{}}}],["ui.ts:112",{"_index":1730,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:12",{"_index":866,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:14",{"_index":869,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["ui.ts:159",{"_index":1727,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:16",{"_index":1724,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:174",{"_index":911,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:18",{"_index":1722,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:187",{"_index":882,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:188",{"_index":1728,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:20",{"_index":1723,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:201",{"_index":1726,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:22",{"_index":1725,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:220",{"_index":887,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:23",{"_index":864,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:24",{"_index":1721,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:241",{"_index":877,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:25",{"_index":863,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:27",{"_index":870,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:295",{"_index":1733,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:30",{"_index":872,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:304",{"_index":902,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:32",{"_index":874,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:34",{"_index":860,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:345",{"_index":1732,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:356",{"_index":898,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:377",{"_index":1738,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:390",{"_index":1735,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:393",{"_index":909,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:45",{"_index":1734,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:56",{"_index":905,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:58",{"_index":1731,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:67",{"_index":896,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:98",{"_index":892,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["uiloop",{"_index":2706,"title":{},"body":{"interfaces/Window.html":{}}}],["uimanager",{"_index":1173,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["uimanager(this.graphicslibrary",{"_index":2699,"title":{},"body":{"interfaces/Window.html":{}}}],["uimenu",{"_index":2527,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["uiservice",{"_index":1436,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["undefined",{"_index":645,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["undefined/null",{"_index":1643,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["unique",{"_index":900,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuUI.html":{}}}],["uniquely",{"_index":1449,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["unit",{"_index":2394,"title":{},"body":{"classes/State.html":{},"classes/VRManager.html":{}}}],["unitc",{"_index":2384,"title":{},"body":{"classes/State.html":{}}}],["units",{"_index":1295,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["unreal",{"_index":1083,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["until",{"_index":1375,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["up",{"_index":418,"title":{},"body":{"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["update",{"_index":24,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["update(updatedvalue",{"_index":51,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["updateanimationsphere",{"_index":318,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["updateanimationsphere.containspoint",{"_index":327,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["updateanimationsphere.containspoint(obj.position",{"_index":333,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["updated",{"_index":48,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/VRManager.html":{}}}],["updatedcolorbyoption",{"_index":661,"title":{},"body":{"classes/ColorOptions.html":{}}}],["updatedvalue",{"_index":53,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["updating",{"_index":46,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{}}}],["upgrade",{"_index":3025,"title":{},"body":{"changelog.html":{}}}],["url",{"_index":714,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["url.createobjecturl(blob",{"_index":3325,"title":{},"body":{"miscellaneous/variables.html":{}}}],["url.indexof('.root",{"_index":2809,"title":{},"body":{"interfaces/Window.html":{}}}],["urloptions",{"_index":2455,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["urloptionsmanager",{"_index":2453,"title":{"classes/URLOptionsManager.html":{}},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["urloptionsmanager(this",{"_index":2710,"title":{},"body":{"interfaces/Window.html":{}}}],["urloptionsmanager.applyoptions",{"_index":2711,"title":{},"body":{"interfaces/Window.html":{}}}],["urloptionwithids",{"_index":2479,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["urlsearchparams",{"_index":2462,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["usage",{"_index":3055,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["use",{"_index":399,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ScriptLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":1099,"title":{},"body":{"classes/EffectsManager.html":{},"classes/InfoLogger.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["user",{"_index":3317,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata",{"_index":676,"title":{},"body":{"classes/ColorOptions.html":{},"changelog.html":{}}}],["uses",{"_index":787,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"index.html":{}}}],["using",{"_index":74,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["uuid",{"_index":1891,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["v1",{"_index":797,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["v2",{"_index":798,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{}}}],["val",{"_index":1545,"title":{},"body":{"classes/LoadingManager.html":{},"classes/SelectionManager.html":{}}}],["val.pos.x",{"_index":2058,"title":{},"body":{"classes/RKHelper.html":{}}}],["val.pos.y",{"_index":2059,"title":{},"body":{"classes/RKHelper.html":{}}}],["val.pos.z",{"_index":2060,"title":{},"body":{"classes/RKHelper.html":{}}}],["value",{"_index":12,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":515,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["values?.highvalue",{"_index":1786,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["values?.value",{"_index":1785,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["variable",{"_index":10,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["variable.ts",{"_index":7,"title":{},"body":{"classes/ActiveVariable.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["variable.ts:12",{"_index":42,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:17",{"_index":40,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:23",{"_index":52,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:32",{"_index":44,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:7",{"_index":29,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variables",{"_index":3287,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["varilable",{"_index":2194,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["vector",{"_index":790,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/VRManager.html":{}}}],["vector.applyquaternion(coordinatehelper.atlasquaternion",{"_index":792,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["vector.setfromsphericalcoords(radius",{"_index":791,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["vector2",{"_index":1127,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["vector2(window.innerwidth",{"_index":1148,"title":{},"body":{"classes/EffectsManager.html":{}}}],["vector3",{"_index":182,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CoordinateHelper.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["vector3().fromarray(hitposition",{"_index":328,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["vector3(0",{"_index":297,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CoordinateHelper.html":{},"classes/PhoenixObjects.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["vector3(metparams.etx",{"_index":1941,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vector3(x",{"_index":1877,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["version",{"_index":2189,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{}}}],["vertex",{"_index":360,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["vertexparams",{"_index":1839,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.color",{"_index":1929,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.uuid",{"_index":1938,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.x",{"_index":1932,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.y",{"_index":1934,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertices",{"_index":358,"title":{},"body":{"classes/AnimationsManager.html":{},"miscellaneous/variables.html":{}}}],["view",{"_index":718,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["view.model",{"_index":733,"title":{},"body":{"interfaces/Configuration.html":{}}}],["view.model.ts",{"_index":1956,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{}}}],["view.model.ts:10",{"_index":1967,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:14",{"_index":1963,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:32",{"_index":1968,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:6",{"_index":1966,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:8",{"_index":1965,"title":{},"body":{"classes/PresetView.html":{}}}],["views",{"_index":731,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["visibilitytoggle",{"_index":1063,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["visibilitytoggle.onchange((value",{"_index":1065,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["visible",{"_index":308,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["void",{"_index":50,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["vr",{"_index":2543,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["vr_camera",{"_index":2637,"title":{},"body":{"classes/VRManager.html":{}}}],["vractive",{"_index":2556,"title":{},"body":{"classes/VRManager.html":{}}}],["vrcamera",{"_index":2557,"title":{},"body":{"classes/VRManager.html":{}}}],["vrmanager",{"_index":2541,"title":{"classes/VRManager.html":{}},"body":{"classes/VRManager.html":{},"coverage.html":{}}}],["vrmanager.session_type",{"_index":2614,"title":{},"body":{"classes/VRManager.html":{}}}],["wait",{"_index":2238,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["want",{"_index":2377,"title":{},"body":{"classes/SelectionManager.html":{}}}],["webglrenderer",{"_index":1095,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["webglrenderers",{"_index":2100,"title":{},"body":{"classes/RendererManager.html":{}}}],["webpack",{"_index":3077,"title":{},"body":{"changelog.html":{}}}],["webxr",{"_index":2599,"title":{},"body":{"classes/VRManager.html":{}}}],["webxr.requestsession",{"_index":2613,"title":{},"body":{"classes/VRManager.html":{}}}],["whether",{"_index":629,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["whose",{"_index":11,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/PhoenixMenuNode.html":{}}}],["widgets",{"_index":2465,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["width",{"_index":1868,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["window",{"_index":2496,"title":{"interfaces/Window.html":{}},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["window.addeventlistener('resize",{"_index":2155,"title":{},"body":{"classes/RendererManager.html":{}}}],["window.eventdisplay",{"_index":2848,"title":{},"body":{"interfaces/Window.html":{}}}],["window.innerheight",{"_index":1149,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["window.innerwidth",{"_index":2147,"title":{},"body":{"classes/RendererManager.html":{}}}],["window.location.href",{"_index":2487,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["wipe",{"_index":2051,"title":{},"body":{"classes/RKHelper.html":{}}}],["wireframe",{"_index":933,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["wireframegeometriesmenu",{"_index":946,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["wireframegeometriesmenu.onchange((value",{"_index":948,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["wireframing",{"_index":945,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"changelog.html":{}}}],["without",{"_index":248,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"changelog.html":{},"index.html":{}}}],["work",{"_index":2601,"title":{},"body":{"classes/VRManager.html":{}}}],["workaround",{"_index":260,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["working",{"_index":3092,"title":{},"body":{"changelog.html":{}}}],["works",{"_index":2584,"title":{},"body":{"classes/VRManager.html":{}}}],["wrapper",{"_index":721,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{}}}],["wrong",{"_index":2965,"title":{},"body":{"changelog.html":{}}}],["x",{"_index":199,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixObjects.html":{}}}],["x,y,z",{"_index":719,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixObjects.html":{}}}],["xrcontrollermodelfactory",{"_index":2594,"title":{},"body":{"classes/VRManager.html":{}}}],["y",{"_index":201,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixObjects.html":{}}}],["yarn",{"_index":3259,"title":{},"body":{"index.html":{}}}],["yes",{"_index":36,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/AnimationsManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{}}}],["z",{"_index":159,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixObjects.html":{}}}],["z0",{"_index":2043,"title":{},"body":{"classes/RKHelper.html":{}}}],["zero",{"_index":3160,"title":{},"body":{"changelog.html":{}}}],["zoom",{"_index":2815,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["zoomfactor",{"_index":2820,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomtime",{"_index":2821,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomto(zoomfactor",{"_index":2823,"title":{},"body":{"interfaces/Window.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ActiveVariable.html":{"url":"classes/ActiveVariable.html","title":"class - ActiveVariable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ActiveVariable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/active-variable.ts\n        \n\n            \n                Description\n            \n            \n                An active variable whose value can be changed and the change can be observed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                callbacks\n                            \n                            \n                                    Public\n                                    Optional\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                onUpdate\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value?: T)\n                    \n                \n                        \n                            \n                                Defined in src/helpers/active-variable.ts:7\n                            \n                        \n\n                \n                    \n                            Create the observable active variable.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Initial value.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            callbacks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CallbackFunction[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/active-variable.ts:17\n                            \n                        \n\n                \n                    \n                        Callbacks to call on update.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/active-variable.ts:12\n                            \n                        \n\n                \n                    \n                        Initial value.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            onUpdate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onUpdate(callback: CallbackFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/active-variable.ts:32\n                \n            \n\n\n            \n                \n                    Call a function on updating the value of variable.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                CallbackFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call with updated value when the variable is updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(updatedValue: T)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/active-variable.ts:23\n                \n            \n\n\n            \n                \n                    Update the value of variable.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    updatedValue\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        New updated value.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export type CallbackFunction = (updatedValue: T) => void;\n\n/**\n * An active variable whose value can be changed and the change can be observed.\n */\nexport class ActiveVariable {\n  /**\n   * Create the observable active variable.\n   * @param value Initial value.\n   */\n  constructor(public value?: T) {}\n\n  /**\n   * Callbacks to call on update.\n   */\n  private callbacks: CallbackFunction[] = [];\n\n  /**\n   * Update the value of variable.\n   * @param updatedValue New updated value.\n   */\n  public update(updatedValue: T) {\n    this.value = updatedValue;\n    this.callbacks.forEach((callback) => callback(updatedValue));\n  }\n\n  /**\n   * Call a function on updating the value of variable.\n   * @param callback Callback to call with updated value when the variable is updated.\n   */\n  public onUpdate(callback: CallbackFunction) {\n    this.callbacks.push(callback);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AnimationsManager.html":{"url":"classes/AnimationsManager.html","title":"class - AnimationsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnimationsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/animations-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing animation related operations using three.js and tween.js.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                animateClippingWithCollision\n                            \n                            \n                                    Public\n                                animateEvent\n                            \n                            \n                                    Public\n                                animateEventWithClipping\n                            \n                            \n                                    Public\n                                animateEventWithCollision\n                            \n                            \n                                    Public\n                                animateThroughEvent\n                            \n                            \n                                    Public\n                                animateWithCollision\n                            \n                            \n                                    Public\n                                collideParticles\n                            \n                            \n                                    Public\n                                getCameraTween\n                            \n                            \n                                    Private\n                                getHitsPositions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scene: Scene, activeCamera: Camera, rendererManager: RendererManager)\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/animations-manager.ts:24\n                            \n                        \n\n                \n                    \n                            Constructor for the animation manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scene\n                                                  \n                                                        \n                                                                    Scene\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Three.js scene containing all the objects and event data.\n\n                                                        \n                                                \n                                                \n                                                        activeCamera\n                                                  \n                                                        \n                                                                    Camera\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Currently active camera.\n\n                                                        \n                                                \n                                                \n                                                        rendererManager\n                                                  \n                                                        \n                                                                        RendererManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Manager for managing event display's renderer related functions.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateClippingWithCollision\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateClippingWithCollision(tweenDuration: number, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/animations-manager.ts:499\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data\nusing clipping planes after particle collison.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateEvent(tweenDuration: number, onEnd?: () => void, onAnimationStart?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/animations-manager.ts:141\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback when all animations have ended.\n\n                                    \n                                \n                                \n                                    onAnimationStart\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback when the first animation starts.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateEventWithClipping\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateEventWithClipping(tweenDuration: number, onEnd?: () => void, onAnimationStart?: () => void, clippingConstant: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/animations-manager.ts:314\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data using clipping planes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                                \n                                    onAnimationStart\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Callback when the first animation starts.\n\n                                    \n                                \n                                \n                                    clippingConstant\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        11000\n                                    \n\n                                    \n                                        Constant for the clipping planes for distance from the origin.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateEventWithCollision\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateEventWithCollision(tweenDuration: number, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/animations-manager.ts:489\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data with particle collison.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateThroughEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateThroughEvent(startPos: number[], tweenDuration: number, onAnimationEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/animations-manager.ts:70\n                \n            \n\n\n            \n                \n                    Animate the camera through the event scene.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    startPos\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Start position of the translation animation.\n\n                                    \n                                \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of each tween in the translation animation.\n\n                                    \n                                \n                                \n                                    onAnimationEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback when the last animation ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateWithCollision\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateWithCollision(animationFunction: (tweenDuration: number,onEnd: function,onAnimationStart: function) => void, tweenDuration: number, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/animations-manager.ts:450\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data with particle collison.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    animationFunction\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Animation function to call after collision.\n\n                                    \n                                \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            collideParticles\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    collideParticles(tweenDuration: number, particleSize: number, distanceFromOrigin: number, particleColor: Color, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/animations-manager.ts:390\n                \n            \n\n\n            \n                \n                    Animate the collision of two particles.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Duration of the particle collision animation tween.\n\n                                    \n                                \n                                \n                                    particleSize\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        10\n                                    \n\n                                    \n                                        Size of the particles.\n\n                                    \n                                \n                                \n                                    distanceFromOrigin\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        5000\n                                    \n\n                                    \n                                        Distance of the particles (along z-axes) from the origin.\n\n                                    \n                                \n                                \n                                    particleColor\n                                    \n                                            Color\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        new Color(0xffffff)\n                                    \n\n                                    \n                                        Color of the particles.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Callback to call when the particle collision ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCameraTween\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraTween(pos: number[], duration: number, easing?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/animations-manager.ts:47\n                \n            \n\n\n            \n                \n                    Get the camera tween for animating camera to a position.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    pos\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        End position of the camera tween.\n\n                                    \n                                \n                                \n                                    duration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1000\n                                    \n\n                                    \n                                        Duration of the tween.\n\n                                    \n                                \n                                \n                                    easing\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Animation easing of the tween if any.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Tween object of the camera animation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getHitsPositions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHitsPositions(positions: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/animations-manager.ts:516\n                \n            \n\n\n            \n                \n                    Get the positions of hits in a multidimensional array\nfrom a single dimensional array.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    positions\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Positions of hits in a single dimensional array.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     [][]\n\n                    \n                    \n                        Positions of hits in a multidimensional array.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { SceneManager } from './scene-manager';\nimport {\n  TubeBufferGeometry,\n  BufferGeometry,\n  Vector3,\n  Color,\n  MeshBasicMaterial,\n  Mesh,\n  SphereBufferGeometry,\n  Sphere,\n  Object3D,\n  BufferAttribute,\n  Scene,\n  Camera,\n  Plane,\n  Group,\n} from 'three';\nimport * as TWEEN from '@tweenjs/tween.js';\nimport { RendererManager } from './renderer-manager';\n\n/**\n * Manager for managing animation related operations using three.js and tween.js.\n */\nexport class AnimationsManager {\n  /**\n   * Constructor for the animation manager.\n   * @param scene Three.js scene containing all the objects and event data.\n   * @param activeCamera Currently active camera.\n   * @param rendererManager Manager for managing event display's renderer related functions.\n   */\n  constructor(\n    private scene: Scene,\n    private activeCamera: Camera,\n    private rendererManager: RendererManager\n  ) {\n    this.animateEvent = this.animateEvent.bind(this);\n    this.animateEventWithClipping = this.animateEventWithClipping.bind(this);\n  }\n\n  /**\n   * Get the camera tween for animating camera to a position.\n   * @param pos End position of the camera tween.\n   * @param duration Duration of the tween.\n   * @param easing Animation easing of the tween if any.\n   * @returns Tween object of the camera animation.\n   */\n  public getCameraTween(\n    pos: number[],\n    duration: number = 1000,\n    easing?: any\n  ): any {\n    const tween = new TWEEN.Tween(this.activeCamera.position).to(\n      { x: pos[0], y: pos[1], z: pos[2] },\n      duration\n    );\n\n    if (easing) {\n      tween.easing(easing);\n    }\n\n    return tween;\n  }\n\n  /**\n   * Animate the camera through the event scene.\n   * @param startPos Start position of the translation animation.\n   * @param tweenDuration Duration of each tween in the translation animation.\n   * @param onAnimationEnd Callback when the last animation ends.\n   */\n  public animateThroughEvent(\n    startPos: number[],\n    tweenDuration: number,\n    onAnimationEnd?: () => void\n  ) {\n    // Move to start\n    const start = this.getCameraTween(startPos, 1000, TWEEN.Easing.Cubic.Out);\n    // Move to position along the detector axis\n    const alongAxisPosition = [0, 0, startPos[2]];\n    const startXAxis = this.getCameraTween(alongAxisPosition, tweenDuration);\n\n    const radius = 500;\n    const numOfSteps = 24;\n    const angle = 3 * Math.PI;\n    const step = angle / numOfSteps;\n\n    let rotationPositions = [];\n    for (let i = 1; i  onAnimationEnd?.());\n    startClone.delay(500);\n\n    start.chain(startXAxis);\n    startXAxis.chain(rotateStart);\n    rotate.chain(end);\n    end.chain(startClone);\n\n    start.start();\n  }\n\n  /**\n   * Animate the propagation and generation of event data.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Callback when all animations have ended.\n   * @param onAnimationStart Callback when the first animation starts.\n   */\n  public animateEvent(\n    tweenDuration: number,\n    onEnd?: () => void,\n    onAnimationStart?: () => void\n  ) {\n    const extraAnimationSphereDuration = tweenDuration * 0.25;\n    tweenDuration *= 0.75;\n\n    const eventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    const animationSphere = new Sphere(new Vector3(), 0);\n    const objectsToAnimateWithSphere: {\n      eventObject: Object3D;\n      position: any;\n    }[] = [];\n\n    const allTweens = [];\n    // Traverse over all event data\n    eventData.traverse((eventObject: any) => {\n      if (eventObject.geometry) {\n        // Animation for extrapolating tracks without changing scale\n        if (eventObject.name === 'Track') {\n          // Check if geometry drawRange count exists\n          let geometryPosCount =\n            eventObject.geometry?.attributes?.position?.count;\n          if (geometryPosCount) {\n            // WORKAROUND\n            // Changing position count for TubeBufferGeometry because\n            // what we get is not the actual and it has Infinity drawRange count\n            if (eventObject.geometry instanceof TubeBufferGeometry) {\n              geometryPosCount *= 6;\n            }\n            if (eventObject.geometry instanceof BufferGeometry) {\n              const oldDrawRangeCount = eventObject.geometry.drawRange.count;\n              eventObject.geometry.setDrawRange(0, 0);\n              const eventObjectTween = new TWEEN.Tween(\n                eventObject.geometry.drawRange\n              ).to(\n                {\n                  count: geometryPosCount,\n                },\n                tweenDuration\n              );\n              eventObjectTween.onComplete(() => {\n                eventObject.geometry.drawRange.count = oldDrawRangeCount;\n              });\n              allTweens.push(eventObjectTween);\n            }\n          }\n        }\n        // Animation for scaling out objects with or without position\n        else if (eventObject.name === 'Jet') {\n          const scaleTween = new TWEEN.Tween({\n            x: 0.01,\n            y: 0.01,\n            z: 0.01,\n          }).to(\n            {\n              x: eventObject.scale.x,\n              y: eventObject.scale.y,\n              z: eventObject.scale.z,\n            },\n            tweenDuration\n          );\n          // Manually updating scale since we need to change position\n          scaleTween.onUpdate((updatedScale: Vector3) => {\n            const previousScale = eventObject.scale.x;\n            eventObject.scale.setScalar(updatedScale.x);\n            // Restoring to original position and then moving again with the current value\n            eventObject.position\n              .divideScalar(previousScale)\n              .multiplyScalar(updatedScale.x);\n          });\n          allTweens.push(scaleTween);\n        } else {\n          const hasPosition = !eventObject.position.equals(\n            new Vector3(0, 0, 0)\n          );\n          let position = hasPosition\n            ? eventObject.position\n            : eventObject.geometry.boundingSphere.center;\n\n          // Edit geometry for hits\n          if (eventObject.name === 'Hit') {\n            position = Array.from(\n              eventObject.geometry.attributes['position'].array\n            );\n            eventObject.geometry.deleteAttribute('position');\n            eventObject.geometry.computeBoundingSphere();\n          } else {\n            // Making the object invisible and will make visible\n            // once the animation sphere reaches the object\n            eventObject.visible = false;\n          }\n\n          objectsToAnimateWithSphere.push({\n            eventObject: eventObject,\n            position: position,\n          });\n        }\n      }\n    });\n\n    // Tween for the animation sphere\n    const animationSphereTween = new TWEEN.Tween(animationSphere).to(\n      { radius: 3000 },\n      tweenDuration\n    );\n\n    const onAnimationSphereUpdate = (updateAnimationSphere: Sphere) => {\n      objectsToAnimateWithSphere.forEach((obj) => {\n        if (obj.eventObject.name === 'Hit') {\n          const geometry = (obj.eventObject as any).geometry;\n\n          const hitsPositions = this.getHitsPositions(obj.position);\n          const reachedHits = hitsPositions.filter((hitPosition) =>\n            updateAnimationSphere.containsPoint(\n              new Vector3().fromArray(hitPosition)\n            )\n          );\n\n          if (reachedHits.length > 0) {\n            geometry.setAttribute(\n              'position',\n              new BufferAttribute(\n                new Float32Array([].concat(...reachedHits)),\n                3\n              )\n            );\n            geometry.computeBoundingSphere();\n          }\n        } else if (updateAnimationSphere.containsPoint(obj.position)) {\n          obj.eventObject.visible = true;\n        }\n      });\n    };\n\n    animationSphereTween.onUpdate(onAnimationSphereUpdate);\n\n    // Animation sphere tween after covering the tracks\n    const animationSphereTweenClone = new TWEEN.Tween(animationSphere).to(\n      { radius: 10000 },\n      extraAnimationSphereDuration\n    );\n    animationSphereTweenClone.onUpdate(onAnimationSphereUpdate);\n\n    animationSphereTween.chain(animationSphereTweenClone);\n\n    allTweens.push(animationSphereTween);\n\n    // Call onAnimationStart when the first tween starts\n    allTweens[0].onStart(() => onAnimationStart?.());\n\n    // Start all tweens\n    for (const tween of allTweens) {\n      tween.easing(TWEEN.Easing.Quartic.Out).start();\n    }\n\n    // Call onEnd when the last tween completes\n    animationSphereTweenClone.onComplete(() => {\n      // Restore all remaining event data items\n      onAnimationSphereUpdate(new Sphere(new Vector3(), Infinity));\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data using clipping planes.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   * @param onAnimationStart Callback when the first animation starts.\n   * @param clippingConstant Constant for the clipping planes for distance from the origin.\n   */\n  public animateEventWithClipping(\n    tweenDuration: number,\n    onEnd?: () => void,\n    onAnimationStart?: () => void,\n    clippingConstant: number = 11000\n  ) {\n    const allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    // Sphere to get spherical set of clipping planes from\n    const sphere = new SphereBufferGeometry(1, 8, 8);\n    // Clipping planes for animation\n    const animationClipPlanes: Plane[] = [];\n\n    // Get clipping planes from the vertices of sphere\n    const position = sphere.attributes.position;\n    const vertex = new Vector3();\n    for (let i = 0; i  {\n      if (eventObject.geometry && eventObject.material) {\n        eventObject.material.clippingPlanes = animationClipPlanes;\n      }\n    });\n\n    const allTweens = [];\n    // Create tweens for the animation clipping planes\n    for (const animationClipPlane of animationClipPlanes) {\n      animationClipPlane.constant = 0;\n      const tween = new TWEEN.Tween(animationClipPlane).to(\n        { constant: clippingConstant },\n        tweenDuration\n      );\n      allTweens.push(tween);\n    }\n\n    allTweens[0].onStart(() => onAnimationStart?.());\n\n    // Start all the tweens\n    for (const tween of allTweens) {\n      tween.start();\n    }\n\n    allTweens[allTweens.length - 1].onComplete(() => {\n      // Revert local clipping of the renderer\n      if (!prevLocalClipping) {\n        this.rendererManager.getMainRenderer().localClippingEnabled = prevLocalClipping /* false */;\n      }\n      // Remove the applied clipping planes from the event data objects\n      allEventData.traverse((eventObject: any) => {\n        if (eventObject.geometry && eventObject.material) {\n          eventObject.material.clippingPlanes = null;\n        }\n      });\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the collision of two particles.\n   * @param tweenDuration Duration of the particle collision animation tween.\n   * @param particleSize Size of the particles.\n   * @param distanceFromOrigin Distance of the particles (along z-axes) from the origin.\n   * @param particleColor Color of the particles.\n   * @param onEnd Callback to call when the particle collision ends.\n   */\n  public collideParticles(\n    tweenDuration: number,\n    particleSize: number = 10,\n    distanceFromOrigin: number = 5000,\n    particleColor: Color = new Color(0xffffff),\n    onEnd?: () => void\n  ) {\n    const particleGeometry = new SphereBufferGeometry(particleSize, 32, 32);\n    const particleMaterial = new MeshBasicMaterial({\n      color: particleColor,\n      transparent: true,\n      opacity: 0,\n    });\n\n    const particle1 = new Mesh(particleGeometry, particleMaterial);\n    const particle2 = particle1.clone() as Mesh;\n\n    particle1.position.setZ(distanceFromOrigin);\n    particle2.position.setZ(-distanceFromOrigin);\n\n    const particles = [particle1, particle2];\n\n    this.scene.add(...particles);\n\n    const particleTweens = [];\n\n    for (const particle of particles) {\n      new TWEEN.Tween(particle.material)\n        .to(\n          {\n            opacity: 1,\n          },\n          300\n        )\n        .start();\n\n      const particleToOrigin = new TWEEN.Tween(particle.position)\n        .to(\n          {\n            z: 0,\n          },\n          tweenDuration\n        )\n        .start();\n\n      particleTweens.push(particleToOrigin);\n    }\n\n    particleTweens[0].onComplete(() => {\n      this.scene.remove(...particles);\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param animationFunction Animation function to call after collision.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateWithCollision(\n    animationFunction: (\n      tweenDuration: number,\n      onEnd?: () => void,\n      onAnimationStart?: () => void\n    ) => void,\n    tweenDuration: number,\n    onEnd?: () => void\n  ) {\n    const allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    // Get the color of the first track to use for colliding particles\n    const track = allEventData.getObjectByName('Track');\n    let trackColor: Color;\n    if (track instanceof Group) {\n      trackColor = (track.children[0] as any)?.material?.color;\n    } else {\n      trackColor = (track as any)?.material.color;\n    }\n\n    // Hide event data to show particles collision\n    if (allEventData) {\n      allEventData.visible = false;\n    }\n\n    this.collideParticles(1500, 30, 5000, trackColor, () => {\n      animationFunction(tweenDuration, onEnd, () => {\n        if (allEventData) {\n          allEventData.visible = true;\n        }\n      });\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateEventWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.animateWithCollision(this.animateEvent, tweenDuration, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data\n   * using clipping planes after particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateClippingWithCollision(\n    tweenDuration: number,\n    onEnd?: () => void\n  ) {\n    this.animateWithCollision(\n      this.animateEventWithClipping,\n      tweenDuration,\n      onEnd\n    );\n  }\n\n  /**\n   * Get the positions of hits in a multidimensional array\n   * from a single dimensional array.\n   * @param positions Positions of hits in a single dimensional array.\n   * @returns Positions of hits in a multidimensional array.\n   */\n  private getHitsPositions(positions: number[]): number[][] {\n    const hitsPositions: number[][] = [];\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CMSObjects.html":{"url":"classes/CMSObjects.html","title":"class - CMSObjects","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CMSObjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/cms-objects.ts\n        \n\n            \n                Description\n            \n            \n                Physics objects that make up an event in CMS that are not a part of PhoenixObjects.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getMuonChamber\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getMuonChamber\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuonChamber(muonChamberParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/cms-objects.ts:25\n                \n            \n\n\n            \n                \n                    Process the Muon Chamber from the given parameters.\nand get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonChamberParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon Chamber.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon Chamber object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Object3D,\n  Group,\n  Mesh,\n  MeshBasicMaterial,\n  EdgesGeometry,\n  LineBasicMaterial,\n  DoubleSide,\n  LineSegments,\n  BufferGeometry,\n  BufferAttribute,\n} from 'three';\nimport { EVENT_DATA_TYPE_COLORS } from '../../helpers/constants';\n\n/**\n * Physics objects that make up an event in CMS that are not a part of {@link PhoenixObjects}.\n */\nexport class CMSObjects {\n  /**\n   * Process the Muon Chamber from the given parameters.\n   * and get it as a geometry.\n   * @param muonChamberParams Parameters of the Muon Chamber.\n   * @returns Muon Chamber object.\n   */\n  public static getMuonChamber(muonChamberParams: any): Object3D {\n    let allFacePositions: number[] = [];\n\n    const addFace3 = (...faces: string[]) => {\n      allFacePositions = allFacePositions.concat(\n        ...faces.map((face) => muonChamberParams[face])\n      );\n    };\n\n    // front\n    addFace3('front_1', 'front_2', 'front_3');\n    addFace3('front_3', 'front_4', 'front_1');\n\n    // back\n    addFace3('back_1', 'back_2', 'back_3');\n    addFace3('back_3', 'back_4', 'back_1');\n\n    // top\n    addFace3('back_1', 'back_2', 'front_2');\n    addFace3('front_2', 'front_1', 'back_1');\n\n    // bottom\n    addFace3('back_4', 'back_3', 'front_3');\n    addFace3('front_3', 'front_4', 'back_4');\n\n    // left\n    addFace3('front_1', 'front_4', 'back_4');\n    addFace3('back_4', 'back_1', 'front_1');\n\n    // right\n    addFace3('front_2', 'back_2', 'back_3');\n    addFace3('back_3', 'front_3', 'front_2');\n\n    let boxBuffer = new BufferGeometry();\n    boxBuffer.attributes.position = new BufferAttribute(\n      new Float32Array(allFacePositions),\n      3\n    );\n    boxBuffer.computeVertexNormals();\n\n    const boxObject = new Mesh(\n      boxBuffer,\n      new MeshBasicMaterial({\n        color: muonChamberParams.color ?? EVENT_DATA_TYPE_COLORS.MuonChambers,\n        transparent: true,\n        opacity: 0.1,\n        side: DoubleSide,\n      })\n    );\n\n    boxObject.userData = Object.assign({}, muonChamberParams);\n    boxObject.name = 'MuonChamber';\n\n    // These are the lines along the box edges\n\n    const boxEdges = new EdgesGeometry(boxBuffer);\n    const lineBoxObject = new LineSegments(\n      boxEdges,\n      new LineBasicMaterial({\n        color: 0xffffff,\n        transparent: true,\n        opacity: 0.7,\n      })\n    );\n\n    const muonChamber = new Group();\n    muonChamber.add(boxObject);\n    muonChamber.add(lineBoxObject);\n\n    muonChamberParams.uuid = boxObject.uuid;\n\n    return muonChamber;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ColorManager.html":{"url":"classes/ColorManager.html","title":"class - ColorManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ColorManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/color-manager.ts\n        \n\n            \n                Description\n            \n            \n                Color manager for three.js functions related to coloring of objects.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                collectionColor\n                            \n                            \n                                colorObjectsByProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sceneManager: SceneManager)\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/color-manager.ts:17\n                            \n                        \n\n                \n                    \n                            Create the coloring manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sceneManager\n                                                  \n                                                        \n                                                                        SceneManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The scene manager responsible for managing the three.js scene.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            collectionColor\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    collectionColor(collectionName: string, color: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/color-manager.ts:48\n                \n            \n\n\n            \n                \n                    Changes the color of all objects inside an event data collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Hex value representing the color.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            colorObjectsByProperty\n                        \n                        \n                    \n                \n            \n            \n                \ncolorObjectsByProperty(color: any, objectsGroup: string, customCheck: (objectUserData: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/color-manager.ts:30\n                \n            \n\n\n            \n                \n                    Color objects by a property's value or range.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Color to set for the object.\n\n                                    \n                                \n                                \n                                    objectsGroup\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the object(s) group to color.\n\n                                    \n                                \n                                \n                                    customCheck\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to custom check values against object params.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Line,\n  Mesh,\n  Points,\n  LineBasicMaterial,\n  MeshBasicMaterial,\n  PointsMaterial,\n  MeshPhongMaterial,\n  MeshToonMaterial,\n  Color,\n} from 'three';\nimport { SceneManager } from './scene-manager';\n\n/**\n * Color manager for three.js functions related to coloring of objects.\n */\nexport class ColorManager {\n  /**\n   * Create the coloring manager.\n   * @param sceneManager The scene manager responsible for managing the three.js scene.\n   */\n  constructor(private sceneManager: SceneManager) {}\n\n  /**\n   * Color objects by a property's value or range.\n   * @param color Color to set for the object.\n   * @param objectsGroup Name of the object(s) group to color.\n   * @param customCheck Function to custom check values against object params.\n   */\n  colorObjectsByProperty(\n    color: any,\n    objectsGroup: string,\n    customCheck: (objectUserData: any) => boolean\n  ) {\n    const objects = this.sceneManager.getScene().getObjectByName(objectsGroup);\n    objects.traverse((object: any) => {\n      if (object.material?.color && customCheck(object.userData)) {\n        object.material.color.set(color);\n      }\n    });\n  }\n\n  /**\n   * Changes the color of all objects inside an event data collection.\n   * @param collectionName Name of the collection.\n   * @param color Hex value representing the color.\n   */\n  public collectionColor(collectionName: string, color: any) {\n    const collection = this.sceneManager\n      .getScene()\n      .getObjectByName(SceneManager.EVENT_DATA_ID)\n      .getObjectByName(collectionName);\n\n    for (const child of Object.values(collection.children)) {\n      child.traverse((object: THREE.Object3D) => {\n        // For jets and tracks\n        if (\n          object instanceof Line ||\n          object instanceof Mesh ||\n          object instanceof Points\n        ) {\n          if (\n            object.material instanceof LineBasicMaterial ||\n            object.material instanceof MeshBasicMaterial ||\n            object.material instanceof MeshBasicMaterial ||\n            object.material instanceof PointsMaterial ||\n            object.material instanceof MeshPhongMaterial ||\n            object.material instanceof MeshToonMaterial\n          ) {\n            (object.material.color as Color).set(color);\n          }\n        }\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ColorOptions.html":{"url":"classes/ColorOptions.html","title":"class - ColorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ColorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/ui-manager/color-options.ts\n        \n\n            \n                Description\n            \n            \n                Color options with functions to color event data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                allColorByOptions\n                            \n                            \n                                    Private\n                                chargeColors\n                            \n                            \n                                    Private\n                                collectionName\n                            \n                            \n                                    Private\n                                colorByOptions\n                            \n                            \n                                    Private\n                                colorOptionsFolder\n                            \n                            \n                                    Private\n                                momColors\n                            \n                            \n                                    Private\n                                selectedColorByOption\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                applyChargeColorOptions\n                            \n                            \n                                    Private\n                                applyMomColorOptions\n                            \n                            \n                                    Private\n                                colorByMomentum\n                            \n                            \n                                    Private\n                                getMomentum\n                            \n                            \n                                    Private\n                                initChargeColorOptions\n                            \n                            \n                                    Private\n                                initColorByOptions\n                            \n                            \n                                    Private\n                                initMomColorOptions\n                            \n                            \n                                    Private\n                                shouldColorByCharge\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorManager: ColorManager, collectionFolder: PhoenixMenuNode, collectionColor: Color, colorByOptionsToInclude?: ColorByOptionKeys[])\n                    \n                \n                        \n                            \n                                Defined in src/managers/ui-manager/color-options.ts:68\n                            \n                        \n\n                \n                    \n                            Create the color options.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        colorManager\n                                                  \n                                                        \n                                                                        ColorManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Color manager for three.js functions related to coloring of objects.\n\n                                                        \n                                                \n                                                \n                                                        collectionFolder\n                                                  \n                                                        \n                                                                        PhoenixMenuNode\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Collection folder to add the color by options to.\n\n                                                        \n                                                \n                                                \n                                                        collectionColor\n                                                  \n                                                        \n                                                                    Color\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        colorByOptionsToInclude\n                                                  \n                                                        \n                                                                        ColorByOptionKeys[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Options to include for this collection to color event data by.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            allColorByOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ColorByOption[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    {\n      key: ColorByOptionKeys.CHARGE,\n      name: 'Charge ' + PrettySymbols.getPrettySymbol('charge'),\n      initialize: this.initChargeColorOptions.bind(this),\n      apply: this.applyChargeColorOptions.bind(this),\n    },\n    {\n      key: ColorByOptionKeys.MOM,\n      name: 'Momentum ' + PrettySymbols.getPrettySymbol('mom'),\n      initialize: this.initMomColorOptions.bind(this),\n      apply: this.applyMomColorOptions.bind(this),\n    },\n  ]\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/color-options.ts:34\n                            \n                        \n\n                \n                    \n                        All color by options possible. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            chargeColors\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    '-1': '#ff0000',\n    '0': '#ff0000',\n    '1': '#ff0000',\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/color-options.ts:51\n                            \n                        \n\n                \n                    \n                        Default values for colors for color by charge. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            collectionName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/color-options.ts:25\n                            \n                        \n\n                \n                    \n                        Collection name of the event data type. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            colorByOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ColorByOption[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/color-options.ts:27\n                            \n                        \n\n                \n                    \n                        Available options to color by in this instance of color options. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            colorOptionsFolder\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/color-options.ts:31\n                            \n                        \n\n                \n                    \n                        Phoenix menu node containing color configurations. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            momColors\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    min: {\n      value: 0,\n      color: '#ff0000',\n    },\n    max: {\n      value: 50000,\n      color: '#ff0000',\n    },\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/color-options.ts:59\n                            \n                        \n\n                \n                    \n                        Default values for colors and min/max for color by momentum. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            selectedColorByOption\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ColorByOptionKeys\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/color-options.ts:29\n                            \n                        \n\n                \n                    \n                        Currently selected option to color by. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            applyChargeColorOptions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    applyChargeColorOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:161\n                \n            \n\n\n            \n                \n                    Apply charge color options.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            applyMomColorOptions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    applyMomColorOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:229\n                \n            \n\n\n            \n                \n                    Apply momentum color options.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            colorByMomentum\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    colorByMomentum(minOrMax: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:239\n                \n            \n\n\n            \n                \n                    Color event data based on the momentum property of each object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    minOrMax\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the momentum to color objects by is minimum or maximum momentum.\nThis is to apply the stored momentum colors for minimum and maximum separated at the mid value.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getMomentum\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMomentum(objectParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:265\n                \n            \n\n\n            \n                \n                    Get momentum from object parameters.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters associated to the 3D object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        THe momentum value.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            initChargeColorOptions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initChargeColorOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:136\n                \n            \n\n\n            \n                \n                    Initialize charge color options.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            initColorByOptions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initColorByOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:112\n                \n            \n\n\n            \n                \n                    Initialize the color options.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            initMomColorOptions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initMomColorOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:192\n                \n            \n\n\n            \n                \n                    Initialize momentum color options.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            shouldColorByCharge\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    shouldColorByCharge(objectParams: any, chargeValue: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:178\n                \n            \n\n\n            \n                \n                    Check if object should be colored based on charge value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object parameters associated to the 3D object.\n\n                                    \n                                \n                                \n                                    chargeValue\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value of charge (-1, 0, 1).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Whether the charge is equal to the value.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Color } from 'three';\nimport { PrettySymbols } from '../../helpers/pretty-symbols';\nimport { ColorManager } from '../three-manager/color-manager';\nimport { PhoenixMenuNode } from './phoenix-menu/phoenix-menu-node';\n\n/** Keys for options available for coloring event data by. */\nexport enum ColorByOptionKeys {\n  CHARGE = 'charge',\n  MOM = 'mom',\n}\n\n/** Type for a single color by option. */\ntype ColorByOption = {\n  key: ColorByOptionKeys;\n  name: string;\n  initialize: () => void;\n  apply: () => void;\n};\n\n/**\n * Color options with functions to color event data.\n */\nexport class ColorOptions {\n  /** Collection name of the event data type. */\n  private collectionName: string;\n  /** Available options to color by in this instance of color options. */\n  private colorByOptions: ColorByOption[];\n  /** Currently selected option to color by. */\n  private selectedColorByOption: ColorByOptionKeys;\n  /** Phoenix menu node containing color configurations. */\n  private colorOptionsFolder: PhoenixMenuNode;\n\n  /** All color by options possible. */\n  private allColorByOptions: ColorByOption[] = [\n    {\n      key: ColorByOptionKeys.CHARGE,\n      name: 'Charge ' + PrettySymbols.getPrettySymbol('charge'),\n      initialize: this.initChargeColorOptions.bind(this),\n      apply: this.applyChargeColorOptions.bind(this),\n    },\n    {\n      key: ColorByOptionKeys.MOM,\n      name: 'Momentum ' + PrettySymbols.getPrettySymbol('mom'),\n      initialize: this.initMomColorOptions.bind(this),\n      apply: this.applyMomColorOptions.bind(this),\n    },\n  ];\n\n  // Charge options.\n  /** Default values for colors for color by charge. */\n  private chargeColors = {\n    '-1': '#ff0000',\n    '0': '#ff0000',\n    '1': '#ff0000',\n  };\n\n  // Momentum options.\n  /** Default values for colors and min/max for color by momentum. */\n  private momColors = {\n    min: {\n      value: 0,\n      color: '#ff0000',\n    },\n    max: {\n      value: 50000,\n      color: '#ff0000',\n    },\n  };\n\n  /**\n   * Create the color options.\n   * @param colorManager Color manager for three.js functions related to coloring of objects.\n   * @param collectionFolder Collection folder to add the color by options to.\n   * @param colorByOptionsToInclude Options to include for this collection to color event data by.\n   */\n  constructor(\n    private colorManager: ColorManager,\n    collectionFolder: PhoenixMenuNode,\n    collectionColor: Color,\n    colorByOptionsToInclude?: ColorByOptionKeys[]\n  ) {\n    this.collectionName = collectionFolder.name;\n    this.colorOptionsFolder = collectionFolder.addChild('Color Options');\n\n    this.colorOptionsFolder.addConfig('color', {\n      label: 'Color',\n      color: collectionColor\n        ? `#${collectionColor?.getHexString()}`\n        : undefined,\n      onChange: (value: any) => {\n        this.colorManager.collectionColor(this.collectionName, value);\n      },\n    });\n\n    // Check which color by options are to be included.\n\n    if (colorByOptionsToInclude?.length > 0) {\n      this.colorByOptions = this.allColorByOptions.filter((colorByOption) =>\n        colorByOptionsToInclude.includes(colorByOption.key)\n      );\n\n      this.initColorByOptions();\n      this.colorByOptions.forEach((colorByOption) =>\n        colorByOption.initialize()\n      );\n    }\n  }\n\n  /**\n   * Initialize the color options.\n   */\n  private initColorByOptions() {\n    this.selectedColorByOption = this.colorByOptions[0].key;\n\n    // Configurations\n\n    this.colorOptionsFolder.addConfig('select', {\n      label: 'Color by',\n      options: this.colorByOptions.map((colorByOption) => colorByOption.name),\n      onChange: (updatedColorByOption: string) => {\n        const newColorByOption = this.colorByOptions.find(\n          (colorByOption) => colorByOption.name === updatedColorByOption\n        );\n\n        this.selectedColorByOption = newColorByOption?.key;\n        newColorByOption?.apply();\n      },\n    });\n  }\n\n  // Charge options.\n\n  /**\n   * Initialize charge color options.\n   */\n  private initChargeColorOptions() {\n    // Charge configurations\n    [-1, 0, 1].forEach((chargeValue) => {\n      this.colorOptionsFolder.addConfig('color', {\n        label: `${PrettySymbols.getPrettySymbol('charge')}=${chargeValue}`,\n        color: this.chargeColors[chargeValue],\n        onChange: (color: any) => {\n          this.chargeColors[chargeValue] = color;\n\n          if (this.selectedColorByOption === ColorByOptionKeys.CHARGE) {\n            this.colorManager.colorObjectsByProperty(\n              color,\n              this.collectionName,\n              (objectUserData) =>\n                this.shouldColorByCharge(objectUserData, chargeValue)\n            );\n          }\n        },\n      });\n    });\n  }\n\n  /**\n   * Apply charge color options.\n   */\n  private applyChargeColorOptions() {\n    [-1, 0, 1].forEach((chargeValue) => {\n      this.colorManager.colorObjectsByProperty(\n        this.chargeColors[chargeValue],\n        this.collectionName,\n        (objectUserData) =>\n          this.shouldColorByCharge(objectUserData, chargeValue)\n      );\n    });\n  }\n\n  /**\n   * Check if object should be colored based on charge value.\n   * @param objectParams Object parameters associated to the 3D object.\n   * @param chargeValue Value of charge (-1, 0, 1).\n   * @returns Whether the charge is equal to the value.\n   */\n  private shouldColorByCharge(objectParams: any, chargeValue: number) {\n    // For ATLAS data, the charge is calculated from dparams[4] otherwise it exists as an object's userData\n    if (Math.sign(1 / parseInt(objectParams?.dparams?.[4])) === chargeValue) {\n      return true;\n    } else if (objectParams?.charge === chargeValue) {\n      return true;\n    }\n  }\n\n  // Momentum options.\n\n  /**\n   * Initialize momentum color options.\n   */\n  private initMomColorOptions() {\n    // Momentum configurations\n    Object.entries(this.momColors).forEach(([key, momValue]) => {\n      this.colorOptionsFolder.addConfig('slider', {\n        label: PrettySymbols.getPrettySymbol('mom') + ' ' + key,\n        min: this.momColors.min.value,\n        max: this.momColors.max.value,\n        value: this.momColors[key].value,\n        step: 10,\n        allowCustomValue: true,\n        onChange: (sliderValue: number) => {\n          this.momColors[key].value = sliderValue;\n\n          if (this.selectedColorByOption === ColorByOptionKeys.MOM) {\n            this.colorByMomentum('min');\n            this.colorByMomentum('max');\n          }\n        },\n      });\n\n      this.colorOptionsFolder.addConfig('color', {\n        label: PrettySymbols.getPrettySymbol('mom') + ' ' + key + ' color',\n        color: momValue.color,\n        onChange: (color: any) => {\n          this.momColors[key].color = color;\n\n          if (this.selectedColorByOption === ColorByOptionKeys.MOM) {\n            this.colorByMomentum(key);\n          }\n        },\n      });\n    });\n  }\n\n  /**\n   * Apply momentum color options.\n   */\n  private applyMomColorOptions() {\n    this.colorByMomentum('min');\n    this.colorByMomentum('max');\n  }\n\n  /**\n   * Color event data based on the momentum property of each object.\n   * @param minOrMax If the momentum to color objects by is minimum or maximum momentum.\n   * This is to apply the stored momentum colors for minimum and maximum separated at the mid value.\n   */\n  private colorByMomentum(minOrMax: string) {\n    this.colorManager.colorObjectsByProperty(\n      this.momColors[minOrMax].color,\n      this.collectionName,\n      (objectParams) => {\n        const mom = this.getMomentum(objectParams);\n        const mid = (this.momColors.min.value + this.momColors.max.value) / 2;\n\n        if (minOrMax === 'max' && mom > mid && mom  this.momColors.min.value\n        ) {\n          return true;\n        }\n      }\n    );\n  }\n\n  /**\n   * Get momentum from object parameters.\n   * @param objectParams Parameters associated to the 3D object.\n   * @returns THe momentum value.\n   */\n  private getMomentum(objectParams: any) {\n    return objectParams?.dparams?.[4]\n      ? Math.abs(1 / parseFloat(objectParams?.dparams?.[4]))\n      : objectParams?.mom;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Configuration.html":{"url":"interfaces/Configuration.html","title":"interface - Configuration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Configuration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extras/configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration of the event display.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        allowUrlOptions\n                                \n                                \n                                            Optional\n                                        defaultEventFile\n                                \n                                \n                                            Optional\n                                        defaultView\n                                \n                                \n                                            Optional\n                                        elementId\n                                \n                                \n                                            Optional\n                                        enableDatGUIMenu\n                                \n                                \n                                            Optional\n                                        eventDataLoader\n                                \n                                \n                                            Optional\n                                        phoenixMenuRoot\n                                \n                                \n                                            Optional\n                                        presetViews\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowUrlOptions\n                                    \n                                \n                                \n                                    \n                                        allowUrlOptions:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to allow URL options or not (true by default). \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultEventFile\n                                    \n                                \n                                \n                                    \n                                        defaultEventFile:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default event to load when none given in URL. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultView\n                                    \n                                \n                                \n                                    \n                                        defaultView:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default view [x,y,z]. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elementId\n                                    \n                                \n                                \n                                    \n                                        elementId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    ID of the wrapper element. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableDatGUIMenu\n                                    \n                                \n                                \n                                    \n                                        enableDatGUIMenu:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to enable dat.GUI menu or not. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventDataLoader\n                                    \n                                \n                                \n                                    \n                                        eventDataLoader:         EventDataLoader\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EventDataLoader\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Event data loader responsible for processing and loading event data. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phoenixMenuRoot\n                                    \n                                \n                                \n                                    \n                                        phoenixMenuRoot:         PhoenixMenuNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PhoenixMenuNode\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Root node of the phoenix menu. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        presetViews\n                                    \n                                \n                                \n                                    \n                                        presetViews:         PresetView[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PresetView[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Preset views for switching event display camera. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { PresetView } from './preset-view.model';\nimport { EventDataLoader } from '../loaders/event-data-loader';\nimport { PhoenixMenuNode } from '../managers/ui-manager/phoenix-menu/phoenix-menu-node';\n\n/**\n * Configuration of the event display.\n */\nexport interface Configuration {\n  /** Default view [x,y,z]. */\n  defaultView?: number[];\n  /** Preset views for switching event display camera. */\n  presetViews?: PresetView[];\n  /** Event data loader responsible for processing and loading event data. */\n  eventDataLoader?: EventDataLoader;\n  /** Root node of the phoenix menu. */\n  phoenixMenuRoot?: PhoenixMenuNode;\n  /** Whether to enable dat.GUI menu or not. */\n  enableDatGUIMenu?: boolean;\n  /** ID of the wrapper element. */\n  elementId?: string;\n  /** Default event to load when none given in URL. */\n  defaultEventFile?: { eventFile: string; eventType: string };\n  /** Whether to allow URL options or not (true by default). */\n  allowUrlOptions?: boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CoordinateHelper.html":{"url":"classes/CoordinateHelper.html","title":"class - CoordinateHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CoordinateHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/coordinate-helper.ts\n        \n\n            \n                Description\n            \n            \n                Helper methods for coordinate conversions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                atlasQuaternion\n                            \n                            \n                                    Static\n                                etaPhiToCartesian\n                            \n                            \n                                    Static\n                                etaToTheta\n                            \n                            \n                                    Static\n                                sphericalToCartesian\n                            \n                            \n                                    Static\n                                thetaToEta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            atlasQuaternion\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    atlasQuaternion()\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:69\n                \n            \n\n\n            \n                \n                    Returns the Quaternion to rotate to ATLAS coords.\nTemporary. We will need to make this configurable per experiment.\n\n\n                    \n                        Returns :     Quaternion\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            etaPhiToCartesian\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    etaPhiToCartesian(radius: number, eta: number, phi: number)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:53\n                \n            \n\n\n            \n                \n                    Get cartesian from eta/phi parameters.\nApplies the necessary rotations to move from threejs native to experimental.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    radius\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The radius.\n\n                                    \n                                \n                                \n                                    eta\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Pseudorapidity\n\n                                    \n                                \n                                \n                                    phi\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Phi angle.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Vector3\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            etaToTheta\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    etaToTheta(eta: number)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:13\n                \n            \n\n\n            \n                \n                    Convert pseudorapidity eta to spherical coordinate theta.\nSee definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eta\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Pseudorapidity eta to convert to theta.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        theta in radians\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            sphericalToCartesian\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sphericalToCartesian(radius: number, theta: number, phi: number)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:34\n                \n            \n\n\n            \n                \n                    Get cartesian from spherical parameters.\nApplies the necessary rotations to move from threejs to experimental.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    radius\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The radius.\n\n                                    \n                                \n                                \n                                    theta\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Theta angle.\n\n                                    \n                                \n                                \n                                    phi\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Phi angle.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Vector3\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            thetaToEta\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    thetaToEta(theta: number)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:23\n                \n            \n\n\n            \n                \n                    Convert spherical theta to pseudorapidity eta.\nSee definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    theta\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Angle in radians to convert to pseudorapidity eta.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        pseudorapidity eta\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3, Quaternion } from 'three';\n\n/**\n * Helper methods for coordinate conversions.\n */\nexport class CoordinateHelper {\n  /**\n   * Convert pseudorapidity eta to spherical coordinate theta.\n   * See definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n   * @param eta Pseudorapidity eta to convert to theta.\n   * @returns theta in radians\n   */\n  public static etaToTheta(eta: number): number {\n    return 2 * Math.atan(Math.pow(Math.E, -eta));\n  }\n\n  /**\n   * Convert spherical theta to pseudorapidity eta.\n   * See definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n   * @param theta Angle in radians to convert to pseudorapidity eta.\n   * @returns pseudorapidity eta\n   */\n  public static thetaToEta(theta: number): number {\n    return -Math.log(Math.tan(theta / 2.0));\n  }\n\n  /**\n   * Get cartesian from spherical parameters.\n   * Applies the necessary rotations to move from threejs to experimental.\n   * @param radius The radius.\n   * @param theta Theta angle.\n   * @param phi Phi angle.\n   */\n  public static sphericalToCartesian(\n    radius: number,\n    theta: number,\n    phi: number\n  ): Vector3 {\n    // Threejs uses theta as azimuthal, so need to reverse.\n    let vector = new Vector3();\n    vector.setFromSphericalCoords(radius, theta, phi);\n    vector.applyQuaternion(CoordinateHelper.atlasQuaternion());\n    return vector;\n  }\n\n  /**\n   * Get cartesian from eta/phi parameters.\n   * Applies the necessary rotations to move from threejs native to experimental.\n   * @param radius The radius.\n   * @param eta Pseudorapidity\n   * @param phi Phi angle.\n   */\n  public static etaPhiToCartesian(\n    radius: number,\n    eta: number,\n    phi: number\n  ): Vector3 {\n    let vector = new Vector3();\n    // Threejs uses theta as azimuthal, so need to reverse.\n    vector.setFromSphericalCoords(radius, this.etaToTheta(eta), phi);\n    vector.applyQuaternion(CoordinateHelper.atlasQuaternion());\n    return vector;\n  }\n\n  /**\n   * Returns the Quaternion to rotate to ATLAS coords.\n   * Temporary. We will need to make this configurable per experiment.\n   */\n  public static atlasQuaternion(): Quaternion {\n    // With nothing, we have eta=0 on x, and phi=0 on z\n    // Should be eta=0 on y, and phi=0 on x\n    const v1 = new Vector3(0, 1, 0);\n    const v2 = new Vector3(0, 0, 1);\n    const quaternion = new Quaternion();\n    quaternion.setFromUnitVectors(v1, v2); // This puts eta~infinite on z-axis, eta=0 on  but y-positive is phi=PI (and eta=0 on x)\n    const quaternion2 = new Quaternion();\n    quaternion2.setFromAxisAngle(new Vector3(0, 1, 0), Math.PI / 2.0); // Now have eta = 3.0 on -x, eta =0 on +y, and phi = 0 on +z\n    quaternion.multiply(quaternion2);\n    return quaternion;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Cut.html":{"url":"classes/Cut.html","title":"class - Cut","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Cut\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extras/cut.model.ts\n        \n\n            \n                Description\n            \n            \n                Cut for specifying filters on event data attribute.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                defaultMaxValue\n                            \n                            \n                                    Private\n                                defaultMinValue\n                            \n                            \n                                    Public\n                                field\n                            \n                            \n                                    Public\n                                maxValue\n                            \n                            \n                                    Public\n                                minValue\n                            \n                            \n                                    Public\n                                step\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: string, minValue: number, maxValue: number, step: number)\n                    \n                \n                        \n                            \n                                Defined in src/extras/cut.model.ts:8\n                            \n                        \n\n                \n                    \n                            Create the cut to filter an event data attribute.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the event data attribute to be filtered.\n\n                                                        \n                                                \n                                                \n                                                        minValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Minimum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                                \n                                                        maxValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Maximum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                                \n                                                        step\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Step for each value change.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            defaultMaxValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:8\n                            \n                        \n\n                \n                    \n                        Default maximum allowed value of the event data attribute. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            defaultMinValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:6\n                            \n                        \n\n                \n                    \n                        Default minimum allowed value of the event data attribute. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            field\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:18\n                            \n                        \n\n                \n                    \n                        Name of the event data attribute to be filtered.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            maxValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:20\n                            \n                        \n\n                \n                    \n                        Maximum allowed value of the event data attribute.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            minValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:19\n                            \n                        \n\n                \n                    \n                        Minimum allowed value of the event data attribute.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            step\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:21\n                            \n                        \n\n                \n                    \n                        Step for each value change.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/extras/cut.model.ts:30\n                \n            \n\n\n            \n                \n                    Reset the minimum and maximum value of the cut to default.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Cut {\n  /** Default minimum allowed value of the event data attribute. */\n  private defaultMinValue: number;\n  /** Default maximum allowed value of the event data attribute. */\n  private defaultMaxValue: number;\n\n  /**\n   * Create the cut to filter an event data attribute.\n   * @param field Name of the event data attribute to be filtered.\n   * @param minValue Minimum allowed value of the event data attribute.\n   * @param maxValue Maximum allowed value of the event data attribute.\n   * @param step Step for each value change.\n   */\n  constructor(\n    public field: string,\n    public minValue: number,\n    public maxValue: number,\n    public step: number = 1\n  ) {\n    this.defaultMinValue = minValue;\n    this.defaultMaxValue = maxValue;\n  }\n\n  /**\n   * Reset the minimum and maximum value of the cut to default.\n   */\n  reset() {\n    this.minValue = this.defaultMinValue;\n    this.maxValue = this.defaultMaxValue;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatGUIMenuUI.html":{"url":"classes/DatGUIMenuUI.html","title":"class - DatGUIMenuUI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatGUIMenuUI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/ui-manager/dat-gui-ui.ts\n        \n\n            \n                Description\n            \n            \n                A wrapper class for dat.GUI menu to perform UI related operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                eventFolder\n                            \n                            \n                                    Private\n                                geomFolder\n                            \n                            \n                                    Private\n                                gui\n                            \n                            \n                                    Private\n                                guiParameters\n                            \n                            \n                                    Private\n                                labelsFolder\n                            \n                            \n                                    Private\n                                maxPositionX\n                            \n                            \n                                    Private\n                                maxPositionY\n                            \n                            \n                                    Private\n                                maxPositionZ\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addCollection\n                            \n                            \n                                    Public\n                                addEventDataFolder\n                            \n                            \n                                    Public\n                                addEventDataTypeFolder\n                            \n                            \n                                    Public\n                                addGeometry\n                            \n                            \n                                    Public\n                                addGeomFolder\n                            \n                            \n                                    Public\n                                addLabel\n                            \n                            \n                                    Public\n                                addLabelsFolder\n                            \n                            \n                                    Public\n                                clearDatGUI\n                            \n                            \n                                    Public\n                                removeLabel\n                            \n                            \n                                    Private\n                                removeOBJ\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elementId: string, three: ThreeManager)\n                    \n                \n                        \n                            \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:34\n                            \n                        \n\n                \n                    \n                            Create dat.GUI menu UI with different controls related to detector geometry and event data.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        elementId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                ID of the wrapper element.\n\n                                                        \n                                                \n                                                \n                                                        three\n                                                  \n                                                        \n                                                                        ThreeManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The three manager for managing three.js related operations.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventFolder\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     GUI\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/dat-gui-ui.ts:25\n                            \n                        \n\n                \n                    \n                        dat.GUI menu folder containing event related data. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            geomFolder\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     GUI\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/dat-gui-ui.ts:23\n                            \n                        \n\n                \n                    \n                        dat.GUI menu folder containing geometries data. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            gui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     GUI\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/dat-gui-ui.ts:12\n                            \n                        \n\n                \n                    \n                        dat.GUI menu. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            guiParameters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    rotate: undefined,\n    axis: undefined,\n    lowRes: undefined,\n    eventData: undefined,\n    geometries: undefined,\n    labels: undefined,\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/dat-gui-ui.ts:14\n                            \n                        \n\n                \n                    \n                        Options for the dat.GUI menu. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            labelsFolder\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     GUI\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/dat-gui-ui.ts:27\n                            \n                        \n\n                \n                    \n                        dat.GUI menu folder containing labels. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            maxPositionX\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 4000\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/dat-gui-ui.ts:30\n                            \n                        \n\n                \n                    \n                        Max changeable position of an object along the x-axis. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            maxPositionY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 4000\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/dat-gui-ui.ts:32\n                            \n                        \n\n                \n                    \n                        Max changeable position of an object along the y-axis. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            maxPositionZ\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 4000\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/dat-gui-ui.ts:34\n                            \n                        \n\n                \n                    \n                        Max changeable position of an object along the z-axis. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(typeFolder: GUI, collectionName: string, cuts?: Cut[], collectionColor?: Color)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:241\n                \n            \n\n\n            \n                \n                    Add collection folder and its configurable options to the event data type (tracks, hits etc.) folder.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    typeFolder\n                                    \n                                            GUI\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        dat.GUI menu folder of an event data type.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to be added in the type of event data (tracks, hits etc.).\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Cuts to the collection of event data that are to be made configurable to filter event data.\n\n                                    \n                                \n                                \n                                    collectionColor\n                                    \n                                            Color\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Color of the collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addEventDataFolder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addEventDataFolder()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:187\n                \n            \n\n\n            \n                \n                    Functions for event data toggles like show/hide and depthTest.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addEventDataTypeFolder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addEventDataTypeFolder(typeName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:220\n                \n            \n\n\n            \n                \n                    Add folder for event data type like tracks or hits to the dat.GUI menu.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the type of event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     GUI\n\n                    \n                    \n                        dat.GUI menu's folder for event data type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addGeometry(name: string, color: any, initiallyVisible: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:98\n                \n            \n\n\n            \n                \n                    Adds geometry to the dat.GUI menu's geometry folder and sets up its configurable options.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Name of the geometry.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Color of the geometry.\n\n                                    \n                                \n                                \n                                    initiallyVisible\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        Whether the geometry is initially visible or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addGeomFolder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addGeomFolder()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:67\n                \n            \n\n\n            \n                \n                    Add geometry (detector geometry) folder to the dat.GUI menu.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLabel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabel(labelId: string, removeLabel?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:356\n                \n            \n\n\n            \n                \n                    Add configuration UI for label.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    labelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Unique ID of the label.\n\n                                    \n                                \n                                \n                                    removeLabel\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to remove label from the scene.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLabelsFolder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabelsFolder(configFunctions: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:304\n                \n            \n\n\n            \n                \n                    Add labels folder to dat.GUI menu.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configFunctions\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Functions to attach to the labels folder configuration.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clearDatGUI\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clearDatGUI()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:56\n                \n            \n\n\n            \n                \n                    Clear the dat.GUI menu.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeLabel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLabel(labelId: string, labelItemFolder?: GUI)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:393\n                \n            \n\n\n            \n                \n                    Remove label from UI, scene and event data loader if it exists.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    labelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A unique label ID string.\n\n                                    \n                                \n                                \n                                    labelItemFolder\n                                    \n                                            GUI\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        dat.GUI folder of the label if any.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            removeOBJ\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeOBJ(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:174\n                \n            \n\n\n            \n                \n                    Remove object from the dat.GUI menu.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the object to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     () => void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { GUI } from 'dat.gui';\nimport { Color } from 'three';\nimport { ThreeManager } from '../three-manager';\nimport { SceneManager } from '../three-manager/scene-manager';\nimport { Cut } from '../../extras/cut.model';\n\n/**\n * A wrapper class for dat.GUI menu to perform UI related operations.\n */\nexport class DatGUIMenuUI {\n  /** dat.GUI menu. */\n  private gui: GUI;\n  /** Options for the dat.GUI menu. */\n  private guiParameters = {\n    rotate: undefined,\n    axis: undefined,\n    lowRes: undefined,\n    eventData: undefined,\n    geometries: undefined,\n    labels: undefined,\n  };\n  /** dat.GUI menu folder containing geometries data. */\n  private geomFolder: GUI;\n  /** dat.GUI menu folder containing event related data. */\n  private eventFolder: GUI;\n  /** dat.GUI menu folder containing labels. */\n  private labelsFolder: GUI;\n\n  /** Max changeable position of an object along the x-axis. */\n  private maxPositionX = 4000;\n  /** Max changeable position of an object along the y-axis. */\n  private maxPositionY = 4000;\n  /** Max changeable position of an object along the z-axis. */\n  private maxPositionZ = 4000;\n\n  /**\n   * Create dat.GUI menu UI with different controls related to detector geometry and event data.\n   * @param elementId ID of the wrapper element.\n   * @param three The three manager for managing three.js related operations.\n   */\n  constructor(elementId: string = 'eventDisplay', private three: ThreeManager) {\n    this.gui = new GUI();\n    this.gui.domElement.id = 'gui';\n    this.gui.domElement.style.cssText =\n      'position: absolute; right: 0; top: 2rem; z-index: 11;';\n    const canvas = document.getElementById(elementId) ?? document.body;\n    canvas.appendChild(this.gui.domElement);\n    this.geomFolder = null;\n    this.eventFolder = null;\n    this.labelsFolder = null;\n  }\n\n  /**\n   * Clear the dat.GUI menu.\n   */\n  public clearDatGUI() {\n    const gui = document.getElementById('gui');\n    if (gui != null) {\n      gui.remove();\n    }\n    this.geomFolder = null;\n  }\n\n  /**\n   * Add geometry (detector geometry) folder to the dat.GUI menu.\n   */\n  public addGeomFolder() {\n    if (this.geomFolder === null) {\n      this.geomFolder = this.gui.addFolder(SceneManager.GEOMETRIES_ID);\n    }\n    this.guiParameters.geometries = { show: true, wireframe: false };\n    // A boolean toggle for showing/hiding the geometries is added to the 'Geometry' folder.\n    const showGeometriesMenu = this.geomFolder\n      .add(this.guiParameters.geometries, 'show')\n      .name('Show')\n      .listen();\n    showGeometriesMenu.onChange((value) => {\n      this.three\n        .getSceneManager()\n        .objectVisibility(SceneManager.GEOMETRIES_ID, value);\n    });\n    // A boolean toggle for enabling/disabling the geometries' wireframing.\n    const wireframeGeometriesMenu = this.geomFolder\n      .add(this.guiParameters.geometries, 'wireframe')\n      .name('Wireframe')\n      .listen();\n    wireframeGeometriesMenu.onChange((value) => {\n      this.three.getSceneManager().wireframeGeometries(value);\n    });\n  }\n\n  /**\n   * Adds geometry to the dat.GUI menu's geometry folder and sets up its configurable options.\n   * @param name Name of the geometry.\n   * @param color Color of the geometry.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public addGeometry(\n    name: string,\n    color: any,\n    initiallyVisible: boolean = true\n  ) {\n    // A new folder for the object is added to the 'Geometry' folder\n    this.guiParameters[name] = {\n      show: initiallyVisible,\n      color: color ?? '#000000',\n      x: 0,\n      y: 0,\n      z: 0,\n      detectorOpacity: 1.0,\n      remove: this.removeOBJ(name),\n      scale: 1,\n    };\n\n    const objFolder = this.geomFolder.addFolder(name);\n    // A color picker is added to the object's folder\n    const colorMenu = objFolder\n      .addColor(this.guiParameters[name], 'color')\n      .name('Color');\n    colorMenu.onChange((value) =>\n      this.three.getSceneManager().changeObjectColor(name, value)\n    );\n\n    const opacity = objFolder\n      .add(this.guiParameters[name], 'detectorOpacity', 0.0, 1.0)\n      .name('Opacity');\n    opacity.onFinishChange((newValue) =>\n      this.three.getSceneManager().setGeometryOpacity(name, newValue)\n    );\n\n    // A boolean toggle for showing/hiding the object is added to its folder\n    const showMenu = objFolder\n      .add(this.guiParameters[name], 'show')\n      .name('Show')\n      .listen();\n    showMenu.onChange((value) =>\n      this.three.getSceneManager().objectVisibility(name, value)\n    );\n    // Scale slider\n    const scaleMenu = objFolder\n      .add(this.guiParameters[name], 'scale', 0, 1000)\n      .name('Scale');\n    scaleMenu.onChange((value) => {\n      this.three.getSceneManager().scaleObject(name, value);\n    });\n    // Controls for positioning.\n    // const position = this.three.getObjectPosition(name);\n    objFolder\n      .add(this.guiParameters[name], 'x', -this.maxPositionX, this.maxPositionX)\n      .name('X')\n      .onChange((value) =>\n        this.three.getSceneManager().getObjectPosition(name).setX(value)\n      );\n    objFolder\n      .add(this.guiParameters[name], 'y', -this.maxPositionY, this.maxPositionY)\n      .name('Y')\n      .onChange((value) =>\n        this.three.getSceneManager().getObjectPosition(name).setY(value)\n      );\n    objFolder\n      .add(this.guiParameters[name], 'z', -this.maxPositionZ, this.maxPositionZ)\n      .name('Z')\n      .onChange((value) =>\n        this.three.getSceneManager().getObjectPosition(name).setZ(value)\n      );\n    // Controls for deleting the obj\n    objFolder.add(this.guiParameters[name], 'remove').name('Remove');\n  }\n\n  /**\n   * Remove object from the dat.GUI menu.\n   * @param name Name of the object to be removed.\n   */\n  private removeOBJ(name: string) {\n    return () => {\n      const folder = this.geomFolder.__folders[name];\n      if (folder) {\n        this.geomFolder.removeFolder(folder);\n      }\n      this.three.getSceneManager().removeGeometry(name);\n    };\n  }\n\n  /**\n   * Functions for event data toggles like show/hide and depthTest.\n   */\n  public addEventDataFolder() {\n    // If there is already an event data folder it is deleted and we create a new one.\n    if (this.eventFolder !== null) {\n      this.gui.removeFolder(this.eventFolder);\n    }\n\n    // A new folder for the Event Data is added to the GUI.\n    this.eventFolder = this.gui.addFolder('Event Data');\n    this.guiParameters.eventData = { show: true, depthTest: true };\n    // A boolean toggle for showing/hiding the event data is added to the 'Event Data' folder.\n    const menu = this.eventFolder\n      .add(this.guiParameters.eventData, 'show')\n      .name('Show')\n      .listen();\n    menu.onChange((value) =>\n      this.three\n        .getSceneManager()\n        .objectVisibility(SceneManager.EVENT_DATA_ID, value)\n    );\n\n    // A boolean toggle for enabling/disabling depthTest of event data.\n    const depthTestMenu = this.eventFolder\n      .add(this.guiParameters.eventData, 'depthTest')\n      .name('Depth Test')\n      .listen();\n    depthTestMenu.onChange((value) => this.three.eventDataDepthTest(value));\n  }\n\n  /**\n   * Add folder for event data type like tracks or hits to the dat.GUI menu.\n   * @param typeName Name of the type of event data.\n   * @returns dat.GUI menu's folder for event data type.\n   */\n  public addEventDataTypeFolder(typeName: string): GUI {\n    const typeFolder = this.eventFolder.addFolder(typeName);\n    this.guiParameters.eventData[typeName] = true;\n    const menu = typeFolder\n      .add(this.guiParameters.eventData, typeName)\n      .name('Show')\n      .listen();\n    menu.onChange((value) =>\n      this.three.getSceneManager().objectVisibility(typeName, value)\n    );\n\n    return typeFolder;\n  }\n\n  /**\n   * Add collection folder and its configurable options to the event data type (tracks, hits etc.) folder.\n   * @param typeFolder dat.GUI menu folder of an event data type.\n   * @param collectionName Name of the collection to be added in the type of event data (tracks, hits etc.).\n   * @param cuts Cuts to the collection of event data that are to be made configurable to filter event data.\n   * @param collectionColor Color of the collection.\n   */\n  public addCollection(\n    typeFolder: GUI,\n    collectionName: string,\n    cuts?: Cut[],\n    collectionColor?: Color\n  ) {\n    if (typeFolder) {\n      // A new folder for the collection is added to the 'Event Data' folder\n      this.guiParameters[collectionName] = {\n        show: true,\n        color: 0x000000,\n        resetCut: () =>\n          this.three\n            .getSceneManager()\n            .groupVisibility(collectionName, true, SceneManager.EVENT_DATA_ID),\n      };\n      const collFolder = typeFolder.addFolder(collectionName);\n      // A boolean toggle for showing/hiding the collection is added to its folder\n      const showMenu = collFolder\n        .add(this.guiParameters[collectionName], 'show')\n        .name('Show')\n        .listen();\n      showMenu.onChange((value) =>\n        this.three\n          .getSceneManager()\n          .objectVisibility(collectionName, value, SceneManager.EVENT_DATA_ID)\n      );\n      // A color picker is added to the collection's folder\n      const colorMenu = collFolder\n        .addColor(this.guiParameters[collectionName], 'color')\n        .name('Color');\n      colorMenu.onChange((value) =>\n        this.three.getColorManager().collectionColor(collectionName, value)\n      );\n      colorMenu.setValue(collectionColor?.getHex());\n      // Cuts menu\n      if (cuts) {\n        const cutsFolder = collFolder.addFolder('Cuts');\n        cutsFolder\n          .add(this.guiParameters[collectionName], 'resetCut')\n          .name('Reset cuts');\n        for (const cut of cuts) {\n          const minCut = cutsFolder\n            .add(cut, 'minValue', cut.minValue, cut.maxValue)\n            .name('min ' + cut.field);\n          minCut.onChange((value) => {\n            this.three.getSceneManager().collectionFilter(collectionName, cuts);\n          });\n          const maxCut = cutsFolder\n            .add(cut, 'maxValue', cut.minValue, cut.maxValue)\n            .name('max ' + cut.field);\n          maxCut.onChange((value) => {\n            this.three.getSceneManager().collectionFilter(collectionName, cuts);\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Add labels folder to dat.GUI menu.\n   * @param configFunctions Functions to attach to the labels folder configuration.\n   */\n  public addLabelsFolder(configFunctions: any) {\n    if (this.labelsFolder !== null) {\n      return;\n    }\n\n    const {\n      onToggle,\n      onSizeChange,\n      onColorChange,\n      onSaveLabels,\n      onLoadLabels,\n    } = configFunctions;\n\n    this.labelsFolder = this.gui.addFolder(SceneManager.LABELS_ID);\n\n    this.guiParameters.labels = {\n      show: true,\n      size: 1,\n      color: '#a8a8a8',\n      saveLabels: onSaveLabels,\n      loadLabels: onLoadLabels,\n    };\n\n    const showMenu = this.labelsFolder\n      .add(this.guiParameters.labels, 'show')\n      .name('Show')\n      .listen();\n    showMenu.onChange(onToggle);\n\n    const labelsSizeMenu = this.labelsFolder\n      .add(this.guiParameters.labels, 'size', 0, 10)\n      .name('Size');\n    labelsSizeMenu.onFinishChange(onSizeChange);\n\n    const colorMenu = this.labelsFolder\n      .addColor(this.guiParameters.labels, 'color')\n      .name('Color');\n    colorMenu.onChange(onColorChange);\n\n    this.labelsFolder\n      .add(this.guiParameters.labels, 'saveLabels')\n      .name('Save Labels');\n    this.labelsFolder\n      .add(this.guiParameters.labels, 'loadLabels')\n      .name('Load Labels');\n  }\n\n  /**\n   * Add configuration UI for label.\n   * @param labelId Unique ID of the label.\n   * @param removeLabel Function to remove label from the scene.\n   */\n  public addLabel(labelId: string, removeLabel?: () => void) {\n    this.guiParameters[labelId] = {\n      show: true,\n      color: 0xafafaf,\n    };\n\n    const labelItem = this.labelsFolder.addFolder(labelId);\n\n    const visibilityToggle = labelItem\n      .add(this.guiParameters[labelId], 'show')\n      .name('Show')\n      .listen();\n    visibilityToggle.onChange((value) => {\n      this.three\n        .getSceneManager()\n        .objectVisibility(labelId, value, SceneManager.LABELS_ID);\n    });\n\n    const colorMenu = labelItem\n      .addColor(this.guiParameters[labelId], 'color')\n      .name('Çolor');\n    colorMenu.onChange((color) =>\n      this.three.getSceneManager().changeObjectColor(labelId, color)\n    );\n\n    this.guiParameters[labelId]['removeLabel'] = () => {\n      removeLabel?.();\n      this.removeLabel(labelId, labelItem);\n    };\n    labelItem.add(this.guiParameters[labelId], 'removeLabel').name('Remove');\n  }\n\n  /**\n   * Remove label from UI, scene and event data loader if it exists.\n   * @param labelId A unique label ID string.\n   * @param labelItemFolder dat.GUI folder of the label if any.\n   */\n  public removeLabel(labelId: string, labelItemFolder?: GUI) {\n    if (!labelItemFolder) {\n      labelItemFolder = this.labelsFolder.__folders[labelId];\n    }\n\n    if (labelItemFolder) {\n      this.labelsFolder.removeFolder(labelItemFolder);\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EffectsManager.html":{"url":"classes/EffectsManager.html","title":"class - EffectsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EffectsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/effects-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing three.js event display effects like outline pass and unreal bloom.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                antialiasing\n                            \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Public\n                                composer\n                            \n                            \n                                    Private\n                                defaultRenderPass\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Private\n                                scene\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addOutlinePassForSelection\n                            \n                            \n                                    Private\n                                antialiasRender\n                            \n                            \n                                    Private\n                                effectsRender\n                            \n                            \n                                    Public\n                                removePass\n                            \n                            \n                                    Public\n                                setAntialiasing\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(camera: Camera, scene: Scene, renderer: WebGLRenderer)\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/effects-manager.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for the effects manager which manages effects and three.js passes.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        camera\n                                                  \n                                                        \n                                                                    Camera\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The camera inside the scene.\n\n                                                        \n                                                \n                                                \n                                                        scene\n                                                  \n                                                        \n                                                                    Scene\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The default scene used for event display.\n\n                                                        \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    WebGLRenderer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The main renderer used by the event display.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            antialiasing\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/effects-manager.ts:20\n                            \n                        \n\n                \n                    \n                        Whether antialiasing is enabled or disabled. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            camera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/effects-manager.ts:14\n                            \n                        \n\n                \n                    \n                        The camera inside the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            composer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EffectComposer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/effects-manager.ts:12\n                            \n                        \n\n                \n                    \n                        Effect composer for effect passes. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            defaultRenderPass\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RenderPass\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/effects-manager.ts:18\n                            \n                        \n\n                \n                    \n                        Render pass for rendering the default scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            render\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/effects-manager.ts:23\n                            \n                        \n\n                \n                    \n                        Render function with (normal render) or without antialias (effects render). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            scene\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Scene\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/effects-manager.ts:16\n                            \n                        \n\n                \n                    \n                        The default scene used for event display. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addOutlinePassForSelection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addOutlinePassForSelection()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/effects-manager.ts:69\n                \n            \n\n\n            \n                \n                    Initialize the outline pass for highlighting hovered over event display elements.\n\n\n                    \n                    \n                    \n                        Returns :     OutlinePass\n\n                    \n                    \n                        OutlinePass for highlighting hovered over event display elements.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            antialiasRender\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    antialiasRender(scene: Scene, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/effects-manager.ts:61\n                \n            \n\n\n            \n                \n                    Render for antialias without the effects composer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The default scene used for event display.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            effectsRender\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    effectsRender(scene: Scene, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/effects-manager.ts:48\n                \n            \n\n\n            \n                \n                    Render the effects composer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The default scene used for event display.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removePass\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removePass(pass: Pass)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/effects-manager.ts:88\n                \n            \n\n\n            \n                \n                    Remove a pass from the effect composer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pass\n                                    \n                                            Pass\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Effect pass to be removed from the effect composer.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setAntialiasing\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setAntialiasing(antialias: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/effects-manager.ts:97\n                \n            \n\n\n            \n                \n                    Set the antialiasing of renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    antialias\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether antialiasing is to enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { Camera, Scene, WebGLRenderer, Vector2, NormalBlending } from 'three';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass';\nimport { Pass } from 'three/examples/jsm/postprocessing/Pass';\n\n/**\n * Manager for managing three.js event display effects like outline pass and unreal bloom.\n */\nexport class EffectsManager {\n  /** Effect composer for effect passes. */\n  public composer: EffectComposer;\n  /** The camera inside the scene. */\n  private camera: Camera;\n  /** The default scene used for event display. */\n  private scene: Scene;\n  /** Render pass for rendering the default scene. */\n  private defaultRenderPass: RenderPass;\n  /** Whether antialiasing is enabled or disabled. */\n  public antialiasing: boolean = true;\n\n  /** Render function with (normal render) or without antialias (effects render). */\n  public render: (scene: Scene, camera: Camera) => void;\n\n  /**\n   * Constructor for the effects manager which manages effects and three.js passes.\n   * @param camera The camera inside the scene.\n   * @param scene The default scene used for event display.\n   * @param renderer The main renderer used by the event display.\n   */\n  constructor(camera: Camera, scene: Scene, renderer: WebGLRenderer) {\n    this.composer = new EffectComposer(renderer);\n    this.camera = camera;\n    this.scene = scene;\n\n    this.defaultRenderPass = new RenderPass(this.scene, this.camera);\n    this.composer.addPass(this.defaultRenderPass);\n\n    // Set the starting render function\n    this.render = this.antialiasing ? this.antialiasRender : this.effectsRender;\n  }\n\n  /**\n   * Render the effects composer.\n   * @param scene The default scene used for event display.\n   * @param camera The camera inside the scene.\n   */\n  private effectsRender(scene: Scene, camera: Camera) {\n    if (this.composer) {\n      this.defaultRenderPass.camera = camera;\n      this.defaultRenderPass.scene = scene;\n      this.composer.render();\n    }\n  }\n\n  /**\n   * Render for antialias without the effects composer.\n   * @param scene The default scene used for event display.\n   * @param camera The camera inside the scene.\n   */\n  private antialiasRender(scene: Scene, camera: Camera) {\n    this.composer.renderer.render(scene, camera);\n  }\n\n  /**\n   * Initialize the outline pass for highlighting hovered over event display elements.\n   * @returns OutlinePass for highlighting hovered over event display elements.\n   */\n  public addOutlinePassForSelection(): OutlinePass {\n    const outlinePass = new OutlinePass(\n      new Vector2(window.innerWidth, window.innerHeight),\n      this.scene,\n      this.camera\n    );\n    outlinePass.overlayMaterial.blending = NormalBlending;\n    outlinePass.visibleEdgeColor.set(0xffff66);\n    outlinePass.visibleEdgeColor.set(0xdf5330);\n\n    this.composer.addPass(outlinePass);\n\n    return outlinePass;\n  }\n\n  /**\n   * Remove a pass from the effect composer.\n   * @param pass Effect pass to be removed from the effect composer.\n   */\n  public removePass(pass: Pass) {\n    const passIndex = this.composer.passes.indexOf(pass);\n    this.composer.passes.splice(passIndex, 1);\n  }\n\n  /**\n   * Set the antialiasing of renderer.\n   * @param antialias Whether antialiasing is to enabled or disabled.\n   */\n  public setAntialiasing(antialias: boolean) {\n    this.antialiasing = antialias;\n    this.render = this.antialiasing ? this.antialiasRender : this.effectsRender;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EventDataLoader.html":{"url":"interfaces/EventDataLoader.html","title":"interface - EventDataLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EventDataLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/event-data-loader.ts\n        \n\n            \n                Description\n            \n            \n                Event data loader for implementing different event data loaders.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    addLabelToEventObject\n                                \n                                \n                                    buildEventData\n                                \n                                \n                                    getCollection\n                                \n                                \n                                    getCollections\n                                \n                                \n                                    getEventMetadata\n                                \n                                \n                                    getEventsList\n                                \n                                \n                                    getLabelsObject\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addLabelToEventObject\n                        \n                        \n                    \n                \n            \n            \n                \naddLabelToEventObject(label: string, collection: string, indexInCollection: number)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:57\n                \n            \n\n\n            \n                \n                    Add label of event object to the labels object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to add to the event object.\n\n                                    \n                                \n                                \n                                    collection\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Collection the event object is a part of.\n\n                                    \n                                \n                                \n                                    indexInCollection\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event object's index in collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A unique label ID string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \nbuildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:17\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Logger for logging event display data..\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \ngetCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:42\n                \n            \n\n\n            \n                \n                    Get all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Key of the collection that will be retrieved.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Object containing all physics objects from the desired collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \ngetCollections()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:35\n                \n            \n\n\n            \n                \n                    Get the different collections for the current stored event.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of strings, each representing a collection of the event displayed.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:48\n                \n            \n\n\n            \n                \n                    Get metadata associated to the displayed event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the displayed event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:29\n                \n            \n\n\n            \n                \n                    Takes an object containing multiple events and returns the keys of these events.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object that contains the different events.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of keys of the different events.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getLabelsObject\n                        \n                        \n                    \n                \n            \n            \n                \ngetLabelsObject()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:67\n                \n            \n\n\n            \n                \n                    Get the object containing labels.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The labels object.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ThreeManager } from '../managers/three-manager';\nimport { UIManager } from '../managers/ui-manager';\nimport { InfoLogger } from '../helpers/info-logger';\n\n/**\n * Event data loader for implementing different event data loaders.\n */\nexport interface EventDataLoader {\n  /**\n   * Takes an object that represents ONE event and takes care of adding\n   * the different objects to the graphic library and the UI controls.\n   * @param eventData Object representing the event.\n   * @param graphicsLibrary Manager containing functionality to draw the 3D objects.\n   * @param ui Manager for showing menus and controls to manipulate the geometries.\n   * @param infoLogger Logger for logging event display data..\n   */\n  buildEventData(\n    eventData: any,\n    graphicsLibrary: ThreeManager,\n    ui: UIManager,\n    infoLogger: InfoLogger\n  ): void;\n\n  /**\n   * Takes an object containing multiple events and returns the keys of these events.\n   * @param eventsData Object that contains the different events.\n   * @returns List of keys of the different events.\n   */\n  getEventsList(eventsData: any): string[];\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  getCollections(): string[];\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  getCollection(collectionName: string): any;\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  getEventMetadata(): any[];\n\n  /**\n   * Add label of event object to the labels object.\n   * @param label Label to add to the event object.\n   * @param collection Collection the event object is a part of.\n   * @param indexInCollection Event object's index in collection.\n   * @returns A unique label ID string.\n   */\n  addLabelToEventObject(\n    label: string,\n    collection: string,\n    indexInCollection: number\n  ): string;\n\n  /**\n   * Get the object containing labels.\n   * @returns The labels object.\n   */\n  getLabelsObject(): object;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExportManager.html":{"url":"classes/ExportManager.html","title":"class - ExportManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExportManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/export-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's export related functionality.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                exportPhoenixScene\n                            \n                            \n                                    Public\n                                exportSceneToOBJ\n                            \n                            \n                                    Private\n                                saveEventDataConfiguration\n                            \n                            \n                                    Private\n                                saveGeometriesConfiguration\n                            \n                            \n                                    Private\n                                saveSceneConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            exportPhoenixScene\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exportPhoenixScene(scene: Scene, eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/export-manager.ts:27\n                \n            \n\n\n            \n                \n                    Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene to be exported.\n\n                                    \n                                \n                                \n                                    eventData\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded event data.\n\n                                    \n                                \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            exportSceneToOBJ\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exportSceneToOBJ(scene: Scene)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/export-manager.ts:14\n                \n            \n\n\n            \n                \n                    Exports scene to OBJ file format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene to be exported.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveEventDataConfiguration\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveEventDataConfiguration(eventData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/export-manager.ts:66\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveGeometriesConfiguration\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveGeometriesConfiguration(geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/export-manager.ts:85\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded geometries.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveSceneConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveSceneConfig(eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/export-manager.ts:52\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded scene including event data and geometries.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Curently loaded event data.\n\n                                    \n                                \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { eventData: {}; geometries: {}; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { OBJExporter } from 'three/examples/jsm/exporters/OBJExporter';\nimport { Scene, Object3D } from 'three';\nimport { GLTFExporter } from 'three/examples/jsm/exporters/GLTFExporter';\nimport { saveFile } from '../../helpers/file';\n\n/**\n * Manager for managing event display's export related functionality.\n */\nexport class ExportManager {\n  /**\n   * Exports scene to OBJ file format.\n   * @param scene The scene to be exported.\n   */\n  public exportSceneToOBJ(scene: Scene) {\n    // Instantiate a exporter\n    const exporter = new OBJExporter();\n    const result = exporter.parse(scene);\n    saveFile(result, 'phoenix-obj.obj', 'text/plain');\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   * @param scene The scene to be exported.\n   * @param eventData Currently loaded event data.\n   * @param geometries Currently loaded geometries.\n   */\n  public exportPhoenixScene(\n    scene: Scene,\n    eventData: Object3D,\n    geometries: Object3D\n  ) {\n    const exporter = new GLTFExporter();\n\n    const sceneConfig = this.saveSceneConfig(eventData, geometries);\n    // Parse the input and generate the glTF output\n    exporter.parse(\n      scene,\n      (result) => {\n        const jsonResult = { sceneConfiguration: sceneConfig, scene: result };\n        const output = JSON.stringify(jsonResult, null, 2);\n        saveFile(output, 'phoenix-scene.phnx', 'text/plain');\n      },\n      null\n    );\n  }\n\n  /**\n   * Save the configuration of the currently loaded scene including event data and geometries.\n   * @param eventData Curently loaded event data.\n   * @param geometries Currently loaded geometries.\n   */\n  private saveSceneConfig(eventData: Object3D, geometries: Object3D) {\n    const eventDataConfig = this.saveEventDataConfiguration(eventData);\n    const geometriesConfig = this.saveGeometriesConfiguration(geometries);\n    const sceneConfig = {\n      eventData: eventDataConfig,\n      geometries: geometriesConfig,\n    };\n    return sceneConfig;\n  }\n\n  /**\n   * Save the configuration of the currently loaded event data.\n   * @param eventData Currently loaded event data.\n   */\n  private saveEventDataConfiguration(eventData: any) {\n    const eventDataConfig = {};\n    for (const objectType of eventData.children) {\n      if (objectType.name) {\n        eventDataConfig[objectType.name] = [];\n        for (const collection of objectType.children) {\n          if (collection.name) {\n            eventDataConfig[objectType.name].push(collection.name);\n          }\n        }\n      }\n    }\n    return eventDataConfig;\n  }\n\n  /**\n   * Save the configuration of the currently loaded geometries.\n   * @param geometries Currently loaded geometries.\n   */\n  private saveGeometriesConfiguration(geometries: Object3D) {\n    const geometriesConfig = [];\n    geometries.children.forEach((object) => {\n      if (object.name !== 'EventData') {\n        geometriesConfig.push(object.name);\n      }\n    });\n    return geometriesConfig;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Field.html":{"url":"classes/Field.html","title":"class - Field","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n            \n                Description\n            \n            \n                Default class to define the field.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(field: Vector3)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:192\n                \n            \n\n\n            \n                \n                    Returns field as a Vector3 in Tesla.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Vector3\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(half_h))\n        .add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir\n        .clone()\n        .add(k1.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir\n        .clone()\n        .add(k2.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(h))\n        .add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir\n        .clone()\n        .add(k3.clone().multiplyScalar(h))\n        .cross(B_last)\n        .multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return (\n        h *\n        (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z))\n      );\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    let fh: number = state.stepSize;\n    let fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(\n      k1\n        .clone()\n        .add(k2)\n        .add(k3)\n        .multiplyScalar(fh2 / 6)\n    );\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(\n      k1\n        .clone()\n        .add(k2.clone().multiplyScalar(2))\n        .add(k3.clone().multiplyScalar(2))\n        .add(k4)\n        .multiplyScalar(fh / 6)\n    );\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3,\n    startDir: Vector3,\n    p: number,\n    q: number,\n    mss: number = -1,\n    plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3; dir: Vector3 }[] {\n    let rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    let result: { pos: Vector3; dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InfoLogger.html":{"url":"classes/InfoLogger.html","title":"class - InfoLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InfoLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/info-logger.ts\n        \n\n            \n                Description\n            \n            \n                Logger for logging event display data\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                infoLoggerList\n                            \n                            \n                                    Private\n                                maxEntries\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                getInfoLoggerList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            infoLoggerList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/info-logger.ts:6\n                            \n                        \n\n                \n                    \n                        List that contains all the info logs \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            maxEntries\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/info-logger.ts:8\n                            \n                        \n\n                \n                    \n                        Max entries to be shown inside the information panel \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(data: string, label?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/info-logger.ts:15\n                \n            \n\n\n            \n                \n                    Add an entry to the info logger\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Data of the info log\n\n                                    \n                                \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Label of the info log\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getInfoLoggerList\n                        \n                        \n                    \n                \n            \n            \n                \ngetInfoLoggerList()\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/info-logger.ts:26\n                \n            \n\n\n            \n                \n                    Get the info logger list being used by the info logger service\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        The info logger list containing log data\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class InfoLogger {\n  /** List that contains all the info logs */\n  private infoLoggerList: any[] = [];\n  /** Max entries to be shown inside the information panel */\n  private maxEntries: number = 10;\n\n  /**\n   * Add an entry to the info logger\n   * @param data Data of the info log\n   * @param label Label of the info log\n   */\n  add(data: string, label?: string) {\n    if (this.infoLoggerList.length > this.maxEntries) {\n      this.infoLoggerList.pop();\n    }\n    this.infoLoggerList.unshift(label ? label + ': ' + data : data);\n  }\n\n  /**\n   * Get the info logger list being used by the info logger service\n   * @returns The info logger list containing log data\n   */\n  getInfoLoggerList(): any[] {\n    return this.infoLoggerList;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LHCbLoader.html":{"url":"classes/LHCbLoader.html","title":"class - LHCbLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LHCbLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/lhcb-loader.ts\n        \n\n            \n                Description\n            \n            \n                PhoenixLoader for processing and loading an LHCb event.\n\n            \n\n            \n                Extends\n            \n            \n                        PhoenixLoader\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                data\n                            \n                            \n                                    Protected\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Protected\n                                labelsObject\n                            \n                            \n                                    Protected\n                                loadingManager\n                            \n                            \n                                    Protected\n                                stateManager\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getEventData\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                process\n                            \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Public\n                                addLabelToEventObject\n                            \n                            \n                                    Protected\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Public\n                                getLabelsObject\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                    Protected\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/loaders/lhcb-loader.ts:8\n                            \n                        \n\n                \n                    \n                            Constructor for the LHCb loader.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/lhcb-loader.ts:8\n                            \n                        \n\n                \n                    \n                        Event data to be processed. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:22\n\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:18\n\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            labelsObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:28\n\n                            \n                        \n\n                \n                    \n                        Object containing event object labels. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            loadingManager\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LoadingManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:24\n\n                            \n                        \n\n                \n                    \n                        Loading manager for loadable resources \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            stateManager\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         StateManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:26\n\n                            \n                        \n\n                \n                    \n                        Loading manager for loadable resources \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:20\n\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventData()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/lhcb-loader.ts:31\n                \n            \n\n\n            \n                \n                    Process and get the event data.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The processed event data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/lhcb-loader.ts:62\n                \n            \n\n\n            \n                \n                    Get LHCb specific metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            process\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    process(data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/lhcb-loader.ts:22\n                \n            \n\n\n            \n                \n                    Set the event data for the loader.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event data as JSON.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group, concatonateObjs: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:392\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                                \n                                    concatonateObjs\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If true, don't process objects individually, but process as a group (e.g. for point hits).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLabelToEventObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabelToEventObject(label: string, collection: string, indexInCollection: number)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:551\n\n                \n            \n\n\n            \n                \n                    Add label of event object to the labels object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to be saved.\n\n                                    \n                                \n                                \n                                    collection\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Collection the event object is a part of.\n\n                                    \n                                \n                                \n                                    indexInCollection\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event object's index in collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A unique label ID string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, concatonateObjs: boolean, cuts?: Cut[], extendEventDataTypeUI?: (typeFolder?: GUI,typeFolderPM?: PhoenixMenuNode) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:340\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    concatonateObjs\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        If true, don't process objects individually, but process as a group (e.g. for point hits). Default is false.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                                \n                                    extendEventDataTypeUI\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        A callback to add more options to event data type UI folder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:46\n\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphics library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:122\n\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:98\n\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:496\n\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:82\n\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLabelsObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLabelsObject()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:577\n\n                \n            \n\n\n            \n                \n                    Get the object containing labels.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The labels object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:443\n\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:426\n\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:143\n\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PhoenixLoader } from './phoenix-loader';\n\n/**\n * PhoenixLoader for processing and loading an LHCb event.\n */\nexport class LHCbLoader extends PhoenixLoader {\n  /** Event data to be processed. */\n  private data: any;\n\n  /**\n   * Constructor for the LHCb loader.\n   */\n  constructor() {\n    super();\n    this.data = {};\n  }\n\n  /**\n   * Set the event data for the loader.\n   * @param data Event data as JSON.\n   */\n  public process(data: any) {\n    console.log('Processing event data');\n    this.data = data;\n  }\n\n  /**\n   * Process and get the event data.\n   * @returns The processed event data.\n   */\n  public getEventData(): any {\n    const eventData = {\n      eventNumber: this.data.eventNumber,\n      runNumber: this.data.runNumber,\n      Hits: {},\n      Tracks: {},\n    };\n\n    let part_list = [];\n    const pdata_list = this.data.PARTICLES;\n    if (pdata_list) {\n      for (let j = 0; j \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadingManager.html":{"url":"classes/LoadingManager.html","title":"class - LoadingManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadingManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/loading-manager.ts\n        \n\n            \n                Description\n            \n            \n                Phoenix loading manager for managing loadable items.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                instance\n                            \n                            \n                                    Public\n                                loaded\n                            \n                            \n                                    Private\n                                onLoadCallbacks\n                            \n                            \n                                    Private\n                                onProgressCallbacks\n                            \n                            \n                                    Private\n                                progressItems\n                            \n                            \n                                    Public\n                                toLoad\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addLoadableItem\n                            \n                            \n                                    Public\n                                addLoadListener\n                            \n                            \n                                    Public\n                                addLoadListenerWithCheck\n                            \n                            \n                                    Public\n                                addProgressListener\n                            \n                            \n                                    Public\n                                itemLoaded\n                            \n                            \n                                    Public\n                                onProgress\n                            \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/loading-manager.ts:19\n                            \n                        \n\n                \n                    \n                            Create the singleton Phoenix loading manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            instance\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LoadingManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:6\n                            \n                        \n\n                \n                    \n                        Instance of the loading manager \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            loaded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:11\n                            \n                        \n\n                \n                    \n                        Items loaded \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onLoadCallbacks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     (function)[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:14\n                            \n                        \n\n                \n                    \n                        Callbacks to call on load. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onProgressCallbacks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     (function)[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:16\n                            \n                        \n\n                \n                    \n                        Callbacks to call on progress. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            progressItems\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:19\n                            \n                        \n\n                \n                    \n                        Progress for each named item. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toLoad\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:9\n                            \n                        \n\n                \n                    \n                        Items to load. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLoadableItem\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLoadableItem(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:36\n                \n            \n\n\n            \n                \n                    Add count for a loadable item.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        ID of the item to be loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLoadListener\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLoadListener(callback: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:83\n                \n            \n\n\n            \n                \n                    Add a listener for when all items have loaded.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call when all items have loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLoadListenerWithCheck\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLoadListenerWithCheck(callback: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:92\n                \n            \n\n\n            \n                \n                    Add a listener for when all items have loaded and check if there\nare any items to load when the listener is added.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call when all items have loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addProgressListener\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addProgressListener(callback: (progress: number) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:104\n                \n            \n\n\n            \n                \n                    Add a listener for when an item progress.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call when there is progress.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            itemLoaded\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    itemLoaded(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:45\n                \n            \n\n\n            \n                \n                    Add count for an item is loaded.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        ID of the item loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            onProgress\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onProgress(id: string, progress: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:63\n                \n            \n\n\n            \n                \n                    When an item loading progresses.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the item with the progress.\n\n                                    \n                                \n                                \n                                    progress\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Progress of the item.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:111\n                \n            \n\n\n            \n                \n                    Reset the loading manager and its items.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class LoadingManager {\n  /** Instance of the loading manager */\n  private static instance: LoadingManager;\n\n  /** Items to load. */\n  public toLoad: string[] = [];\n  /** Items loaded */\n  public loaded: string[] = [];\n\n  /** Callbacks to call on load. */\n  private onLoadCallbacks: (() => void)[] = [];\n  /** Callbacks to call on progress. */\n  private onProgressCallbacks: ((progress: number) => void)[] = [];\n\n  /** Progress for each named item. */\n  private progressItems: { [key: string]: number } = {};\n\n  /**\n   * Create the singleton Phoenix loading manager.\n   * @returns The loading manager instance.\n   */\n  constructor() {\n    if (LoadingManager.instance === undefined) {\n      LoadingManager.instance = this;\n    }\n    return LoadingManager.instance;\n  }\n\n  /**\n   * Add count for a loadable item.\n   * @param id ID of the item to be loaded.\n   */\n  public addLoadableItem(id: string = '') {\n    this.toLoad.push(id);\n    this.progressItems[id] = 0;\n  }\n\n  /**\n   * Add count for an item is loaded.\n   * @param id ID of the item loaded.\n   */\n  public itemLoaded(id: string = '') {\n    this.loaded.push(id);\n    this.onProgress(id, 100);\n\n    if (\n      this.toLoad.length === this.loaded.length &&\n      this.toLoad.sort().join(',') === this.loaded.sort().join(',')\n    ) {\n      this.onLoadCallbacks.forEach((callback) => callback());\n      this.reset();\n    }\n  }\n\n  /**\n   * When an item loading progresses.\n   * @param id ID of the item with the progress.\n   * @param progress Progress of the item.\n   */\n  public onProgress(id: string, progress: number) {\n    this.progressItems[id] = progress;\n\n    let totalProgress = Object.values(this.progressItems).reduce(\n      (acc, val) => acc + val,\n      0\n    );\n    let totalItems = Object.keys(this.progressItems).length;\n\n    const averageProgress = totalProgress / totalItems;\n\n    for (const callback of this.onProgressCallbacks) {\n      callback(averageProgress);\n    }\n  }\n\n  /**\n   * Add a listener for when all items have loaded.\n   * @param callback Callback to call when all items have loaded.\n   */\n  public addLoadListener(callback: () => void) {\n    this.onLoadCallbacks.push(callback);\n  }\n\n  /**\n   * Add a listener for when all items have loaded and check if there\n   * are any items to load when the listener is added.\n   * @param callback Callback to call when all items have loaded.\n   */\n  public addLoadListenerWithCheck(callback: () => void) {\n    if (this.toLoad.length > 0 && this.toLoad.length !== this.loaded.length) {\n      this.onLoadCallbacks.push(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Add a listener for when an item progress.\n   * @param callback Callback to call when there is progress.\n   */\n  public addProgressListener(callback: (progress: number) => void) {\n    this.onProgressCallbacks.push(callback);\n  }\n\n  /**\n   * Reset the loading manager and its items.\n   */\n  public reset() {\n    this.toLoad = [];\n    this.loaded = [];\n    this.onLoadCallbacks = [];\n    this.onProgressCallbacks = [];\n    this.progressItems = {};\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixMenuNode.html":{"url":"classes/PhoenixMenuNode.html","title":"class - PhoenixMenuNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixMenuNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts\n        \n\n            \n                Description\n            \n            \n                A single node of phoenix menu item.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                children\n                            \n                            \n                                childrenActive\n                            \n                            \n                                    Private\n                                childrenToggleState\n                            \n                            \n                                configActive\n                            \n                            \n                                configs\n                            \n                            \n                                icon\n                            \n                            \n                                name\n                            \n                            \n                                nodeLevel\n                            \n                            \n                                onToggle\n                            \n                            \n                                    Private\n                                parent\n                            \n                            \n                                toggleState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addChild\n                            \n                            \n                                addConfig\n                            \n                            \n                                applyConfigState\n                            \n                            \n                                findInTree\n                            \n                            \n                                findInTreeOrCreate\n                            \n                            \n                                getNodeState\n                            \n                            \n                                loadStateFromJSON\n                            \n                            \n                                remove\n                            \n                            \n                                removeChild\n                            \n                            \n                                toggleSelfAndDescendants\n                            \n                            \n                                truncate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, icon?: string, onToggle?: (value?: boolean) => void, children?: PhoenixMenuNode[], configs?: any[], parent?: PhoenixMenuNode)\n                    \n                \n                        \n                            \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:42\n                            \n                        \n\n                \n                    \n                            Create the phoenix menu node.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the node.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Icon of the node.\n\n                                                        \n                                                \n                                                \n                                                        onToggle\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Function on toggling the node.\n\n                                                        \n                                                \n                                                \n                                                        children\n                                                  \n                                                        \n                                                                        PhoenixMenuNode[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Children of the node.\n\n                                                        \n                                                \n                                                \n                                                        configs\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Configuration options in the node.\n\n                                                        \n                                                \n                                                \n                                                        parent\n                                                  \n                                                        \n                                                                        PhoenixMenuNode\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Parent of the node.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:26\n                            \n                        \n\n                \n                    \n                        Children of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            childrenActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:40\n                            \n                        \n\n                \n                    \n                        If the node children are active or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            childrenToggleState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:37\n                            \n                        \n\n                \n                    \n                        Previous toggle state of child nodes. This is so that the\nprevious state of child can be restored if we toggle the parent back on.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            configActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:42\n                            \n                        \n\n                \n                    \n                        If the node configuration options are active or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            configs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:28\n                            \n                        \n\n                \n                    \n                        Configuration options in the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            icon\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:20\n                            \n                        \n\n                \n                    \n                        Icon of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:18\n                            \n                        \n\n                \n                    \n                        Name of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nodeLevel\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:30\n                            \n                        \n\n                \n                    \n                        Level of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onToggle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:22\n                            \n                        \n\n                \n                    \n                        Function on toggling the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            parent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:32\n                            \n                        \n\n                \n                    \n                        Parent of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toggleState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:24\n                            \n                        \n\n                \n                    \n                        If the node toggle state is true or false. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addChild\n                        \n                        \n                    \n                \n            \n            \n                \naddChild(name: string, onToggle?: (value?: boolean) => void, icon?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:76\n                \n            \n\n\n            \n                \n                    Add a child to the phoenix menu item.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the child.\n\n                                    \n                                \n                                \n                                    onToggle\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function on toggling the child.\n\n                                    \n                                \n                                \n                                    icon\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Icon of the child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The child node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addConfig\n                        \n                        \n                    \n                \n            \n            \n                \naddConfig(type: PhoenixMenuConfig, options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:125\n                \n            \n\n\n            \n                \n                    Add a config to the phoenix menu item.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                PhoenixMenuConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Type of configuration.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Options for the config.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The current node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            applyConfigState\n                        \n                        \n                    \n                \n            \n            \n                \napplyConfigState(config: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:158\n                \n            \n\n\n            \n                \n                    Apply the current values of config by calling the change function.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Config whose values are to be applied.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findInTree\n                        \n                        \n                    \n                \n            \n            \n                \nfindInTree(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:248\n                \n            \n\n\n            \n                \n                    Find a node in the tree by name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the node to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The found node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findInTreeOrCreate\n                        \n                        \n                    \n                \n            \n            \n                \nfindInTreeOrCreate(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:266\n                \n            \n\n\n            \n                \n                    Find a node in the tree by name or create one.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the node to find or create.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The found or created node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNodeState\n                        \n                        \n                    \n                \n            \n            \n                \ngetNodeState()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:181\n                \n            \n\n\n            \n                \n                    Get current state of the node as an object.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        State of the node as an object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadStateFromJSON\n                        \n                        \n                    \n                \n            \n            \n                \nloadStateFromJSON(json: string | object)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:202\n                \n            \n\n\n            \n                \n                    Load the state of the phoenix menu node from JSON.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    json\n                                    \n                                            string | object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        JSON containing the phoenix menu node state.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:102\n                \n            \n\n\n            \n                \n                    Remove the current node.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeChild\n                        \n                        \n                    \n                \n            \n            \n                \nremoveChild(child: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:93\n                \n            \n\n\n            \n                \n                    Remove a child node.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The child node to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The current node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleSelfAndDescendants\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleSelfAndDescendants(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:138\n                \n            \n\n\n            \n                \n                    Function for toggling the current and all child nodes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the node itself and descendants are to be made true or false.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            truncate\n                        \n                        \n                    \n                \n            \n            \n                \ntruncate()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:115\n                \n            \n\n\n            \n                \n                    Remove all children.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export type PhoenixMenuConfig =\n  | 'checkbox'\n  | 'slider'\n  | 'button'\n  | 'label'\n  | 'color'\n  | 'rangeSlider'\n  | 'select';\n\n/**\n * A single node of phoenix menu item.\n */\nexport class PhoenixMenuNode {\n  /** Name of the node. */\n  name: string;\n  /** Icon of the node. */\n  icon: string;\n  /** Function on toggling the node. */\n  onToggle: (value: boolean) => void;\n  /** If the node toggle state is true or false. */\n  toggleState: boolean = true;\n  /** Children of the node. */\n  children: PhoenixMenuNode[] = [];\n  /** Configuration options in the node. */\n  configs: any[] = [];\n  /** Level of the node. */\n  nodeLevel: number = 0;\n  /** Parent of the node. */\n  private parent: PhoenixMenuNode;\n  /**\n   * Previous toggle state of child nodes. This is so that the\n   * previous state of child can be restored if we toggle the parent back on.\n   * */\n  private childrenToggleState = {};\n\n  /** If the node children are active or not. */\n  childrenActive: boolean = false;\n  /** If the node configuration options are active or not. */\n  configActive: boolean = false;\n\n  /**\n   * Create the phoenix menu node.\n   * @param name Name of the node.\n   * @param icon Icon of the node.\n   * @param onToggle Function on toggling the node.\n   * @param children Children of the node.\n   * @param configs Configuration options in the node.\n   * @param parent Parent of the node.\n   */\n  constructor(\n    name: string,\n    icon?: string,\n    onToggle?: (value: boolean) => void,\n    children?: PhoenixMenuNode[],\n    configs?: any[],\n    parent?: PhoenixMenuNode\n  ) {\n    this.name = name;\n    this.icon = icon;\n    this.onToggle = onToggle;\n    if (children) this.children = children;\n    if (configs) this.configs = configs;\n    if (parent) this.parent = parent;\n  }\n\n  /**\n   * Add a child to the phoenix menu item.\n   * @param name Name of the child.\n   * @param onToggle Function on toggling the child.\n   * @param icon Icon of the child.\n   * @returns The child node.\n   */\n  addChild(\n    name: string,\n    onToggle?: (value: boolean) => void,\n    icon?: string\n  ): PhoenixMenuNode {\n    const child = new PhoenixMenuNode(name, icon, onToggle);\n    child.parent = this;\n    child.nodeLevel = this.nodeLevel + 1;\n    this.children.push(child);\n    return child;\n  }\n\n  /**\n   * Remove a child node.\n   * @param child The child node to be removed.\n   * @returns The current node.\n   */\n  removeChild(child: PhoenixMenuNode): PhoenixMenuNode {\n    const childIndex = this.children.indexOf(child);\n    this.children.splice(childIndex, 1);\n    return this;\n  }\n\n  /**\n   * Remove the current node.\n   */\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    } else {\n      console.error(\n        'Cannot delete root node of phoenix menu. Set it to undefined/null instead.'\n      );\n    }\n  }\n\n  /**\n   * Remove all children.\n   */\n  truncate() {\n    this.children = [];\n  }\n\n  /**\n   * Add a config to the phoenix menu item.\n   * @param type Type of configuration.\n   * @param options Options for the config.\n   * @returns The current node.\n   */\n  addConfig(type: PhoenixMenuConfig, options: any): PhoenixMenuNode {\n    let configOptions = { type };\n    Object.assign(configOptions, options);\n    const configsLength = this.configs.push(configOptions);\n    // Apply the values of config\n    this.applyConfigState(this.configs[configsLength - 1]);\n    return this;\n  }\n\n  /**\n   * Function for toggling the current and all child nodes.\n   * @param value If the node itself and descendants are to be made true or false.\n   */\n  toggleSelfAndDescendants(value: boolean) {\n    this.onToggle?.(value);\n    this.toggleState = value;\n    for (const child of this.children) {\n      if (!value) {\n        // Save previous toggle state of children and toggle them false\n        this.childrenToggleState[child.name] = child.toggleState;\n        child.toggleSelfAndDescendants(value);\n      } else {\n        // Restore previous toggle state of children\n        child.toggleState = this.childrenToggleState[child.name];\n        child.toggleSelfAndDescendants(child.toggleState);\n      }\n    }\n  }\n\n  /**\n   * Apply the current values of config by calling the change function.\n   * @param config Config whose values are to be applied.\n   */\n  applyConfigState(config: any) {\n    // Apply configs of different config types - manual\n    if (config.type === 'checkbox' && config?.['isChecked']) {\n      config.onChange?.(config?.['isChecked']);\n    } else if (config.type === 'color' && config?.['color']) {\n      config.onChange?.(config?.['color']);\n    } else if (config.type === 'slider' && config?.['value']) {\n      config.onChange?.(config?.['value']);\n    } else if (\n      config.type === 'rangeSlider' &&\n      config?.['value'] !== undefined\n    ) {\n      config.onChange?.({\n        value: config?.['value'],\n        highValue: config?.['highValue'],\n      });\n    }\n  }\n\n  /**\n   * Get current state of the node as an object.\n   * @returns State of the node as an object.\n   */\n  getNodeState(): object {\n    const phoenixNodeJSON: object = {};\n\n    phoenixNodeJSON['name'] = this.name;\n    phoenixNodeJSON['nodeLevel'] = this.nodeLevel;\n    phoenixNodeJSON['toggleState'] = this.toggleState;\n    phoenixNodeJSON['childrenActive'] = this.childrenActive;\n    phoenixNodeJSON['configs'] = this.configs;\n    phoenixNodeJSON['children'] = [];\n\n    for (const child of this.children) {\n      phoenixNodeJSON['children'].push(child.getNodeState());\n    }\n\n    return phoenixNodeJSON;\n  }\n\n  /**\n   * Load the state of the phoenix menu node from JSON.\n   * @param json JSON containing the phoenix menu node state.\n   */\n  loadStateFromJSON(json: string | object) {\n    let jsonObject: any;\n    if (typeof json === 'string') {\n      jsonObject = JSON.parse(json);\n    } else {\n      jsonObject = json;\n    }\n\n    this.childrenActive = jsonObject['childrenActive'];\n    this.toggleState = jsonObject['toggleState'];\n    this.onToggle?.(this.toggleState);\n\n    for (const configState of jsonObject['configs']) {\n      const nodeConfig = this.configs.find(\n        (nodeConfig) =>\n          nodeConfig.type === configState['type'] &&\n          nodeConfig.label === configState['label']\n      );\n\n      if (nodeConfig) {\n        for (const prop in configState) {\n          nodeConfig[prop] = configState[prop];\n        }\n\n        this.applyConfigState(nodeConfig);\n      }\n    }\n\n    for (const childState of jsonObject['children']) {\n      const nodeChild = this.children.filter(\n        (nodeChild) =>\n          nodeChild.name === childState.name &&\n          nodeChild.nodeLevel === childState.nodeLevel\n      )[0];\n\n      if (nodeChild) {\n        nodeChild.loadStateFromJSON(childState);\n      }\n    }\n  }\n\n  /**\n   * Find a node in the tree by name.\n   * @param name Name of the node to find.\n   * @returns The found node.\n   */\n  findInTree(name: string): PhoenixMenuNode {\n    if (this.name === name) {\n      return this;\n    } else {\n      for (const child of this.children) {\n        const nodeFound = child.findInTree(name);\n        if (nodeFound) {\n          return nodeFound;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find a node in the tree by name or create one.\n   * @param name Name of the node to find or create.\n   * @returns The found or created node.\n   */\n  findInTreeOrCreate(name: string): PhoenixMenuNode {\n    let prevNode: PhoenixMenuNode = this;\n    name.split('>').forEach((nodeName) => {\n      nodeName = nodeName.trim();\n      const nodeFound = prevNode.findInTree(nodeName);\n      // const nodeFound = prevNode.children.find(child => child.name === nodeName);\n\n      prevNode = nodeFound ? nodeFound : prevNode.addChild(nodeName, () => {});\n    });\n    return prevNode;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixMenuUI.html":{"url":"classes/PhoenixMenuUI.html","title":"class - PhoenixMenuUI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixMenuUI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts\n        \n\n            \n                Description\n            \n            \n                A wrapper class for Phoenix menu to perform UI related operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                colorOptions\n                            \n                            \n                                    Private\n                                eventFolder\n                            \n                            \n                                    Private\n                                eventFolderState\n                            \n                            \n                                    Private\n                                geomFolder\n                            \n                            \n                                    Private\n                                labelsFolder\n                            \n                            \n                                    Private\n                                phoenixMenu\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addCollection\n                            \n                            \n                                    Public\n                                addEventDataFolder\n                            \n                            \n                                    Public\n                                addEventDataTypeFolder\n                            \n                            \n                                    Public\n                                addGeometry\n                            \n                            \n                                    Public\n                                addGeomFolder\n                            \n                            \n                                    Public\n                                addLabel\n                            \n                            \n                                    Public\n                                addLabelsFolder\n                            \n                            \n                                    Public\n                                clearPhoenixMenu\n                            \n                            \n                                    Public\n                                loadEventFolderState\n                            \n                            \n                                    Public\n                                removeLabelNode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(phoenixMenu: PhoenixMenuNode, three: ThreeManager)\n                    \n                \n                        \n                            \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:24\n                            \n                        \n\n                \n                    \n                            Create Phoenix menu UI with different controls related to detector geometry and event data.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        phoenixMenu\n                                                  \n                                                        \n                                                                        PhoenixMenuNode\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        three\n                                                  \n                                                        \n                                                                        ThreeManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The three manager for managing three.js related operations.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            colorOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ColorOptions\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:24\n                            \n                        \n\n                \n                    \n                        Color options with functions to color event data. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventFolder\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:18\n                            \n                        \n\n                \n                    \n                        Phoenix menu node containing event related data. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventFolderState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:20\n                            \n                        \n\n                \n                    \n                        State of the Phoenix menu node containing event related data. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            geomFolder\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:16\n                            \n                        \n\n                \n                    \n                        Phoenix menu node containing geometries data \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            labelsFolder\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:22\n                            \n                        \n\n                \n                    \n                        Phoenix menu node containing labels. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            phoenixMenu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:14\n                            \n                        \n\n                \n                    \n                        Root node of the phoenix menu. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(typeFolder: PhoenixMenuNode, collectionName: string, cuts?: Cut[], collectionColor?: Color)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:201\n                \n            \n\n\n            \n                \n                    Add collection node and its configurable options to the event data type (tracks, hits etc.) node.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    typeFolder\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Phoenix menu node of an event data type.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to be added in the type of event data (tracks, hits etc.).\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Cuts to the collection of event data that are to be made configurable to filter event data.\n\n                                    \n                                \n                                \n                                    collectionColor\n                                    \n                                            Color\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Default color of the collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addEventDataFolder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addEventDataFolder()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:159\n                \n            \n\n\n            \n                \n                    Functions for event data toggles like show/hide and depthTest.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addEventDataTypeFolder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addEventDataTypeFolder(typeName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:188\n                \n            \n\n\n            \n                \n                    Add folder for event data type like tracks or hits to the Phoenix menu.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the type of event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        Phoenix menu's folder for event data type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addGeometry(name: string, color: any, menuNodeName?: string, initiallyVisible: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:112\n                \n            \n\n\n            \n                \n                    Adds geometry to the dat.GUI menu's geometry folder and sets up its configurable options.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Name of the geometry.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Color of the geometry.\n\n                                    \n                                \n                                \n                                    menuNodeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Name of the node in Phoenix menu to add the geometry to.\n\n                                    \n                                \n                                \n                                    initiallyVisible\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        Whether the geometry is initially visible or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addGeomFolder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addGeomFolder()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:58\n                \n            \n\n\n            \n                \n                    Add geometry (detector geometry) folder to the Phoenix menu.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLabel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabel(labelId: string, removeLabel?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:345\n                \n            \n\n\n            \n                \n                    Add configuration UI for label.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    labelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Unique ID of the label.\n\n                                    \n                                \n                                \n                                    removeLabel\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to remove label from the scene.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLabelsFolder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabelsFolder(configFunctions: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:295\n                \n            \n\n\n            \n                \n                    Add labels folder to Phoenix menu.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configFunctions\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Functions to attach to the labels folder configuration.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clearPhoenixMenu\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clearPhoenixMenu()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:45\n                \n            \n\n\n            \n                \n                    Clear the Phoenix menu.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            loadEventFolderState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadEventFolderState()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:390\n                \n            \n\n\n            \n                \n                    Load previous state of the event data folder in Phoenix menu if any.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeLabelNode\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLabelNode(labelId: string, labelNode?: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:377\n                \n            \n\n\n            \n                \n                    Remove label from UI, scene and event data loader if it exists.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    labelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A unique label ID string.\n\n                                    \n                                \n                                \n                                    labelNode\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Phoenix menu node of the label if any.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Color } from 'three';\nimport { SceneManager } from '../../three-manager/scene-manager';\nimport { ThreeManager } from '../../three-manager';\nimport { PhoenixMenuNode } from './phoenix-menu-node';\nimport { Cut } from '../../../extras/cut.model';\nimport { PrettySymbols } from '../../../helpers/pretty-symbols';\nimport { ColorByOptionKeys, ColorOptions } from '../color-options';\n\n/**\n * A wrapper class for Phoenix menu to perform UI related operations.\n */\nexport class PhoenixMenuUI {\n  /** Root node of the phoenix menu. */\n  private phoenixMenu: PhoenixMenuNode;\n  /** Phoenix menu node containing geometries data */\n  private geomFolder: PhoenixMenuNode;\n  /** Phoenix menu node containing event related data. */\n  private eventFolder: PhoenixMenuNode;\n  /** State of the Phoenix menu node containing event related data. */\n  private eventFolderState: any;\n  /** Phoenix menu node containing labels. */\n  private labelsFolder: PhoenixMenuNode;\n  /** Color options with functions to color event data. */\n  private colorOptions: ColorOptions;\n\n  /**\n   * Create Phoenix menu UI with different controls related to detector geometry and event data.\n   * @param three The three manager for managing three.js related operations.\n   */\n  constructor(phoenixMenu: PhoenixMenuNode, private three: ThreeManager) {\n    if (this.phoenixMenu) {\n      this.phoenixMenu.truncate();\n      this.phoenixMenu = undefined;\n    }\n    this.phoenixMenu = phoenixMenu;\n\n    this.geomFolder = null;\n    this.eventFolder = null;\n    this.labelsFolder = null;\n  }\n\n  /**\n   * Clear the Phoenix menu.\n   */\n  public clearPhoenixMenu() {\n    if (this.phoenixMenu) {\n      this.phoenixMenu.truncate();\n      this.phoenixMenu = undefined;\n    }\n    this.geomFolder = null;\n    this.eventFolder = null;\n    this.labelsFolder = null;\n  }\n\n  /**\n   * Add geometry (detector geometry) folder to the Phoenix menu.\n   */\n  public addGeomFolder() {\n    // Phoenix menu\n    if (this.geomFolder === null) {\n      this.geomFolder = this.phoenixMenu.addChild(\n        'Detector',\n        (value: boolean) => {\n          this.three\n            .getSceneManager()\n            .groupVisibility(SceneManager.GEOMETRIES_ID, value);\n        },\n        'perspective'\n      );\n    }\n    this.geomFolder\n      .addConfig('checkbox', {\n        label: 'Wireframe',\n        isChecked: false,\n        onChange: (value: boolean) => {\n          this.three.getSceneManager().wireframeGeometries(value);\n        },\n      })\n      .addConfig('slider', {\n        label: 'Opacity',\n        min: 0,\n        max: 1,\n        step: 0.01,\n        allowCustomValue: true,\n        onChange: (value: number) => {\n          this.three\n            .getSceneManager()\n            .setGeometryOpacity(SceneManager.GEOMETRIES_ID, value);\n        },\n      })\n      .addConfig('slider', {\n        label: 'Scale',\n        min: 0,\n        max: 20,\n        step: 0.01,\n        allowCustomValue: true,\n        onChange: (scale: number) => {\n          this.three\n            .getSceneManager()\n            .scaleObject(SceneManager.GEOMETRIES_ID, scale);\n        },\n      });\n  }\n\n  /**\n   * Adds geometry to the dat.GUI menu's geometry folder and sets up its configurable options.\n   * @param name Name of the geometry.\n   * @param color Color of the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public addGeometry(\n    name: string,\n    color: any,\n    menuNodeName?: string,\n    initiallyVisible: boolean = true\n  ) {\n    let parentNode: PhoenixMenuNode = this.geomFolder;\n    if (menuNodeName) {\n      parentNode = this.geomFolder.findInTreeOrCreate(menuNodeName);\n    }\n\n    const objFolder = parentNode.addChild(name, (value: boolean) => {\n      this.three.getSceneManager().objectVisibility(name, value);\n    });\n\n    objFolder.toggleState = initiallyVisible;\n\n    objFolder\n      .addConfig('color', {\n        label: 'Color',\n        color: color ? `#${new Color(color).getHexString()}` : undefined,\n        onChange: (value: any) => {\n          this.three.getSceneManager().changeObjectColor(name, value);\n        },\n      })\n      .addConfig('slider', {\n        label: 'Opacity',\n        min: 0,\n        max: 1,\n        step: 0.05,\n        allowCustomValue: true,\n        onChange: (opacity: number) => {\n          this.three.getSceneManager().setGeometryOpacity(name, opacity);\n        },\n      })\n      .addConfig('button', {\n        label: 'Remove',\n        onClick: () => {\n          objFolder.remove();\n          this.three.getSceneManager().removeGeometry(name);\n        },\n      });\n  }\n\n  /**\n   * Functions for event data toggles like show/hide and depthTest.\n   */\n  public addEventDataFolder() {\n    // Phoenix menu\n    if (this.eventFolder !== null) {\n      this.eventFolderState = this.eventFolder.getNodeState();\n      this.eventFolder.remove();\n    }\n    this.eventFolder = this.phoenixMenu.addChild(\n      'Event Data',\n      (value: boolean) => {\n        this.three\n          .getSceneManager()\n          .groupVisibility(SceneManager.EVENT_DATA_ID, value);\n      },\n      'event-folder'\n    );\n    this.eventFolder.addConfig('checkbox', {\n      label: 'Depth Test',\n      isChecked: true,\n      onChange: (value: boolean) => {\n        this.three.eventDataDepthTest(value);\n      },\n    });\n  }\n\n  /**\n   * Add folder for event data type like tracks or hits to the Phoenix menu.\n   * @param typeName Name of the type of event data.\n   * @returns Phoenix menu's folder for event data type.\n   */\n  public addEventDataTypeFolder(typeName: string): PhoenixMenuNode {\n    return this.eventFolder.addChild(typeName, (value: boolean) => {\n      this.three.getSceneManager().objectVisibility(typeName, value);\n    });\n  }\n\n  /**\n   * Add collection node and its configurable options to the event data type (tracks, hits etc.) node.\n   * @param typeFolder Phoenix menu node of an event data type.\n   * @param collectionName Name of the collection to be added in the type of event data (tracks, hits etc.).\n   * @param cuts Cuts to the collection of event data that are to be made configurable to filter event data.\n   * @param collectionColor Default color of the collection.\n   */\n  public addCollection(\n    typeFolder: PhoenixMenuNode,\n    collectionName: string,\n    cuts?: Cut[],\n    collectionColor?: Color\n  ) {\n    const collectionNode = typeFolder.addChild(\n      collectionName,\n      (value: boolean) => {\n        this.three\n          .getSceneManager()\n          .objectVisibility(collectionName, value, SceneManager.EVENT_DATA_ID);\n      }\n    );\n\n    const drawOptionsNode = collectionNode.addChild('Draw Options');\n\n    drawOptionsNode.addConfig('slider', {\n      label: 'Opacity',\n      min: 0.1,\n      step: 0.1,\n      max: 1,\n      onChange: (value: number) => {\n        this.three.getSceneManager().setGeometryOpacity(collectionName, value);\n      },\n    });\n\n    drawOptionsNode.addConfig('checkbox', {\n      label: 'Wireframe',\n      onChange: (value: boolean) =>\n        this.three.getSceneManager().wireframeObjects(collectionName, value),\n    });\n\n    if (cuts && cuts.length > 0) {\n      const cutsOptionsNode = collectionNode.addChild('Cut Options');\n\n      cutsOptionsNode\n        .addConfig('label', {\n          label: 'Cuts',\n        })\n        .addConfig('button', {\n          label: 'Reset cuts',\n          onClick: () => {\n            this.three\n              .getSceneManager()\n              .groupVisibility(\n                collectionName,\n                true,\n                SceneManager.EVENT_DATA_ID\n              );\n\n            for (const cut of cuts) {\n              cut.reset();\n            }\n          },\n        });\n\n      // Add range sliders for cuts\n      for (const cut of cuts) {\n        cutsOptionsNode.addConfig('rangeSlider', {\n          label: PrettySymbols.getPrettySymbol(cut.field),\n          min: cut.minValue,\n          max: cut.maxValue,\n          step: cut.step,\n          value: cut.minValue,\n          highValue: cut.maxValue,\n          onChange: (values: any) => {\n            cut.minValue = values?.value;\n            cut.maxValue = values?.highValue;\n            this.three.getSceneManager().collectionFilter(collectionName, cuts);\n          },\n        });\n      }\n    }\n\n    const colorByOptions: ColorByOptionKeys[] = [];\n\n    // Extra config options specific to tracks\n    if (typeFolder.name === 'Tracks') {\n      colorByOptions.push(ColorByOptionKeys.CHARGE, ColorByOptionKeys.MOM);\n    }\n\n    new ColorOptions(\n      this.three.getColorManager(),\n      collectionNode,\n      collectionColor,\n      colorByOptions\n    );\n  }\n\n  /**\n   * Add labels folder to Phoenix menu.\n   * @param configFunctions Functions to attach to the labels folder configuration.\n   */\n  public addLabelsFolder(configFunctions: any) {\n    if (this.labelsFolder !== null) {\n      return;\n    }\n\n    const {\n      onToggle,\n      onSizeChange,\n      onColorChange,\n      onSaveLabels,\n      onLoadLabels,\n    } = configFunctions;\n\n    this.labelsFolder = this.phoenixMenu.addChild(\n      SceneManager.LABELS_ID,\n      onToggle,\n      'info'\n    );\n\n    this.labelsFolder.addConfig('slider', {\n      label: 'Size',\n      min: 0,\n      max: 10,\n      step: 0.01,\n      allowCustomValue: true,\n      onChange: onSizeChange,\n    });\n\n    this.labelsFolder.addConfig('color', {\n      label: 'Color',\n      color: '#a8a8a8',\n      onChange: onColorChange,\n    });\n\n    this.labelsFolder.addConfig('button', {\n      label: 'Save Labels',\n      onClick: onSaveLabels,\n    });\n\n    this.labelsFolder.addConfig('button', {\n      label: 'Load Labels',\n      onClick: onLoadLabels,\n    });\n  }\n\n  /**\n   * Add configuration UI for label.\n   * @param labelId Unique ID of the label.\n   * @param removeLabel Function to remove label from the scene.\n   */\n  public addLabel(labelId: string, removeLabel?: () => void) {\n    let labelNode = this.labelsFolder.children.find(\n      (phoenixMenuNode) => phoenixMenuNode.name === labelId\n    );\n    if (!labelNode) {\n      labelNode = this.labelsFolder.addChild(labelId, (value) => {\n        this.three.getSceneManager().objectVisibility(labelId, value);\n      });\n\n      labelNode.addConfig('color', {\n        label: 'Color',\n        color: '#a8a8a8',\n        onChange: (value: any) => {\n          this.three.getSceneManager().changeObjectColor(labelId, value);\n        },\n      });\n\n      labelNode.addConfig('button', {\n        label: 'Remove',\n        onClick: () => {\n          removeLabel?.();\n          this.removeLabelNode(labelId, labelNode);\n        },\n      });\n    }\n  }\n\n  /**\n   * Remove label from UI, scene and event data loader if it exists.\n   * @param labelId A unique label ID string.\n   * @param labelNode Phoenix menu node of the label if any.\n   */\n  public removeLabelNode(labelId: string, labelNode?: PhoenixMenuNode) {\n    if (!labelNode) {\n      labelNode = this.labelsFolder?.children.find(\n        (singleLabelNode) => singleLabelNode.name === labelId\n      );\n    }\n\n    labelNode?.remove();\n  }\n\n  /**\n   * Load previous state of the event data folder in Phoenix menu if any.\n   */\n  public loadEventFolderState() {\n    if (this.eventFolderState) {\n      this.eventFolder.loadStateFromJSON(this.eventFolderState);\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixObjects.html":{"url":"classes/PhoenixObjects.html","title":"class - PhoenixObjects","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixObjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/phoenix-objects.ts\n        \n\n            \n                Description\n            \n            \n                Physics objects that make up an event in Phoenix.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getCluster\n                            \n                            \n                                    Static\n                                getHits\n                            \n                            \n                                    Static\n                                getJet\n                            \n                            \n                                    Static\n                                getMissingEnergy\n                            \n                            \n                                    Static\n                                getTrack\n                            \n                            \n                                    Static\n                                getVertex\n                            \n                            \n                                    Private\n                                    Static\n                                hitsToLines\n                            \n                            \n                                    Private\n                                    Static\n                                hitsToPoints\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getCluster\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCluster(clusterParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:334\n                \n            \n\n\n            \n                \n                    Process the CLuster from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    clusterParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Cluster.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Cluster object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getHits\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHits(hitsParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:196\n                \n            \n\n\n            \n                \n                    Process the Hits from the given parameters and get them as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hitsParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Either an array of positions, or of Hit objects. If objects, they must contain 'pos', the array of [x,y,z] positions,\nCan optionally contain extraInfo, which will be added to the resultant hit.\ntype tells Phoenix how to draw this - currently can be Point (default), or Line.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Hits object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getJet\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getJet(jetParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:129\n                \n            \n\n\n            \n                \n                    Process the Jet from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jetParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Jet.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Jet object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getMissingEnergy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMissingEnergy(metParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:412\n                \n            \n\n\n            \n                \n                    Process the Vertex from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    metParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Vertex.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        MET object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getTrack\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTrack(trackParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:39\n                \n            \n\n\n            \n                \n                    Process the Track from the given parameters (and positions)\nand get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    trackParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Track.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Track object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getVertex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVertex(vertexParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:386\n                \n            \n\n\n            \n                \n                    Process the Vertex from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    vertexParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Vertex.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Vertex object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            hitsToLines\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hitsToLines(pointPos: any, hitsParams: any, hitParamsClone: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:305\n                \n            \n\n\n            \n                \n                    Get a Lines object from Hits parameters.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pointPos\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Position of the HIt.\n\n                                    \n                                \n                                \n                                    hitsParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Hit.\n\n                                    \n                                \n                                \n                                    hitParamsClone\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Cloned parameters of the Hit to avoid object references.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        A 3D object of type LineSegments.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            hitsToPoints\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hitsToPoints(pointPos: any, hitsParams: any, hitParamsClone: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:275\n                \n            \n\n\n            \n                \n                    Get a Points object from Hits parameters.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pointPos\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Position of the point.\n\n                                    \n                                \n                                \n                                    hitsParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Hit.\n\n                                    \n                                \n                                \n                                    hitParamsClone\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Cloned parameters of the Hit to avoid object references.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        A 3D object of type Points.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Vector3,\n  Object3D,\n  CatmullRomCurve3,\n  TubeBufferGeometry,\n  MeshToonMaterial,\n  Mesh,\n  BufferGeometry,\n  LineBasicMaterial,\n  Line,\n  Group,\n  Quaternion,\n  CylinderBufferGeometry,\n  MeshBasicMaterial,\n  BufferAttribute,\n  PointsMaterial,\n  Points,\n  BoxBufferGeometry,\n  MeshPhongMaterial,\n  SphereBufferGeometry,\n  LineSegments,\n  LineDashedMaterial,\n  Spherical,\n} from 'three';\nimport { EVENT_DATA_TYPE_COLORS } from '../../helpers/constants';\nimport { RKHelper } from '../../helpers/rk-helper';\nimport { CoordinateHelper } from '../../helpers/coordinate-helper';\n\n/**\n * Physics objects that make up an event in Phoenix.\n */\nexport class PhoenixObjects {\n  /**\n   * Process the Track from the given parameters (and positions)\n   * and get it as a geometry.\n   * @param trackParams Parameters of the Track.\n   * @returns Track object.\n   */\n  public static getTrack(trackParams: any): Object3D {\n    let positions = trackParams.pos;\n    if (!positions) {\n      return;\n    }\n\n    // Track with too few points are extrapolated with RungeKutta\n    if (positions.length  3000) return false;\n          if (Math.sqrt(pos.x * pos.x + pos.y * pos.y) > 1100) return false;\n\n          return true;\n        };\n\n        positions = RKHelper.extrapolateTrackPositions(trackParams, inBounds);\n      }\n    }\n\n    // Check again, in case there was an issue with the extrapolation.\n    if (positions.length  3000) {\n      length = 3000;\n    }\n    const width = length * 0.1;\n\n    const sphi = Math.sin(phi);\n    const cphi = Math.cos(phi);\n    const stheta = Math.sin(theta);\n    const ctheta = Math.cos(theta);\n    //\n    const translation = new Vector3(\n      0.5 * length * cphi * stheta,\n      0.5 * length * sphi * stheta,\n      0.5 * length * ctheta\n    );\n\n    const x = cphi * stheta;\n    const y = sphi * stheta;\n    const z = ctheta;\n    const v1 = new Vector3(0, 1, 0);\n    const v2 = new Vector3(x, y, z);\n    const quaternion = new Quaternion();\n    quaternion.setFromUnitVectors(v1, v2);\n\n    const geometry = new CylinderBufferGeometry(\n      width,\n      1,\n      length,\n      50,\n      50,\n      false\n    ); // Cone\n\n    const material = new MeshBasicMaterial({\n      color: jetParams.color ?? EVENT_DATA_TYPE_COLORS.Jets,\n      opacity: 0.3,\n      transparent: true,\n    });\n    material.opacity = 0.5;\n    const mesh = new Mesh(geometry, material);\n    mesh.position.copy(translation);\n    mesh.quaternion.copy(quaternion);\n    mesh.userData = Object.assign({}, jetParams);\n    mesh.name = 'Jet';\n    // Setting uuid for selection from collections info\n    jetParams.uuid = mesh.uuid;\n\n    return mesh;\n  }\n\n  /**\n   * Process the Hits from the given parameters and get them as a geometry.\n   * @param hitsParams Either an array of positions, or of Hit objects. If objects, they must contain 'pos', the array of [x,y,z] positions,\n   * Can optionally contain extraInfo, which will be added to the resultant hit.\n   * `type` tells Phoenix how to draw this - currently can be Point (default), or Line.\n   * @returns Hits object.\n   */\n  public static getHits(hitsParams: any): Object3D {\n    let hitsParamsClone: any;\n    let positions: any[];\n    let type: string = 'Point'; // Default is point and 3 coordinates per hit\n    let coordlength = 3;\n    let isSimpleArray = false;\n\n    // if (typeof hitsParams === 'object' && !Array.isArray(hitsParams)) {\n    //   positions = [hitsParams.pos];\n    //   hitsParamsClone = hitsParams;\n    // } else {\n    //   positions = hitsParams;\n    //   hitsParamsClone = { pos: hitsParams };\n    // }\n\n    if (hitsParams.length > 0) {\n      // Peek at first one. Would be better to make these properties of the collections.\n      const first = hitsParams[0];\n      if (Array.isArray(first)) {\n        isSimpleArray = true;\n        hitsParamsClone = { pos: hitsParams };\n      } else {\n        hitsParamsClone = hitsParams;\n        if ('type' in first) {\n          type = first.type;\n        }\n      }\n    } else {\n      console.log('No hits! Aborting from getHits.');\n      return new Object3D();\n    }\n\n    // Lines need 6 coords\n    if (type === 'Line') {\n      coordlength = 6;\n    }\n\n    // attributes\n    let hitLength = hitsParams.length * coordlength;\n    if (isSimpleArray) length = hitLength; // These are already arrays\n    const pointPos = new Float32Array(hitLength);\n    let i = 0;\n    for (const hit of hitsParams) {\n      for (let j = 0; j  maxR2) {\n      position.setLength(\n        (position.length() * Math.sqrt(maxR2)) / Math.sqrt(cylRadius2)\n      );\n    }\n\n    if (Math.abs(position.z) > maxZ) {\n      position.setLength((position.length() * maxZ) / Math.abs(position.z));\n    }\n\n    cube.position.copy(position);\n\n    cube.lookAt(new Vector3(0, 0, 0));\n    cube.userData = Object.assign({}, clusterParams);\n    cube.name = 'Cluster';\n    // Setting uuid for selection from collections info\n    clusterParams.uuid = cube.uuid;\n\n    return cube;\n  }\n\n  /**\n   * Process the Vertex from the given parameters and get it as a geometry.\n   * @param vertexParams Parameters for the Vertex.\n   * @returns Vertex object.\n   */\n  public static getVertex(vertexParams: any): Object3D {\n    // geometry\n    const geometry = new SphereBufferGeometry(3);\n    // material\n    const material = new MeshPhongMaterial({\n      color: vertexParams.color ?? EVENT_DATA_TYPE_COLORS.Vertices,\n    });\n    // object\n    const sphere = new Mesh(geometry, material);\n    sphere.position.x = vertexParams.x;\n    sphere.position.y = vertexParams.y;\n    sphere.position.z = vertexParams.y;\n\n    sphere.userData = Object.assign({}, vertexParams);\n    sphere.name = 'Vertex';\n    // Setting uuid for selection from collections info\n    vertexParams.uuid = sphere.uuid;\n\n    return sphere;\n  }\n\n  /**\n   * Process the Vertex from the given parameters and get it as a geometry.\n   * @param metParams Parameters for the Vertex.\n   * @returns MET object.\n   */\n  public static getMissingEnergy(metParams: any): Object3D {\n    // geometry\n    const points = [];\n    points.push(new Vector3(0, 0, 0));\n    points.push(new Vector3(metParams.etx, metParams.ety, 0));\n\n    const geometry = new BufferGeometry().setFromPoints(points);\n\n    // material\n    const material = new LineDashedMaterial({\n      linewidth: 2,\n      dashSize: 2,\n      color: metParams.color ?? EVENT_DATA_TYPE_COLORS.MissingEnergy,\n    });\n    // object\n    const object = new Line(geometry, material);\n    object.computeLineDistances();\n    object.userData = Object.assign({}, metParams);\n    object.name = 'Missing Energy';\n    // Setting uuid for selection from collections info\n    metParams.uuid = object.uuid;\n\n    return object;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresetView.html":{"url":"classes/PresetView.html","title":"class - PresetView","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresetView\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extras/preset-view.model.ts\n        \n\n            \n                Description\n            \n            \n                Preset view for easily transforming/changing camera position to a specified position.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraPos\n                            \n                            \n                                    Public\n                                icon\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                setView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getIconURL\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, cameraPos: number[], icon: string)\n                    \n                \n                        \n                            \n                                Defined in src/extras/preset-view.model.ts:14\n                            \n                        \n\n                \n                    \n                            Create a preset view.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the preset view.\n\n                                                        \n                                                \n                                                \n                                                        cameraPos\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Position to which the camera is to be set.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Icon of the preset view (to describe the view angle).\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cameraPos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:8\n                            \n                        \n\n                \n                    \n                        Position to which the camera is to be set. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            icon\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:6\n                            \n                        \n\n                \n                    \n                        Icon of the preset view (to describe the view angle). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:10\n                            \n                        \n\n                \n                    \n                        Name of the preset view. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setView\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:14\n                            \n                        \n\n                \n                    \n                        Set the preset view.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIconURL\n                        \n                        \n                    \n                \n            \n            \n                \ngetIconURL()\n                \n            \n\n\n            \n                \n                    Defined in src/extras/preset-view.model.ts:32\n                \n            \n\n\n            \n                \n                    Get the URL of the preset view icon.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Icon URL.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class PresetView {\n  /** Icon of the preset view (to describe the view angle). */\n  public icon: string;\n  /** Position to which the camera is to be set. */\n  public cameraPos: number[];\n  /** Name of the preset view. */\n  public name: string;\n  /**\n   * Set the preset view.\n   */\n  setView: () => void;\n\n  /**\n   * Create a preset view.\n   * @param name Name of the preset view.\n   * @param cameraPos Position to which the camera is to be set.\n   * @param icon Icon of the preset view (to describe the view angle).\n   */\n  constructor(name: string, cameraPos: number[], icon: string) {\n    this.name = name;\n    this.cameraPos = cameraPos;\n    this.icon = icon;\n  }\n\n  /**\n   * Get the URL of the preset view icon.\n   * @returns Icon URL.\n   */\n  getIconURL(): string {\n    return 'assets/preset-views/' + this.icon + '.svg#' + this.icon;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrettySymbols.html":{"url":"classes/PrettySymbols.html","title":"class - PrettySymbols","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrettySymbols\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/pretty-symbols.ts\n        \n\n            \n                Description\n            \n            \n                Helper for pretty symbols functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                symbols\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getPrettyParams\n                            \n                            \n                                    Static\n                                getPrettySymbol\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            symbols\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    θ: ['theta'],\n    ϕ: ['phi'],\n    pT: ['pt'],\n    '𝛘2': ['chi2'],\n    η: ['eta'],\n    q: ['charge'],\n    NDOF: ['ndof'],\n    DOF: ['dof'],\n    Energy: ['energy'],\n    ET: ['et'],\n    '|p|': ['momentum', 'mom'],\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/pretty-symbols.ts:6\n                            \n                        \n\n                \n                    \n                        Pretty symbols for object params. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getPrettyParams\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrettyParams(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/pretty-symbols.ts:37\n                \n            \n\n\n            \n                \n                    Get pretty printed parameters of an object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object parameters to be pretty printed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        New pretty printed parameterss.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getPrettySymbol\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrettySymbol(param: string)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/pretty-symbols.ts:24\n                \n            \n\n\n            \n                \n                    Get pretty symbol of a parameter.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    param\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameter of a physics object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class PrettySymbols {\n  /** Pretty symbols for object params. */\n  public static readonly symbols: { [key: string]: string[] } = {\n    θ: ['theta'],\n    ϕ: ['phi'],\n    pT: ['pt'],\n    '𝛘2': ['chi2'],\n    η: ['eta'],\n    q: ['charge'],\n    NDOF: ['ndof'],\n    DOF: ['dof'],\n    Energy: ['energy'],\n    ET: ['et'],\n    '|p|': ['momentum', 'mom'],\n  };\n\n  /**\n   * Get pretty symbol of a parameter.\n   * @param param Parameter of a physics object.\n   */\n  public static getPrettySymbol(param: string) {\n    const prettySymbol = Object.keys(PrettySymbols.symbols).find((symbol) =>\n      PrettySymbols.symbols[symbol].includes(param)\n    );\n\n    return prettySymbol ? prettySymbol : param;\n  }\n\n  /**\n   * Get pretty printed parameters of an object.\n   * @param params Object parameters to be pretty printed.\n   * @returns New pretty printed parameterss.\n   */\n  public static getPrettyParams(params: { [key: string]: any }): object {\n    // Create a copy of the params so we don't overwrite the original object\n    const paramsCopy = Object.assign({}, params);\n    // Go through all the parameters\n    for (const paramKey of Object.keys(paramsCopy)) {\n      // Get the pretty printed symbol\n      const symbol = PrettySymbols.getPrettySymbol(paramKey);\n      // If we do get a symbol\n      if (symbol !== paramKey) {\n        // Add a parameter with pretty printed symbol\n        paramsCopy[symbol] = paramsCopy[paramKey];\n        delete paramsCopy[paramKey];\n      }\n    }\n\n    // Delete 'pos' since it's too long and not needed\n    delete paramsCopy['pos'];\n\n    // Pretty print the dparams if any\n    if (paramsCopy?.dparams) {\n      const prettyDParams: object = {};\n\n      prettyDParams['θ'] = paramsCopy.dparams[3];\n      prettyDParams['ϕ'] = paramsCopy.dparams[2];\n      prettyDParams['|p|'] = Math.abs(1 / paramsCopy.dparams[4]);\n      prettyDParams['q'] = Math.sign(1 / paramsCopy.dparams[4]);\n      prettyDParams['d0'] = paramsCopy.dparams[0];\n      prettyDParams['z0'] = paramsCopy.dparams[1];\n\n      delete paramsCopy.dparams;\n\n      return { ...paramsCopy, ...prettyDParams };\n    }\n\n    return paramsCopy;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RKHelper.html":{"url":"classes/RKHelper.html","title":"class - RKHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RKHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/rk-helper.ts\n        \n\n            \n                Description\n            \n            \n                Helper methods for RungeKutta functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                extrapolateTrackPositions\n                            \n                            \n                                    Static\n                                getTracksWithRungeKutta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            extrapolateTrackPositions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    extrapolateTrackPositions(track: literal type, inbounds: (pos: Vector3) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/rk-helper.ts:33\n                \n            \n\n\n            \n                \n                    Extrapolate tracks using RungeKutta propagator.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    track\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Track which is to be extrapolated.\n\n                                    \n                                \n                                \n                                    inbounds\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        () => true\n                                    \n\n                                    \n                                        Function which returns true until the passed position\nis out of bounds, when it returns false. Default just always returns true.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An array of track positions.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getTracksWithRungeKutta\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTracksWithRungeKutta(tracksCollectionsEvent: any)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/rk-helper.ts:13\n                \n            \n\n\n            \n                \n                    Get extrapolated tracks using RungeKutta.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tracksCollectionsEvent\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event containing tracks collections.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { RungeKutta } from './runge-kutta';\nimport { Vector3 } from 'three';\nimport { CoordinateHelper } from './coordinate-helper';\n\n/**\n * Helper methods for RungeKutta functions.\n */\nexport class RKHelper {\n  /**\n   * Get extrapolated tracks using RungeKutta.\n   * @param tracksCollectionsEvent Event containing tracks collections.\n   */\n  public static getTracksWithRungeKutta(tracksCollectionsEvent: any) {\n    const tracksCollections = Object.assign({}, tracksCollectionsEvent);\n    const Tracks = {};\n    for (const tracksCollection of Object.keys(tracksCollections)) {\n      for (const track of tracksCollections[tracksCollection]) {\n        track.pos = RKHelper.extrapolateTrackPositions(track);\n      }\n    }\n\n    return Tracks;\n  }\n\n  /**\n   * Extrapolate tracks using RungeKutta propagator.\n   * @param track Track which is to be extrapolated.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false. Default just always returns true.\n   * @returns An array of track positions.\n\n   */\n  public static extrapolateTrackPositions(\n    track: { dparams: any },\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): any {\n    const dparams = track.dparams;\n    // ATLAS uses mm, MeV\n    let d0 = dparams[0],\n      z0 = dparams[1],\n      phi = dparams[2],\n      theta = dparams[3],\n      qop = dparams[4];\n\n    let p: number;\n    if (qop !== 0) {\n      p = Math.abs(1 / qop);\n    } else {\n      p = 0;\n    }\n    const q = Math.round(p * qop);\n\n    let globalMomentum = CoordinateHelper.sphericalToCartesian(p, theta, phi);\n\n    let startPos = CoordinateHelper.sphericalToCartesian(d0, theta, phi);\n\n    // Wipe existing positions\n    let positions: number[][] = [];\n    positions.push([startPos.x, startPos.y, startPos.z]);\n\n    const startDir = globalMomentum.clone();\n    startDir.normalize();\n\n    // if (p  [\n      val.pos.x,\n      val.pos.y,\n      val.pos.z,\n    ]);\n\n    return positions.concat(extrapolatedPos);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RendererManager.html":{"url":"classes/RendererManager.html","title":"class - RendererManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RendererManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/renderer-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's renderer related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fixedOverlay\n                            \n                            \n                                    Private\n                                mainRenderer\n                            \n                            \n                                    Private\n                                overlayRenderer\n                            \n                            \n                                    Private\n                                renderers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addRenderer\n                            \n                            \n                                    Private\n                                containsObject\n                            \n                            \n                                    Public\n                                getLocalClipping\n                            \n                            \n                                getMainRenderer\n                            \n                            \n                                getOverlayRenderer\n                            \n                            \n                                getRenderers\n                            \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Private\n                                initRenderer\n                            \n                            \n                                isFixedOverlay\n                            \n                            \n                                    Public\n                                removeControls\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                setFixOverlay\n                            \n                            \n                                    Public\n                                setLocalClippingEnabled\n                            \n                            \n                                setMainRenderer\n                            \n                            \n                                    Public\n                                setOverlayRenderer\n                            \n                            \n                                setRenderers\n                            \n                            \n                                    Public\n                                swapRenderers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/renderer-manager.ts:14\n                            \n                        \n\n                \n                    \n                            Create the renderer manager by initializing the main renderer.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            fixedOverlay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/renderer-manager.ts:14\n                            \n                        \n\n                \n                    \n                        If the overlay is fixed or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            mainRenderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/renderer-manager.ts:8\n                            \n                        \n\n                \n                    \n                        Main renderer to be used by the event display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            overlayRenderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/renderer-manager.ts:10\n                            \n                        \n\n                \n                    \n                        Overlay renderer for rendering a secondary overlay canvas. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            renderers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/renderer-manager.ts:12\n                            \n                        \n\n                \n                    \n                        A list of all available/created renderers. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:152\n                \n            \n\n\n            \n                \n                    Add a renderer to the available renderers list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three.js WebGLRenderer to be added.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            containsObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    containsObject(obj: WebGLRenderer, list: WebGLRenderer[])\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:186\n                \n            \n\n\n            \n                \n                    Check if the list of available renderers contains a renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    obj\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The renderer to be checked for containment.\n\n                                    \n                                \n                                \n                                    list\n                                    \n                                            WebGLRenderer[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of available renderers.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If the list contains the renderer or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLocalClipping\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLocalClipping()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:209\n                \n            \n\n\n            \n                \n                    Get if the local clipping for the first renderer is enabled or disabled.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        If the renderer local clipping is enabled or disabled.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMainRenderer\n                        \n                        \n                    \n                \n            \n            \n                \ngetMainRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:126\n                \n            \n\n\n            \n                \n                    Get the main renderer.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer\n\n                    \n                    \n                        The main renderer.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOverlayRenderer\n                        \n                        \n                    \n                \n            \n            \n                \ngetOverlayRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:134\n                \n            \n\n\n            \n                \n                    Get the renderer used for overlay.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer\n\n                    \n                    \n                        The overlay renderer.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRenderers\n                        \n                        \n                    \n                \n            \n            \n                \ngetRenderers()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:142\n                \n            \n\n\n            \n                \n                    Get all the available renderers.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer[]\n\n                    \n                    \n                        A list of three.js WebGLRenderers\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init(elementId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:33\n                \n            \n\n\n            \n                \n                    Initialize the renderer manager by setting up the main renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    elementId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'eventDisplay'\n                                    \n\n                                    \n                                        ID of the wrapper element.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            initRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initRenderer(elementId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:63\n                \n            \n\n\n            \n                \n                    Set up the renderer with the DOM.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    elementId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the wrapper element.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isFixedOverlay\n                        \n                        \n                    \n                \n            \n            \n                \nisFixedOverlay()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:219\n                \n            \n\n\n            \n                \n                    Check if the overlay is fixed or not.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If the overlay is fixed or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeControls\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeControls(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:162\n                \n            \n\n\n            \n                \n                    Remove a renderer from the available renderers list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three,js WebGLRenderer to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            render\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    render(scene: Scene, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:45\n                \n            \n\n\n            \n                \n                    Render the overlay.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event display scene to render.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Camera for render.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setFixOverlay\n                        \n                        \n                    \n                \n            \n            \n                \nsetFixOverlay(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:227\n                \n            \n\n\n            \n                \n                    Set if the overlay is to be fixed or not.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the overlay is to be fixed or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setLocalClippingEnabled\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setLocalClippingEnabled(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:199\n                \n            \n\n\n            \n                \n                    Set if local clipping is to be enabled or disabled for all the available renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the local clipping is to be enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setMainRenderer\n                        \n                        \n                    \n                \n            \n            \n                \nsetMainRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:96\n                \n            \n\n\n            \n                \n                    Set the main renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three.js WebGLRenderer.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setOverlayRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setOverlayRenderer(overlayCanvas: HTMLCanvasElement)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:104\n                \n            \n\n\n            \n                \n                    Set the renderer for overlay event display view.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    overlayCanvas\n                                    \n                                            HTMLCanvasElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Canvas on which the overlay is to be rendered.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setRenderers\n                        \n                        \n                    \n                \n            \n            \n                \nsetRenderers(renderers: WebGLRenderer[])\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:118\n                \n            \n\n\n            \n                \n                    Set the available renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderers\n                                    \n                                            WebGLRenderer[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of three.js WebGLRenderers.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            swapRenderers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:174\n                \n            \n\n\n            \n                \n                    Swap any two renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    rendererA\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer A to be swapped with renderer B.\n\n                                    \n                                \n                                \n                                    rendererB\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer B to be swapped with renderer A.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebGLRenderer, Scene, Camera } from 'three';\n\n/**\n * Manager for managing event display's renderer related functions.\n */\nexport class RendererManager {\n  /** Main renderer to be used by the event display. */\n  private mainRenderer: WebGLRenderer = null;\n  /** Overlay renderer for rendering a secondary overlay canvas. */\n  private overlayRenderer: WebGLRenderer = null;\n  /** A list of all available/created renderers. */\n  private renderers: WebGLRenderer[] = [];\n  /** If the overlay is fixed or not. */\n  private fixedOverlay: boolean;\n\n  /**\n   * Create the renderer manager by initializing the main renderer.\n   */\n  constructor() {\n    const renderer: WebGLRenderer = new WebGLRenderer({\n      antialias: true,\n      powerPreference: 'high-performance',\n    });\n\n    this.addRenderer(renderer);\n    this.setMainRenderer(renderer);\n  }\n\n  /**\n   * Initialize the renderer manager by setting up the main renderer.\n   * @param elementId ID of the wrapper element.\n   */\n  public init(elementId: string = 'eventDisplay') {\n    // Reset the animation loop\n    this.getMainRenderer().setAnimationLoop(null);\n    // Main renderer for current browsers\n    this.initRenderer(elementId);\n  }\n\n  /**\n   * Render the overlay.\n   * @param scene The event display scene to render.\n   * @param camera Camera for render.\n   */\n  public render(scene: Scene, camera: Camera) {\n    if (this.getOverlayRenderer()) {\n      if (!this.getOverlayRenderer().domElement.hidden) {\n        const sceneColor = scene.background;\n        scene.background = null;\n\n        if (!this.isFixedOverlay()) {\n          this.getOverlayRenderer().render(scene, camera);\n        }\n        scene.background = sceneColor;\n      }\n    }\n  }\n\n  /**\n   * Set up the renderer with the DOM.\n   * @param elementId ID of the wrapper element.\n   */\n  private initRenderer(elementId: string) {\n    let canvasWrapper = document.getElementById(elementId);\n    if (!canvasWrapper) {\n      canvasWrapper = document.body;\n    }\n\n    const rendererWidth = () =>\n      canvasWrapper.offsetWidth > 0\n        ? canvasWrapper.offsetWidth\n        : window.innerWidth;\n    const rendererHeight = () =>\n      canvasWrapper.offsetHeight > 0\n        ? canvasWrapper.offsetHeight\n        : window.innerHeight;\n\n    const mainRenderer = this.getMainRenderer();\n    mainRenderer.setSize(rendererWidth(), rendererHeight(), false);\n    mainRenderer.setPixelRatio(window.devicePixelRatio);\n    mainRenderer.domElement.id = 'three-canvas';\n\n    canvasWrapper.appendChild(this.getMainRenderer().domElement);\n\n    window.addEventListener('resize', () => {\n      mainRenderer.setSize(rendererWidth(), rendererHeight());\n    });\n  }\n\n  // SET/GET\n\n  /**\n   * Set the main renderer.\n   * @param renderer Three.js WebGLRenderer.\n   */\n  setMainRenderer(renderer: WebGLRenderer) {\n    this.mainRenderer = renderer;\n  }\n\n  /**\n   * Set the renderer for overlay event display view.\n   * @param overlayCanvas Canvas on which the overlay is to be rendered.\n   */\n  public setOverlayRenderer(overlayCanvas: HTMLCanvasElement): void {\n    const overlayRenderer: WebGLRenderer = new WebGLRenderer({\n      canvas: overlayCanvas,\n      antialias: false,\n      alpha: true,\n    });\n    this.addRenderer(overlayRenderer);\n    this.overlayRenderer = overlayRenderer;\n  }\n\n  /**\n   * Set the available renderers.\n   * @param renderers List of three.js WebGLRenderers.\n   */\n  setRenderers(renderers: WebGLRenderer[]) {\n    this.renderers = renderers;\n  }\n\n  /**\n   * Get the main renderer.\n   * @returns The main renderer.\n   */\n  getMainRenderer(): WebGLRenderer {\n    return this.mainRenderer;\n  }\n\n  /**\n   * Get the renderer used for overlay.\n   * @returns The overlay renderer.\n   */\n  getOverlayRenderer(): WebGLRenderer {\n    return this.overlayRenderer;\n  }\n\n  /**\n   * Get all the available renderers.\n   * @returns A list of three.js WebGLRenderers\n   */\n  getRenderers(): WebGLRenderer[] {\n    return this.renderers;\n  }\n\n  // FUNCTIONS\n\n  /**\n   * Add a renderer to the available renderers list.\n   * @param renderer Three.js WebGLRenderer to be added.\n   */\n  public addRenderer(renderer: WebGLRenderer) {\n    if (!this.containsObject(renderer, this.renderers)) {\n      this.renderers.push(renderer);\n    }\n  }\n\n  /**\n   * Remove a renderer from the available renderers list.\n   * @param renderer Three,js WebGLRenderer to be removed.\n   */\n  public removeControls(renderer: WebGLRenderer) {\n    const index: number = this.renderers.indexOf(renderer);\n    if (index > -1) {\n      this.renderers.splice(index, 1);\n    }\n  }\n\n  /**\n   * Swap any two renderers.\n   * @param rendererA Renderer A to be swapped with renderer B.\n   * @param rendererB Renderer B to be swapped with renderer A.\n   */\n  public swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer) {\n    const temp: WebGLRenderer = rendererA;\n    rendererA = rendererB;\n    rendererB = temp;\n  }\n\n  /**\n   * Check if the list of available renderers contains a renderer.\n   * @param obj The renderer to be checked for containment.\n   * @param list List of available renderers.\n   * @returns If the list contains the renderer or not.\n   */\n  private containsObject(obj: WebGLRenderer, list: WebGLRenderer[]): boolean {\n    for (const object of list) {\n      if (object === obj) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set if local clipping is to be enabled or disabled for all the available renderers.\n   * @param value If the local clipping is to be enabled or disabled.\n   */\n  public setLocalClippingEnabled(value: boolean) {\n    for (const renderer of this.renderers) {\n      renderer.localClippingEnabled = value;\n    }\n  }\n\n  /**\n   * Get if the local clipping for the first renderer is enabled or disabled.\n   * @returns If the renderer local clipping is enabled or disabled.\n   */\n  public getLocalClipping() {\n    if (this.renderers.length > 0) {\n      return this.renderers[0].localClippingEnabled;\n    }\n  }\n\n  /**\n   * Check if the overlay is fixed or not.\n   * @returns If the overlay is fixed or not.\n   */\n  isFixedOverlay(): boolean {\n    return this.fixedOverlay;\n  }\n\n  /**\n   * Set if the overlay is to be fixed or not.\n   * @param value If the overlay is to be fixed or not.\n   */\n  setFixOverlay(value: boolean) {\n    this.fixedOverlay = value;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RungeKutta.html":{"url":"classes/RungeKutta.html","title":"class - RungeKutta","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RungeKutta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n            \n                Description\n            \n            \n                Class for performing Runge-Kutta operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                propagate\n                            \n                            \n                                    Static\n                                step\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            propagate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    propagate(startPos: Vector3, startDir: Vector3, p: number, q: number, mss: number, plength: number, inbounds: (pos: Vector3) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:126\n                \n            \n\n\n            \n                \n                    Propagate using the given properties by performing the Runge-Kutta steps.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    startPos\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Starting position in 3D space.\n\n                                    \n                                \n                                \n                                    startDir\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Starting direction in 3D space.\n\n                                    \n                                \n                                \n                                    p\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Momentum.\n\n                                    \n                                \n                                \n                                    q\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Charge.\n\n                                    \n                                \n                                \n                                    mss\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        -1\n                                    \n\n                                    \n                                        Max step size.\n\n                                    \n                                \n                                \n                                    plength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1000\n                                    \n\n                                    \n                                        Path length.\n\n                                    \n                                \n                                \n                                    inbounds\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        () => true\n                                    \n\n                                    \n                                        Function which returns true until the passed position\nis out of bounds, when it returns false.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type[]\n\n                    \n                    \n                        An array containing position and direction at that position calculated\nthrough the Runge-Kutta steps.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            step\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    step(state: State)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:12\n                \n            \n\n\n            \n                \n                    Perform a Runge-Kutta step for the given state.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                State\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State at which the step is to be performed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The computed step size.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(half_h))\n        .add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir\n        .clone()\n        .add(k1.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir\n        .clone()\n        .add(k2.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(h))\n        .add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir\n        .clone()\n        .add(k3.clone().multiplyScalar(h))\n        .cross(B_last)\n        .multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return (\n        h *\n        (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z))\n      );\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    let fh: number = state.stepSize;\n    let fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(\n      k1\n        .clone()\n        .add(k2)\n        .add(k3)\n        .multiplyScalar(fh2 / 6)\n    );\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(\n      k1\n        .clone()\n        .add(k2.clone().multiplyScalar(2))\n        .add(k3.clone().multiplyScalar(2))\n        .add(k4)\n        .multiplyScalar(fh / 6)\n    );\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3,\n    startDir: Vector3,\n    p: number,\n    q: number,\n    mss: number = -1,\n    plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3; dir: Vector3 }[] {\n    let rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    let result: { pos: Vector3; dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScriptLoader.html":{"url":"classes/ScriptLoader.html","title":"class - ScriptLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScriptLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/script-loader.ts\n        \n\n            \n                Description\n            \n            \n                Script loader for dynamically loading external scripts.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Async\n                                loadJSRootScripts\n                            \n                            \n                                    Static\n                                loadScript\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            Async\n                            loadJSRootScripts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadJSRootScripts(jsrootVersion: string)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/script-loader.ts:15\n                \n            \n\n\n            \n                \n                    Synchronously load all JSRoot scripts. ONLY CALL ONCE.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    jsrootVersion\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'latest'\n                                    \n\n                                    \n                                        Version of JSROOT to use. Defaults to latest.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        Promise resolved with JSROOT global varilable.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            loadScript\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadScript(scriptURL: string, scriptFor?: string, parentElement: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/script-loader.ts:46\n                \n            \n\n\n            \n                \n                    Load a script dynamically from a URL.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    scriptURL\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        URL of the script to be loaded.\n\n                                    \n                                \n                                \n                                    scriptFor\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Optional data attribute to identify what the script is for. [data-scriptFor]\n\n                                    \n                                \n                                \n                                    parentElement\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        document.getElementsByTagName('head')[0]\n                                    \n\n                                    \n                                        Parent element to which the script is to be appended.\nDefaults to  tag.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise for the script load.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { LoadingManager } from '../managers/loading-manager';\n\n/** Global JSROOT variable for accessing functions after loading JSRoot scripts. */\ndeclare const JSROOT: any;\n\n/**\n * Script loader for dynamically loading external scripts.\n */\nexport class ScriptLoader {\n  /**\n   * Synchronously load all JSRoot scripts. ONLY CALL ONCE.\n   * @param jsrootVersion Version of JSROOT to use. Defaults to latest.\n   * @returns Promise resolved with JSROOT global varilable.\n   */\n  public static async loadJSRootScripts(\n    jsrootVersion: string = 'latest'\n  ): Promise {\n    const loadingManager = new LoadingManager();\n    loadingManager.addLoadableItem('jsroot_scripts');\n\n    const JSROOT_CDN_URL = `https://cdn.jsdelivr.net/npm/jsroot@${jsrootVersion}/scripts/`;\n    const allScripts = [\n      'JSRoot.core.js',\n      'three.extra.min.js',\n      'JSRoot.csg.js',\n      'JSRoot.painter.js',\n      'JSRoot.geom.js',\n    ];\n    for (const script of allScripts) {\n      await ScriptLoader.loadScript(JSROOT_CDN_URL + script, 'JSROOT');\n    }\n\n    loadingManager.itemLoaded('jsroot_scripts');\n\n    return JSROOT;\n  }\n\n  /**\n   * Load a script dynamically from a URL.\n   * @param scriptURL URL of the script to be loaded.\n   * @param scriptFor Optional data attribute to identify what the script is for. `[data-scriptFor]`\n   * @param parentElement Parent element to which the script is to be appended.\n   * Defaults to `` tag.\n   * @returns Promise for the script load.\n   */\n  public static loadScript(\n    scriptURL: string,\n    scriptFor?: string,\n    parentElement: HTMLElement = document.getElementsByTagName('head')[0]\n  ): Promise {\n    const loadingManager = new LoadingManager();\n    loadingManager.addLoadableItem('single_script');\n\n    return new Promise((resolve, reject) => {\n      const scriptExists = document.querySelectorAll(\n        'script[src=\"' + scriptURL + '\"]'\n      );\n\n      // If no script exists - add one\n      if (scriptExists.length === 0) {\n        const scriptElement = document.createElement('script');\n        scriptElement.type = 'text/javascript';\n        scriptElement.src = scriptURL;\n        if (scriptFor) {\n          scriptElement.setAttribute('data-scriptfor', scriptFor);\n        }\n\n        scriptElement.addEventListener('load', () => {\n          scriptElement.setAttribute('data-loaded', 'true');\n          resolve();\n          loadingManager.itemLoaded('single_script');\n        });\n        scriptElement.onerror = (event) => {\n          console.error('ERROR LOADING SCRIPT: ', event);\n          reject();\n          loadingManager.itemLoaded('single_script');\n        };\n\n        parentElement.appendChild(scriptElement);\n      } else {\n        // If script has already loaded then resolve else wait for it to load\n        if (scriptExists[0].dataset.loaded === 'true') {\n          resolve();\n          loadingManager.itemLoaded('single_script');\n        } else {\n          scriptExists[0].addEventListener('load', () => {\n            resolve();\n            loadingManager.itemLoaded('single_script');\n          });\n        }\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectionManager.html":{"url":"classes/SelectionManager.html","title":"class - SelectionManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectionManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/selection-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's selection related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeObject\n                            \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Private\n                                effectsManager\n                            \n                            \n                                    Private\n                                ignoreList\n                            \n                            \n                                    Private\n                                infoLogger\n                            \n                            \n                                    Private\n                                isInit\n                            \n                            \n                                    Private\n                                onDocumentMouseDown\n                            \n                            \n                                    Private\n                                onTouchDown\n                            \n                            \n                                    Private\n                                onTouchMove\n                            \n                            \n                                    Private\n                                outlinePass\n                            \n                            \n                                    Private\n                                preSelectionAntialias\n                            \n                            \n                                    Private\n                                scene\n                            \n                            \n                                    Private\n                                selectedObject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                disableSelecting\n                            \n                            \n                                    Private\n                                enableSelecting\n                            \n                            \n                                    Public\n                                getActiveObjectId\n                            \n                            \n                                    Public\n                                highlightObject\n                            \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Private\n                                intersectObject\n                            \n                            \n                                    Public\n                                setSelectedObject\n                            \n                            \n                                    Public\n                                setSelecting\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/selection-manager.ts:43\n                            \n                        \n\n                \n                    \n                            Constructor for the selection manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            activeObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new ActiveVariable('')\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/selection-manager.ts:30\n                            \n                        \n\n                \n                    \n                        The currently selected object which is observable for changes. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            camera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/selection-manager.ts:24\n                            \n                        \n\n                \n                    \n                        The camera inside the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            effectsManager\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EffectsManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/selection-manager.ts:38\n                            \n                        \n\n                \n                    \n                        Manager for managing three.js event display effects like outline pass and unreal bloom. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ignoreList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/selection-manager.ts:32\n                            \n                        \n\n                \n                    \n                        Objects to be ignored on hovering over the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            infoLogger\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         InfoLogger\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/selection-manager.ts:41\n                            \n                        \n\n                \n                    \n                        Service for logging data to the information panel. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            isInit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/selection-manager.ts:22\n                            \n                        \n\n                \n                    \n                        Is initialized. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onDocumentMouseDown\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/selection-manager.ts:158\n                            \n                        \n\n                \n                    \n                        Function to call on mouse click when object selection is enabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onTouchDown\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/selection-manager.ts:207\n                            \n                        \n\n                \n                    \n                        Function to call on touch when object selection is enabled.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        event\n                                                        \n                                                                Event containing touch data.\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onTouchMove\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/selection-manager.ts:145\n                            \n                        \n\n                \n                    \n                        Function to call on mouse move when object selection is enabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            outlinePass\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     OutlinePass\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/selection-manager.ts:36\n                            \n                        \n\n                \n                    \n                        Outline pass for highlighting the hovered over event display elements. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            preSelectionAntialias\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/selection-manager.ts:43\n                            \n                        \n\n                \n                    \n                        Performance mode value before enabling selection. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            scene\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Scene\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/selection-manager.ts:26\n                            \n                        \n\n                \n                    \n                        The scene used for event display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            selectedObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/selection-manager.ts:28\n                            \n                        \n\n                \n                    \n                        Object used to display the information of the selected 3D object. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            disableSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    disableSelecting()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:128\n                \n            \n\n\n            \n                \n                    Disable selecting of event display elements and remove mouse move and click events.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            enableSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    enableSelecting()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:111\n                \n            \n\n\n            \n                \n                    Enable selecting of event display elements and set mouse move and click events.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getActiveObjectId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getActiveObjectId()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:94\n                \n            \n\n\n            \n                \n                    Get the uuid of the currently selected object.\n\n\n                    \n                    \n                    \n                        Returns :         ActiveVariable\n\n                    \n                    \n                        uuid of the currently selected object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightObject(uuid: string, objectsGroup: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:241\n                \n            \n\n\n            \n                \n                    Highlight the object with the given uuid by giving it an outline.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        uuid of the object.\n\n                                    \n                                \n                                \n                                    objectsGroup\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group of objects to be traversed for finding the object\nwith the given uuid.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init(camera: Camera, scene: Scene, effectsManager: EffectsManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:65\n                \n            \n\n\n            \n                \n                    Initialize the selection manager.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene used for event display.\n\n                                    \n                                \n                                \n                                    effectsManager\n                                    \n                                                EffectsManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager for managing three.js event display effects\nlike outline pass and unreal bloom.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            intersectObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    intersectObject(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:218\n                \n            \n\n\n            \n                \n                    Check if any object intersects on mouse move.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event containing data of the mouse move.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Intersected or hovered over object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSelectedObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSelectedObject(selectedObject: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:83\n                \n            \n\n\n            \n                \n                    Set the currently selected object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selectedObject\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The currently selected object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSelecting(enable: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:102\n                \n            \n\n\n            \n                \n                    Set if selecting is to be enabled or disabled.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    enable\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If selecting is to be enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Vector2,\n  Raycaster,\n  Camera,\n  Scene,\n  Object3D,\n  DirectionalLight,\n  AmbientLight,\n  AxesHelper,\n} from 'three';\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass.js';\nimport { InfoLogger } from '../../helpers/info-logger';\nimport { EffectsManager } from './effects-manager';\nimport { PrettySymbols } from '../../helpers/pretty-symbols';\nimport { ActiveVariable } from '../../helpers/active-variable';\n\n/**\n * Manager for managing event display's selection related functions.\n */\nexport class SelectionManager {\n  /** Is initialized. */\n  private isInit: boolean;\n  /** The camera inside the scene. */\n  private camera: Camera;\n  /** The scene used for event display. */\n  private scene: Scene;\n  /** Object used to display the information of the selected 3D object. */\n  private selectedObject: { name: string; attributes: any[] };\n  /** The currently selected object which is observable for changes. */\n  private activeObject = new ActiveVariable('');\n  /** Objects to be ignored on hovering over the scene. */\n  private ignoreList: string[];\n\n  // Post processing\n  /** Outline pass for highlighting the hovered over event display elements. */\n  private outlinePass: OutlinePass;\n  /** Manager for managing three.js event display effects like outline pass and unreal bloom. */\n  private effectsManager: EffectsManager;\n\n  /** Service for logging data to the information panel. */\n  private infoLogger: InfoLogger;\n  /** Performance mode value before enabling selection. */\n  private preSelectionAntialias: boolean;\n\n  /**\n   * Constructor for the selection manager.\n   */\n  constructor() {\n    this.isInit = false;\n    this.ignoreList = [\n      new AmbientLight().type,\n      new DirectionalLight().type,\n      new AxesHelper().type,\n    ];\n  }\n\n  /**\n   * Initialize the selection manager.\n   * @param camera The camera inside the scene.\n   * @param scene The scene used for event display.\n   * @param effectsManager Manager for managing three.js event display effects\n   * like outline pass and unreal bloom.\n   * @param infoLogger Service for logging data to the information panel.\n   */\n  public init(\n    camera: Camera,\n    scene: Scene,\n    effectsManager: EffectsManager,\n    infoLogger: InfoLogger\n  ) {\n    this.camera = camera;\n    this.scene = scene;\n    this.isInit = true;\n    this.infoLogger = infoLogger;\n    this.effectsManager = effectsManager;\n    this.outlinePass = this.effectsManager.addOutlinePassForSelection();\n  }\n\n  /**\n   * Set the currently selected object.\n   * @param selectedObject The currently selected object.\n   */\n  public setSelectedObject(selectedObject: {\n    name: string;\n    attributes: any[];\n  }) {\n    this.selectedObject = selectedObject;\n  }\n\n  /**\n   * Get the uuid of the currently selected object.\n   * @returns uuid of the currently selected object.\n   */\n  public getActiveObjectId(): ActiveVariable {\n    return this.activeObject;\n  }\n\n  /**\n   * Set if selecting is to be enabled or disabled.\n   * @param enable If selecting is to be enabled or disabled.\n   */\n  public setSelecting(enable: boolean) {\n    if (this.isInit) {\n      enable ? this.enableSelecting() : this.disableSelecting();\n    }\n  }\n\n  /**\n   * Enable selecting of event display elements and set mouse move and click events.\n   */\n  private enableSelecting() {\n    document\n      .getElementById('three-canvas')\n      .addEventListener('mousemove', this.onTouchMove, true);\n    document\n      .getElementById('three-canvas')\n      .addEventListener('click', this.onDocumentMouseDown, true);\n    document\n      .getElementById('three-canvas')\n      .addEventListener('touchstart', this.onTouchDown);\n    this.preSelectionAntialias = this.effectsManager.antialiasing;\n    this.effectsManager.setAntialiasing(false);\n  }\n\n  /**\n   * Disable selecting of event display elements and remove mouse move and click events.\n   */\n  private disableSelecting() {\n    document\n      .getElementById('three-canvas')\n      .removeEventListener('mousemove', this.onTouchMove, true);\n    document\n      .getElementById('three-canvas')\n      .removeEventListener('click', this.onDocumentMouseDown, true);\n    document\n      .getElementById('three-canvas')\n      .removeEventListener('touchstart', this.onTouchDown);\n    this.outlinePass.selectedObjects = [];\n    this.effectsManager.setAntialiasing(this.preSelectionAntialias);\n  }\n\n  /**\n   * Function to call on mouse move when object selection is enabled.\n   */\n  private onTouchMove = (event: any) => {\n    const intersectedObject = this.intersectObject(event);\n    if (intersectedObject) {\n      if (this.ignoreList.includes(intersectedObject.type)) {\n        return;\n      }\n      this.outlinePass.selectedObjects = [intersectedObject];\n    }\n  };\n\n  /**\n   * Function to call on mouse click when object selection is enabled.\n   */\n  private onDocumentMouseDown = () => {\n    const intersectedObject = this.outlinePass.selectedObjects[0];\n    if (intersectedObject) {\n      this.selectedObject.name = intersectedObject.name;\n      this.selectedObject.attributes.splice(\n        0,\n        this.selectedObject.attributes.length\n      );\n\n      this.activeObject.update(intersectedObject.uuid);\n\n      const prettyParams = PrettySymbols.getPrettyParams(\n        intersectedObject.userData\n      );\n\n      for (const key of Object.keys(prettyParams)) {\n        this.selectedObject.attributes.push({\n          attributeName: key,\n          attributeValue: prettyParams[key],\n        });\n      }\n\n      // Process properties of the selected object\n      const props = Object.keys(intersectedObject.userData)\n        .map((key) => {\n          // Only take properties that are a string or number (no arrays or objects)\n          if (\n            ['string', 'number'].includes(\n              typeof intersectedObject.userData[key]\n            )\n          ) {\n            return key + '=' + intersectedObject.userData[key];\n          }\n        })\n        .filter((val) => val);\n      // Build the log text and add to the logger\n      const log =\n        intersectedObject.name +\n        (props.length > 0 ? ' with ' + props.join(', ') : '');\n      if (log) {\n        this.infoLogger.add(log, 'Clicked');\n      }\n    }\n  };\n\n  /**\n   * Function to call on touch when object selection is enabled.\n   * @param event Event containing touch data.\n   */\n  private onTouchDown = (event: TouchEvent) => {\n    event.preventDefault();\n    this.onTouchMove(event.targetTouches[0]);\n    this.onDocumentMouseDown();\n  };\n\n  /**\n   * Check if any object intersects on mouse move.\n   * @param event Event containing data of the mouse move.\n   * @returns Intersected or hovered over object.\n   */\n  private intersectObject(event: any): Object3D {\n    event.preventDefault?.();\n    const mouse = new Vector2();\n    const rendererElement = this.effectsManager.composer.renderer.domElement;\n    mouse.x = (event.clientX / rendererElement.clientWidth) * 2 - 1;\n    mouse.y = -(event.clientY / rendererElement.clientHeight) * 2 + 1;\n    const raycaster = new Raycaster();\n    raycaster.setFromCamera(mouse, this.camera);\n    raycaster.params.Line.threshold = 3;\n    const intersects = raycaster.intersectObjects(this.scene.children, true);\n\n    if (intersects.length > 0) {\n      // We want the closest one\n      return intersects[0].object;\n    }\n  }\n\n  /**\n   * Highlight the object with the given uuid by giving it an outline.\n   * @param uuid uuid of the object.\n   * @param objectsGroup Group of objects to be traversed for finding the object\n   * with the given uuid.\n   */\n  public highlightObject(uuid: string, objectsGroup: Object3D) {\n    const object = objectsGroup.getObjectByProperty('uuid', uuid);\n    if (object) {\n      this.outlinePass.selectedObjects = [object];\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/State.html":{"url":"classes/State.html","title":"class - State","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  State\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n            \n                Description\n            \n            \n                State of the particle.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dir\n                            \n                            \n                                maxStepSize\n                            \n                            \n                                p\n                            \n                            \n                                pathLength\n                            \n                            \n                                pos\n                            \n                            \n                                q\n                            \n                            \n                                stepSize\n                            \n                            \n                                unitC\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dir\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Vector3\n\n                        \n                    \n                    \n                        \n                            Default value : new Vector3(0, 0, 0)\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:170\n                            \n                        \n\n                \n                    \n                        Direction. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            maxStepSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:180\n                            \n                        \n\n                \n                    \n                        Max step size. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            p\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:172\n                            \n                        \n\n                \n                    \n                        Momentum. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pathLength\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:182\n                            \n                        \n\n                \n                    \n                        Path length.. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Vector3\n\n                        \n                    \n                    \n                        \n                            Default value : new Vector3(0, 0, 0)\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:168\n                            \n                        \n\n                \n                    \n                        Position. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            q\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:174\n                            \n                        \n\n                \n                    \n                        Charge. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            stepSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1000\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:178\n                            \n                        \n\n                \n                    \n                        Step size. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            unitC\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 3.3333\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:176\n                            \n                        \n\n                \n                    \n                        Unit. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(half_h))\n        .add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir\n        .clone()\n        .add(k1.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir\n        .clone()\n        .add(k2.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(h))\n        .add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir\n        .clone()\n        .add(k3.clone().multiplyScalar(h))\n        .cross(B_last)\n        .multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return (\n        h *\n        (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z))\n      );\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    let fh: number = state.stepSize;\n    let fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(\n      k1\n        .clone()\n        .add(k2)\n        .add(k3)\n        .multiplyScalar(fh2 / 6)\n    );\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(\n      k1\n        .clone()\n        .add(k2.clone().multiplyScalar(2))\n        .add(k3.clone().multiplyScalar(2))\n        .add(k4)\n        .multiplyScalar(fh / 6)\n    );\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3,\n    startDir: Vector3,\n    p: number,\n    q: number,\n    mss: number = -1,\n    plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3; dir: Vector3 }[] {\n    let rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    let result: { pos: Vector3; dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StateManager.html":{"url":"classes/StateManager.html","title":"class - StateManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StateManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/state-manager.ts\n        \n\n            \n                Description\n            \n            \n                A singleton manager for managing the scene's state.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                activeCamera\n                            \n                            \n                                clippingAngle\n                            \n                            \n                                clippingEnabled\n                            \n                            \n                                eventDisplay\n                            \n                            \n                                eventMetadata\n                            \n                            \n                                    Private\n                                    Static\n                                instance\n                            \n                            \n                                phoenixMenuRoot\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getInstance\n                            \n                            \n                                loadStateFromJSON\n                            \n                            \n                                saveStateAsJSON\n                            \n                            \n                                setCamera\n                            \n                            \n                                setClippingAngle\n                            \n                            \n                                setClippingEnabled\n                            \n                            \n                                setEventDisplay\n                            \n                            \n                                setPhoenixMenuRoot\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/state-manager.ts:27\n                            \n                        \n\n                \n                    \n                            Create the state manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            activeCamera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:20\n                            \n                        \n\n                \n                    \n                        The active camera. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clippingAngle\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new ActiveVariable(0)\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:18\n                            \n                        \n\n                \n                    \n                        Angle of the clipping. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clippingEnabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new ActiveVariable(false)\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:16\n                            \n                        \n\n                \n                    \n                        Whether the clipping is enabled or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            eventDisplay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EventDisplay\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:22\n                            \n                        \n\n                \n                    \n                        The event display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            eventMetadata\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    runNumber: '000',\n    eventNumber: '000',\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:24\n                            \n                        \n\n                \n                    \n                        Current loaded event's metadata. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            instance\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         StateManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:12\n                            \n                        \n\n                \n                    \n                        Instance of the state manager. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phoenixMenuRoot\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:14\n                            \n                        \n\n                \n                    \n                        Root node of the phoenix menu. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getInstance\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInstance()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:44\n                \n            \n\n\n            \n                \n                    Get the instance of state manager.\n\n\n                    \n                    \n                    \n                        Returns :         StateManager\n\n                    \n                    \n                        The state manager instance.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadStateFromJSON\n                        \n                        \n                    \n                \n            \n            \n                \nloadStateFromJSON(json: string | object)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:97\n                \n            \n\n\n            \n                \n                    Load the state from JSON.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    json\n                                    \n                                            string | object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        JSON for state.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            saveStateAsJSON\n                        \n                        \n                    \n                \n            \n            \n                \nsaveStateAsJSON()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:78\n                \n            \n\n\n            \n                \n                    Save the state of the event display as JSON.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setCamera\n                        \n                        \n                    \n                \n            \n            \n                \nsetCamera(camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:139\n                \n            \n\n\n            \n                \n                    Set the scene camera for state.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setClippingAngle\n                        \n                        \n                    \n                \n            \n            \n                \nsetClippingAngle(angle: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:131\n                \n            \n\n\n            \n                \n                    Set the angle of clipping.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    angle\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Angle fo clipping.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setClippingEnabled\n                        \n                        \n                    \n                \n            \n            \n                \nsetClippingEnabled(clipping: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:123\n                \n            \n\n\n            \n                \n                    Set the state of clipping.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    clipping\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether the clipping is enabled or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setEventDisplay\n                        \n                        \n                    \n                \n            \n            \n                \nsetEventDisplay(eventDisplay: EventDisplay)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:147\n                \n            \n\n\n            \n                \n                    Set the event display.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventDisplay\n                                    \n                                                EventDisplay\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event display.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setPhoenixMenuRoot\n                        \n                        \n                    \n                \n            \n            \n                \nsetPhoenixMenuRoot(phoenixMenuRoot: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:52\n                \n            \n\n\n            \n                \n                    Set the root node of Phoenix menu.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    phoenixMenuRoot\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Phoenix menu root node.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventDisplay } from '../event-display';\nimport { Camera } from 'three';\nimport { PhoenixMenuNode } from './ui-manager/phoenix-menu/phoenix-menu-node';\nimport { loadFile, saveFile } from '../helpers/file';\nimport { ActiveVariable } from '../helpers/active-variable';\n\n/**\n * A singleton manager for managing the scene's state.\n */\nexport class StateManager {\n  /** Instance of the state manager. */\n  private static instance: StateManager;\n  /** Root node of the phoenix menu. */\n  phoenixMenuRoot: PhoenixMenuNode;\n  /** Whether the clipping is enabled or not. */\n  clippingEnabled = new ActiveVariable(false);\n  /** Angle of the clipping. */\n  clippingAngle = new ActiveVariable(0);\n  /** The active camera. */\n  activeCamera: Camera;\n  /** The event display. */\n  eventDisplay: EventDisplay;\n  /** Current loaded event's metadata. */\n  eventMetadata: { runNumber: string; eventNumber: string } = {\n    runNumber: '000',\n    eventNumber: '000',\n  };\n\n  /**\n   * Create the state manager.\n   * @returns The state manager instance.\n   */\n  constructor() {\n    if (StateManager.instance === undefined) {\n      StateManager.instance = this;\n    }\n    return StateManager.instance;\n  }\n\n  /**\n   * Get the instance of state manager.\n   * @returns The state manager instance.\n   */\n  static getInstance(): StateManager {\n    return StateManager.instance;\n  }\n\n  /**\n   * Set the root node of Phoenix menu.\n   * @param phoenixMenuRoot Phoenix menu root node.\n   */\n  setPhoenixMenuRoot(phoenixMenuRoot: PhoenixMenuNode) {\n    this.phoenixMenuRoot = phoenixMenuRoot;\n\n    if (this.phoenixMenuRoot) {\n      // Add save and load config buttons to the root node\n      this.phoenixMenuRoot\n        .addConfig('button', {\n          label: 'Save state',\n          onClick: () => {\n            this.saveStateAsJSON();\n          },\n        })\n        .addConfig('button', {\n          label: 'Load state',\n          onClick: () => {\n            loadFile((data) => {\n              this.loadStateFromJSON(JSON.parse(data));\n            });\n          },\n        });\n    }\n  }\n\n  /**\n   * Save the state of the event display as JSON.\n   */\n  saveStateAsJSON() {\n    const state: object = {\n      phoenixMenu: this.phoenixMenuRoot.getNodeState(),\n      eventDisplay: {\n        cameraPosition: this.activeCamera.position.toArray(),\n        clippingAngle: this.clippingEnabled ? this.clippingAngle : null,\n      },\n    };\n\n    saveFile(\n      JSON.stringify(state),\n      `run${this.eventMetadata.runNumber}_evt${this.eventMetadata.eventNumber}.json`\n    );\n  }\n\n  /**\n   * Load the state from JSON.\n   * @param json JSON for state.\n   */\n  loadStateFromJSON(json: string | object) {\n    const jsonData: object = typeof json === 'string' ? JSON.parse(json) : json;\n\n    if (jsonData['phoenixMenu']) {\n      this.phoenixMenuRoot.loadStateFromJSON(jsonData['phoenixMenu']);\n      this.phoenixMenuRoot.configActive = false;\n    }\n\n    if (jsonData['eventDisplay']) {\n      this.activeCamera.position.fromArray(\n        jsonData['eventDisplay']?.['cameraPosition']\n      );\n      if (jsonData['eventDisplay']?.['clippingAngle']) {\n        this.setClippingEnabled(true);\n        this.eventDisplay.getUIManager().setClipping(true);\n        this.eventDisplay\n          .getUIManager()\n          .rotateClipping(jsonData['eventDisplay']['clippingAngle']);\n      }\n    }\n  }\n\n  /**\n   * Set the state of clipping.\n   * @param clipping Whether the clipping is enabled or not.\n   */\n  setClippingEnabled(clipping: boolean) {\n    this.clippingEnabled.update(clipping);\n  }\n\n  /**\n   * Set the angle of clipping.\n   * @param angle Angle fo clipping.\n   */\n  setClippingAngle(angle: number) {\n    this.clippingAngle.update(angle);\n  }\n\n  /**\n   * Set the scene camera for state.\n   * @param camera The camera.\n   */\n  setCamera(camera: Camera) {\n    this.activeCamera = camera;\n  }\n\n  /**\n   * Set the event display.\n   * @param eventDisplay The event display.\n   */\n  setEventDisplay(eventDisplay: EventDisplay) {\n    this.eventDisplay = eventDisplay;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/URLOptionsManager.html":{"url":"classes/URLOptionsManager.html","title":"class - URLOptionsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  URLOptionsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/url-options-manager.ts\n        \n\n            \n                Description\n            \n            \n                A manager for managing options given through URL.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                urlOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                applyEmbedOption\n                            \n                            \n                                    Public\n                                applyEventOptions\n                            \n                            \n                                    Public\n                                applyHideWidgetsOptions\n                            \n                            \n                                    Public\n                                applyOptions\n                            \n                            \n                                    Private\n                                hideIdsWithURLOption\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventDisplay: EventDisplay, configuration: Configuration)\n                    \n                \n                        \n                            \n                                Defined in src/managers/url-options-manager.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for the URL options manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        eventDisplay\n                                                  \n                                                        \n                                                                        EventDisplay\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The Phoenix event display.\n\n                                                        \n                                                \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        Configuration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Configuration of the event display.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            urlOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     URLSearchParams\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/url-options-manager.ts:23\n                            \n                        \n\n                \n                    \n                        Variable containing all URL search parameters. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            applyEmbedOption\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    applyEmbedOption()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:148\n                \n            \n\n\n            \n                \n                    Hide all overlay widgets and enable embed menu if \"hideWidgets\" option from the URL is true.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            applyEventOptions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    applyEventOptions(defaultEventPath?: string, defaultEventType?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:59\n                \n            \n\n\n            \n                \n                    Initialize the event display with event data and configuration from URL.\n(Only JiveXML and JSON)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    defaultEventPath\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Default event path to fallback to if none in URL.\n\n                                    \n                                \n                                \n                                    defaultEventType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Default event type to fallback to if none in URL.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            applyHideWidgetsOptions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    applyHideWidgetsOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:130\n                \n            \n\n\n            \n                \n                    Hide all overlay widgets if \"hideWidgets\" option from the URL is true.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            applyOptions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    applyOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:43\n                \n            \n\n\n            \n                \n                    Initialize and apply all URL options on page load.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            hideIdsWithURLOption\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hideIdsWithURLOption(urlOptionWithIds: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:173\n                \n            \n\n\n            \n                \n                    Hide element with IDs based on a URL option.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    urlOptionWithIds\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        IDs to hide with keys as the URL option and its array value as IDs.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { JiveXMLLoader } from '../loaders/jivexml-loader';\nimport { PhoenixLoader } from '../loaders/phoenix-loader';\nimport { Configuration } from '../extras/configuration';\nimport { EventDisplay } from '../event-display';\nimport { StateManager } from './state-manager';\n\n/**\n * Model for Phoenix URL options.\n */\nexport const phoenixURLOptions = {\n  file: '',\n  type: '',\n  config: '',\n  hideWidgets: false,\n  embed: false,\n};\n\n/**\n * A manager for managing options given through URL.\n */\nexport class URLOptionsManager {\n  /** Variable containing all URL search parameters. */\n  private urlOptions: URLSearchParams;\n\n  /**\n   * Constructor for the URL options manager.\n   * @param eventDisplay The Phoenix event display.\n   * @param configuration Configuration of the event display.\n   */\n  constructor(\n    private eventDisplay: EventDisplay,\n    private configuration: Configuration\n  ) {\n    const locationHref = window.location.href;\n    this.urlOptions = new URLSearchParams(\n      locationHref.substr(locationHref.lastIndexOf('?'))\n    );\n  }\n\n  /**\n   * Initialize and apply all URL options on page load.\n   */\n  public applyOptions() {\n    // Initialize event with data from URL if there is any\n    this.applyEventOptions(\n      this.configuration.defaultEventFile?.eventFile,\n      this.configuration.defaultEventFile?.eventType\n    );\n    this.applyHideWidgetsOptions();\n    this.applyEmbedOption();\n  }\n\n  /**\n   * Initialize the event display with event data and configuration from URL.\n   * (Only JiveXML and JSON)\n   * @param defaultEventPath Default event path to fallback to if none in URL.\n   * @param defaultEventType Default event type to fallback to if none in URL.\n   */\n  public applyEventOptions(\n    defaultEventPath?: string,\n    defaultEventType?: string\n  ) {\n    if (!('fetch' in window)) {\n      return;\n    }\n\n    let file: string, type: string;\n\n    if (!this.urlOptions.get('file') || !this.urlOptions.get('type')) {\n      file = defaultEventPath;\n      type = defaultEventType;\n    } else {\n      file = this.urlOptions.get('file');\n      type = this.urlOptions.get('type').toLowerCase();\n    }\n\n    // Load config from URL\n    const loadConfig = () => {\n      if (this.urlOptions.get('config')) {\n        this.eventDisplay.getLoadingManager().addLoadableItem('url_config');\n        fetch(this.urlOptions.get('config'))\n          .then((res) => res.json())\n          .then((jsonState) => {\n            const stateManager = new StateManager();\n            stateManager.loadStateFromJSON(jsonState);\n          })\n          .finally(() => {\n            this.eventDisplay.getLoadingManager().itemLoaded('url_config');\n          });\n      }\n    };\n\n    // Load event file from URL\n    if (file && type) {\n      this.eventDisplay.getLoadingManager().addLoadableItem('url_event');\n      fetch(file)\n        .then((res) => (type === 'jivexml' ? res.text() : res.json()))\n        .then((res: object | string) => {\n          if (type === 'jivexml') {\n            const loader = new JiveXMLLoader();\n            this.configuration.eventDataLoader = loader;\n            // Parse the JSON to extract events and their data\n            loader.process(res);\n            const eventData = loader.getEventData();\n            this.eventDisplay.buildEventDataFromJSON(eventData);\n          } else {\n            this.configuration.eventDataLoader = new PhoenixLoader();\n            this.eventDisplay.parsePhoenixEvents(res);\n          }\n        })\n        .catch((error) => {\n          this.eventDisplay\n            .getInfoLogger()\n            .add('Could not find the file specified in URL.', 'Error');\n          console.error('Could not find the file specified in URL.', error);\n        })\n        .finally(() => {\n          // Load config from URL after loading the event\n          loadConfig();\n          this.eventDisplay.getLoadingManager().itemLoaded('url_event');\n        });\n    } else {\n      loadConfig();\n    }\n  }\n\n  /**\n   * Hide all overlay widgets if \"hideWidgets\" option from the URL is true.\n   */\n  public applyHideWidgetsOptions() {\n    const hideWidgetsOptions = {\n      hideWidgets: [\n        'mainLogo', // Main logo\n        'uiMenu', // UI menu\n        'experimentInfo', // Experiment info\n        'phoenixMenu', // Phoenix menu\n        'statsElement', // Stats at the bottom left\n        'gui', // dat.GUI menu\n      ],\n    };\n\n    this.hideIdsWithURLOption(hideWidgetsOptions);\n  }\n\n  /**\n   * Hide all overlay widgets and enable embed menu if \"hideWidgets\" option from the URL is true.\n   */\n  public applyEmbedOption() {\n    if (this.urlOptions.get('embed') === 'true') {\n      const hideWidgetsOptions = {\n        embed: [\n          'mainLogo', // Main logo\n          'uiMenu', // UI menu\n          'experimentInfo', // Experiment info\n          'phoenixMenu', // Phoenix menu\n          'statsElement', // Stats at the bottom left\n          'gui', // dat.GUI menu\n        ],\n      };\n\n      this.hideIdsWithURLOption(hideWidgetsOptions);\n\n      document\n        .getElementById('embedMenu')\n        ?.style.setProperty('display', 'block');\n    }\n  }\n\n  /**\n   * Hide element with IDs based on a URL option.\n   * @param urlOptionWithIds IDs to hide with keys as the URL option and its array value as IDs.\n   */\n  private hideIdsWithURLOption(urlOptionWithIds: { [key: string]: string[] }) {\n    Object.entries(urlOptionWithIds).forEach(([urlOption, idsToHide]) => {\n      if (this.urlOptions.get(urlOption) === 'true') {\n        idsToHide.forEach((singleId) => {\n          document\n            .getElementById(singleId)\n            ?.style.setProperty('display', 'none');\n        });\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VRManager.html":{"url":"classes/VRManager.html","title":"class - VRManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VRManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/vr-manager.ts\n        \n\n            \n                Description\n            \n            \n                VR manager for VR related operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraGroup\n                            \n                            \n                                    Private\n                                controller1\n                            \n                            \n                                    Private\n                                controller2\n                            \n                            \n                                    Private\n                                controllerGrip1\n                            \n                            \n                                    Private\n                                controllerGrip2\n                            \n                            \n                                    Private\n                                currentVRSession\n                            \n                            \n                                    Private\n                                onControllerSelectEnd\n                            \n                            \n                                    Private\n                                onControllerSelectStart\n                            \n                            \n                                    Private\n                                onSessionEnded\n                            \n                            \n                                    Private\n                                onVRSessionEnded\n                            \n                            \n                                    Private\n                                onVRSessionStarted\n                            \n                            \n                                    Private\n                                renderer\n                            \n                            \n                                    Static\n                                    Readonly\n                                SESSION_TYPE\n                            \n                            \n                                    Private\n                                vrActive\n                            \n                            \n                                    Public\n                                vrCamera\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                endVRSession\n                            \n                            \n                                    Public\n                                getCameraGroup\n                            \n                            \n                                    Public\n                                getVRCamera\n                            \n                            \n                                    Public\n                                isVRActive\n                            \n                            \n                                    Private\n                                moveInDirection\n                            \n                            \n                                    Private\n                                setupVRControls\n                            \n                            \n                                    Public\n                                setVRSession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cameraGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Group\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:31\n                            \n                        \n\n                \n                    \n                        Group containing the the camera for VR. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            controller1\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:36\n                            \n                        \n\n                \n                    \n                        The VR controller for movement. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            controller2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:38\n                            \n                        \n\n                \n                    \n                        The VR controller for movement. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            controllerGrip1\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:40\n                            \n                        \n\n                \n                    \n                        The VR controller representation \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            controllerGrip2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:42\n                            \n                        \n\n                \n                    \n                        The VR controller representation \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            currentVRSession\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:27\n                            \n                        \n\n                \n                    \n                        Currently active VR session. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onControllerSelectEnd\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:47\n                            \n                        \n\n                \n                    \n                        Listener for when the \"Select Start\" button is released. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onControllerSelectStart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:45\n                            \n                        \n\n                \n                    \n                        Listener for when the \"Select Start\" button is pushed. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onSessionEnded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:29\n                            \n                        \n\n                \n                    \n                        Callback to call when the VR session ends. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onVRSessionEnded\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:100\n                            \n                        \n\n                \n                    \n                        Callback when the VR session ends.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onVRSessionStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:90\n                            \n                        \n\n                \n                    \n                        Callback for when the VR session is started.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        session\n                                                        \n                                                                The VR session.\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            renderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:25\n                            \n                        \n\n                \n                    \n                        Renderer to set the VR session for. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            SESSION_TYPE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'immersive-vr'\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:21\n                            \n                        \n\n                \n                    \n                        Session type to use for VR. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            vrActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:23\n                            \n                        \n\n                \n                    \n                        Whether the VR is currently active or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            vrCamera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/three-manager/vr-manager.ts:33\n                            \n                        \n\n                \n                    \n                        The camera used by VR. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            endVRSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    endVRSession()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/vr-manager.ts:122\n                \n            \n\n\n            \n                \n                    End the current VR session.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCameraGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraGroup(camera?: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/vr-manager.ts:140\n                \n            \n\n\n            \n                \n                    Get the group containing the camera for VR.\nVR camera works by adding a Group with Camera to the scene.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Camera which is to be cloned for VR use.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Group\n\n                    \n                    \n                        The camera group used in VR mode.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getVRCamera\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVRCamera()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/vr-manager.ts:162\n                \n            \n\n\n            \n                \n                    Get the camera used by VR.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The camera used by VR.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isVRActive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isVRActive()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/vr-manager.ts:130\n                \n            \n\n\n            \n                \n                    Is the VR currently active or not.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        A boolean for whether the VR is active or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            moveInDirection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    moveInDirection(direction: Vector3, stepDistance: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/vr-manager.ts:241\n                \n            \n\n\n            \n                \n                    Move the camera in the given direction.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    direction\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Direction to move towards.\n\n                                    \n                                \n                                \n                                    stepDistance\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Distance to move by.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            setupVRControls\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setupVRControls()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/vr-manager.ts:169\n                \n            \n\n\n            \n                \n                    Set up VR controls for moving around the event display.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setVRSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setVRSession(renderer: WebGLRenderer, onSessionStarted?: () => void, onSessionEnded?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/vr-manager.ts:55\n                \n            \n\n\n            \n                \n                    Set and configure the VR session.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer to set the VR session for.\n\n                                    \n                                \n                                \n                                    onSessionStarted\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the VR session starts.\n\n                                    \n                                \n                                \n                                    onSessionEnded\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the VR session ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebGLRenderer,\n  Group,\n  Camera,\n  Vector3,\n  BufferGeometry,\n  Line,\n} from 'three';\nimport { XRControllerModelFactory } from 'three/examples/jsm/webxr/XRControllerModelFactory';\n\n// NOTE: This was created on 29/08/2020\n// It might get outdated given how WebXR is still a work in progress\n\n// LAST UPDATED ON 28/11/2020\n\n/**\n * VR manager for VR related operations.\n */\nexport class VRManager {\n  /** Session type to use for VR. */\n  static readonly SESSION_TYPE: string = 'immersive-vr';\n  /** Whether the VR is currently active or not. */\n  private vrActive: boolean = false;\n  /** Renderer to set the VR session for. */\n  private renderer: WebGLRenderer;\n  /** Currently active VR session. */\n  private currentVRSession: any = null;\n  /** Callback to call when the VR session ends. */\n  private onSessionEnded: () => void;\n  /** Group containing the the camera for VR. */\n  public cameraGroup: Group;\n  /** The camera used by VR. */\n  public vrCamera: Camera;\n\n  /** The VR controller for movement. */\n  private controller1: any;\n  /** The VR controller for movement. */\n  private controller2: any;\n  /** The VR controller representation */\n  private controllerGrip1: any;\n  /** The VR controller representation */\n  private controllerGrip2: any;\n\n  /** Listener for when the \"Select Start\" button is pushed. */\n  private onControllerSelectStart: () => void;\n  /** Listener for when the \"Select Start\" button is released. */\n  private onControllerSelectEnd: () => void;\n\n  /**\n   * Set and configure the VR session.\n   * @param renderer Renderer to set the VR session for.\n   * @param onSessionStarted Callback to call when the VR session starts.\n   * @param onSessionEnded Callback to call when the VR session ends.\n   */\n  public setVRSession(\n    renderer: WebGLRenderer,\n    onSessionStarted?: () => void,\n    onSessionEnded?: () => void\n  ) {\n    this.renderer = renderer;\n    this.onSessionEnded = onSessionEnded;\n\n    const webXR = (navigator as any)?.xr;\n\n    if (webXR) {\n      const sessionInit = {\n        optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking'],\n      };\n\n      (webXR.requestSession(\n        VRManager.SESSION_TYPE,\n        sessionInit\n      ) as Promise)\n        .then((session: any) => {\n          this.onVRSessionStarted(session);\n          onSessionStarted?.();\n        })\n        .catch((error: any) => {\n          console.log('VR Error:', error);\n        });\n\n      this.setupVRControls();\n    }\n  }\n\n  /**\n   * Callback for when the VR session is started.\n   * @param session The VR session.\n   */\n  private onVRSessionStarted = (session: any) => {\n    this.vrActive = true;\n    session.addEventListener('end', this.onVRSessionEnded);\n    this.renderer.xr.setSession(session);\n    this.currentVRSession = session;\n  };\n\n  /**\n   * Callback when the VR session ends.\n   */\n  private onVRSessionEnded = () => {\n    this.onSessionEnded?.();\n\n    this.vrActive = false;\n    this.currentVRSession?.removeEventListener('end', this.onVRSessionEnded);\n    this.currentVRSession = null;\n\n    this.controller1?.removeEventListener(\n      'selectstart',\n      this.onControllerSelectStart\n    );\n    this.controller1?.removeEventListener(\n      'selectend',\n      this.onControllerSelectEnd\n    );\n\n    this.cameraGroup = undefined;\n  };\n\n  /**\n   * End the current VR session.\n   */\n  public endVRSession() {\n    this.currentVRSession?.end();\n  }\n\n  /**\n   * Is the VR currently active or not.\n   * @returns A boolean for whether the VR is active or not.\n   */\n  public isVRActive(): boolean {\n    return this.vrActive;\n  }\n\n  /**\n   * Get the group containing the camera for VR.\n   * VR camera works by adding a Group with Camera to the scene.\n   * @param camera Camera which is to be cloned for VR use.\n   * @returns The camera group used in VR mode.\n   */\n  public getCameraGroup(camera?: Camera): Group {\n    // Set up the camera position in the VR - Adding a group with camera does it\n    if (!this.cameraGroup) {\n      this.cameraGroup = new Group();\n    }\n    if (camera && this.vrActive) {\n      this.vrCamera = this.renderer.xr\n        .getCamera(new Camera())\n        .copy(camera.clone() as Camera);\n      this.vrCamera.name = 'VR_CAMERA';\n\n      this.cameraGroup.position.copy(this.vrCamera.position);\n      this.cameraGroup.add(this.vrCamera);\n    }\n\n    return this.cameraGroup;\n  }\n\n  /**\n   * Get the camera used by VR.\n   * @returns The camera used by VR.\n   */\n  public getVRCamera() {\n    return this.vrCamera;\n  }\n\n  /**\n   * Set up VR controls for moving around the event display.\n   */\n  private setupVRControls() {\n    // Get the controllers\n    this.controller1 = this.renderer.xr.getController(0);\n    this.getCameraGroup().add(this.controller1);\n    this.controller2 = this.renderer.xr.getController(1);\n    this.getCameraGroup().add(this.controller2);\n\n    const controllerModelFactory = new XRControllerModelFactory();\n    this.controllerGrip1 = this.renderer.xr.getControllerGrip(0);\n    this.controllerGrip1.add(\n      controllerModelFactory.createControllerModel(this.controllerGrip1)\n    );\n    this.getCameraGroup().add(this.controllerGrip1);\n\n    this.controllerGrip2 = this.renderer.xr.getControllerGrip(1);\n    this.controllerGrip2.add(\n      controllerModelFactory.createControllerModel(this.controllerGrip2)\n    );\n    this.getCameraGroup().add(this.controllerGrip2);\n\n    const geometry = new BufferGeometry().setFromPoints([\n      new Vector3(0, 0, 0),\n      new Vector3(0, 0, -1),\n    ]);\n\n    const line = new Line(geometry);\n    line.name = 'line';\n    line.scale.z = 50;\n\n    this.controller1.add(line.clone());\n    this.controller2.add(line.clone());\n\n    // Set up movement\n\n    // Distance for a single step\n    const stepDistance = 30;\n    // Unit vector in camera direction\n    const direction = new Vector3();\n    // Interval ID for the movement interval\n    let intervalId: NodeJS.Timeout;\n\n    this.onControllerSelectStart = () => {\n      console.log(\n        'Select: c1 position ' + this.controller1.position.toArray().join(', ')\n      );\n      console.log(\n        'Select: CG position ' + this.cameraGroup.position.toArray().join(', ')\n      );\n\n      // Start movement in camera direction\n      intervalId = setInterval(() => {\n        this.moveInDirection(direction, stepDistance);\n      }, 20);\n    };\n\n    this.onControllerSelectEnd = () => {\n      // Stop the movement\n      clearInterval(intervalId);\n    };\n\n    this.controller1.addEventListener(\n      'selectstart',\n      this.onControllerSelectStart\n    );\n    this.controller1.addEventListener('selectend', this.onControllerSelectEnd);\n  }\n\n  /**\n   * Move the camera in the given direction.\n   * @param direction Direction to move towards.\n   * @param stepDistance Distance to move by.\n   */\n  private moveInDirection(direction: Vector3, stepDistance: number) {\n    // Get the direction the controller is facing\n    //! this.controller.getWorldDirection(direction);\n\n    // Get direction the camera is facing\n    this.vrCamera?.getWorldDirection(direction);\n\n    // Move the camera in the given direction\n    this.cameraGroup.position.addScaledVector(direction, stepDistance);\n    this.vrCamera.position.addScaledVector(direction, stepDistance);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Window.html":{"url":"interfaces/Window.html","title":"interface - Window","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Window\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event-display.ts\n        \n\n            \n                Description\n            \n            \n                Window interface for adding objects to the window object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        EventDisplay\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        EventDisplay\n                                    \n                                \n                                \n                                    \n                                        EventDisplay:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    EventDisplay object containing event display related functions. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ThreeManager } from './managers/three-manager';\nimport { UIManager } from './managers/ui-manager';\nimport { InfoLogger } from './helpers/info-logger';\nimport { Configuration } from './extras/configuration';\nimport { StateManager } from './managers/state-manager';\nimport { LoadingManager } from './managers/loading-manager';\nimport { URLOptionsManager } from './managers/url-options-manager';\nimport { ActiveVariable } from './helpers/active-variable';\n\ndeclare global {\n  /**\n   * Window interface for adding objects to the window object.\n   */\n  interface Window {\n    /** EventDisplay object containing event display related functions. */\n    EventDisplay: any;\n  }\n}\n\n/**\n * Phoenix event display class for managing detector geometries and event data.\n */\nexport class EventDisplay {\n  /** Configuration for preset views and event data loader. */\n  private configuration: Configuration;\n  /** An object containing event data. */\n  private eventsData: any;\n  /** Array containing callbacks to be called when events change. */\n  private onEventsChange: ((events: any) => void)[] = [];\n  /** Array containing callbacks to be called when the displayed event changes. */\n  private onDisplayedEventChange: ((nowDisplayingEvent: any) => void)[] = [];\n  /** Three manager for three.js operations. */\n  private graphicsLibrary: ThreeManager;\n  /** Info logger for storing event display logs. */\n  private infoLogger: InfoLogger;\n  /** UI manager for UI menu. */\n  private ui: UIManager;\n  /** Loading manager for loadable resources */\n  private loadingManager: LoadingManager;\n  /** State manager for managing event display state. */\n  private stateManager: StateManager;\n\n  /**\n   * Create the Phoenix event display and intitialize all the elements.\n   * @param configuration Configuration used to customize different aspects.\n   */\n  constructor(configuration?: Configuration) {\n    this.loadingManager = new LoadingManager();\n    this.infoLogger = new InfoLogger();\n    this.graphicsLibrary = new ThreeManager(this.infoLogger);\n    this.ui = new UIManager(this.graphicsLibrary);\n    if (configuration) {\n      this.init(configuration);\n    }\n  }\n\n  /**\n   * Initialize all the Phoenix event display elements.\n   * @param configuration Configuration used to customize different aspects.\n   */\n  public init(configuration: Configuration) {\n    this.configuration = configuration;\n\n    // Initialize the three manager with configuration\n    this.graphicsLibrary.init(configuration);\n    // Initialize the UI with configuration\n    this.ui.init(configuration);\n    // Set up for the state manager\n    this.getStateManager().setEventDisplay(this);\n\n    // Animate loop\n    const uiLoop = () => {\n      this.ui.updateUI();\n    };\n    this.graphicsLibrary.setAnimationLoop(uiLoop);\n\n    // Process and apply URL options\n    if (configuration.allowUrlOptions !== false) {\n      const urlOptionsManager = new URLOptionsManager(this, configuration);\n      urlOptionsManager.applyOptions();\n    }\n\n    // Allow adding elements through console\n    this.enableEventDisplayConsole();\n    // Allow keyboard controls\n    this.enableKeyboardControls();\n  }\n\n  /**\n   * Initialize VR.\n   * @param onSessionEnded Callback when the VR session ends.\n   */\n  public initVR(onSessionEnded?: () => void) {\n    this.graphicsLibrary.initVRSession(onSessionEnded);\n  }\n\n  /**\n   * End VR and remove VR settings.\n   */\n  public endVR() {\n    this.graphicsLibrary.endVRSession();\n  }\n\n  /**\n   * Receives an object containing all the eventKeys and saves it.\n   * Then it loads by default the first event.\n   * @param eventsData Object containing the event data.\n   * @returns Array of strings containing the keys of the eventsData object.\n   */\n  public parsePhoenixEvents(eventsData: any): string[] {\n    this.eventsData = eventsData;\n    const eventKeys = this.configuration.eventDataLoader.getEventsList(\n      eventsData\n    );\n    this.loadEvent(eventKeys[0]);\n    this.onEventsChange.forEach((callback) => callback(eventKeys));\n    return eventKeys;\n  }\n\n  /**\n   * Receives an object containing one event and builds the different collections\n   * of physics objects.\n   * @param eventData Object containing the event data.\n   */\n  public buildEventDataFromJSON(eventData: any) {\n    // Creating UI folder\n    this.ui.addEventDataFolder();\n    this.ui.addLabelsFolder();\n    // Clearing existing event data\n    this.graphicsLibrary.clearEventData();\n    // Build data and add to scene\n    this.configuration.eventDataLoader.buildEventData(\n      eventData,\n      this.graphicsLibrary,\n      this.ui,\n      this.infoLogger\n    );\n    this.onDisplayedEventChange.forEach((callback) => callback(eventData));\n    // Reload the event data state in Phoenix menu\n    this.ui.loadEventFolderPMState();\n  }\n\n  /**\n   * Receives a string representing the key of an event and loads\n   * the event associated with that key.\n   * @param eventKey String that represents the event in the eventsData object.\n   */\n  public loadEvent(eventKey: any) {\n    const event = this.eventsData[eventKey];\n\n    if (event) {\n      this.buildEventDataFromJSON(event);\n    }\n  }\n\n  /**\n   * Get the three manager responsible for three.js functions.\n   * @returns The three.js manager.\n   */\n  public getThreeManager() {\n    return this.graphicsLibrary;\n  }\n\n  /**\n   * Get the UI manager responsible for UI related functions.\n   * @returns The UI manager.\n   */\n  public getUIManager() {\n    return this.ui;\n  }\n\n  /**\n   * Get the info logger containing event display logs.\n   * @returns The info logger instance being used by the event display.\n   */\n  public getInfoLogger() {\n    return this.infoLogger;\n  }\n\n  /**\n   * Get the loading manager for managing loadable items.\n   * @returns The loading manager.\n   */\n  public getLoadingManager() {\n    return this.loadingManager;\n  }\n\n  /**\n   * Get the state manager that manages event display's state.\n   * @returns The state manager.\n   */\n  public getStateManager() {\n    if (!this.stateManager) {\n      this.stateManager = new StateManager();\n    }\n    return this.stateManager;\n  }\n\n  // **********************\n  // * LOADING GEOMETRIES *\n  // **********************\n\n  /**\n   * Loads an OBJ (.obj) geometry from the given filename\n   * and adds it to the dat.GUI menu.\n   * @param filename Path to the geometry.\n   * @param name Name given to the geometry.\n   * @param color Color to initialize the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param doubleSided If true, render both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   * @param setFlat Whether object should be flat-shaded or not.\n   * @returns Promise for loading the geometry.\n   */\n  public loadOBJGeometry(\n    filename: string,\n    name: string,\n    color: any,\n    menuNodeName?: string,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true,\n    setFlat: boolean = true\n  ): Promise {\n    this.loadingManager.addLoadableItem(`obj_geom_${name}`);\n    this.ui.addGeometry(name, color, menuNodeName, initiallyVisible);\n    this.infoLogger.add(name, 'Loaded OBJ geometry');\n    return this.graphicsLibrary.loadOBJGeometry(\n      filename,\n      name,\n      color,\n      doubleSided,\n      initiallyVisible,\n      setFlat\n    );\n  }\n\n  /**\n   * Parses and loads an OBJ geometry from the given content\n   * and adds it to the dat.GUI menu.\n   * @param content Content of the OBJ geometry.\n   * @param name Name given to the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public parseOBJGeometry(\n    content: string,\n    name: string,\n    menuNodeName?: string,\n    initiallyVisible: boolean = true\n  ) {\n    this.loadingManager.addLoadableItem(`parse_obj_${name}`);\n    this.graphicsLibrary.parseOBJGeometry(content, name, initiallyVisible);\n    this.ui.addGeometry(name, 0x000fff, menuNodeName, initiallyVisible);\n  }\n\n  /**\n   * Exports scene to OBJ file format.\n   */\n  public exportToOBJ() {\n    this.graphicsLibrary.exportSceneToOBJ();\n    this.infoLogger.add('Exported scene to OBJ');\n  }\n\n  /**\n   * Parse and load an event from the Phoenix file format (.phnx).\n   * @param input Content containing the JSON with event data\n   * and other configuration.\n   * @returns Promise for loading the geometry.\n   */\n  public parsePhoenixDisplay(input: any): Promise {\n    const phoenixScene = JSON.parse(input);\n\n    if (phoenixScene.sceneConfiguration && phoenixScene.scene) {\n      // Creating UI folder\n      this.ui.addEventDataFolder();\n      this.ui.addLabelsFolder();\n      // Clearing existing event data\n      this.graphicsLibrary.clearEventData();\n      // Add to scene\n      this.loadSceneConfiguration(phoenixScene.sceneConfiguration);\n\n      this.loadingManager.addLoadableItem(`parse_phnx_${name}`);\n      return this.graphicsLibrary.parsePhnxScene(phoenixScene.scene);\n    }\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   */\n  public exportPhoenixDisplay() {\n    this.graphicsLibrary.exportPhoenixScene();\n  }\n\n  /**\n   * Parses and loads a geometry in GLTF (.gltf) format.\n   * @param input Data of the GLTF (.gltf) file.\n   * @param name Name given to the geometry.\n   * @returns Promise for loading the geometry.\n   */\n  public parseGLTFGeometry(\n    input: string | ArrayBuffer,\n    name: string\n  ): Promise {\n    this.loadingManager.addLoadableItem(`parse_gltf_${name}`);\n    this.ui.addGeometry(name, undefined);\n    this.infoLogger.add(name, 'Parsed GLTF geometry');\n    return this.graphicsLibrary.parseGLTFGeometry(input, name);\n  }\n\n  /**\n   * Loads a GLTF (.gltf) scene/geometry from the given URL.\n   * and adds it to the dat.GUI menu.\n   * @param url URL to the GLTF (.gltf) file.\n   * @param name Name of the loaded scene/geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   * @returns Promise for loading the geometry.\n   */\n  public loadGLTFGeometry(\n    url: any,\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    initiallyVisible: boolean = true\n  ): Promise {\n    this.loadingManager.addLoadableItem(`gltf_geom_${name}`);\n    this.ui.addGeometry(name, undefined, menuNodeName, initiallyVisible);\n    this.infoLogger.add(name, 'Loaded GLTF geometry');\n    return this.graphicsLibrary.loadGLTFGeometry(\n      url,\n      name,\n      scale,\n      initiallyVisible\n    );\n  }\n\n  /**\n   * Loads geometries from JSON.\n   * @param json JSON or URL to JSON file of the geometry.\n   * @param name Name of the geometry or group of geometries.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   * @returns Promise for loading the geometry.\n   */\n  public loadJSONGeometry(\n    json: string | object,\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true\n  ): Promise {\n    this.loadingManager.addLoadableItem(`json_geom_${name}`);\n    this.ui.addGeometry(name, undefined, menuNodeName, initiallyVisible);\n    this.infoLogger.add(name, 'Loaded JSON geometry');\n    return this.graphicsLibrary.loadJSONGeometry(\n      json,\n      name,\n      scale,\n      doubleSided,\n      initiallyVisible\n    );\n  }\n\n  /**\n   * Load JSON geometry from JSRoot.\n   * @param JSROOT JSRoot object containing all the JSROOT functions.\n   * @param url URL of the JSRoot geometry file.\n   * @param name Name of the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public loadRootJSONGeometry(\n    JSROOT: any,\n    url: string,\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true\n  ) {\n    this.loadingManager.addLoadableItem('root_json_geom');\n    JSROOT.NewHttpRequest(url, 'object', (obj: any) => {\n      this.loadJSONGeometry(\n        JSROOT.GEO.build(obj, { dflt_colors: true }).toJSON(),\n        name,\n        menuNodeName,\n        scale,\n        doubleSided,\n        initiallyVisible\n      );\n      this.loadingManager.itemLoaded('root_json_geom');\n    }).send();\n  }\n\n  /**\n   * Load ROOT geometry from JSRoot.\n   * @param JSROOT JSRoot object containing all the JSROOT functions.\n   * @param url URL of the JSRoot file.\n   * @param objectName Name of the object inside the \".root\" file.\n   * @param name Name of the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public loadRootGeometry(\n    JSROOT: any,\n    url: string,\n    objectName: string,\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true\n  ) {\n    if (url.indexOf('.root') > 0) {\n      JSROOT.openFile(url).then((file: any) => {\n        file.readObject(objectName).then((obj: any) => {\n          this.loadJSONGeometry(\n            JSROOT.GEO.build(obj, { dflt_colors: true }).toJSON(),\n            name,\n            menuNodeName,\n            scale,\n            doubleSided,\n            initiallyVisible\n          );\n        });\n      });\n    }\n  }\n\n  /**\n   * Build Geometry from thr passed parameters, where\n   * @param parameters\n   */\n  public buildGeometryFromParameters(parameters: any): void {\n    this.graphicsLibrary.addGeometryFromParameters(parameters);\n  }\n\n  /**\n   * Zoom all the cameras by a specific zoom factor.\n   * The factor may either be greater (zoom in) or smaller (zoom out) than 1.\n   * @param zoomFactor The factor to zoom by.\n   * @param zoomTime The time it takes for a zoom animation to complete.\n   */\n  public zoomTo(zoomFactor: number, zoomTime: number) {\n    this.graphicsLibrary.zoomTo(zoomFactor, zoomTime);\n  }\n\n  /**\n   * Processes event data and geometry for Loading the scene\n   * from Phoenix file format (.phnx).\n   * @param sceneConfiguration Scene configuration containingevent data and detector geometry.\n   */\n  private loadSceneConfiguration(sceneConfiguration: {\n    eventData: {};\n    geometries: [];\n  }) {\n    for (const objectType of Object.keys(sceneConfiguration.eventData)) {\n      const { typeFolder, typeFolderPM } = this.ui.addEventDataTypeFolder(\n        objectType\n      );\n      const collections = sceneConfiguration.eventData[objectType];\n      for (const collection of collections) {\n        this.ui.addCollection({ typeFolder, typeFolderPM }, collection);\n      }\n    }\n\n    for (const geom of sceneConfiguration.geometries) {\n      this.ui.addGeometry(geom, '#ffffff');\n    }\n  }\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  public getCollection(collectionName: string) {\n    return this.configuration.eventDataLoader.getCollection(collectionName);\n  }\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  public getCollections(): string[] {\n    return this.configuration.eventDataLoader.getCollections();\n  }\n\n  /**\n   * Add a callback to onDisplayedEventChange array to call\n   * the callback on changes to the displayed event.\n   * @param callback Callback to be added to the onDisplayedEventChange array.\n   */\n  public listenToDisplayedEventChange(callback: (event) => any) {\n    this.onDisplayedEventChange.push(callback);\n  }\n\n  /**\n   * Add a callback to onEventsChange array to call\n   * the callback on changes to the events.\n   * @param callback Callback to be added to the onEventsChange array.\n   */\n  public listenToLoadedEventsChange(callback: (events) => any) {\n    this.onEventsChange.push(callback);\n  }\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  public getEventMetadata(): any[] {\n    return this.configuration.eventDataLoader.getEventMetadata();\n  }\n\n  /**\n   * Enables calling specified event display methods in console.\n   */\n  private enableEventDisplayConsole() {\n    // Defining an EventDisplay object in window to access methods through console\n    window.EventDisplay = {\n      loadGLTFGeometry: (sceneUrl: string, name: string) => {\n        this.loadGLTFGeometry(sceneUrl, name);\n      },\n      loadOBJGeometry: (\n        filename: string,\n        name: string,\n        colour: any,\n        menuNodeName: string,\n        doubleSided: boolean\n      ) => {\n        this.loadOBJGeometry(filename, name, colour, menuNodeName, doubleSided);\n      },\n      loadJSONGeometry: (\n        json: string | object,\n        name: string,\n        menuNodeName: string,\n        scale?: number,\n        doubleSided?: boolean,\n        initiallyVisible: boolean = true\n      ) => {\n        this.loadJSONGeometry(\n          json,\n          name,\n          menuNodeName,\n          scale,\n          doubleSided,\n          initiallyVisible\n        );\n      },\n      buildGeometryFromParameters: (parameters: object) =>\n        this.buildGeometryFromParameters(parameters),\n    };\n  }\n\n  /**\n   * Sets the renderer to be used to render the event display on the overlayed canvas.\n   * @param overlayCanvas An HTML canvas on which the overlay renderer is to be set.\n   */\n  public setOverlayRenderer(overlayCanvas: HTMLCanvasElement) {\n    this.graphicsLibrary.setOverlayRenderer(overlayCanvas);\n  }\n\n  /**\n   * Initializes the object which will show information of the selected geometry/event data.\n   * @param selectedObject Object to display the data.\n   */\n  public allowSelection(selectedObject: { name: string; attributes: any[] }) {\n    this.graphicsLibrary.setSelectedObjectDisplay(selectedObject);\n  }\n\n  /**\n   * Toggles the ability of selecting geometries/event data by clicking on the screen.\n   * @param enable Value to enable or disable the functionality.\n   */\n  public enableSelecting(enable: boolean) {\n    this.graphicsLibrary.enableSelecting(enable);\n  }\n\n  /**\n   * Fixes the camera position of the overlay view.\n   * @param fixed Whether the overlay view is to be fixed or not.\n   */\n  public fixOverlayView(fixed: boolean) {\n    this.graphicsLibrary.fixOverlayView(fixed);\n  }\n\n  /**\n   * Get the uuid of the currently selected object.\n   * @returns uuid of the currently selected object.\n   */\n  public getActiveObjectId(): ActiveVariable {\n    return this.graphicsLibrary.getActiveObjectId();\n  }\n\n  /**\n   * Move the camera to look at the object with the given uuid\n   * and highlight it.\n   * @param uuid uuid of the object.\n   */\n  public lookAtObject(uuid: string) {\n    this.graphicsLibrary.lookAtObject(uuid);\n    this.graphicsLibrary.highlightObject(uuid);\n  }\n\n  /**\n   * Highlight the object with the given uuid by giving it an outline.\n   * @param uuid uuid of the object.\n   */\n  public highlightObject(uuid: string) {\n    this.graphicsLibrary.highlightObject(uuid);\n  }\n\n  /**\n   * Enable keyboard controls for the event display.\n   */\n  public enableKeyboardControls() {\n    this.ui.enableKeyboardControls();\n    this.graphicsLibrary.enableKeyboardControls();\n  }\n\n  /**\n   * Animate the camera through the event scene.\n   * @param startPos Start position of the translation animation.\n   * @param tweenDuration Duration of each tween in the translation animation.\n   * @param onAnimationEnd Callback when the last animation ends.\n   */\n  public animateThroughEvent(\n    startPos: number[],\n    tweenDuration: number,\n    onAnimationEnd?: () => void\n  ) {\n    this.graphicsLibrary.animateThroughEvent(\n      startPos,\n      tweenDuration,\n      onAnimationEnd\n    );\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateEventWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.graphicsLibrary.animateEventWithCollision(tweenDuration, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data\n   * using clipping planes after particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateClippingWithCollision(\n    tweenDuration: number,\n    onEnd?: () => void\n  ) {\n    this.graphicsLibrary.animateClippingWithCollision(tweenDuration, onEnd);\n  }\n\n  /**\n   * Add label to a 3D object.\n   * @param label Label to add to the event object.\n   * @param collection Collection the event object is a part of.\n   * @param indexInCollection Event object's index in collection.\n   * @param uuid UUID of the three.js object.\n   */\n  public addLabelToObject(\n    label: string,\n    collection: string,\n    indexInCollection: number,\n    uuid: string\n  ) {\n    const labelId = this.configuration.eventDataLoader.addLabelToEventObject(\n      label,\n      collection,\n      indexInCollection\n    );\n\n    // Remove the label if the string is empty\n    if (!label) {\n      this.ui.removeLabel(labelId, true);\n      return;\n    }\n\n    this.ui.addLabel(labelId);\n    this.graphicsLibrary.addLabelToObject(label, uuid, labelId);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file.\nSee Conventional Commits for commit guidelines.\n1.8.0 (2021-05-01)\nBug Fixes\n\nevent-display: better debugging info and prettier (df9ce07)\nevent-display: fix #289 cluster rendering (1a01248)\nevent-display: fixes and improvements for track import from JiveXML (c92d65f)\nevent-display: rk-helper should use CoordinateHelper (6085f50)\n\nFeatures\n\napp: add embed in sharable link constructor (8a0c0b1)\napp: add embed menu with a URL option for embed (56c6eff)\napp: add load progress based on number of loaded items (20ef288)\nevent-display: add color options to tracks collections (90aea3c)\nevent-display: add docs for color options class (6cd5d53)\nevent-display: add embed option to URL (cb68283)\nevent-display: add momentum color options UI (f1d2cef)\nevent-display: code improvement for momentum sliders (1a17e99)\nevent-display: color options for event data objects (9908cc9)\nevent-display: create coloring manager and color tracks by properties (c446567)\nevent-display: divide collection config options into child nodes (2e52c22)\nevent-display: highly optimize and generalize color by options (595d9e5)\nevent-display: implement color by momentum (9222e04)\nevent-display: implement embed menu (872f708)\nevent-display: use child node for collection's color options (8559830)\nevent-display: use class for color options in UI (4acca1a)\n\n1.7.0 (2021-04-21)\nBug Fixes\n\nevent-display: attempt to improve the output of the track extension by removing close hits (5bdc562)\nevent-display: fix drawing of hits (db3ca8b)\nevent-display: handle older json hit format again (edcd567)\n\n1.6.0 (2021-04-18)\nBug Fixes\n\napp: add sphericalToCartesian method (bbea6b0)\nevent-display: add back in geometrical limits for clusters (0b95e5b)\nevent-display: add eta and phi cuts for tracks (f8a0080)\nevent-display: add missing docs (c9781e5)\nevent-display: add missing documentation (236bdf4)\nevent-display: calocluster eta position was wrong. (66cbbc0)\nevent-display: cleanup JixeXML loader (6a834e8)\nevent-display: prettier fixes (7528ee0)\nevent-display: run prettier (again) (f279898)\nevent-display: use BufferGeometry for CMS objects with new three.js update (b8e88b8)\n\nFeatures\n\napp: bind clipping state with UI menu (40bbba0)\napp: complete dialog for share link and embed (50c2584)\napp: setup link share form (b10bb7a)\nevent-display: ability to remove geometry in Phoenix menu (7d90d72)\nevent-display: ability to scale CaloClusters (ff666e2)\nevent-display: add ability to scale clusters in just one direction (5a562ab), closes #257\nevent-display: add coordinate helper (57e438f)\nevent-display: add guidelines and simplify some coordinate transformations (56f94f0)\nevent-display: Add missing energy (6ef17d0)\nevent-display: add opacity and wireframe for CaloClusters (85d4a14)\nevent-display: add support for HitLines (455f536)\nevent-display: add types for dat.GUI (7632a18)\nevent-display: create an active observable variable (854e543)\nevent-display: improve grid lines (ca3cc2f)\nevent-display: improve handling of UI menus in UI manager (b7a324a)\nevent-display: introduce new URL options and improve handling them (f7cd6b4)\nevent-display: JiveXML : add support for more hit types (bbcdf0c)\nevent-display: keep state of event data folder on event switch (b52282f)\nevent-display: make Phoenix available in browser without a namespace (5389282)\nevent-display: move opacity and wireframing to collection level (6486982)\nevent-display: options for CaloClusters (68cd7ad)\nevent-display: Remove LineHits and use hits to extend tracks (30b5160)\nevent-display: restructure phoenix-event-display (2e16371)\nevent-display: separate dat.GUI UI menu (29093a2)\nevent-display: separate Phoenix menu UI from UI manager (5743adc)\nevent-display: split dat.GUI menu options (45a0123)\nevent-display: start splitting UI manager (56ff275)\nevent-display: use run and event number and file name for config json (03a1de4)\nupgrade all packages except three.js (8e2eff4)\nupgrade three.js except for CMSObjects (0b2dd8a)\n\n1.5.0 (2021-03-24)\nBug Fixes\n\nevent-display: catch VR request session error (d2874b8)\nevent-display: fix jsroot loading root file (8cbcaa5)\nevent-display: handle tracks with no positions (3b1991c)\nevent-display: improve renderer init (a8f8353)\nevent-display: remove optimize controls function (266af04)\nevent-display: remove redundant import (359d353)\nevent-display: use per physics object color and not collection color (ac0c4f1)\nremove JSROOT source files from repo (7bcd7ba)\n\nFeatures\n\napp: ability to import ig archive in CMS (9540af5)\napp: Add more realistic geometry for ATLAS (d207bad)\nevent-display: allow resize and improve tests and drop improving CPU usage (a474af2)\nevent-display: resize canvas with window resize (5ea04f1)\nevent-display: update to use CDN for JSROOT (2fa310f)\nevent-display: use latest version of JSROOT (fbd584e)\n\n1.4.0 (2021-02-16)\nBug Fixes\n\nevent-display: disable keyboard controls when typing (4f80bd6)\nevent-display: improve object selection from uuid and label input (3475836)\nevent-display: persist toggle state of phoenix menu node children (e96136b)\nevent-display: remove rollup config and fix globalThis usage (e6f69a0)\n\nFeatures\n\nevent-display: ability to add 3D label text (c9d4880)\nevent-display: add labels configuration to dat.GUI menu (d677089)\nevent-display: add labels to UI configuration (d90e3a6)\nevent-display: add size and color options for labels (3ce675f)\nevent-display: better handling of labels object (e10a68d)\nevent-display: complete setup with webpack for browser (3f6367f)\nevent-display: complete support to save and load labels (2219a3e)\nevent-display: create a url options manager for url options (fe0b2e6)\nevent-display: create generic function for getting object position (8d7b160)\nevent-display: delete label on empty value and change add label icon (3756330)\nevent-display: make label always look at camera (0837334)\nevent-display: set up add label to object functions (db261a6)\nevent-display: setup webpack for browser bundle (dc05ed9)\nevent-display: support to hide widgets through URL (cb2ec40)\nevent-display: use optional chaining for hide widgets url option (c991e54)\nevent-display: Use types for phoenix menu configuration (79e6d7c)\nevent-display: working labels object (60269f7)\nUpdate Angular and all packages to latest (f4c2e31)\n\n1.3.0 (2021-01-16)\nBug Fixes\n\nevent-display: assign the right name to geometry (b7e8da0)\nevent-display: code improvements (f94c0e4)\nevent-display: fix parsing of GLTF geometry (dc5d489)\nevent-display: improve code for hiding tube tracks (e9f1bc9)\nevent-display: minor script fix (5139c6e)\nevent-display: remove color from obj file userdata (8ba94e7)\nevent-display: revert jasmine spec files (dc140dd)\nevent-display: try fixing CMSLoader tests (789da8b)\n\nFeatures\n\nevent-display: display size on selection (6943f79)\nevent-display: hide tube tracks on zoom (7d606b2)\n\n1.2.0 (2020-12-06)\nBug Fixes\n\nevent-display: add Edward's controller set up (a6a1c19)\nevent-display: changes to animation loop for VR (37df19f)\nevent-display: finally fix VR completely (4764196)\nevent-display: fix applying multiple cuts at the same time (8f3e8e1)\nevent-display: fix applying state for range slider (c36a222)\nevent-display: fix loading and add default view to experiments (ab8feb4)\nevent-display: initialize cuts with correct values (e297c98)\nevent-display: make it possible to flat shade (dcf6cec)\nevent-display: optimal animation loop set up (da3ead5)\nevent-display: optimal render for effects manager (1975d70)\nevent-display: reset clipping on init (029d526)\nevent-display: stop animation loop on home (c39ecd3)\nevent-display: update configuration in tests (18f8db2)\n\nFeatures\n\napp: add toggle for screenshot mode (22a1ec8)\napp: make loader generic (ff10477)\napp: set up performance mode with selection (947f6bf)\napp: use event display loader in Angular component (25b2a9d)\nevent-display: ability to add geometry to a menu folder (30b0383)\nevent-display: ability to initialize event display without init (69d3f75)\nevent-display: add ability to add parametrised geometry (04dc545)\nevent-display: add and set up loading manager (5f0f942)\nevent-display: handle loading better (9474565)\nevent-display: make loading functions return Promise for async await (4262a1b)\nevent-display: performance mode and antialias support (d3920c4)\nevent-display: support for toggling antialiasing (48130b2)\nevent-display: use object to simplify configuration (4b10452)\n\n1.1.0 (2020-11-07)\nBug Fixes\n\napp: cut filter failed if value return was zero (0a26fea)\napp: cut should be pT, not mom (73b7c27)\napp: fix attribute pipe (0980379)\napp: fix tests (f87c587)\napp: pT should always be positive (3918159)\nevent-display: add optional chaining to CMS event info (fixes tests) (5283e9a)\nevent-display: fix geometry too big in overlay view (c7a35db)\nevent-display: fix URL event not working with hash routes (9eb21f5)\nevent-display: Formatted correctly (b46c49f)\nevent-display: use optional chaining in CMS loader (cfb1b6a)\nVR: Fix bugged scene in VR mode (9efd9ca)\n\nFeatures\n\napp: Option to load config from URL in ATLAS (1906976)\napp: phoenix-ui-components library (17909eb)\napp: yet another MAJOR refactoring (1261358)\nevent-display: add defaultView to configuration (612205c)\nevent-display: implicitly load event data from URL (9e3dc20)\nevent-display: state manager for managing event display state for save and load (7d1ca22)\n\n1.0.2 (2020-10-05)\n\nComplete deployment set up (399ac77)\n\n1.0.1 (2020-10-05)\nNote: Version bump only for package phoenix-event-display\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/event-display.ts\n            \n            class\n            EventDisplay\n            \n                100 %\n                (53/53)\n            \n        \n        \n            \n                \n                src/event-display.ts\n            \n            interface\n            Window\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/extras/configuration.ts\n            \n            interface\n            Configuration\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/extras/cut.model.ts\n            \n            class\n            Cut\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/extras/preset-view.model.ts\n            \n            class\n            PresetView\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/helpers/active-variable.ts\n            \n            class\n            ActiveVariable\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/helpers/constants.ts\n            \n            variable\n            EVENT_DATA_TYPE_COLORS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/coordinate-helper.ts\n            \n            class\n            CoordinateHelper\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/helpers/file.ts\n            \n            variable\n            loadFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/file.ts\n            \n            variable\n            saveFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/info-logger.ts\n            \n            class\n            InfoLogger\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/helpers/pretty-symbols.ts\n            \n            class\n            PrettySymbols\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/helpers/rk-helper.ts\n            \n            class\n            RKHelper\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            Field\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            RungeKutta\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            State\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/loaders/cms-loader.ts\n            \n            class\n            CMSLoader\n            \n                100 %\n                (34/34)\n            \n        \n        \n            \n                \n                src/loaders/event-data-loader.ts\n            \n            interface\n            EventDataLoader\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/loaders/jivexml-loader.ts\n            \n            class\n            JiveXMLLoader\n            \n                100 %\n                (38/38)\n            \n        \n        \n            \n                \n                src/loaders/jsroot-event-loader.ts\n            \n            class\n            JSRootEventLoader\n            \n                100 %\n                (28/28)\n            \n        \n        \n            \n                \n                src/loaders/lhcb-loader.ts\n            \n            class\n            LHCbLoader\n            \n                100 %\n                (24/24)\n            \n        \n        \n            \n                \n                src/loaders/objects/cms-objects.ts\n            \n            class\n            CMSObjects\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/loaders/objects/phoenix-objects.ts\n            \n            class\n            PhoenixObjects\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/loaders/phoenix-loader.ts\n            \n            class\n            PhoenixLoader\n            \n                100 %\n                (20/20)\n            \n        \n        \n            \n                \n                src/loaders/script-loader.ts\n            \n            class\n            ScriptLoader\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/loaders/script-loader.ts\n            \n            variable\n            JSROOT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/loaders/trackml-loader.ts\n            \n            class\n            TrackmlLoader\n            \n                100 %\n                (27/27)\n            \n        \n        \n            \n                \n                src/managers/loading-manager.ts\n            \n            class\n            LoadingManager\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/managers/state-manager.ts\n            \n            class\n            StateManager\n            \n                100 %\n                (17/17)\n            \n        \n        \n            \n                \n                src/managers/three-manager/animations-manager.ts\n            \n            class\n            AnimationsManager\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/managers/three-manager/color-manager.ts\n            \n            class\n            ColorManager\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/managers/three-manager/controls-manager.ts\n            \n            class\n            ControlsManager\n            \n                100 %\n                (36/36)\n            \n        \n        \n            \n                \n                src/managers/three-manager/effects-manager.ts\n            \n            class\n            EffectsManager\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/managers/three-manager/export-manager.ts\n            \n            class\n            ExportManager\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/managers/three-manager/import-manager.ts\n            \n            class\n            ImportManager\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                src/managers/three-manager/index.ts\n            \n            class\n            ThreeManager\n            \n                100 %\n                (63/63)\n            \n        \n        \n            \n                \n                src/managers/three-manager/renderer-manager.ts\n            \n            class\n            RendererManager\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/managers/three-manager/scene-manager.ts\n            \n            class\n            SceneManager\n            \n                100 %\n                (42/42)\n            \n        \n        \n            \n                \n                src/managers/three-manager/selection-manager.ts\n            \n            class\n            SelectionManager\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/managers/three-manager/vr-manager.ts\n            \n            class\n            VRManager\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/color-options.ts\n            \n            class\n            ColorOptions\n            \n                100 %\n                (17/17)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/dat-gui-ui.ts\n            \n            class\n            DatGUIMenuUI\n            \n                100 %\n                (20/20)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/index.ts\n            \n            class\n            UIManager\n            \n                100 %\n                (38/38)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts\n            \n            class\n            PhoenixMenuNode\n            \n                100 %\n                (24/24)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts\n            \n            class\n            PhoenixMenuUI\n            \n                100 %\n                (18/18)\n            \n        \n        \n            \n                \n                src/managers/url-options-manager.ts\n            \n            class\n            URLOptionsManager\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/managers/url-options-manager.ts\n            \n            variable\n            phoenixURLOptions\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @tweenjs/tween.js : ^17.4.0\n        \n            dat.gui : ^0.7.7\n        \n            jszip : ^3.6.0\n        \n            stats-js : ^1.0.1\n        \n            three : ^0.127.0\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ColorByOptionKeys   (src/.../color-options.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/managers/ui-manager/color-options.ts\n    \n        \n            \n                \n                    \n                        \n                        ColorByOptionKeys\n                    \n                \n                    \n                        \n                            Keys for options available for coloring event data by. \n\n                        \n                    \n                        \n                            \n                                 CHARGE\n                            \n                        \n                        \n                            \n                                Value : charge\n                            \n                        \n                        \n                            \n                                 MOM\n                            \n                        \n                        \n                            \n                                Value : mom\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nPhoenix event display\n\n\n\nA highly modular and API driven experiment independent event display that uses three.js for processing and presenting detector geometry and event data.\nTo use in your application, install the package.\nnpm install phoenix-event-display\n# or\nyarn add phoenix-event-displayUsage\nAs a module\nTo create a simple event display.\n// Import required classes\nimport { EventDisplay, PhoenixLoader } from 'phoenix-event-display';\n\n// Create the event display\nconst eventDisplay = new EventDisplay();\n\n// Define the configuration\nconst configuration = {\n  elementId: '',\n  eventDataLoader: new PhoenixLoader() // or some other event data loader\n  // ... other configuration options\n};\n\n// Initialize the event display with the configuration\neventDisplay.init(configuration);\n\n// Load and parse event data in Phoenix format and display it\nfetch('path/to/event-data.json')\n  .then((res) => res.json())\n  .then((res) => {\n    eventDisplay.parsePhoenixEvents(res);\n  });\n\n// Load detector geometry\neventDisplay.loadOBJGeometry('path/to/geometry.obj', 'Detector OBJ', 0x8c8c8c /* color */);\nAs a standalone bundle\nPhoenix can be bundled and used directly in the HTML as a script. You can either use the CDN or build from source.\nTo build Phoenix as a bundle.\nyarn build:bundleThis will generate a file phoenix.min.js in the ./dist/bundle directory which can be included in your HTML code.\nWithout building, you can include the bundle directly from CDN.\n\n  \n    ...\n  \n\n  \n\n    \n\n    \n\n    \n      // Create the event display\n      const eventDisplay = new EventDisplay();\n\n      // Define the configuration\n      const configuration = {\n        elementId: 'eventDisplay',\n        eventDataLoader: new PhoenixLoader() // or some other event data loader\n        // ... other configuration options\n      };\n\n      // Initialize the event display with the configuration\n      eventDisplay.init(configuration);\n\n      // ... other event display functions\n    \n\n  \nExamples\n\nUsage in Angular (as a service)\nUsage in React\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    39 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CallbackFunction   (src/.../active-variable.ts)\n                        \n                        \n                            ColorByOption   (src/.../color-options.ts)\n                        \n                        \n                            PhoenixMenuConfig   (src/.../phoenix-menu-node.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/helpers/active-variable.ts\n    \n    \n        \n            \n                \n                    \n                    CallbackFunction\n                \n            \n            \n                \n                    Callback function type. \n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/managers/ui-manager/color-options.ts\n    \n    \n        \n            \n                \n                    \n                    ColorByOption\n                \n            \n            \n                \n                    Type for a single color by option. \n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts\n    \n    \n        \n            \n                \n                    \n                    PhoenixMenuConfig\n                \n            \n            \n                \n                    Configuration types for PhoenixMenuNode.\n\n                \n            \n            \n                \n                        \"checkbox\" | \"slider\" | \"button\" | \"label\" | \"color\" | \"rangeSlider\" | \"select\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EVENT_DATA_TYPE_COLORS   (src/.../constants.ts)\n                        \n                        \n                            JSROOT   (src/.../script-loader.ts)\n                        \n                        \n                            loadFile   (src/.../file.ts)\n                        \n                        \n                            phoenixURLOptions   (src/.../url-options-manager.ts)\n                        \n                        \n                            saveFile   (src/.../file.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/helpers/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EVENT_DATA_TYPE_COLORS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  Hits: new Color(0xff0000),\n  Tracks: new Color(0xff0000),\n  Jets: new Color(0x2194ce),\n  CaloClusters: new Color(0xffd166),\n  MuonChambers: new Color(0xff0000),\n  Vertices: new Color(0xffd166),\n  MissingEnergy: new Color(0xffffff),\n}\n                        \n                    \n\n                \n                    \n                        Colors of different event data types. \n\n                    \n                \n\n            \n        \n\n    src/loaders/script-loader.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            JSROOT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n                \n                    \n                        Global JSROOT variable for accessing functions after loading JSRoot scripts. \n\n                    \n                \n\n            \n        \n\n    src/helpers/file.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            loadFile\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  onFileRead: (data: string) => void,\n  contentType: string = 'application/json'\n) => {\n  // Create a mock input file element and use that to read the file\n  let inputFile = document.createElement('input');\n  inputFile.type = 'file';\n  inputFile.accept = contentType;\n  inputFile.onchange = (e: any) => {\n    const configFile = e.target?.files[0];\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      onFileRead?.(e.target.result.toString());\n\n      inputFile.remove();\n      inputFile = null;\n    };\n    reader.readAsText(configFile);\n  };\n  inputFile.click();\n}\n                        \n                    \n\n                \n                    \n                        Load a file from user by mocking an input element.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            saveFile\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  data: string,\n  fileName: string,\n  contentType: string = 'application/json'\n) => {\n  const blob = new Blob([data], { type: contentType });\n  const tempAnchor = document.createElement('a');\n  tempAnchor.style.display = 'none';\n  tempAnchor.href = URL.createObjectURL(blob);\n  tempAnchor.download = fileName;\n  tempAnchor.click();\n  tempAnchor.remove();\n}\n                        \n                    \n\n                \n                    \n                        Save and download file with the given data.\n\n                    \n                \n\n            \n        \n\n    src/managers/url-options-manager.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            phoenixURLOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  file: '',\n  type: '',\n  config: '',\n  hideWidgets: false,\n  embed: false,\n}\n                        \n                    \n\n                \n                    \n                        Model for Phoenix URL options.\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
