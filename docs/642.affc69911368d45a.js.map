{"version":3,"file":"642.affc69911368d45a.js","mappings":"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","names":["kResetHisto","BIT","TMultiGraphPainter","ObjectPainter","constructor","dom","mgraph","super","this","firstpainter","painters","cleanup","updateObject","obj","matchObjectType","getObject","graphs","fGraphs","pp","getPadPainter","fTitle","isany","histo","scanGraphsRange","fHistogram","getRootPad","ngr","Math","min","arr","length","i","opt","_restopt","_auto","_funcHandler","FunctionsHandler","fFunctions","redraw","reason","_this","_asyncToGenerator","promise","Promise","resolve","redrawNext","_ref","indx","then","_x","apply","arguments","res","drawNext","pad","reset_histo","rw","xmin","xmax","ymin","ymax","first","test","v1","v2","abs","maximum","minimum","src_hist","logx","logy","dummy_histo","fLogx","fLogv","fLogy","_3d","fXaxis","fLabels","fMinimum","fMaximum","fXmin","fXmax","forEach","gr","fNpoints","TestBit","fX","fY","max","dx","dy","uxmin","uxmax","log10","glob_minimum","glob_maximum","kNoZoom","xaxis","yaxis","createHistogram","clTH2I","create","clTHashList","lbl","clTObjString","fString","fUniqueID","Add","fYaxis","fZaxis","clTH1I","fTimeDisplay","fTimeFormat","indexOf","t","split","axis","fBits","kNoStats","drawAxisHist","hopt","_this2","TH1Painter","draw","getDrawDom","drawGraph","TGraphPainter","drawNextGraph","pad_painter","_this3","draw_opt","pos3d","subid","subpad_painter","getSubPadPainter","cleanPrimitives","subp","setSecondaryId","push","$num_graphs","fillContextMenuItems","menu","addRedrawMenu","redrawWith","skip_cleanup","_this4","removePrimitive","_pads","divide","d","DrawOptions","check","f","PadDrawOptions","name","remain","ensureTCanvas","getMainPainter","ap","addToPadPrimitives","TMultiGraphPainter2D","TH2Painter"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist2d/TMultiGraphPainter.mjs","../node_modules/jsroot/modules/hist/TMultiGraphPainter.mjs"],"sourcesContent":["import { create, createHistogram, clTH1I, clTH2I, clTObjString, clTHashList, kNoZoom, kNoStats, BIT } from '../core.mjs';\nimport { DrawOptions } from '../base/BasePainter.mjs';\nimport { ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { FunctionsHandler } from './THistPainter.mjs';\nimport { TH1Painter, PadDrawOptions } from './TH1Painter.mjs';\nimport { TGraphPainter } from './TGraphPainter.mjs';\nimport { ensureTCanvas } from '../gpad/TCanvasPainter.mjs';\n\n\nconst kResetHisto = BIT(17);\n\n/**\n * @summary Painter for TMultiGraph object.\n *\n * @private\n */\n\nclass TMultiGraphPainter extends ObjectPainter {\n\n   /** @summary Create painter\n     * @param {object|string} dom - DOM element for drawing or element id\n     * @param {object} obj - TMultiGraph object to draw */\n   constructor(dom, mgraph) {\n      super(dom, mgraph);\n      this.firstpainter = null;\n      this.painters = []; // keep painters to be able update objects\n   }\n\n   /** @summary Cleanup TMultiGraph painter */\n   cleanup() {\n      this.painters = [];\n      super.cleanup();\n   }\n\n   /** @summary Update TMultiGraph object */\n   updateObject(obj) {\n      if (!this.matchObjectType(obj))\n         return false;\n\n      const mgraph = this.getObject(),\n            graphs = obj.fGraphs,\n            pp = this.getPadPainter();\n\n      mgraph.fTitle = obj.fTitle;\n\n      let isany = false;\n      if (this.firstpainter) {\n         const histo = this.scanGraphsRange(graphs, obj.fHistogram, pp?.getRootPad(true), true);\n         if (this.firstpainter.updateObject(histo))\n            isany = true;\n      }\n\n      const ngr = Math.min(graphs.arr.length, this.painters.length);\n\n      // TODO: handle changing number of graphs\n      for (let i = 0; i < ngr; ++i) {\n         if (this.painters[i].updateObject(graphs.arr[i], (graphs.opt[i] || this._restopt) + this._auto))\n            isany = true;\n      }\n\n      this._funcHandler = new FunctionsHandler(this, pp, obj.fFunctions);\n\n      return isany;\n   }\n\n   /** @summary Redraw TMultiGraph\n     * @desc may redraw histogram which was used to draw axes\n     * @return {Promise} for ready */\n    async redraw(reason) {\n       const promise = this.firstpainter?.redraw(reason) ?? Promise.resolve(true),\n             redrawNext = async indx => {\n                if (indx >= this.painters.length)\n                   return this;\n                return this.painters[indx].redraw(reason).then(() => redrawNext(indx + 1));\n             };\n\n       return promise.then(() => redrawNext(0)).then(() => {\n          const res = this._funcHandler?.drawNext(0) ?? this;\n          delete this._funcHandler;\n          return res;\n       });\n    }\n\n   /** @summary Scan graphs range\n     * @return {object} histogram for axes drawing */\n   scanGraphsRange(graphs, histo, pad, reset_histo) {\n      const mgraph = this.getObject(),\n            rw = { xmin: 0, xmax: 0, ymin: 0, ymax: 0, first: true },\n            test = (v1, v2) => { return Math.abs(v2-v1) < 1e-6; };\n      let maximum, minimum, logx = false, logy = false,\n          src_hist, dummy_histo = false;\n\n      if (pad) {\n         logx = pad.fLogx;\n         logy = pad.fLogv ?? pad.fLogy;\n      }\n\n      // ignore existing histogram in 3d case\n      if (this._3d && histo && !histo.fXaxis.fLabels)\n         histo = null;\n\n      if (!histo)\n         src_hist = graphs.arr[0]?.fHistogram;\n      else {\n         dummy_histo = test(histo.fMinimum, -0.05) && test(histo.fMaximum, 1.05) &&\n                       test(histo.fXaxis.fXmin, -0.05) && test(histo.fXaxis.fXmax, 1.05);\n         src_hist = histo;\n      }\n\n      graphs.arr.forEach(gr => {\n         if (gr.fNpoints === 0)\n            return;\n         if (gr.TestBit(kResetHisto))\n            reset_histo = true;\n         if (rw.first) {\n            rw.xmin = rw.xmax = gr.fX[0];\n            rw.ymin = rw.ymax = gr.fY[0];\n            rw.first = false;\n         }\n         for (let i = 0; i < gr.fNpoints; ++i) {\n            rw.xmin = Math.min(rw.xmin, gr.fX[i]);\n            rw.xmax = Math.max(rw.xmax, gr.fX[i]);\n            rw.ymin = Math.min(rw.ymin, gr.fY[i]);\n            rw.ymax = Math.max(rw.ymax, gr.fY[i]);\n         }\n      });\n\n      if (rw.xmin === rw.xmax)\n         rw.xmax += 1;\n      if (rw.ymin === rw.ymax)\n         rw.ymax += 1;\n      const dx = 0.05 * (rw.xmax - rw.xmin),\n            dy = 0.05 * (rw.ymax - rw.ymin);\n\n      let uxmin = rw.xmin - dx,\n          uxmax = rw.xmax + dx;\n      if (logy) {\n         if (rw.ymin <= 0)\n            rw.ymin = 0.001 * rw.ymax;\n         minimum = rw.ymin / (1 + 0.5 * Math.log10(rw.ymax / rw.ymin));\n         maximum = rw.ymax * (1 + 0.2 * Math.log10(rw.ymax / rw.ymin));\n      } else {\n         minimum = rw.ymin - dy;\n         maximum = rw.ymax + dy;\n      }\n      if (minimum < 0 && rw.ymin >= 0)\n         minimum = 0;\n      if (maximum > 0 && rw.ymax <= 0)\n         maximum = 0;\n\n      const glob_minimum = minimum, glob_maximum = maximum;\n\n      if (uxmin < 0 && rw.xmin >= 0)\n         uxmin = logx ? 0.9 * rw.xmin : 0;\n      if (uxmax > 0 && rw.xmax <= 0)\n         uxmax = logx? 1.1 * rw.xmax : 0;\n\n      if (mgraph.fMinimum !== kNoZoom)\n         rw.ymin = minimum = mgraph.fMinimum;\n      if (mgraph.fMaximum !== kNoZoom)\n         rw.ymax = maximum = mgraph.fMaximum;\n\n      if (minimum < 0 && rw.ymin >= 0 && logy)\n         minimum = 0.9 * rw.ymin;\n      if (maximum > 0 && rw.ymax <= 0 && logy)\n         maximum = 1.1 * rw.ymax;\n      if (minimum <= 0 && logy)\n         minimum = 0.001 * maximum;\n      if (!logy && minimum > 0 && minimum < 0.05*maximum)\n         minimum = 0;\n      if (uxmin <= 0 && logx)\n         uxmin = (uxmax > 1000) ? 1 : 0.001 * uxmax;\n\n      // Create a temporary histogram to draw the axis (if necessary)\n      if (!histo || reset_histo || dummy_histo) {\n         let xaxis, yaxis;\n         if (this._3d) {\n            histo = createHistogram(clTH2I, graphs.arr.length, 10);\n            xaxis = histo.fXaxis;\n            xaxis.fXmin = 0;\n            xaxis.fXmax = graphs.arr.length;\n            xaxis.fLabels = create(clTHashList);\n            for (let i = 0; i < graphs.arr.length; i++) {\n               const lbl = create(clTObjString);\n               lbl.fString = graphs.arr[i].fTitle || `gr${i}`;\n               lbl.fUniqueID = graphs.arr.length - i; // graphs drawn in reverse order\n               xaxis.fLabels.Add(lbl, '');\n            }\n            xaxis = histo.fYaxis;\n            yaxis = histo.fZaxis;\n         } else {\n            histo = createHistogram(clTH1I, 10);\n            xaxis = histo.fXaxis;\n            yaxis = histo.fYaxis;\n         }\n\n         if (src_hist) {\n            xaxis.fTimeDisplay = src_hist.fXaxis.fTimeDisplay;\n            xaxis.fTimeFormat = src_hist.fXaxis.fTimeFormat;\n            xaxis.fTitle = src_hist.fXaxis.fTitle;\n            yaxis.fTitle = src_hist.fYaxis.fTitle;\n         }\n\n         histo.fTitle = mgraph.fTitle;\n         if (histo.fTitle.indexOf(';') >= 0) {\n            const t = histo.fTitle.split(';');\n            histo.fTitle = t[0];\n            if (t[1]) xaxis.fTitle = t[1];\n            if (t[2]) yaxis.fTitle = t[2];\n         }\n         xaxis.fXmin = uxmin;\n         xaxis.fXmax = uxmax;\n      }\n\n      const axis = this._3d ? histo.fZaxis : histo.fYaxis;\n      axis.fXmin = Math.min(minimum, glob_minimum);\n      axis.fXmax = Math.max(maximum, glob_maximum);\n      if (histo.fMinimum === kNoZoom)\n         histo.fMinimum = minimum;\n      if (histo.fMaximum === kNoZoom)\n         histo.fMaximum = maximum;\n      histo.fBits |= kNoStats;\n\n      return histo;\n   }\n\n   /** @summary draw special histogram for axis\n     * @return {Promise} when ready */\n   async drawAxisHist(histo, hopt) {\n      return TH1Painter.draw(this.getDrawDom(), histo, hopt);\n   }\n\n   /** @summary Draw graph  */\n   async drawGraph(dom, gr, opt /* , pos3d */) {\n      return TGraphPainter.draw(dom, gr, opt);\n   }\n\n   /** @summary method draws next graph  */\n   async drawNextGraph(indx, pad_painter) {\n      const graphs = this.getObject().fGraphs;\n\n      // at the end of graphs drawing draw functions (if any)\n      if (indx >= graphs.arr.length)\n         return this;\n\n      const gr = graphs.arr[indx],\n            draw_opt = (graphs.opt[indx] || this._restopt) + this._auto,\n            pos3d = graphs.arr.length - indx,\n            subid = `graphs_${indx}`;\n\n      // handling of 'pads' draw option\n      if (pad_painter) {\n         const subpad_painter = pad_painter.getSubPadPainter(indx+1);\n         if (!subpad_painter)\n            return this;\n\n         subpad_painter.cleanPrimitives(true);\n\n         return this.drawGraph(subpad_painter, gr, draw_opt, pos3d).then(subp => {\n            if (subp) {\n               subp.setSecondaryId(this, subid);\n               this.painters.push(subp);\n            }\n            return this.drawNextGraph(indx+1, pad_painter);\n         });\n      }\n\n      // used in automatic colors numbering\n      if (this._auto)\n         gr.$num_graphs = graphs.arr.length;\n\n      return this.drawGraph(this.getPadPainter(), gr, draw_opt, pos3d).then(subp => {\n         if (subp) {\n            subp.setSecondaryId(this, subid);\n            this.painters.push(subp);\n         }\n\n         return this.drawNextGraph(indx+1);\n      });\n   }\n\n   /** @summary Fill TMultiGraph context menu */\n   fillContextMenuItems(menu) {\n      menu.addRedrawMenu(this);\n   }\n\n   /** @summary Redraw TMultiGraph object using provided option\n     * @private */\n   async redrawWith(opt, skip_cleanup) {\n      if (!skip_cleanup) {\n         this.firstpainter = null;\n         this.painters = [];\n         const pp = this.getPadPainter();\n         pp?.removePrimitive(this, true);\n         if (this._pads)\n            pp?.divide(0, 0);\n      }\n\n      const d = new DrawOptions(opt),\n            mgraph = this.getObject();\n\n      this._3d = d.check('3D');\n      this._auto = ''; // extra options for auto colors\n      this._pads = d.check('PADS');\n      ['PFC', 'PLC', 'PMC'].forEach(f => { if (d.check(f)) this._auto += ' ' + f; });\n\n      let hopt = '', pad_painter = null;\n      if (d.check('FB') && this._3d) hopt += 'FB'; // will be directly combined with LEGO\n      PadDrawOptions.forEach(name => { if (d.check(name)) hopt += ';' + name; });\n\n      this._restopt = d.remain();\n\n      let promise = Promise.resolve(true);\n      if (this._pads) {\n         promise = ensureTCanvas(this, false).then(() => {\n            pad_painter = this.getPadPainter();\n            return pad_painter.divide(mgraph.fGraphs.arr.length, 0, true);\n         });\n      } else if (d.check('A') || !this.getMainPainter()) {\n         const histo = this.scanGraphsRange(mgraph.fGraphs, mgraph.fHistogram, this.getPadPainter()?.getRootPad(true));\n\n         promise = this.drawAxisHist(histo, hopt).then(ap => {\n            ap.setSecondaryId(this, 'hist'); // mark that axis painter generated from mg\n            this.firstpainter = ap;\n         });\n      }\n\n      return promise.then(() => {\n         this.addToPadPrimitives();\n         return this.drawNextGraph(0, pad_painter);\n      }).then(() => {\n         if (this._pads)\n            return this;\n         const handler = new FunctionsHandler(this, this.getPadPainter(), this.getObject().fFunctions, true);\n         return handler.drawNext(0); // returns painter\n      });\n   }\n\n   /** @summary Draw TMultiGraph object */\n   static async draw(dom, mgraph, opt) {\n      const painter = new TMultiGraphPainter(dom, mgraph, opt);\n      return painter.redrawWith(opt, true);\n   }\n\n} // class TMultiGraphPainter\n\nexport { TMultiGraphPainter };\n","import { TMultiGraphPainter as TMultiGraphPainter2D } from '../hist2d/TMultiGraphPainter.mjs';\nimport { TH1Painter } from '../hist2d/TH1Painter.mjs';\nimport { TH2Painter } from './TH2Painter.mjs';\nimport { TGraphPainter } from './TGraphPainter.mjs';\n\n\nclass TMultiGraphPainter extends TMultiGraphPainter2D {\n\n   /** @summary draw special histogram for axis\n     * @return {Promise} when ready */\n   async drawAxisHist(histo, hopt) {\n      const dom = this.getDrawDom();\n      return this._3d\n              ? TH2Painter.draw(dom, histo, 'LEGO' + hopt)\n              : TH1Painter.draw(dom, histo, hopt);\n   }\n\n   /** @summary draw multi graph in 3D */\n   async drawGraph(dom, gr, opt, pos3d) {\n      if (this._3d) opt += `pos3d_${pos3d}`;\n      return TGraphPainter.draw(dom, gr, opt);\n   }\n\n   /** @summary Draw TMultiGraph object */\n   static async draw(dom, mgraph, opt) {\n      const painter = new TMultiGraphPainter(dom, mgraph, opt);\n      return painter.redrawWith(opt, true);\n   }\n\n} // class TMultiGraphPainter\n\nexport { TMultiGraphPainter };\n"],"x_google_ignoreList":[0,1]}