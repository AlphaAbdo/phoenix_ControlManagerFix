{"version":3,"file":"165.e12959451968ef80.js","mappings":"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","names":["TScatterPainter","TGraphPainter","constructor","dom","obj","super","this","_is_scatter","_not_adjust_hrange","getGraph","getObject","fGraph","getHistRangeMargin","fMargin","drawAxisHisto","_this","_asyncToGenerator","histo","createHistogram","TH2Painter","draw","getDrawDom","options","Axis","getPalette","gr","pal","fFunctions","arr","find","func","_typename","clTPaletteAxis","create","fp","get_main","Object","assign","fX1NDC","fX2NDC","fY1NDC","fY2NDC","fInit","$can_move","fAxis","fChopt","fLineColor","fLineSyle","fLineWidth","fTextAngle","fTextAlign","fNdiv","AddFirst","_updateMembers","scatter","fBits","fTitle","fNpoints","fColor","fSize","fMinMarkerSize","fMaxMarkerSize","getZaxis","getHistogram","fZaxis","canZoomInside","axis","min","max","levels","fContour","getLevels","i","length","drawGraph","_this2","fpainter","hpainter","getMainPainter","hist","scale","offset","$main_painter","pp","getPadPainter","_color_palette","isFunc","getCustomPalette","getColorPalette","Palette","isGrayscale","minc","maxc","Math","HistContour","createNormal","configIndicies","zmin","zmax","zoomChangedInteractive","fMinimum","kNoZoom","fMaximum","zoom_zmin","zoom_zmax","mins","maxs","createG","pad_layer","funcs","getGrFuncs","is_zoom","bins","pnt","grx","x","gry","y","size","fMarkerSize","color","getPaletteColor","getColor","fMarkerColor","handle","TAttMarkerHandler","style","fMarkerStyle","draw_g","append","attr","call","opt","_drawGraph"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist2d/TScatterPainter.mjs"],"sourcesContent":["import { clTPaletteAxis, isFunc, create, kNoZoom } from '../core.mjs';\nimport { getColorPalette } from '../base/colors.mjs';\nimport { TAttMarkerHandler } from '../base/TAttMarkerHandler.mjs';\nimport { TGraphPainter } from './TGraphPainter.mjs';\nimport { HistContour } from './THistPainter.mjs';\nimport { TH2Painter } from './TH2Painter.mjs';\n\n\nclass TScatterPainter extends TGraphPainter {\n\n   constructor(dom, obj) {\n      super(dom, obj);\n      this._is_scatter = true;\n      this._not_adjust_hrange = true;\n   }\n\n   /** @summary Return drawn graph object */\n   getGraph() { return this.getObject()?.fGraph; }\n\n   /** @summary Return margins for histogram ranges */\n   getHistRangeMargin() { return this.getObject()?.fMargin ?? 0.1; }\n\n  /** @summary Draw axis histogram\n    * @private */\n   async drawAxisHisto() {\n      const histo = this.createHistogram();\n      return TH2Painter.draw(this.getDrawDom(), histo, this.options.Axis + ';IGNORE_PALETTE');\n   }\n\n  /** @summary Provide palette, create if necessary\n    * @private */\n   getPalette() {\n      const gr = this.getGraph();\n      let pal = gr?.fFunctions?.arr?.find(func => (func._typename === clTPaletteAxis));\n\n      if (!pal && gr) {\n         pal = create(clTPaletteAxis);\n\n         const fp = this.get_main();\n         Object.assign(pal, { fX1NDC: fp.fX2NDC + 0.005, fX2NDC: fp.fX2NDC + 0.05, fY1NDC: fp.fY1NDC, fY2NDC: fp.fY2NDC, fInit: 1, $can_move: true });\n         Object.assign(pal.fAxis, { fChopt: '+', fLineColor: 1, fLineSyle: 1, fLineWidth: 1, fTextAngle: 0, fTextAlign: 11, fNdiv: 510 });\n         gr.fFunctions.AddFirst(pal, '');\n      }\n\n      return pal;\n   }\n\n   /** @summary Update TScatter members\n    * @private */\n   _updateMembers(scatter, obj) {\n      scatter.fBits = obj.fBits;\n      scatter.fTitle = obj.fTitle;\n      scatter.fNpoints = obj.fNpoints;\n      scatter.fColor = obj.fColor;\n      scatter.fSize = obj.fSize;\n      scatter.fMargin = obj.fMargin;\n      scatter.fMinMarkerSize = obj.fMinMarkerSize;\n      scatter.fMaxMarkerSize = obj.fMaxMarkerSize;\n      return super._updateMembers(scatter.fGraph, obj.fGraph);\n   }\n\n   /** @summary Return Z axis used for palette drawing\n    * @private */\n   getZaxis() {\n      return this.getHistogram()?.fZaxis;\n   }\n\n   /** @summary Checks if it makes sense to zoom inside specified axis range */\n   canZoomInside(axis, min, max) {\n      if (axis !== 'z')\n         return super.canZoomInside(axis, min, max);\n\n      const levels = this.fContour?.getLevels();\n      if (!levels)\n         return false;\n      // match at least full color level inside\n      for (let i = 0; i < levels.length - 1; ++i) {\n         if ((min <= levels[i]) && (max >= levels[i+1]))\n            return true;\n      }\n      return false;\n   }\n\n   /** @summary Actual drawing of TScatter */\n   async drawGraph() {\n      const fpainter = this.get_main(),\n            hpainter = this.getMainPainter(),\n            scatter = this.getObject(),\n            hist = this.getHistogram();\n\n      let scale = 1, offset = 0;\n      if (!fpainter || !hpainter || !scatter) return;\n\n      if (scatter.fColor) {\n         const pal = this.getPalette();\n         if (pal)\n            pal.$main_painter = this;\n\n         const pp = this.getPadPainter();\n         if (!this._color_palette && isFunc(pp?.getCustomPalette))\n            this._color_palette = pp.getCustomPalette();\n         if (!this._color_palette)\n            this._color_palette = getColorPalette(this.options.Palette, pp?.isGrayscale());\n\n         let minc = scatter.fColor[0], maxc = scatter.fColor[0];\n         for (let i = 1; i < scatter.fColor.length; ++i) {\n             minc = Math.min(minc, scatter.fColor[i]);\n             maxc = Math.max(maxc, scatter.fColor[i]);\n         }\n         if (maxc <= minc)\n            maxc = minc < 0 ? 0.9*minc : (minc > 0 ? 1.1*minc : 1);\n         else if ((minc > 0) && (minc < 0.3*maxc))\n            minc = 0;\n         this.fContour = new HistContour(minc, maxc);\n         this.fContour.createNormal(30);\n         this.fContour.configIndicies(0, 0);\n\n         fpainter.zmin = minc;\n         fpainter.zmax = maxc;\n\n         if (!fpainter.zoomChangedInteractive('z') && hist && hist.fMinimum !== kNoZoom && hist.fMaximum !== kNoZoom) {\n            fpainter.zoom_zmin = hist.fMinimum;\n            fpainter.zoom_zmax = hist.fMaximum;\n         }\n      }\n\n      if (scatter.fSize) {\n         let mins = scatter.fSize[0], maxs = scatter.fSize[0];\n\n         for (let i = 1; i < scatter.fSize.length; ++i) {\n             mins = Math.min(mins, scatter.fSize[i]);\n             maxs = Math.max(maxs, scatter.fSize[i]);\n         }\n\n         if (maxs <= mins)\n            maxs = mins < 0 ? 0.9*mins : (mins > 0 ? 1.1*mins : 1);\n\n         scale = (scatter.fMaxMarkerSize - scatter.fMinMarkerSize) / (maxs - mins);\n         offset = mins;\n      }\n\n      this.createG(!fpainter.pad_layer);\n\n      const funcs = fpainter.getGrFuncs(),\n            is_zoom = (fpainter.zoom_zmin !== fpainter.zoom_zmax) && scatter.fColor;\n\n      for (let i = 0; i < this.bins.length; ++i) {\n         if (is_zoom && ((scatter.fColor[i] < fpainter.zoom_zmin) || (scatter.fColor[i] > fpainter.zoom_zmax)))\n            continue;\n\n         const pnt = this.bins[i],\n               grx = funcs.grx(pnt.x),\n               gry = funcs.gry(pnt.y),\n               size = scatter.fSize ? scatter.fMinMarkerSize + scale * (scatter.fSize[i] - offset) : scatter.fMarkerSize,\n               color = scatter.fColor ? this.fContour.getPaletteColor(this._color_palette, scatter.fColor[i]) : this.getColor(scatter.fMarkerColor),\n               handle = new TAttMarkerHandler({ color, size, style: scatter.fMarkerStyle });\n\n          this.draw_g.append('svg:path')\n                     .attr('d', handle.create(grx, gry))\n                     .call(handle.func);\n      }\n\n      return this;\n   }\n\n   static async draw(dom, obj, opt) {\n      return TGraphPainter._drawGraph(new TScatterPainter(dom, obj), opt);\n   }\n\n} // class TScatterPainter\n\nexport { TScatterPainter };\n"],"x_google_ignoreList":[0]}