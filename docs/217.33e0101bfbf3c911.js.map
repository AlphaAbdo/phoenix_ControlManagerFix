{"version":3,"file":"217.33e0101bfbf3c911.js","mappings":"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","names":["THStackPainter","ObjectPainter","constructor","dom","stack","opt","super","this","firstpainter","painters","cleanup","getPadPainter","cleanPrimitives","objp","indexOf","buildStack","fHists","nhists","arr","length","lst","create","clTList","Add","clone","i","hnext","hnextopt","hprev","xnext","fXaxis","xprev","match","fNbins","fXmin","fXmax","Math","abs","Array","fNcells","fill","n","fArray","Object","assign","console","warn","fName","Clear","fStack","getMinMax","iserr","getObject","pad","getRootPad","min","max","getHistMinMax","hist","witherr","res","domin","domax","fMinimum","kNoZoom","fMaximum","i1","i2","j1","j2","first","TestBit","EAxisBits","kAxisRange","fFirst","fLast","_typename","clTH2","fYaxis","j","val","getBinContent","err","getBinError","getBin","options","nostack","resh","adjustRange","fLogv","ndim","fLogy","fLogz","kmin","log10","kmax","gStyle","fHistTopMargin","max0","min0","zoomed","hopt","getHistDrawOption","fOption","toUpperCase","draw_errors","pads","auto","drawNextHisto","indx","pad_painter","_this","_asyncToGenerator","hlst","rindx","horder","subid","subpad_painter","getSubPadPainter","prev_name","selectCurrentPad","this_pad_name","hdraw_func","getDom","then","subp","setSecondaryId","push","$baseh","$num_histos","decodeOptions","same","has_errors","fHistogram","hasErrors","fSumw2","k","nhist","d","DrawOptions","check","forEach","f","remain","dolego","errors","createHistogram","histos","numhistos","histo","clTH1I","setHistogramTitle","fTitle","fBits","kNoStats","h0","clTH2I","h","fLabels","updateObject","obj","matchObjectType","src","mm","minimum","maximum","_checked_zooming","ymin","ymax","zmin","zmax","did_update","redraw","reason","redrawSub","Promise","resolve","fillContextMenuItems","menu","addchk","flag","redrawPad","draw","painter","skip_drawing","ensureTCanvas","TH1Painter","TH2Painter","doingDraw","fPrimitives","log","p","divide","addToPadPrimitives"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist/THStackPainter.mjs"],"sourcesContent":["import { clone, create, createHistogram, setHistogramTitle, gStyle, clTList, clTH1I, clTH2, clTH2I, kNoZoom, kNoStats } from '../core.mjs';\nimport { DrawOptions } from '../base/BasePainter.mjs';\nimport { ObjectPainter, EAxisBits } from '../base/ObjectPainter.mjs';\nimport { TH1Painter } from './TH1Painter.mjs';\nimport { TH2Painter } from './TH2Painter.mjs';\nimport { ensureTCanvas } from '../gpad/TCanvasPainter.mjs';\n\n\n/**\n * @summary Painter class for THStack\n *\n * @private\n */\n\nclass THStackPainter extends ObjectPainter {\n\n   /** @summary constructor\n     * @param {object|string} dom - DOM element for drawing or element id\n     * @param {object} stack - THStack object\n     * @param {string} [opt] - draw options */\n   constructor(dom, stack, opt) {\n      super(dom, stack, opt);\n      this.firstpainter = null;\n      this.painters = []; // keep painters to be able update objects\n   }\n\n   /** @summary Cleanup THStack painter */\n   cleanup() {\n      this.getPadPainter()?.cleanPrimitives(objp => { return (objp === this.firstpainter) || (this.painters.indexOf(objp) >= 0); });\n      delete this.firstpainter;\n      delete this.painters;\n      super.cleanup();\n   }\n\n   /** @summary Build sum of all histograms\n     * @desc Build a separate list fStack containing the running sum of all histograms */\n   buildStack(stack) {\n      if (!stack.fHists) return false;\n      const nhists = stack.fHists.arr.length;\n      if (nhists <= 0) return false;\n      const lst = create(clTList);\n      lst.Add(clone(stack.fHists.arr[0]), stack.fHists.opt[0]);\n      for (let i = 1; i < nhists; ++i) {\n         const hnext = clone(stack.fHists.arr[i]),\n               hnextopt = stack.fHists.opt[i],\n               hprev = lst.arr[i-1],\n               xnext = hnext.fXaxis, xprev = hprev.fXaxis;\n\n         let match = (xnext.fNbins === xprev.fNbins) &&\n                     (xnext.fXmin === xprev.fXmin) &&\n                     (xnext.fXmax === xprev.fXmax);\n\n         if (!match && (xnext.fNbins > 0) && (xnext.fNbins < xprev.fNbins) && (xnext.fXmin === xprev.fXmin) &&\n             (Math.abs((xnext.fXmax - xnext.fXmin)/xnext.fNbins - (xprev.fXmax - xprev.fXmin)/xprev.fNbins) < 0.0001)) {\n            // simple extension of histogram to make sum\n            const arr = new Array(hprev.fNcells).fill(0);\n            for (let n = 1; n <= xnext.fNbins; ++n)\n               arr[n] = hnext.fArray[n];\n            hnext.fNcells = hprev.fNcells;\n            Object.assign(xnext, xprev);\n            hnext.fArray = arr;\n            match = true;\n         }\n         if (!match) {\n            console.warn(`When drawing THStack, cannot sum-up histograms ${hnext.fName} and ${hprev.fName}`);\n            lst.Clear();\n            return false;\n         }\n\n         // trivial sum of histograms\n         for (let n = 0; n < hnext.fArray.length; ++n)\n            hnext.fArray[n] += hprev.fArray[n];\n\n         lst.Add(hnext, hnextopt);\n      }\n      stack.fStack = lst;\n      return true;\n   }\n\n   /** @summary Returns stack min/max values */\n   getMinMax(iserr) {\n      const stack = this.getObject(),\n            pad = this.getPadPainter().getRootPad(true);\n      let min = 0, max = 0;\n\n      const getHistMinMax = (hist, witherr) => {\n         const res = { min: 0, max: 0 };\n         let domin = true, domax = true;\n         if (hist.fMinimum !== kNoZoom) {\n            res.min = hist.fMinimum;\n            domin = false;\n         }\n         if (hist.fMaximum !== kNoZoom) {\n            res.max = hist.fMaximum;\n            domax = false;\n         }\n\n         if (!domin && !domax) return res;\n\n         let i1 = 1, i2 = hist.fXaxis.fNbins, j1 = 1, j2 = 1, first = true;\n\n         if (hist.fXaxis.TestBit(EAxisBits.kAxisRange)) {\n            i1 = hist.fXaxis.fFirst;\n            i2 = hist.fXaxis.fLast;\n         }\n\n         if (hist._typename.indexOf(clTH2) === 0) {\n            j2 = hist.fYaxis.fNbins;\n            if (hist.fYaxis.TestBit(EAxisBits.kAxisRange)) {\n               j1 = hist.fYaxis.fFirst;\n               j2 = hist.fYaxis.fLast;\n            }\n         }\n         for (let j = j1; j <= j2; ++j) {\n            for (let i = i1; i <= i2; ++i) {\n               const val = hist.getBinContent(i, j),\n                   err = witherr ? hist.getBinError(hist.getBin(i, j)) : 0;\n               if (domin && (first || (val-err < res.min))) res.min = val-err;\n               if (domax && (first || (val+err > res.max))) res.max = val+err;\n               first = false;\n           }\n         }\n\n         return res;\n      };\n\n      if (this.options.nostack) {\n         for (let i = 0; i < stack.fHists.arr.length; ++i) {\n            const resh = getHistMinMax(stack.fHists.arr[i], iserr);\n            if (i === 0) {\n               min = resh.min; max = resh.max;\n             } else {\n               min = Math.min(min, resh.min);\n               max = Math.max(max, resh.max);\n            }\n         }\n      } else {\n         min = getHistMinMax(stack.fStack.arr[0], iserr).min;\n         max = getHistMinMax(stack.fStack.arr[stack.fStack.arr.length-1], iserr).max;\n      }\n\n      const adjustRange = () => {\n         if (pad && (pad.fLogv ?? (this.options.ndim === 1 ? pad.fLogy : pad.fLogz))) {\n            if (max <= 0) max = 1;\n            if (min <= 0) min = 1e-4*max;\n            const kmin = 1/(1 + 0.5*Math.log10(max / min)),\n                  kmax = 1 + 0.2*Math.log10(max / min);\n            min *= kmin;\n            max *= kmax;\n         } else if ((min > 0) && (min < 0.05*max))\n            min = 0;\n      };\n\n      max *= (1 + gStyle.fHistTopMargin);\n\n      adjustRange();\n\n      let max0 = max, min0 = min, zoomed = false;\n\n      if (stack.fMaximum !== kNoZoom) {\n         max = stack.fMaximum;\n         max0 = Math.max(max, max0);\n         zoomed = true;\n      }\n\n      if (stack.fMinimum !== kNoZoom) {\n         min = stack.fMinimum;\n         min0 = Math.min(min, min0);\n         zoomed = true;\n      }\n\n      if (zoomed)\n         adjustRange();\n      else\n         min = max = kNoZoom;\n\n      return { min, max, min0, max0, zoomed, hopt: `hmin:${min0};hmax:${max0};minimum:${min};maximum:${max}` };\n   }\n\n   /** @summary Provide draw options for the histogram */\n   getHistDrawOption(hist, opt) {\n      let hopt = opt || hist.fOption || this.options.hopt;\n      if (hopt.toUpperCase().indexOf(this.options.hopt) < 0)\n         hopt += ' ' + this.options.hopt;\n      if (this.options.draw_errors && !hopt)\n         hopt = 'E';\n      if (!this.options.pads)\n         hopt += ' same nostat' + this.options.auto;\n      return hopt;\n   }\n\n   /** @summary Draw next stack histogram */\n   async drawNextHisto(indx, pad_painter) {\n      const stack = this.getObject(),\n            hlst = this.options.nostack ? stack.fHists : stack.fStack,\n            nhists = hlst?.arr?.length || 0;\n\n      if (indx >= nhists)\n         return this;\n\n      const rindx = this.options.horder ? indx : nhists-indx-1,\n            subid = this.options.nostack ? `hists_${rindx}` : `stack_${rindx}`,\n            hist = hlst.arr[rindx],\n            hopt = this.getHistDrawOption(hist, hlst.opt[rindx]);\n\n      // handling of 'pads' draw option\n      if (pad_painter) {\n         const subpad_painter = pad_painter.getSubPadPainter(indx+1);\n         if (!subpad_painter)\n            return this;\n\n         const prev_name = subpad_painter.selectCurrentPad(subpad_painter.this_pad_name);\n\n         return this.hdraw_func(subpad_painter.getDom(), hist, hopt).then(subp => {\n            if (subp) {\n               subp.setSecondaryId(this, subid);\n               this.painters.push(subp);\n            }\n            subpad_painter.selectCurrentPad(prev_name);\n            return this.drawNextHisto(indx+1, pad_painter);\n         });\n      }\n\n      // special handling of stacked histograms - set $baseh object for correct drawing\n      // also used to provide tooltips\n      if ((rindx > 0) && !this.options.nostack)\n         hist.$baseh = hlst.arr[rindx - 1];\n      // this number used for auto colors creation\n      if (this.options.auto)\n         hist.$num_histos = nhists;\n\n      return this.hdraw_func(this.getDom(), hist, hopt).then(subp => {\n          subp.setSecondaryId(this, subid);\n          this.painters.push(subp);\n          return this.drawNextHisto(indx+1, pad_painter);\n      });\n   }\n\n   /** @summary Decode draw options of THStack painter */\n   decodeOptions(opt) {\n      if (!this.options) this.options = {};\n      Object.assign(this.options, { ndim: 1, nostack: false, same: false, horder: true, has_errors: false, draw_errors: false, hopt: '', auto: '' });\n\n      const stack = this.getObject(),\n            hist = stack.fHistogram || (stack.fHists ? stack.fHists.arr[0] : null) || (stack.fStack ? stack.fStack.arr[0] : null),\n\n       hasErrors = hist => {\n         if (hist.fSumw2 && (hist.fSumw2.length > 0)) {\n            for (let n = 0; n < hist.fSumw2.length; ++n)\n               if (hist.fSumw2[n] > 0) return true;\n         }\n         return false;\n      };\n\n      if (hist && (hist._typename.indexOf(clTH2) === 0))\n         this.options.ndim = 2;\n\n      if ((this.options.ndim === 2) && !opt)\n         opt = 'lego1';\n\n      if (stack.fHists && !this.options.nostack) {\n         for (let k = 0; k < stack.fHists.arr.length; ++k)\n            this.options.has_errors = this.options.has_errors || hasErrors(stack.fHists.arr[k]);\n      }\n\n      this.options.nhist = stack.fHists?.arr?.length ?? 1;\n\n      const d = new DrawOptions(opt);\n\n      this.options.nostack = d.check('NOSTACK');\n      if (d.check('STACK')) this.options.nostack = false;\n      this.options.same = d.check('SAME');\n\n      d.check('NOCLEAR'); // ignore noclear option\n\n      ['PFC', 'PLC', 'PMC'].forEach(f => { if (d.check(f)) this.options.auto += ' ' + f; });\n\n      this.options.pads = d.check('PADS');\n      if (this.options.pads) this.options.nostack = true;\n\n      this.options.hopt = d.remain(); // use remaining draw options for histogram draw\n\n      const dolego = d.check('LEGO');\n\n      this.options.errors = d.check('E');\n\n      // if any histogram appears with pre-calculated errors, use E for all histograms\n      if (!this.options.nostack && this.options.has_errors && !dolego && !d.check('HIST') && (this.options.hopt.indexOf('E') < 0))\n         this.options.draw_errors = true;\n\n      this.options.horder = this.options.nostack || dolego;\n   }\n\n   /** @summary Create main histogram for THStack axis drawing */\n   createHistogram(stack) {\n      const histos = stack.fHists,\n            numhistos = histos ? histos.arr.length : 0;\n\n      if (!numhistos) {\n         const histo = createHistogram(clTH1I, 100);\n         setHistogramTitle(histo, stack.fTitle);\n         histo.fBits |= kNoStats;\n         return histo;\n      }\n\n      const h0 = histos.arr[0],\n            histo = createHistogram((this.options.ndim === 1) ? clTH1I : clTH2I, h0.fXaxis.fNbins, h0.fYaxis.fNbins);\n      histo.fName = 'axis_hist';\n      histo.fBits |= kNoStats;\n      Object.assign(histo.fXaxis, h0.fXaxis);\n      if (this.options.ndim === 2)\n         Object.assign(histo.fYaxis, h0.fYaxis);\n\n      // this code is not exists in ROOT painter, can be skipped?\n      for (let n = 1; n < numhistos; ++n) {\n         const h = histos.arr[n];\n\n         if (!histo.fXaxis.fLabels) {\n            histo.fXaxis.fXmin = Math.min(histo.fXaxis.fXmin, h.fXaxis.fXmin);\n            histo.fXaxis.fXmax = Math.max(histo.fXaxis.fXmax, h.fXaxis.fXmax);\n         }\n\n         if ((this.options.ndim === 2) && !histo.fYaxis.fLabels) {\n            histo.fYaxis.fXmin = Math.min(histo.fYaxis.fXmin, h.fYaxis.fXmin);\n            histo.fYaxis.fXmax = Math.max(histo.fYaxis.fXmax, h.fYaxis.fXmax);\n         }\n      }\n\n      histo.fTitle = stack.fTitle;\n\n      return histo;\n   }\n\n   /** @summary Update thstack object */\n   updateObject(obj) {\n      if (!this.matchObjectType(obj)) return false;\n\n      const stack = this.getObject();\n\n      stack.fHists = obj.fHists;\n      stack.fStack = obj.fStack;\n      stack.fTitle = obj.fTitle;\n      stack.fMinimum = obj.fMinimum;\n      stack.fMaximum = obj.fMaximum;\n\n      if (!this.options.nostack)\n         this.options.nostack = !this.buildStack(stack);\n\n      if (this.firstpainter) {\n         let src = obj.fHistogram;\n         if (!src)\n            src = stack.fHistogram = this.createHistogram(stack);\n\n         const mm = this.getMinMax(this.options.errors || this.options.draw_errors);\n\n         this.firstpainter.options.minimum = mm.min;\n         this.firstpainter.options.maximum = mm.max;\n         this.firstpainter._checked_zooming = false; // force to check 3d zooming\n\n         if (this.options.ndim === 1) {\n            this.firstpainter.ymin = mm.min0;\n            this.firstpainter.ymax = mm.max0;\n         } else {\n            this.firstpainter.zmin = mm.min0;\n            this.firstpainter.zmax = mm.max0;\n         }\n\n         this.firstpainter.updateObject(src);\n      }\n\n      // and now update histograms\n      const hlst = this.options.nostack ? stack.fHists : stack.fStack,\n            nhists = hlst?.arr?.length ?? 0;\n\n      if (nhists !== this.painters.length) {\n         this.did_update = 1;\n         this.getPadPainter()?.cleanPrimitives(objp => this.painters.indexOf(objp) >= 0);\n         this.painters = [];\n      } else {\n         this.did_update = 2;\n         for (let indx = 0; indx < nhists; ++indx) {\n            const rindx = this.options.horder ? indx : nhists - indx - 1,\n                  hist = hlst.arr[rindx];\n            this.painters[indx].updateObject(hist, this.getHistDrawOption(hist, hlst.opt[rindx]));\n         }\n      }\n\n      return true;\n   }\n\n   /** @summary Redraw THStack\n     * @desc Do something if previous update had changed number of histograms */\n   redraw(reason) {\n      if (this.did_update === 1) {\n         delete this.did_update;\n         return this.drawNextHisto(0, this.options.pads ? this.getPadPainter() : null);\n      } else if (this.did_update === 2) {\n         delete this.did_update;\n         const redrawSub = indx => {\n            if (indx >= this.painters.length)\n               return Promise.resolve(this);\n            return this.painters[indx].redraw(reason).then(() => redrawSub(indx+1));\n         };\n         return redrawSub(0);\n      }\n   }\n\n   /** @summary Fill hstack context menu */\n   fillContextMenuItems(menu) {\n      menu.addchk(this.options.draw_errors, 'Draw errors', flag => {\n         this.options.draw_errors = flag;\n         const stack = this.getObject(),\n               hlst = this.options.nostack ? stack.fHists : stack.fStack,\n               nhists = hlst?.arr?.length ?? 0;\n         for (let indx = 0; indx < nhists; ++indx) {\n            const rindx = this.options.horder ? indx : nhists - indx - 1,\n                  hist = hlst.arr[rindx];\n            this.painters[indx].decodeOptions(this.getHistDrawOption(hist, hlst.opt[rindx]));\n         }\n         this.redrawPad();\n      }, 'Change draw erros in the stack');\n   }\n\n   /** @summary draw THStack object */\n   static async draw(dom, stack, opt) {\n      if (!stack.fHists || !stack.fHists.arr)\n         return null; // drawing not needed\n\n      const painter = new THStackPainter(dom, stack, opt);\n      let pad_painter = null, skip_drawing = false;\n\n      return ensureTCanvas(painter, false).then(() => {\n         painter.decodeOptions(opt);\n\n         painter.hdraw_func = (painter.options.ndim === 1) ? TH1Painter.draw : TH2Painter.draw;\n\n         if (painter.options.pads) {\n            pad_painter = painter.getPadPainter();\n            if (pad_painter.doingDraw() && pad_painter.pad?.fPrimitives &&\n                (pad_painter.pad.fPrimitives.arr.length > 1) && (pad_painter.pad.fPrimitives.arr.indexOf(stack) === 0)) {\n               skip_drawing = true;\n               console.log('special case with THStack with is already rendered - do nothing');\n               return;\n            }\n\n            pad_painter.cleanPrimitives(p => p !== painter);\n            return pad_painter.divide(painter.options.nhist);\n         }\n\n         if (!painter.options.nostack)\n             painter.options.nostack = !painter.buildStack(stack);\n\n         if (painter.options.same) return;\n\n         const no_histogram = !stack.fHistogram;\n\n         if (no_histogram)\n             stack.fHistogram = painter.createHistogram(stack);\n\n         const mm = painter.getMinMax(painter.options.errors || painter.options.draw_errors),\n               hopt = painter.options.hopt + ';' + mm.hopt;\n\n         return painter.hdraw_func(dom, stack.fHistogram, hopt).then(subp => {\n            painter.addToPadPrimitives();\n            painter.firstpainter = subp;\n            subp.setSecondaryId(painter, 'hist'); // mark hist painter as created by hstack\n         });\n      }).then(() => skip_drawing ? painter : painter.drawNextHisto(0, pad_painter));\n   }\n\n} // class THStackPainter\n\nexport { THStackPainter };\n"],"x_google_ignoreList":[0]}