{"version":3,"file":"350.1bfe5c0ad599d1ba.js","mappings":"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","names":["TBoxPainter","ObjectPainter","moveStart","x","y","ww","Math","abs","this","x2","x1","hh","y1","y2","c_x1","c_x2","c_y1","c_y2","moveDrag","dx","dy","nodes","draw_g","selectAll","getPathes","forEach","path","i","d3_select","attr","moveEnd","not_changed","box","getObject","X","swap_xy","Y","exec","v","svgToAxis","submitCanvExec","getUserRanges","minx","min","fX1","fX2","maxx","max","miny","fY1","fY2","maxy","xx","round","yy","borderMode","pww","borderSize","phh","side1","side2","redraw","d","DrawOptions","getDrawOpt","fp","check","getFramePainter","draw_line","createAttLine","createAttFill","fillatt","empty","lineatt","color","createG","axisToSvg","fBorderMode","fBorderSize","hasColor","paths","append","call","func","style","d3_rgb","brighter","formatRgb","darker","assignContextMenu","kToFront","addMoveHandler","draw","dom","obj","opt","_asyncToGenerator","painter","ensureTCanvas","then"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/draw/TBoxPainter.mjs"],"sourcesContent":["import { rgb as d3_rgb, select as d3_select } from '../d3.mjs';\nimport { DrawOptions } from '../base/BasePainter.mjs';\nimport { ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { ensureTCanvas } from '../gpad/TCanvasPainter.mjs';\nimport { addMoveHandler } from '../gui/utils.mjs';\nimport { assignContextMenu, kToFront } from '../gui/menu.mjs';\n\n\nclass TBoxPainter extends ObjectPainter {\n\n   /** @summary start of drag handler\n     * @private */\n   moveStart(x, y) {\n      const ww = Math.abs(this.x2 - this.x1), hh = Math.abs(this.y1 - this.y2);\n\n      this.c_x1 = Math.abs(x - this.x2) > ww*0.1;\n      this.c_x2 = Math.abs(x - this.x1) > ww*0.1;\n      this.c_y1 = Math.abs(y - this.y2) > hh*0.1;\n      this.c_y2 = Math.abs(y - this.y1) > hh*0.1;\n      if (this.c_x1 !== this.c_x2 && this.c_y1 && this.c_y2)\n         this.c_y1 = this.c_y2 = false;\n      if (this.c_y1 !== this.c_y2 && this.c_x1 && this.c_x2)\n         this.c_x1 = this.c_x2 = false;\n   }\n\n   /** @summary drag handler\n     * @private */\n   moveDrag(dx, dy) {\n      if (this.c_x1) this.x1 += dx;\n      if (this.c_x2) this.x2 += dx;\n      if (this.c_y1) this.y1 += dy;\n      if (this.c_y2) this.y2 += dy;\n\n      const nodes = this.draw_g.selectAll('path').nodes(),\n            pathes = this.getPathes();\n\n      pathes.forEach((path, i) => d3_select(nodes[i]).attr('d', path));\n   }\n\n   /** @summary end of drag handler\n     * @private */\n   moveEnd(not_changed) {\n      if (not_changed) return;\n      const box = this.getObject(), X = this.swap_xy ? 'Y' : 'X', Y = this.swap_xy ? 'X' : 'Y';\n      let exec = '';\n      if (this.c_x1) { const v = this.svgToAxis('x', this.x1); box[`f${X}1`] = v; exec += `Set${X}1(${v});;`; }\n      if (this.c_x2) { const v = this.svgToAxis('x', this.x2); box[`f${X}2`] = v; exec += `Set${X}2(${v});;`; }\n      if (this.c_y1) { const v = this.svgToAxis('y', this.y1); box[`f${Y}1`] = v; exec += `Set${Y}1(${v});;`; }\n      if (this.c_y2) { const v = this.svgToAxis('y', this.y2); box[`f${Y}2`] = v; exec += `Set${Y}2(${v});;`; }\n      this.submitCanvExec(exec + 'Notify();;');\n   }\n\n   /** @summary Returns object ranges\n     * @desc Can be used for newly created canvas */\n   getUserRanges() {\n      const box = this.getObject(),\n            minx = Math.min(box.fX1, box.fX2),\n            maxx = Math.max(box.fX1, box.fX2),\n            miny = Math.min(box.fY1, box.fY2),\n            maxy = Math.max(box.fY1, box.fY2);\n      return { minx, miny, maxx, maxy };\n   }\n\n   /** @summary Create path */\n   getPathes() {\n      const xx = Math.round(Math.min(this.x1, this.x2)),\n            yy = Math.round(Math.min(this.y1, this.y2)),\n            ww = Math.round(Math.abs(this.x2 - this.x1)),\n            hh = Math.round(Math.abs(this.y1 - this.y2)),\n            path = `M${xx},${yy}h${ww}v${hh}h${-ww}z`;\n      if (!this.borderMode)\n         return [path];\n      const pww = this.borderSize, phh = this.borderSize,\n            side1 = `M${xx},${yy}h${ww}l${-pww},${phh}h${2*pww-ww}v${hh-2*phh}l${-pww},${phh}z`,\n            side2 = `M${xx+ww},${yy+hh}v${-hh}l${-pww},${phh}v${hh-2*phh}h${2*pww-ww}l${-pww},${phh}z`;\n\n      return (this.borderMode > 0) ? [path, side1, side2] : [path, side2, side1];\n   }\n\n   /** @summary Redraw line */\n   redraw() {\n      const box = this.getObject(),\n            d = new DrawOptions(this.getDrawOpt()),\n            fp = d.check('FRAME') ? this.getFramePainter() : null,\n            draw_line = d.check('L');\n\n      this.createAttLine({ attr: box });\n      this.createAttFill({ attr: box });\n\n      this.swap_xy = fp?.swap_xy;\n\n      // if box filled, contour line drawn only with 'L' draw option:\n      if (!this.fillatt.empty() && !draw_line)\n         this.lineatt.color = 'none';\n\n      this.createG(fp);\n\n      this.x1 = this.axisToSvg('x', box.fX1);\n      this.x2 = this.axisToSvg('x', box.fX2);\n      this.y1 = this.axisToSvg('y', box.fY1);\n      this.y2 = this.axisToSvg('y', box.fY2);\n\n      if (this.swap_xy)\n         [this.x1, this.x2, this.y1, this.y2] = [this.y1, this.y2, this.x1, this.x2];\n\n      this.borderMode = (box.fBorderMode && box.fBorderSize && this.fillatt.hasColor()) ? box.fBorderMode : 0;\n      this.borderSize = box.fBorderSize;\n\n      const paths = this.getPathes();\n\n      this.draw_g\n          .append('svg:path')\n          .attr('d', paths[0])\n          .call(this.lineatt.func)\n          .call(this.fillatt.func);\n\n      if (this.borderMode) {\n         this.draw_g.append('svg:path')\n                    .attr('d', paths[1])\n                    .call(this.fillatt.func)\n                    .style('fill', d3_rgb(this.fillatt.color).brighter(0.5).formatRgb());\n\n         this.draw_g.append('svg:path')\n                    .attr('d', paths[2])\n                    .call(this.fillatt.func)\n                    .style('fill', d3_rgb(this.fillatt.color).darker(0.5).formatRgb());\n      }\n\n      assignContextMenu(this, kToFront);\n\n      addMoveHandler(this);\n\n      return this;\n   }\n\n   /** @summary Draw TLine object */\n   static async draw(dom, obj, opt) {\n      const painter = new TBoxPainter(dom, obj, opt);\n      return ensureTCanvas(painter, false).then(() => painter.redraw());\n   }\n\n} // class TBoxPainter\n\n\nexport { TBoxPainter };\n"],"x_google_ignoreList":[0]}