{"version":3,"file":"7.f073344e02a8ad0e.js","mappings":"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","names":["RH2Painter","RHistPainter","constructor","dom","histo","super","this","wheel_zoomy","cleanup","tt_handle","getDimension","toggleProjection","kind","width","length","parseInt","slice","is_projection","projection_width","proj_hist","new_proj","provideSpecialDrawArea","then","redrawProjection","executeMenuCommand","method","args","fName","fillHistContextMenu","menu","add","kinds","k","addchk","arg","autoZoom","opts","getSupportedDrawOptions","addDrawMenu","showInspector","decodeOptions","interactiveRedraw","options","Color","fillPaletteMenu","clickButton","funcname","toggleColor","toggleMode3D","fillToolbar","pp","getPadPainter","addPadButton","showPadButtons","Mode3D","redraw","i","j","i1","getSelectIndex","i2","j1","j2","getHisto","xaxis","getAxis","yaxis","min","getBinContent","Math","ileft","iright","jleft","jright","xmin","xmax","ymin","ymax","isany","GetBinCoord","getFramePainter","zoom","scanContent","when_axis_changed","nbinsx","nbinsy","extractAxesProperties","isDisplayItem","gminbin","fContMin","gminposbin","fContMinPos","gmaxbin","fContMax","bin_content","zmin","zmax","draw_content","Axis","countStat","cond","xside","yside","xx","yy","zz","xi","yi","stat_sum0","stat_sumx1","stat_sumy1","stat_sumx2","stat_sumy2","res","name","entries","integral","meanx","meany","rmsx","rmsy","matrix","wmax","xleft","xright","yleft","yright","sqrt","abs","fillStatistic","stat","dostat","data","print_name","floor","print_entries","print_mean","print_rms","print_under","print_over","print_integral","print_skew","print_kurt","clearStat","addText","format","m","toFixed","drawBinsColor","handle","prepareDraw","di","stepi","dj","stepj","colindx","cmd1","cmd2","binz","dx","dy","entry","last_entry","flush_last_entry","path","y2","y","grx","palette","getContourIndex","Zero","_show_empty_bins","gry","undefined","x","forEach","draw_g","append","style","getColor","attr","updatePaletteDraw","buildContour","levels","contour_func","ipoly","poly","np","n","ix","ljfill","count","xsave","ysave","itars","jx","kMAXCONTOUR","xarr","Float32Array","yarr","itarr","Int32Array","lj","polys","npmax","zc","ir","BinarySearch","kk","PaintContourLine","elev1","icont1","x1","y1","elev2","icont2","x2","xlen","pdif","diff","elev","vert","tlen","tdif","ii","maxii","icount","arrx","original","origx","arry","origy","createTPolyLine","fLastPoint","fN","fX","round","fY","max","polysort","first","xp","yp","iminus","iplus","nadd","istart","drawBinsContour","funcs","frame_w","frame_h","rounding","extra","Proj","main","getHistPalette","getContour","func","getProjectionFunc","BuildPath","do_close","last","pnt","cmd","Contour","dd","sz","xd","yd","lineatt","icol","fillcolor","TAttLineHandler","color","elem","call","hide_only_zeros","createPolyBin","pmain","bin","text_pos","ngr","ngraphs","gr","getGrFuncs","second_x","second_y","addPoint","len","_sumx","_sumy","_suml","fPoly","_typename","fGraphs","arr","nextx","nexty","npnts","fNpoints","_midx","_midy","fXmin","fXmax","fYmin","fYmax","drawBinsText","binw","binh","text","height","textFont","v7EvalFont","size","align","text_offset","text_g","profile2d","TextKind","matchObjectType","getBinEntries","BarOffset","startTextDrawing","toString","floatToString","gStyle","angle","drawText","latex","finishTextDrawing","drawBinsArrow","xc","yc","dxn","dyn","anr","si","co","dn","scale_x","scale_y","makeLine","loop","drawBinsBox","maxbin","minbin","minposbin","absz","zdiff","dgrx","dgry","ww","hh","xyfactor","absmax","absmin","cross","btn1","btn2","uselogz","logmin","logz","logmax","log","BoxStyle","pww","phh","side1","side2","fillatt","empty","hasColor","d3_rgb","brighter","formatHex","darker","drawBinsCandle","w","sum1","cont","center","counter","posy","bars","markers","createv7AttMarker","markeratt","resetPos","candle","m25y","p25y","median","iqr","whiskerp","whiskerm","whsikerm","logy","BarWidth","y0","yy1","yy2","create","push","drawBinsScatter","cw","ch","pixel_density","scatter_plot","colPaths","currx","curry","cell_w","cell_h","factor","scale","ScatCoef","rnd","TRandom","sumz","npix","random","layer","getFrameSvg","select","defs","insert","cntr","pattern_class","pattern","internals","selectAll","remove","draw2DBins","removeG","Promise","resolve","createHistDrawAttributes","createG","rect","getFrameRect","pr","Scat","Box","Arrow","Candle","Text","h","getBinTooltips","lines","stepx","stepy","getObjectHint","getAxisBinTip","$baseh","lbl","getCandleTooltips","p","axisAsText","getPolyBinTooltips","binindx","realx","realy","fBins","binname","numpoints","fNumber","numgraphs","fContent","processTooltipEvent","ttrect","foundindx","revertAxis","IsInside","title","fTitle","color1","color2","getFillColorAlt","exact","disabled","changed","property","user_info","obj","binx","biny","binid","getFrameWidth","getFrameHeight","getBin","canZoomInside","axis","FindBin","draw2D","reason","clear3DScene","drawFrameAxes","drawingBins","addInteractivity","draw3D","console","callDrawFunc","mode3d","isMainPainter","static","painter","opt","ensureRCanvas","setAsMainPainter","Hist","Error","Mark","Line","Fill","Lego","Surf","TextAngle","BaseLine","AutoColor","minimum","maximum","v7EvalAttr","sub","o","_draw","RH2Painter2D","draw3DBins","drawBinsSurf3D","drawBinsError3D","drawBinsContour3D","drawBinsLego","is_main","resize3D","render3D","zmult","deleteAttr","assignFrame3DMethods","create3DScene","Render3D","setAxesRanges","set3DOptions","drawXYZ","toplevel","RAxisPainter","settings","ndim","draw","v7","addKeysHandler"],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist2d/RH2Painter.mjs","../node_modules/jsroot/modules/hist/RH2Painter.mjs"],"sourcesContent":["import { gStyle, internals, createTPolyLine } from '../core.mjs';\nimport { rgb as d3_rgb } from '../d3.mjs';\nimport { TAttLineHandler } from '../base/TAttLineHandler.mjs';\nimport { floatToString, TRandom } from '../base/BasePainter.mjs';\nimport { RHistPainter } from './RHistPainter.mjs';\nimport { ensureRCanvas } from '../gpad/RCanvasPainter.mjs';\n\n/**\n * @summary Painter for RH2 classes\n *\n * @private\n */\n\nclass RH2Painter extends RHistPainter {\n\n   /** @summary constructor\n     * @param {object|string} dom - DOM element or id\n     * @param {object} histo - histogram object */\n   constructor(dom, histo) {\n      super(dom, histo);\n      this.wheel_zoomy = true;\n   }\n\n   /** @summary Cleanup painter */\n   cleanup() {\n      delete this.tt_handle;\n      super.cleanup();\n   }\n\n   /** @summary Returns histogram dimension */\n   getDimension() { return 2; }\n\n   /** @summary Toggle projection */\n   toggleProjection(kind, width) {\n\n      if (kind==\"Projections\") kind = \"\";\n\n      if ((typeof kind == 'string') && (kind.length>1)) {\n          width = parseInt(kind.slice(1));\n          kind = kind[0];\n      }\n\n      if (!width) width = 1;\n\n      if (kind && (this.is_projection==kind)) {\n         if (this.projection_width === width) {\n            kind = \"\";\n         } else {\n            this.projection_width = width;\n            return;\n         }\n      }\n\n      delete this.proj_hist;\n\n      let new_proj = (this.is_projection === kind) ? \"\" : kind;\n      this.is_projection = \"\"; // disable projection redraw until callback\n      this.projection_width = width;\n\n      this.provideSpecialDrawArea(new_proj).then(() => { this.is_projection = new_proj; return this.redrawProjection(); });\n   }\n\n   /** @summary Readraw projections */\n   redrawProjection(/* ii1, ii2 , jj1, jj2*/) {\n      // do nothing for the moment\n\n      if (!this.is_projection) return;\n   }\n\n   /** @summary Execute menu command */\n   executeMenuCommand(method, args) {\n      if (super.executeMenuCommand(method, args)) return true;\n\n      if ((method.fName == 'SetShowProjectionX') || (method.fName == 'SetShowProjectionY')) {\n         this.toggleProjection(method.fName[17], args && parseInt(args) ? parseInt(args) : 1);\n         return true;\n      }\n\n      return false;\n   }\n\n   /** @summary Fill histogram context menu */\n   fillHistContextMenu(menu) {\n      menu.add(\"sub:Projections\", () => this.toggleProjection());\n      let kind = this.is_projection || \"\";\n      if (kind) kind += this.projection_width;\n      let kinds = [\"X1\", \"X2\", \"X3\", \"X5\", \"X10\", \"Y1\", \"Y2\", \"Y3\", \"Y5\", \"Y10\"];\n      for (let k=0;k<kinds.length;++k)\n         menu.addchk(kind==kinds[k], kinds[k], kinds[k], arg => this.toggleProjection(arg));\n      menu.add(\"endsub:\");\n\n      menu.add(\"Auto zoom-in\", () => this.autoZoom());\n\n      let opts = this.getSupportedDrawOptions();\n\n      menu.addDrawMenu(\"Draw with\", opts, arg => {\n         if (arg==='inspect')\n            return this.showInspector();\n         this.decodeOptions(arg);\n         this.interactiveRedraw(\"pad\", \"drawopt\");\n      });\n\n      if (this.options.Color)\n         this.fillPaletteMenu(menu);\n   }\n\n   /** @summary Process click on histogram-defined buttons */\n   clickButton(funcname) {\n      if (super.clickButton(funcname)) return true;\n\n      switch(funcname) {\n         case \"ToggleColor\": this.toggleColor(); break;\n         case \"Toggle3D\": this.toggleMode3D(); break;\n         default: return false;\n      }\n\n      // all methods here should not be processed further\n      return true;\n   }\n\n   /** @summary Fill pad toolbar with RH2-related functions */\n   fillToolbar() {\n      super.fillToolbar(true);\n\n      let pp = this.getPadPainter();\n      if (!pp) return;\n\n      pp.addPadButton(\"th2color\", \"Toggle color\", \"ToggleColor\");\n      pp.addPadButton(\"th2colorz\", \"Toggle color palette\", \"ToggleColorZ\");\n      pp.addPadButton(\"th2draw3d\", \"Toggle 3D mode\", \"Toggle3D\");\n      pp.showPadButtons();\n   }\n\n   /** @summary Toggle color drawing mode */\n   toggleColor() {\n\n      if (this.options.Mode3D) {\n         this.options.Mode3D = false;\n         this.options.Color = true;\n      } else {\n         this.options.Color = !this.options.Color;\n      }\n\n      this.redraw();\n   }\n\n   /** @summary Perform automatic zoom inside non-zero region of histogram */\n   autoZoom() {\n      let i1 = this.getSelectIndex(\"x\", \"left\", -1),\n          i2 = this.getSelectIndex(\"x\", \"right\", 1),\n          j1 = this.getSelectIndex(\"y\", \"left\", -1),\n          j2 = this.getSelectIndex(\"y\", \"right\", 1),\n          i,j, histo = this.getHisto(), xaxis = this.getAxis(\"x\"), yaxis = this.getAxis(\"y\");\n\n      if ((i1 == i2) || (j1 == j2)) return;\n\n      // first find minimum\n      let min = histo.getBinContent(i1 + 1, j1 + 1);\n      for (i = i1; i < i2; ++i)\n         for (j = j1; j < j2; ++j)\n            min = Math.min(min, histo.getBinContent(i+1, j+1));\n      if (min > 0) return; // if all points positive, no chance for autoscale\n\n      let ileft = i2, iright = i1, jleft = j2, jright = j1;\n\n      for (i = i1; i < i2; ++i)\n         for (j = j1; j < j2; ++j)\n            if (histo.getBinContent(i + 1, j + 1) > min) {\n               if (i < ileft) ileft = i;\n               if (i >= iright) iright = i + 1;\n               if (j < jleft) jleft = j;\n               if (j >= jright) jright = j + 1;\n            }\n\n      let xmin, xmax, ymin, ymax, isany = false;\n\n      if ((ileft === iright-1) && (ileft > i1+1) && (iright < i2-1)) { ileft--; iright++; }\n      if ((jleft === jright-1) && (jleft > j1+1) && (jright < j2-1)) { jleft--; jright++; }\n\n      if ((ileft > i1 || iright < i2) && (ileft < iright - 1)) {\n         xmin = xaxis.GetBinCoord(ileft);\n         xmax = xaxis.GetBinCoord(iright);\n         isany = true;\n      }\n\n      if ((jleft > j1 || jright < j2) && (jleft < jright - 1)) {\n         ymin = yaxis.GetBinCoord(jleft);\n         ymax = yaxis.GetBinCoord(jright);\n         isany = true;\n      }\n\n      if (isany)\n         return this.getFramePainter().zoom(xmin, xmax, ymin, ymax);\n   }\n\n   /** @summary Scan content of 2-dim histogram */\n   scanContent(when_axis_changed) {\n\n      // no need to rescan histogram while result does not depend from axis selection\n      if (when_axis_changed && this.nbinsx && this.nbinsy) return;\n\n      let i, j, histo = this.getHisto();\n\n      this.extractAxesProperties(2);\n\n      if (this.isDisplayItem()) {\n         // take min/max values from the display item\n         this.gminbin = histo.fContMin;\n         this.gminposbin = histo.fContMinPos > 0 ? histo.fContMinPos : null;\n         this.gmaxbin = histo.fContMax;\n      } else {\n         // global min/max, used at the moment in 3D drawing\n         this.gminbin = this.gmaxbin = histo.getBinContent(1, 1);\n         this.gminposbin = null;\n         for (i = 0; i < this.nbinsx; ++i) {\n            for (j = 0; j < this.nbinsy; ++j) {\n               let bin_content = histo.getBinContent(i+1, j+1);\n               if (bin_content < this.gminbin) this.gminbin = bin_content; else\n                  if (bin_content > this.gmaxbin) this.gmaxbin = bin_content;\n               if (bin_content > 0)\n                  if ((this.gminposbin===null) || (this.gminposbin > bin_content)) this.gminposbin = bin_content;\n            }\n         }\n      }\n\n      this.zmin = this.gminbin;\n      this.zmax = this.gmaxbin;\n\n      // this value used for logz scale drawing\n      if (this.gminposbin === null) this.gminposbin = this.gmaxbin*1e-4;\n\n      if (this.options.Axis > 0) { // Paint histogram axis only\n         this.draw_content = false;\n      } else {\n         this.draw_content = this.gmaxbin > 0;\n      }\n   }\n\n   /** @summary Count statistic */\n   countStat(cond) {\n      let histo = this.getHisto(),\n          stat_sum0 = 0, stat_sumx1 = 0, stat_sumy1 = 0,\n          stat_sumx2 = 0, stat_sumy2 = 0,\n          xside, yside, xx, yy, zz,\n          res = { name: \"histo\", entries: 0, integral: 0, meanx: 0, meany: 0, rmsx: 0, rmsy: 0, matrix: [0,0,0,0,0,0,0,0,0], xmax: 0, ymax:0, wmax: null };\n\n      let xleft = this.getSelectIndex(\"x\", \"left\"),\n          xright = this.getSelectIndex(\"x\", \"right\"),\n          yleft = this.getSelectIndex(\"y\", \"left\"),\n          yright = this.getSelectIndex(\"y\", \"right\"),\n          xi, yi, xaxis = this.getAxis(\"x\"), yaxis = this.getAxis(\"y\");\n\n      // TODO: account underflow/overflow bins, now stored in different array and only by histogram itself\n      for (xi = 1; xi <= this.nbinsx; ++xi) {\n         xside = (xi <= xleft+1) ? 0 : (xi > xright+1 ? 2 : 1);\n         xx = xaxis.GetBinCoord(xi - 0.5);\n\n         for (yi = 1; yi <= this.nbinsy; ++yi) {\n            yside = (yi <= yleft+1) ? 0 : (yi > yright+1 ? 2 : 1);\n            yy = yaxis.GetBinCoord(yi - 0.5);\n\n            zz = histo.getBinContent(xi, yi);\n\n            res.entries += zz;\n\n            res.matrix[yside * 3 + xside] += zz;\n\n            if ((xside != 1) || (yside != 1)) continue;\n\n            if (cond && !cond(xx,yy)) continue;\n\n            if ((res.wmax === null) || (zz > res.wmax)) { res.wmax = zz; res.xmax = xx; res.ymax = yy; }\n\n            stat_sum0 += zz;\n            stat_sumx1 += xx * zz;\n            stat_sumy1 += yy * zz;\n            stat_sumx2 += xx**2 * zz;\n            stat_sumy2 += yy**2 * zz;\n         }\n      }\n\n      if (stat_sum0 > 0) {\n         res.meanx = stat_sumx1 / stat_sum0;\n         res.meany = stat_sumy1 / stat_sum0;\n         res.rmsx = Math.sqrt(Math.abs(stat_sumx2 / stat_sum0 - res.meanx**2));\n         res.rmsy = Math.sqrt(Math.abs(stat_sumy2 / stat_sum0 - res.meany**2));\n      }\n\n      if (res.wmax === null) res.wmax = 0;\n      res.integral = stat_sum0;\n      return res;\n   }\n\n   /** @summary Fill statistic into statbox */\n   fillStatistic(stat, dostat /*, dofit*/) {\n\n      let data = this.countStat(),\n          print_name = Math.floor(dostat % 10),\n          print_entries = Math.floor(dostat / 10) % 10,\n          print_mean = Math.floor(dostat / 100) % 10,\n          print_rms = Math.floor(dostat / 1000) % 10,\n          print_under = Math.floor(dostat / 10000) % 10,\n          print_over = Math.floor(dostat / 100000) % 10,\n          print_integral = Math.floor(dostat / 1000000) % 10,\n          print_skew = Math.floor(dostat / 10000000) % 10,\n          print_kurt = Math.floor(dostat / 100000000) % 10;\n\n      stat.clearStat();\n\n      if (print_name > 0)\n         stat.addText(data.name);\n\n      if (print_entries > 0)\n         stat.addText(\"Entries = \" + stat.format(data.entries,\"entries\"));\n\n      if (print_mean > 0) {\n         stat.addText(\"Mean x = \" + stat.format(data.meanx));\n         stat.addText(\"Mean y = \" + stat.format(data.meany));\n      }\n\n      if (print_rms > 0) {\n         stat.addText(\"Std Dev x = \" + stat.format(data.rmsx));\n         stat.addText(\"Std Dev y = \" + stat.format(data.rmsy));\n      }\n\n      if (print_integral > 0)\n         stat.addText(\"Integral = \" + stat.format(data.matrix[4], \"entries\"));\n\n      if (print_skew > 0) {\n         stat.addText(\"Skewness x = <undef>\");\n         stat.addText(\"Skewness y = <undef>\");\n      }\n\n      if (print_kurt > 0)\n         stat.addText(\"Kurt = <undef>\");\n\n      if ((print_under > 0) || (print_over > 0)) {\n         let m = data.matrix;\n\n         stat.addText(\"\" + m[6].toFixed(0) + \" | \" + m[7].toFixed(0) + \" | \"  + m[7].toFixed(0));\n         stat.addText(\"\" + m[3].toFixed(0) + \" | \" + m[4].toFixed(0) + \" | \"  + m[5].toFixed(0));\n         stat.addText(\"\" + m[0].toFixed(0) + \" | \" + m[1].toFixed(0) + \" | \"  + m[2].toFixed(0));\n      }\n\n      return true;\n   }\n\n   /** @summary Draw histogram bins as color */\n   drawBinsColor() {\n      const histo = this.getHisto(),\n            handle = this.prepareDraw(),\n            di = handle.stepi, dj = handle.stepj,\n            entries = [],\n            can_merge = true;\n      let colindx, cmd1, cmd2, i, j, binz, dx, dy, entry, last_entry;\n\n      const flush_last_entry = () => {\n         last_entry.path += `h${dx}v${last_entry.y2-last_entry.y}h${-dx}z`;\n         last_entry.dy = 0;\n         last_entry = null;\n      };\n\n      // now start build\n      for (i = handle.i1; i < handle.i2; i += di) {\n         dx = (handle.grx[i+di] - handle.grx[i]) || 1;\n\n         for (j = handle.j1; j < handle.j2; j += dj) {\n            binz = histo.getBinContent(i+1, j+1);\n            colindx = handle.palette.getContourIndex(binz);\n            if (binz === 0) {\n               if (!this.options.Zero)\n                  colindx = null;\n               else if ((colindx === null) && this._show_empty_bins)\n                  colindx = 0;\n            }\n            if (colindx === null) {\n               if (last_entry) flush_last_entry();\n               continue;\n            }\n\n            cmd1 = `M${handle.grx[i]},${handle.gry[j]}`;\n\n            dy = (handle.gry[j+dj] - handle.gry[j]) || -1;\n\n            entry = entries[colindx];\n\n            if (entry === undefined) {\n               entry = entries[colindx] = { path: cmd1 };\n            } else if (can_merge && (entry === last_entry)) {\n               entry.y2 = handle.gry[j] + dy;\n               continue;\n            } else {\n               cmd2 = `m${handle.grx[i]-entry.x},${handle.gry[j]-entry.y}`;\n               entry.path += (cmd2.length < cmd1.length) ? cmd2 : cmd1;\n            }\n            if (last_entry) flush_last_entry();\n            entry.x = handle.grx[i];\n            entry.y = handle.gry[j];\n            if (can_merge) {\n               entry.y2 = handle.gry[j] + dy;\n               last_entry = entry;\n            } else {\n               entry.path += `h${dx}v${dy}h${-dx}z`;\n            }\n         }\n         if (last_entry) flush_last_entry();\n      }\n\n      entries.forEach((entry,colindx) => {\n        if (entry)\n           this.draw_g\n               .append(\"svg:path\")\n               .style(\"fill\", handle.palette.getColor(colindx))\n               .attr(\"d\", entry.path);\n      });\n\n      this.updatePaletteDraw();\n\n      return handle;\n   }\n\n   /** @summary Build histogram contour lines */\n   buildContour(handle, levels, palette, contour_func) {\n      let histo = this.getHisto(),\n          kMAXCONTOUR = 2004,\n          kMAXCOUNT = 2000,\n          // arguments used in the PaintContourLine\n          xarr = new Float32Array(2*kMAXCONTOUR),\n          yarr = new Float32Array(2*kMAXCONTOUR),\n          itarr = new Int32Array(2*kMAXCONTOUR),\n          lj = 0, ipoly, poly, polys = [], np, npmax = 0,\n          x = [0.,0.,0.,0.], y = [0.,0.,0.,0.], zc = [0.,0.,0.,0.], ir = [0,0,0,0],\n          i, j, k, n, m, ix, ljfill, count,\n          xsave, ysave, itars, jx,\n          di = handle.stepi, dj = handle.stepj;\n\n      function BinarySearch(zc) {\n         for (let kk=0;kk<levels.length;++kk)\n            if (zc<levels[kk]) return kk-1;\n         return levels.length-1;\n      }\n\n      function PaintContourLine(elev1, icont1, x1, y1,  elev2, icont2, x2, y2) {\n         /* Double_t *xarr, Double_t *yarr, Int_t *itarr, Double_t *levels */\n         let vert = (x1 === x2),\n             tlen = vert ? (y2 - y1) : (x2 - x1),\n             n = icont1 +1,\n             tdif = elev2 - elev1,\n             ii = lj-1,\n             maxii = kMAXCONTOUR/2 -3 + lj,\n             icount = 0,\n             xlen, pdif, diff, elev;\n\n         while (n <= icont2 && ii <= maxii) {\n            elev = levels[n];\n            diff = elev - elev1;\n            pdif = diff/tdif;\n            xlen = tlen*pdif;\n            if (vert) {\n               xarr[ii] = x1;\n               yarr[ii] = y1 + xlen;\n            } else {\n               xarr[ii] = x1 + xlen;\n               yarr[ii] = y1;\n            }\n            itarr[ii] = n;\n            icount++;\n            ii +=2;\n            n++;\n         }\n         return icount;\n      }\n\n      let arrx = handle.original ? handle.origx : handle.grx,\n          arry = handle.original ? handle.origy : handle.gry;\n\n      for (j = handle.j1; j < handle.j2-dj; j += dj) {\n\n         y[1] = y[0] = (arry[j] + arry[j+dj])/2;\n         y[3] = y[2] = (arry[j+dj] + arry[j+2*dj])/2;\n\n         for (i = handle.i1; i < handle.i2-di; i += di) {\n\n            zc[0] = histo.getBinContent(i+1, j+1);\n            zc[1] = histo.getBinContent(i+1+di, j+1);\n            zc[2] = histo.getBinContent(i+1+di, j+1+dj);\n            zc[3] = histo.getBinContent(i+1, j+1+dj);\n\n            for (k=0;k<4;k++)\n               ir[k] = BinarySearch(zc[k]);\n\n            if ((ir[0] !== ir[1]) || (ir[1] !== ir[2]) || (ir[2] !== ir[3]) || (ir[3] !== ir[0])) {\n               x[3] = x[0] = (arrx[i] + arrx[i+1])/2;\n               x[2] = x[1] = (arrx[i+1] + arrx[i+2])/2;\n\n               if (zc[0] <= zc[1]) n = 0; else n = 1;\n               if (zc[2] <= zc[3]) m = 2; else m = 3;\n               if (zc[n] > zc[m]) n = m;\n               n++;\n               lj=1;\n               for (ix=1;ix<=4;ix++) {\n                  m = n%4 + 1;\n                  ljfill = PaintContourLine(zc[n-1],ir[n-1],x[n-1],y[n-1],\n                        zc[m-1],ir[m-1],x[m-1],y[m-1]);\n                  lj += 2*ljfill;\n                  n = m;\n               }\n\n               if (zc[0] <= zc[1]) n = 0; else n = 1;\n               if (zc[2] <= zc[3]) m = 2; else m = 3;\n               if (zc[n] > zc[m]) n = m;\n               n++;\n               lj=2;\n               for (ix=1;ix<=4;ix++) {\n                  if (n == 1) m = 4;\n                  else        m = n-1;\n                  ljfill = PaintContourLine(zc[n-1],ir[n-1],x[n-1],y[n-1],\n                        zc[m-1],ir[m-1],x[m-1],y[m-1]);\n                  lj += 2*ljfill;\n                  n = m;\n               }\n               //     Re-order endpoints\n\n               count = 0;\n               for (ix=1; ix<=lj-5; ix +=2) {\n                  //count = 0;\n                  while (itarr[ix-1] != itarr[ix]) {\n                     xsave = xarr[ix];\n                     ysave = yarr[ix];\n                     itars = itarr[ix];\n                     for (jx=ix; jx<=lj-5; jx +=2) {\n                        xarr[jx]  = xarr[jx+2];\n                        yarr[jx]  = yarr[jx+2];\n                        itarr[jx] = itarr[jx+2];\n                     }\n                     xarr[lj-3]  = xsave;\n                     yarr[lj-3]  = ysave;\n                     itarr[lj-3] = itars;\n                     if (count > kMAXCOUNT) break;\n                     count++;\n                  }\n               }\n\n               if (count > kMAXCOUNT) continue;\n\n               for (ix=1; ix<=lj-2; ix +=2) {\n\n                  ipoly = itarr[ix-1];\n\n                  if ((ipoly >= 0) && (ipoly < levels.length)) {\n                     poly = polys[ipoly];\n                     if (!poly)\n                        poly = polys[ipoly] = createTPolyLine(kMAXCONTOUR*4, true);\n\n                     np = poly.fLastPoint;\n                     if (np < poly.fN-2) {\n                        poly.fX[np+1] = Math.round(xarr[ix-1]); poly.fY[np+1] = Math.round(yarr[ix-1]);\n                        poly.fX[np+2] = Math.round(xarr[ix]); poly.fY[np+2] = Math.round(yarr[ix]);\n                        poly.fLastPoint = np+2;\n                        npmax = Math.max(npmax, poly.fLastPoint+1);\n                     } else {\n                        // console.log('reject point??', poly.fLastPoint);\n                     }\n                  }\n               }\n            } // end of if (ir[0]\n         } // end of j\n      } // end of i\n\n      let polysort = new Int32Array(levels.length), first = 0;\n      //find first positive contour\n      for (ipoly=0;ipoly<levels.length;ipoly++) {\n         if (levels[ipoly] >= 0) { first = ipoly; break; }\n      }\n      //store negative contours from 0 to minimum, then all positive contours\n      k = 0;\n      for (ipoly=first-1;ipoly>=0;ipoly--) {polysort[k] = ipoly; k++;}\n      for (ipoly=first;ipoly<levels.length;ipoly++) { polysort[k] = ipoly; k++;}\n\n      let xp = new Float32Array(2*npmax),\n          yp = new Float32Array(2*npmax);\n\n      for (k=0;k<levels.length;++k) {\n\n         ipoly = polysort[k];\n         poly = polys[ipoly];\n         if (!poly) continue;\n\n         let colindx = ipoly,\n             xx = poly.fX, yy = poly.fY, np = poly.fLastPoint+1,\n             istart = 0, iminus, iplus, xmin = 0, ymin = 0, nadd;\n\n         while (true) {\n\n            iminus = npmax;\n            iplus  = iminus+1;\n            xp[iminus]= xx[istart];   yp[iminus] = yy[istart];\n            xp[iplus] = xx[istart+1]; yp[iplus]  = yy[istart+1];\n            xx[istart] = xx[istart+1] = xmin;\n            yy[istart] = yy[istart+1] = ymin;\n            while (true) {\n               nadd = 0;\n               for (i=2;i<np;i+=2) {\n                  if ((iplus < 2*npmax-1) && (xx[i] === xp[iplus]) && (yy[i] === yp[iplus])) {\n                     iplus++;\n                     xp[iplus] = xx[i+1]; yp[iplus] = yy[i+1];\n                     xx[i] = xx[i+1] = xmin;\n                     yy[i] = yy[i+1] = ymin;\n                     nadd++;\n                  }\n                  if ((iminus > 0) && (xx[i+1] === xp[iminus]) && (yy[i+1] === yp[iminus])) {\n                     iminus--;\n                     xp[iminus] = xx[i]; yp[iminus] = yy[i];\n                     xx[i] = xx[i+1] = xmin;\n                     yy[i] = yy[i+1] = ymin;\n                     nadd++;\n                  }\n               }\n               if (nadd == 0) break;\n            }\n\n            if ((iminus+1 < iplus) && (iminus>=0))\n               contour_func(colindx, xp, yp, iminus, iplus, ipoly);\n\n            istart = 0;\n            for (i=2;i<np;i+=2) {\n               if (xx[i] !== xmin && yy[i] !== ymin) {\n                  istart = i;\n                  break;\n               }\n            }\n\n            if (istart === 0) break;\n         }\n      }\n   }\n\n   /** @summary Draw histogram bins as contour */\n   drawBinsContour(funcs, frame_w,frame_h) {\n      let handle = this.prepareDraw({ rounding: false, extra: 100, original: this.options.Proj != 0 }),\n          main = this.getFramePainter(),\n          palette = main.getHistPalette(),\n          levels = palette.getContour(),\n          func = main.getProjectionFunc();\n\n      let BuildPath = (xp,yp,iminus,iplus,do_close) => {\n         let cmd = \"\", last, pnt, first, isany;\n         for (let i = iminus; i <= iplus; ++i) {\n            if (func) {\n               pnt = func(xp[i], yp[i]);\n               pnt.x = Math.round(funcs.grx(pnt.x));\n               pnt.y = Math.round(funcs.gry(pnt.y));\n            } else {\n               pnt = { x: Math.round(xp[i]), y: Math.round(yp[i]) };\n            }\n            if (!cmd) {\n               cmd = \"M\" + pnt.x + \",\" + pnt.y; first = pnt;\n            } else if ((i == iplus) && first && (pnt.x == first.x) && (pnt.y == first.y)) {\n               if (!isany) return \"\"; // all same points\n               cmd += \"z\"; do_close = false;\n            } else if ((pnt.x != last.x) && (pnt.y != last.y)) {\n               cmd +=  \"l\" + (pnt.x - last.x) + \",\" + (pnt.y - last.y); isany = true;\n            } else if (pnt.x != last.x) {\n               cmd +=  \"h\" + (pnt.x - last.x); isany = true;\n            } else if (pnt.y != last.y) {\n               cmd +=  \"v\" + (pnt.y - last.y); isany = true;\n            }\n            last = pnt;\n         }\n         if (do_close) cmd += \"z\";\n         return cmd;\n      };\n\n      if (this.options.Contour===14) {\n         let dd = \"M0,0h\"+frame_w+\"v\"+frame_h+\"h-\"+frame_w+\"z\";\n         if (this.options.Proj) {\n            let dj = handle.stepj, sz = parseInt((handle.j2 - handle.j1)/dj),\n                xd = new Float32Array(sz*2), yd = new Float32Array(sz*2);\n            for (let i=0;i<sz;++i) {\n               xd[i] = handle.origx[handle.i1];\n               yd[i] = (handle.origy[handle.j1]*(i*dj+0.5) + handle.origy[handle.j2]*(sz-0.5-i*dj))/sz;\n               xd[i+sz] = handle.origx[handle.i2];\n               yd[i+sz] = (handle.origy[handle.j2]*(i*dj+0.5) + handle.origy[handle.j1]*(sz-0.5-i*dj))/sz;\n            }\n            dd = BuildPath(xd,yd,0,2*sz-1,true);\n         }\n\n         this.draw_g\n             .append(\"svg:path\")\n             .attr(\"d\", dd)\n             .style(\"fill\", palette.getColor(0));\n      }\n\n      this.buildContour(handle, levels, palette,\n         (colindx,xp,yp,iminus,iplus) => {\n            let icol = palette.getColor(colindx),\n                fillcolor = icol, lineatt;\n\n            switch (this.options.Contour) {\n               case 1: break;\n               case 11: fillcolor = 'none'; lineatt = new TAttLineHandler({ color: icol }); break;\n               case 12: fillcolor = 'none'; lineatt = new TAttLineHandler({ color:1, style: (colindx%5 + 1), width: 1 }); break;\n               case 13: fillcolor = 'none'; lineatt = this.lineatt; break;\n               case 14: break;\n            }\n\n            let dd = BuildPath(xp, yp, iminus, iplus, fillcolor != 'none');\n            if (!dd) return;\n\n            let elem = this.draw_g\n                          .append(\"svg:path\")\n                          .attr(\"class\",\"th2_contour\")\n                          .attr(\"d\", dd)\n                          .style(\"fill\", fillcolor);\n\n            if (lineatt)\n               elem.call(lineatt.func);\n         }\n      );\n\n      handle.hide_only_zeros = true; // text drawing suppress only zeros\n\n      return handle;\n   }\n\n   /** @summary Create polybin */\n   createPolyBin(pmain, bin, text_pos) {\n      let cmd = \"\", ngr, ngraphs = 1, gr = null,\n          funcs = pmain.getGrFuncs(this.options.second_x, this.options.second_y);\n\n      if (bin.fPoly._typename=='TMultiGraph')\n         ngraphs = bin.fPoly.fGraphs.arr.length;\n      else\n         gr = bin.fPoly;\n\n      if (text_pos)\n         bin._sumx = bin._sumy = bin._suml = 0;\n\n      function addPoint(x1,y1,x2,y2) {\n         let len = Math.sqrt((x1-x2)**2 + (y1-y2)**2);\n         bin._sumx += (x1+x2)*len/2;\n         bin._sumy += (y1+y2)*len/2;\n         bin._suml += len;\n      }\n\n      for (ngr = 0; ngr < ngraphs; ++ ngr) {\n         if (!gr || (ngr>0)) gr = bin.fPoly.fGraphs.arr[ngr];\n\n         let npnts = gr.fNpoints, n,\n             x = gr.fX, y = gr.fY,\n             grx = Math.round(funcs.grx(x[0])),\n             gry = Math.round(funcs.gry(y[0])),\n             nextx, nexty;\n\n         if ((npnts>2) && (x[0]==x[npnts-1]) && (y[0]==y[npnts-1])) npnts--;\n\n         cmd += \"M\"+grx+\",\"+gry;\n\n         for (n=1;n<npnts;++n) {\n            nextx = Math.round(funcs.grx(x[n]));\n            nexty = Math.round(funcs.gry(y[n]));\n            if (text_pos) addPoint(grx,gry, nextx, nexty);\n            if ((grx!==nextx) || (gry!==nexty)) {\n               if (grx===nextx)\n                  cmd += \"v\" + (nexty - gry);\n               else if (gry===nexty)\n                  cmd += \"h\" + (nextx - grx);\n               else\n                  cmd += \"l\" + (nextx - grx) + \",\" + (nexty - gry);\n            }\n            grx = nextx; gry = nexty;\n         }\n\n         if (text_pos) addPoint(grx, gry, Math.round(funcs.grx(x[0])), Math.round(funcs.gry(y[0])));\n         cmd += \"z\";\n      }\n\n      if (text_pos) {\n         if (bin._suml > 0) {\n            bin._midx = Math.round(bin._sumx / bin._suml);\n            bin._midy = Math.round(bin._sumy / bin._suml);\n         } else {\n            bin._midx = Math.round(funcs.grx((bin.fXmin + bin.fXmax)/2));\n            bin._midy = Math.round(funcs.gry((bin.fYmin + bin.fYmax)/2));\n         }\n      }\n\n      return cmd;\n   }\n\n   /** @summary Draw RH2 bins as text */\n   drawBinsText(handle) {\n      let histo = this.getHisto(),\n          i, j, binz, binw, binh, text, x, y, width, height;\n\n      if (handle===null) handle = this.prepareDraw({ rounding: false });\n\n      let textFont  = this.v7EvalFont(\"text\", { size: 20, color: \"black\", align: 22 }),\n          text_offset = 0,\n          text_g = this.draw_g.append(\"svg:g\").attr(\"class\",\"th2_text\"),\n          di = handle.stepi, dj = handle.stepj,\n          profile2d = (this.options.TextKind == \"E\") &&\n                      this.matchObjectType('TProfile2D') && (typeof histo.getBinEntries=='function');\n\n      if (this.options.BarOffset) text_offset = this.options.BarOffset;\n\n      this.startTextDrawing(textFont, 'font', text_g);\n\n      for (i = handle.i1; i < handle.i2; i += di)\n         for (j = handle.j1; j < handle.j2; j += dj) {\n            binz = histo.getBinContent(i+1, j+1);\n            if ((binz === 0) && !this._show_empty_bins) continue;\n\n            binw = handle.grx[i+di] - handle.grx[i];\n            binh = handle.gry[j] - handle.gry[j+dj];\n\n            if (profile2d)\n               binz = histo.getBinEntries(i+1, j+1);\n\n            text = (binz === Math.round(binz)) ? binz.toString() :\n                      floatToString(binz, gStyle.fPaintTextFormat);\n\n            if (textFont.angle) {\n               x = Math.round(handle.grx[i] + binw*0.5);\n               y = Math.round(handle.gry[j+dj] + binh*(0.5 + text_offset));\n               width = height = 0;\n            } else {\n               x = Math.round(handle.grx[i] + binw*0.1);\n               y = Math.round(handle.gry[j+dj] + binh*(0.1 + text_offset));\n               width = Math.round(binw*0.8);\n               height = Math.round(binh*0.8);\n            }\n\n            this.drawText({ align: 22, x, y, width, height, text, latex: 0, draw_g: text_g });\n         }\n\n      return this.finishTextDrawing(text_g, true).then(() => {\n\n         handle.hide_only_zeros = true; // text drawing suppress only zeros\n\n         return handle;\n      });\n   }\n\n   /** @summary Draw RH2 bins as arrows */\n   drawBinsArrow() {\n      let histo = this.getHisto(), cmd = \"\",\n          i,j, dn = 1e-30, dx, dy, xc,yc,\n          dxn,dyn,x1,x2,y1,y2, anr,si,co,\n          handle = this.prepareDraw({ rounding: false }),\n          scale_x = (handle.grx[handle.i2] - handle.grx[handle.i1])/(handle.i2 - handle.i1 + 1-0.03)/2,\n          scale_y = (handle.gry[handle.j2] - handle.gry[handle.j1])/(handle.j2 - handle.j1 + 1-0.03)/2,\n          di = handle.stepi, dj = handle.stepj;\n\n      const makeLine = (dx, dy) => {\n         if (dx)\n            return dy ? `l${dx},${dy}` : `h${dx}`;\n         return dy ? `v${dy}` : \"\";\n      };\n\n      for (let loop = 0; loop < 2; ++loop)\n         for (i = handle.i1; i < handle.i2; i += di)\n            for (j = handle.j1; j < handle.j2; j += dj) {\n\n               if (i === handle.i1) {\n                  dx = histo.getBinContent(i+1+di, j+1) - histo.getBinContent(i+1, j+1);\n               } else if (i >= handle.i2-di) {\n                  dx = histo.getBinContent(i+1, j+1) - histo.getBinContent(i+1-di, j+1);\n               } else {\n                  dx = 0.5*(histo.getBinContent(i+1+di, j+1) - histo.getBinContent(i+1-di, j+1));\n               }\n               if (j === handle.j1) {\n                  dy = histo.getBinContent(i+1, j+1+dj) - histo.getBinContent(i+1, j+1);\n               } else if (j >= handle.j2-dj) {\n                  dy = histo.getBinContent(i+1, j+1) - histo.getBinContent(i+1, j+1-dj);\n               } else {\n                  dy = 0.5*(histo.getBinContent(i+1, j+1+dj) - histo.getBinContent(i+1, j+1-dj));\n               }\n\n               if (loop===0) {\n                  dn = Math.max(dn, Math.abs(dx), Math.abs(dy));\n               } else {\n                  xc = (handle.grx[i] + handle.grx[i+di])/2;\n                  yc = (handle.gry[j] + handle.gry[j+dj])/2;\n                  dxn = scale_x*dx/dn;\n                  dyn = scale_y*dy/dn;\n                  x1  = xc - dxn;\n                  x2  = xc + dxn;\n                  y1  = yc - dyn;\n                  y2  = yc + dyn;\n                  dx = Math.round(x2-x1);\n                  dy = Math.round(y2-y1);\n\n                  if ((dx!==0) || (dy!==0)) {\n                     cmd += \"M\"+Math.round(x1)+\",\"+Math.round(y1) + makeLine(dx,dy);;\n\n                     if (Math.abs(dx) > 5 || Math.abs(dy) > 5) {\n                        anr = Math.sqrt(2/(dx**2 + dy**2));\n                        si  = Math.round(anr*(dx + dy));\n                        co  = Math.round(anr*(dx - dy));\n                        if (si || co)\n                           cmd += `m${-si},${co}` + makeLine(si,-co) + makeLine(-co,-si);;\n                     }\n                  }\n               }\n            }\n\n      this.draw_g\n         .append(\"svg:path\")\n         .attr(\"d\", cmd)\n         .style(\"fill\", \"none\")\n         .call(this.lineatt.func);\n\n      return handle;\n   }\n\n   /** @summary Draw RH2 bins as boxes */\n   drawBinsBox() {\n\n      let histo = this.getHisto(),\n          handle = this.prepareDraw({ rounding: false }),\n          main = this.getFramePainter();\n\n      if (main.maxbin === main.minbin) {\n         main.maxbin = this.gmaxbin;\n         main.minbin = this.gminbin;\n         main.minposbin = this.gminposbin;\n      }\n      if (main.maxbin === main.minbin)\n         main.minbin = Math.min(0, main.maxbin-1);\n\n      let absmax = Math.max(Math.abs(main.maxbin), Math.abs(main.minbin)),\n          absmin = Math.max(0, main.minbin),\n          i, j, binz, absz, res = \"\", cross = \"\", btn1 = \"\", btn2 = \"\",\n          zdiff, dgrx, dgry, xx, yy, ww, hh,\n          xyfactor, uselogz = false, logmin = 0,\n          di = handle.stepi, dj = handle.stepj;\n\n      if (main.logz && (absmax>0)) {\n         uselogz = true;\n         let logmax = Math.log(absmax);\n         if (absmin > 0)\n            logmin = Math.log(absmin);\n         else if ((main.minposbin >= 1) && (main.minposbin < 100))\n            logmin = Math.log(0.7);\n          else\n            logmin = (main.minposbin > 0) ? Math.log(0.7*main.minposbin) : logmax - 10;\n         if (logmin >= logmax) logmin = logmax - 10;\n         xyfactor = 1. / (logmax - logmin);\n      } else {\n         xyfactor = 1. / (absmax - absmin);\n      }\n\n      // now start build\n      for (i = handle.i1; i < handle.i2; i += di) {\n         for (j = handle.j1; j < handle.j2; j += dj) {\n            binz = histo.getBinContent(i + 1, j + 1);\n            absz = Math.abs(binz);\n            if ((absz === 0) || (absz < absmin)) continue;\n\n            zdiff = uselogz ? ((absz > 0) ? Math.log(absz) - logmin : 0) : (absz - absmin);\n            // area of the box should be proportional to absolute bin content\n            zdiff = 0.5 * ((zdiff < 0) ? 1 : (1 - Math.sqrt(zdiff * xyfactor)));\n            // avoid oversized bins\n            if (zdiff < 0) zdiff = 0;\n\n            ww = handle.grx[i+di] - handle.grx[i];\n            hh = handle.gry[j] - handle.gry[j+dj];\n\n            dgrx = zdiff * ww;\n            dgry = zdiff * hh;\n\n            xx = Math.round(handle.grx[i] + dgrx);\n            yy = Math.round(handle.gry[j+dj] + dgry);\n\n            ww = Math.max(Math.round(ww - 2*dgrx), 1);\n            hh = Math.max(Math.round(hh - 2*dgry), 1);\n\n            res += `M${xx},${yy}v${hh}h${ww}v${-hh}z`;\n\n            if ((binz < 0) && (this.options.BoxStyle === 10))\n               cross += `M${xx},${yy}l${ww},${hh}M${xx+ww},${yy}l${-ww},${hh}`;\n\n            if ((this.options.BoxStyle === 11) && (ww>5) && (hh>5)) {\n               let pww = Math.round(ww*0.1),\n                   phh = Math.round(hh*0.1),\n                   side1 = `M${xx},${yy}h${ww}l${-pww},${phh}h${2*pww-ww}v${hh-2*phh}l${-pww},${phh}z`,\n                   side2 = `M${xx+ww},${yy+hh}v${-hh}l${-pww},${phh}v${hh-2*phh}h${2*pww-ww}l${-pww},${phh}z`;\n               if (binz < 0) { btn2 += side1; btn1 += side2; }\n                        else { btn1 += side1; btn2 += side2; }\n            }\n         }\n      }\n\n      if (res.length > 0) {\n         let elem = this.draw_g\n                        .append(\"svg:path\")\n                        .attr(\"d\", res)\n                        .call(this.fillatt.func);\n         if ((this.options.BoxStyle !== 11) && this.fillatt.empty())\n            elem.call(this.lineatt.func);\n      }\n\n      if ((btn1.length > 0) && this.fillatt.hasColor())\n         this.draw_g.append(\"svg:path\")\n                    .attr(\"d\", btn1)\n                    .call(this.fillatt.func)\n                    .style(\"fill\", d3_rgb(this.fillatt.color).brighter(0.5).formatHex());\n\n      if (btn2.length > 0)\n         this.draw_g.append(\"svg:path\")\n                    .attr(\"d\", btn2)\n                    .call(this.fillatt.func)\n                    .style(\"fill\", !this.fillatt.hasColor() ? 'red' : d3_rgb(this.fillatt.color).darker(0.5).formatHex());\n\n      if (cross.length > 0) {\n         let elem = this.draw_g.append(\"svg:path\")\n                               .attr(\"d\", cross)\n                               .style(\"fill\", \"none\");\n         if (!this.lineatt.empty())\n            elem.call(this.lineatt.func);\n      }\n\n      return handle;\n   }\n\n   /** @summary Draw histogram bins as candle plot */\n   drawBinsCandle(funcs, w) {\n      let histo = this.getHisto(), yaxis = this.getAxis(\"y\"),\n          handle = this.prepareDraw(),\n          i, j, y, sum1, cont, center, counter, integral, pnt,\n          bars = \"\", markers = \"\", posy;\n\n      // create attribute only when necessary\n      this.createv7AttMarker();\n\n      // reset absolution position for markers\n      this.markeratt.resetPos();\n\n      handle.candle = []; // array of drawn points\n\n      // loop over visible x-bins\n      for (i = handle.i1; i < handle.i2; ++i) {\n         sum1 = 0;\n         //estimate integral\n         integral = 0;\n         counter = 0;\n         for (j = 0; j < this.nbinsy; ++j) {\n            integral += histo.getBinContent(i+1,j+1);\n         }\n         pnt = { bin:i, meany:0, m25y:0, p25y:0, median:0, iqr:0, whiskerp:0, whiskerm:0};\n         //estimate quantiles... simple function... not so nice as GetQuantiles\n         for (j = 0; j < this.nbinsy; ++j) {\n            cont = histo.getBinContent(i+1,j+1);\n            posy = yaxis.GetBinCoord(j + 0.5);\n            if (counter/integral < 0.001 && (counter + cont)/integral >=0.001) pnt.whiskerm = posy; // Lower whisker\n            if (counter/integral < 0.25 && (counter + cont)/integral >=0.25) pnt.m25y = posy; // Lower edge of box\n            if (counter/integral < 0.5 && (counter + cont)/integral >=0.5) pnt.median = posy; //Median\n            if (counter/integral < 0.75 && (counter + cont)/integral >=0.75) pnt.p25y = posy; //Upper edge of box\n            if (counter/integral < 0.999 && (counter + cont)/integral >=0.999) pnt.whiskerp = posy; // Upper whisker\n            counter += cont;\n            y = posy; // center of y bin coordinate\n            sum1 += cont*y;\n         }\n         if (counter > 0) {\n            pnt.meany = sum1/counter;\n         }\n         pnt.iqr = pnt.p25y-pnt.m25y;\n\n         //Whiskers cannot exceed 1.5*iqr from box\n         if ((pnt.m25y-1.5*pnt.iqr) > pnt.whsikerm)  {\n            pnt.whiskerm = pnt.m25y-1.5*pnt.iqr;\n         }\n         if ((pnt.p25y+1.5*pnt.iqr) < pnt.whiskerp) {\n            pnt.whiskerp = pnt.p25y+1.5*pnt.iqr;\n         }\n\n         // exclude points with negative y when log scale is specified\n         if (funcs.logy && (pnt.whiskerm<=0)) continue;\n\n         w = handle.grx[i+1] - handle.grx[i];\n         w *= 0.66;\n         center = (handle.grx[i+1] + handle.grx[i]) / 2 + this.options.BarOffset*w;\n         if (this.options.BarWidth > 0) w = w * this.options.BarWidth;\n\n         pnt.x1 = Math.round(center - w/2);\n         pnt.x2 = Math.round(center + w/2);\n         center = Math.round(center);\n\n         pnt.y0 = Math.round(funcs.gry(pnt.median));\n         // mean line\n         bars += \"M\" + pnt.x1 + \",\" + pnt.y0 + \"h\" + (pnt.x2-pnt.x1);\n\n         pnt.y1 = Math.round(funcs.gry(pnt.p25y));\n         pnt.y2 = Math.round(funcs.gry(pnt.m25y));\n\n         // rectangle\n         bars += \"M\" + pnt.x1 + \",\" + pnt.y1 +\n         \"v\" + (pnt.y2-pnt.y1) + \"h\" + (pnt.x2-pnt.x1) + \"v-\" + (pnt.y2-pnt.y1) + \"z\";\n\n         pnt.yy1 = Math.round(funcs.gry(pnt.whiskerp));\n         pnt.yy2 = Math.round(funcs.gry(pnt.whiskerm));\n\n         // upper part\n         bars += \"M\" + center + \",\" + pnt.y1 + \"v\" + (pnt.yy1-pnt.y1);\n         bars += \"M\" + pnt.x1 + \",\" + pnt.yy1 + \"h\" + (pnt.x2-pnt.x1);\n\n         // lower part\n         bars += \"M\" + center + \",\" + pnt.y2 + \"v\" + (pnt.yy2-pnt.y2);\n         bars += \"M\" + pnt.x1 + \",\" + pnt.yy2 + \"h\" + (pnt.x2-pnt.x1);\n\n         //estimate outliers\n         for (j = 0; j < this.nbinsy; ++j) {\n            cont = histo.getBinContent(i+1,j+1);\n            posy = yaxis.GetBinCoord(j + 0.5);\n            if (cont > 0 && posy < pnt.whiskerm) markers += this.markeratt.create(center, posy);\n            if (cont > 0 && posy > pnt.whiskerp) markers += this.markeratt.create(center, posy);         }\n\n         handle.candle.push(pnt); // keep point for the tooltip\n      }\n\n      if (bars.length > 0)\n         this.draw_g.append(\"svg:path\")\n             .attr(\"d\", bars)\n             .call(this.lineatt.func)\n             .call(this.fillatt.func);\n\n      if (markers.length > 0)\n         this.draw_g.append(\"svg:path\")\n             .attr(\"d\", markers)\n             .call(this.markeratt.func);\n\n      return handle;\n   }\n\n   /** @summary Draw RH2 bins as scatter plot */\n   drawBinsScatter() {\n      let histo = this.getHisto(),\n          handle = this.prepareDraw({ rounding: true, pixel_density: true, scatter_plot: true }),\n          colPaths = [], currx = [], curry = [], cell_w = [], cell_h = [],\n          colindx, cmd1, cmd2, i, j, binz, cw, ch, factor = 1.,\n          scale = this.options.ScatCoef * ((this.gmaxbin) > 2000 ? 2000. / this.gmaxbin : 1.),\n          di = handle.stepi, dj = handle.stepj;\n\n      let rnd = new TRandom(handle.sumz);\n\n      if (scale*handle.sumz < 1e5) {\n         // one can use direct drawing of scatter plot without any patterns\n\n         this.createv7AttMarker();\n\n         this.markeratt.resetPos();\n\n         let path = \"\", k, npix;\n         for (i = handle.i1; i < handle.i2; i += di) {\n            cw = handle.grx[i+di] - handle.grx[i];\n            for (j = handle.j1; j < handle.j2; j += dj) {\n               ch = handle.gry[j] - handle.gry[j+dj];\n               binz = histo.getBinContent(i + 1, j + 1);\n\n               npix = Math.round(scale*binz);\n               if (npix <= 0) continue;\n\n               for (k = 0; k < npix; ++k)\n                  path += this.markeratt.create(\n                            Math.round(handle.grx[i] + cw * rnd.random()),\n                            Math.round(handle.gry[j+1] + ch * rnd.random()));\n            }\n         }\n\n         this.draw_g\n              .append(\"svg:path\")\n              .attr(\"d\", path)\n              .call(this.markeratt.func);\n\n         return handle;\n      }\n\n      // limit filling factor, do not try to produce as many points as filled area;\n      if (this.maxbin > 0.7) factor = 0.7/this.maxbin;\n\n      // let nlevels = Math.round(handle.max - handle.min);\n\n      // now start build\n      for (i = handle.i1; i < handle.i2; i += di) {\n         for (j = handle.j1; j < handle.j2; j += dj) {\n            binz = histo.getBinContent(i + 1, j + 1);\n            if ((binz <= 0) || (binz < this.minbin)) continue;\n\n            cw = handle.grx[i+di] - handle.grx[i];\n            ch = handle.gry[j] - handle.gry[j+dj];\n            if (cw*ch <= 0) continue;\n\n            colindx = handle.palette.getContourIndex(binz/cw/ch);\n            if (colindx < 0) continue;\n\n            cmd1 = \"M\"+handle.grx[i]+\",\"+handle.gry[j+dj];\n            if (colPaths[colindx] === undefined) {\n               colPaths[colindx] = cmd1;\n               cell_w[colindx] = cw;\n               cell_h[colindx] = ch;\n            } else{\n               cmd2 = \"m\" + (handle.grx[i]-currx[colindx]) + \",\" + (handle.gry[j+dj] - curry[colindx]);\n               colPaths[colindx] += (cmd2.length < cmd1.length) ? cmd2 : cmd1;\n               cell_w[colindx] = Math.max(cell_w[colindx], cw);\n               cell_h[colindx] = Math.max(cell_h[colindx], ch);\n            }\n\n            currx[colindx] = handle.grx[i];\n            curry[colindx] = handle.gry[j+dj];\n\n            colPaths[colindx] += \"v\"+ch+\"h\"+cw+\"v-\"+ch+\"z\";\n         }\n      }\n\n      let layer = this.getFrameSvg().select('.main_layer'),\n          defs = layer.select(\"defs\");\n      if (defs.empty() && (colPaths.length>0))\n         defs = layer.insert(\"svg:defs\",\":first-child\");\n\n      this.createv7AttMarker();\n\n      let cntr = handle.palette.getContour();\n\n      for (colindx=0;colindx<colPaths.length;++colindx)\n        if ((colPaths[colindx] !== undefined) && (colindx<cntr.length)) {\n           let pattern_class = \"scatter_\" + colindx,\n               pattern = defs.select('.' + pattern_class);\n           if (pattern.empty())\n              pattern = defs.append('svg:pattern')\n                            .attr(\"class\", pattern_class)\n                            .attr(\"id\", \"jsroot_scatter_pattern_\" + internals.id_counter++)\n                            .attr(\"patternUnits\",\"userSpaceOnUse\");\n           else\n              pattern.selectAll(\"*\").remove();\n\n           let npix = Math.round(factor*cntr[colindx]*cell_w[colindx]*cell_h[colindx]);\n           if (npix < 1) npix = 1;\n\n           let arrx = new Float32Array(npix), arry = new Float32Array(npix);\n\n           if (npix === 1) {\n              arrx[0] = arry[0] = 0.5;\n           } else {\n              for (let n = 0; n < npix; ++n) {\n                 arrx[n] = rnd.random();\n                 arry[n] = rnd.random();\n              }\n           }\n\n           // arrx.sort();\n\n           this.markeratt.resetPos();\n\n           let path = \"\";\n\n           for (let n = 0; n < npix; ++n)\n              path += this.markeratt.create(arrx[n] * cell_w[colindx], arry[n] * cell_h[colindx]);\n\n           pattern.attr(\"width\", cell_w[colindx])\n                  .attr(\"height\", cell_h[colindx])\n                  .append(\"svg:path\")\n                  .attr(\"d\",path)\n                  .call(this.markeratt.func);\n\n           this.draw_g\n               .append(\"svg:path\")\n               .attr(\"scatter-index\", colindx)\n               .style(\"fill\", 'url(#' + pattern.attr(\"id\") + ')')\n               .attr(\"d\", colPaths[colindx]);\n        }\n\n      return handle;\n   }\n\n   /** @summary Draw RH2 bins in 2D mode */\n   draw2DBins() {\n\n      if (!this.draw_content) {\n         this.removeG();\n         return Promise.resolve(false);\n      }\n\n      this.createHistDrawAttributes();\n\n      this.createG(true);\n\n      let pmain = this.getFramePainter(),\n          rect = pmain.getFrameRect(),\n          funcs = pmain.getGrFuncs(this.options.second_x, this.options.second_y),\n          handle = null, pr = null;\n\n      // if (this.lineatt.empty()) this.lineatt.color = 'cyan';\n\n      if (this.options.Scat)\n         handle = this.drawBinsScatter();\n      else if (this.options.Color)\n         handle = this.drawBinsColor();\n      else if (this.options.Box)\n         handle = this.drawBinsBox();\n      else if (this.options.Arrow)\n         handle = this.drawBinsArrow();\n      else if (this.options.Contour > 0)\n         handle = this.drawBinsContour(funcs, rect.width, rect.height);\n      else if (this.options.Candle)\n         handle = this.drawBinsCandle(funcs, rect.width);\n\n      if (this.options.Text)\n         pr = this.drawBinsText(handle);\n\n      if (!handle && !pr)\n         handle = this.drawBinsColor();\n\n      if (!pr) pr = Promise.resolve(handle);\n\n      return pr.then(h => {\n         this.tt_handle = h;\n         return this;\n      });\n   }\n\n   /** @summary Provide text information (tooltips) for histogram bin */\n   getBinTooltips(i, j) {\n      let lines = [],\n           histo = this.getHisto(),\n           binz = histo.getBinContent(i+1,j+1),\n           di = 1, dj = 1;\n\n      if (this.isDisplayItem()) {\n         di = histo.stepx || 1;\n         dj = histo.stepy || 1;\n      }\n\n      lines.push(this.getObjectHint() || \"histo<2>\");\n      lines.push(\"x = \" + this.getAxisBinTip(\"x\", i, di));\n      lines.push(\"y = \" + this.getAxisBinTip(\"y\", j, dj));\n\n      lines.push(\"bin = \" + i + \", \" + j);\n\n      if (histo.$baseh) binz -= histo.$baseh.getBinContent(i+1,j+1);\n\n      let lbl = \"entries = \" + ((di>1) || (dj>1) ? \"~\" : \"\");\n\n      if (binz === Math.round(binz))\n         lines.push(lbl + binz);\n      else\n         lines.push(lbl + floatToString(binz, gStyle.fStatFormat));\n\n      return lines;\n   }\n\n   /** @summary Provide text information (tooltips) for candle bin */\n   getCandleTooltips(p) {\n      let lines = [], main = this.getFramePainter(), xaxis = this.getAxis(\"y\");\n\n      lines.push(this.getObjectHint() || \"histo\");\n\n      lines.push(\"x = \" + main.axisAsText(\"x\", xaxis.GetBinCoord(p.bin)));\n\n      lines.push('mean y = ' + floatToString(p.meany, gStyle.fStatFormat))\n      lines.push('m25 = ' + floatToString(p.m25y, gStyle.fStatFormat))\n      lines.push('p25 = ' + floatToString(p.p25y, gStyle.fStatFormat))\n\n      return lines;\n   }\n\n   /** @summary Provide text information (tooltips) for poly bin */\n   getPolyBinTooltips(binindx, realx, realy) {\n\n      let histo = this.getHisto(),\n          bin = histo.fBins.arr[binindx],\n          pmain = this.getFramePainter(),\n          binname = bin.fPoly.fName,\n          lines = [], numpoints = 0;\n\n      if (binname === \"Graph\") binname = \"\";\n      if (binname.length === 0) binname = bin.fNumber;\n\n      if ((realx===undefined) && (realy===undefined)) {\n         realx = realy = 0;\n         let gr = bin.fPoly, numgraphs = 1;\n         if (gr._typename === 'TMultiGraph') { numgraphs = bin.fPoly.fGraphs.arr.length; gr = null; }\n\n         for (let ngr=0;ngr<numgraphs;++ngr) {\n            if (!gr || (ngr>0)) gr = bin.fPoly.fGraphs.arr[ngr];\n\n            for (let n=0;n<gr.fNpoints;++n) {\n               ++numpoints;\n               realx += gr.fX[n];\n               realy += gr.fY[n];\n            }\n         }\n\n         if (numpoints > 1) {\n            realx = realx / numpoints;\n            realy = realy / numpoints;\n         }\n      }\n\n      lines.push(this.getObjectHint() || \"histo\");\n      lines.push(\"x = \" + pmain.axisAsText(\"x\", realx));\n      lines.push(\"y = \" + pmain.axisAsText(\"y\", realy));\n      if (numpoints > 0) lines.push(\"npnts = \" + numpoints);\n      lines.push(\"bin = \" + binname);\n      if (bin.fContent === Math.round(bin.fContent))\n         lines.push(\"content = \" + bin.fContent);\n      else\n         lines.push(\"content = \" + floatToString(bin.fContent, gStyle.fStatFormat));\n      return lines;\n   }\n\n   /** @summary Process tooltip event */\n   processTooltipEvent(pnt) {\n      if (!pnt || !this.draw_content || !this.draw_g || !this.tt_handle || this.options.Proj) {\n         if (this.draw_g)\n            this.draw_g.select(\".tooltip_bin\").remove();\n         return null;\n      }\n\n      let histo = this.getHisto(),\n          h = this.tt_handle,\n          ttrect = this.draw_g.select(\".tooltip_bin\");\n\n      if (h.poly) {\n         // process tooltips from TH2Poly\n\n         let pmain = this.getFramePainter(), foundindx = -1, bin;\n         const realx = pmain.revertAxis(\"x\", pnt.x),\n               realy = pmain.revertAxis(\"y\", pnt.y);\n\n         if ((realx !== undefined) && (realy !== undefined)) {\n            const len = histo.fBins.arr.length;\n\n            for (let i = 0; (i < len) && (foundindx < 0); ++ i) {\n               bin = histo.fBins.arr[i];\n\n               // found potential bins candidate\n               if ((realx < bin.fXmin) || (realx > bin.fXmax) ||\n                    (realy < bin.fYmin) || (realy > bin.fYmax)) continue;\n\n               // ignore empty bins with col0 option\n               if ((bin.fContent === 0) && !this.options.Zero) continue;\n\n               let gr = bin.fPoly, numgraphs = 1;\n               if (gr._typename === 'TMultiGraph') { numgraphs = bin.fPoly.fGraphs.arr.length; gr = null; }\n\n               for (let ngr=0;ngr<numgraphs;++ngr) {\n                  if (!gr || (ngr>0)) gr = bin.fPoly.fGraphs.arr[ngr];\n                  if (gr.IsInside(realx,realy)) {\n                     foundindx = i;\n                     break;\n                  }\n               }\n            }\n         }\n\n         if (foundindx < 0) {\n            ttrect.remove();\n            return null;\n         }\n\n         let res = { name: \"histo\", title: histo.fTitle || \"title\",\n                     x: pnt.x, y: pnt.y,\n                     color1: this.lineatt ? this.lineatt.color : 'green',\n                     color2: this.fillatt ? this.fillatt.getFillColorAlt('blue') : 'blue',\n                     exact: true, menu: true,\n                     lines: this.getPolyBinTooltips(foundindx, realx, realy) };\n\n         if (pnt.disabled) {\n            ttrect.remove();\n            res.changed = true;\n         } else {\n\n            if (ttrect.empty())\n               ttrect = this.draw_g.append(\"svg:path\")\n                            .attr(\"class\",\"tooltip_bin h1bin\")\n                            .style(\"pointer-events\",\"none\");\n\n            res.changed = ttrect.property(\"current_bin\") !== foundindx;\n\n            if (res.changed)\n                  ttrect.attr(\"d\", this.createPolyBin(pmain, bin))\n                        .style(\"opacity\", \"0.7\")\n                        .property(\"current_bin\", foundindx);\n         }\n\n         if (res.changed)\n            res.user_info = { obj: histo,  name: \"histo\",\n                              bin: foundindx,\n                              cont: bin.fContent,\n                              grx: pnt.x, gry: pnt.y };\n\n         return res;\n\n      } else\n\n      if (h.candle) {\n         // process tooltips for candle\n\n         let p, i;\n\n         for (i=0;i<h.candle.length;++i) {\n            p = h.candle[i];\n            if ((p.x1 <= pnt.x) && (pnt.x <= p.x2) && (p.yy1 <= pnt.y) && (pnt.y <= p.yy2)) break;\n         }\n\n         if (i>=h.candle.length) {\n            ttrect.remove();\n            return null;\n         }\n\n         let res = { name: \"histo\", title: histo.fTitle || \"title\",\n                     x: pnt.x, y: pnt.y,\n                     color1: this.lineatt ? this.lineatt.color : 'green',\n                     color2: this.fillatt ? this.fillatt.getFillColorAlt('blue') : 'blue',\n                     lines: this.getCandleTooltips(p), exact: true, menu: true };\n\n         if (pnt.disabled) {\n            ttrect.remove();\n            res.changed = true;\n         } else {\n\n            if (ttrect.empty())\n               ttrect = this.draw_g.append(\"svg:rect\")\n                                   .attr(\"class\",\"tooltip_bin h1bin\")\n                                   .style(\"pointer-events\",\"none\");\n\n            res.changed = ttrect.property(\"current_bin\") !== i;\n\n            if (res.changed)\n               ttrect.attr(\"x\", p.x1)\n                     .attr(\"width\", p.x2-p.x1)\n                     .attr(\"y\", p.yy1)\n                     .attr(\"height\", p.yy2- p.yy1)\n                     .style(\"opacity\", \"0.7\")\n                     .property(\"current_bin\", i);\n         }\n\n         if (res.changed)\n            res.user_info = { obj: histo,  name: \"histo\",\n                              bin: i+1, cont: p.median, binx: i+1, biny: 1,\n                              grx: pnt.x, gry: pnt.y };\n\n         return res;\n      }\n\n      let i, j, binz = 0, colindx = null;\n\n      // search bins position\n      for (i = h.i1; i < h.i2; ++i)\n         if ((pnt.x>=h.grx[i]) && (pnt.x<=h.grx[i+1])) break;\n\n      for (j = h.j1; j < h.j2; ++j)\n         if ((pnt.y>=h.gry[j+1]) && (pnt.y<=h.gry[j])) break;\n\n      if ((i < h.i2) && (j < h.j2)) {\n         binz = histo.getBinContent(i+1,j+1);\n         if (this.is_projection) {\n            colindx = 0; // just to avoid hide\n         } else if (h.hide_only_zeros) {\n            colindx = (binz === 0) && !this._show_empty_bins ? null : 0;\n         } else {\n            colindx = h.palette.getContourIndex(binz);\n            if ((colindx === null) && (binz === 0) && this._show_empty_bins) colindx = 0;\n         }\n      }\n\n      if (colindx === null) {\n         ttrect.remove();\n         return null;\n      }\n\n      let res = { name: \"histo\", title: histo.fTitle || \"title\",\n                  x: pnt.x, y: pnt.y,\n                  color1: this.lineatt ? this.lineatt.color : 'green',\n                  color2: this.fillatt ? this.fillatt.getFillColorAlt('blue') : 'blue',\n                  lines: this.getBinTooltips(i, j), exact: true, menu: true };\n\n      if (this.options.Color) res.color2 = h.palette.getColor(colindx);\n\n      if (pnt.disabled && !this.is_projection) {\n         ttrect.remove();\n         res.changed = true;\n      } else {\n         if (ttrect.empty())\n            ttrect = this.draw_g.append(\"svg:rect\")\n                                .attr(\"class\",\"tooltip_bin h1bin\")\n                                .style(\"pointer-events\",\"none\");\n\n         let i1 = i, i2 = i+1,\n             j1 = j, j2 = j+1,\n             x1 = h.grx[i1], x2 = h.grx[i2],\n             y1 = h.gry[j2], y2 = h.gry[j1],\n             binid = i*10000 + j;\n\n         if (this.is_projection == \"X\") {\n            x1 = 0; x2 = this.getFramePainter().getFrameWidth();\n            if (this.projection_width > 1) {\n               let dd = (this.projection_width-1)/2;\n               if (j2+dd >= h.j2) { j2 = Math.min(Math.round(j2+dd), h.j2); j1 = Math.max(j2 - this.projection_width, h.j1); }\n                             else { j1 = Math.max(Math.round(j1-dd), h.j1); j2 = Math.min(j1 + this.projection_width, h.j2); }\n            }\n            y1 = h.gry[j2]; y2 = h.gry[j1];\n            binid = j1*777 + j2*333;\n         } else if (this.is_projection == \"Y\") {\n            y1 = 0; y2 = this.getFramePainter().getFrameHeight();\n            if (this.projection_width > 1) {\n               let dd = (this.projection_width-1)/2;\n               if (i2+dd >= h.i2) { i2 = Math.min(Math.round(i2+dd), h.i2); i1 = Math.max(i2 - this.projection_width, h.i1); }\n                             else { i1 = Math.max(Math.round(i1-dd), h.i1); i2 = Math.min(i1 + this.projection_width, h.i2); }\n            }\n            x1 = h.grx[i1], x2 = h.grx[i2],\n            binid = i1*777 + i2*333;\n         }\n\n         res.changed = ttrect.property(\"current_bin\") !== binid;\n\n         if (res.changed)\n            ttrect.attr(\"x\", x1)\n                  .attr(\"width\", x2 - x1)\n                  .attr(\"y\", y1)\n                  .attr(\"height\", y2 - y1)\n                  .style(\"opacity\", \"0.7\")\n                  .property(\"current_bin\", binid);\n\n         if (this.is_projection && res.changed)\n            this.redrawProjection(i1, i2, j1, j2);\n      }\n\n      if (res.changed)\n         res.user_info = { obj: histo, name: \"histo\",\n                           bin: histo.getBin(i+1, j+1), cont: binz, binx: i+1, biny: j+1,\n                           grx: pnt.x, gry: pnt.y };\n\n      return res;\n   }\n\n   /** @summary Checks if it makes sense to zoom inside specified axis range */\n   canZoomInside(axis,min,max) {\n      if (axis==\"z\") return true;\n      let obj = this.getAxis(axis);\n      return (obj.FindBin(max,0.5) - obj.FindBin(min,0) > 1);\n   }\n\n   /** @summary Performs 2D drawing of histogram\n     * @returns {Promise} when ready */\n   draw2D(reason) {\n      this.clear3DScene();\n\n      return this.drawFrameAxes().then(res => {\n        return res ? this.drawingBins(reason) : false;\n      }).then(res => {\n         if (res) return this.draw2DBins().then(() => this.addInteractivity());\n      }).then(() => this);\n   }\n\n   /** @summary Performs 3D drawing of histogram\n     * @returns {Promise} when ready */\n   draw3D(reason) {\n      console.log('3D drawing is disabled, load ./hist/RH1Painter.mjs');\n      return this.draw2D(reason);\n   }\n\n   /** @summary Call drawing function depending from 3D mode */\n   callDrawFunc(reason) {\n      let main = this.getFramePainter();\n\n      if (main && (main.mode3d !== this.options.Mode3D) && !this.isMainPainter())\n         this.options.Mode3D = main.mode3d;\n\n      return this.options.Mode3D ? this.draw3D(reason) : this.draw2D(reason);\n   }\n\n   /** @summary Redraw histogram */\n   redraw(reason) {\n      return this.callDrawFunc(reason);\n   }\n\n   static _draw(painter, opt) {\n      return ensureRCanvas(painter).then(() => {\n\n         painter.setAsMainPainter();\n\n         painter.options = { Hist: false, Error: false, Zero: false, Mark: false,\n                             Line: false, Fill: false, Lego: 0, Surf: 0,\n                             Text: true, TextAngle: 0, TextKind: \"\",\n                             BaseLine: false, Mode3D: false, AutoColor: 0,\n                             Color: false, Scat: false, ScatCoef: 1, Candle: \"\", Box: false, BoxStyle: 0, Arrow: false, Contour: 0, Proj: 0,\n                             BarOffset: 0., BarWidth: 1., minimum: -1111, maximum: -1111 };\n\n         let kind = painter.v7EvalAttr(\"kind\", \"\"),\n             sub = painter.v7EvalAttr(\"sub\", 0),\n             o = painter.options;\n\n         o.Text = painter.v7EvalAttr(\"drawtext\", false);\n\n         switch(kind) {\n            case \"lego\": o.Lego = sub > 0 ? 10+sub : 12; o.Mode3D = true; break;\n            case \"surf\": o.Surf = sub > 0 ? 10+sub : 1; o.Mode3D = true; break;\n            case \"box\": o.Box = true; o.BoxStyle = 10 + sub; break;\n            case \"err\": o.Error = true; o.Mode3D = true; break;\n            case \"cont\": o.Contour = sub > 0 ? 10+sub : 1; break;\n            case \"arr\": o.Arrow = true; break;\n            case \"scat\": o.Scat = true; break;\n            case \"col\": o.Color = true; break;\n            default: if (!o.Text) o.Color = true;\n         }\n\n         // here we deciding how histogram will look like and how will be shown\n         // painter.decodeOptions(opt);\n\n         painter._show_empty_bins = false;\n\n         painter.scanContent();\n\n         return painter.callDrawFunc();\n      });\n   }\n\n   /** @summary draw RH2 object */\n   static draw(dom, obj, opt) {\n      // create painter and add it to canvas\n      return RH2Painter._draw(new RH2Painter(dom, obj), opt);\n   }\n\n} //  class RH2Painter\n\n\nexport { RH2Painter };\n","import { settings, gStyle } from '../core.mjs';\nimport { RH2Painter as RH2Painter2D } from '../hist2d/RH2Painter.mjs';\nimport { RAxisPainter } from '../gpad/RAxisPainter.mjs';\nimport { assignFrame3DMethods, drawBinsLego, drawBinsError3D, drawBinsContour3D, drawBinsSurf3D } from './hist3d.mjs';\n\nclass RH2Painter extends RH2Painter2D {\n\n   /** Draw histogram bins in 3D, using provided draw options */\n   draw3DBins() {\n\n      if (!this.draw_content) return;\n\n      if (this.options.Surf)\n         return drawBinsSurf3D(this, true);\n\n      if (this.options.Error)\n         return drawBinsError3D(this, true);\n\n      if (this.options.Contour)\n         return drawBinsContour3D(this, true, true);\n\n      drawBinsLego(this, true);\n      this.updatePaletteDraw();\n   }\n\n   draw3D(reason) {\n\n      this.mode3d = true;\n\n      let main = this.getFramePainter(), // who makes axis drawing\n          is_main = this.isMainPainter(), // is main histogram\n          pr = Promise.resolve(this);\n\n      if (reason == \"resize\") {\n         if (is_main && main.resize3D()) main.render3D();\n\n         return pr;\n      }\n\n      let zmult = 1 + 2*gStyle.fHistTopMargin;\n\n      this.zmin = main.logz ? this.gminposbin * 0.3 : this.gminbin;\n      this.zmax = this.gmaxbin;\n      if (this.options.minimum !== -1111) this.zmin = this.options.minimum;\n      if (this.options.maximum !== -1111) { this.zmax = this.options.maximum; zmult = 1; }\n      if (main.logz && (this.zmin<=0)) this.zmin = this.zmax * 1e-5;\n\n      this.deleteAttr();\n\n      if (is_main) {\n         assignFrame3DMethods(main);\n         pr = main.create3DScene(this.options.Render3D).then(() => {\n            main.setAxesRanges(this.getAxis(\"x\"), this.xmin, this.xmax, this.getAxis(\"y\"), this.ymin, this.ymax, null, this.zmin, this.zmax);\n            main.set3DOptions(this.options);\n            main.drawXYZ(main.toplevel, RAxisPainter, { zmult, zoom: settings.Zooming, ndim: 2, draw: true, v7: true });\n         });\n      }\n\n      if (!main.mode3d)\n         return pr;\n\n      return pr.then(() => this.drawingBins(reason)).then(() => {\n         // called when bins received from server, must be reentrant\n         let main = this.getFramePainter();\n\n         this.draw3DBins();\n         main.render3D();\n         main.addKeysHandler();\n\n         return this;\n      });\n   }\n\n      /** @summary draw RH2 object */\n   static draw(dom, obj, opt) {\n      // create painter and add it to canvas\n      return RH2Painter._draw(new RH2Painter(dom, obj), opt);\n   }\n\n} // class RH2Painter\n\nexport { RH2Painter };\n"],"x_google_ignoreList":[0,1]}