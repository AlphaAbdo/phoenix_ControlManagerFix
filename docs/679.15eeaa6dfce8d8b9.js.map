{"version":3,"file":"679.15eeaa6dfce8d8b9.js","mappings":"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","names":["kNotEditable","BIT","clTGraphErrors","clTGraphAsymmErrors","clTGraphBentErrors","clTGraphMultiErrors","TGraphPainter","ObjectPainter","constructor","dom","graph","super","this","axes_draw","bins","xmin","ymin","xmax","ymax","wheel_zoomy","is_bent","_typename","has_errors","match","getGraph","getObject","getHistogram","fHistogram","setHistogram","histo","obj","redraw","_this","_asyncToGenerator","promise","Promise","resolve","$redraw_hist","hist_painter","getMainPainter","isSecondary","then","drawGraph","res","_funcHandler","drawNext","cleanup","interactive_bin","get_gme","decodeOptions","opt","first_time","isStr","indexOf","slice","is_gme","has_main","blocks_gme","options","decodeBlock","d","Object","assign","Line","Curve","Rect","Mark","Bar","OutRange","EF","Fill","MainError","Ends","ScaleErrX","check","partAsFloat","Errors","Axis","NoOpt","PadStats","PadPalette","original","second_x","second_y","individual_styles","split","shift","DrawOptions","hopt","PadDrawOptions","forEach","name","part","empty","pos3d","partAsInt","_pfc","_plc","_pmc","blocks","skip_errors_x0","skip_errors_y0","undefined","length","fMarkerStyle","matchObjectType","len","fEX","m","k","Math","max","fEY","_cutg","clTCutG","_cutg_lastsame","fNpoints","fX","fY","pad","getPadPainter","getRootPad","fPrimitives","arr","bl","subres","push","extractGmeErrors","nblock","gr","bin","eylow","fEyL","indx","eyhigh","fEyH","createBins","kind","npoints","Array","p","x","y","exlow","exhigh","fExL","fExH","fEXlow","fEXhigh","fEYlow","fEYhigh","min","getHistRangeMargin","createHistogram","set_x","set_y","margin","dx","dy","uxmin","uxmax","minimum","maximum","_not_adjust_hrange","pad_logx","getPadLog","minimum0","maximum0","fMaximum","kNoZoom","fMinimum","_is_scatter","clTH2I","clTH1I","fName","fBits","kNoStats","_own_histogram","setHistogramTitle","fTitle","fXaxis","fLabels","fXmin","fXmax","fYaxis","$ymin_nz","unzoomUserRange","dox","doy","extractAxesProperties","canOptimize","settings","OptimizeDraw","optimizeBins","maxpnt","filter_func","selbins","isFunc","n","step","floor","optbins","needDrawFunc","func","clTPaveStats","TestBit","clTF1","clTF2","getTooltips","lines","funcs","get_main","getGrFuncs","gme","getObjectHint","axisAsText","x_handle","kAxisNormal","ny","fNYErrors","y_handle","pmain","getFramePainter","grx","gry","pp","rect","getPadRect","width","height","pad_layer","create","clTPad","pw","ph","fX1NDC","fX2NDC","fY1NDC","fY2NDC","getFrameWidth","getFrameHeight","value","fLogx","log10","fUxmin","fX1","fX2","fLogv","fLogy","fUymin","fY1","fY2","revertAxis","v","appendExclusion","is_curve","path","drawbins","excl_width","extrabins","dlen","sqrt","dgrx","dgry","path2","buildSvgCurve","cmd","line","draw_g","append","attr","call","fillatt","style","drawBins","w","h","lineatt","main_block","line_events_handling","isBatchMode","excl_side","path1","qubic","bins2","area","colorindx","getColor","draw_kind","close_symbol","calc","elem","curvebins","nodes","pnt","i","grx1","round","gry1","grx0","grx2","gry0","gry2","grdx0","fEXlowd","grdx2","fEXhighd","grdy0","fEYlowd","grdy2","fEYhighd","selectAll","data","enter","makeTranslate","gStyle","fBarWidth","yy0","usefill","fp","fpcol","getFillColor","createAttFill","color","kBlack","kWhite","pattern","std","bar","dw","abs","filter","error_size","lw","fEndErrorSize","bb","vv","hh","vleft","vright","htop","hbottom","mainLine","fMarkerSize","visible","Tooltip","error","createAttMarker","marker_size","markeratt","getFullSize","resetPos","want_tooltip","fill","hsz","maxnummarker","getMarkerLength","hints_marker","appendQQ","xqmin","scale_xmin","fXq1","xqmax","scale_xmax","fXq2","yqmin","scale_ymin","fYq1","yqmax","scale_ymax","fYq2","makeLine","x1","y1","x2","y2","yxmin","yxmax","latt1","createAttLine","latt2","drawBins3D","console","log","createGraphDrawAttributes","only_check_auto","o","getAutoColor","icolor","$num_graphs","_auto_exec","fFillColor","fLineColor","fMarkerColor","deleteAttr","can_excl","createG","used","fAttLine","fAttFill","sub_g","addMoveHandler","testEditable","assignContextMenu","extractTooltip","extractTooltipForPath","esz","isbar1","msize","findbin","best_dist2","best","each","d3_select","datum","dist2","nproc","marker","matchy","exact","title","color1","d3bin","user_info","cont","color2","menu","menu_dist","binindx","showTooltip","hint","ttrect","selectChild","remove","usepath","showTooltipForPath","addHighlightStyle","changed","property","processTooltipEvent","disabled","findBestBin","islines","dist","bestindx","bestbin","bestdist","radius","IsInside","bin0","posy","linex","liney","linedist","closeline","arg","InvertBit","ismark","ttbin","moveEnabled","moveStart","pos_dx","pos_dy","move_funcs","move_binindx","move_bin","move_x0","move_y0","moveDrag","moveEnd","not_changed","last","exec","changeBin","$redraw_pad","redrawPad","submitCanvExec","fillWebObjectOptions","fcust","fillContextMenuItems","snapid","addchk","addRedrawMenu","getPrimary","executeMenuCommand","method","args","canp","getCanvPainter","_readonly","getLastEventPos","userx","usery","toFixed","$execid","_updateMembers","fFillStyle","fLineStyle","fLineWidth","fFunctions","updateObject","new_funcs","FunctionsHandler","canZoomInside","axis","clickButton","funcname","zoom","findFunc","find","findStat","createStat","stats","normal_canvas","create_stats","st","fOptStat","fOptFit","fBorderSize","fStatX","fStatW","fStatY","fStatH","fStatColor","fStatStyle","fTextAngle","fTextSize","fStatFontSize","fTextAlign","fTextColor","fStatTextColor","fTextFont","fStatFont","AddText","Add","fillStatistic","stat","_dostat","dofit","clearPave","fillFunctionStat","drawAxisHisto","_this2","TH1Painter","draw","getDrawDom","_drawGraph","painter","DragGraphs","setSecondaryId","addToPadPrimitives"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist2d/TGraphPainter.mjs"],"sourcesContent":["import { gStyle, BIT, settings, create, createHistogram, setHistogramTitle, isFunc, isStr,\n         clTPaveStats, clTCutG, clTH1I, clTH2I, clTF1, clTF2, clTPad, kNoZoom, kNoStats } from '../core.mjs';\nimport { select as d3_select } from '../d3.mjs';\nimport { DrawOptions, buildSvgCurve, makeTranslate, addHighlightStyle } from '../base/BasePainter.mjs';\nimport { ObjectPainter, kAxisNormal } from '../base/ObjectPainter.mjs';\nimport { FunctionsHandler } from './THistPainter.mjs';\nimport { TH1Painter, PadDrawOptions } from './TH1Painter.mjs';\nimport { kBlack, kWhite } from '../base/colors.mjs';\nimport { addMoveHandler } from '../gui/utils.mjs';\nimport { assignContextMenu } from '../gui/menu.mjs';\n\n\nconst kNotEditable = BIT(18),   // bit set if graph is non editable\n      clTGraphErrors = 'TGraphErrors',\n      clTGraphAsymmErrors = 'TGraphAsymmErrors',\n      clTGraphBentErrors = 'TGraphBentErrors',\n      clTGraphMultiErrors = 'TGraphMultiErrors';\n\n/**\n * @summary Painter for TGraph object.\n *\n * @private\n */\n\n\nclass TGraphPainter extends ObjectPainter {\n\n   constructor(dom, graph) {\n      super(dom, graph);\n      this.axes_draw = false; // indicate if graph histogram was drawn for axes\n      this.bins = null;\n      this.xmin = this.ymin = this.xmax = this.ymax = 0;\n      this.wheel_zoomy = true;\n      this.is_bent = (graph._typename === clTGraphBentErrors);\n      this.has_errors = (graph._typename === clTGraphErrors) ||\n                        (graph._typename === clTGraphMultiErrors) ||\n                        (graph._typename === clTGraphAsymmErrors) ||\n                         this.is_bent || graph._typename.match(/^RooHist/);\n   }\n\n   /** @summary Return drawn graph object */\n   getGraph() { return this.getObject(); }\n\n   /** @summary Return histogram object used for axis drawings */\n   getHistogram() { return this.getObject()?.fHistogram; }\n\n   /** @summary Set histogram object to graph */\n   setHistogram(histo) {\n      const obj = this.getObject();\n      if (obj) obj.fHistogram = histo;\n   }\n\n   /** @summary Redraw graph\n     * @desc may redraw histogram which was used to draw axes\n     * @return {Promise} for ready */\n   async redraw() {\n      let promise = Promise.resolve(true);\n\n      if (this.$redraw_hist) {\n         delete this.$redraw_hist;\n         const hist_painter = this.getMainPainter();\n         if (hist_painter?.isSecondary(this) && this.axes_draw)\n            promise = hist_painter.redraw();\n      }\n\n      return promise.then(() => this.drawGraph()).then(() => {\n         const res = this._funcHandler?.drawNext(0) ?? this;\n         delete this._funcHandler;\n         return res;\n      });\n   }\n\n   /** @summary Cleanup graph painter */\n   cleanup() {\n      delete this.interactive_bin; // break mouse handling\n      delete this.bins;\n      super.cleanup();\n   }\n\n   /** @summary Returns object if this drawing TGraphMultiErrors object */\n   get_gme() {\n      const graph = this.getGraph();\n      return graph?._typename === clTGraphMultiErrors ? graph : null;\n   }\n\n   /** @summary Decode options */\n   decodeOptions(opt, first_time) {\n      if (isStr(opt) && (opt.indexOf('same ') === 0))\n         opt = opt.slice(5);\n\n      const graph = this.getGraph(),\n          is_gme = !!this.get_gme(),\n          has_main = first_time ? !!this.getMainPainter() : !this.axes_draw;\n      let blocks_gme = [];\n\n      if (!this.options) this.options = {};\n\n      // decode main draw options for the graph\n      const decodeBlock = (d, res) => {\n         Object.assign(res, { Line: 0, Curve: 0, Rect: 0, Mark: 0, Bar: 0, OutRange: 0, EF: 0, Fill: 0, MainError: 1, Ends: 1, ScaleErrX: 1 });\n\n         if (is_gme && d.check('S=', true)) res.ScaleErrX = d.partAsFloat();\n\n         if (d.check('L')) res.Line = 1;\n         if (d.check('F')) res.Fill = 1;\n         if (d.check('CC')) res.Curve = 2; // draw all points without reduction\n         if (d.check('C')) res.Curve = 1;\n         if (d.check('*')) res.Mark = 103;\n         if (d.check('P0')) res.Mark = 104;\n         if (d.check('P')) res.Mark = 1;\n         if (d.check('B')) { res.Bar = 1; res.Errors = 0; }\n         if (d.check('Z')) { res.Errors = 1; res.Ends = 0; }\n         if (d.check('||')) { res.Errors = 1; res.MainError = 0; res.Ends = 1; }\n         if (d.check('[]')) { res.Errors = 1; res.MainError = 0; res.Ends = 2; }\n         if (d.check('|>')) { res.Errors = 1; res.Ends = 3; }\n         if (d.check('>')) { res.Errors = 1; res.Ends = 4; }\n         if (d.check('0')) { res.Mark = 1; res.Errors = 1; res.OutRange = 1; }\n         if (d.check('1')) if (res.Bar === 1) res.Bar = 2;\n         if (d.check('2')) { res.Rect = 1; res.Errors = 0; }\n         if (d.check('3')) { res.EF = 1; res.Errors = 0; }\n         if (d.check('4')) { res.EF = 2; res.Errors = 0; }\n         if (d.check('5')) { res.Rect = 2; res.Errors = 0; }\n         if (d.check('X')) res.Errors = 0;\n      };\n\n      Object.assign(this.options, { Axis: '', NoOpt: 0, PadStats: false, PadPalette: false, original: opt, second_x: false, second_y: false, individual_styles: false });\n\n      if (is_gme && opt) {\n         if (opt.indexOf(';') > 0) {\n            blocks_gme = opt.split(';');\n            opt = blocks_gme.shift();\n         } else if (opt.indexOf('_') > 0) {\n            blocks_gme = opt.split('_');\n            opt = blocks_gme.shift();\n         }\n      }\n\n      const res = this.options;\n      let d = new DrawOptions(opt), hopt = '';\n\n      PadDrawOptions.forEach(name => { if (d.check(name)) hopt += ';' + name; });\n      if (d.check('XAXIS_', true)) hopt += ';XAXIS_' + d.part;\n      if (d.check('YAXIS_', true)) hopt += ';YAXIS_' + d.part;\n\n      if (d.empty()) {\n         res.original = has_main ? 'lp' : 'alp';\n         d = new DrawOptions(res.original);\n      }\n\n      if (d.check('NOOPT')) res.NoOpt = 1;\n\n      if (d.check('POS3D_', true)) res.pos3d = d.partAsInt() - 0.5;\n\n      if (d.check('PFC') && !res._pfc)\n         res._pfc = 2;\n      if (d.check('PLC') && !res._plc)\n         res._plc = 2;\n      if (d.check('PMC') && !res._pmc)\n         res._pmc = 2;\n\n      if (d.check('A')) res.Axis = d.check('I') ? 'A;' : ' '; // I means invisible axis\n      if (d.check('X+')) { res.Axis += 'X+'; res.second_x = has_main; }\n      if (d.check('Y+')) { res.Axis += 'Y+'; res.second_y = has_main; }\n      if (d.check('RX')) res.Axis += 'RX';\n      if (d.check('RY')) res.Axis += 'RY';\n\n      if (is_gme) {\n         res.blocks = [];\n         res.skip_errors_x0 = res.skip_errors_y0 = false;\n         if (d.check('X0')) res.skip_errors_x0 = true;\n         if (d.check('Y0')) res.skip_errors_y0 = true;\n      }\n\n      decodeBlock(d, res);\n\n      if (is_gme)\n         if (d.check('S')) res.individual_styles = true;\n\n\n      // if (d.check('E')) res.Errors = 1; // E option only defined for TGraphPolar\n\n      if (res.Errors === undefined)\n         res.Errors = this.has_errors && (!is_gme || !blocks_gme.length) ? 1 : 0;\n\n      // special case - one could use svg:path to draw many pixels (\n      if ((res.Mark === 1) && (graph.fMarkerStyle === 1)) res.Mark = 101;\n\n      // if no drawing option is selected and if opt === '' nothing is done.\n      if (res.Line + res.Fill + res.Curve + res.Mark + res.Bar + res.EF + res.Rect + res.Errors === 0)\n         if (d.empty()) res.Line = 1;\n\n\n      if (this.matchObjectType(clTGraphErrors)) {\n         const len = graph.fEX.length;\n         let m = 0;\n         for (let k = 0; k < len; ++k)\n            m = Math.max(m, graph.fEX[k], graph.fEY[k]);\n         if (m < 1e-100)\n            res.Errors = 0;\n      }\n\n      this._cutg = this.matchObjectType(clTCutG);\n      this._cutg_lastsame = this._cutg && (graph.fNpoints > 3) &&\n                            (graph.fX[0] === graph.fX[graph.fNpoints-1]) && (graph.fY[0] === graph.fY[graph.fNpoints-1]);\n\n      if (!res.Axis) {\n         // check if axis should be drawn\n         // either graph drawn directly or\n         // graph is first object in list of primitives\n         const pad = this.getPadPainter()?.getRootPad(true);\n         if (!pad || (pad?.fPrimitives?.arr[0] === this.getObject())) res.Axis = ' ';\n      }\n\n      res.Axis += hopt;\n\n      for (let bl = 0; bl < blocks_gme.length; ++bl) {\n         const subd = new DrawOptions(blocks_gme[bl]), subres = {};\n         decodeBlock(subd, subres);\n         subres.skip_errors_x0 = res.skip_errors_x0;\n         subres.skip_errors_y0 = res.skip_errors_y0;\n         res.blocks.push(subres);\n      }\n   }\n\n   /** @summary Extract errors for TGraphMultiErrors */\n   extractGmeErrors(nblock) {\n      if (!this.bins) return;\n      const gr = this.getGraph();\n      this.bins.forEach(bin => {\n         bin.eylow = gr.fEyL[nblock][bin.indx];\n         bin.eyhigh = gr.fEyH[nblock][bin.indx];\n      });\n   }\n\n   /** @summary Create bins for TF1 drawing */\n   createBins() {\n      const gr = this.getGraph();\n      if (!gr) return;\n\n      let kind = 0, npoints = gr.fNpoints;\n      if (this._cutg && this._cutg_lastsame)\n         npoints--;\n\n      if (gr._typename === clTGraphErrors)\n         kind = 1;\n      else if (gr._typename === clTGraphMultiErrors)\n         kind = 2;\n      else if (gr._typename === clTGraphAsymmErrors || gr._typename === clTGraphBentErrors || gr._typename.match(/^RooHist/))\n         kind = 3;\n\n      this.bins = new Array(npoints);\n\n      for (let p = 0; p < npoints; ++p) {\n         const bin = this.bins[p] = { x: gr.fX[p], y: gr.fY[p], indx: p };\n         switch (kind) {\n            case 1:\n               bin.exlow = bin.exhigh = gr.fEX[p];\n               bin.eylow = bin.eyhigh = gr.fEY[p];\n               break;\n            case 2:\n               bin.exlow = gr.fExL[p];\n               bin.exhigh = gr.fExH[p];\n               bin.eylow = gr.fEyL[0][p];\n               bin.eyhigh = gr.fEyH[0][p];\n               break;\n            case 3:\n               bin.exlow = gr.fEXlow[p];\n               bin.exhigh = gr.fEXhigh[p];\n               bin.eylow = gr.fEYlow[p];\n               bin.eyhigh = gr.fEYhigh[p];\n               break;\n         }\n\n         if (p === 0) {\n            this.xmin = this.xmax = bin.x;\n            this.ymin = this.ymax = bin.y;\n         }\n\n         if (kind > 0) {\n            this.xmin = Math.min(this.xmin, bin.x - bin.exlow, bin.x + bin.exhigh);\n            this.xmax = Math.max(this.xmax, bin.x - bin.exlow, bin.x + bin.exhigh);\n            this.ymin = Math.min(this.ymin, bin.y - bin.eylow, bin.y + bin.eyhigh);\n            this.ymax = Math.max(this.ymax, bin.y - bin.eylow, bin.y + bin.eyhigh);\n         } else {\n            this.xmin = Math.min(this.xmin, bin.x);\n            this.xmax = Math.max(this.xmax, bin.x);\n            this.ymin = Math.min(this.ymin, bin.y);\n            this.ymax = Math.max(this.ymax, bin.y);\n         }\n      }\n   }\n\n   /** @summary Return margins for histogram ranges */\n   getHistRangeMargin() { return 0.1; }\n\n   /** @summary Create histogram for graph\n     * @desc graph bins should be created when calling this function\n     * @param {boolean} [set_x] - set X axis range\n     * @param {boolean} [set_y] - set Y axis range */\n   createHistogram(set_x, set_y) {\n      if (!set_x && !set_y)\n         set_x = set_y = true;\n\n      const graph = this.getGraph(),\n            xmin = this.xmin,\n            margin = this.getHistRangeMargin();\n      let xmax = this.xmax, ymin = this.ymin, ymax = this.ymax;\n\n      if (xmin >= xmax) xmax = xmin + 1;\n      if (ymin >= ymax) ymax = ymin + 1;\n      const dx = (xmax - xmin) * margin, dy = (ymax - ymin) * margin;\n      let uxmin = xmin - dx, uxmax = xmax + dx,\n          minimum = ymin - dy, maximum = ymax + dy;\n\n      if ((ymin > 0) && (minimum <= 0))\n         minimum = (1 - margin) * ymin;\n      if ((ymax < 0) && (maximum >= 0))\n         maximum = (1 - margin) * ymax;\n\n      if (!this._not_adjust_hrange) {\n         const pad_logx = this.getPadPainter()?.getPadLog('x');\n\n         if ((uxmin < 0) && (xmin >= 0))\n            uxmin = pad_logx ? xmin * (1 - margin) : 0;\n         if ((uxmax > 0) && (xmax <= 0))\n            uxmax = pad_logx ? (1 + margin) * xmax : 0;\n      }\n\n      const minimum0 = minimum, maximum0 = maximum;\n      let histo = this.getHistogram();\n\n      if (!histo) {\n         histo = this._is_scatter ? createHistogram(clTH2I, 30, 30) : createHistogram(clTH1I, 100);\n         histo.fName = graph.fName + '_h';\n         histo.fBits |= kNoStats;\n         this._own_histogram = true;\n         this.setHistogram(histo);\n      } else if ((histo.fMaximum !== kNoZoom) && (histo.fMinimum !== kNoZoom)) {\n         minimum = histo.fMinimum;\n         maximum = histo.fMaximum;\n      }\n\n      if (graph.fMinimum !== kNoZoom) minimum = ymin = graph.fMinimum;\n      if (graph.fMaximum !== kNoZoom) maximum = graph.fMaximum;\n      if ((minimum < 0) && (ymin >= 0))\n         minimum = (1 - margin)*ymin;\n      if ((ymax < 0) && (maximum >= 0))\n         maximum = (1 - margin) * ymax;\n\n      setHistogramTitle(histo, this.getObject().fTitle);\n\n      if (set_x && !histo.fXaxis.fLabels) {\n         histo.fXaxis.fXmin = uxmin;\n         histo.fXaxis.fXmax = uxmax;\n      }\n\n      if (set_y && !histo.fYaxis.fLabels) {\n         histo.fYaxis.fXmin = Math.min(minimum0, minimum);\n         histo.fYaxis.fXmax = Math.max(maximum0, maximum);\n         if (!this._is_scatter) {\n            histo.fMinimum = minimum;\n            histo.fMaximum = maximum;\n         }\n      }\n\n      histo.$ymin_nz = ymin > 0 ? ymin : undefined;\n\n      return histo;\n   }\n\n   /** @summary Check if user range can be un-zommed\n     * @desc Used when graph points covers larger range than provided histogram */\n   unzoomUserRange(dox, doy /* , doz */) {\n      const graph = this.getGraph();\n      if (this._own_histogram || !graph) return false;\n\n      const histo = this.getHistogram();\n\n      dox = dox && histo && ((histo.fXaxis.fXmin > this.xmin) || (histo.fXaxis.fXmax < this.xmax));\n      doy = doy && histo && ((histo.fYaxis.fXmin > this.ymin) || (histo.fYaxis.fXmax < this.ymax));\n      if (!dox && !doy) return false;\n\n      this.createHistogram(dox, doy);\n      this.getMainPainter()?.extractAxesProperties(1); // just to enforce ranges extraction\n\n      return true;\n   }\n\n   /** @summary Returns true if graph drawing can be optimize */\n   canOptimize() {\n      return (settings.OptimizeDraw > 0) && !this.options.NoOpt;\n   }\n\n   /** @summary Returns optimized bins - if optimization enabled */\n   optimizeBins(maxpnt, filter_func) {\n      if ((this.bins.length < 30) && !filter_func)\n         return this.bins;\n\n      let selbins = null;\n      if (isFunc(filter_func)) {\n         for (let n = 0; n < this.bins.length; ++n) {\n            if (filter_func(this.bins[n], n)) {\n               if (!selbins) selbins = (n === 0) ? [] : this.bins.slice(0, n);\n            } else\n               if (selbins) selbins.push(this.bins[n]);\n         }\n      }\n      if (!selbins) selbins = this.bins;\n\n      if (!maxpnt) maxpnt = 500000;\n\n      if ((selbins.length < maxpnt) || !this.canOptimize()) return selbins;\n      let step = Math.floor(selbins.length / maxpnt);\n      if (step < 2) step = 2;\n      const optbins = [];\n      for (let n = 0; n < selbins.length; n+=step)\n         optbins.push(selbins[n]);\n\n      return optbins;\n   }\n\n   /** @summary Check if such function should be drawn directly */\n   needDrawFunc(graph, func) {\n      if (func._typename === clTPaveStats)\n          return (func.fName !== 'stats') || !graph.TestBit(kNoStats); // kNoStats is same for graph and histogram\n\n       if ((func._typename === clTF1) || (func._typename === clTF2))\n          return !func.TestBit(BIT(9)); // TF1::kNotDraw\n\n       return true;\n   }\n\n   /** @summary Returns tooltip for specified bin */\n   getTooltips(d) {\n      const pmain = this.get_main(), lines = [],\n          funcs = pmain.getGrFuncs(this.options.second_x, this.options.second_y),\n          gme = this.get_gme();\n\n      lines.push(this.getObjectHint());\n\n      if (d && funcs) {\n         if (d.indx !== undefined)\n            lines.push('p = ' + d.indx);\n         lines.push('x = ' + funcs.axisAsText('x', d.x), 'y = ' + funcs.axisAsText('y', d.y));\n         if (gme)\n            lines.push('error x = -' + funcs.axisAsText('x', gme.fExL[d.indx]) + '/+' + funcs.axisAsText('x', gme.fExH[d.indx]));\n         else if (this.options.Errors && (funcs.x_handle.kind === kAxisNormal) && (d.exlow || d.exhigh))\n            lines.push('error x = -' + funcs.axisAsText('x', d.exlow) + '/+' + funcs.axisAsText('x', d.exhigh));\n\n         if (gme) {\n            for (let ny = 0; ny < gme.fNYErrors; ++ny)\n               lines.push(`error y${ny} = -${funcs.axisAsText('y', gme.fEyL[ny][d.indx])}/+${funcs.axisAsText('y', gme.fEyH[ny][d.indx])}`);\n         } else if ((this.options.Errors || (this.options.EF > 0)) && (funcs.y_handle.kind === kAxisNormal) && (d.eylow || d.eyhigh))\n            lines.push('error y = -' + funcs.axisAsText('y', d.eylow) + '/+' + funcs.axisAsText('y', d.eyhigh));\n      }\n      return lines;\n   }\n\n   /** @summary Provide frame painter for graph\n     * @desc If not exists, emulate its behavior */\n   get_main() {\n      let pmain = this.getFramePainter();\n\n      if (pmain?.grx && pmain?.gry) return pmain;\n\n      // FIXME: check if needed, can be removed easily\n      const pp = this.getPadPainter(),\n            rect = pp?.getPadRect() || { width: 800, height: 600 };\n\n      pmain = {\n          pad_layer: true,\n          pad: pp?.getRootPad(true) ?? create(clTPad),\n          pw: rect.width,\n          ph: rect.height,\n          fX1NDC: 0.1, fX2NDC: 0.9, fY1NDC: 0.1, fY2NDC: 0.9,\n          getFrameWidth() { return this.pw; },\n          getFrameHeight() { return this.ph; },\n          grx(value) {\n             if (this.pad.fLogx)\n                value = (value > 0) ? Math.log10(value) : this.pad.fUxmin;\n             else\n                value = (value - this.pad.fX1) / (this.pad.fX2 - this.pad.fX1);\n             return value * this.pw;\n          },\n          gry(value) {\n             if (this.pad.fLogv ?? this.pad.fLogy)\n                value = (value > 0) ? Math.log10(value) : this.pad.fUymin;\n             else\n                value = (value - this.pad.fY1) / (this.pad.fY2 - this.pad.fY1);\n             return (1 - value) * this.ph;\n          },\n          revertAxis(name, v) {\n            if (name === 'x')\n               return v / this.pw * (this.pad.fX2 - this.pad.fX1) + this.pad.fX1;\n            if (name === 'y')\n               return (1 - v / this.ph) * (this.pad.fY2 - this.pad.fY1) + this.pad.fY1;\n            return v;\n          },\n          getGrFuncs() { return this; }\n      };\n\n      return pmain.pad ? pmain : null;\n   }\n\n   /** @summary append exclusion area to created path */\n   appendExclusion(is_curve, path, drawbins, excl_width) {\n      const extrabins = [];\n      for (let n = drawbins.length-1; n >= 0; --n) {\n         const bin = drawbins[n],\n             dlen = Math.sqrt(bin.dgrx**2 + bin.dgry**2);\n         if (dlen > 1e-10) {\n            // shift point\n            bin.grx += excl_width*bin.dgry/dlen;\n            bin.gry -= excl_width*bin.dgrx/dlen;\n         }\n         extrabins.push(bin);\n      }\n\n      const path2 = buildSvgCurve(extrabins, { cmd: 'L', line: !is_curve });\n\n      this.draw_g.append('svg:path')\n                 .attr('d', path + path2 + 'Z')\n                 .call(this.fillatt.func)\n                 .style('opacity', 0.75);\n   }\n\n   /** @summary draw TGraph bins with specified options\n     * @desc Can be called several times */\n   drawBins(funcs, options, draw_g, w, h, lineatt, fillatt, main_block) {\n      const graph = this.getGraph();\n      if (!graph?.fNpoints) return;\n\n      let excl_width = 0, drawbins = null;\n      // if markers or errors drawn - no need handle events for line drawing\n      // this improves interactivity like zooming around graph points\n      const line_events_handling = !this.isBatchMode() && (options.Line || options.Errors) ? 'none' : null;\n\n      if (main_block && lineatt.excl_side) {\n         excl_width = lineatt.excl_width;\n         if ((lineatt.width > 0) && !options.Line && !options.Curve) options.Line = 1;\n      }\n\n      if (options.EF) {\n         drawbins = this.optimizeBins((options.EF > 1) ? 20000 : 0);\n\n         // build lower part\n         for (let n = 0; n < drawbins.length; ++n) {\n            const bin = drawbins[n];\n            bin.grx = funcs.grx(bin.x);\n            bin.gry = funcs.gry(bin.y - bin.eylow);\n         }\n\n         const path1 = buildSvgCurve(drawbins, { line: options.EF < 2, qubic: true }),\n             bins2 = [];\n\n         for (let n = drawbins.length-1; n >= 0; --n) {\n            const bin = drawbins[n];\n            bin.gry = funcs.gry(bin.y + bin.eyhigh);\n            bins2.push(bin);\n         }\n\n         // build upper part (in reverse direction)\n         const path2 = buildSvgCurve(bins2, { line: options.EF < 2, cmd: 'L', qubic: true }),\n            area = draw_g.append('svg:path')\n               .attr('d', path1 + path2 + 'Z')\n               .call(fillatt.func);\n\n         // Let behaves as ROOT - see JIRA ROOT-8131\n         if (fillatt.empty() && fillatt.colorindx)\n            area.style('stroke', this.getColor(fillatt.colorindx));\n         if (main_block)\n            this.draw_kind = 'lines';\n      }\n\n      if (options.Line || options.Fill) {\n         let close_symbol = '';\n         if (this._cutg) {\n            close_symbol = 'Z';\n            if (!options.original) options.Fill = 1;\n         }\n\n         if (options.Fill) {\n            close_symbol = 'Z'; // always close area if we want to fill it\n            excl_width = 0;\n         }\n\n         if (!drawbins) drawbins = this.optimizeBins(0);\n\n         for (let n = 0; n < drawbins.length; ++n) {\n            const bin = drawbins[n];\n            bin.grx = funcs.grx(bin.x);\n            bin.gry = funcs.gry(bin.y);\n         }\n\n         const path = buildSvgCurve(drawbins, { line: true, calc: excl_width });\n\n         if (excl_width)\n             this.appendExclusion(false, path, drawbins, excl_width);\n\n         const elem = draw_g.append('svg:path')\n                            .attr('d', path + close_symbol)\n                            .style('pointer-events', line_events_handling);\n         if (options.Line)\n            elem.call(lineatt.func);\n\n         if (options.Fill)\n            elem.call(fillatt.func);\n         else\n            elem.style('fill', 'none');\n\n         if (main_block)\n            this.draw_kind = 'lines';\n      }\n\n      if (options.Curve) {\n         let curvebins = drawbins;\n         if ((this.draw_kind !== 'lines') || !curvebins || ((options.Curve === 1) && (curvebins.length > 20000))) {\n            curvebins = this.optimizeBins((options.Curve === 1) ? 20000 : 0);\n            for (let n = 0; n < curvebins.length; ++n) {\n               const bin = curvebins[n];\n               bin.grx = funcs.grx(bin.x);\n               bin.gry = funcs.gry(bin.y);\n            }\n         }\n\n         const path = buildSvgCurve(curvebins, { qubic: !excl_width });\n         if (excl_width)\n            this.appendExclusion(true, path, curvebins, excl_width);\n\n         draw_g.append('svg:path')\n               .attr('d', path)\n               .call(lineatt.func)\n               .style('fill', 'none')\n               .style('pointer-events', line_events_handling);\n         if (main_block)\n            this.draw_kind = 'lines'; // handled same way as lines\n      }\n\n      let nodes = null;\n\n      if (options.Errors || options.Rect || options.Bar) {\n         drawbins = this.optimizeBins(5000, (pnt, i) => {\n            const grx = funcs.grx(pnt.x);\n\n            // when drawing bars, take all points\n            if (!options.Bar && ((grx < 0) || (grx > w))) return true;\n\n            const gry = funcs.gry(pnt.y);\n\n            if (!options.Bar && !options.OutRange && ((gry < 0) || (gry > h))) return true;\n\n            pnt.grx1 = Math.round(grx);\n            pnt.gry1 = Math.round(gry);\n\n            if (this.has_errors) {\n               pnt.grx0 = Math.round(funcs.grx(pnt.x - options.ScaleErrX*pnt.exlow) - grx);\n               pnt.grx2 = Math.round(funcs.grx(pnt.x + options.ScaleErrX*pnt.exhigh) - grx);\n               pnt.gry0 = Math.round(funcs.gry(pnt.y - pnt.eylow) - gry);\n               pnt.gry2 = Math.round(funcs.gry(pnt.y + pnt.eyhigh) - gry);\n\n               if (this.is_bent) {\n                  pnt.grdx0 = Math.round(funcs.gry(pnt.y + graph.fEXlowd[i]) - gry);\n                  pnt.grdx2 = Math.round(funcs.gry(pnt.y + graph.fEXhighd[i]) - gry);\n                  pnt.grdy0 = Math.round(funcs.grx(pnt.x + graph.fEYlowd[i]) - grx);\n                  pnt.grdy2 = Math.round(funcs.grx(pnt.x + graph.fEYhighd[i]) - grx);\n               } else\n                  pnt.grdx0 = pnt.grdx2 = pnt.grdy0 = pnt.grdy2 = 0;\n            }\n\n            return false;\n         });\n\n         if (main_block)\n            this.draw_kind = 'nodes';\n\n         nodes = draw_g.selectAll('.grpoint')\n                       .data(drawbins)\n                       .enter()\n                       .append('svg:g')\n                       .attr('class', 'grpoint')\n                       .attr('transform', d => makeTranslate(d.grx1, d.gry1));\n      }\n\n      if (options.Bar) {\n         // calculate bar width\n\n         let xmin = 0, xmax = 0;\n         for (let i = 0; i < drawbins.length; ++i) {\n            if (i === 0)\n               xmin = xmax = drawbins[i].grx1;\n            else {\n               xmin = Math.min(xmin, drawbins[i].grx1);\n               xmax = Math.max(xmax, drawbins[i].grx1);\n            }\n         }\n\n         if (drawbins.length === 1)\n            drawbins[0].width = w/4; // pathologic case of single bin\n         else {\n            for (let i = 0; i < drawbins.length; ++i)\n               drawbins[i].width = (xmax - xmin) / drawbins.length * gStyle.fBarWidth;\n         }\n\n         const yy0 = Math.round(funcs.gry(0));\n         let usefill = fillatt;\n\n         if (main_block) {\n            const fp = this.getFramePainter(),\n                  fpcol = !fp?.fillatt?.empty() ? fp.fillatt.getFillColor() : -1;\n\n            if (fpcol === fillatt.getFillColor())\n               usefill = this.createAttFill({ color: fpcol === 'white' ? kBlack : kWhite, pattern: 1001, std: false });\n         }\n\n         nodes.append('svg:path')\n              .attr('d', d => {\n                 d.bar = true; // element drawn as bar\n                 const dx = d.width > 1 ? Math.round(-d.width/2) : 0,\n                       dw = d.width > 1 ? Math.round(d.width) : 1,\n                       dy = (options.Bar !== 1) ? 0 : ((d.gry1 > yy0) ? yy0-d.gry1 : 0),\n                       dh = (options.Bar !== 1) ? (h > d.gry1 ? h - d.gry1 : 0) : Math.abs(yy0 - d.gry1);\n                 return `M${dx},${dy}h${dw}v${dh}h${-dw}z`;\n              })\n            .call(usefill.func);\n      }\n\n      if (options.Rect) {\n         nodes.filter(d => (d.exlow > 0) && (d.exhigh > 0) && (d.eylow > 0) && (d.eyhigh > 0))\n           .append('svg:path')\n           .attr('d', d => {\n               d.rect = true;\n               return `M${d.grx0},${d.gry0}H${d.grx2}V${d.gry2}H${d.grx0}Z`;\n            })\n           .call(fillatt.func)\n           .call(options.Rect === 2 ? lineatt.func : () => {});\n      }\n\n      this.error_size = 0;\n\n      if (options.Errors) {\n         // to show end of error markers, use line width attribute\n         let lw = lineatt.width + gStyle.fEndErrorSize, bb = 0;\n         const vv = options.Ends ? `m0,${lw}v${-2*lw}` : '',\n               hh = options.Ends ? `m${lw},0h${-2*lw}` : '';\n         let vleft = vv, vright = vv, htop = hh, hbottom = hh;\n\n         const mainLine = (dx, dy) => {\n            if (!options.MainError) return `M${dx},${dy}`;\n            const res = 'M0,0';\n            if (dx) return res + (dy ? `L${dx},${dy}` : `H${dx}`);\n            return dy ? res + `V${dy}` : res;\n         };\n\n         switch (options.Ends) {\n            case 2:  // option []\n               bb = Math.max(lineatt.width+1, Math.round(lw*0.66));\n               vleft = `m${bb},${lw}h${-bb}v${-2*lw}h${bb}`;\n               vright = `m${-bb},${lw}h${bb}v${-2*lw}h${-bb}`;\n               htop = `m${-lw},${bb}v${-bb}h${2*lw}v${bb}`;\n               hbottom = `m${-lw},${-bb}v${bb}h${2*lw}v${-bb}`;\n               break;\n            case 3: // option |>\n               lw = Math.max(lw, Math.round(graph.fMarkerSize*8*0.66));\n               bb = Math.max(lineatt.width+1, Math.round(lw*0.66));\n               vleft = `l${bb},${lw}v${-2*lw}l${-bb},${lw}`;\n               vright = `l${-bb},${lw}v${-2*lw}l${bb},${lw}`;\n               htop = `l${-lw},${bb}h${2*lw}l${-lw},${-bb}`;\n               hbottom = `l${-lw},${-bb}h${2*lw}l${-lw},${bb}`;\n               break;\n            case 4: // option >\n               lw = Math.max(lw, Math.round(graph.fMarkerSize*8*0.66));\n               bb = Math.max(lineatt.width+1, Math.round(lw*0.66));\n               vleft = `l${bb},${lw}m0,${-2*lw}l${-bb},${lw}`;\n               vright = `l${-bb},${lw}m0,${-2*lw}l${bb},${lw}`;\n               htop = `l${-lw},${bb}m${2*lw},0l${-lw},${-bb}`;\n               hbottom = `l${-lw},${-bb}m${2*lw},0l${-lw},${bb}`;\n               break;\n         }\n\n         this.error_size = lw;\n\n         lw = Math.floor((lineatt.width-1)/2); // one should take into account half of end-cup line width\n\n         let visible = nodes.filter(d => (d.exlow > 0) || (d.exhigh > 0) || (d.eylow > 0) || (d.eyhigh > 0));\n         if (options.skip_errors_x0 || options.skip_errors_y0)\n            visible = visible.filter(d => ((d.x !== 0) || !options.skip_errors_x0) && ((d.y !== 0) || !options.skip_errors_y0));\n\n         if (!this.isBatchMode() && settings.Tooltip && main_block) {\n            visible.append('svg:path')\n                   .attr('d', d => `M${d.grx0},${d.gry0}h${d.grx2-d.grx0}v${d.gry2-d.gry0}h${d.grx0-d.grx2}z`)\n                   .style('fill', 'none')\n                   .style('pointer-events', 'visibleFill');\n         }\n\n         visible.append('svg:path')\n                .attr('d', d => {\n                   d.error = true;\n                   return ((d.exlow > 0) ? mainLine(d.grx0+lw, d.grdx0) + vleft : '') +\n                          ((d.exhigh > 0) ? mainLine(d.grx2-lw, d.grdx2) + vright : '') +\n                          ((d.eylow > 0) ? mainLine(d.grdy0, d.gry0-lw) + hbottom : '') +\n                          ((d.eyhigh > 0) ? mainLine(d.grdy2, d.gry2+lw) + htop : '');\n                })\n                .style('fill', 'none')\n                .call(lineatt.func);\n      }\n\n      if (options.Mark) {\n         // for tooltips use markers only if nodes were not created\n         this.createAttMarker({ attr: graph, style: options.Mark - 100 });\n\n         this.marker_size = this.markeratt.getFullSize();\n\n         this.markeratt.resetPos();\n\n         const want_tooltip = !this.isBatchMode() && settings.Tooltip && (!this.markeratt.fill || (this.marker_size < 7)) && !nodes && main_block,\n               hsz = Math.max(5, Math.round(this.marker_size*0.7)),\n               maxnummarker = 1000000 / (this.markeratt.getMarkerLength() + 7); // let produce SVG at maximum 1MB\n\n         let path = '', pnt, grx, gry,\n             hints_marker = '', step = 1;\n\n         if (!drawbins)\n            drawbins = this.optimizeBins(maxnummarker);\n         else if (this.canOptimize() && (drawbins.length > 1.5*maxnummarker))\n            step = Math.min(2, Math.round(drawbins.length/maxnummarker));\n\n         for (let n = 0; n < drawbins.length; n += step) {\n            pnt = drawbins[n];\n            grx = funcs.grx(pnt.x);\n            if ((grx > -this.marker_size) && (grx < w + this.marker_size)) {\n               gry = funcs.gry(pnt.y);\n               if ((gry > -this.marker_size) && (gry < h + this.marker_size)) {\n                  path += this.markeratt.create(grx, gry);\n                  if (want_tooltip) hints_marker += `M${grx-hsz},${gry-hsz}h${2*hsz}v${2*hsz}h${-2*hsz}z`;\n               }\n            }\n         }\n\n         if (path) {\n            draw_g.append('svg:path')\n                  .attr('d', path)\n                  .call(this.markeratt.func);\n            if ((nodes === null) && (this.draw_kind === 'none') && main_block)\n               this.draw_kind = (options.Mark === 101) ? 'path' : 'mark';\n         }\n         if (want_tooltip && hints_marker) {\n            draw_g.append('svg:path')\n                  .attr('d', hints_marker)\n                  .style('fill', 'none')\n                  .style('pointer-events', 'visibleFill');\n         }\n      }\n   }\n\n   /** @summary append TGraphQQ part */\n   appendQQ(funcs, graph) {\n      const xqmin = Math.max(funcs.scale_xmin, graph.fXq1),\n            xqmax = Math.min(funcs.scale_xmax, graph.fXq2),\n            yqmin = Math.max(funcs.scale_ymin, graph.fYq1),\n            yqmax = Math.min(funcs.scale_ymax, graph.fYq2),\n            makeLine = (x1, y1, x2, y2) => `M${funcs.grx(x1)},${funcs.gry(y1)}L${funcs.grx(x2)},${funcs.gry(y2)}`,\n            yxmin = (graph.fYq2 - graph.fYq1)*(funcs.scale_xmin-graph.fXq1)/(graph.fXq2-graph.fXq1) + graph.fYq1,\n            yxmax = (graph.fYq2-graph.fYq1)*(funcs.scale_xmax-graph.fXq1)/(graph.fXq2-graph.fXq1) + graph.fYq1;\n\n      let path2 = '';\n      if (yxmin < funcs.scale_ymin) {\n         const xymin = (graph.fXq2 - graph.fXq1)*(funcs.scale_ymin-graph.fYq1)/(graph.fYq2-graph.fYq1) + graph.fXq1;\n         path2 = makeLine(xymin, funcs.scale_ymin, xqmin, yqmin);\n      } else\n         path2 = makeLine(funcs.scale_xmin, yxmin, xqmin, yqmin);\n\n\n      if (yxmax > funcs.scale_ymax) {\n         const xymax = (graph.fXq2-graph.fXq1)*(funcs.scale_ymax-graph.fYq1)/(graph.fYq2-graph.fYq1) + graph.fXq1;\n         path2 += makeLine(xqmax, yqmax, xymax, funcs.scale_ymax);\n      } else\n         path2 += makeLine(xqmax, yqmax, funcs.scale_xmax, yxmax);\n\n\n      const latt1 = this.createAttLine({ style: 1, width: 1, color: kBlack, std: false }),\n            latt2 = this.createAttLine({ style: 2, width: 1, color: kBlack, std: false });\n\n      this.draw_g.append('path')\n                 .attr('d', makeLine(xqmin, yqmin, xqmax, yqmax))\n                 .call(latt1.func)\n                 .style('fill', 'none');\n\n      this.draw_g.append('path')\n                 .attr('d', path2)\n                 .call(latt2.func)\n                 .style('fill', 'none');\n   }\n\n   drawBins3D(/* fp, graph */) {\n      console.log('Load ./hist/TGraphPainter.mjs to draw graph in 3D');\n   }\n\n   /** @summary Create necessary histogram draw attributes */\n   createGraphDrawAttributes(only_check_auto) {\n      const graph = this.getGraph(), o = this.options;\n      if (o._pfc > 1 || o._plc > 1 || o._pmc > 1) {\n         const pp = this.getPadPainter();\n         if (isFunc(pp?.getAutoColor)) {\n            const icolor = pp.getAutoColor(graph.$num_graphs);\n            this._auto_exec = ''; // can be reused when sending option back to server\n            if (o._pfc > 1) { o._pfc = 1; graph.fFillColor = icolor; this._auto_exec += `SetFillColor(${icolor});;`; delete this.fillatt; }\n            if (o._plc > 1) { o._plc = 1; graph.fLineColor = icolor; this._auto_exec += `SetLineColor(${icolor});;`; delete this.lineatt; }\n            if (o._pmc > 1) { o._pmc = 1; graph.fMarkerColor = icolor; this._auto_exec += `SetMarkerColor(${icolor});;`; delete this.markeratt; }\n         }\n      }\n\n      if (only_check_auto)\n         this.deleteAttr();\n      else {\n         this.createAttLine({ attr: graph, can_excl: true });\n         this.createAttFill({ attr: graph });\n      }\n   }\n\n   /** @summary draw TGraph */\n   drawGraph() {\n      const pmain = this.get_main(),\n            graph = this.getGraph();\n      if (!pmain || !this.options) return;\n\n      // special mode for TMultiGraph 3d drawing\n      if (this.options.pos3d)\n         return this.drawBins3D(pmain, graph);\n\n      const is_gme = !!this.get_gme(),\n            funcs = pmain.getGrFuncs(this.options.second_x, this.options.second_y),\n            w = pmain.getFrameWidth(),\n            h = pmain.getFrameHeight();\n\n      this.createG(!pmain.pad_layer);\n\n      this.createGraphDrawAttributes();\n\n      this.fillatt.used = false; // mark used only when really used\n\n      this.draw_kind = 'none'; // indicate if special svg:g were created for each bin\n      this.marker_size = 0; // indicate if markers are drawn\n      const draw_g = is_gme ? this.draw_g.append('svg:g') : this.draw_g;\n\n      this.drawBins(funcs, this.options, draw_g, w, h, this.lineatt, this.fillatt, true);\n\n      if (graph._typename === 'TGraphQQ')\n         this.appendQQ(funcs, graph);\n\n      if (is_gme) {\n         for (let k = 0; k < graph.fNYErrors; ++k) {\n            let lineatt = this.lineatt, fillatt = this.fillatt;\n            if (this.options.individual_styles) {\n               lineatt = this.createAttLine({ attr: graph.fAttLine[k], std: false });\n               fillatt = this.createAttFill({ attr: graph.fAttFill[k], std: false });\n            }\n            const sub_g = this.draw_g.append('svg:g'),\n                options = (k < this.options.blocks.length) ? this.options.blocks[k] : this.options;\n            this.extractGmeErrors(k);\n            this.drawBins(funcs, options, sub_g, w, h, lineatt, fillatt);\n         }\n         this.extractGmeErrors(0); // ensure that first block kept at the end\n      }\n\n      if (!this.isBatchMode()) {\n         addMoveHandler(this, this.testEditable());\n         assignContextMenu(this);\n      }\n   }\n\n   /** @summary Provide tooltip at specified point */\n   extractTooltip(pnt) {\n      if (!pnt) return null;\n\n      if ((this.draw_kind === 'lines') || (this.draw_kind === 'path') || (this.draw_kind === 'mark'))\n         return this.extractTooltipForPath(pnt);\n\n      if (this.draw_kind !== 'nodes') return null;\n\n      const pmain = this.get_main(),\n            height = pmain.getFrameHeight(),\n            esz = this.error_size,\n            isbar1 = (this.options.Bar === 1),\n            funcs = isbar1 ? pmain.getGrFuncs(this.options.second_x, this.options.second_y) : null,\n            msize = this.marker_size ? Math.round(this.marker_size/2 + 1.5) : 0;\n      let findbin = null, best_dist2 = 1e10, best = null;\n\n      this.draw_g.selectAll('.grpoint').each(function() {\n         const d = d3_select(this).datum();\n         if (d === undefined) return;\n         let dist2 = (pnt.x - d.grx1) ** 2;\n         if (pnt.nproc === 1) dist2 += (pnt.y - d.gry1) ** 2;\n         if (dist2 >= best_dist2) return;\n\n         let rect;\n\n         if (d.error || d.rect || d.marker) {\n            rect = { x1: Math.min(-esz, d.grx0, -msize),\n                     x2: Math.max(esz, d.grx2, msize),\n                     y1: Math.min(-esz, d.gry2, -msize),\n                     y2: Math.max(esz, d.gry0, msize) };\n         } else if (d.bar) {\n             rect = { x1: -d.width/2, x2: d.width/2, y1: 0, y2: height - d.gry1 };\n\n             if (isbar1) {\n                const yy0 = funcs.gry(0);\n                rect.y1 = (d.gry1 > yy0) ? yy0-d.gry1 : 0;\n                rect.y2 = (d.gry1 > yy0) ? 0 : yy0-d.gry1;\n             }\n          } else\n             rect = { x1: -5, x2: 5, y1: -5, y2: 5 };\n\n          const matchx = (pnt.x >= d.grx1 + rect.x1) && (pnt.x <= d.grx1 + rect.x2),\n                matchy = (pnt.y >= d.gry1 + rect.y1) && (pnt.y <= d.gry1 + rect.y2);\n\n          if (matchx && (matchy || (pnt.nproc > 1))) {\n             best_dist2 = dist2;\n             findbin = this;\n             best = rect;\n             best.exact = /* matchx && */ matchy;\n          }\n       });\n\n      if (findbin === null) return null;\n\n      const d = d3_select(findbin).datum(),\n            gr = this.getGraph(),\n            res = { name: gr.fName, title: gr.fTitle,\n                    x: d.grx1, y: d.gry1,\n                    color1: this.lineatt.color,\n                    lines: this.getTooltips(d),\n                    rect: best, d3bin: findbin };\n\n       res.user_info = { obj: gr, name: gr.fName, bin: d.indx, cont: d.y, grx: d.grx1, gry: d.gry1 };\n\n      if (this.fillatt?.used && !this.fillatt?.empty())\n         res.color2 = this.fillatt.getFillColor();\n\n      if (best.exact) res.exact = true;\n      res.menu = res.exact; // activate menu only when exactly locate bin\n      res.menu_dist = 3; // distance always fixed\n      res.bin = d;\n      res.binindx = d.indx;\n\n      return res;\n   }\n\n   /** @summary Show tooltip */\n   showTooltip(hint) {\n      let ttrect = this.draw_g?.selectChild('.tooltip_bin');\n\n      if (!hint || !this.draw_g) {\n         ttrect?.remove();\n         return;\n      }\n\n      if (hint.usepath)\n         return this.showTooltipForPath(hint);\n\n      const d = d3_select(hint.d3bin).datum();\n\n      if (ttrect.empty()) {\n         ttrect = this.draw_g.append('svg:rect')\n                             .attr('class', 'tooltip_bin')\n                             .style('pointer-events', 'none')\n                             .call(addHighlightStyle);\n      }\n\n      hint.changed = ttrect.property('current_bin') !== hint.d3bin;\n\n      if (hint.changed) {\n         ttrect.attr('x', d.grx1 + hint.rect.x1)\n               .attr('width', hint.rect.x2 - hint.rect.x1)\n               .attr('y', d.gry1 + hint.rect.y1)\n               .attr('height', hint.rect.y2 - hint.rect.y1)\n               .style('opacity', '0.3')\n               .property('current_bin', hint.d3bin);\n      }\n   }\n\n   /** @summary Process tooltip event */\n   processTooltipEvent(pnt) {\n      const hint = this.extractTooltip(pnt);\n      if (!pnt || !pnt.disabled) this.showTooltip(hint);\n      return hint;\n   }\n\n   /** @summary Find best bin index for specified point */\n   findBestBin(pnt) {\n      if (!this.bins) return null;\n\n      const islines = (this.draw_kind === 'lines'),\n            funcs = this.get_main().getGrFuncs(this.options.second_x, this.options.second_y);\n      let bestindx = -1,\n          bestbin = null,\n          bestdist = 1e10,\n          dist, grx, gry, n, bin;\n\n      for (n = 0; n < this.bins.length; ++n) {\n         bin = this.bins[n];\n\n         grx = funcs.grx(bin.x);\n         gry = funcs.gry(bin.y);\n\n         dist = (pnt.x-grx)**2 + (pnt.y-gry)**2;\n\n         if (dist < bestdist) {\n            bestdist = dist;\n            bestbin = bin;\n            bestindx = n;\n         }\n      }\n\n      // check last point\n      if ((bestdist > 100) && islines) bestbin = null;\n\n      let radius = Math.max(this.lineatt.width + 3, 4);\n\n      if (this.marker_size > 0) radius = Math.max(this.marker_size, radius);\n\n      if (bestbin)\n         bestdist = Math.sqrt((pnt.x-funcs.grx(bestbin.x))**2 + (pnt.y-funcs.gry(bestbin.y))**2);\n\n      if (!islines && (bestdist > radius)) bestbin = null;\n\n      if (!bestbin) bestindx = -1;\n\n      const res = { bin: bestbin, indx: bestindx, dist: bestdist, radius: Math.round(radius) };\n\n      if (!bestbin && islines) {\n         bestdist = 1e10;\n\n         const IsInside = (x, x1, x2) => ((x1 >= x) && (x >= x2)) || ((x1 <= x) && (x <= x2));\n\n         let bin0 = this.bins[0], grx0 = funcs.grx(bin0.x), gry0, posy = 0;\n         for (n = 1; n < this.bins.length; ++n) {\n            bin = this.bins[n];\n            grx = funcs.grx(bin.x);\n\n            if (IsInside(pnt.x, grx0, grx)) {\n               // if inside interval, check Y distance\n               gry0 = funcs.gry(bin0.y);\n               gry = funcs.gry(bin.y);\n\n               if (Math.abs(grx - grx0) < 1) {\n                  // very close x - check only y\n                  posy = pnt.y;\n                  dist = IsInside(pnt.y, gry0, gry) ? 0 : Math.min(Math.abs(pnt.y-gry0), Math.abs(pnt.y-gry));\n               } else {\n                  posy = gry0 + (pnt.x - grx0) / (grx - grx0) * (gry - gry0);\n                  dist = Math.abs(posy - pnt.y);\n               }\n\n               if (dist < bestdist) {\n                  bestdist = dist;\n                  res.linex = pnt.x;\n                  res.liney = posy;\n               }\n            }\n\n            bin0 = bin;\n            grx0 = grx;\n         }\n\n         if (bestdist < radius*0.5) {\n            res.linedist = bestdist;\n            res.closeline = true;\n         }\n      }\n\n      return res;\n   }\n\n   /** @summary Check editable flag for TGraph\n     * @desc if arg specified changes or toggles editable flag */\n   testEditable(arg) {\n      const obj = this.getGraph();\n      if (!obj) return false;\n      if ((arg === 'toggle') || ((arg !== undefined) && (!arg !== obj.TestBit(kNotEditable))))\n         obj.InvertBit(kNotEditable);\n      return !obj.TestBit(kNotEditable);\n   }\n\n   /** @summary Provide tooltip at specified point for path-based drawing */\n   extractTooltipForPath(pnt) {\n      if (this.bins === null) return null;\n\n      const best = this.findBestBin(pnt);\n\n      if (!best || (!best.bin && !best.closeline)) return null;\n\n      const islines = (this.draw_kind === 'lines'),\n          ismark = (this.draw_kind === 'mark'),\n          pmain = this.get_main(),\n          funcs = pmain.getGrFuncs(this.options.second_x, this.options.second_y),\n          gr = this.getGraph(),\n          res = { name: gr.fName, title: gr.fTitle,\n                  x: best.bin ? funcs.grx(best.bin.x) : best.linex,\n                  y: best.bin ? funcs.gry(best.bin.y) : best.liney,\n                  color1: this.lineatt.color,\n                  lines: this.getTooltips(best.bin),\n                  usepath: true };\n\n      res.user_info = { obj: gr, name: gr.fName, bin: 0, cont: 0, grx: res.x, gry: res.y };\n\n      res.ismark = ismark;\n      res.islines = islines;\n\n      if (best.closeline) {\n         res.menu = res.exact = true;\n         res.menu_dist = best.linedist;\n      } else if (best.bin) {\n         if (this.options.EF && islines) {\n            res.gry1 = funcs.gry(best.bin.y - best.bin.eylow);\n            res.gry2 = funcs.gry(best.bin.y + best.bin.eyhigh);\n         } else\n            res.gry1 = res.gry2 = funcs.gry(best.bin.y);\n\n\n         res.binindx = best.indx;\n         res.bin = best.bin;\n         res.radius = best.radius;\n         res.user_info.bin = best.indx;\n         res.user_info.cont = best.bin.y;\n\n         res.exact = (Math.abs(pnt.x - res.x) <= best.radius) &&\n            ((Math.abs(pnt.y - res.gry1) <= best.radius) || (Math.abs(pnt.y - res.gry2) <= best.radius));\n\n         res.menu = res.exact;\n         res.menu_dist = Math.sqrt((pnt.x-res.x)**2 + Math.min(Math.abs(pnt.y-res.gry1), Math.abs(pnt.y-res.gry2))**2);\n      }\n\n      if (this.fillatt?.used && !this.fillatt?.empty())\n         res.color2 = this.fillatt.getFillColor();\n\n      if (!islines) {\n         res.color1 = this.getColor(gr.fMarkerColor);\n         if (!res.color2) res.color2 = res.color1;\n      }\n\n      return res;\n   }\n\n   /** @summary Show tooltip for path drawing */\n   showTooltipForPath(hint) {\n      let ttbin = this.draw_g?.selectChild('.tooltip_bin');\n\n      if (!hint?.bin || !this.draw_g) {\n         ttbin?.remove();\n         return;\n      }\n\n      if (ttbin.empty())\n         ttbin = this.draw_g.append('svg:g').attr('class', 'tooltip_bin');\n\n      hint.changed = ttbin.property('current_bin') !== hint.bin;\n\n      if (hint.changed) {\n         ttbin.selectAll('*').remove(); // first delete all children\n         ttbin.property('current_bin', hint.bin);\n\n         if (hint.ismark) {\n            ttbin.append('svg:rect')\n                 .style('pointer-events', 'none')\n                 .call(addHighlightStyle)\n                 .style('opacity', '0.3')\n                 .attr('x', Math.round(hint.x - hint.radius))\n                 .attr('y', Math.round(hint.y - hint.radius))\n                 .attr('width', 2*hint.radius)\n                 .attr('height', 2*hint.radius);\n         } else {\n            ttbin.append('svg:circle').attr('cy', Math.round(hint.gry1));\n            if (Math.abs(hint.gry1-hint.gry2) > 1)\n               ttbin.append('svg:circle').attr('cy', Math.round(hint.gry2));\n\n            const elem = ttbin.selectAll('circle')\n                            .attr('r', hint.radius)\n                            .attr('cx', Math.round(hint.x));\n\n            if (!hint.islines)\n               elem.style('stroke', hint.color1 === 'black' ? 'green' : 'black').style('fill', 'none');\n             else {\n               if (this.options.Line || this.options.Curve)\n                  elem.call(this.lineatt.func);\n               else\n                  elem.style('stroke', 'black');\n               if (this.options.Fill)\n                  elem.call(this.fillatt.func);\n               else\n                  elem.style('fill', 'none');\n            }\n         }\n      }\n   }\n\n   /** @summary Check if graph moving is enabled */\n   moveEnabled() {\n      return this.testEditable();\n   }\n\n   /** @summary Start moving of TGraph */\n   moveStart(x, y) {\n      this.pos_dx = this.pos_dy = 0;\n      this.move_funcs = this.get_main().getGrFuncs(this.options.second_x, this.options.second_y);\n      const hint = this.extractTooltip({ x, y });\n      if (hint && hint.exact && (hint.binindx !== undefined)) {\n         this.move_binindx = hint.binindx;\n         this.move_bin = hint.bin;\n         this.move_x0 = this.move_funcs.grx(this.move_bin.x);\n         this.move_y0 = this.move_funcs.gry(this.move_bin.y);\n      } else\n         delete this.move_binindx;\n   }\n\n   /** @summary Perform moving */\n   moveDrag(dx, dy) {\n      this.pos_dx += dx;\n      this.pos_dy += dy;\n\n      if (this.move_binindx === undefined)\n         makeTranslate(this.draw_g, this.pos_dx, this.pos_dy);\n       else if (this.move_funcs && this.move_bin) {\n         this.move_bin.x = this.move_funcs.revertAxis('x', this.move_x0 + this.pos_dx);\n         this.move_bin.y = this.move_funcs.revertAxis('y', this.move_y0 + this.pos_dy);\n         this.drawGraph();\n      }\n   }\n\n   /** @summary Complete moving */\n   moveEnd(not_changed) {\n      const graph = this.getGraph(), last = graph?.fNpoints-1;\n      let exec = '';\n\n      const changeBin = bin => {\n         exec += `SetPoint(${bin.indx},${bin.x},${bin.y});;`;\n         graph.fX[bin.indx] = bin.x;\n         graph.fY[bin.indx] = bin.y;\n         if ((bin.indx === 0) && this._cutg_lastsame) {\n            exec += `SetPoint(${last},${bin.x},${bin.y});;`;\n            graph.fX[last] = bin.x;\n            graph.fY[last] = bin.y;\n         }\n      };\n\n      if (this.move_binindx === undefined) {\n         this.draw_g.attr('transform', null);\n\n         if (this.move_funcs && this.bins && !not_changed) {\n            for (let k = 0; k < this.bins.length; ++k) {\n               const bin = this.bins[k];\n               bin.x = this.move_funcs.revertAxis('x', this.move_funcs.grx(bin.x) + this.pos_dx);\n               bin.y = this.move_funcs.revertAxis('y', this.move_funcs.gry(bin.y) + this.pos_dy);\n               changeBin(bin);\n            }\n            if (graph.$redraw_pad)\n               this.redrawPad();\n            else\n               this.drawGraph();\n         }\n      } else {\n         changeBin(this.move_bin);\n         delete this.move_binindx;\n         if (graph.$redraw_pad)\n            this.redrawPad();\n      }\n\n      delete this.move_funcs;\n\n      if (exec && !not_changed)\n         this.submitCanvExec(exec);\n   }\n\n   /** @summary Fill option object used in TWebCanvas */\n   fillWebObjectOptions(res) {\n      if (this._auto_exec && res) {\n         res.fcust = 'auto_exec:' + this._auto_exec;\n         delete this._auto_exec;\n      }\n   }\n\n   /** @summary Fill context menu */\n   fillContextMenuItems(menu) {\n      if (!this.snapid) {\n         menu.addchk(this.testEditable(), 'Editable', () => { this.testEditable('toggle'); this.drawGraph(); });\n\n         menu.addRedrawMenu(this.getPrimary());\n      }\n   }\n\n   /** @summary Execute menu command\n     * @private */\n   executeMenuCommand(method, args) {\n      if (super.executeMenuCommand(method, args)) return true;\n\n      const canp = this.getCanvPainter(), pmain = this.get_main();\n\n      if ((method.fName === 'RemovePoint') || (method.fName === 'InsertPoint')) {\n         if (!canp || canp._readonly) return true; // ignore function\n\n         const pnt = isFunc(pmain?.getLastEventPos) ? pmain.getLastEventPos() : null,\n             hint = this.extractTooltip(pnt);\n\n         if (method.fName === 'InsertPoint') {\n            if (pnt) {\n               const funcs = pmain.getGrFuncs(this.options.second_x, this.options.second_y),\n                     userx = funcs.revertAxis('x', pnt.x) ?? 0,\n                     usery = funcs.revertAxis('y', pnt.y) ?? 0;\n               this.submitCanvExec(`AddPoint(${userx.toFixed(3)}, ${usery.toFixed(3)})`, method.$execid);\n            }\n         } else if (method.$execid && (hint?.binindx !== undefined))\n            this.submitCanvExec(`RemovePoint(${hint.binindx})`, method.$execid);\n\n\n         return true; // call is processed\n      }\n\n      return false;\n   }\n\n   /** @summary Update TGraph object members\n     * @private */\n   _updateMembers(graph, obj) {\n      graph.fBits = obj.fBits;\n      graph.fTitle = obj.fTitle;\n      graph.fX = obj.fX;\n      graph.fY = obj.fY;\n      graph.fNpoints = obj.fNpoints;\n      graph.fMinimum = obj.fMinimum;\n      graph.fMaximum = obj.fMaximum;\n\n      const o = this.options;\n\n      if (this.snapid !== undefined)\n         o._pfc = o._plc = o._pmc = 0; // auto colors should be processed in web canvas\n\n      if (!o._pfc)\n         graph.fFillColor = obj.fFillColor;\n      graph.fFillStyle = obj.fFillStyle;\n      if (!o._plc)\n         graph.fLineColor = obj.fLineColor;\n      graph.fLineStyle = obj.fLineStyle;\n      graph.fLineWidth = obj.fLineWidth;\n      if (!o._pmc)\n         graph.fMarkerColor = obj.fMarkerColor;\n      graph.fMarkerSize = obj.fMarkerSize;\n      graph.fMarkerStyle = obj.fMarkerStyle;\n\n      return obj.fFunctions;\n   }\n\n   /** @summary Update TGraph object */\n   updateObject(obj, opt) {\n      if (!this.matchObjectType(obj)) return false;\n\n      if (opt && (opt !== this.options.original))\n         this.decodeOptions(opt);\n\n      const new_funcs = this._updateMembers(this.getObject(), obj);\n\n      this.createBins();\n\n      delete this.$redraw_hist;\n\n      // if our own histogram was used as axis drawing, we need update histogram as well\n      if (this.axes_draw) {\n         const histo = this.createHistogram(),\n               hist_painter = this.getMainPainter();\n         if (hist_painter?.isSecondary(this)) {\n            hist_painter.updateObject(histo, this.options.Axis);\n            this.$redraw_hist = true;\n         }\n      }\n\n      this._funcHandler = new FunctionsHandler(this, this.getPadPainter(), new_funcs);\n\n      return true;\n   }\n\n   /** @summary Checks if it makes sense to zoom inside specified axis range\n     * @desc allow to zoom TGraph only when at least one point in the range */\n   canZoomInside(axis, min, max) {\n      const gr = this.getGraph();\n      if (!gr || ((axis !== 'x') && (axis !== 'y')))\n         return false;\n\n      let arr = gr.fX;\n      if (this._is_scatter)\n         arr = (axis === 'x') ? gr.fX : gr.fY;\n      else if (axis !== (this.options.pos3d ? 'y' : 'x'))\n         return false;\n\n      for (let n = 0; n < gr.fNpoints; ++n) {\n         if ((min < arr[n]) && (arr[n] < max))\n            return true;\n      }\n\n      return false;\n   }\n\n   /** @summary Process click on graph-defined buttons */\n   clickButton(funcname) {\n      if (funcname !== 'ToggleZoom') return false;\n\n      if ((this.xmin === this.xmax) && (this.ymin === this.ymax)) return false;\n\n      return this.getFramePainter()?.zoom(this.xmin, this.xmax, this.ymin, this.ymax);\n   }\n\n   /** @summary Find TF1/TF2 in TGraph list of functions */\n   findFunc() {\n      return this.getGraph()?.fFunctions?.arr?.find(func => (func._typename === clTF1) || (func._typename === clTF2));\n   }\n\n   /** @summary Find stat box in TGraph list of functions */\n   findStat() {\n      return this.getGraph()?.fFunctions?.arr?.find(func => (func._typename === clTPaveStats) && (func.fName === 'stats'));\n   }\n\n   /** @summary Create stat box */\n   createStat() {\n      const func = this.findFunc();\n      if (!func) return null;\n\n      let stats = this.findStat();\n      if (stats) return stats;\n\n      // do not create stats box when drawing canvas\n      if (this.getCanvPainter()?.normal_canvas) return null;\n\n      this.create_stats = true;\n\n      const st = gStyle;\n\n      stats = create(clTPaveStats);\n      Object.assign(stats, { fName: 'stats', fOptStat: 0, fOptFit: st.fOptFit || 111, fBorderSize: 1,\n                             fX1NDC: st.fStatX - st.fStatW, fY1NDC: st.fStatY - st.fStatH, fX2NDC: st.fStatX, fY2NDC: st.fStatY,\n                             fFillColor: st.fStatColor, fFillStyle: st.fStatStyle });\n\n      stats.fTextAngle = 0;\n      stats.fTextSize = st.fStatFontSize; // 9 ??\n      stats.fTextAlign = 12;\n      stats.fTextColor = st.fStatTextColor;\n      stats.fTextFont = st.fStatFont;\n\n      stats.AddText(func.fName);\n\n      // while TF1 was found, one can be sure that stats is existing\n      this.getGraph().fFunctions.Add(stats);\n\n      return stats;\n   }\n\n   /** @summary Fill statistic */\n   fillStatistic(stat, _dostat, dofit) {\n      const func = this.findFunc();\n\n      if (!func || !dofit) return false;\n\n      stat.clearPave();\n\n      stat.fillFunctionStat(func, (dofit === 1) ? 111 : dofit, 1);\n\n      return true;\n   }\n\n   /** @summary Draw axis histogram\n     * @private */\n   async drawAxisHisto() {\n      const histo = this.createHistogram();\n      return TH1Painter.draw(this.getDrawDom(), histo, this.options.Axis);\n   }\n\n   /** @summary Draw TGraph\n     * @private */\n   static async _drawGraph(painter, opt) {\n      painter.decodeOptions(opt, true);\n      painter.createBins();\n      painter.createStat();\n      const graph = painter.getGraph();\n      if (!settings.DragGraphs && graph && !graph.TestBit(kNotEditable))\n         graph.InvertBit(kNotEditable);\n\n      let promise = Promise.resolve();\n\n      if ((!painter.getMainPainter() || painter.options.second_x || painter.options.second_y) && painter.options.Axis) {\n         promise = painter.drawAxisHisto().then(hist_painter => {\n            hist_painter?.setSecondaryId(painter, 'hist');\n            painter.axes_draw = !!hist_painter;\n         });\n      }\n\n      return promise.then(() => {\n         painter.addToPadPrimitives();\n         return painter.drawGraph();\n      }).then(() => {\n         const handler = new FunctionsHandler(painter, painter.getPadPainter(), graph.fFunctions, true);\n         return handler.drawNext(0); // returns painter\n      });\n   }\n\n   static async draw(dom, graph, opt) {\n      return TGraphPainter._drawGraph(new TGraphPainter(dom, graph), opt);\n   }\n\n} // class TGraphPainter\n\nexport { clTGraphAsymmErrors, TGraphPainter };\n"],"x_google_ignoreList":[0]}