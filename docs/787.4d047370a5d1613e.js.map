{"version":3,"file":"787.4d047370a5d1613e.js","mappings":"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","names":["kIsZoomed","BIT","THStackPainter","ObjectPainter","constructor","dom","stack","opt","super","this","firstpainter","painters","cleanup","getPadPainter","cleanPrimitives","objp","indexOf","buildStack","pp","fStack","fHists","nhists","arr","length","findInPrimitives","undefined","clTObjArray","name","fName","create","hprev","clone","push","i","hnext","xnext","fXaxis","xprev","match","fNbins","fXmin","fXmax","Math","abs","Array","fNcells","fill","n","fArray","Object","assign","console","warn","getMinMax","iserr","getObject","pad","getRootPad","logscale","fLogv","options","ndim","fLogy","fLogz","themin","themax","getHistMinMax","hist","witherr","res","min","max","domin","domax","fMinimum","kNoZoom","fMaximum","i1","i2","j1","j2","first","TestBit","EAxisBits","kAxisRange","fFirst","fLast","_typename","clTH2","fYaxis","j","val","getBinContent","err","getBinError","getBin","nostack","resh","log10","gStyle","fHistTopMargin","hopt","fHistogram","getHistDrawOption","fOption","toUpperCase","draw_errors","pads","auto","drawNextHisto","indx","pad_painter","_this","_asyncToGenerator","hlst","rindx","horder","subid","subpad_painter","getSubPadPainter","drawHist","then","subp","setSecondaryId","$baseh","$num_histos","decodeOptions","same","has_errors","hasErrors","fSumw2","k","nhist","d","DrawOptions","check","forEach","f","remain","dolego","errors","createHistogram","histos","numhistos","histo","clTH1I","setHistogramTitle","fTitle","fBits","kNoStats","h0","clTH2I","h","fLabels","updateObject","obj","matchObjectType","src","mm","hmin","hmax","_checked_zooming","ymin","ymax","zmin","zmax","zoom_min_max","did_update","redraw","reason","full_redraw","pr","Promise","resolve","redrawSub","fillContextMenuItems","menu","addRedrawMenu","addchk","flag","redrawPad","TH1Painter","draw","TH2Painter","accessMM","ismin","v","interactiveRedraw","redrawWith","skip_cleanup","_this2","divide","removePrimitive","ensureTCanvas","getDrawDom","$stack_hist","addToPadPrimitives","THStackPainter2D"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist2d/THStackPainter.mjs","../node_modules/jsroot/modules/hist/THStackPainter.mjs"],"sourcesContent":["import { clone, create, createHistogram, setHistogramTitle, BIT,\n         gStyle, clTH1I, clTH2, clTH2I, clTObjArray, kNoZoom, kNoStats } from '../core.mjs';\nimport { DrawOptions } from '../base/BasePainter.mjs';\nimport { ObjectPainter, EAxisBits } from '../base/ObjectPainter.mjs';\nimport { TH1Painter } from './TH1Painter.mjs';\nimport { TH2Painter } from './TH2Painter.mjs';\nimport { ensureTCanvas } from '../gpad/TCanvasPainter.mjs';\n\n\nconst kIsZoomed = BIT(16); // bit set when zooming on Y axis\n\n/**\n * @summary Painter class for THStack\n *\n * @private\n */\n\nclass THStackPainter extends ObjectPainter {\n\n   /** @summary constructor\n     * @param {object|string} dom - DOM element for drawing or element id\n     * @param {object} stack - THStack object\n     * @param {string} [opt] - draw options */\n   constructor(dom, stack, opt) {\n      super(dom, stack, opt);\n      this.firstpainter = null;\n      this.painters = []; // keep painters to be able update objects\n   }\n\n   /** @summary Cleanup THStack painter */\n   cleanup() {\n      this.getPadPainter()?.cleanPrimitives(objp => { return (objp === this.firstpainter) || (this.painters.indexOf(objp) >= 0); });\n      delete this.firstpainter;\n      delete this.painters;\n      super.cleanup();\n   }\n\n   /** @summary Build sum of all histograms\n     * @desc Build a separate list fStack containing the running sum of all histograms */\n   buildStack(stack, pp) {\n      this.fStack = null;\n\n      if (!stack.fHists)\n         return false;\n      const nhists = stack.fHists.arr.length;\n      if (nhists <= 0)\n         return false;\n\n      let arr = pp?.findInPrimitives(undefined, clTObjArray);\n      if ((arr?.arr.length === nhists) && (arr?.name === stack.fName)) {\n         this.fStack = arr;\n         return true;\n      }\n\n      arr = create(clTObjArray);\n      let hprev = clone(stack.fHists.arr[0]);\n      arr.arr.push(hprev);\n      for (let i = 1; i < nhists; ++i) {\n         const hnext = clone(stack.fHists.arr[i]),\n               xnext = hnext.fXaxis, xprev = hprev.fXaxis;\n\n         let match = (xnext.fNbins === xprev.fNbins) &&\n                     (xnext.fXmin === xprev.fXmin) &&\n                     (xnext.fXmax === xprev.fXmax);\n\n         if (!match && (xnext.fNbins > 0) && (xnext.fNbins < xprev.fNbins) && (xnext.fXmin === xprev.fXmin) &&\n             (Math.abs((xnext.fXmax - xnext.fXmin)/xnext.fNbins - (xprev.fXmax - xprev.fXmin)/xprev.fNbins) < 0.0001)) {\n            // simple extension of histogram to make sum\n            const arr = new Array(hprev.fNcells).fill(0);\n            for (let n = 1; n <= xnext.fNbins; ++n)\n               arr[n] = hnext.fArray[n];\n            hnext.fNcells = hprev.fNcells;\n            Object.assign(xnext, xprev);\n            hnext.fArray = arr;\n            match = true;\n         }\n         if (!match) {\n            console.warn(`When drawing THStack, cannot sum-up histograms ${hnext.fName} and ${hprev.fName}`);\n            return false;\n         }\n\n         // trivial sum of histograms\n         for (let n = 0; n < hnext.fArray.length; ++n)\n            hnext.fArray[n] += hprev.fArray[n];\n\n         arr.arr.push(hnext);\n         hprev = hnext;\n      }\n      this.fStack = arr;\n      return true;\n   }\n\n   /** @summary Returns stack min/max values */\n   getMinMax(iserr) {\n      const stack = this.getObject(),\n            pad = this.getPadPainter()?.getRootPad(true),\n            logscale = pad?.fLogv ?? (this.options.ndim === 1 ? pad?.fLogy : pad?.fLogz);\n      let themin = 0, themax = 0;\n\n      const getHistMinMax = (hist, witherr) => {\n         const res = { min: 0, max: 0 };\n         let domin = true, domax = true;\n         if (hist.fMinimum !== kNoZoom) {\n            res.min = hist.fMinimum;\n            domin = false;\n         }\n         if (hist.fMaximum !== kNoZoom) {\n            res.max = hist.fMaximum;\n            domax = false;\n         }\n\n         if (!domin && !domax) return res;\n\n         let i1 = 1, i2 = hist.fXaxis.fNbins, j1 = 1, j2 = 1, first = true;\n\n         if (hist.fXaxis.TestBit(EAxisBits.kAxisRange)) {\n            i1 = hist.fXaxis.fFirst;\n            i2 = hist.fXaxis.fLast;\n         }\n\n         if (hist._typename.indexOf(clTH2) === 0) {\n            j2 = hist.fYaxis.fNbins;\n            if (hist.fYaxis.TestBit(EAxisBits.kAxisRange)) {\n               j1 = hist.fYaxis.fFirst;\n               j2 = hist.fYaxis.fLast;\n            }\n         }\n         for (let j = j1; j <= j2; ++j) {\n            for (let i = i1; i <= i2; ++i) {\n               const val = hist.getBinContent(i, j),\n                     err = witherr ? hist.getBinError(hist.getBin(i, j)) : 0;\n               if (logscale && (val - err <= 0))\n                  continue;\n               if (domin && (first || (val - err < res.min)))\n                  res.min = val - err;\n               if (domax && (first || (val + err > res.max)))\n                  res.max = val + err;\n               first = false;\n           }\n         }\n\n         return res;\n      };\n\n      if (this.options.nostack) {\n         for (let i = 0; i < stack.fHists.arr.length; ++i) {\n            const resh = getHistMinMax(stack.fHists.arr[i], iserr);\n            if (i === 0) {\n               themin = resh.min;\n               themax = resh.max;\n             } else {\n               themin = Math.min(themin, resh.min);\n               themax = Math.max(themax, resh.max);\n            }\n         }\n      } else {\n         themin = getHistMinMax(this.fStack.arr[0], iserr).min;\n         themax = getHistMinMax(this.fStack.arr[this.fStack.arr.length-1], iserr).max;\n      }\n\n      if (logscale)\n         themin = (themin > 0) ? themin*0.9 : themax*1e-3;\n      else if (themin > 0)\n         themin = 0;\n\n      if (stack.fMaximum !== kNoZoom)\n         themax = stack.fMaximum;\n\n      if (stack.fMinimum !== kNoZoom)\n         themin = stack.fMinimum;\n\n      // redo code from THStack::BuildAndPaint\n\n      if (!this.options.nostack || (stack.fMaximum === kNoZoom)) {\n         if (logscale) {\n            if (themin > 0)\n               themax *= (1+0.2*Math.log10(themax/themin));\n         } else if (stack.fMaximum === kNoZoom)\n            themax *= (1 + gStyle.fHistTopMargin);\n      }\n      if (!this.options.nostack || (stack.fMinimum === kNoZoom)) {\n         if (logscale)\n            themin = (themin > 0) ? themin/(1+0.5*Math.log10(themax/themin)) : 1e-3*themax;\n      }\n\n      const res = { min: themin, max: themax, hopt: `;hmin:${themin};hmax:${themax}` };\n      if (stack.fHistogram?.TestBit(kIsZoomed))\n         res.hopt += ';zoom_min_max';\n\n      return res;\n   }\n\n   /** @summary Provide draw options for the histogram */\n   getHistDrawOption(hist, opt) {\n      let hopt = opt || hist.fOption || this.options.hopt;\n      if (hopt.toUpperCase().indexOf(this.options.hopt) < 0)\n         hopt += ' ' + this.options.hopt;\n      if (this.options.draw_errors && !hopt)\n         hopt = 'E';\n      if (!this.options.pads)\n         hopt += ' same nostat' + this.options.auto;\n      return hopt;\n   }\n\n   /** @summary Draw next stack histogram */\n   async drawNextHisto(indx, pad_painter) {\n      const stack = this.getObject(),\n            hlst = this.options.nostack ? stack.fHists : this.fStack,\n            nhists = hlst?.arr?.length || 0;\n\n      if (indx >= nhists)\n         return this;\n\n      const rindx = this.options.horder ? indx : nhists-indx-1,\n            subid = this.options.nostack ? `hists_${rindx}` : `stack_${rindx}`,\n            hist = hlst.arr[rindx],\n            hopt = this.getHistDrawOption(hist, stack.fHists.opt[rindx]);\n\n      // handling of 'pads' draw option\n      if (pad_painter) {\n         const subpad_painter = pad_painter.getSubPadPainter(indx+1);\n         if (!subpad_painter)\n            return this;\n\n         subpad_painter.cleanPrimitives(true);\n\n         return this.drawHist(subpad_painter, hist, hopt).then(subp => {\n            if (subp) {\n               subp.setSecondaryId(this, subid);\n               this.painters.push(subp);\n            }\n            return this.drawNextHisto(indx+1, pad_painter);\n         });\n      }\n\n      // special handling of stacked histograms\n      // also used to provide tooltips\n      if ((rindx > 0) && !this.options.nostack)\n         hist.$baseh = hlst.arr[rindx - 1];\n      // this number used for auto colors creation\n      if (this.options.auto)\n         hist.$num_histos = nhists;\n\n      return this.drawHist(this.getPadPainter(), hist, hopt).then(subp => {\n          subp.setSecondaryId(this, subid);\n          this.painters.push(subp);\n          return this.drawNextHisto(indx+1, pad_painter);\n      });\n   }\n\n   /** @summary Decode draw options of THStack painter */\n   decodeOptions(opt) {\n      if (!this.options) this.options = {};\n      Object.assign(this.options, { ndim: 1, nostack: false, same: false, horder: true, has_errors: false, draw_errors: false, hopt: '', auto: '' });\n\n      const stack = this.getObject(),\n            hist = stack.fHistogram || (stack.fHists ? stack.fHists.arr[0] : null) || (this.fStack ? this.fStack.arr[0] : null),\n\n       hasErrors = hist => {\n         if (hist.fSumw2 && (hist.fSumw2.length > 0)) {\n            for (let n = 0; n < hist.fSumw2.length; ++n)\n               if (hist.fSumw2[n] > 0) return true;\n         }\n         return false;\n      };\n\n      if (hist && (hist._typename.indexOf(clTH2) === 0))\n         this.options.ndim = 2;\n\n      if ((this.options.ndim === 2) && !opt)\n         opt = 'lego1';\n\n      if (stack.fHists && !this.options.nostack) {\n         for (let k = 0; k < stack.fHists.arr.length; ++k)\n            this.options.has_errors = this.options.has_errors || hasErrors(stack.fHists.arr[k]);\n      }\n\n      this.options.nhist = stack.fHists?.arr?.length ?? 1;\n\n      const d = new DrawOptions(opt);\n\n      this.options.nostack = d.check('NOSTACK');\n      if (d.check('STACK')) this.options.nostack = false;\n      this.options.same = d.check('SAME');\n\n      d.check('NOCLEAR'); // ignore option\n\n      ['PFC', 'PLC', 'PMC'].forEach(f => { if (d.check(f)) this.options.auto += ' ' + f; });\n\n      this.options.pads = d.check('PADS');\n      if (this.options.pads) this.options.nostack = true;\n\n      this.options.hopt = d.remain(); // use remaining draw options for histogram draw\n\n      const dolego = d.check('LEGO');\n\n      this.options.errors = d.check('E');\n\n      // if any histogram appears with pre-calculated errors, use E for all histograms\n      if (!this.options.nostack && this.options.has_errors && !dolego && !d.check('HIST') && (this.options.hopt.indexOf('E') < 0))\n         this.options.draw_errors = true;\n\n      this.options.horder = this.options.nostack || dolego;\n   }\n\n   /** @summary Create main histogram for THStack axis drawing */\n   createHistogram(stack) {\n      const histos = stack.fHists,\n            numhistos = histos ? histos.arr.length : 0;\n\n      if (!numhistos) {\n         const histo = createHistogram(clTH1I, 100);\n         setHistogramTitle(histo, stack.fTitle);\n         histo.fBits |= kNoStats;\n         return histo;\n      }\n\n      const h0 = histos.arr[0],\n            histo = createHistogram((this.options.ndim === 1) ? clTH1I : clTH2I, h0.fXaxis.fNbins, h0.fYaxis.fNbins);\n      histo.fName = 'axis_hist';\n      histo.fBits |= kNoStats;\n      Object.assign(histo.fXaxis, h0.fXaxis);\n      if (this.options.ndim === 2)\n         Object.assign(histo.fYaxis, h0.fYaxis);\n\n      // this code is not exists in ROOT painter, can be skipped?\n      for (let n = 1; n < numhistos; ++n) {\n         const h = histos.arr[n];\n\n         if (!histo.fXaxis.fLabels) {\n            histo.fXaxis.fXmin = Math.min(histo.fXaxis.fXmin, h.fXaxis.fXmin);\n            histo.fXaxis.fXmax = Math.max(histo.fXaxis.fXmax, h.fXaxis.fXmax);\n         }\n\n         if ((this.options.ndim === 2) && !histo.fYaxis.fLabels) {\n            histo.fYaxis.fXmin = Math.min(histo.fYaxis.fXmin, h.fYaxis.fXmin);\n            histo.fYaxis.fXmax = Math.max(histo.fYaxis.fXmax, h.fYaxis.fXmax);\n         }\n      }\n\n      histo.fTitle = stack.fTitle;\n\n      return histo;\n   }\n\n   /** @summary Update THStack object */\n   updateObject(obj) {\n      if (!this.matchObjectType(obj)) return false;\n\n      const stack = this.getObject(),\n            pp = this.getPadPainter();\n\n      stack.fHists = obj.fHists;\n      stack.fTitle = obj.fTitle;\n      stack.fMinimum = obj.fMinimum;\n      stack.fMaximum = obj.fMaximum;\n\n      if (!this.options.nostack)\n         this.options.nostack = !this.buildStack(stack, pp);\n\n      if (this.firstpainter) {\n         let src = obj.fHistogram;\n         if (!src)\n            src = stack.fHistogram = this.createHistogram(stack);\n\n         const mm = this.getMinMax(this.options.errors || this.options.draw_errors);\n         this.firstpainter.options.hmin = mm.min;\n         this.firstpainter.options.hmax = mm.max;\n\n         this.firstpainter._checked_zooming = false; // force to check 3d zooming\n\n         if (this.options.ndim === 1) {\n            this.firstpainter.ymin = mm.min;\n            this.firstpainter.ymax = mm.max;\n         } else {\n            this.firstpainter.zmin = mm.min;\n            this.firstpainter.zmax = mm.max;\n         }\n\n         this.firstpainter.updateObject(src);\n\n         this.firstpainter.options.zoom_min_max = src.TestBit(kIsZoomed);\n      }\n\n      // and now update histograms\n      const hlst = this.options.nostack ? stack.fHists : this.fStack,\n            nhists = hlst?.arr?.length ?? 0;\n\n      if (nhists !== this.painters.length) {\n         this.did_update = 1;\n         pp?.cleanPrimitives(objp => this.painters.indexOf(objp) >= 0);\n         this.painters = [];\n      } else {\n         this.did_update = 2;\n         for (let indx = 0; indx < nhists; ++indx) {\n            const rindx = this.options.horder ? indx : nhists - indx - 1,\n                  hist = hlst.arr[rindx];\n            this.painters[indx].updateObject(hist, this.getHistDrawOption(hist, stack.fHists.opt[rindx]));\n         }\n      }\n\n      return true;\n   }\n\n   /** @summary Redraw THStack\n     * @desc Do something if previous update had changed number of histograms */\n   redraw(reason) {\n      if (!this.did_update)\n         return;\n\n      const full_redraw = this.did_update === 1;\n      delete this.did_update;\n\n      let pr = Promise.resolve(this);\n\n      if (this.firstpainter) {\n         const mm = this.getMinMax(this.options.errors || this.options.draw_errors);\n         this.firstpainter.decodeOptions(this.options.hopt + mm.hopt);\n         pr = this.firstpainter.redraw(reason);\n      }\n\n      return pr.then(() => {\n         if (full_redraw)\n            return this.drawNextHisto(0, this.options.pads ? this.getPadPainter() : null);\n\n         const redrawSub = indx => {\n            if (indx >= this.painters.length)\n               return this;\n            return this.painters[indx].redraw(reason).then(() => redrawSub(indx+1));\n         };\n         return redrawSub(0);\n      });\n   }\n\n   /** @summary Fill THStack context menu */\n   fillContextMenuItems(menu) {\n      menu.addRedrawMenu(this);\n      if (!this.options.pads) {\n         menu.addchk(this.options.draw_errors, 'Draw errors', flag => {\n            this.options.draw_errors = flag;\n            const stack = this.getObject(),\n                  hlst = this.options.nostack ? stack.fHists : this.fStack,\n                  nhists = hlst?.arr?.length ?? 0;\n            for (let indx = 0; indx < nhists; ++indx) {\n               const rindx = this.options.horder ? indx : nhists - indx - 1,\n                     hist = hlst.arr[rindx];\n               this.painters[indx].decodeOptions(this.getHistDrawOption(hist, stack.fHists.opt[rindx]));\n            }\n            this.redrawPad();\n         }, 'Change draw erros in the stack');\n      }\n   }\n\n   /** @summary Invoke histogram drawing */\n   drawHist(dom, hist, hopt) {\n      const func = (this.options.ndim === 1) ? TH1Painter.draw : TH2Painter.draw;\n      return func(dom, hist, hopt);\n   }\n\n\n   /** @summary Access or modify histogram min/max\n    * @private */\n   accessMM(ismin, v) {\n      const name = ismin ? 'fMinimum' : 'fMaximum',\n            stack = this.getObject();\n      if (v === undefined)\n         return stack[name];\n\n      this.did_update = 2;\n\n      stack[name] = v;\n\n      this.interactiveRedraw('pad', ismin ? `exec:SetMinimum(${v})` : `exec:SetMaximum(${v})`);\n   }\n\n   /** @summary Full stack redraw with specified draw option */\n   async redrawWith(opt, skip_cleanup) {\n      const pp = this.getPadPainter();\n      if (!skip_cleanup && pp) {\n         this.firstpainter = null;\n         this.painters = [];\n         if (this.options.pads)\n            pp.divide(0, 0);\n         pp.removePrimitive(this, true);\n      }\n\n      this.decodeOptions(opt);\n\n      const stack = this.getObject();\n\n      let pr = Promise.resolve(this), pad_painter = null;\n\n      if (this.options.pads) {\n         pr = ensureTCanvas(this, false).then(() => {\n            pad_painter = this.getPadPainter();\n            return pad_painter.divide(this.options.nhist, 0, true);\n         });\n      } else {\n         if (!this.options.nostack)\n             this.options.nostack = !this.buildStack(stack, pp);\n\n         if (!this.options.same && stack.fHists?.arr.length) {\n            if (!stack.fHistogram)\n               stack.fHistogram = this.createHistogram(stack);\n\n            const mm = this.getMinMax(this.options.errors || this.options.draw_errors);\n\n            pr = this.drawHist(this.getDrawDom(), stack.fHistogram, this.options.hopt + mm.hopt).then(subp => {\n               this.firstpainter = subp;\n               subp.$stack_hist = true;\n               subp.setSecondaryId(this, 'hist'); // mark hist painter as created by THStack\n            });\n         }\n      }\n\n      return pr.then(() => this.drawNextHisto(0, pad_painter)).then(() => {\n         if (!this.options.pads)\n            this.addToPadPrimitives();\n         return this;\n      });\n   }\n\n   /** @summary draw THStack object in 2D */\n   static async draw(dom, stack, opt) {\n      if (!stack.fHists || !stack.fHists.arr)\n         return null; // drawing not needed\n\n      const painter = new THStackPainter(dom, stack, opt);\n\n      return painter.redrawWith(opt, true);\n   }\n\n} // class THStackPainter\n\nexport { THStackPainter };\n","import { THStackPainter as THStackPainter2D } from '../hist2d/THStackPainter.mjs';\nimport { TH1Painter } from './TH1Painter.mjs';\nimport { TH2Painter } from './TH2Painter.mjs';\n\n\nclass THStackPainter extends THStackPainter2D {\n\n   /** @summary Invoke histogram drawing */\n   drawHist(dom, hist, hopt) {\n      const func = (this.options.ndim === 1) ? TH1Painter.draw : TH2Painter.draw;\n      return func(dom, hist, hopt);\n   }\n\n   /** @summary draw THStack object */\n   static async draw(dom, stack, opt) {\n      if (!stack.fHists || !stack.fHists.arr)\n         return null; // drawing not needed\n\n      const painter = new THStackPainter(dom, stack, opt);\n\n      return painter.redrawWith(opt, true);\n   }\n\n} // class THStackPainter\n\nexport { THStackPainter };\n"],"x_google_ignoreList":[0,1]}