{"version":3,"file":"679.ff9d576f88a20f40.js","mappings":"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","names":["kNotEditable","BIT","clTGraphErrors","clTGraphAsymmErrors","clTGraphBentErrors","clTGraphMultiErrors","TGraphPainter","ObjectPainter","constructor","dom","graph","super","this","axes_draw","bins","xmin","ymin","xmax","ymax","wheel_zoomy","is_bent","_typename","has_errors","match","getGraph","getObject","getHistogram","fHistogram","setHistogram","histo","obj","redraw","_this","_asyncToGenerator","promise","Promise","resolve","$redraw_hist","hist_painter","getMainPainter","isSecondary","then","drawGraph","res","_funcHandler","drawNext","cleanup","interactive_bin","get_gme","decodeOptions","opt","first_time","isStr","indexOf","slice","is_gme","has_main","blocks_gme","options","decodeBlock","d","Object","assign","Line","Curve","Rect","Mark","Bar","OutRange","EF","Fill","MainError","Ends","ScaleErrX","check","partAsFloat","Errors","Axis","NoOpt","PadStats","PadPalette","original","second_x","second_y","individual_styles","split","shift","_a","DrawOptions","hopt","PadDrawOptions","forEach","name","part","empty","pos3d","partAsInt","_pfc","_plc","_pmc","blocks","skip_errors_x0","skip_errors_y0","undefined","length","fMarkerStyle","matchObjectType","len","fEX","m","k","Math","max","fEY","_cutg","clTCutG","_cutg_lastsame","fNpoints","fX","fY","pad","getPadPainter","getRootPad","fPrimitives","arr","bl","subres","push","extractGmeErrors","nblock","gr","bin","eylow","fEyL","indx","eyhigh","fEyH","createBins","kind","npoints","Array","p","x","y","exlow","exhigh","fExL","fExH","fEXlow","fEXhigh","fEYlow","fEYhigh","min","getHistRangeMargin","createHistogram","set_x","set_y","margin","dx","dy","uxmin","uxmax","minimum","maximum","_not_adjust_hrange","minimum0","maximum0","fMaximum","kNoZoom","fMinimum","_need_2dhist","clTH2I","clTH1I","fName","fBits","kNoStats","_own_histogram","setHistogramTitle","fTitle","fXaxis","fXmin","fXmax","fYaxis","unzoomUserRange","dox","doy","extractAxesProperties","canOptimize","settings","OptimizeDraw","optimizeBins","maxpnt","filter_func","selbins","isFunc","n","step","floor","optbins","needDrawFunc","func","clTPaveStats","TestBit","clTF1","clTF2","getTooltips","lines","funcs","get_main","getGrFuncs","gme","getObjectHint","axisAsText","x_handle","ny","fNYErrors","y_handle","pmain","getFramePainter","grx","gry","pp","rect","getPadRect","width","height","pad_layer","create","clTPad","pw","ph","fX1NDC","fX2NDC","fY1NDC","fY2NDC","getFrameWidth","getFrameHeight","value","fLogx","log10","fUxmin","fX1","fX2","fLogv","fLogy","fUymin","fY1","fY2","revertAxis","v","appendExclusion","is_curve","path","drawbins","excl_width","extrabins","dlen","sqrt","dgrx","dgry","path2","buildSvgCurve","cmd","line","draw_g","append","attr","call","fillatt","style","drawBins","w","h","lineatt","main_block","excl_side","path1","qubic","bins2","draw_kind","close_symbol","calc","elem","curvebins","nodes","pnt","i","grx1","round","gry1","grx0","grx2","gry0","gry2","grdx0","fEXlowd","grdx2","fEXhighd","grdy0","fEYlowd","grdy2","fEYhighd","selectAll","data","enter","makeTranslate","gStyle","fBarWidth","yy0","usefill","fp","fpcol","getFillColor","createAttFill","color","kBlack","kWhite","pattern","std","bar","dw","abs","filter","error_size","lw","fEndErrorSize","bb","vv","hh","vleft","vright","htop","hbottom","mainLine","fMarkerSize","visible","isBatchMode","Tooltip","error","createAttMarker","marker_size","markeratt","getFullSize","resetPos","want_tooltip","fill","hsz","maxnummarker","getMarkerLength","hints_marker","appendQQ","xqmin","scale_xmin","fXq1","xqmax","scale_xmax","fXq2","yqmin","scale_ymin","fYq1","yqmax","scale_ymax","fYq2","makeLine","x1","y1","x2","y2","yxmin","yxmax","latt1","createAttLine","latt2","drawBins3D","console","log","createGraphDrawAttributes","only_check_auto","o","getAutoColor","icolor","$num_graphs","_auto_exec","fFillColor","fLineColor","fMarkerColor","deleteAttr","can_excl","createG","used","fAttLine","fAttFill","sub_g","addMoveHandler","testEditable","assignContextMenu","extractTooltip","extractTooltipForPath","esz","isbar1","msize","findbin","best_dist2","best","each","d3_select","datum","dist2","nproc","marker","matchy","exact","title","color1","d3bin","user_info","cont","color2","menu","menu_dist","binindx","showTooltip","hint","ttrect","selectChild","remove","usepath","showTooltipForPath","addHighlightStyle","changed","property","processTooltipEvent","disabled","findBestBin","islines","dist","bestindx","bestbin","bestdist","radius","IsInside","bin0","posy","linex","liney","linedist","closeline","arg","InvertBit","ismark","getColor","ttbin","moveEnabled","moveStart","pos_dx","pos_dy","move_funcs","move_binindx","move_bin","move_x0","move_y0","moveDrag","moveEnd","not_changed","last","exec","changeBin","$redraw_pad","redrawPad","submitCanvExec","fillWebObjectOptions","fcust","fillContextMenuItems","snapid","addchk","executeMenuCommand","method","args","canp","getCanvPainter","_readonly","getLastEventPos","userx","usery","toFixed","$execid","_updateMembers","fFillStyle","fLineStyle","fLineWidth","updateObject","FunctionsHandler","fFunctions","canZoomInside","axis","clickButton","funcname","zoom","findFunc","find","findStat","createStat","stats","normal_canvas","create_stats","st","fOptStat","fOptFit","fBorderSize","fStatX","fStatW","fStatY","fStatH","fStatColor","fStatStyle","fTextAngle","fTextSize","fStatFontSize","fTextAlign","fTextColor","fStatTextColor","fTextFont","fStatFont","AddText","Add","fillStatistic","stat","_dostat","dofit","clearPave","fillFunctionStat","drawAxisHisto","_this2","TH1Painter","draw","getDom","_drawGraph","painter","DragGraphs","setSecondaryId","addToPadPrimitives"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist2d/TGraphPainter.mjs"],"sourcesContent":["import { gStyle, BIT, settings, create, createHistogram, setHistogramTitle, isFunc, isStr,\n         clTPaveStats, clTCutG, clTH1I, clTH2I, clTF1, clTF2, clTPad, kNoZoom, kNoStats } from '../core.mjs';\nimport { select as d3_select } from '../d3.mjs';\nimport { DrawOptions, buildSvgCurve, makeTranslate, addHighlightStyle } from '../base/BasePainter.mjs';\nimport { ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { FunctionsHandler } from './THistPainter.mjs';\nimport { TH1Painter, PadDrawOptions } from './TH1Painter.mjs';\nimport { kBlack, kWhite } from '../base/colors.mjs';\nimport { addMoveHandler } from '../gui/utils.mjs';\nimport { assignContextMenu } from '../gui/menu.mjs';\n\n\nconst kNotEditable = BIT(18),   // bit set if graph is non editable\n      clTGraphErrors = 'TGraphErrors',\n      clTGraphAsymmErrors = 'TGraphAsymmErrors',\n      clTGraphBentErrors = 'TGraphBentErrors',\n      clTGraphMultiErrors = 'TGraphMultiErrors';\n\n/**\n * @summary Painter for TGraph object.\n *\n * @private\n */\n\n\nclass TGraphPainter extends ObjectPainter {\n\n   constructor(dom, graph) {\n      super(dom, graph);\n      this.axes_draw = false; // indicate if graph histogram was drawn for axes\n      this.bins = null;\n      this.xmin = this.ymin = this.xmax = this.ymax = 0;\n      this.wheel_zoomy = true;\n      this.is_bent = (graph._typename === clTGraphBentErrors);\n      this.has_errors = (graph._typename === clTGraphErrors) ||\n                        (graph._typename === clTGraphMultiErrors) ||\n                        (graph._typename === clTGraphAsymmErrors) ||\n                         this.is_bent || graph._typename.match(/^RooHist/);\n   }\n\n   /** @summary Return drawn graph object */\n   getGraph() { return this.getObject(); }\n\n   /** @summary Return histogram object used for axis drawings */\n   getHistogram() { return this.getObject()?.fHistogram; }\n\n   /** @summary Set histogram object to graph */\n   setHistogram(histo) {\n      const obj = this.getObject();\n      if (obj) obj.fHistogram = histo;\n   }\n\n   /** @summary Redraw graph\n     * @desc may redraw histogram which was used to draw axes\n     * @return {Promise} for ready */\n   async redraw() {\n      let promise = Promise.resolve(true);\n\n      if (this.$redraw_hist) {\n         delete this.$redraw_hist;\n         const hist_painter = this.getMainPainter();\n         if (hist_painter?.isSecondary(this) && this.axes_draw)\n            promise = hist_painter.redraw();\n      }\n\n      return promise.then(() => this.drawGraph()).then(() => {\n         const res = this._funcHandler?.drawNext(0) ?? this;\n         delete this._funcHandler;\n         return res;\n      });\n   }\n\n   /** @summary Cleanup graph painter */\n   cleanup() {\n      delete this.interactive_bin; // break mouse handling\n      delete this.bins;\n      super.cleanup();\n   }\n\n   /** @summary Returns object if this drawing TGraphMultiErrors object */\n   get_gme() {\n      const graph = this.getGraph();\n      return graph?._typename === clTGraphMultiErrors ? graph : null;\n   }\n\n   /** @summary Decode options */\n   decodeOptions(opt, first_time) {\n      if (isStr(opt) && (opt.indexOf('same ') === 0))\n         opt = opt.slice(5);\n\n      const graph = this.getGraph(),\n          is_gme = !!this.get_gme(),\n          has_main = first_time ? !!this.getMainPainter() : !this.axes_draw;\n      let blocks_gme = [];\n\n      if (!this.options) this.options = {};\n\n      // decode main draw options for the graph\n      const decodeBlock = (d, res) => {\n         Object.assign(res, { Line: 0, Curve: 0, Rect: 0, Mark: 0, Bar: 0, OutRange: 0, EF: 0, Fill: 0, MainError: 1, Ends: 1, ScaleErrX: 1 });\n\n         if (is_gme && d.check('S=', true)) res.ScaleErrX = d.partAsFloat();\n\n         if (d.check('L')) res.Line = 1;\n         if (d.check('F')) res.Fill = 1;\n         if (d.check('CC')) res.Curve = 2; // draw all points without reduction\n         if (d.check('C')) res.Curve = 1;\n         if (d.check('*')) res.Mark = 103;\n         if (d.check('P0')) res.Mark = 104;\n         if (d.check('P')) res.Mark = 1;\n         if (d.check('B')) { res.Bar = 1; res.Errors = 0; }\n         if (d.check('Z')) { res.Errors = 1; res.Ends = 0; }\n         if (d.check('||')) { res.Errors = 1; res.MainError = 0; res.Ends = 1; }\n         if (d.check('[]')) { res.Errors = 1; res.MainError = 0; res.Ends = 2; }\n         if (d.check('|>')) { res.Errors = 1; res.Ends = 3; }\n         if (d.check('>')) { res.Errors = 1; res.Ends = 4; }\n         if (d.check('0')) { res.Mark = 1; res.Errors = 1; res.OutRange = 1; }\n         if (d.check('1')) if (res.Bar === 1) res.Bar = 2;\n         if (d.check('2')) { res.Rect = 1; res.Errors = 0; }\n         if (d.check('3')) { res.EF = 1; res.Errors = 0; }\n         if (d.check('4')) { res.EF = 2; res.Errors = 0; }\n         if (d.check('5')) { res.Rect = 2; res.Errors = 0; }\n         if (d.check('X')) res.Errors = 0;\n      };\n\n      Object.assign(this.options, { Axis: '', NoOpt: 0, PadStats: false, PadPalette: false, original: opt, second_x: false, second_y: false, individual_styles: false });\n\n      if (is_gme && opt) {\n         if (opt.indexOf(';') > 0) {\n            blocks_gme = opt.split(';');\n            opt = blocks_gme.shift();\n         } else if (opt.indexOf('_') > 0) {\n            blocks_gme = opt.split('_');\n            opt = blocks_gme.shift();\n         }\n      }\n\n      const res = this.options, _a = 'AXIS;FORCE_TITLE;';\n      let d = new DrawOptions(opt), hopt = '';\n\n      PadDrawOptions.forEach(name => { if (d.check(name)) hopt += ';' + name; });\n      if (d.check('XAXIS_', true)) hopt += ';XAXIS_' + d.part;\n      if (d.check('YAXIS_', true)) hopt += ';YAXIS_' + d.part;\n\n      if (d.empty()) {\n         res.original = has_main ? 'lp' : 'alp';\n         d = new DrawOptions(res.original);\n      }\n\n      if (d.check('NOOPT')) res.NoOpt = 1;\n\n      if (d.check('POS3D_', true)) res.pos3d = d.partAsInt() - 0.5;\n\n      if (d.check('PFC') && !res._pfc)\n         res._pfc = 2;\n      if (d.check('PLC') && !res._plc)\n         res._plc = 2;\n      if (d.check('PMC') && !res._pmc)\n         res._pmc = 2;\n\n      if (d.check('A')) res.Axis = d.check('I') ? 'A;' : _a; // I means invisible axis\n      if (d.check('X+')) { res.Axis += 'X+'; res.second_x = has_main; }\n      if (d.check('Y+')) { res.Axis += 'Y+'; res.second_y = has_main; }\n      if (d.check('RX')) res.Axis += 'RX';\n      if (d.check('RY')) res.Axis += 'RY';\n\n      if (is_gme) {\n         res.blocks = [];\n         res.skip_errors_x0 = res.skip_errors_y0 = false;\n         if (d.check('X0')) res.skip_errors_x0 = true;\n         if (d.check('Y0')) res.skip_errors_y0 = true;\n      }\n\n      decodeBlock(d, res);\n\n      if (is_gme)\n         if (d.check('S')) res.individual_styles = true;\n\n\n      // if (d.check('E')) res.Errors = 1; // E option only defined for TGraphPolar\n\n      if (res.Errors === undefined)\n         res.Errors = this.has_errors && (!is_gme || !blocks_gme.length) ? 1 : 0;\n\n      // special case - one could use svg:path to draw many pixels (\n      if ((res.Mark === 1) && (graph.fMarkerStyle === 1)) res.Mark = 101;\n\n      // if no drawing option is selected and if opt === '' nothing is done.\n      if (res.Line + res.Fill + res.Curve + res.Mark + res.Bar + res.EF + res.Rect + res.Errors === 0)\n         if (d.empty()) res.Line = 1;\n\n\n      if (this.matchObjectType(clTGraphErrors)) {\n         const len = graph.fEX.length;\n         let m = 0;\n         for (let k = 0; k < len; ++k)\n            m = Math.max(m, graph.fEX[k], graph.fEY[k]);\n         if (m < 1e-100)\n            res.Errors = 0;\n      }\n\n      this._cutg = this.matchObjectType(clTCutG);\n      this._cutg_lastsame = this._cutg && (graph.fNpoints > 3) &&\n                            (graph.fX[0] === graph.fX[graph.fNpoints-1]) && (graph.fY[0] === graph.fY[graph.fNpoints-1]);\n\n      if (!res.Axis) {\n         // check if axis should be drawn\n         // either graph drawn directly or\n         // graph is first object in list of primitives\n         const pad = this.getPadPainter()?.getRootPad(true);\n         if (!pad || (pad?.fPrimitives?.arr[0] === this.getObject())) res.Axis = _a;\n      } else if (res.Axis.indexOf('A') < 0)\n         res.Axis = _a + res.Axis;\n\n      res.Axis += hopt;\n\n      for (let bl = 0; bl < blocks_gme.length; ++bl) {\n         const subd = new DrawOptions(blocks_gme[bl]), subres = {};\n         decodeBlock(subd, subres);\n         subres.skip_errors_x0 = res.skip_errors_x0;\n         subres.skip_errors_y0 = res.skip_errors_y0;\n         res.blocks.push(subres);\n      }\n   }\n\n   /** @summary Extract errors for TGraphMultiErrors */\n   extractGmeErrors(nblock) {\n      if (!this.bins) return;\n      const gr = this.getGraph();\n      this.bins.forEach(bin => {\n         bin.eylow = gr.fEyL[nblock][bin.indx];\n         bin.eyhigh = gr.fEyH[nblock][bin.indx];\n      });\n   }\n\n   /** @summary Create bins for TF1 drawing */\n   createBins() {\n      const gr = this.getGraph();\n      if (!gr) return;\n\n      let kind = 0, npoints = gr.fNpoints;\n      if (this._cutg && this._cutg_lastsame)\n         npoints--;\n\n      if (gr._typename === clTGraphErrors)\n         kind = 1;\n      else if (gr._typename === clTGraphMultiErrors)\n         kind = 2;\n      else if (gr._typename === clTGraphAsymmErrors || gr._typename === clTGraphBentErrors || gr._typename.match(/^RooHist/))\n         kind = 3;\n\n      this.bins = new Array(npoints);\n\n      for (let p = 0; p < npoints; ++p) {\n         const bin = this.bins[p] = { x: gr.fX[p], y: gr.fY[p], indx: p };\n         switch (kind) {\n            case 1:\n               bin.exlow = bin.exhigh = gr.fEX[p];\n               bin.eylow = bin.eyhigh = gr.fEY[p];\n               break;\n            case 2:\n               bin.exlow = gr.fExL[p];\n               bin.exhigh = gr.fExH[p];\n               bin.eylow = gr.fEyL[0][p];\n               bin.eyhigh = gr.fEyH[0][p];\n               break;\n            case 3:\n               bin.exlow = gr.fEXlow[p];\n               bin.exhigh = gr.fEXhigh[p];\n               bin.eylow = gr.fEYlow[p];\n               bin.eyhigh = gr.fEYhigh[p];\n               break;\n         }\n\n         if (p === 0) {\n            this.xmin = this.xmax = bin.x;\n            this.ymin = this.ymax = bin.y;\n         }\n\n         if (kind > 0) {\n            this.xmin = Math.min(this.xmin, bin.x - bin.exlow, bin.x + bin.exhigh);\n            this.xmax = Math.max(this.xmax, bin.x - bin.exlow, bin.x + bin.exhigh);\n            this.ymin = Math.min(this.ymin, bin.y - bin.eylow, bin.y + bin.eyhigh);\n            this.ymax = Math.max(this.ymax, bin.y - bin.eylow, bin.y + bin.eyhigh);\n         } else {\n            this.xmin = Math.min(this.xmin, bin.x);\n            this.xmax = Math.max(this.xmax, bin.x);\n            this.ymin = Math.min(this.ymin, bin.y);\n            this.ymax = Math.max(this.ymax, bin.y);\n         }\n      }\n   }\n\n   /** @summary Return margins for histogram ranges */\n   getHistRangeMargin() { return 0.1; }\n\n   /** @summary Create histogram for graph\n     * @desc graph bins should be created when calling this function\n     * @param {boolean} [set_x] - set X axis range\n     * @param {boolean} [set_y] - set Y axis range */\n   createHistogram(set_x, set_y) {\n      if (!set_x && !set_y)\n         set_x = set_y = true;\n\n      const graph = this.getGraph(),\n            xmin = this.xmin,\n            margin = this.getHistRangeMargin();\n      let xmax = this.xmax, ymin = this.ymin, ymax = this.ymax;\n\n      if (xmin >= xmax) xmax = xmin + 1;\n      if (ymin >= ymax) ymax = ymin + 1;\n      const dx = (xmax - xmin) * margin, dy = (ymax - ymin) * margin;\n      let uxmin = xmin - dx, uxmax = xmax + dx,\n          minimum = ymin - dy, maximum = ymax + dy;\n\n      if (!this._not_adjust_hrange) {\n         if ((uxmin < 0) && (xmin >= 0))\n            uxmin = xmin * (1 - margin);\n         if ((uxmax > 0) && (xmax <= 0))\n            uxmax = 0;\n      }\n\n      const minimum0 = minimum, maximum0 = maximum;\n      let histo = this.getHistogram();\n\n      if (!histo) {\n         histo = this._need_2dhist ? createHistogram(clTH2I, 30, 30) : createHistogram(clTH1I, 100);\n         histo.fName = graph.fName + '_h';\n         histo.fBits |= kNoStats;\n         this._own_histogram = true;\n         this.setHistogram(histo);\n      } else if ((histo.fMaximum !== kNoZoom) && (histo.fMinimum !== kNoZoom)) {\n         minimum = histo.fMinimum;\n         maximum = histo.fMaximum;\n      }\n\n      if (graph.fMinimum !== kNoZoom) minimum = ymin = graph.fMinimum;\n      if (graph.fMaximum !== kNoZoom) maximum = graph.fMaximum;\n      if ((minimum < 0) && (ymin >= 0)) minimum = (1 - margin)*ymin;\n\n      setHistogramTitle(histo, this.getObject().fTitle);\n\n      if (set_x) {\n         histo.fXaxis.fXmin = uxmin;\n         histo.fXaxis.fXmax = uxmax;\n      }\n\n      if (set_y) {\n         histo.fYaxis.fXmin = Math.min(minimum0, minimum);\n         histo.fYaxis.fXmax = Math.max(maximum0, maximum);\n         histo.fMinimum = minimum;\n         histo.fMaximum = maximum;\n      }\n\n      return histo;\n   }\n\n   /** @summary Check if user range can be unzommed\n     * @desc Used when graph points covers larger range than provided histogram */\n   unzoomUserRange(dox, doy /*, doz */) {\n      const graph = this.getGraph();\n      if (this._own_histogram || !graph) return false;\n\n      const histo = this.getHistogram();\n\n      dox = dox && histo && ((histo.fXaxis.fXmin > this.xmin) || (histo.fXaxis.fXmax < this.xmax));\n      doy = doy && histo && ((histo.fYaxis.fXmin > this.ymin) || (histo.fYaxis.fXmax < this.ymax));\n      if (!dox && !doy) return false;\n\n      this.createHistogram(dox, doy);\n      this.getMainPainter()?.extractAxesProperties(1); // just to enforce ranges extraction\n\n      return true;\n   }\n\n   /** @summary Returns true if graph drawing can be optimize */\n   canOptimize() {\n      return (settings.OptimizeDraw > 0) && !this.options.NoOpt;\n   }\n\n   /** @summary Returns optimized bins - if optimization enabled */\n   optimizeBins(maxpnt, filter_func) {\n      if ((this.bins.length < 30) && !filter_func)\n         return this.bins;\n\n      let selbins = null;\n      if (isFunc(filter_func)) {\n         for (let n = 0; n < this.bins.length; ++n) {\n            if (filter_func(this.bins[n], n)) {\n               if (!selbins) selbins = (n === 0) ? [] : this.bins.slice(0, n);\n            } else\n               if (selbins) selbins.push(this.bins[n]);\n         }\n      }\n      if (!selbins) selbins = this.bins;\n\n      if (!maxpnt) maxpnt = 500000;\n\n      if ((selbins.length < maxpnt) || !this.canOptimize()) return selbins;\n      let step = Math.floor(selbins.length / maxpnt);\n      if (step < 2) step = 2;\n      const optbins = [];\n      for (let n = 0; n < selbins.length; n+=step)\n         optbins.push(selbins[n]);\n\n      return optbins;\n   }\n\n   /** @summary Check if such function should be drawn directly */\n   needDrawFunc(graph, func) {\n      if (func._typename === clTPaveStats)\n          return (func.fName !== 'stats') || !graph.TestBit(kNoStats); // kNoStats is same for graph and histogram\n\n       if ((func._typename === clTF1) || (func._typename === clTF2))\n          return !func.TestBit(BIT(9)); // TF1::kNotDraw\n\n       return true;\n   }\n\n   /** @summary Returns tooltip for specified bin */\n   getTooltips(d) {\n      const pmain = this.get_main(), lines = [],\n          funcs = pmain.getGrFuncs(this.options.second_x, this.options.second_y),\n          gme = this.get_gme();\n\n      lines.push(this.getObjectHint());\n\n      if (d && funcs) {\n         if (d.indx !== undefined)\n            lines.push('p = ' + d.indx);\n         lines.push('x = ' + funcs.axisAsText('x', d.x), 'y = ' + funcs.axisAsText('y', d.y));\n         if (gme)\n            lines.push('error x = -' + funcs.axisAsText('x', gme.fExL[d.indx]) + '/+' + funcs.axisAsText('x', gme.fExH[d.indx]));\n         else if (this.options.Errors && (funcs.x_handle.kind === 'normal') && (d.exlow || d.exhigh))\n            lines.push('error x = -' + funcs.axisAsText('x', d.exlow) + '/+' + funcs.axisAsText('x', d.exhigh));\n\n         if (gme) {\n            for (let ny = 0; ny < gme.fNYErrors; ++ny)\n               lines.push(`error y${ny} = -${funcs.axisAsText('y', gme.fEyL[ny][d.indx])}/+${funcs.axisAsText('y', gme.fEyH[ny][d.indx])}`);\n         } else if ((this.options.Errors || (this.options.EF > 0)) && (funcs.y_handle.kind === 'normal') && (d.eylow || d.eyhigh))\n            lines.push('error y = -' + funcs.axisAsText('y', d.eylow) + '/+' + funcs.axisAsText('y', d.eyhigh));\n      }\n      return lines;\n   }\n\n   /** @summary Provide frame painter for graph\n     * @desc If not exists, emulate its behaviour */\n   get_main() {\n      let pmain = this.getFramePainter();\n\n      if (pmain?.grx && pmain?.gry) return pmain;\n\n      // FIXME: check if needed, can be removed easily\n      const pp = this.getPadPainter(),\n            rect = pp?.getPadRect() || { width: 800, height: 600 };\n\n      pmain = {\n          pad_layer: true,\n          pad: pp?.getRootPad(true) ?? create(clTPad),\n          pw: rect.width,\n          ph: rect.height,\n          fX1NDC: 0.1, fX2NDC: 0.9, fY1NDC: 0.1, fY2NDC: 0.9,\n          getFrameWidth() { return this.pw; },\n          getFrameHeight() { return this.ph; },\n          grx(value) {\n             if (this.pad.fLogx)\n                value = (value > 0) ? Math.log10(value) : this.pad.fUxmin;\n             else\n                value = (value - this.pad.fX1) / (this.pad.fX2 - this.pad.fX1);\n             return value * this.pw;\n          },\n          gry(value) {\n             if (this.pad.fLogv ?? this.pad.fLogy)\n                value = (value > 0) ? Math.log10(value) : this.pad.fUymin;\n             else\n                value = (value - this.pad.fY1) / (this.pad.fY2 - this.pad.fY1);\n             return (1 - value) * this.ph;\n          },\n          revertAxis(name, v) {\n            if (name === 'x')\n               return v / this.pw * (this.pad.fX2 - this.pad.fX1) + this.pad.fX1;\n            if (name === 'y')\n               return (1 - v / this.ph) * (this.pad.fY2 - this.pad.fY1) + this.pad.fY1;\n            return v;\n          },\n          getGrFuncs() { return this; }\n      };\n\n      return pmain.pad ? pmain : null;\n   }\n\n   /** @summary append exclusion area to created path */\n   appendExclusion(is_curve, path, drawbins, excl_width) {\n      const extrabins = [];\n      for (let n = drawbins.length-1; n >= 0; --n) {\n         const bin = drawbins[n],\n             dlen = Math.sqrt(bin.dgrx**2 + bin.dgry**2);\n         if (dlen > 1e-10) {\n            // shift point\n            bin.grx += excl_width*bin.dgry/dlen;\n            bin.gry -= excl_width*bin.dgrx/dlen;\n         }\n         extrabins.push(bin);\n      }\n\n      const path2 = buildSvgCurve(extrabins, { cmd: 'L', line: !is_curve });\n\n      this.draw_g.append('svg:path')\n                 .attr('d', path + path2 + 'Z')\n                 .call(this.fillatt.func)\n                 .style('opacity', 0.75);\n   }\n\n   /** @summary draw TGraph bins with specified options\n     * @desc Can be called several times */\n   drawBins(funcs, options, draw_g, w, h, lineatt, fillatt, main_block) {\n      const graph = this.getGraph();\n      if (!graph?.fNpoints) return;\n\n      let excl_width = 0, drawbins = null;\n\n      if (main_block && lineatt.excl_side) {\n         excl_width = lineatt.excl_width;\n         if ((lineatt.width > 0) && !options.Line && !options.Curve) options.Line = 1;\n      }\n\n      if (options.EF) {\n         drawbins = this.optimizeBins((options.EF > 1) ? 20000 : 0);\n\n         // build lower part\n         for (let n = 0; n < drawbins.length; ++n) {\n            const bin = drawbins[n];\n            bin.grx = funcs.grx(bin.x);\n            bin.gry = funcs.gry(bin.y - bin.eylow);\n         }\n\n         const path1 = buildSvgCurve(drawbins, { line: options.EF < 2, qubic: true }),\n             bins2 = [];\n\n         for (let n = drawbins.length-1; n >= 0; --n) {\n            const bin = drawbins[n];\n            bin.gry = funcs.gry(bin.y + bin.eyhigh);\n            bins2.push(bin);\n         }\n\n         // build upper part (in reverse direction)\n         const path2 = buildSvgCurve(bins2, { line: options.EF < 2, cmd: 'L', qubic: true });\n\n         draw_g.append('svg:path')\n               .attr('d', path1 + path2 + 'Z')\n               .call(fillatt.func);\n         if (main_block)\n            this.draw_kind = 'lines';\n      }\n\n      if (options.Line || options.Fill) {\n         let close_symbol = '';\n         if (this._cutg) {\n            close_symbol = 'Z';\n            if (!options.original) options.Fill = 1;\n         }\n\n         if (options.Fill) {\n            close_symbol = 'Z'; // always close area if we want to fill it\n            excl_width = 0;\n         }\n\n         if (!drawbins) drawbins = this.optimizeBins(0);\n\n         for (let n = 0; n < drawbins.length; ++n) {\n            const bin = drawbins[n];\n            bin.grx = funcs.grx(bin.x);\n            bin.gry = funcs.gry(bin.y);\n         }\n\n         const path = buildSvgCurve(drawbins, { line: true, calc: excl_width });\n\n         if (excl_width)\n             this.appendExclusion(false, path, drawbins, excl_width);\n\n         const elem = draw_g.append('svg:path').attr('d', path + close_symbol);\n         if (options.Line)\n            elem.call(lineatt.func);\n\n         if (options.Fill)\n            elem.call(fillatt.func);\n         else\n            elem.style('fill', 'none');\n\n         if (main_block)\n            this.draw_kind = 'lines';\n      }\n\n      if (options.Curve) {\n         let curvebins = drawbins;\n         if ((this.draw_kind !== 'lines') || !curvebins || ((options.Curve === 1) && (curvebins.length > 20000))) {\n            curvebins = this.optimizeBins((options.Curve === 1) ? 20000 : 0);\n            for (let n = 0; n < curvebins.length; ++n) {\n               const bin = curvebins[n];\n               bin.grx = funcs.grx(bin.x);\n               bin.gry = funcs.gry(bin.y);\n            }\n         }\n\n         const path = buildSvgCurve(curvebins, { qubic: !excl_width });\n         if (excl_width)\n            this.appendExclusion(true, path, curvebins, excl_width);\n\n         draw_g.append('svg:path')\n               .attr('d', path)\n               .call(lineatt.func)\n               .style('fill', 'none');\n         if (main_block)\n            this.draw_kind = 'lines'; // handled same way as lines\n      }\n\n      let nodes = null;\n\n      if (options.Errors || options.Rect || options.Bar) {\n         drawbins = this.optimizeBins(5000, (pnt, i) => {\n            const grx = funcs.grx(pnt.x);\n\n            // when drawing bars, take all points\n            if (!options.Bar && ((grx < 0) || (grx > w))) return true;\n\n            const gry = funcs.gry(pnt.y);\n\n            if (!options.Bar && !options.OutRange && ((gry < 0) || (gry > h))) return true;\n\n            pnt.grx1 = Math.round(grx);\n            pnt.gry1 = Math.round(gry);\n\n            if (this.has_errors) {\n               pnt.grx0 = Math.round(funcs.grx(pnt.x - options.ScaleErrX*pnt.exlow) - grx);\n               pnt.grx2 = Math.round(funcs.grx(pnt.x + options.ScaleErrX*pnt.exhigh) - grx);\n               pnt.gry0 = Math.round(funcs.gry(pnt.y - pnt.eylow) - gry);\n               pnt.gry2 = Math.round(funcs.gry(pnt.y + pnt.eyhigh) - gry);\n\n               if (this.is_bent) {\n                  pnt.grdx0 = Math.round(funcs.gry(pnt.y + graph.fEXlowd[i]) - gry);\n                  pnt.grdx2 = Math.round(funcs.gry(pnt.y + graph.fEXhighd[i]) - gry);\n                  pnt.grdy0 = Math.round(funcs.grx(pnt.x + graph.fEYlowd[i]) - grx);\n                  pnt.grdy2 = Math.round(funcs.grx(pnt.x + graph.fEYhighd[i]) - grx);\n               } else\n                  pnt.grdx0 = pnt.grdx2 = pnt.grdy0 = pnt.grdy2 = 0;\n            }\n\n            return false;\n         });\n\n         if (main_block)\n            this.draw_kind = 'nodes';\n\n         nodes = draw_g.selectAll('.grpoint')\n                       .data(drawbins)\n                       .enter()\n                       .append('svg:g')\n                       .attr('class', 'grpoint')\n                       .attr('transform', d => makeTranslate(d.grx1, d.gry1));\n      }\n\n      if (options.Bar) {\n         // calculate bar width\n\n         let xmin = 0, xmax = 0;\n         for (let i = 0; i < drawbins.length; ++i) {\n            if (i === 0)\n               xmin = xmax = drawbins[i].grx1;\n            else {\n               xmin = Math.min(xmin, drawbins[i].grx1);\n               xmax = Math.max(xmax, drawbins[i].grx1);\n            }\n         }\n\n         if (drawbins.length === 1)\n            drawbins[0].width = w/4; // pathologic case of single bin\n         else {\n            for (let i = 0; i < drawbins.length; ++i)\n               drawbins[i].width = (xmax - xmin) / drawbins.length * gStyle.fBarWidth;\n         }\n\n         const yy0 = Math.round(funcs.gry(0));\n         let usefill = fillatt;\n\n         if (main_block) {\n            const fp = this.getFramePainter(),\n                  fpcol = !fp?.fillatt?.empty() ? fp.fillatt.getFillColor() : -1;\n\n            if (fpcol === fillatt.getFillColor())\n               usefill = this.createAttFill({ color: fpcol === 'white' ? kBlack : kWhite, pattern: 1001, std: false });\n         }\n\n         nodes.append('svg:path')\n              .attr('d', d => {\n                 d.bar = true; // element drawn as bar\n                 const dx = d.width > 1 ? Math.round(-d.width/2) : 0,\n                       dw = d.width > 1 ? Math.round(d.width) : 1,\n                       dy = (options.Bar !== 1) ? 0 : ((d.gry1 > yy0) ? yy0-d.gry1 : 0),\n                       dh = (options.Bar !== 1) ? (h > d.gry1 ? h - d.gry1 : 0) : Math.abs(yy0 - d.gry1);\n                 return `M${dx},${dy}h${dw}v${dh}h${-dw}z`;\n              })\n            .call(usefill.func);\n      }\n\n      if (options.Rect) {\n         nodes.filter(d => (d.exlow > 0) && (d.exhigh > 0) && (d.eylow > 0) && (d.eyhigh > 0))\n           .append('svg:path')\n           .attr('d', d => {\n               d.rect = true;\n               return `M${d.grx0},${d.gry0}H${d.grx2}V${d.gry2}H${d.grx0}Z`;\n            })\n           .call(fillatt.func)\n           .call(options.Rect === 2 ? lineatt.func : () => {});\n      }\n\n      this.error_size = 0;\n\n      if (options.Errors) {\n         // to show end of error markers, use line width attribute\n         let lw = lineatt.width + gStyle.fEndErrorSize, bb = 0;\n         const vv = options.Ends ? `m0,${lw}v${-2*lw}` : '',\n               hh = options.Ends ? `m${lw},0h${-2*lw}` : '';\n         let vleft = vv, vright = vv, htop = hh, hbottom = hh;\n\n         const mainLine = (dx, dy) => {\n            if (!options.MainError) return `M${dx},${dy}`;\n            const res = 'M0,0';\n            if (dx) return res + (dy ? `L${dx},${dy}` : `H${dx}`);\n            return dy ? res + `V${dy}` : res;\n         };\n\n         switch (options.Ends) {\n            case 2:  // option []\n               bb = Math.max(lineatt.width+1, Math.round(lw*0.66));\n               vleft = `m${bb},${lw}h${-bb}v${-2*lw}h${bb}`;\n               vright = `m${-bb},${lw}h${bb}v${-2*lw}h${-bb}`;\n               htop = `m${-lw},${bb}v${-bb}h${2*lw}v${bb}`;\n               hbottom = `m${-lw},${-bb}v${bb}h${2*lw}v${-bb}`;\n               break;\n            case 3: // option |>\n               lw = Math.max(lw, Math.round(graph.fMarkerSize*8*0.66));\n               bb = Math.max(lineatt.width+1, Math.round(lw*0.66));\n               vleft = `l${bb},${lw}v${-2*lw}l${-bb},${lw}`;\n               vright = `l${-bb},${lw}v${-2*lw}l${bb},${lw}`;\n               htop = `l${-lw},${bb}h${2*lw}l${-lw},${-bb}`;\n               hbottom = `l${-lw},${-bb}h${2*lw}l${-lw},${bb}`;\n               break;\n            case 4: // option >\n               lw = Math.max(lw, Math.round(graph.fMarkerSize*8*0.66));\n               bb = Math.max(lineatt.width+1, Math.round(lw*0.66));\n               vleft = `l${bb},${lw}m0,${-2*lw}l${-bb},${lw}`;\n               vright = `l${-bb},${lw}m0,${-2*lw}l${bb},${lw}`;\n               htop = `l${-lw},${bb}m${2*lw},0l${-lw},${-bb}`;\n               hbottom = `l${-lw},${-bb}m${2*lw},0l${-lw},${bb}`;\n               break;\n         }\n\n         this.error_size = lw;\n\n         lw = Math.floor((lineatt.width-1)/2); // one should take into account half of end-cup line width\n\n         let visible = nodes.filter(d => (d.exlow > 0) || (d.exhigh > 0) || (d.eylow > 0) || (d.eyhigh > 0));\n         if (options.skip_errors_x0 || options.skip_errors_y0)\n            visible = visible.filter(d => ((d.x !== 0) || !options.skip_errors_x0) && ((d.y !== 0) || !options.skip_errors_y0));\n\n         if (!this.isBatchMode() && settings.Tooltip && main_block) {\n            visible.append('svg:path')\n                   .style('fill', 'none')\n                   .style('pointer-events', 'visibleFill')\n                   .attr('d', d => `M${d.grx0},${d.gry0}h${d.grx2-d.grx0}v${d.gry2-d.gry0}h${d.grx0-d.grx2}z`);\n         }\n\n         visible.append('svg:path')\n             .call(lineatt.func)\n             .style('fill', 'none')\n             .attr('d', d => {\n                d.error = true;\n                return ((d.exlow > 0) ? mainLine(d.grx0+lw, d.grdx0) + vleft : '') +\n                       ((d.exhigh > 0) ? mainLine(d.grx2-lw, d.grdx2) + vright : '') +\n                       ((d.eylow > 0) ? mainLine(d.grdy0, d.gry0-lw) + hbottom : '') +\n                       ((d.eyhigh > 0) ? mainLine(d.grdy2, d.gry2+lw) + htop : '');\n              });\n      }\n\n      if (options.Mark) {\n         // for tooltips use markers only if nodes were not created\n         this.createAttMarker({ attr: graph, style: options.Mark - 100 });\n\n         this.marker_size = this.markeratt.getFullSize();\n\n         this.markeratt.resetPos();\n\n         const want_tooltip = !this.isBatchMode() && settings.Tooltip && (!this.markeratt.fill || (this.marker_size < 7)) && !nodes && main_block,\n               hsz = Math.max(5, Math.round(this.marker_size*0.7)),\n               maxnummarker = 1000000 / (this.markeratt.getMarkerLength() + 7); // let produce SVG at maximum 1MB\n\n         let path = '', pnt, grx, gry,\n             hints_marker = '', step = 1;\n\n         if (!drawbins)\n            drawbins = this.optimizeBins(maxnummarker);\n         else if (this.canOptimize() && (drawbins.length > 1.5*maxnummarker))\n            step = Math.min(2, Math.round(drawbins.length/maxnummarker));\n\n         for (let n = 0; n < drawbins.length; n += step) {\n            pnt = drawbins[n];\n            grx = funcs.grx(pnt.x);\n            if ((grx > -this.marker_size) && (grx < w + this.marker_size)) {\n               gry = funcs.gry(pnt.y);\n               if ((gry > -this.marker_size) && (gry < h + this.marker_size)) {\n                  path += this.markeratt.create(grx, gry);\n                  if (want_tooltip) hints_marker += `M${grx-hsz},${gry-hsz}h${2*hsz}v${2*hsz}h${-2*hsz}z`;\n               }\n            }\n         }\n\n         if (path) {\n            draw_g.append('svg:path')\n                  .attr('d', path)\n                  .call(this.markeratt.func);\n            if ((nodes === null) && (this.draw_kind === 'none') && main_block)\n               this.draw_kind = (options.Mark === 101) ? 'path' : 'mark';\n         }\n         if (want_tooltip && hints_marker) {\n            draw_g.append('svg:path')\n                  .attr('d', hints_marker)\n                  .style('fill', 'none')\n                  .style('pointer-events', 'visibleFill');\n         }\n      }\n   }\n\n   /** @summary append TGraphQQ part */\n   appendQQ(funcs, graph) {\n      const xqmin = Math.max(funcs.scale_xmin, graph.fXq1),\n            xqmax = Math.min(funcs.scale_xmax, graph.fXq2),\n            yqmin = Math.max(funcs.scale_ymin, graph.fYq1),\n            yqmax = Math.min(funcs.scale_ymax, graph.fYq2),\n            makeLine = (x1, y1, x2, y2) => `M${funcs.grx(x1)},${funcs.gry(y1)}L${funcs.grx(x2)},${funcs.gry(y2)}`,\n            yxmin = (graph.fYq2 - graph.fYq1)*(funcs.scale_xmin-graph.fXq1)/(graph.fXq2-graph.fXq1) + graph.fYq1,\n            yxmax = (graph.fYq2-graph.fYq1)*(funcs.scale_xmax-graph.fXq1)/(graph.fXq2-graph.fXq1) + graph.fYq1;\n\n      let path2 = '';\n      if (yxmin < funcs.scale_ymin) {\n         const xymin = (graph.fXq2 - graph.fXq1)*(funcs.scale_ymin-graph.fYq1)/(graph.fYq2-graph.fYq1) + graph.fXq1;\n         path2 = makeLine(xymin, funcs.scale_ymin, xqmin, yqmin);\n      } else\n         path2 = makeLine(funcs.scale_xmin, yxmin, xqmin, yqmin);\n\n\n      if (yxmax > funcs.scale_ymax) {\n         const xymax = (graph.fXq2-graph.fXq1)*(funcs.scale_ymax-graph.fYq1)/(graph.fYq2-graph.fYq1) + graph.fXq1;\n         path2 += makeLine(xqmax, yqmax, xymax, funcs.scale_ymax);\n      } else\n         path2 += makeLine(xqmax, yqmax, funcs.scale_xmax, yxmax);\n\n\n      const latt1 = this.createAttLine({ style: 1, width: 1, color: kBlack, std: false }),\n            latt2 = this.createAttLine({ style: 2, width: 1, color: kBlack, std: false });\n\n      this.draw_g.append('path')\n                 .attr('d', makeLine(xqmin, yqmin, xqmax, yqmax))\n                 .call(latt1.func)\n                 .style('fill', 'none');\n\n      this.draw_g.append('path')\n                 .attr('d', path2)\n                 .call(latt2.func)\n                 .style('fill', 'none');\n   }\n\n   drawBins3D(/* fp, graph */) {\n      console.log('Load ./hist/TGraphPainter.mjs to draw graph in 3D');\n   }\n\n   /** @summary Create necessary histogram draw attributes */\n   createGraphDrawAttributes(only_check_auto) {\n      const graph = this.getGraph(), o = this.options;\n      if (o._pfc > 1 || o._plc > 1 || o._pmc > 1) {\n         const pp = this.getPadPainter();\n         if (isFunc(pp?.getAutoColor)) {\n            const icolor = pp.getAutoColor(graph.$num_graphs);\n            this._auto_exec = ''; // can be reused when sending option back to server\n            if (o._pfc > 1) { o._pfc = 1; graph.fFillColor = icolor; this._auto_exec += `SetFillColor(${icolor});;`; delete this.fillatt; }\n            if (o._plc > 1) { o._plc = 1; graph.fLineColor = icolor; this._auto_exec += `SetLineColor(${icolor});;`; delete this.lineatt; }\n            if (o._pmc > 1) { o._pmc = 1; graph.fMarkerColor = icolor; this._auto_exec += `SetMarkerColor(${icolor});;`; delete this.markeratt; }\n         }\n      }\n\n      if (only_check_auto)\n         this.deleteAttr();\n      else {\n         this.createAttLine({ attr: graph, can_excl: true });\n         this.createAttFill({ attr: graph });\n      }\n   }\n\n   /** @summary draw TGraph */\n   drawGraph() {\n      const pmain = this.get_main(),\n            graph = this.getGraph();\n      if (!pmain) return;\n\n      // special mode for TMultiGraph 3d drawing\n      if (this.options.pos3d)\n         return this.drawBins3D(pmain, graph);\n\n      const is_gme = !!this.get_gme(),\n            funcs = pmain.getGrFuncs(this.options.second_x, this.options.second_y),\n            w = pmain.getFrameWidth(),\n            h = pmain.getFrameHeight();\n\n      this.createG(!pmain.pad_layer);\n\n      this.createGraphDrawAttributes();\n\n      this.fillatt.used = false; // mark used only when really used\n\n      this.draw_kind = 'none'; // indicate if special svg:g were created for each bin\n      this.marker_size = 0; // indicate if markers are drawn\n      const draw_g = is_gme ? this.draw_g.append('svg:g') : this.draw_g;\n\n      this.drawBins(funcs, this.options, draw_g, w, h, this.lineatt, this.fillatt, true);\n\n      if (graph._typename === 'TGraphQQ')\n         this.appendQQ(funcs, graph);\n\n      if (is_gme) {\n         for (let k = 0; k < graph.fNYErrors; ++k) {\n            let lineatt = this.lineatt, fillatt = this.fillatt;\n            if (this.options.individual_styles) {\n               lineatt = this.createAttLine({ attr: graph.fAttLine[k], std: false });\n               fillatt = this.createAttFill({ attr: graph.fAttFill[k], std: false });\n            }\n            const sub_g = this.draw_g.append('svg:g'),\n                options = (k < this.options.blocks.length) ? this.options.blocks[k] : this.options;\n            this.extractGmeErrors(k);\n            this.drawBins(funcs, options, sub_g, w, h, lineatt, fillatt);\n         }\n         this.extractGmeErrors(0); // ensure that first block kept at the end\n      }\n\n      if (!this.isBatchMode()) {\n         addMoveHandler(this, this.testEditable());\n         assignContextMenu(this);\n      }\n   }\n\n   /** @summary Provide tooltip at specified point */\n   extractTooltip(pnt) {\n      if (!pnt) return null;\n\n      if ((this.draw_kind === 'lines') || (this.draw_kind === 'path') || (this.draw_kind === 'mark'))\n         return this.extractTooltipForPath(pnt);\n\n      if (this.draw_kind !== 'nodes') return null;\n\n      const pmain = this.get_main(),\n            height = pmain.getFrameHeight(),\n            esz = this.error_size,\n            isbar1 = (this.options.Bar === 1),\n            funcs = isbar1 ? pmain.getGrFuncs(this.options.second_x, this.options.second_y) : null,\n            msize = this.marker_size ? Math.round(this.marker_size/2 + 1.5) : 0;\n      let findbin = null, best_dist2 = 1e10, best = null;\n\n      this.draw_g.selectAll('.grpoint').each(function() {\n         const d = d3_select(this).datum();\n         if (d === undefined) return;\n         let dist2 = (pnt.x - d.grx1) ** 2;\n         if (pnt.nproc === 1) dist2 += (pnt.y - d.gry1) ** 2;\n         if (dist2 >= best_dist2) return;\n\n         let rect;\n\n         if (d.error || d.rect || d.marker) {\n            rect = { x1: Math.min(-esz, d.grx0, -msize),\n                     x2: Math.max(esz, d.grx2, msize),\n                     y1: Math.min(-esz, d.gry2, -msize),\n                     y2: Math.max(esz, d.gry0, msize) };\n         } else if (d.bar) {\n             rect = { x1: -d.width/2, x2: d.width/2, y1: 0, y2: height - d.gry1 };\n\n             if (isbar1) {\n                const yy0 = funcs.gry(0);\n                rect.y1 = (d.gry1 > yy0) ? yy0-d.gry1 : 0;\n                rect.y2 = (d.gry1 > yy0) ? 0 : yy0-d.gry1;\n             }\n          } else\n             rect = { x1: -5, x2: 5, y1: -5, y2: 5 };\n\n          const matchx = (pnt.x >= d.grx1 + rect.x1) && (pnt.x <= d.grx1 + rect.x2),\n              matchy = (pnt.y >= d.gry1 + rect.y1) && (pnt.y <= d.gry1 + rect.y2);\n\n          if (matchx && (matchy || (pnt.nproc > 1))) {\n             best_dist2 = dist2;\n             findbin = this;\n             best = rect;\n             best.exact = /* matchx && */ matchy;\n          }\n       });\n\n      if (findbin === null) return null;\n\n      const d = d3_select(findbin).datum(),\n            gr = this.getGraph(),\n            res = { name: gr.fName, title: gr.fTitle,\n                    x: d.grx1, y: d.gry1,\n                    color1: this.lineatt.color,\n                    lines: this.getTooltips(d),\n                    rect: best, d3bin: findbin };\n\n       res.user_info = { obj: gr, name: gr.fName, bin: d.indx, cont: d.y, grx: d.grx1, gry: d.gry1 };\n\n      if (this.fillatt?.used && !this.fillatt?.empty())\n         res.color2 = this.fillatt.getFillColor();\n\n      if (best.exact) res.exact = true;\n      res.menu = res.exact; // activate menu only when exactly locate bin\n      res.menu_dist = 3; // distance always fixed\n      res.bin = d;\n      res.binindx = d.indx;\n\n      return res;\n   }\n\n   /** @summary Show tooltip */\n   showTooltip(hint) {\n      let ttrect = this.draw_g?.selectChild('.tooltip_bin');\n\n      if (!hint || !this.draw_g) {\n         ttrect?.remove();\n         return;\n      }\n\n      if (hint.usepath)\n         return this.showTooltipForPath(hint);\n\n      const d = d3_select(hint.d3bin).datum();\n\n      if (ttrect.empty()) {\n         ttrect = this.draw_g.append('svg:rect')\n                             .attr('class', 'tooltip_bin')\n                             .style('pointer-events', 'none')\n                             .call(addHighlightStyle);\n      }\n\n      hint.changed = ttrect.property('current_bin') !== hint.d3bin;\n\n      if (hint.changed) {\n         ttrect.attr('x', d.grx1 + hint.rect.x1)\n               .attr('width', hint.rect.x2 - hint.rect.x1)\n               .attr('y', d.gry1 + hint.rect.y1)\n               .attr('height', hint.rect.y2 - hint.rect.y1)\n               .style('opacity', '0.3')\n               .property('current_bin', hint.d3bin);\n      }\n   }\n\n   /** @summary Process tooltip event */\n   processTooltipEvent(pnt) {\n      const hint = this.extractTooltip(pnt);\n      if (!pnt || !pnt.disabled) this.showTooltip(hint);\n      return hint;\n   }\n\n   /** @summary Find best bin index for specified point */\n   findBestBin(pnt) {\n      if (!this.bins) return null;\n\n      const islines = (this.draw_kind === 'lines'),\n            funcs = this.get_main().getGrFuncs(this.options.second_x, this.options.second_y);\n      let bestindx = -1,\n          bestbin = null,\n          bestdist = 1e10,\n          dist, grx, gry, n, bin;\n\n      for (n = 0; n < this.bins.length; ++n) {\n         bin = this.bins[n];\n\n         grx = funcs.grx(bin.x);\n         gry = funcs.gry(bin.y);\n\n         dist = (pnt.x-grx)**2 + (pnt.y-gry)**2;\n\n         if (dist < bestdist) {\n            bestdist = dist;\n            bestbin = bin;\n            bestindx = n;\n         }\n      }\n\n      // check last point\n      if ((bestdist > 100) && islines) bestbin = null;\n\n      let radius = Math.max(this.lineatt.width + 3, 4);\n\n      if (this.marker_size > 0) radius = Math.max(this.marker_size, radius);\n\n      if (bestbin)\n         bestdist = Math.sqrt((pnt.x-funcs.grx(bestbin.x))**2 + (pnt.y-funcs.gry(bestbin.y))**2);\n\n      if (!islines && (bestdist > radius)) bestbin = null;\n\n      if (!bestbin) bestindx = -1;\n\n      const res = { bin: bestbin, indx: bestindx, dist: bestdist, radius: Math.round(radius) };\n\n      if (!bestbin && islines) {\n         bestdist = 1e10;\n\n         const IsInside = (x, x1, x2) => ((x1 >= x) && (x >= x2)) || ((x1 <= x) && (x <= x2));\n\n         let bin0 = this.bins[0], grx0 = funcs.grx(bin0.x), gry0, posy = 0;\n         for (n = 1; n < this.bins.length; ++n) {\n            bin = this.bins[n];\n            grx = funcs.grx(bin.x);\n\n            if (IsInside(pnt.x, grx0, grx)) {\n               // if inside interval, check Y distance\n               gry0 = funcs.gry(bin0.y);\n               gry = funcs.gry(bin.y);\n\n               if (Math.abs(grx - grx0) < 1) {\n                  // very close x - check only y\n                  posy = pnt.y;\n                  dist = IsInside(pnt.y, gry0, gry) ? 0 : Math.min(Math.abs(pnt.y-gry0), Math.abs(pnt.y-gry));\n               } else {\n                  posy = gry0 + (pnt.x - grx0) / (grx - grx0) * (gry - gry0);\n                  dist = Math.abs(posy - pnt.y);\n               }\n\n               if (dist < bestdist) {\n                  bestdist = dist;\n                  res.linex = pnt.x;\n                  res.liney = posy;\n               }\n            }\n\n            bin0 = bin;\n            grx0 = grx;\n         }\n\n         if (bestdist < radius*0.5) {\n            res.linedist = bestdist;\n            res.closeline = true;\n         }\n      }\n\n      return res;\n   }\n\n   /** @summary Check editable flag for TGraph\n     * @desc if arg specified changes or toggles editable flag */\n   testEditable(arg) {\n      const obj = this.getGraph();\n      if (!obj) return false;\n      if ((arg === 'toggle') || ((arg !== undefined) && (!arg !== obj.TestBit(kNotEditable))))\n         obj.InvertBit(kNotEditable);\n      return !obj.TestBit(kNotEditable);\n   }\n\n   /** @summary Provide tooltip at specified point for path-based drawing */\n   extractTooltipForPath(pnt) {\n      if (this.bins === null) return null;\n\n      const best = this.findBestBin(pnt);\n\n      if (!best || (!best.bin && !best.closeline)) return null;\n\n      const islines = (this.draw_kind === 'lines'),\n          ismark = (this.draw_kind === 'mark'),\n          pmain = this.get_main(),\n          funcs = pmain.getGrFuncs(this.options.second_x, this.options.second_y),\n          gr = this.getGraph(),\n          res = { name: gr.fName, title: gr.fTitle,\n                  x: best.bin ? funcs.grx(best.bin.x) : best.linex,\n                  y: best.bin ? funcs.gry(best.bin.y) : best.liney,\n                  color1: this.lineatt.color,\n                  lines: this.getTooltips(best.bin),\n                  usepath: true };\n\n      res.user_info = { obj: gr, name: gr.fName, bin: 0, cont: 0, grx: res.x, gry: res.y };\n\n      res.ismark = ismark;\n      res.islines = islines;\n\n      if (best.closeline) {\n         res.menu = res.exact = true;\n         res.menu_dist = best.linedist;\n      } else if (best.bin) {\n         if (this.options.EF && islines) {\n            res.gry1 = funcs.gry(best.bin.y - best.bin.eylow);\n            res.gry2 = funcs.gry(best.bin.y + best.bin.eyhigh);\n         } else\n            res.gry1 = res.gry2 = funcs.gry(best.bin.y);\n\n\n         res.binindx = best.indx;\n         res.bin = best.bin;\n         res.radius = best.radius;\n         res.user_info.bin = best.indx;\n         res.user_info.cont = best.bin.y;\n\n         res.exact = (Math.abs(pnt.x - res.x) <= best.radius) &&\n            ((Math.abs(pnt.y - res.gry1) <= best.radius) || (Math.abs(pnt.y - res.gry2) <= best.radius));\n\n         res.menu = res.exact;\n         res.menu_dist = Math.sqrt((pnt.x-res.x)**2 + Math.min(Math.abs(pnt.y-res.gry1), Math.abs(pnt.y-res.gry2))**2);\n      }\n\n      if (this.fillatt?.used && !this.fillatt?.empty())\n         res.color2 = this.fillatt.getFillColor();\n\n      if (!islines) {\n         res.color1 = this.getColor(gr.fMarkerColor);\n         if (!res.color2) res.color2 = res.color1;\n      }\n\n      return res;\n   }\n\n   /** @summary Show tooltip for path drawing */\n   showTooltipForPath(hint) {\n      let ttbin = this.draw_g?.selectChild('.tooltip_bin');\n\n      if (!hint?.bin || !this.draw_g) {\n         ttbin?.remove();\n         return;\n      }\n\n      if (ttbin.empty())\n         ttbin = this.draw_g.append('svg:g').attr('class', 'tooltip_bin');\n\n      hint.changed = ttbin.property('current_bin') !== hint.bin;\n\n      if (hint.changed) {\n         ttbin.selectAll('*').remove(); // first delete all children\n         ttbin.property('current_bin', hint.bin);\n\n         if (hint.ismark) {\n            ttbin.append('svg:rect')\n                 .style('pointer-events', 'none')\n                 .call(addHighlightStyle)\n                 .style('opacity', '0.3')\n                 .attr('x', Math.round(hint.x - hint.radius))\n                 .attr('y', Math.round(hint.y - hint.radius))\n                 .attr('width', 2*hint.radius)\n                 .attr('height', 2*hint.radius);\n         } else {\n            ttbin.append('svg:circle').attr('cy', Math.round(hint.gry1));\n            if (Math.abs(hint.gry1-hint.gry2) > 1)\n               ttbin.append('svg:circle').attr('cy', Math.round(hint.gry2));\n\n            const elem = ttbin.selectAll('circle')\n                            .attr('r', hint.radius)\n                            .attr('cx', Math.round(hint.x));\n\n            if (!hint.islines)\n               elem.style('stroke', hint.color1 === 'black' ? 'green' : 'black').style('fill', 'none');\n             else {\n               if (this.options.Line || this.options.Curve)\n                  elem.call(this.lineatt.func);\n               else\n                  elem.style('stroke', 'black');\n               if (this.options.Fill)\n                  elem.call(this.fillatt.func);\n               else\n                  elem.style('fill', 'none');\n            }\n         }\n      }\n   }\n\n   /** @summary Check if graph moving is enabled */\n   moveEnabled() {\n      return this.testEditable();\n   }\n\n   /** @summary Start moving of TGraph */\n   moveStart(x, y) {\n      this.pos_dx = this.pos_dy = 0;\n      this.move_funcs = this.get_main().getGrFuncs(this.options.second_x, this.options.second_y);\n      const hint = this.extractTooltip({ x, y });\n      if (hint && hint.exact && (hint.binindx !== undefined)) {\n         this.move_binindx = hint.binindx;\n         this.move_bin = hint.bin;\n         this.move_x0 = this.move_funcs.grx(this.move_bin.x);\n         this.move_y0 = this.move_funcs.gry(this.move_bin.y);\n      } else\n         delete this.move_binindx;\n   }\n\n   /** @summary Perform moving */\n   moveDrag(dx, dy) {\n      this.pos_dx += dx;\n      this.pos_dy += dy;\n\n      if (this.move_binindx === undefined)\n         makeTranslate(this.draw_g, this.pos_dx, this.pos_dy);\n       else if (this.move_funcs && this.move_bin) {\n         this.move_bin.x = this.move_funcs.revertAxis('x', this.move_x0 + this.pos_dx);\n         this.move_bin.y = this.move_funcs.revertAxis('y', this.move_y0 + this.pos_dy);\n         this.drawGraph();\n      }\n   }\n\n   /** @summary Complete moving */\n   moveEnd(not_changed) {\n      const graph = this.getGraph(), last = graph?.fNpoints-1;\n      let exec = '';\n\n      const changeBin = bin => {\n         exec += `SetPoint(${bin.indx},${bin.x},${bin.y});;`;\n         graph.fX[bin.indx] = bin.x;\n         graph.fY[bin.indx] = bin.y;\n         if ((bin.indx === 0) && this._cutg_lastsame) {\n            exec += `SetPoint(${last},${bin.x},${bin.y});;`;\n            graph.fX[last] = bin.x;\n            graph.fY[last] = bin.y;\n         }\n      };\n\n      if (this.move_binindx === undefined) {\n         this.draw_g.attr('transform', null);\n\n         if (this.move_funcs && this.bins && !not_changed) {\n            for (let k = 0; k < this.bins.length; ++k) {\n               const bin = this.bins[k];\n               bin.x = this.move_funcs.revertAxis('x', this.move_funcs.grx(bin.x) + this.pos_dx);\n               bin.y = this.move_funcs.revertAxis('y', this.move_funcs.gry(bin.y) + this.pos_dy);\n               changeBin(bin);\n            }\n            if (graph.$redraw_pad)\n               this.redrawPad();\n            else\n               this.drawGraph();\n         }\n      } else {\n         changeBin(this.move_bin);\n         delete this.move_binindx;\n         if (graph.$redraw_pad)\n            this.redrawPad();\n      }\n\n      delete this.move_funcs;\n\n      if (exec && !not_changed)\n         this.submitCanvExec(exec);\n   }\n\n   /** @summary Fill option object used in TWebCanvas */\n   fillWebObjectOptions(res) {\n      if (this._auto_exec && res) {\n         res.fcust = 'auto_exec:' + this._auto_exec;\n         delete this._auto_exec;\n      }\n   }\n\n   /** @summary Fill context menu */\n   fillContextMenuItems(menu) {\n      if (!this.snapid)\n         menu.addchk(this.testEditable(), 'Editable', () => { this.testEditable('toggle'); this.drawGraph(); });\n   }\n\n   /** @summary Execute menu command\n     * @private */\n   executeMenuCommand(method, args) {\n      if (super.executeMenuCommand(method, args)) return true;\n\n      const canp = this.getCanvPainter(), pmain = this.get_main();\n\n      if ((method.fName === 'RemovePoint') || (method.fName === 'InsertPoint')) {\n         if (!canp || canp._readonly) return true; // ignore function\n\n         const pnt = isFunc(pmain?.getLastEventPos) ? pmain.getLastEventPos() : null,\n             hint = this.extractTooltip(pnt);\n\n         if (method.fName === 'InsertPoint') {\n            if (pnt) {\n               const funcs = pmain.getGrFuncs(this.options.second_x, this.options.second_y),\n                     userx = funcs.revertAxis('x', pnt.x) ?? 0,\n                     usery = funcs.revertAxis('y', pnt.y) ?? 0;\n               this.submitCanvExec(`AddPoint(${userx.toFixed(3)}, ${usery.toFixed(3)})`, method.$execid);\n            }\n         } else if (method.$execid && (hint?.binindx !== undefined))\n            this.submitCanvExec(`RemovePoint(${hint.binindx})`, method.$execid);\n\n\n         return true; // call is processed\n      }\n\n      return false;\n   }\n\n   /** @summary Update object members\n     * @private */\n   _updateMembers(graph, obj) {\n      graph.fBits = obj.fBits;\n      graph.fTitle = obj.fTitle;\n      graph.fX = obj.fX;\n      graph.fY = obj.fY;\n      graph.fNpoints = obj.fNpoints;\n      graph.fMinimum = obj.fMinimum;\n      graph.fMaximum = obj.fMaximum;\n\n      const o = this.options;\n\n      if (this.snapid !== undefined)\n         o._pfc = o._plc = o._pmc = 0; // auto colors should be processed in web canvas\n\n      if (!o._pfc)\n         graph.fFillColor = obj.fFillColor;\n      graph.fFillStyle = obj.fFillStyle;\n      if (!o._plc)\n         graph.fLineColor = obj.fLineColor;\n      graph.fLineStyle = obj.fLineStyle;\n      graph.fLineWidth = obj.fLineWidth;\n      if (!o._pmc)\n         graph.fMarkerColor = obj.fMarkerColor;\n      graph.fMarkerSize = obj.fMarkerSize;\n      graph.fMarkerStyle = obj.fMarkerStyle;\n   }\n\n   /** @summary Update TGraph object */\n   updateObject(obj, opt) {\n      if (!this.matchObjectType(obj)) return false;\n\n      if (opt && (opt !== this.options.original))\n         this.decodeOptions(opt);\n\n      this._updateMembers(this.getObject(), obj);\n\n      this.createBins();\n\n      delete this.$redraw_hist;\n\n      // if our own histogram was used as axis drawing, we need update histogram as well\n      if (this.axes_draw) {\n         const histo = this.createHistogram(),\n               hist_painter = this.getMainPainter();\n         if (hist_painter?.isSecondary(this)) {\n            hist_painter.updateObject(histo, this.options.Axis);\n            this.$redraw_hist = true;\n         }\n      }\n\n      this._funcHandler = new FunctionsHandler(this, this.getPadPainter(), obj.fFunctions);\n\n      return true;\n   }\n\n   /** @summary Checks if it makes sense to zoom inside specified axis range\n     * @desc allow to zoom TGraph only when at least one point in the range */\n   canZoomInside(axis, min, max) {\n      const gr = this.getGraph();\n      if (!gr || (axis !== (this.options.pos3d ? 'y' : 'x'))) return false;\n\n      for (let n = 0; n < gr.fNpoints; ++n)\n         if ((min < gr.fX[n]) && (gr.fX[n] < max)) return true;\n\n      return false;\n   }\n\n   /** @summary Process click on graph-defined buttons */\n   clickButton(funcname) {\n      if (funcname !== 'ToggleZoom') return false;\n\n      if ((this.xmin === this.xmax) && (this.ymin === this.ymax)) return false;\n\n      return this.getFramePainter()?.zoom(this.xmin, this.xmax, this.ymin, this.ymax);\n   }\n\n   /** @summary Find TF1/TF2 in TGraph list of functions */\n   findFunc() {\n      return this.getGraph()?.fFunctions?.arr?.find(func => (func._typename === clTF1) || (func._typename === clTF2));\n   }\n\n   /** @summary Find stat box in TGraph list of functions */\n   findStat() {\n      return this.getGraph()?.fFunctions?.arr?.find(func => (func._typename === clTPaveStats) && (func.fName === 'stats'));\n   }\n\n   /** @summary Create stat box */\n   createStat() {\n      const func = this.findFunc();\n      if (!func) return null;\n\n      let stats = this.findStat();\n      if (stats) return stats;\n\n      // do not create stats box when drawing canvas\n      if (this.getCanvPainter()?.normal_canvas) return null;\n\n      this.create_stats = true;\n\n      const st = gStyle;\n\n      stats = create(clTPaveStats);\n      Object.assign(stats, { fName: 'stats', fOptStat: 0, fOptFit: st.fOptFit || 111, fBorderSize: 1,\n                             fX1NDC: st.fStatX - st.fStatW, fY1NDC: st.fStatY - st.fStatH, fX2NDC: st.fStatX, fY2NDC: st.fStatY,\n                             fFillColor: st.fStatColor, fFillStyle: st.fStatStyle });\n\n      stats.fTextAngle = 0;\n      stats.fTextSize = st.fStatFontSize; // 9 ??\n      stats.fTextAlign = 12;\n      stats.fTextColor = st.fStatTextColor;\n      stats.fTextFont = st.fStatFont;\n\n      stats.AddText(func.fName);\n\n      // while TF1 was found, one can be sure that stats is existing\n      this.getGraph().fFunctions.Add(stats);\n\n      return stats;\n   }\n\n   /** @summary Fill statistic */\n   fillStatistic(stat, _dostat, dofit) {\n      const func = this.findFunc();\n\n      if (!func || !dofit) return false;\n\n      stat.clearPave();\n\n      stat.fillFunctionStat(func, (dofit === 1) ? 111 : dofit, 1);\n\n      return true;\n   }\n\n   /** @summary Draw axis histogram\n     * @private */\n   async drawAxisHisto() {\n      const histo = this.createHistogram();\n      return TH1Painter.draw(this.getDom(), histo, this.options.Axis);\n   }\n\n   /** @summary Draw TGraph\n     * @private */\n   static async _drawGraph(painter, opt) {\n      painter.decodeOptions(opt, true);\n      painter.createBins();\n      painter.createStat();\n      const graph = painter.getGraph();\n      if (!settings.DragGraphs && graph && !graph.TestBit(kNotEditable))\n         graph.InvertBit(kNotEditable);\n\n      let promise = Promise.resolve();\n\n      if ((!painter.getMainPainter() || painter.options.second_x || painter.options.second_y) && painter.options.Axis) {\n         promise = painter.drawAxisHisto().then(hist_painter => {\n            hist_painter?.setSecondaryId(painter, 'hist');\n            painter.axes_draw = !!hist_painter;\n         });\n      }\n\n      return promise.then(() => {\n         painter.addToPadPrimitives();\n         return painter.drawGraph();\n      }).then(() => {\n         const handler = new FunctionsHandler(painter, painter.getPadPainter(), graph.fFunctions, true);\n         return handler.drawNext(0); // returns painter\n      });\n   }\n\n   static async draw(dom, graph, opt) {\n      return TGraphPainter._drawGraph(new TGraphPainter(dom, graph), opt);\n   }\n\n} // class TGraphPainter\n\nexport { clTGraphAsymmErrors, TGraphPainter };\n"],"x_google_ignoreList":[0]}