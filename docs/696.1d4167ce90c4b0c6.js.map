{"version":3,"file":"696.1d4167ce90c4b0c6.js","mappings":"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","names":["kIsBayesian","BIT","kPosteriorMode","kUseBinPrior","kUseWeights","getBetaAlpha","obj","bin","fBeta_bin_params","length","first","fBeta_alpha","getBetaBeta","second","fBeta_beta","TEfficiencyPainter","ObjectPainter","getEfficiency","total","fTotalHistogram","fArray","passed","fPassedHistogram","TestBit","aa","bb","alpha","beta","tw","tw2","fSumw2","Math","abs","pw","norm","a","b","BetaMode","BetaMean","getEfficiencyErrorLow","value","this","fBoundary","fConfLevel","getEfficiencyErrorUp","copyAttributes","eff","forEach","name","createGraph","gr","create","fName","createHisto","hist","createHistogram","fXaxis","fNbins","fYaxis","Object","assign","fillGraph","opt","getObject","xaxis","npoints","plot0Bins","indexOf","n","j","getBinContent","fX","GetBinCenter","fY","fEXlow","GetBinLowEdge","fEXhigh","fEYlow","fEYhigh","fNpoints","fTitle","fillHisto","nbinsx","nbinsy","kNoStats","i","getBin","fBits","drawFunction","indx","fFunctions","arr","TF1Painter","getDom","then","static","dom","toLowerCase","ndim","_typename","promise","painter","getTEfficiencyBoundaryFunc","fStatisticOption","TGraphPainter","TH2Painter","addToPadPrimitives"],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist/TEfficiencyPainter.mjs"],"sourcesContent":["import { BIT, create, createHistogram } from '../core.mjs';\nimport { ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { TGraphPainter } from '../hist2d/TGraphPainter.mjs';\nimport { TF1Painter } from '../hist/TF1Painter.mjs';\nimport { TH2Painter } from '../hist2d/TH2Painter.mjs';\nimport { getTEfficiencyBoundaryFunc } from '../base/math.mjs';\n\n\nconst kIsBayesian       = BIT(14),  ///< Bayesian statistics are used\n      kPosteriorMode    = BIT(15),  ///< Use posterior mean for best estimate (Bayesian statistics)\n //   kShortestInterval = BIT(16),  ///< Use shortest interval, not implemented - too complicated\n      kUseBinPrior      = BIT(17),  ///< Use a different prior for each bin\n      kUseWeights       = BIT(18),  ///< Use weights\n      getBetaAlpha      = (obj,bin) => (obj.fBeta_bin_params.length > bin) ? obj.fBeta_bin_params[bin].first : obj.fBeta_alpha,\n      getBetaBeta       = (obj,bin) => (obj.fBeta_bin_params.length > bin) ? obj.fBeta_bin_params[bin].second : obj.fBeta_beta;\n\n/**\n * @summary Painter for TEfficiency object\n *\n * @private\n */\n\nclass TEfficiencyPainter extends ObjectPainter {\n\n   /** @summary Caluclate efficiency */\n   getEfficiency(obj, bin) {\n\n      const BetaMean = (a,b) => (a <= 0 || b <= 0 ) ? 0 : a / (a + b),\n            BetaMode = (a,b) => {\n         if (a <= 0 || b <= 0 ) return 0;\n         if ( a <= 1 || b <= 1) {\n            if (a < b) return 0;\n            if (a > b) return 1;\n            if (a == b) return 0.5; // cannot do otherwise\n         }\n         return (a - 1.0) / (a + b -2.0);\n      };\n\n      let total = obj.fTotalHistogram.fArray[bin], // should work for both 1-d and 2-d\n          passed = obj.fPassedHistogram.fArray[bin]; // should work for both 1-d and 2-d\n\n      if(obj.TestBit(kIsBayesian)) {\n         // parameters for the beta prior distribution\n         let alpha = obj.TestBit(kUseBinPrior) ? getBetaAlpha(obj, bin) : obj.fBeta_alpha,\n             beta  = obj.TestBit(kUseBinPrior) ? getBetaBeta(obj, bin)  : obj.fBeta_beta;\n\n         let aa,bb;\n         if(obj.TestBit(kUseWeights)) {\n            let tw =  total, // fTotalHistogram->GetBinContent(bin);\n                tw2 = obj.fTotalHistogram.fSumw2 ? obj.fTotalHistogram.fSumw2[bin] : Math.abs(total),\n                pw = passed; // fPassedHistogram->GetBinContent(bin);\n\n            if (tw2 <= 0 ) return pw/tw;\n\n            // tw/tw2 renormalize the weights\n            let norm = tw/tw2;\n            aa =  pw * norm + alpha;\n            bb =  (tw - pw) * norm + beta;\n         } else {\n            aa = passed + alpha;\n            bb = total - passed + beta;\n         }\n\n         if (!obj.TestBit(kPosteriorMode) )\n            return BetaMean(aa,bb);\n         else\n            return BetaMode(aa,bb);\n      }\n\n      return total ? passed/total : 0;\n   }\n\n   /** @summary Caluclate efficiency error low */\n   getEfficiencyErrorLow(obj, bin, value) {\n      let total = obj.fTotalHistogram.fArray[bin],\n          passed = obj.fPassedHistogram.fArray[bin],\n          alpha = 0, beta = 0;\n      if (obj.TestBit(kIsBayesian)) {\n         alpha = obj.TestBit(kUseBinPrior) ? getBetaAlpha(obj, bin) : obj.fBeta_alpha;\n         beta  = obj.TestBit(kUseBinPrior) ? getBetaBeta(obj, bin)  : obj.fBeta_beta;\n      }\n\n      return value - this.fBoundary(total, passed, obj.fConfLevel, false, alpha, beta);\n   }\n\n   /** @summary Caluclate efficiency error low up */\n   getEfficiencyErrorUp(obj, bin, value) {\n      let total = obj.fTotalHistogram.fArray[bin],\n          passed = obj.fPassedHistogram.fArray[bin],\n          alpha = 0, beta = 0;\n      if (obj.TestBit(kIsBayesian)) {\n         alpha = obj.TestBit(kUseBinPrior) ? getBetaAlpha(obj, bin) : obj.fBeta_alpha;\n         beta  = obj.TestBit(kUseBinPrior) ? getBetaBeta(obj, bin)  : obj.fBeta_beta;\n      }\n\n      return this.fBoundary(total, passed, obj.fConfLevel, true, alpha, beta) - value;\n   }\n\n   /** @summary Copy drawning attributes */\n   copyAttributes(obj, eff) {\n      ['fLineColor', 'fLineStyle', 'fLineWidth', 'fFillColor', 'fFillStyle', 'fMarkerColor', 'fMarkerStyle', 'fMarkerSize'].forEach(name => obj[name] = eff[name]);\n   }\n\n   /** @summary Create graph for the drawing of 1-dim TEfficiency */\n   createGraph(/*eff*/) {\n      let gr = create('TGraphAsymmErrors');\n      gr.fName = \"eff_graph\";\n      return gr;\n   }\n\n   /** @summary Create histogram for the drawing of 2-dim TEfficiency */\n   createHisto(eff) {\n      const nbinsx = eff.fTotalHistogram.fXaxis.fNbins,\n            nbinsy = eff.fTotalHistogram.fYaxis.fNbins,\n            hist = createHistogram('TH2F', nbinsx, nbinsy);\n      Object.assign(hist.fXaxis, eff.fTotalHistogram.fXaxis);\n      Object.assign(hist.fYaxis, eff.fTotalHistogram.fYaxis);\n      hist.fName = \"eff_histo\";\n      return hist;\n   }\n\n   /** @summary Fill graph with points from efficiency object */\n   fillGraph(gr, opt) {\n      const eff = this.getObject(),\n            xaxis = eff.fTotalHistogram.fXaxis,\n            npoints = xaxis.fNbins,\n            plot0Bins = (opt.indexOf(\"e0\") >= 0);\n\n      for (let n = 0, j = 0; n < npoints; ++n) {\n         if (!plot0Bins && eff.fTotalHistogram.getBinContent(n+1) === 0) continue;\n\n         let value = this.getEfficiency(eff, n+1);\n\n         gr.fX[j] = xaxis.GetBinCenter(n+1);\n         gr.fY[j] = value;\n         gr.fEXlow[j] = xaxis.GetBinCenter(n+1) - xaxis.GetBinLowEdge(n+1);\n         gr.fEXhigh[j] = xaxis.GetBinLowEdge(n+2) - xaxis.GetBinCenter(n+1);\n         gr.fEYlow[j] = this.getEfficiencyErrorLow(eff, n+1, value);\n         gr.fEYhigh[j] = this.getEfficiencyErrorUp(eff, n+1, value);\n\n         gr.fNpoints = ++j;\n      }\n\n      gr.fTitle = eff.fTitle;\n      this.copyAttributes(gr, eff);\n   }\n\n   /** @summary Fill graph with points from efficiency object */\n   fillHisto(hist) {\n      const eff = this.getObject(),\n            nbinsx = hist.fXaxis.fNbins,\n            nbinsy = hist.fYaxis.fNbins,\n            kNoStats = BIT(9);\n\n      for (let i = 0; i < nbinsx+2; ++i)\n         for (let j = 0; j < nbinsy+2; ++j) {\n            let bin = hist.getBin(i, j),\n                value = this.getEfficiency(eff, bin);\n            hist.fArray[bin] = value;\n         }\n\n      hist.fTitle = eff.fTitle;\n      hist.fBits = hist.fBits | kNoStats;\n      this.copyAttributes(hist, eff);\n   }\n\n   /** @summary Draw function */\n   drawFunction(indx) {\n      const eff = this.getObject();\n\n      if (!eff || !eff.fFunctions || indx >= eff.fFunctions.arr.length)\n         return this;\n\n       return TF1Painter.draw(this.getDom(), eff.fFunctions.arr[indx], eff.fFunctions.opt[indx]).then(() => this.drawFunction(indx+1));\n   }\n\n   /** @summary Draw TEfficiency object */\n   static draw(dom, eff, opt) {\n      if (!eff || !eff.fTotalHistogram)\n         return null;\n\n      if (!opt || (typeof opt != 'string')) opt = \"\";\n      opt = opt.toLowerCase();\n\n      let ndim = 0;\n      if (eff.fTotalHistogram._typename.indexOf(\"TH1\") == 0)\n         ndim = 1;\n      else if (eff.fTotalHistogram._typename.indexOf(\"TH2\") == 0)\n         ndim = 2;\n      else\n         return null;\n\n      let painter = new TEfficiencyPainter(dom, eff);\n      painter.ndim = ndim;\n\n      painter.fBoundary = getTEfficiencyBoundaryFunc(eff.fStatisticOption, eff.TestBit(kIsBayesian));\n\n      let promise;\n\n      if (ndim == 1) {\n         if (!opt) opt = \"ap\";\n         if ((opt.indexOf(\"same\") < 0) && (opt.indexOf(\"a\") < 0)) opt += \"a\";\n         if (opt.indexOf(\"p\") < 0) opt += \"p\";\n\n         let gr = painter.createGraph(eff);\n         painter.fillGraph(gr, opt);\n         promise = TGraphPainter.draw(dom, gr, opt);\n      } else {\n         if (!opt) opt = \"col\";\n         let hist = painter.createHisto(eff);\n         painter.fillHisto(hist, opt);\n         promise = TH2Painter.draw(dom, hist, opt);\n      }\n\n      return promise.then(() => {\n         painter.addToPadPrimitives();\n         return painter.drawFunction(0);\n      });\n   }\n\n} // class TEfficiencyPainter\n\nexport { TEfficiencyPainter };\n"],"x_google_ignoreList":[0]}