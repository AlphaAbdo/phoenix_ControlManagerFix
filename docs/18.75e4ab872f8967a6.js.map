{"version":3,"file":"18.75e4ab872f8967a6.js","mappings":"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","names":["RH1Painter","RHistPainter","constructor","dom","histo","super","this","wheel_zoomy","scanContent","when_axis_changed","getHisto","nbinsx","extractAxesProperties","hmin","hmin_nz","hmax","hsum","isDisplayItem","fContMin","fContMinPos","fContMax","left","getSelectIndex","right","scan_xleft","scan_xright","value","err","first","i","getBinContent","Math","min","max","stat_entries","ymin_nz","draw_content","abs","ymin","ymax","dy","countStat","cond","xaxis","getAxis","stat_sumw","stat_sumwx","stat_sumwx2","xx","w","xmax","wmax","fp","getFramePainter","res","name","meanx","meany","rmsx","rmsy","integral","entries","GetBinCoord","isAxisZoomed","fTsumw","fTsumwx","fTsumwx2","sqrt","fillStatistic","stat","dostat","data","print_name","print_entries","floor","print_mean","print_rms","print_under","print_over","print_integral","print_skew","print_kurt","clearStat","addText","format","drawBars","handle","funcs","width","height","createG","x1","x2","grx1","grx2","y","gry1","gry2","i1","i2","di","stepi","pmain","bars","barsl","barsr","swap_xy","Number","isFinite","options","BaseLine","scale_ymin","round","gry","logx","grx","logy","BarOffset","BarWidth","BarStyle","fillatt","empty","setSolidColor","length","draw_g","append","attr","call","func","style","d3_rgb","color","brighter","formatHex","darker","Promise","resolve","drawFilledErrors","x","yerr","bins1","bins2","getBinError","push","unshift","kind","ErrorKind","path1","buildSvgPath","path2","path","draw1DBins","rect","getFrameRect","removeG","createHistDrawAttributes","prepareDraw","extra","only_indexes","getGrFuncs","second_x","second_y","Bar","drawHistBins","startx","currx","curry","curry_min","curry_max","prevy","prevx","bestimin","bestimax","my","yerr1","yerr2","bincont","binerr","mx1","mx2","midx","text_font","want_tooltip","isBatchMode","settings","lastbin","exclude_zero","Zero","show_errors","Error","show_markers","Mark","show_line","Line","show_text","Text","path_fill","path_err","path_marker","path_line","hints_err","endx","endy","dend","v7EvalAttr","createv7AttMarker","markeratt","size","resetPos","v7EvalFont","align","angle","TextKind","space","setAngle","setSize","startTextDrawing","use_minmax","lw","lineatt","gStyle","draw_markers","draw_bin","besti","lbl","toString","floatToString","drawText","text","latex","create","edx","errorX","mmx1","close_path","fill_for_interactive","Hist","h0","gry0","Fill","finishTextDrawing","getBinTooltips","bin","tips","getObjectHint","stepx","cont","xlbl","getAxisBinTip","axisAsText","toPrecision","$baseh","processTooltipEvent","pnt","Mode3D","select","remove","show_rect","midy","getFrameWidth","getFrameHeight","findbin","gapx","l","r","GetBinGrX","GetBinGrY","yy","pnt_x","pnt_y","m","best","dist","d","touch","nproc","msize","getFullSize","dx","ttrect","title","fTitle","exact","color1","color2","getFillColorAlt","lines","disabled","changed","property","menu","menu_dist","radius","user_info","obj","fillHistContextMenu","add","autoZoom","opts","getSupportedDrawOptions","addDrawMenu","arg","showInspector","decodeOptions","need_fillcol","change","interactiveRedraw","indx","zoom","canZoomInside","axis","FindBin","callDrawFunc","reason","main","mode3d","isMainPainter","draw3D","draw2D","clear3DScene","drawFrameAxes","then","drawingBins","addInteractivity","console","log","redraw","static","painter","opt","ensureRCanvas","setAsMainPainter","Lego","Surf","TextAngle","AutoColor","DrawOptions","check","Render3D","constants","part","toLowerCase","sub","has_main","getMainPainter","o","_draw","RH1Painter2D","is_main","zmult","pr","resize3D","render3D","deleteAttr","assignFrame3DMethods","create3DScene","setAxesRanges","xmin","set3DOptions","drawXYZ","toplevel","RAxisPainter","use_y_for_z","ndim","draw","v7","drawBinsLego","updatePaletteDraw","addKeysHandler"],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist2d/RH1Painter.mjs","../node_modules/jsroot/modules/hist/RH1Painter.mjs"],"sourcesContent":["import { gStyle, settings, constants, isBatchMode } from '../core.mjs';\nimport { rgb as d3_rgb } from '../d3.mjs';\nimport { floatToString, DrawOptions, buildSvgPath } from '../base/BasePainter.mjs';\nimport { RHistPainter } from './RHistPainter.mjs';\nimport { ensureRCanvas } from '../gpad/RCanvasPainter.mjs';\n\n/**\n * @summary Painter for RH1 classes\n *\n * @private\n */\n\nclass RH1Painter extends RHistPainter {\n\n   /** @summary Constructor\n     * @param {object|string} dom - DOM element or id\n     * @param {object} histo - histogram object */\n   constructor(dom, histo) {\n      super(dom, histo);\n      this.wheel_zoomy = false;\n   }\n\n   /** @summary Scan content */\n   scanContent(when_axis_changed) {\n      // if when_axis_changed === true specified, content will be scanned after axis zoom changed\n\n      let histo = this.getHisto();\n      if (!histo) return;\n\n      if (!this.nbinsx && when_axis_changed) when_axis_changed = false;\n\n      if (!when_axis_changed)\n         this.extractAxesProperties(1);\n\n      let hmin = 0, hmin_nz = 0, hmax = 0, hsum = 0;\n\n      if (this.isDisplayItem()) {\n         // take min/max values from the display item\n         hmin = histo.fContMin;\n         hmin_nz = histo.fContMinPos;\n         hmax = histo.fContMax;\n         hsum = hmax;\n      } else {\n\n         let left = this.getSelectIndex(\"x\", \"left\"),\n             right = this.getSelectIndex(\"x\", \"right\");\n\n         if (when_axis_changed) {\n            if ((left === this.scan_xleft) && (right === this.scan_xright)) return;\n         }\n\n         this.scan_xleft = left;\n         this.scan_xright = right;\n\n         let first = true, value, err;\n\n         for (let i = 0; i < this.nbinsx; ++i) {\n            value = histo.getBinContent(i+1);\n            hsum += value;\n\n            if ((i<left) || (i>=right)) continue;\n\n            if (value > 0)\n               if ((hmin_nz == 0) || (value<hmin_nz)) hmin_nz = value;\n            if (first) {\n               hmin = hmax = value;\n               first = false;\n            }\n\n            err =  0;\n\n            hmin = Math.min(hmin, value - err);\n            hmax = Math.max(hmax, value + err);\n         }\n      }\n\n      this.stat_entries = hsum;\n\n      this.hmin = hmin;\n      this.hmax = hmax;\n\n      this.ymin_nz = hmin_nz; // value can be used to show optimal log scale\n\n      if ((this.nbinsx == 0) || ((Math.abs(hmin) < 1e-300 && Math.abs(hmax) < 1e-300))) {\n         this.draw_content = false;\n      } else {\n         this.draw_content = true;\n      }\n\n      if (this.draw_content) {\n         if (hmin >= hmax) {\n            if (hmin == 0) { this.ymin = 0; this.ymax = 1; }\n            else if (hmin < 0) { this.ymin = 2 * hmin; this.ymax = 0; }\n            else { this.ymin = 0; this.ymax = hmin * 2; }\n         } else {\n            let dy = (hmax - hmin) * 0.05;\n            this.ymin = hmin - dy;\n            if ((this.ymin < 0) && (hmin >= 0)) this.ymin = 0;\n            this.ymax = hmax + dy;\n         }\n      }\n   }\n\n   /** @summary Count statistic */\n   countStat(cond) {\n      let histo = this.getHisto(), xaxis = this.getAxis(\"x\"),\n          left = this.getSelectIndex(\"x\", \"left\"),\n          right = this.getSelectIndex(\"x\", \"right\"),\n          stat_sumw = 0, stat_sumwx = 0, stat_sumwx2 = 0, stat_sumwy = 0, stat_sumwy2 = 0,\n          i, xx = 0, w = 0, xmax = null, wmax = null,\n          fp = this.getFramePainter(),\n          res = { name: \"histo\", meanx: 0, meany: 0, rmsx: 0, rmsy: 0, integral: 0, entries: this.stat_entries, xmax: 0, wmax: 0 };\n\n      for (i = left; i < right; ++i) {\n         xx = xaxis.GetBinCoord(i+0.5);\n\n         if (cond && !cond(xx)) continue;\n\n         w = histo.getBinContent(i + 1);\n\n         if ((xmax === null) || (w > wmax)) { xmax = xx; wmax = w; }\n\n         stat_sumw += w;\n         stat_sumwx += w * xx;\n         stat_sumwx2 += w * xx**2;\n      }\n\n      // when no range selection done, use original statistic from histogram\n      if (!fp.isAxisZoomed(\"x\") && histo.fTsumw) {\n         stat_sumw = histo.fTsumw;\n         stat_sumwx = histo.fTsumwx;\n         stat_sumwx2 = histo.fTsumwx2;\n      }\n\n      res.integral = stat_sumw;\n\n      if (stat_sumw > 0) {\n         res.meanx = stat_sumwx / stat_sumw;\n         res.meany = stat_sumwy / stat_sumw;\n         res.rmsx = Math.sqrt(Math.abs(stat_sumwx2 / stat_sumw - res.meanx**2));\n         res.rmsy = Math.sqrt(Math.abs(stat_sumwy2 / stat_sumw - res.meany**2));\n      }\n\n      if (xmax !== null) {\n         res.xmax = xmax;\n         res.wmax = wmax;\n      }\n\n      return res;\n   }\n\n   /** @summary Fill statistic */\n   fillStatistic(stat, dostat/*, dofit*/) {\n\n      let data = this.countStat(),\n          print_name = dostat % 10,\n          print_entries = Math.floor(dostat / 10) % 10,\n          print_mean = Math.floor(dostat / 100) % 10,\n          print_rms = Math.floor(dostat / 1000) % 10,\n          print_under = Math.floor(dostat / 10000) % 10,\n          print_over = Math.floor(dostat / 100000) % 10,\n          print_integral = Math.floor(dostat / 1000000) % 10,\n          print_skew = Math.floor(dostat / 10000000) % 10,\n          print_kurt = Math.floor(dostat / 100000000) % 10;\n\n      // make empty at the beginning\n      stat.clearStat();\n\n      if (print_name > 0)\n         stat.addText(data.name);\n\n      if (print_entries > 0)\n         stat.addText(\"Entries = \" + stat.format(data.entries,\"entries\"));\n\n      if (print_mean > 0)\n         stat.addText(\"Mean = \" + stat.format(data.meanx));\n\n      if (print_rms > 0)\n         stat.addText(\"Std Dev = \" + stat.format(data.rmsx));\n\n      if (print_under > 0)\n         stat.addText(\"Underflow = \" + stat.format(histo.getBinContent(0), \"entries\"));\n\n      if (print_over > 0)\n         stat.addText(\"Overflow = \" + stat.format(histo.getBinContent(this.nbinsx+1), \"entries\"));\n\n      if (print_integral > 0)\n         stat.addText(\"Integral = \" + stat.format(data.integral,\"entries\"));\n\n      if (print_skew > 0)\n         stat.addText(\"Skew = <not avail>\");\n\n      if (print_kurt > 0)\n         stat.addText(\"Kurt = <not avail>\");\n\n      return true;\n   }\n\n   /** @summary Draw histogram as bars */\n   drawBars(handle, funcs, width, height) {\n\n      this.createG(true);\n\n      let left = handle.i1, right = handle.i2, di = handle.stepi,\n          pmain = this.getFramePainter(),\n          histo = this.getHisto(), xaxis = this.getAxis(\"x\"),\n          i, x1, x2, grx1, grx2, y, gry1, gry2, w,\n          bars = \"\", barsl = \"\", barsr = \"\";\n\n      gry2 = pmain.swap_xy ? 0 : height;\n      if (Number.isFinite(this.options.BaseLine))\n         if (this.options.BaseLine >= funcs.scale_ymin)\n            gry2 = Math.round(funcs.gry(this.options.BaseLine));\n\n      for (i = left; i < right; i += di) {\n         x1 = xaxis.GetBinCoord(i);\n         x2 = xaxis.GetBinCoord(i+di);\n\n         if (funcs.logx && (x2 <= 0)) continue;\n\n         grx1 = Math.round(funcs.grx(x1));\n         grx2 = Math.round(funcs.grx(x2));\n\n         y = histo.getBinContent(i+1);\n         if (funcs.logy && (y < funcs.scale_ymin)) continue;\n         gry1 = Math.round(funcs.gry(y));\n\n         w = grx2 - grx1;\n         grx1 += Math.round(this.options.BarOffset*w);\n         w = Math.round(this.options.BarWidth*w);\n\n         if (pmain.swap_xy)\n            bars += \"M\"+gry2+\",\"+grx1 + \"h\"+(gry1-gry2) + \"v\"+w + \"h\"+(gry2-gry1) + \"z\";\n         else\n            bars += \"M\"+grx1+\",\"+gry1 + \"h\"+w + \"v\"+(gry2-gry1) + \"h\"+(-w)+ \"z\";\n\n         if (this.options.BarStyle > 0) {\n            grx2 = grx1 + w;\n            w = Math.round(w / 10);\n            if (pmain.swap_xy) {\n               barsl += \"M\"+gry2+\",\"+grx1 + \"h\"+(gry1-gry2) + \"v\" + w + \"h\"+(gry2-gry1) + \"z\";\n               barsr += \"M\"+gry2+\",\"+grx2 + \"h\"+(gry1-gry2) + \"v\" + (-w) + \"h\"+(gry2-gry1) + \"z\";\n            } else {\n               barsl += \"M\"+grx1+\",\"+gry1 + \"h\"+w + \"v\"+(gry2-gry1) + \"h\"+(-w)+ \"z\";\n               barsr += \"M\"+grx2+\",\"+gry1 + \"h\"+(-w) + \"v\"+(gry2-gry1) + \"h\"+w + \"z\";\n            }\n         }\n      }\n\n      if (this.fillatt.empty()) this.fillatt.setSolidColor(\"blue\");\n\n      if (bars.length > 0)\n         this.draw_g.append(\"svg:path\")\n                    .attr(\"d\", bars)\n                    .call(this.fillatt.func);\n\n      if (barsl.length > 0)\n         this.draw_g.append(\"svg:path\")\n               .attr(\"d\", barsl)\n               .call(this.fillatt.func)\n               .style(\"fill\", d3_rgb(this.fillatt.color).brighter(0.5).formatHex());\n\n      if (barsr.length > 0)\n         this.draw_g.append(\"svg:path\")\n               .attr(\"d\", barsr)\n               .call(this.fillatt.func)\n               .style(\"fill\", d3_rgb(this.fillatt.color).darker(0.5).formatHex());\n\n       return Promise.resolve(true);\n   }\n\n   /** @summary Draw histogram as filled errors */\n   drawFilledErrors(handle, funcs /*, width, height*/) {\n      this.createG(true);\n\n      let left = handle.i1, right = handle.i2, di = handle.stepi,\n          histo = this.getHisto(), xaxis = this.getAxis(\"x\"),\n          i, x, grx, y, yerr, gry1, gry2,\n          bins1 = [], bins2 = [];\n\n      for (i = left; i < right; i += di) {\n         x = xaxis.GetBinCoord(i+0.5);\n         if (funcs.logx && (x <= 0)) continue;\n         grx = Math.round(funcs.grx(x));\n\n         y = histo.getBinContent(i+1);\n         yerr = histo.getBinError(i+1);\n         if (funcs.logy && (y-yerr < funcs.scale_ymin)) continue;\n\n         gry1 = Math.round(funcs.gry(y + yerr));\n         gry2 = Math.round(funcs.gry(y - yerr));\n\n         bins1.push({grx: grx, gry: gry1});\n         bins2.unshift({grx: grx, gry: gry2});\n      }\n\n      let kind = (this.options.ErrorKind === 4) ? \"bezier\" : \"line\",\n          path1 = buildSvgPath(kind, bins1),\n          path2 = buildSvgPath(\"L\"+kind, bins2);\n\n      if (this.fillatt.empty()) this.fillatt.setSolidColor(\"blue\");\n\n      this.draw_g.append(\"svg:path\")\n                 .attr(\"d\", path1.path + path2.path + \"Z\")\n                 .call(this.fillatt.func);\n\n      return Promise.resolve(true);\n   }\n\n   /** @summary Draw 1D histogram as SVG */\n   draw1DBins() {\n\n      let pmain = this.getFramePainter(),\n          rect = pmain.getFrameRect();\n\n      if (!this.draw_content || (rect.width <= 0) || (rect.height <= 0)) {\n         this.removeG()\n         return Promise.resolve(false);\n      }\n\n      this.createHistDrawAttributes();\n\n      let handle = this.prepareDraw({ extra: 1, only_indexes: true }),\n          funcs = pmain.getGrFuncs(this.options.second_x, this.options.second_y);\n\n      if (this.options.Bar)\n         return this.drawBars(handle, funcs, rect.width, rect.height);\n\n      if ((this.options.ErrorKind === 3) || (this.options.ErrorKind === 4))\n         return this.drawFilledErrors(handle, funcs, rect.width, rect.height);\n\n      return this.drawHistBins(handle, funcs, rect.width, rect.height);\n   }\n\n   /** @summary Draw histogram bins */\n   drawHistBins(handle, funcs, width, height) {\n      this.createG(true);\n\n      let options = this.options,\n          left = handle.i1,\n          right = handle.i2,\n          di = handle.stepi,\n          histo = this.getHisto(),\n          want_tooltip = !isBatchMode() && settings.Tooltip,\n          xaxis = this.getAxis(\"x\"),\n          res = \"\", lastbin = false,\n          startx, currx, curry, x, grx, y, gry, curry_min, curry_max, prevy, prevx, i, bestimin, bestimax,\n          exclude_zero = !options.Zero,\n          show_errors = options.Error,\n          show_markers = options.Mark,\n          show_line = options.Line,\n          show_text = options.Text,\n          path_fill = null, path_err = null, path_marker = null, path_line = null,\n          hints_err = null,\n          endx = \"\", endy = \"\", dend = 0, my, yerr1, yerr2, bincont, binerr, mx1, mx2, midx,\n          text_font;\n\n      if (show_errors && !show_markers && (this.v7EvalAttr(\"marker_style\",1) > 1))\n         show_markers = true;\n\n      if (options.ErrorKind === 2) {\n         if (this.fillatt.empty()) show_markers = true;\n                              else path_fill = \"\";\n      } else if (options.Error) {\n         path_err = \"\";\n         hints_err = want_tooltip ? \"\" : null;\n      }\n\n      if (show_line) path_line = \"\";\n\n      if (show_markers) {\n         // draw markers also when e2 option was specified\n         this.createv7AttMarker();\n         if (this.markeratt.size > 0) {\n            // simply use relative move from point, can optimize in the future\n            path_marker = \"\";\n            this.markeratt.resetPos();\n         } else {\n            show_markers = false;\n         }\n      }\n\n      if (show_text) {\n         text_font = this.v7EvalFont(\"text\", { size: 20, color: \"black\", align: 22 });\n\n         if (!text_font.angle && !options.TextKind) {\n             let space = width / (right - left + 1);\n             if (space < 3 * text_font.size) {\n                text_font.setAngle(270);\n                text_font.setSize(Math.round(space*0.7));\n             }\n         }\n\n         this.startTextDrawing(text_font, 'font');\n      }\n\n      // if there are too many points, exclude many vertical drawings at the same X position\n      // instead define min and max value and made min-max drawing\n      let use_minmax = ((right-left) > 3*width);\n\n      if (options.ErrorKind === 1) {\n         let lw = this.lineatt.width + gStyle.fEndErrorSize;\n         endx = \"m0,\" + lw + \"v-\" + 2*lw + \"m0,\" + lw;\n         endy = \"m\" + lw + \",0h-\" + 2*lw + \"m\" + lw + \",0\";\n         dend = Math.floor((this.lineatt.width-1)/2);\n      }\n\n      let draw_markers = show_errors || show_markers;\n\n      if (draw_markers || show_text || show_line) use_minmax = true;\n\n      let draw_bin = besti => {\n         bincont = histo.getBinContent(besti+1);\n         if (!exclude_zero || (bincont!==0)) {\n            mx1 = Math.round(funcs.grx(xaxis.GetBinCoord(besti)));\n            mx2 = Math.round(funcs.grx(xaxis.GetBinCoord(besti+di)));\n            midx = Math.round((mx1+mx2)/2);\n            my = Math.round(funcs.gry(bincont));\n            yerr1 = yerr2 = 20;\n            if (show_errors) {\n               binerr = histo.getBinError(besti+1);\n               yerr1 = Math.round(my - funcs.gry(bincont + binerr)); // up\n               yerr2 = Math.round(funcs.gry(bincont - binerr) - my); // down\n            }\n\n            if (show_text && (bincont !== 0)) {\n               let lbl = (bincont === Math.round(bincont)) ? bincont.toString() : floatToString(bincont, gStyle.fPaintTextFormat);\n\n               if (text_font.angle)\n                  this.drawText({ align: 12, x: midx, y: Math.round(my - 2 - text_font.size / 5), text: lbl, latex: 0 });\n               else\n                  this.drawText({ x: Math.round(mx1 + (mx2 - mx1) * 0.1), y: Math.round(my - 2 - text_font.size), width: Math.round((mx2 - mx1) * 0.8), height: text_font.size, text: lbl, latex: 0 });\n            }\n\n            if (show_line && (path_line !== null))\n               path_line += ((path_line.length === 0) ? \"M\" : \"L\") + midx + \",\" + my;\n\n            if (draw_markers) {\n               if ((my >= -yerr1) && (my <= height + yerr2)) {\n                  if (path_fill !== null)\n                     path_fill += \"M\" + mx1 +\",\"+(my-yerr1) +\n                                  \"h\" + (mx2-mx1) + \"v\" + (yerr1+yerr2+1) + \"h-\" + (mx2-mx1) + \"z\";\n                  if (path_marker !== null)\n                     path_marker += this.markeratt.create(midx, my);\n                  if (path_err !== null) {\n                     let edx = 5;\n                     if (this.options.errorX > 0) {\n                        edx = Math.round((mx2-mx1)*this.options.errorX);\n                        let mmx1 = midx - edx, mmx2 = midx + edx;\n                        path_err += \"M\" + (mmx1+dend) +\",\"+ my + endx + \"h\" + (mmx2-mmx1-2*dend) + endx;\n                     }\n                     path_err += \"M\" + midx +\",\" + (my-yerr1+dend) + endy + \"v\" + (yerr1+yerr2-2*dend) + endy;\n                     if (hints_err !== null)\n                        hints_err += \"M\" + (midx-edx) + \",\" + (my-yerr1) + \"h\" + (2*edx) + \"v\" + (yerr1+yerr2) + \"h\" + (-2*edx) + \"z\";\n                  }\n               }\n            }\n         }\n      };\n\n      for (i = left; i <= right; i += di) {\n\n         x = xaxis.GetBinCoord(i);\n\n         if (funcs.logx && (x <= 0)) continue;\n\n         grx = Math.round(funcs.grx(x));\n\n         lastbin = (i > right - di);\n\n         if (lastbin && (left < right)) {\n            gry = curry;\n         } else {\n            y = histo.getBinContent(i+1);\n            gry = Math.round(funcs.gry(y));\n         }\n\n         if (res.length === 0) {\n            bestimin = bestimax = i;\n            prevx = startx = currx = grx;\n            prevy = curry_min = curry_max = curry = gry;\n            res = \"M\"+currx+\",\"+curry;\n         } else\n         if (use_minmax) {\n            if ((grx === currx) && !lastbin) {\n               if (gry < curry_min) bestimax = i; else\n               if (gry > curry_max) bestimin = i;\n               curry_min = Math.min(curry_min, gry);\n               curry_max = Math.max(curry_max, gry);\n               curry = gry;\n            } else {\n\n               if (draw_markers || show_text || show_line) {\n                  if (bestimin === bestimax) { draw_bin(bestimin); } else\n                     if (bestimin < bestimax) { draw_bin(bestimin); draw_bin(bestimax); } else {\n                        draw_bin(bestimax); draw_bin(bestimin);\n                     }\n               }\n\n               // when several points as same X differs, need complete logic\n               if (!draw_markers && ((curry_min !== curry_max) || (prevy !== curry_min))) {\n\n                  if (prevx !== currx)\n                     res += \"h\"+(currx-prevx);\n\n                  if (curry === curry_min) {\n                     if (curry_max !== prevy)\n                        res += \"v\" + (curry_max - prevy);\n                     if (curry_min !== curry_max)\n                        res += \"v\" + (curry_min - curry_max);\n                  } else {\n                     if (curry_min !== prevy)\n                        res += \"v\" + (curry_min - prevy);\n                     if (curry_max !== curry_min)\n                        res += \"v\" + (curry_max - curry_min);\n                     if (curry !== curry_max)\n                       res += \"v\" + (curry - curry_max);\n                  }\n\n                  prevx = currx;\n                  prevy = curry;\n               }\n\n               if (lastbin && (prevx !== grx))\n                  res += \"h\"+(grx-prevx);\n\n               bestimin = bestimax = i;\n               curry_min = curry_max = curry = gry;\n               currx = grx;\n            }\n         } else\n         if ((gry !== curry) || lastbin) {\n            if (grx !== currx) res += \"h\"+(grx-currx);\n            if (gry !== curry) res += \"v\"+(gry-curry);\n            curry = gry;\n            currx = grx;\n         }\n      }\n\n      let close_path = \"\",\n          fill_for_interactive = !isBatchMode() && this.fillatt.empty() && options.Hist && settings.Tooltip && !draw_markers && !show_line;\n      if (!this.fillatt.empty() || fill_for_interactive) {\n         let h0 = height + 3;\n         if (fill_for_interactive) {\n            let gry0 = Math.round(funcs.gry(0));\n            if (gry0 <= 0)\n               h0 = -3;\n            else if (gry0 < height)\n               h0 = gry0;\n         }\n         close_path = `L${currx},${h0}H${startx}Z`;\n         if (res.length > 0) res += close_path;\n      }\n\n      if (draw_markers || show_line) {\n         if ((path_fill !== null) && (path_fill.length > 0))\n            this.draw_g.append(\"svg:path\")\n                       .attr(\"d\", path_fill)\n                       .call(this.fillatt.func);\n\n         if ((path_err !== null) && (path_err.length > 0))\n               this.draw_g.append(\"svg:path\")\n                   .attr(\"d\", path_err)\n                   .call(this.lineatt.func);\n\n         if ((hints_err !== null) && (hints_err.length > 0))\n               this.draw_g.append(\"svg:path\")\n                   .attr(\"d\", hints_err)\n                   .style(\"fill\", \"none\")\n                   .style(\"pointer-events\", isBatchMode() ? null : \"visibleFill\");\n\n         if ((path_line !== null) && (path_line.length > 0)) {\n            if (!this.fillatt.empty())\n               this.draw_g.append(\"svg:path\")\n                     .attr(\"d\", options.Fill ? (path_line + close_path) : res)\n                     .call(this.fillatt.func);\n\n            this.draw_g.append(\"svg:path\")\n                   .attr(\"d\", path_line)\n                   .style(\"fill\", \"none\")\n                   .call(this.lineatt.func);\n         }\n\n         if ((path_marker !== null) && (path_marker.length > 0))\n            this.draw_g.append(\"svg:path\")\n                .attr(\"d\", path_marker)\n                .call(this.markeratt.func);\n\n      } else if (res && options.Hist) {\n         this.draw_g.append(\"svg:path\")\n                    .attr(\"d\", res)\n                    .style(\"stroke-linejoin\",\"miter\")\n                    .call(this.lineatt.func)\n                    .call(this.fillatt.func);\n      }\n\n      return show_text ? this.finishTextDrawing() : Promise.resolve(true);\n   }\n\n   /** @summary Provide text information (tooltips) for histogram bin */\n   getBinTooltips(bin) {\n      let tips = [],\n          name = this.getObjectHint(),\n          pmain = this.getFramePainter(),\n          histo = this.getHisto(),\n          xaxis = this.getAxis(\"x\"),\n          di = this.isDisplayItem() ? histo.stepx : 1,\n          x1 = xaxis.GetBinCoord(bin),\n          x2 = xaxis.GetBinCoord(bin+di),\n          cont = histo.getBinContent(bin+1),\n          xlbl = this.getAxisBinTip(\"x\", bin, di);\n\n      if (name.length>0) tips.push(name);\n\n      if (this.options.Error || this.options.Mark) {\n         tips.push(\"x = \" + xlbl);\n         tips.push(\"y = \" + pmain.axisAsText(\"y\", cont));\n         if (this.options.Error) {\n            if (xlbl[0] == \"[\") tips.push(\"error x = \" + ((x2 - x1) / 2).toPrecision(4));\n            tips.push(\"error y = \" + histo.getBinError(bin + 1).toPrecision(4));\n         }\n      } else {\n         tips.push(\"bin = \" + bin);\n         tips.push(\"x = \" + xlbl);\n         if (histo['$baseh']) cont -= histo['$baseh'].getBinContent(bin+1);\n         let lbl = \"entries = \" + (di > 1 ? \"~\" : \"\");\n         if (cont === Math.round(cont))\n            tips.push(lbl + cont);\n         else\n            tips.push(lbl + floatToString(cont, gStyle.fStatFormat));\n      }\n\n      return tips;\n   }\n\n   /** @summary Process tooltip event */\n   processTooltipEvent(pnt) {\n      if (!pnt || !this.draw_content || this.options.Mode3D || !this.draw_g) {\n         if (this.draw_g)\n            this.draw_g.select(\".tooltip_bin\").remove();\n         return null;\n      }\n\n      let pmain = this.getFramePainter(),\n          funcs = pmain.getGrFuncs(this.options.second_x, this.options.second_y),\n          width = pmain.getFrameWidth(),\n          height = pmain.getFrameHeight(),\n          histo = this.getHisto(), xaxis = this.getAxis(\"x\"),\n          findbin = null, show_rect,\n          grx1, midx, grx2, gry1, midy, gry2, gapx = 2,\n          left = this.getSelectIndex(\"x\", \"left\", -1),\n          right = this.getSelectIndex(\"x\", \"right\", 2),\n          l = left, r = right;\n\n      function GetBinGrX(i) {\n         let xx = xaxis.GetBinCoord(i);\n         return (funcs.logx && (xx<=0)) ? null : funcs.grx(xx);\n      }\n\n      function GetBinGrY(i) {\n         let yy = histo.getBinContent(i + 1);\n         if (funcs.logy && (yy < funcs.scale_ymin))\n            return funcs.swap_xy ? -1000 : 10*height;\n         return Math.round(funcs.gry(yy));\n      }\n\n      let pnt_x = funcs.swap_xy ? pnt.y : pnt.x,\n          pnt_y = funcs.swap_xy ? pnt.x : pnt.y;\n\n      while (l < r-1) {\n         let m = Math.round((l+r)*0.5),\n             xx = GetBinGrX(m);\n         if ((xx === null) || (xx < pnt_x - 0.5)) {\n            if (funcs.swap_xy) r = m; else l = m;\n         } else if (xx > pnt_x + 0.5) {\n            if (funcs.swap_xy) l = m; else r = m;\n         } else { l++; r--; }\n      }\n\n      findbin = r = l;\n      grx1 = GetBinGrX(findbin);\n\n      if (funcs.swap_xy) {\n         while ((l>left) && (GetBinGrX(l-1) < grx1 + 2)) --l;\n         while ((r<right) && (GetBinGrX(r+1) > grx1 - 2)) ++r;\n      } else {\n         while ((l>left) && (GetBinGrX(l-1) > grx1 - 2)) --l;\n         while ((r<right) && (GetBinGrX(r+1) < grx1 + 2)) ++r;\n      }\n\n      if (l < r) {\n         // many points can be assigned with the same cursor position\n         // first try point around mouse y\n         let best = height;\n         for (let m=l;m<=r;m++) {\n            let dist = Math.abs(GetBinGrY(m) - pnt_y);\n            if (dist < best) { best = dist; findbin = m; }\n         }\n\n         // if best distance still too far from mouse position, just take from between\n         if (best > height/10)\n            findbin = Math.round(l + (r-l) / height * pnt_y);\n\n         grx1 = GetBinGrX(findbin);\n      }\n\n      grx1 = Math.round(grx1);\n      grx2 = Math.round(GetBinGrX(findbin+1));\n\n      if (this.options.Bar) {\n         let w = grx2 - grx1;\n         grx1 += Math.round(this.options.BarOffset*w);\n         grx2 = grx1 + Math.round(this.options.BarWidth*w);\n      }\n\n      if (grx1 > grx2) { let d = grx1; grx1 = grx2; grx2 = d; }\n\n      midx = Math.round((grx1+grx2)/2);\n\n      midy = gry1 = gry2 = GetBinGrY(findbin);\n\n      if (this.options.Bar) {\n         show_rect = true;\n\n         gapx = 0;\n\n         gry1 = Math.round(funcs.gry(((this.options.BaseLine!==false) && (this.options.BaseLine > funcs.scale_ymin)) ? this.options.BaseLine : funcs.scale_ymin));\n\n         if (gry1 > gry2) { let d = gry1; gry1 = gry2; gry2 = d; }\n\n         if (!pnt.touch && (pnt.nproc === 1))\n            if ((pnt_y<gry1) || (pnt_y>gry2)) findbin = null;\n\n      } else if (this.options.Error || this.options.Mark) {\n\n         show_rect = true;\n\n         let msize = 3;\n         if (this.markeratt) msize = Math.max(msize, this.markeratt.getFullSize());\n\n         if (this.options.Error) {\n            let cont = histo.getBinContent(findbin+1),\n                binerr = histo.getBinError(findbin+1);\n\n            gry1 = Math.round(funcs.gry(cont + binerr)); // up\n            gry2 = Math.round(funcs.gry(cont - binerr)); // down\n\n            let dx = (grx2-grx1)*this.options.errorX;\n            grx1 = Math.round(midx - dx);\n            grx2 = Math.round(midx + dx);\n         }\n\n         // show at least 6 pixels as tooltip rect\n         if (grx2 - grx1 < 2*msize) { grx1 = midx-msize; grx2 = midx+msize; }\n\n         gry1 = Math.min(gry1, midy - msize);\n         gry2 = Math.max(gry2, midy + msize);\n\n         if (!pnt.touch && (pnt.nproc === 1))\n            if ((pnt_y<gry1) || (pnt_y>gry2)) findbin = null;\n\n      } else if (this.options.Line) {\n\n         show_rect = false;\n\n      } else {\n\n         // if histogram alone, use old-style with rects\n         // if there are too many points at pixel, use circle\n         show_rect = (pnt.nproc === 1) && (right-left < width);\n\n         if (show_rect) {\n            gry2 = height;\n\n            if (!this.fillatt.empty()) {\n               gry2 = Math.round(funcs.gry(0));\n               if (gry2 < 0) gry2 = 0; else if (gry2 > height) gry2 = height;\n               if (gry2 < gry1) { let d = gry1; gry1 = gry2; gry2 = d; }\n            }\n\n            // for mouse events pointer should be between y1 and y2\n            if (((pnt.y < gry1) || (pnt.y > gry2)) && !pnt.touch) findbin = null;\n         }\n      }\n\n      if (findbin!==null) {\n         // if bin on boundary found, check that x position is ok\n         if ((findbin === left) && (grx1 > pnt_x + gapx))  findbin = null; else\n         if ((findbin === right-1) && (grx2 < pnt_x - gapx)) findbin = null; else\n         // if bars option used check that bar is not match\n         if ((pnt_x < grx1 - gapx) || (pnt_x > grx2 + gapx)) findbin = null; else\n         // exclude empty bin if empty bins suppressed\n         if (!this.options.Zero && (histo.getBinContent(findbin+1)===0)) findbin = null;\n      }\n\n      let ttrect = this.draw_g.select(\".tooltip_bin\");\n\n      if ((findbin === null) || ((gry2 <= 0) || (gry1 >= height))) {\n         ttrect.remove();\n         return null;\n      }\n\n      let res = { name: \"histo\", title: histo.fTitle,\n                  x: midx, y: midy, exact: true,\n                  color1: this.lineatt ? this.lineatt.color : 'green',\n                  color2: this.fillatt ? this.fillatt.getFillColorAlt('blue') : 'blue',\n                  lines: this.getBinTooltips(findbin) };\n\n      if (pnt.disabled) {\n         // case when tooltip should not highlight bin\n\n         ttrect.remove();\n         res.changed = true;\n      } else if (show_rect) {\n\n         if (ttrect.empty())\n            ttrect = this.draw_g.append(\"svg:rect\")\n                                .attr(\"class\",\"tooltip_bin h1bin\")\n                                .style(\"pointer-events\",\"none\");\n\n         res.changed = ttrect.property(\"current_bin\") !== findbin;\n\n         if (res.changed)\n            ttrect.attr(\"x\", pmain.swap_xy ? gry1 : grx1)\n                  .attr(\"width\", pmain.swap_xy ? gry2-gry1 : grx2-grx1)\n                  .attr(\"y\", pmain.swap_xy ? grx1 : gry1)\n                  .attr(\"height\", pmain.swap_xy ? grx2-grx1 : gry2-gry1)\n                  .style(\"opacity\", \"0.3\")\n                  .property(\"current_bin\", findbin);\n\n         res.exact = (Math.abs(midy - pnt_y) <= 5) || ((pnt_y>=gry1) && (pnt_y<=gry2));\n\n         res.menu = res.exact; // one could show context menu\n         // distance to middle point, use to decide which menu to activate\n         res.menu_dist = Math.sqrt((midx-pnt_x)**2 + (midy-pnt_y)**2);\n\n      } else {\n         let radius = this.lineatt.width + 3;\n\n         if (ttrect.empty())\n            ttrect = this.draw_g.append(\"svg:circle\")\n                                .attr(\"class\",\"tooltip_bin\")\n                                .style(\"pointer-events\",\"none\")\n                                .attr(\"r\", radius)\n                                .call(this.lineatt.func)\n                                .call(this.fillatt.func);\n\n         res.exact = (Math.abs(midx - pnt.x) <= radius) && (Math.abs(midy - pnt.y) <= radius);\n\n         res.menu = res.exact; // show menu only when mouse pointer exactly over the histogram\n         res.menu_dist = Math.sqrt((midx-pnt.x)**2 + (midy-pnt.y)**2);\n\n         res.changed = ttrect.property(\"current_bin\") !== findbin;\n\n         if (res.changed)\n            ttrect.attr(\"cx\", midx)\n                  .attr(\"cy\", midy)\n                  .property(\"current_bin\", findbin);\n      }\n\n      if (res.changed)\n         res.user_info = { obj: histo,  name: \"histo\",\n                           bin: findbin, cont: histo.getBinContent(findbin+1),\n                           grx: midx, gry: midy };\n\n      return res;\n   }\n\n   /** @summary Fill histogram context menu */\n   fillHistContextMenu(menu) {\n\n      menu.add(\"Auto zoom-in\", () => this.autoZoom());\n\n      let opts = this.getSupportedDrawOptions();\n\n      menu.addDrawMenu(\"Draw with\", opts, arg => {\n         if (arg==='inspect')\n            return this.showInspector();\n\n         this.decodeOptions(arg); // obsolete, should be implemented differently\n\n         if (this.options.need_fillcol && this.fillatt && this.fillatt.empty())\n            this.fillatt.change(5,1001);\n\n         // redraw all objects\n         this.interactiveRedraw(\"pad\", \"drawopt\");\n      });\n   }\n\n   /** @summary Perform automatic zoom inside non-zero region of histogram */\n   autoZoom() {\n      let left = this.getSelectIndex(\"x\", \"left\", -1),\n          right = this.getSelectIndex(\"x\", \"right\", 1),\n          dist = right - left, histo = this.getHisto(), xaxis = this.getAxis(\"x\");\n\n      if (dist == 0) return;\n\n      // first find minimum\n      let min = histo.getBinContent(left + 1);\n      for (let indx = left; indx < right; ++indx)\n         min = Math.min(min, histo.getBinContent(indx+1));\n      if (min > 0) return; // if all points positive, no chance for autoscale\n\n      while ((left < right) && (histo.getBinContent(left+1) <= min)) ++left;\n      while ((left < right) && (histo.getBinContent(right) <= min)) --right;\n\n      // if singular bin\n      if ((left === right-1) && (left > 2) && (right < this.nbinsx-2)) {\n         --left; ++right;\n      }\n\n      if ((right - left < dist) && (left < right))\n         return this.getFramePainter().zoom(xaxis.GetBinCoord(left), xaxis.GetBinCoord(right));\n   }\n\n   /** @summary Checks if it makes sense to zoom inside specified axis range */\n   canZoomInside(axis,min,max) {\n      let xaxis = this.getAxis(\"x\");\n\n      if ((axis == \"x\") && (xaxis.FindBin(max,0.5) - xaxis.FindBin(min,0) > 1)) return true;\n\n      if ((axis == \"y\") && (Math.abs(max-min) > Math.abs(this.ymax-this.ymin)*1e-6)) return true;\n\n      return false;\n   }\n\n   /** @summary Call appropriate draw function */\n   callDrawFunc(reason) {\n      let main = this.getFramePainter();\n\n      if (main && (main.mode3d !== this.options.Mode3D) && !this.isMainPainter())\n         this.options.Mode3D = main.mode3d;\n\n      return this.options.Mode3D ? this.draw3D(reason) : this.draw2D(reason);\n   }\n\n   /** @summary Draw in 2d */\n   draw2D(reason) {\n      this.clear3DScene();\n\n      return this.drawFrameAxes().then(res => {\n         return res ? this.drawingBins(reason) : false;\n      }).then(res => {\n         if (res)\n            return this.draw1DBins().then(() => this.addInteractivity());\n      }).then(() => this);\n   }\n\n   /** @summary Draw in 3d */\n   draw3D(reason) {\n      console.log('3D drawing is disabled, load ./hist/RH1Painter.mjs');\n      return this.draw2D(reason);\n   }\n\n   /** @summary Readraw histogram */\n   redraw(reason) {\n      return this.callDrawFunc(reason);\n   }\n\n   static _draw(painter, opt) {\n      return ensureRCanvas(painter).then(() => {\n\n         painter.setAsMainPainter();\n\n         painter.options = { Hist: false, Bar: false, BarStyle: 0,\n                             Error: false, ErrorKind: -1, errorX: gStyle.fErrorX,\n                             Zero: false, Mark: false,\n                             Line: false, Fill: false, Lego: 0, Surf: 0,\n                             Text: false, TextAngle: 0, TextKind: \"\", AutoColor: 0,\n                             BarOffset: 0., BarWidth: 1., BaseLine: false, Mode3D: false };\n\n         let d = new DrawOptions(opt);\n         if (d.check('R3D_', true))\n            painter.options.Render3D = constants.Render3D.fromString(d.part.toLowerCase());\n\n         let kind = painter.v7EvalAttr(\"kind\", \"hist\"),\n             sub = painter.v7EvalAttr(\"sub\", 0),\n             has_main = !!painter.getMainPainter(),\n             o = painter.options;\n\n         o.Text = painter.v7EvalAttr(\"drawtext\", false);\n         o.BarOffset = painter.v7EvalAttr(\"baroffset\", 0.);\n         o.BarWidth = painter.v7EvalAttr(\"barwidth\", 1.);\n         o.second_x = has_main && painter.v7EvalAttr(\"secondx\", false);\n         o.second_y = has_main && painter.v7EvalAttr(\"secondy\", false);\n\n         switch(kind) {\n            case \"bar\": o.Bar = true; o.BarStyle = sub; break;\n            case \"err\": o.Error = true; o.ErrorKind = sub; break;\n            case \"p\": o.Mark = true; break;\n            case \"l\": o.Line = true; break;\n            case \"lego\": o.Lego = sub > 0 ? 10+sub : 12; o.Mode3D = true; break;\n            default: o.Hist = true;\n         }\n\n         painter.scanContent();\n\n         return painter.callDrawFunc();\n      });\n   }\n\n   /** @summary draw RH1 object */\n   static draw(dom, histo, opt) {\n      return RH1Painter._draw(new RH1Painter(dom, histo), opt);\n   }\n\n} // class RH1Painter\n\nexport { RH1Painter };\n","import { settings, gStyle } from '../core.mjs';\nimport { RH1Painter as RH1Painter2D } from '../hist2d/RH1Painter.mjs';\nimport { RAxisPainter } from '../gpad/RAxisPainter.mjs';\nimport { assignFrame3DMethods, drawBinsLego } from './hist3d.mjs';\n\nclass RH1Painter extends RH1Painter2D {\n\n   /** @summary Draw 1-D histogram in 3D mode */\n   draw3D(reason) {\n\n      this.mode3d = true;\n\n      let main = this.getFramePainter(), // who makes axis drawing\n          is_main = this.isMainPainter(), // is main histogram\n          zmult = 1 + 2*gStyle.fHistTopMargin,\n          pr = Promise.resolve(this);\n\n      if (reason == \"resize\")  {\n         if (is_main && main.resize3D()) main.render3D();\n         return pr;\n      }\n\n      this.deleteAttr();\n\n      this.scanContent(true); // may be required for axis drawings\n\n      if (is_main) {\n         assignFrame3DMethods(main);\n         pr = main.create3DScene(this.options.Render3D).then(() => {\n            main.setAxesRanges(this.getAxis(\"x\"), this.xmin, this.xmax, null, this.ymin, this.ymax, null, 0, 0);\n            main.set3DOptions(this.options);\n            main.drawXYZ(main.toplevel, RAxisPainter, { use_y_for_z: true, zmult, zoom: settings.Zooming, ndim: 1, draw: true, v7: true });\n         });\n      }\n\n      if (!main.mode3d)\n         return pr;\n\n      return pr.then(() => this.drawingBins(reason)).then(() => {\n\n         // called when bins received from server, must be reentrant\n         let main = this.getFramePainter();\n\n         drawBinsLego(this, true);\n         this.updatePaletteDraw();\n         main.render3D();\n         main.addKeysHandler();\n         return this;\n      });\n   }\n\n      /** @summary draw RH1 object */\n   static draw(dom, histo, opt) {\n      return RH1Painter._draw(new RH1Painter(dom, histo), opt);\n   }\n\n} // class RH1Painter\n\nexport { RH1Painter };\n\n"],"x_google_ignoreList":[0,1]}