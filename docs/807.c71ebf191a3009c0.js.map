{"version":3,"file":"807.c71ebf191a3009c0.js","mappings":"0NAQA,MAAMA,KAAeC,OAAI,IAEzB,MAAMC,UAAyBC,KAI5BC,SAASC,EAAIC,GACVC,KAAKF,IAAMA,EACXE,KAAKD,IAAMA,KACXE,MAAcD,KAAKE,OAAOC,OAAO,QAASH,KAAKF,GAAIE,KAAKD,GAC3D,CAIAK,QAAQC,GACL,GAAIA,EAAa,OACjB,MAAMC,EAAWN,KAAKO,YAChBC,EAAOR,KAAKS,iBAAiBT,KAAKU,OACxC,IAAIC,EAAO,GAEX,QAASC,EAAI,EAAGA,GAAKN,EAASO,aAAcD,EAAG,CAC5C,MAAME,EAAId,KAAKe,UAAU,IAAKP,EAAKM,EAAER,EAASU,GAAGJ,IAAMZ,KAAKF,GAAIE,KAAKU,OAC/DO,EAAIjB,KAAKe,UAAU,IAAKP,EAAKS,EAAEX,EAASY,GAAGN,IAAMZ,KAAKD,GAAIC,KAAKU,OACrEJ,EAASU,GAAGJ,GAAKE,EACjBR,EAASY,GAAGN,GAAKK,EACjBN,GAAQ,YAAYC,KAAKE,KAAKG,MACjC,CACAjB,KAAKmB,eAAeR,EAAO,cAC3BX,KAAKoB,QACR,CAIAC,gBACG,MAAMf,EAAWN,KAAKO,YAEtB,GADcD,EAASgB,QAAQ7B,KACjBa,EAASO,WACpB,OAAO,KACV,IAAIU,EAAOjB,EAASU,GAAG,GAAIQ,EAAOD,EAC9BE,EAAOnB,EAASY,GAAG,GAAIQ,EAAOD,EAClC,QAASb,EAAI,EAAGA,GAAKN,EAASO,aAAcD,EACzCW,EAAOI,KAAKC,IAAIL,EAAMjB,EAASU,GAAGJ,IAClCY,EAAOG,KAAKE,IAAIL,EAAMlB,EAASU,GAAGJ,IAClCa,EAAOE,KAAKC,IAAIH,EAAMnB,EAASY,GAAGN,IAClCc,EAAOC,KAAKE,IAAIH,EAAMpB,EAASY,GAAGN,IAErC,MAAO,CAAEW,OAAME,OAAMD,OAAME,OAC9B,CAGAN,SACGpB,KAAK8B,UAEL,MAAMxB,EAAWN,KAAKO,YAChBG,EAAQJ,EAASgB,QAAQ7B,GACzBsC,EAAM/B,KAAKgC,cAAgB1B,EAAS2B,QACpCC,EAAU5B,EAAS6B,YAAcC,kBAAiBC,SAAMN,IAAQA,EAAIO,cAAcC,QAAQ,MAAQ,EAClG/B,EAAOR,KAAKS,iBAAiBC,GAEnCV,KAAKwC,cAAc,CAAEC,KAAMnC,IAC3BN,KAAK0C,cAAc,CAAED,KAAMnC,EAAUqC,OAAQT,IAE7C,IAAIU,EAAM,GACV,QAAShC,EAAI,EAAGA,GAAKN,EAASO,aAAcD,EACzCgC,GAAO,GAAGhC,EAAI,EAAE,IAAI,MAAMJ,EAAKM,EAAER,EAASU,GAAGJ,OAAOJ,EAAKS,EAAEX,EAASY,GAAGN,MAE1E,OAAAZ,KAAKE,OAAO2C,OAAO,YACPJ,KAAK,IAAKG,GAAOV,EAAS,IAAM,KAChCY,KAAKZ,EAAS,OAAWlC,KAAK+C,QAAQvC,MACtCsC,KAAK9C,KAAKgD,QAAQxC,OAAI,EAElCyC,MAAkBjD,KAAMkD,OAAQ,EAEhCC,MAAenD,MAEfA,KAAKF,GAAKE,KAAKD,GAAK,EACpBC,KAAKU,MAAQA,EAENV,IACV,CAGA,WAAaoD,CAAKC,EAAKC,EAAKvB,GAAK,SAAAwB,KAAA,YAC9B,MAAMC,EAAU,IAAI7D,EAAiB0D,EAAKC,EAAKvB,GAC/C,SAAO0B,iBAAcD,GAAS,GAAOE,KAAK,IAAMF,EAAQpC,SAAU,EAFpC,EAGjC","names":["kPolyLineNDC","BIT","TPolyLinePainter","ObjectPainter","moveDrag","dx","dy","this","makeTranslate","draw_g","select","moveEnd","not_changed","polyline","getObject","func","getAxisToSvgFunc","isndc","exec","n","fLastPoint","x","svgToAxis","fX","y","fY","submitCanvExec","redraw","getUserRanges","TestBit","minx","maxx","miny","maxy","Math","min","max","createG","opt","getDrawOpt","fOption","dofill","_typename","clTPolyLine","isStr","toLowerCase","indexOf","createAttLine","attr","createAttFill","enable","cmd","append","call","lineatt","fillatt","assignContextMenu","kToFront","addMoveHandler","draw","dom","obj","_asyncToGenerator","painter","ensureTCanvas","then"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/draw/TPolyLinePainter.mjs"],"sourcesContent":["import { BIT, isStr, clTPolyLine } from '../core.mjs';\nimport { makeTranslate } from '../base/BasePainter.mjs';\nimport { ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { ensureTCanvas } from '../gpad/TCanvasPainter.mjs';\nimport { addMoveHandler } from '../gui/utils.mjs';\nimport { assignContextMenu, kToFront } from '../gui/menu.mjs';\n\n\nconst kPolyLineNDC = BIT(14);\n\nclass TPolyLinePainter extends ObjectPainter {\n\n   /** @summary Dragging object\n    *  @private */\n   moveDrag(dx, dy) {\n      this.dx += dx;\n      this.dy += dy;\n      makeTranslate(this.draw_g.select('path'), this.dx, this.dy);\n   }\n\n   /** @summary End dragging object\n    * @private */\n   moveEnd(not_changed) {\n      if (not_changed) return;\n      const polyline = this.getObject(),\n            func = this.getAxisToSvgFunc(this.isndc);\n      let exec = '';\n\n      for (let n = 0; n <= polyline.fLastPoint; ++n) {\n         const x = this.svgToAxis('x', func.x(polyline.fX[n]) + this.dx, this.isndc),\n               y = this.svgToAxis('y', func.y(polyline.fY[n]) + this.dy, this.isndc);\n         polyline.fX[n] = x;\n         polyline.fY[n] = y;\n         exec += `SetPoint(${n},${x},${y});;`;\n      }\n      this.submitCanvExec(exec + 'Notify();;');\n      this.redraw();\n   }\n\n   /** @summary Returns object ranges\n    * @desc Can be used for newly created canvas */\n   getUserRanges() {\n      const polyline = this.getObject(),\n            isndc = polyline.TestBit(kPolyLineNDC);\n      if (isndc || !polyline.fLastPoint)\n         return null;\n      let minx = polyline.fX[0], maxx = minx,\n          miny = polyline.fY[0], maxy = miny;\n      for (let n = 1; n <= polyline.fLastPoint; ++n) {\n         minx = Math.min(minx, polyline.fX[n]);\n         maxx = Math.max(maxx, polyline.fX[n]);\n         miny = Math.min(miny, polyline.fY[n]);\n         maxy = Math.max(maxy, polyline.fY[n]);\n      }\n      return { minx, miny, maxx, maxy };\n   }\n\n   /** @summary Redraw poly line */\n   redraw() {\n      this.createG();\n\n      const polyline = this.getObject(),\n            isndc = polyline.TestBit(kPolyLineNDC),\n            opt = this.getDrawOpt() || polyline.fOption,\n            dofill = (polyline._typename === clTPolyLine) && (isStr(opt) && opt.toLowerCase().indexOf('f') >= 0),\n            func = this.getAxisToSvgFunc(isndc);\n\n      this.createAttLine({ attr: polyline });\n      this.createAttFill({ attr: polyline, enable: dofill });\n\n      let cmd = '';\n      for (let n = 0; n <= polyline.fLastPoint; ++n)\n         cmd += `${n > 0?'L':'M'}${func.x(polyline.fX[n])},${func.y(polyline.fY[n])}`;\n\n      this.draw_g.append('svg:path')\n                 .attr('d', cmd + (dofill ? 'Z' : ''))\n                 .call(dofill ? () => {} : this.lineatt.func)\n                 .call(this.fillatt.func);\n\n      assignContextMenu(this, kToFront);\n\n      addMoveHandler(this);\n\n      this.dx = this.dy = 0;\n      this.isndc = isndc;\n\n      return this;\n   }\n\n   /** @summary Draw TPolyLine object */\n   static async draw(dom, obj, opt) {\n      const painter = new TPolyLinePainter(dom, obj, opt);\n      return ensureTCanvas(painter, false).then(() => painter.redraw());\n   }\n\n} // class TPolyLinePainter\n\n\nexport { TPolyLinePainter };\n"],"x_google_ignoreList":[0]}