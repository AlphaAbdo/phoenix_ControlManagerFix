{"version":3,"file":"734.034da95a4df76dcc.js","mappings":"oNAQA,SAASA,EAAWC,EAAMC,EAAMC,EAAQ,GACrC,QAASC,EAAIH,EAAKI,OAAS,EAAGD,GAAK,IAAKA,EAAG,CACxC,MAAME,EAAKJ,EAAKE,GAAIG,EAAKL,EAAKE,EAAI,GAC5BI,EAAKP,EAAKG,GAAIK,EAAKR,EAAKG,EAAI,GAClC,GAAIE,IAAOH,EAAO,OAAOK,EACzB,GAAID,IAAOJ,EAAO,OAAOM,EACzB,GAAKH,EAAKH,GAAYI,EAAKJ,EACxB,OAAOK,GAAML,EAAQG,IAAOC,EAAKD,IAAOG,EAAKD,EACnD,CAEA,OAAOP,EAAK,GAAK,CACpB,CASA,MAAMS,UAAmBC,aAGtBC,gBAAkB,OAAOC,KAAKC,OAAOC,OAAS,MAAQ,CAGtDC,eAAiB,OAAOH,KAAKC,OAAOG,WAAaC,OAAO,CAGxDC,QAAU,OAAO,CAAM,CAGvBC,mBAAqB,OAAOP,KAAKC,KAAO,CAGxCO,aAAaC,GACV,IAAKA,GAAQT,KAAKG,iBAAmBM,EAAIL,UAAY,OAAO,SACrDK,EAAIC,QACX,MAAMC,EAAQX,KAAKY,WAEnB,GAAIZ,KAAKa,aAAc,CACpB,MAAMC,EAAKd,KAAKe,iBAAiBC,iBAAiB,OAAQC,UACtDH,GAAId,KAAKkB,WAAWP,EAAOG,EAAId,KAAKmB,kBAC3C,CAEA,OAAAnB,KAAKC,MAAQQ,EACbT,KAAKoB,mBAAmBX,EAAKE,GAC7BX,KAAKqB,eACE,CACV,CAIAC,OAAOC,GACJ,OAAKvB,KAAKwB,oBAAiC,SAAXD,GAAgC,SAAXA,GAAgC,SAAXA,GAAgC,SAAXA,KAC5FvB,KAAKoB,mBAAmBpB,KAAKC,MAAOD,KAAKY,YACzCZ,KAAKqB,eAGDI,MAAMH,OAAOC,EACvB,CAIAH,mBAAmBM,EAAMC,GACtB,MAAMC,EAAQF,EAAKG,MAAMrC,OAAS,EAElCQ,KAAKwB,kBAAqBI,EAAQ,IAAOE,WAASC,mBAAqB/B,KAAKgC,aAE5E,MAAMC,EAAKjC,KAAKmB,kBACVe,EAAMlC,KAAKe,iBAAiBoB,YAAW,GACvCC,EAAOF,GAAKG,MAAOC,EAAOJ,GAAKK,MAC/BC,EAAKP,GAAIQ,WAAWzC,KAAK0C,SAAU1C,KAAK2C,UAC9C,IAAIC,EAAOlB,EAAKmB,MAAOC,EAAOpB,EAAKqB,MAC/BC,EAAOtB,EAAKuB,MAAOC,EAAOxB,EAAKyB,MAC/BC,EAAO1B,EAAK2B,MAAOC,EAAO5B,EAAK6B,MAEhCf,GAAIgB,YAAchB,GAAIiB,YACtBb,EAAOc,KAAKC,IAAIf,EAAMJ,EAAGgB,WACzBV,EAAOY,KAAKE,IAAId,EAAMN,EAAGiB,YAGzBjB,GAAIqB,YAAcrB,GAAIsB,YACtBd,EAAOU,KAAKC,IAAIX,EAAMR,EAAGqB,WACzBX,EAAOQ,KAAKE,IAAIV,EAAMV,EAAGsB,YAGzBtB,GAAIuB,YAAcvB,GAAIwB,YACtBZ,EAAOM,KAAKC,IAAIP,EAAMZ,EAAGuB,WACzBT,EAAOI,KAAKE,IAAIN,EAAMd,EAAGwB,YAG5B,MAAMC,EAAaA,CAACC,EAAIC,KACjBxC,EAAKyC,WAAaF,EAAK,IAAMC,EAAK,KACnCxC,EAAKyC,SAAWF,EAAK,IAAMC,EAAK,GAChCxC,EAAK0C,OAAS,IAAIC,aAAa3C,EAAKyC,UAEvCzC,EAAK0C,OAAOE,KAAK,GACjB5C,EAAK6C,OAAOC,OAASP,EACrBvC,EAAK6C,OAAOE,OAAS,GACrB/C,EAAKgD,OAAOF,OAASN,EACrBxC,EAAKgD,OAAOD,OAAS,GACrB/C,EAAK6C,OAAO3B,MAAQD,EACpBjB,EAAK6C,OAAOzB,MAAQD,EACpBnB,EAAKgD,OAAO9B,MAAQG,EACpBrB,EAAKgD,OAAO5B,MAAQG,EACpBvB,EAAKiD,SAAWxB,EAChBzB,EAAKkD,SAAWvB,GAKnB,UAFOtD,KAAK8E,YAEP9E,KAAKwB,kBAAmB,CAC1B,MAAMuD,EAAMrB,KAAKE,IAAIlC,EAAKsD,KAAM,IAC1BC,EAAMvB,KAAKE,IAAIlC,EAAKwD,KAAM,IAC1BC,EAAMzB,KAAKE,IAAIlC,EAAK0D,KAAM,IAChC,IAAIC,GAAU,GAET3D,EAAKhB,WAAW,EAAC4E,kBAAe5D,KAClC2D,GAAU,GAEbpB,EAAWc,EAAKE,GAEZ7C,MACDmD,wBAAqB5D,EAAK6C,OAAQO,EAAKnC,EAAME,GAC5CR,MACDiD,wBAAqB5D,EAAKgD,OAAQM,EAAKjC,EAAME,GAEhD,MAAM7D,EAAO,IAAImG,MAAML,GAAM/F,EAAO,IAAIoG,MAAML,GAC9C,QAASM,EAAI,EAAGA,EAAIN,IAAOM,EACxBrG,EAAKqG,GAAKrC,EAAOqC,GAAKN,EAAM,IAAM7B,EAAOF,GAE5C,QAASsC,EAAI,EAAIA,EAAIT,IAASI,IAAWK,EACtC,QAASnG,EAAI,EAAIA,EAAIwF,IAASM,IAAW9F,EAAG,CACzC,MAAMoG,EAAIhE,EAAK6C,OAAOoB,aAAarG,EAAE,GAC/BsG,EAAIlE,EAAKgD,OAAOiB,aAAaF,EAAE,GACrC,IAAII,EAAI,EAER,IACG,QAASL,EAAI,EAAGA,EAAIN,IAAOM,EACxBpG,EAAKoG,GAAK/D,EAAKhB,QAAQiF,EAAGE,EAAGzG,EAAKqG,IAErCK,EAAI3G,EAAWC,EAAMC,EACxB,OACGgG,GAAU,CACb,CAEKA,GACF1D,EAAKoE,cAAcpE,EAAKqE,OAAOzG,EAAI,EAAGmG,EAAI,GAAIO,OAAOC,SAASJ,GAAKA,EAAI,EAC7E,CAGCT,IACDrF,KAAK8E,YAAa,GAEjBO,GAAYzD,EAAQ,IACrB5B,KAAKwB,mBAAoB,EAC/B,CAEA,GAAIxB,KAAKwB,kBAAmB,CACzBoB,EAAOlB,EAAKG,MAAMD,GAAQkB,EAAOpB,EAAKG,MAAMD,EAAM,GAClDoB,EAAOtB,EAAKG,MAAMD,EAAM,GAAIsB,EAAOxB,EAAKG,MAAMD,EAAM,GACpDwB,EAAO1B,EAAKG,MAAMD,EAAM,GAAI0B,EAAO5B,EAAKG,MAAMD,EAAM,GACpD,MAAMmD,EAAMrB,KAAKyC,MAAMzE,EAAKG,MAAMD,EAAM,IAClCqD,EAAMvB,KAAKyC,MAAMzE,EAAKG,MAAMD,EAAM,IAClCuD,EAAMzB,KAAKyC,MAAMzE,EAAKG,MAAMD,EAAM,IAGlCwE,GAAM9C,EAAOF,GAAQ+B,EAE3BlB,EAAWc,EAAM,EAAGE,EAAM,GAE1B,MAAM5F,EAAO,IAAImG,MAAML,EAAM,GAAI/F,EAAO,IAAIoG,MAAML,EAAM,GACxD,QAASM,EAAI,EAAGA,GAAKN,EAAKM,IACvBrG,EAAKqG,GAAKrC,EAAOqC,EAAEW,EAEtB,QAAS7G,EAAI,EAAGA,GAAKwF,IAAOxF,EACzB,QAASmG,EAAI,EAAGA,GAAKT,IAAOS,EAAG,CAC5B,QAASD,EAAI,EAAGA,GAAKN,EAAKM,IACvBpG,EAAKoG,GAAK/D,EAAKG,MAAMtC,GAAKwF,EAAM,IAAIW,GAAKT,EAAM,GAAGQ,IACrD,MAAMK,EAAI3G,EAAWC,EAAMC,GAC3BsC,EAAKoE,cAAcpE,EAAKqE,OAAOzG,EAAI,EAAGmG,EAAI,GAAIO,OAAOC,SAASJ,GAAKA,EAAI,EAC1E,CAEN,CAEAnE,SAAKzB,MAAQ,UACbmG,qBAAkB1E,EAAMD,EAAK4E,QAM7B3E,EAAK4E,WAAa7E,EAAK6E,WACvB5E,EAAK6E,WAAa9E,EAAK8E,WACvB7E,EAAK8E,WAAa/E,EAAK+E,WACvB9E,EAAK+E,WAAahF,EAAKgF,WACvB/E,EAAKgF,WAAajF,EAAKiF,WACvBhF,EAAKiF,aAAelF,EAAKkF,aACzBjF,EAAKkF,aAAenF,EAAKmF,aACzBlF,EAAKmF,YAAcpF,EAAKoF,YACxBnF,EAAKoF,OAASC,WAEPrF,CACV,CAGAsF,sBAAsBC,GACnBzF,MAAMwF,sBAAsBC,GAE5B,MAAMxF,EAAO1B,KAAKC,MAAO2B,EAAQF,GAAMG,MAAMrC,QAAU,EAEnDoC,EAAQ,GAAK5B,KAAKwB,oBACnBxB,KAAK4C,KAAOc,KAAKC,IAAI3D,KAAK4C,KAAMlB,EAAKG,MAAMD,EAAM,IACjD5B,KAAK8C,KAAOY,KAAKE,IAAI5D,KAAK8C,KAAMpB,EAAKG,MAAMD,EAAM,IACjD5B,KAAKgD,KAAOU,KAAKC,IAAI3D,KAAKgD,KAAMtB,EAAKG,MAAMD,EAAM,IACjD5B,KAAKkD,KAAOQ,KAAKE,IAAI5D,KAAKkD,KAAMxB,EAAKG,MAAMD,EAAM,IACjD5B,KAAKoD,KAAOM,KAAKC,IAAI3D,KAAKoD,KAAM1B,EAAKG,MAAMD,EAAM,IACjD5B,KAAKsD,KAAOI,KAAKE,IAAI5D,KAAKsD,KAAM5B,EAAKG,MAAMD,EAAM,KAEhDF,IACD1B,KAAK4C,KAAOc,KAAKC,IAAI3D,KAAK4C,KAAMlB,EAAKmB,OACrC7C,KAAK8C,KAAOY,KAAKE,IAAI5D,KAAK8C,KAAMpB,EAAKqB,OACrC/C,KAAKgD,KAAOU,KAAKC,IAAI3D,KAAKgD,KAAMtB,EAAKuB,OACrCjD,KAAKkD,KAAOQ,KAAKE,IAAI5D,KAAKkD,KAAMxB,EAAKyB,OACrCnD,KAAKoD,KAAOM,KAAKC,IAAI3D,KAAKoD,KAAM1B,EAAK2B,OACrCrD,KAAKsD,KAAOI,KAAKE,IAAI5D,KAAKsD,KAAM5B,EAAK6B,OAE3C,CAIA4D,qBAAqBC,GAElBA,EAAIC,MAAQrH,KAAK8E,WAAa,YAAc,EAC/C,CAGA,WAAawC,CAAKC,EAAKC,EAAKJ,GAAK,SAAAK,KAAA,aAC9B,EAAKC,SAAMN,KAAMA,EAAM,IACvB,IAAIO,EAAIP,EAAIQ,QAAQ,iBAAkB/G,GAAe,EAAOmB,GAAc,EACtE2F,GAAK,IACN9G,GAAe,EACfuG,EAAMA,EAAIS,MAAM,EAAGF,IAEtBA,EAAIP,EAAIQ,QAAQ,gBACZD,GAAK,IACN3F,GAAc,EACdoF,EAAMA,EAAIS,MAAM,EAAGF,IAGtB,MAAMG,EAAI,IAAIC,KAAYX,GAW1B,IAAIzF,EAVAmG,EAAEE,SAAoB,OAARZ,EACfA,EAAM,QACU,SAAVU,EAAEV,MACRA,EAAM,eAEoB,IAAxBA,EAAIQ,QAAQ,SAA2C,IAAxBR,EAAIQ,QAAQ,YAAY,EACpDK,MAAsBV,KACxBH,EAAM,kBAAoBA,EAAIS,MAAM,KAKtChH,IAEDc,EADc,IAAIuG,KAAcX,GACnBxG,iBAAiBC,iBAAiB,OAAQC,WAGrDU,IACFA,KAAOwG,mBAAgBlH,SAAQ,GAAI,IACnCU,EAAKoF,OAASC,YAGjB,MAAMoB,EAAU,IAAIvI,EAAW0H,EAAK5F,GAEpCyG,SAAQnI,MAAQuH,EAChBY,EAAQvH,aAAeA,EACvBuH,EAAQpG,YAAcA,EACtBoG,EAAQhH,mBAAmBoG,EAAK7F,GACzB0G,KAAaC,UAAUF,EAAShB,EAAK,EA1Cd,EA2CjC","names":["findZValue","arrz","arrv","cross","i","length","v1","v2","z1","z2","TF3Painter","TH2Painter","getObjectName","this","$func","fName","getClassName","_typename","clTF3","isTF1","getPrimaryObject","updateObject","obj","evalPar","histo","getHisto","webcanv_hist","h0","getPadPainter","findInPrimitives","clTH2F","updateAxes","getFramePainter","createTF3Histogram","scanContent","redraw","reason","_use_saved_points","super","func","hist","nsave","fSave","settings","PreferSavedPoints","force_saved","fp","pad","getRootPad","logx","fLogx","logy","fLogy","gr","getGrFuncs","second_x","second_y","xmin","fXmin","xmax","fXmax","ymin","fYmin","ymax","fYmax","zmin","fZmin","zmax","fZmax","zoom_xmin","zoom_xmax","Math","min","max","zoom_ymin","zoom_ymax","zoom_zmin","zoom_zmax","ensureBins","nx","ny","fNcells","fArray","Float32Array","fill","fXaxis","fNbins","fXbins","fYaxis","fMinimum","fMaximum","_fail_eval","npx","fNpx","npy","fNpy","npz","fNpz","iserror","proivdeEvalPar","produceTAxisLogScale","Array","k","j","x","GetBinCenter","y","z","setBinContent","getBin","Number","isFinite","round","dz","setHistogramTitle","fTitle","fLineColor","fLineStyle","fLineWidth","fFillColor","fFillStyle","fMarkerColor","fMarkerStyle","fMarkerSize","fBits","kNoStats","extractAxesProperties","ndim","fillWebObjectOptions","opt","fcust","draw","dom","tf3","_asyncToGenerator","isStr","p","indexOf","slice","d","DrawOptions","empty","getElementMainPainter","ObjectPainter","createHistogram","painter","THistPainter","_drawHist"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist/TF3Painter.mjs"],"sourcesContent":["import { createHistogram, setHistogramTitle, kNoStats, settings, clTF3, clTH2F, isStr } from '../core.mjs';\nimport { TH2Painter } from '../hist/TH2Painter.mjs';\nimport { proivdeEvalPar, produceTAxisLogScale } from '../hist/TF1Painter.mjs';\nimport { ObjectPainter, getElementMainPainter } from '../base/ObjectPainter.mjs';\nimport { DrawOptions } from '../base/BasePainter.mjs';\nimport { THistPainter } from '../hist2d/THistPainter.mjs';\n\n\nfunction findZValue(arrz, arrv, cross = 0) {\n   for (let i = arrz.length - 2; i >= 0; --i) {\n      const v1 = arrv[i], v2 = arrv[i + 1],\n            z1 = arrz[i], z2 = arrz[i + 1];\n      if (v1 === cross) return z1;\n      if (v2 === cross) return z2;\n      if ((v1 < cross) !== (v2 < cross))\n         return z1 + (cross - v1) / (v2 - v1) * (z2 - z1);\n   }\n\n   return arrz[0] - 1;\n}\n\n\n/**\n  * @summary Painter for TF3 object\n  *\n  * @private\n  */\n\nclass TF3Painter extends TH2Painter {\n\n   /** @summary Returns drawn object name */\n   getObjectName() { return this.$func?.fName ?? 'func'; }\n\n   /** @summary Returns drawn object class name */\n   getClassName() { return this.$func?._typename ?? clTF3; }\n\n   /** @summary Returns true while function is drawn */\n   isTF1() { return true; }\n\n   /** @summary Returns primary function which was then drawn as histogram */\n   getPrimaryObject() { return this.$func; }\n\n   /** @summary Update histogram */\n   updateObject(obj /*, opt */) {\n      if (!obj || (this.getClassName() !== obj._typename)) return false;\n      delete obj.evalPar;\n      const histo = this.getHisto();\n\n      if (this.webcanv_hist) {\n         const h0 = this.getPadPainter()?.findInPrimitives('Func', clTH2F);\n         if (h0) this.updateAxes(histo, h0, this.getFramePainter());\n      }\n\n      this.$func = obj;\n      this.createTF3Histogram(obj, histo);\n      this.scanContent();\n      return true;\n   }\n\n   /** @summary Redraw TF2\n     * @private */\n   redraw(reason) {\n      if (!this._use_saved_points && (reason === 'logx' || reason === 'logy' || reason === 'logy' || reason === 'zoom')) {\n         this.createTF3Histogram(this.$func, this.getHisto());\n         this.scanContent();\n      }\n\n      return super.redraw(reason);\n   }\n\n   /** @summary Create histogram for TF3 drawing\n     * @private */\n   createTF3Histogram(func, hist) {\n      const nsave = func.fSave.length - 9;\n\n      this._use_saved_points = (nsave > 0) && (settings.PreferSavedPoints || this.force_saved);\n\n      const fp = this.getFramePainter(),\n            pad = this.getPadPainter()?.getRootPad(true),\n            logx = pad?.fLogx, logy = pad?.fLogy,\n            gr = fp?.getGrFuncs(this.second_x, this.second_y);\n      let xmin = func.fXmin, xmax = func.fXmax,\n          ymin = func.fYmin, ymax = func.fYmax,\n          zmin = func.fZmin, zmax = func.fZmax;\n\n     if (gr?.zoom_xmin !== gr?.zoom_xmax) {\n         xmin = Math.min(xmin, gr.zoom_xmin);\n         xmax = Math.max(xmax, gr.zoom_xmax);\n      }\n\n     if (gr?.zoom_ymin !== gr?.zoom_ymax) {\n         ymin = Math.min(ymin, gr.zoom_ymin);\n         ymax = Math.max(ymax, gr.zoom_ymax);\n      }\n\n     if (gr?.zoom_zmin !== gr?.zoom_zmax) {\n         zmin = Math.min(zmin, gr.zoom_zmin);\n         zmax = Math.max(zmax, gr.zoom_zmax);\n      }\n\n      const ensureBins = (nx, ny) => {\n         if (hist.fNcells !== (nx + 2) * (ny + 2)) {\n            hist.fNcells = (nx + 2) * (ny + 2);\n            hist.fArray = new Float32Array(hist.fNcells);\n         }\n         hist.fArray.fill(0);\n         hist.fXaxis.fNbins = nx;\n         hist.fXaxis.fXbins = [];\n         hist.fYaxis.fNbins = ny;\n         hist.fYaxis.fXbins = [];\n         hist.fXaxis.fXmin = xmin;\n         hist.fXaxis.fXmax = xmax;\n         hist.fYaxis.fXmin = ymin;\n         hist.fYaxis.fXmax = ymax;\n         hist.fMinimum = zmin;\n         hist.fMaximum = zmax;\n      };\n\n      delete this._fail_eval;\n\n      if (!this._use_saved_points) {\n         const npx = Math.max(func.fNpx, 20),\n               npy = Math.max(func.fNpy, 20),\n               npz = Math.max(func.fNpz, 20);\n         let iserror = false;\n\n         if (!func.evalPar && !proivdeEvalPar(func))\n            iserror = true;\n\n         ensureBins(npx, npy);\n\n         if (logx)\n            produceTAxisLogScale(hist.fXaxis, npx, xmin, xmax);\n         if (logy)\n            produceTAxisLogScale(hist.fYaxis, npy, ymin, ymax);\n\n         const arrv = new Array(npz), arrz = new Array(npz);\n         for (let k = 0; k < npz; ++k)\n            arrz[k] = zmin + k / (npz - 1) * (zmax - zmin);\n\n         for (let j = 0; (j < npy) && !iserror; ++j) {\n            for (let i = 0; (i < npx) && !iserror; ++i) {\n               const x = hist.fXaxis.GetBinCenter(i+1),\n                     y = hist.fYaxis.GetBinCenter(j+1);\n               let z = 0;\n\n               try {\n                  for (let k = 0; k < npz; ++k)\n                     arrv[k] = func.evalPar(x, y, arrz[k]);\n\n                  z = findZValue(arrz, arrv);\n               } catch {\n                  iserror = true;\n               }\n\n               if (!iserror)\n                  hist.setBinContent(hist.getBin(i + 1, j + 1), Number.isFinite(z) ? z : 0);\n            }\n         }\n\n         if (iserror)\n            this._fail_eval = true;\n\n         if (iserror && (nsave > 0))\n            this._use_saved_points = true;\n      }\n\n      if (this._use_saved_points) {\n         xmin = func.fSave[nsave]; xmax = func.fSave[nsave+1];\n         ymin = func.fSave[nsave+2]; ymax = func.fSave[nsave+3];\n         zmin = func.fSave[nsave+4]; zmax = func.fSave[nsave+5];\n         const npx = Math.round(func.fSave[nsave+6]),\n               npy = Math.round(func.fSave[nsave+7]),\n               npz = Math.round(func.fSave[nsave+8]),\n               // dx = (xmax - xmin) / npx,\n               // dy = (ymax - ymin) / npy,\n               dz = (zmax - zmin) / npz;\n\n         ensureBins(npx + 1, npy + 1);\n\n         const arrv = new Array(npz + 1), arrz = new Array(npz + 1);\n         for (let k = 0; k <= npz; k++)\n            arrz[k] = zmin + k*dz;\n\n         for (let i = 0; i <= npx; ++i) {\n            for (let j = 0; j <= npy; ++j) {\n               for (let k = 0; k <= npz; k++)\n                  arrv[k] = func.fSave[i + (npx + 1)*(j + (npy + 1)*k)];\n               const z = findZValue(arrz, arrv);\n               hist.setBinContent(hist.getBin(i + 1, j + 1), Number.isFinite(z) ? z : 0);\n            }\n         }\n      }\n\n      hist.fName = 'Func';\n      setHistogramTitle(hist, func.fTitle);\n\n\n      // hist.fMinimum = func.fMinimum;\n      // hist.fMaximum = func.fMaximum;\n      // fHistogram->SetContour(fContour.fN, levels);\n      hist.fLineColor = func.fLineColor;\n      hist.fLineStyle = func.fLineStyle;\n      hist.fLineWidth = func.fLineWidth;\n      hist.fFillColor = func.fFillColor;\n      hist.fFillStyle = func.fFillStyle;\n      hist.fMarkerColor = func.fMarkerColor;\n      hist.fMarkerStyle = func.fMarkerStyle;\n      hist.fMarkerSize = func.fMarkerSize;\n      hist.fBits |= kNoStats;\n\n      return hist;\n   }\n\n   /** @summary Extract function ranges */\n   extractAxesProperties(ndim) {\n      super.extractAxesProperties(ndim);\n\n      const func = this.$func, nsave = func?.fSave.length ?? 0;\n\n      if (nsave > 9 && this._use_saved_points) {\n         this.xmin = Math.min(this.xmin, func.fSave[nsave-9]);\n         this.xmax = Math.max(this.xmax, func.fSave[nsave-8]);\n         this.ymin = Math.min(this.ymin, func.fSave[nsave-7]);\n         this.ymax = Math.max(this.ymax, func.fSave[nsave-6]);\n         this.zmin = Math.min(this.zmin, func.fSave[nsave-5]);\n         this.zmax = Math.max(this.zmax, func.fSave[nsave-4]);\n      }\n      if (func) {\n         this.xmin = Math.min(this.xmin, func.fXmin);\n         this.xmax = Math.max(this.xmax, func.fXmax);\n         this.ymin = Math.min(this.ymin, func.fYmin);\n         this.ymax = Math.max(this.ymax, func.fYmax);\n         this.zmin = Math.min(this.zmin, func.fZmin);\n         this.zmax = Math.max(this.zmax, func.fZmax);\n      }\n   }\n\n   /** @summary fill information for TWebCanvas\n     * @private */\n   fillWebObjectOptions(opt) {\n      // mark that saved points are used or evaluation failed\n      opt.fcust = this._fail_eval ? 'func_fail' : '';\n   }\n\n   /** @summary draw TF3 object */\n   static async draw(dom, tf3, opt) {\n      if (!isStr(opt)) opt = '';\n      let p = opt.indexOf(';webcanv_hist'), webcanv_hist = false, force_saved = false;\n      if (p >= 0) {\n         webcanv_hist = true;\n         opt = opt.slice(0, p);\n      }\n      p = opt.indexOf(';force_saved');\n      if (p >= 0) {\n         force_saved = true;\n         opt = opt.slice(0, p);\n      }\n\n      const d = new DrawOptions(opt);\n      if (d.empty() || (opt === 'gl'))\n         opt = 'surf1';\n      else if (d.opt === 'SAME')\n         opt = 'surf1 same';\n\n      if ((opt.indexOf('same') === 0) || (opt.indexOf('SAME') === 0)) {\n         if (!getElementMainPainter(dom))\n            opt = 'A_ADJUST_FRAME_' + opt.slice(4);\n      }\n\n      let hist;\n\n      if (webcanv_hist) {\n         const dummy = new ObjectPainter(dom);\n         hist = dummy.getPadPainter()?.findInPrimitives('Func', clTH2F);\n      }\n\n      if (!hist) {\n         hist = createHistogram(clTH2F, 20, 20);\n         hist.fBits |= kNoStats;\n      }\n\n      const painter = new TF3Painter(dom, hist);\n\n      painter.$func = tf3;\n      painter.webcanv_hist = webcanv_hist;\n      painter.force_saved = force_saved;\n      painter.createTF3Histogram(tf3, hist);\n      return THistPainter._drawHist(painter, opt);\n   }\n\n} // class TF3Painter\n\nexport { TF3Painter };\n"],"x_google_ignoreList":[0]}