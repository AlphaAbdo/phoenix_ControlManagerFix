"use strict";var y=Math.pow;(self.webpackChunkphoenix_app=self.webpackChunkphoenix_app||[]).push([[727],{3727:(v,_,m)=>{m.r(_),m.d(_,{TSplinePainter:()=>g});var p=m(1773),u=m(5611),P=m(2454),X=m(7320);class g extends P.tK{updateObject(t,i){let e=this.getObject();return e._typename==t._typename&&(e!==t&&Object.assign(e,t),void 0!==i&&this.decodeOptions(i),!0)}eval(t,i){let e=i-t.fX;return"TSplinePoly3"==t._typename?t.fY+e*(t.fB+e*(t.fC+e*t.fD)):"TSplinePoly5"==t._typename?t.fY+e*(t.fB+e*(t.fC+e*(t.fD+e*(t.fE+e*t.fF)))):t.fY+e}findX(t){let i=this.getObject(),e=0,n=i.fNp-1;if(t<=i.fXmin)return 0;if(t>=i.fXmax)return n;if(i.fKstep)e=Math.round((t-i.fXmin)/i.fDelta),t<i.fPoly[e].fX?e=Math.max(e-1,0):e<n&&t>i.fPoly[e+1].fX&&++e;else for(;n-e>1;){let a=Math.round((e+n)/2);t>i.fPoly[a].fX?e=a:n=a}return e}createDummyHisto(){let t=0,i=1,e=0,n=1,a=this.getObject();null!=a&&a.fPoly&&(t=i=a.fPoly[0].fX,e=n=a.fPoly[0].fY,a.fPoly.forEach(r=>{t=Math.min(r.fX,t),i=Math.max(r.fX,i),e=Math.min(r.fY,e),n=Math.max(r.fY,n)}),n>0&&(n*=1+p.gStyle.fHistTopMargin),e<0&&(e*=1+p.gStyle.fHistTopMargin));let s=(0,p.create)("TH1I");return s.fName=a.fName+"_hist",s.fTitle=a.fTitle,s.fXaxis.fXmin=t,s.fXaxis.fXmax=i,s.fYaxis.fXmin=e,s.fYaxis.fXmax=n,s}processTooltipEvent(t){let s,r,i=!1,e=this.getObject(),n=this.getFramePainter(),a=null==n?void 0:n.getGrFuncs(this.options.second_x,this.options.second_y),l=null,o=0;if(null!==t&&e&&a?(s=a.revertAxis("x",t.x),o=this.findX(s),l=e.fPoly[o],r=this.eval(l,s),o<e.fN-1&&Math.abs(e.fPoly[o+1].fX-s)<Math.abs(s-l.fX)&&(l=e.fPoly[++o]),Math.abs(a.grx(l.fX)-t.x)<.5*this.knot_size?(s=l.fX,r=l.fY):(l=null,(s<e.fXmin||s>e.fXmax)&&(i=!0))):i=!0,i)return this.draw_g&&this.draw_g.select(".tooltip_bin").remove(),null;let h=this.draw_g.select(".tooltip_bin"),c=this.lineatt.width+3;h.empty()&&(h=this.draw_g.append("svg:circle").attr("class","tooltip_bin").style("pointer-events","none").attr("r",c).style("fill","none").call(this.lineatt.func));let f={name:this.getObject().fName,title:this.getObject().fTitle,x:a.grx(s),y:a.gry(r),color1:this.lineatt.color,lines:[],exact:null!==l||Math.abs(a.gry(r)-t.y)<c};f.changed=h.property("current_xx")!==s,f.menu=f.exact,f.menu_dist=Math.sqrt(y(f.x-t.x,2)+y(f.y-t.y,2)),f.changed&&h.attr("cx",Math.round(f.x)).attr("cy",Math.round(f.y)).property("current_xx",s);let d=this.getObjectHint();return d.length>0&&f.lines.push(d),f.lines.push("x = "+a.axisAsText("x",s)),f.lines.push("y = "+a.axisAsText("y",r)),null!==l&&(f.lines.push("knot = "+o),f.lines.push("B = "+(0,u.Ee)(l.fB,p.gStyle.fStatFormat)),f.lines.push("C = "+(0,u.Ee)(l.fC,p.gStyle.fStatFormat)),f.lines.push("D = "+(0,u.Ee)(l.fD,p.gStyle.fStatFormat)),void 0!==l.fE&&void 0!==l.fF&&(f.lines.push("E = "+(0,u.Ee)(l.fE,p.gStyle.fStatFormat)),f.lines.push("F = "+(0,u.Ee)(l.fF,p.gStyle.fStatFormat)))),f}redraw(){let t=this.getObject(),i=this.getFramePainter(),e=null==i?void 0:i.getGrFuncs(this.options.second_x,this.options.second_y),n=i.getFrameWidth(),a=i.getFrameHeight();if(this.createG(!0),this.knot_size=5,this.createAttLine({attr:t}),this.options.Line||this.options.Curve){let s=Math.max(10,t.fNpx),r=Math.max(i.scale_xmin,t.fXmin),l=Math.min(i.scale_xmax,t.fXmax),o=this.findX(r),h=[];i.logx&&(r=Math.log(r),l=Math.log(l));for(let d=0;d<s;++d){let x=r+(l-r)/s*(d-1);for(i.logx&&(x=Math.exp(x));o<t.fNp-1&&x>t.fPoly[o+1].fX;)++o;let M=this.eval(t.fPoly[o],x);h.push({x,y:M,grx:e.grx(x),gry:e.gry(M)})}let c=a;void 0!==i.hmin&&i.hmin>=0&&(c=Math.round(e.gry(0)),(c>a||c<0)&&(c=a));let f=(0,u.Cq)("bezier",h,c,2);this.draw_g.append("svg:path").attr("class","line").attr("d",f.path).style("fill","none").call(this.lineatt.func)}if(this.options.Mark){let s="";this.createAttMarker({attr:t}),this.markeratt.resetPos(),this.knot_size=this.markeratt.getFullSize();for(let r=0;r<t.fPoly.length;r++){let l=t.fPoly[r],o=e.grx(l.fX);if(o>-this.knot_size&&o<n+this.knot_size){let h=e.gry(l.fY);h>-this.knot_size&&h<a+this.knot_size&&(s+=this.markeratt.create(o,h))}}s&&this.draw_g.append("svg:path").attr("d",s).call(this.markeratt.func)}}canZoomInside(t){return!("x"!==t||!this.getObject())}decodeOptions(t){let i=new u.pc(t);this.options||(this.options={});let e=!!this.getMainPainter();Object.assign(this.options,{Same:i.check("SAME"),Line:i.check("L"),Curve:i.check("C"),Mark:i.check("P"),Hopt:"AXIS",second_x:!1,second_y:!1}),!this.options.Line&&!this.options.Curve&&!this.options.Mark&&(this.options.Curve=!0),i.check("X+")&&(this.options.Hopt+="X+",this.options.second_x=e),i.check("Y+")&&(this.options.Hopt+="Y+",this.options.second_y=e),this.storeDrawOpt(t)}static draw(t,i,e){let n=new g(t,i);n.decodeOptions(e);let a=Promise.resolve(),s=!n.getMainPainter();if(s||n.options.second_x||n.options.second_y){if(n.options.Same&&s)return console.warn("TSpline painter requires histogram to be drawn"),null;let r=n.createDummyHisto();a=X.TH1Painter.draw(t,r,n.options.Hopt)}return a.then(()=>(n.addToPadPrimitives(),n.redraw(),n))}}}}]);
//# sourceMappingURL=727.be5126ca7441fcc7.js.map