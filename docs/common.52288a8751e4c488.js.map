{"version":3,"file":"common.52288a8751e4c488.js","mappings":"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","names":["_typeof","o","Symbol","iterator","constructor","prototype","kLineNDC","BIT","TLinePainter","ObjectPainter","moveStart","x","y","fullsize","Math","sqrt","this","x1","x2","y1","y2","sz1","sz2","side","moveDrag","dx","dy","draw_g","select","attr","createPath","moveEnd","not_changed","line","getObject","exec","fX1","svgToAxis","isndc","fX2","fY1","fY2","submitCanvExec","prepareDraw","TestBit","func","getAxisToSvgFunc","createAttLine","round","addExtras","redraw","createG","elem","append","call","lineatt","addMoveHandler","assignContextMenu","kToFront","draw","dom","obj","opt","_asyncToGenerator","painter","ensureTCanvas","then","drawPolyMarker3D","_drawPolyMarker3D","apply","arguments","fp","$fp","getFramePainter","isObject","grx","gry","grz","poly","fP","step","numselect","i","length","scale_xmin","scale_xmax","scale_ymin","scale_ymax","scale_zmin","scale_zmax","settings","OptimizeDraw","floor","size","pnts","PointsCreator","webgl","size_x3d","index","Int32Array","icnt","addPoint","createPoints","color","getColor","fMarkerColor","style","fMarkerStyle","mesh","tip_color","tip_name","fName","scale0","scale","add3DMesh","tooltip","intersect","indx","nvertex","z1","z2","lines","axisAsText","render3D","TGraphPainter","TGraphPainter2D","drawBins3D","graph","mode3d","toplevel","console","log","zoom_xmin","zoom_xmax","options","pos3d","createGraphDrawAttributes","drawbins","optimizeBins","first","last","zoom_ymin","zoom_ymax","p0","n","p1","push","createLineSegments","create3DLineMaterial","drawAxisHisto","_this","TH1Painter","getDom","createHistogram","Axis","_drawGraph"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/jsroot/modules/draw/TLinePainter.mjs","../node_modules/jsroot/modules/draw/TPolyMarker3D.mjs","../node_modules/jsroot/modules/hist/TGraphPainter.mjs"],"sourcesContent":["export default function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}","import { BIT } from '../core.mjs';\nimport { ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { ensureTCanvas } from '../gpad/TCanvasPainter.mjs';\nimport { addMoveHandler } from '../gui/utils.mjs';\nimport { assignContextMenu, kToFront } from '../gui/menu.mjs';\n\n\nconst kLineNDC = BIT(14);\n\nclass TLinePainter extends ObjectPainter {\n\n   /** @summary Start interactive moving */\n   moveStart(x, y) {\n      const fullsize = Math.sqrt((this.x1-this.x2)**2 + (this.y1-this.y2)**2),\n          sz1 = Math.sqrt((x-this.x1)**2 + (y-this.y1)**2)/fullsize,\n          sz2 = Math.sqrt((x-this.x2)**2 + (y-this.y2)**2)/fullsize;\n      if (sz1 > 0.9)\n         this.side = 1;\n      else if (sz2 > 0.9)\n         this.side = -1;\n      else\n         this.side = 0;\n   }\n\n   /** @summary Continue interactive moving */\n   moveDrag(dx, dy) {\n      if (this.side !== 1) { this.x1 += dx; this.y1 += dy; }\n      if (this.side !== -1) { this.x2 += dx; this.y2 += dy; }\n      this.draw_g.select('path').attr('d', this.createPath());\n   }\n\n   /** @summary Finish interactive moving */\n   moveEnd(not_changed) {\n      if (not_changed) return;\n      const line = this.getObject();\n      let exec = '';\n      line.fX1 = this.svgToAxis('x', this.x1, this.isndc);\n      line.fX2 = this.svgToAxis('x', this.x2, this.isndc);\n      line.fY1 = this.svgToAxis('y', this.y1, this.isndc);\n      line.fY2 = this.svgToAxis('y', this.y2, this.isndc);\n      if (this.side !== 1) exec += `SetX1(${line.fX1});;SetY1(${line.fY1});;`;\n      if (this.side !== -1) exec += `SetX2(${line.fX2});;SetY2(${line.fY2});;`;\n      this.submitCanvExec(exec + 'Notify();;');\n   }\n\n   /** @summary Calculate line coordinates */\n   prepareDraw() {\n      const line = this.getObject();\n\n      this.isndc = line.TestBit(kLineNDC);\n\n      const func = this.getAxisToSvgFunc(this.isndc, true);\n\n      this.x1 = func.x(line.fX1);\n      this.y1 = func.y(line.fY1);\n      this.x2 = func.x(line.fX2);\n      this.y2 = func.y(line.fY2);\n\n      this.createAttLine({ attr: line });\n   }\n\n   /** @summary Create path */\n   createPath() {\n      const x1 = Math.round(this.x1), x2 = Math.round(this.x2), y1 = Math.round(this.y1), y2 = Math.round(this.y2);\n      return `M${x1},${y1}` + (x1 === x2 ? `V${y2}` : (y1 === y2 ? `H${x2}` : `L${x2},${y2}`));\n   }\n\n   /** @summary Add extras - used for TArrow */\n   addExtras() {}\n\n   /** @summary Redraw line */\n   redraw() {\n      this.createG();\n\n      this.prepareDraw();\n\n      const elem = this.draw_g.append('svg:path')\n                       .attr('d', this.createPath())\n                       .call(this.lineatt.func);\n\n      this.addExtras(elem);\n\n      addMoveHandler(this);\n      assignContextMenu(this, kToFront);\n\n      return this;\n   }\n\n   /** @summary Draw TLine object */\n   static async draw(dom, obj, opt) {\n      const painter = new TLinePainter(dom, obj, opt);\n      return ensureTCanvas(painter, false).then(() => painter.redraw());\n   }\n\n} // class TLinePainter\n\n\nexport { TLinePainter };\n","import { settings, isObject } from '../core.mjs';\nimport { PointsCreator } from '../base/base3d.mjs';\n\n/** @summary direct draw function for TPolyMarker3D object\n  * @private */\nasync function drawPolyMarker3D() {\n   const fp = this.$fp || this.getFramePainter();\n\n   delete this.$fp;\n\n   if (!isObject(fp) || !fp.grx || !fp.gry || !fp.grz)\n      return this;\n\n   const poly = this.getObject(), sizelimit = 50000, fP = poly.fP;\n   let step = 1, numselect = 0;\n\n   for (let i = 0; i < fP.length; i += 3) {\n      if ((fP[i] < fp.scale_xmin) || (fP[i] > fp.scale_xmax) ||\n          (fP[i+1] < fp.scale_ymin) || (fP[i+1] > fp.scale_ymax) ||\n          (fP[i+2] < fp.scale_zmin) || (fP[i+2] > fp.scale_zmax)) continue;\n      ++numselect;\n   }\n\n   if ((settings.OptimizeDraw > 0) && (numselect > sizelimit)) {\n      step = Math.floor(numselect/sizelimit);\n      if (step <= 2) step = 2;\n   }\n\n   const size = Math.floor(numselect/step),\n         pnts = new PointsCreator(size, fp.webgl, fp.size_x3d/100),\n         index = new Int32Array(size);\n   let select = 0, icnt = 0;\n\n   for (let i = 0; i < fP.length; i += 3) {\n      if ((fP[i] < fp.scale_xmin) || (fP[i] > fp.scale_xmax) ||\n          (fP[i+1] < fp.scale_ymin) || (fP[i+1] > fp.scale_ymax) ||\n          (fP[i+2] < fp.scale_zmin) || (fP[i+2] > fp.scale_zmax)) continue;\n\n      if (step > 1) {\n         select = (select+1) % step;\n         if (select !== 0) continue;\n      }\n\n      index[icnt++] = i;\n\n      pnts.addPoint(fp.grx(fP[i]), fp.gry(fP[i+1]), fp.grz(fP[i+2]));\n   }\n\n   return pnts.createPoints({ color: this.getColor(poly.fMarkerColor), style: poly.fMarkerStyle }).then(mesh => {\n      mesh.tip_color = (poly.fMarkerColor === 3) ? 0xFF0000 : 0x00FF00;\n      mesh.tip_name = poly.fName || 'Poly3D';\n      mesh.poly = poly;\n      mesh.fp = fp;\n      mesh.scale0 = 0.7*pnts.scale;\n      mesh.index = index;\n\n      fp.add3DMesh(mesh, this, true);\n\n      mesh.tooltip = function(intersect) {\n         let indx = Math.floor(intersect.index / this.nvertex);\n         if ((indx < 0) || (indx >= this.index.length)) return null;\n\n         indx = this.index[indx];\n\n         const fp = this.fp,\n               grx = fp.grx(this.poly.fP[indx]),\n               gry = fp.gry(this.poly.fP[indx+1]),\n               grz = fp.grz(this.poly.fP[indx+2]);\n\n         return {\n            x1: grx - this.scale0,\n            x2: grx + this.scale0,\n            y1: gry - this.scale0,\n            y2: gry + this.scale0,\n            z1: grz - this.scale0,\n            z2: grz + this.scale0,\n            color: this.tip_color,\n            lines: [this.tip_name,\n                     'pnt: ' + indx/3,\n                     'x: ' + fp.axisAsText('x', this.poly.fP[indx]),\n                     'y: ' + fp.axisAsText('y', this.poly.fP[indx+1]),\n                     'z: ' + fp.axisAsText('z', this.poly.fP[indx+2])\n                   ]\n         };\n      };\n\n      fp.render3D(100); // set timeout to be able draw other points\n\n      return this;\n   });\n}\n\nexport { drawPolyMarker3D };\n","import { TGraphPainter as TGraphPainter2D } from '../hist2d/TGraphPainter.mjs';\nimport { TH1Painter } from './TH1Painter.mjs';\nimport { createLineSegments, create3DLineMaterial } from '../base/base3d.mjs';\n\n\nclass TGraphPainter extends TGraphPainter2D {\n\n   /** @summary Draw TGraph points in 3D\n     * @private */\n   drawBins3D(fp, graph) {\n      if (!fp.mode3d || !fp.grx || !fp.gry || !fp.grz || !fp.toplevel)\n         return console.log('Frame painter missing base 3d elements');\n\n      if (fp.zoom_xmin !== fp.zoom_xmax)\n        if ((this.options.pos3d < fp.zoom_xmin) || (this.options.pos3d > fp.zoom_xmax)) return;\n\n      this.createGraphDrawAttributes(true);\n\n      const drawbins = this.optimizeBins(1000);\n      let first = 0, last = drawbins.length-1;\n\n      if (fp.zoom_ymin !== fp.zoom_ymax) {\n         while ((first < last) && (drawbins[first].x < fp.zoom_ymin)) first++;\n         while ((first < last) && (drawbins[last].x > fp.zoom_ymax)) last--;\n      }\n\n      if (first === last) return;\n\n      const pnts = [], grx = fp.grx(this.options.pos3d);\n      let p0 = drawbins[first];\n\n      for (let n = first + 1; n <= last; ++n) {\n         const p1 = drawbins[n];\n         pnts.push(grx, fp.gry(p0.x), fp.grz(p0.y),\n                   grx, fp.gry(p1.x), fp.grz(p1.y));\n         p0 = p1;\n      }\n\n      const lines = createLineSegments(pnts, create3DLineMaterial(this, graph));\n\n      fp.add3DMesh(lines, this, true);\n\n      fp.render3D(100);\n   }\n\n   /** @summary Draw axis histogram\n     * @private */\n   async drawAxisHisto() {\n      return TH1Painter.draw(this.getDom(), this.createHistogram(), this.options.Axis);\n   }\n\n   static async draw(dom, graph, opt) {\n      return TGraphPainter._drawGraph(new TGraphPainter(dom, graph), opt);\n   }\n\n} // class TGraphPainter\n\nexport { TGraphPainter };\n"],"x_google_ignoreList":[0,1,2,3]}