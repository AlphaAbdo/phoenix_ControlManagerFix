{"version":3,"file":"781.c6950c256d5d2675.js","mappings":"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","names":["TF2Painter","TH2Painter","getObjectName","this","$func","fName","getClassName","_typename","clTF2","isTF1","getPrimaryObject","updateObject","obj","evalPar","histo","getHisto","webcanv_hist","h0","getPadPainter","findInPrimitives","clTH2F","updateAxes","getFramePainter","createTF2Histogram","scanContent","redraw","reason","_use_saved_points","super","func","hist","nsave","fSave","length","settings","PreferSavedPoints","force_saved","fp","pad","getRootPad","logx","fLogx","logy","fLogy","gr","getGrFuncs","second_x","second_y","xmin","fXmin","xmax","fXmax","ymin","fYmin","ymax","fYmax","zoom_xmin","zoom_xmax","Math","min","max","zoom_ymin","zoom_ymax","ensureBins","nx","ny","fNcells","fArray","Float32Array","fill","fXaxis","fNbins","fXbins","fYaxis","_fail_eval","npx","fNpx","npy","fNpy","iserror","proivdeEvalPar","produceTAxisLogScale","j","i","x","GetBinCenter","y","z","setBinContent","getBin","Number","isFinite","getSave","dx","dy","ibin","floor","jbin","t","u","round","setHistogramTitle","fTitle","fMinimum","fMaximum","fLineColor","fLineStyle","fLineWidth","fFillColor","fFillStyle","fMarkerColor","fMarkerStyle","fMarkerSize","fBits","kNoStats","extractAxesProperties","ndim","getTF2Tooltips","pnt","lines","getObjectHint","funcs","options","isFunc","push","revertAxis","axisAsText","floatToString","gStyle","fStatFormat","processTooltipEvent","ttrect","draw_g","selectChild","remove","res","name","title","color1","lineatt","color","color2","fillatt","getFillColorAlt","exact","menu","disabled","empty","append","attr","style","width","call","fillWebObjectOptions","opt","fcust","draw","dom","tf2","_asyncToGenerator","isStr","p","indexOf","slice","d","DrawOptions","o2","toUpperCase","getElementMainPainter","ObjectPainter","createHistogram","painter","THistPainter","_drawHist"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist/TF2Painter.mjs"],"sourcesContent":["import { createHistogram, setHistogramTitle, kNoStats, settings, gStyle, clTF2, clTH2F, isStr, isFunc } from '../core.mjs';\nimport { TH2Painter } from '../hist/TH2Painter.mjs';\nimport { proivdeEvalPar, produceTAxisLogScale } from '../hist/TF1Painter.mjs';\nimport { ObjectPainter, getElementMainPainter } from '../base/ObjectPainter.mjs';\nimport { DrawOptions, floatToString } from '../base/BasePainter.mjs';\nimport { THistPainter } from '../hist2d/THistPainter.mjs';\n\n\n/**\n  * @summary Painter for TF2 object\n  *\n  * @private\n  */\n\nclass TF2Painter extends TH2Painter {\n\n   /** @summary Returns drawn object name */\n   getObjectName() { return this.$func?.fName ?? 'func'; }\n\n   /** @summary Returns drawn object class name */\n   getClassName() { return this.$func?._typename ?? clTF2; }\n\n   /** @summary Returns true while function is drawn */\n   isTF1() { return true; }\n\n   /** @summary Returns primary function which was then drawn as histogram */\n   getPrimaryObject() { return this.$func; }\n\n   /** @summary Update histogram */\n   updateObject(obj /*, opt */) {\n      if (!obj || (this.getClassName() !== obj._typename)) return false;\n      delete obj.evalPar;\n      const histo = this.getHisto();\n\n      if (this.webcanv_hist) {\n         const h0 = this.getPadPainter()?.findInPrimitives('Func', clTH2F);\n         if (h0) this.updateAxes(histo, h0, this.getFramePainter());\n      }\n\n      this.$func = obj;\n      this.createTF2Histogram(obj, histo);\n      this.scanContent();\n      return true;\n   }\n\n   /** @summary Redraw TF2\n     * @private */\n   redraw(reason) {\n      if (!this._use_saved_points && (reason === 'logx' || reason === 'logy' || reason === 'zoom')) {\n         this.createTF2Histogram(this.$func, this.getHisto());\n         this.scanContent();\n      }\n\n      return super.redraw(reason);\n   }\n\n   /** @summary Create histogram for TF2 drawing\n     * @private */\n   createTF2Histogram(func, hist) {\n      let nsave = func.fSave.length - 6;\n      if ((nsave > 0) && (nsave !== (func.fSave[nsave+4]+1) * (func.fSave[nsave+5]+1)))\n         nsave = 0;\n\n      this._use_saved_points = (nsave > 0) && (settings.PreferSavedPoints || this.force_saved);\n\n      const fp = this.getFramePainter(),\n            pad = this.getPadPainter()?.getRootPad(true),\n            logx = pad?.fLogx, logy = pad?.fLogy,\n            gr = fp?.getGrFuncs(this.second_x, this.second_y);\n      let xmin = func.fXmin, xmax = func.fXmax,\n          ymin = func.fYmin, ymax = func.fYmax;\n\n     if (gr?.zoom_xmin !== gr?.zoom_xmax) {\n         xmin = Math.min(xmin, gr.zoom_xmin);\n         xmax = Math.max(xmax, gr.zoom_xmax);\n      }\n\n     if (gr?.zoom_ymin !== gr?.zoom_ymax) {\n         ymin = Math.min(ymin, gr.zoom_ymin);\n         ymax = Math.max(ymax, gr.zoom_ymax);\n      }\n\n      const ensureBins = (nx, ny) => {\n         if (hist.fNcells !== (nx + 2) * (ny + 2)) {\n            hist.fNcells = (nx + 2) * (ny + 2);\n            hist.fArray = new Float32Array(hist.fNcells);\n         }\n         hist.fArray.fill(0);\n         hist.fXaxis.fNbins = nx;\n         hist.fXaxis.fXbins = [];\n         hist.fYaxis.fNbins = ny;\n         hist.fYaxis.fXbins = [];\n      };\n\n      delete this._fail_eval;\n\n      if (!this._use_saved_points) {\n         const npx = Math.max(func.fNpx, 20),\n               npy = Math.max(func.fNpy, 20);\n         let iserror = false;\n\n         if (!func.evalPar && !proivdeEvalPar(func))\n            iserror = true;\n\n         ensureBins(npx, npy);\n         hist.fXaxis.fXmin = xmin;\n         hist.fXaxis.fXmax = xmax;\n         hist.fYaxis.fXmin = ymin;\n         hist.fYaxis.fXmax = ymax;\n\n         if (logx)\n            produceTAxisLogScale(hist.fXaxis, npx, xmin, xmax);\n         if (logy)\n            produceTAxisLogScale(hist.fYaxis, npy, ymin, ymax);\n\n         for (let j = 0; (j < npy) && !iserror; ++j) {\n            for (let i = 0; (i < npx) && !iserror; ++i) {\n               const x = hist.fXaxis.GetBinCenter(i+1),\n                     y = hist.fYaxis.GetBinCenter(j+1);\n               let z = 0;\n\n               try {\n                  z = func.evalPar(x, y);\n               } catch {\n                  iserror = true;\n               }\n\n               if (!iserror)\n                  hist.setBinContent(hist.getBin(i + 1, j + 1), Number.isFinite(z) ? z : 0);\n            }\n         }\n\n         if (iserror)\n            this._fail_eval = true;\n\n         if (iserror && (nsave > 6))\n            this._use_saved_points = true;\n      }\n\n      if (this._use_saved_points) {\n         const xmin = func.fSave[nsave], xmax = func.fSave[nsave+1],\n               ymin = func.fSave[nsave+2], ymax = func.fSave[nsave+3],\n               npx = Math.round(func.fSave[nsave+4]),\n               npy = Math.round(func.fSave[nsave+5]),\n               dx = (xmax - xmin) / npx,\n               dy = (ymax - ymin) / npy;\n          function getSave(x, y) {\n            if (x < xmin || x > xmax) return 0;\n            if (dx <= 0) return 0;\n            if (y < ymin || y > ymax) return 0;\n            if (dy <= 0) return 0;\n            const ibin = Math.min(npx-1, Math.floor((x-xmin)/dx)),\n                  jbin = Math.min(npy-1, Math.floor((y-ymin)/dy)),\n                  xlow = xmin + ibin*dx,\n                  ylow = ymin + jbin*dy,\n                  t = (x-xlow)/dx,\n                  u = (y-ylow)/dy,\n                  k1 = jbin*(npx+1) + ibin,\n                  k2 = jbin*(npx+1) + ibin +1,\n                  k3 = (jbin+1)*(npx+1) + ibin +1,\n                  k4 = (jbin+1)*(npx+1) + ibin;\n            return (1-t)*(1-u)*func.fSave[k1] +t*(1-u)*func.fSave[k2] +t*u*func.fSave[k3] + (1-t)*u*func.fSave[k4];\n         }\n\n         ensureBins(func.fNpx, func.fNpy);\n         hist.fXaxis.fXmin = func.fXmin;\n         hist.fXaxis.fXmax = func.fXmax;\n         hist.fYaxis.fXmin = func.fYmin;\n         hist.fYaxis.fXmax = func.fYmax;\n\n         for (let j = 0; j < func.fNpy; ++j) {\n            const y = hist.fYaxis.GetBinCenter(j + 1);\n            for (let i = 0; i < func.fNpx; ++i) {\n               const x = hist.fXaxis.GetBinCenter(i + 1),\n                     z = getSave(x, y);\n               hist.setBinContent(hist.getBin(i+1, j+1), Number.isFinite(z) ? z : 0);\n            }\n         }\n      }\n\n      hist.fName = 'Func';\n      setHistogramTitle(hist, func.fTitle);\n      hist.fMinimum = func.fMinimum;\n      hist.fMaximum = func.fMaximum;\n      // fHistogram->SetContour(fContour.fN, levels);\n      hist.fLineColor = func.fLineColor;\n      hist.fLineStyle = func.fLineStyle;\n      hist.fLineWidth = func.fLineWidth;\n      hist.fFillColor = func.fFillColor;\n      hist.fFillStyle = func.fFillStyle;\n      hist.fMarkerColor = func.fMarkerColor;\n      hist.fMarkerStyle = func.fMarkerStyle;\n      hist.fMarkerSize = func.fMarkerSize;\n      hist.fBits |= kNoStats;\n\n      return hist;\n   }\n\n   /** @summary Extract function ranges */\n   extractAxesProperties(ndim) {\n      super.extractAxesProperties(ndim);\n\n      const func = this.$func, nsave = func?.fSave.length ?? 0;\n\n      if (nsave > 6 && this._use_saved_points) {\n         this.xmin = Math.min(this.xmin, func.fSave[nsave-6]);\n         this.xmax = Math.max(this.xmax, func.fSave[nsave-5]);\n         this.ymin = Math.min(this.ymin, func.fSave[nsave-4]);\n         this.ymax = Math.max(this.ymax, func.fSave[nsave-3]);\n      }\n      if (func) {\n         this.xmin = Math.min(this.xmin, func.fXmin);\n         this.xmax = Math.max(this.xmax, func.fXmax);\n         this.ymin = Math.min(this.ymin, func.fYmin);\n         this.ymax = Math.max(this.ymax, func.fYmax);\n      }\n   }\n\n   /** @summary retrurn tooltips for TF2 */\n   getTF2Tooltips(pnt) {\n      const lines = [this.getObjectHint()],\n            funcs = this.getFramePainter()?.getGrFuncs(this.options.second_x, this.options.second_y);\n\n      if (!funcs || !isFunc(this.$func?.evalPar)) {\n         lines.push('grx = ' + pnt.x, 'gry = ' + pnt.y);\n         return lines;\n      }\n\n      const x = funcs.revertAxis('x', pnt.x),\n            y = funcs.revertAxis('y', pnt.y);\n      let z = 0, iserror = false;\n\n       try {\n          z = this.$func.evalPar(x, y);\n       } catch {\n          iserror = true;\n       }\n\n      lines.push('x = ' + funcs.axisAsText('x', x),\n                 'y = ' + funcs.axisAsText('y', y),\n                 'value = ' + (iserror ? '<fail>' : floatToString(z, gStyle.fStatFormat)));\n      return lines;\n   }\n\n   /** @summary process tooltip event for TF2 object */\n   processTooltipEvent(pnt) {\n      if (this._use_saved_points)\n         return super.processTooltipEvent(pnt);\n\n      let ttrect = this.draw_g?.selectChild('.tooltip_bin');\n\n      if (!this.draw_g || !pnt) {\n         ttrect?.remove();\n         return null;\n      }\n\n      const res = { name: this.$func?.fName, title: this.$func?.fTitle,\n                  x: pnt.x, y: pnt.y,\n                  color1: this.lineatt?.color ?? 'green',\n                  color2: this.fillatt?.getFillColorAlt('blue') ?? 'blue',\n                  lines: this.getTF2Tooltips(pnt), exact: true, menu: true };\n\n      if (pnt.disabled)\n         ttrect.remove();\n      else {\n         if (ttrect.empty()) {\n            ttrect = this.draw_g.append('svg:circle')\n                                .attr('class', 'tooltip_bin')\n                                .style('pointer-events', 'none')\n                                .style('fill', 'none')\n                                .attr('r', (this.lineatt?.width ?? 1) + 4);\n         }\n\n         ttrect.attr('cx', pnt.x)\n               .attr('cy', pnt.y)\n               .call(this.lineatt?.func);\n      }\n\n      return res;\n   }\n\n   /** @summary fill information for TWebCanvas\n     * @private */\n   fillWebObjectOptions(opt) {\n      // mark that saved points are used or evaluation failed\n      opt.fcust = this._fail_eval ? 'func_fail' : '';\n   }\n\n   /** @summary draw TF2 object */\n   static async draw(dom, tf2, opt) {\n      if (!isStr(opt)) opt = '';\n      let p = opt.indexOf(';webcanv_hist'), webcanv_hist = false, force_saved = false;\n      if (p >= 0) {\n         webcanv_hist = true;\n         opt = opt.slice(0, p);\n      }\n      p = opt.indexOf(';force_saved');\n      if (p >= 0) {\n         force_saved = true;\n         opt = opt.slice(0, p);\n      }\n\n      const d = new DrawOptions(opt);\n      if (d.empty())\n         opt = 'cont3';\n      else if (d.opt === 'SAME')\n         opt = 'cont2 same';\n\n      // workaround for old waves.C\n      const o2 = isStr(opt) ? opt.toUpperCase() : '';\n      if (o2 === 'SAMECOLORZ' || o2 === 'SAMECOLOR' || o2 === 'SAMECOLZ')\n         opt = 'samecol';\n\n      if ((opt.indexOf('same') === 0) || (opt.indexOf('SAME') === 0)) {\n         if (!getElementMainPainter(dom))\n            opt = 'A_ADJUST_FRAME_' + opt.slice(4);\n      }\n\n      let hist;\n\n      if (webcanv_hist) {\n         const dummy = new ObjectPainter(dom);\n         hist = dummy.getPadPainter()?.findInPrimitives('Func', clTH2F);\n      }\n\n      if (!hist) {\n         hist = createHistogram(clTH2F, 20, 20);\n         hist.fBits |= kNoStats;\n      }\n\n      const painter = new TF2Painter(dom, hist);\n\n      painter.$func = tf2;\n      painter.webcanv_hist = webcanv_hist;\n      painter.force_saved = force_saved;\n      painter.createTF2Histogram(tf2, hist);\n      return THistPainter._drawHist(painter, opt);\n   }\n\n} // class TF2Painter\n\nexport { TF2Painter };\n"],"x_google_ignoreList":[0]}