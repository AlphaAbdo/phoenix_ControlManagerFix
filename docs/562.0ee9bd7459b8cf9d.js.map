{"version":3,"file":"562.0ee9bd7459b8cf9d.js","mappings":"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","names":["TRatioPlotPainter","ObjectPainter","setGridsRange","xmin","xmax","ratio","this","getObject","x_handle","getPadPainter","_this$getPadPainter","findPainterFor","fLowerPad","_this$getPadPainter$f","getFramePainter","_this$getPadPainter$f2","full_min","full_max","fGridlines","forEach","line","fX1","fX2","redraw","pp","top_p","fTopPad","disablePadDrawing","up_p","fUpperPad","up_main","getMainPainter","up_fp","low_p","low_main","low_fp","lbl_size","promise_up","Promise","resolve","_ratio_configured","options","Axis","getHisto","fYaxis","fLabelSize","Math","round","min","getPadWidth","getPadHeight","h","fXaxis","fTitle","fTitleSize","getRootPad","fTicky","redrawPad","then","o_zoom","zoom","_ratio_low_fp","_ratio_painter","ymin","ymax","zmin","zmax","o_sizeChanged","sizeChanged","fX1NDC","fX2NDC","forEachPainterInPad","objp","testEditable","currpad","arr","fGridlinePositions","length","gridy","found","fY1","fY2","abs","create","scale_xmin","scale_xmax","fLineStyle","push","undefined","selectCurrentPad","fName","drawTLine","getDom","all","_ratio_up_fp","static","dom","opt","painter","ensureTCanvas"],"sourceRoot":"webpack:///","sources":["../../node_modules/jsroot/modules/draw/TRatioPlotPainter.mjs"],"sourcesContent":["import { create } from '../core.mjs';\nimport { ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { ensureTCanvas } from '../gpad/TCanvasPainter.mjs';\nimport { drawTLine } from './more.mjs';\n\n\n/**\n * @summary Painter class for TRatioPlot\n *\n * @private\n */\n\nclass TRatioPlotPainter extends ObjectPainter {\n\n   /** @summary Set grids range */\n   setGridsRange(xmin, xmax) {\n      let ratio = this.getObject();\n      if (xmin === xmax) {\n         let x_handle = this.getPadPainter()?.findPainterFor(ratio.fLowerPad, \"lower_pad\", \"TPad\")?.getFramePainter()?.x_handle;\n         if (!x_handle) return;\n         xmin = x_handle.full_min;\n         xmax = x_handle.full_max;\n      }\n\n      ratio.fGridlines.forEach(line => {\n         line.fX1 = xmin;\n         line.fX2 = xmax;\n      });\n   }\n\n   /** @summary Redraw TRatioPlot */\n   redraw() {\n      let ratio = this.getObject(),\n          pp = this.getPadPainter();\n\n      let top_p = pp.findPainterFor(ratio.fTopPad, \"top_pad\", \"TPad\");\n      if (top_p) top_p.disablePadDrawing();\n\n      let up_p = pp.findPainterFor(ratio.fUpperPad, \"upper_pad\", \"TPad\"),\n          up_main = up_p?.getMainPainter(),\n          up_fp = up_p?.getFramePainter(),\n          low_p = pp.findPainterFor(ratio.fLowerPad, \"lower_pad\", \"TPad\"),\n          low_main = low_p?.getMainPainter(),\n          low_fp = low_p?.getFramePainter(),\n          lbl_size = 20, promise_up = Promise.resolve(true);\n\n      if (up_p && up_main && up_fp && low_fp && !up_p._ratio_configured) {\n         up_p._ratio_configured = true;\n         up_main.options.Axis = 0; // draw both axes\n\n         lbl_size = up_main.getHisto().fYaxis.fLabelSize;\n         if (lbl_size < 1) lbl_size = Math.round(lbl_size*Math.min(up_p.getPadWidth(), up_p.getPadHeight()));\n\n         let h = up_main.getHisto();\n         h.fXaxis.fLabelSize = 0; // do not draw X axis labels\n         h.fXaxis.fTitle = \"\"; // do not draw X axis title\n         h.fYaxis.fLabelSize = lbl_size;\n         h.fYaxis.fTitleSize = lbl_size;\n\n         up_p.getRootPad().fTicky = 1;\n\n         promise_up = up_p.redrawPad().then(() => {\n            up_fp.o_zoom = up_fp.zoom;\n            up_fp._ratio_low_fp = low_fp;\n            up_fp._ratio_painter = this;\n\n            up_fp.zoom = function(xmin,xmax,ymin,ymax,zmin,zmax) {\n               this._ratio_painter.setGridsRange(xmin, xmax);\n               this._ratio_low_fp.o_zoom(xmin,xmax);\n               return this.o_zoom(xmin,xmax,ymin,ymax,zmin,zmax);\n            }\n\n            up_fp.o_sizeChanged = up_fp.sizeChanged;\n            up_fp.sizeChanged = function() {\n               this.o_sizeChanged();\n               this._ratio_low_fp.fX1NDC = this.fX1NDC;\n               this._ratio_low_fp.fX2NDC = this.fX2NDC;\n               this._ratio_low_fp.o_sizeChanged();\n            }\n            return true;\n         });\n      }\n\n      return promise_up.then(() => {\n\n         if (!low_p || !low_main || !low_fp || !up_fp || low_p._ratio_configured)\n            return this;\n\n         low_p._ratio_configured = true;\n         low_main.options.Axis = 0; // draw both axes\n         let h = low_main.getHisto();\n         h.fXaxis.fTitle = \"x\";\n         h.fXaxis.fLabelSize = lbl_size;\n         h.fXaxis.fTitleSize = lbl_size;\n         h.fYaxis.fLabelSize = lbl_size;\n         h.fYaxis.fTitleSize = lbl_size;\n         low_p.getRootPad().fTicky = 1;\n\n         low_p.forEachPainterInPad(objp => {\n            if (typeof objp?.testEditable == 'function')\n               objp.testEditable(false);\n         });\n\n         let arr = [], currpad;\n\n         if ((ratio.fGridlinePositions.length > 0) && (ratio.fGridlines.length < ratio.fGridlinePositions.length)) {\n            ratio.fGridlinePositions.forEach(gridy => {\n               let found = false;\n               ratio.fGridlines.forEach(line => {\n                  if ((line.fY1 == line.fY2) && (Math.abs(line.fY1 - gridy) < 1e-6)) found = true;\n               });\n               if (!found) {\n                  let line = create(\"TLine\");\n                  line.fX1 = up_fp.scale_xmin;\n                  line.fX2 = up_fp.scale_xmax;\n                  line.fY1 = line.fY2 = gridy;\n                  line.fLineStyle = 2;\n                  ratio.fGridlines.push(line);\n                  if (currpad === undefined)\n                     currpad = this.selectCurrentPad(ratio.fLowerPad.fName);\n                  arr.push(drawTLine(this.getDom(), line));\n               }\n            });\n         }\n\n         return Promise.all(arr).then(() => low_fp.zoom(up_fp.scale_xmin,  up_fp.scale_xmax)).then(() => {\n\n            low_fp.o_zoom = low_fp.zoom;\n            low_fp._ratio_up_fp = up_fp;\n            low_fp._ratio_painter = this;\n\n            low_fp.zoom = function(xmin,xmax,ymin,ymax,zmin,zmax) {\n               this._ratio_painter.setGridsRange(xmin, xmax);\n               this._ratio_up_fp.o_zoom(xmin,xmax);\n               return this.o_zoom(xmin,xmax,ymin,ymax,zmin,zmax);\n            }\n\n            low_fp.o_sizeChanged = low_fp.sizeChanged;\n            low_fp.sizeChanged = function() {\n               this.o_sizeChanged();\n               this._ratio_up_fp.fX1NDC = this.fX1NDC;\n               this._ratio_up_fp.fX2NDC = this.fX2NDC;\n               this._ratio_up_fp.o_sizeChanged();\n            }\n            return this;\n         });\n      });\n   }\n\n   /** @summary Draw TRatioPlot */\n   static draw(dom, ratio, opt) {\n      let painter = new TRatioPlotPainter(dom, ratio, opt);\n\n      return ensureTCanvas(painter, false).then(() => painter.redraw());\n   }\n\n} // class TRatioPlotPainter\n\nexport { TRatioPlotPainter }\n"],"x_google_ignoreList":[0]}