{"version":3,"file":"746.d09d42f07d02fbb8.js","mappings":"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","names":["RH3Painter","RHistPainter","getDimension","scanContent","when_axis_changed","this","nbinsx","nbinsy","nbinsz","histo","getHisto","extractAxesProperties","isDisplayItem","gminbin","fContMin","gminposbin","fContMinPos","gmaxbin","fContMax","getBinContent","i","j","k","bin_content","draw_content","countStat","xaxis","getAxis","yaxis","zaxis","i1","getSelectIndex","i2","j1","j2","k1","k2","res","name","fName","entries","integral","meanx","meany","meanz","rmsx","rmsy","rmsz","xi","yi","zi","xx","xside","yy","yside","zz","zside","cont","stat_sum0","stat_sumx1","stat_sumy1","stat_sumz1","stat_sumx2","stat_sumy2","stat_sumz2","GetBinCoord","Math","abs","sqrt","fillStatistic","stat","dostat","data","print_name","print_entries","floor","print_mean","print_rms","print_integral","clearStat","addText","format","getBinTooltips","ix","iy","iz","lines","dx","dy","dz","stepx","stepy","stepz","push","getObjectHint","getAxisBinTip","binz","lbl","round","floatToString","gStyle","fStatFormat","draw3DScatter","handle","_this","_asyncToGenerator","main","getFramePainter","di","stepi","dj","stepj","dk","stepk","coef","content_lmt","max","numpixels","sumz","webgl","pnts","PointsCreator","size_x3d","bins","Int32Array","rnd","TRandom","nbin","num","n","binx","random","biny","getBin","addPoint","grx","gry","grz","createPoints","color","v7EvalColor","then","mesh","add3DMesh","painter","tip_color","tooltip","intersect","indx","index","nvertex","length","p","tip","get3DToolTip","x1","GetBinLowEdge","x2","y1","y2","z1","z2","opacity","draw3DBins","single_bin_geom","fillcolor","use_lambert","use_helper","use_colors","use_opacity","use_scale","tipscale","options","Sphere","THREE","SphereGeometry","applyMatrix4","Matrix4","makeRotationX","PI","computeVertexNormals","indicies","Box3D","Indexes","normals","Normals","vertices","Vertices","buffer_size","single_bin_verts","Float32Array","single_bin_norms","nn","vert","x","y","z","Box","Color","BufferGeometry","setAttribute","BufferAttribute","bins_matrixes","bins_colors","bins_ids","palette","getHistPalette","createContour","grx1","grx2","gry1","gry2","wei","pow","colindx","getContourIndex","getColor","grz1","grz2","bin_matrix","scale","Vector3","setPosition","getBinTooltip","binid","undefined","instanceId","wei2","value","material","MeshLambertMaterial","transparent","vertexColors","MeshBasicMaterial","bin_mesh","Mesh","all_bins_mesh","InstancedMesh","setMatrixAt","setColorAt","helper_segments","Segments","helper_positions","vvv","m","elements","helper_material","LineBasicMaterial","createLineSegments","updatePaletteDraw","draw3D","prepareDraw","only_indexes","extra","right_extra","Scatter","Promise","resolve","redraw","reason","resize3D","render3D","assignFrame3DMethods","create3DScene","Render3D","setAxesRanges","xmin","xmax","ymin","ymax","zmin","zmax","set3DOptions","drawXYZ","toplevel","RAxisPainter","zoom","settings","Zooming","ndim","draw","v7","drawingBins","addKeysHandler","fillToolbar","pp","getPadPainter","addPadButton","showPadButtons","canZoomInside","axis","min","obj","toUpperCase","FindBin","autoZoom","ileft","iright","jleft","jright","kleft","kright","isany","fillHistContextMenu","menu","opts","getSupportedDrawOptions","addDrawMenu","arg","indexOf","kInspect","showInspector","decodeOptions","interactiveRedraw","dom","mode3d","ensureRCanvas","setAsMainPainter","minimum","kNoZoom","maximum","FrontBox","BackBox","kind","v7EvalAttr","sub","o","drawHistDisplayItem","opt","fAxes","RH1Painter","RH2Painter"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist/RH3Painter.mjs"],"sourcesContent":["import { gStyle, settings, kNoZoom, kInspect } from '../core.mjs';\nimport { floatToString, TRandom } from '../base/BasePainter.mjs';\nimport { ensureRCanvas } from '../gpad/RCanvasPainter.mjs';\nimport { RAxisPainter } from '../gpad/RAxisPainter.mjs';\nimport { RHistPainter } from '../hist2d/RHistPainter.mjs';\nimport { THREE, createLineSegments, PointsCreator, Box3D } from '../base/base3d.mjs';\nimport { RH1Painter } from './RH1Painter.mjs';\nimport { RH2Painter } from './RH2Painter.mjs';\nimport { assignFrame3DMethods } from './hist3d.mjs';\n\n/**\n * @summary Painter for RH3 classes\n *\n * @private\n */\n\nclass RH3Painter extends RHistPainter {\n\n   /** @summary Returns histogram dimension */\n   getDimension() { return 3; }\n\n   scanContent(when_axis_changed) {\n      // no need to re-scan histogram while result does not depend from axis selection\n      if (when_axis_changed && this.nbinsx && this.nbinsy && this.nbinsz) return;\n\n      const histo = this.getHisto();\n      if (!histo) return;\n\n      this.extractAxesProperties(3);\n\n      // global min/max, used at the moment in 3D drawing\n\n      if (this.isDisplayItem()) {\n         // take min/max values from the display item\n         this.gminbin = histo.fContMin;\n         this.gminposbin = histo.fContMinPos > 0 ? histo.fContMinPos : null;\n         this.gmaxbin = histo.fContMax;\n      } else {\n         this.gminbin = this.gmaxbin = histo.getBinContent(1, 1, 1);\n\n         for (let i = 0; i < this.nbinsx; ++i) {\n            for (let j = 0; j < this.nbinsy; ++j) {\n               for (let k = 0; k < this.nbinsz; ++k) {\n                  const bin_content = histo.getBinContent(i+1, j+1, k+1);\n                  if (bin_content < this.gminbin) this.gminbin = bin_content; else\n                  if (bin_content > this.gmaxbin) this.gmaxbin = bin_content;\n               }\n            }\n         }\n      }\n\n      this.draw_content = (this.gmaxbin !== 0) || (this.gminbin !== 0);\n   }\n\n  /** @summary Count histogram statistic */\n   countStat() {\n      const histo = this.getHisto(),\n            xaxis = this.getAxis('x'),\n            yaxis = this.getAxis('y'),\n            zaxis = this.getAxis('z'),\n            i1 = this.getSelectIndex('x', 'left'),\n            i2 = this.getSelectIndex('x', 'right'),\n            j1 = this.getSelectIndex('y', 'left'),\n            j2 = this.getSelectIndex('y', 'right'),\n            k1 = this.getSelectIndex('z', 'left'),\n            k2 = this.getSelectIndex('z', 'right'),\n            res = { name: histo.fName, entries: 0, integral: 0, meanx: 0, meany: 0, meanz: 0, rmsx: 0, rmsy: 0, rmsz: 0 };\n      let stat_sum0 = 0, stat_sumx1 = 0, stat_sumy1 = 0,\n          stat_sumz1 = 0, stat_sumx2 = 0, stat_sumy2 = 0, stat_sumz2 = 0,\n          xi, yi, zi, xx, xside, yy, yside, zz, zside, cont;\n\n      for (xi = 1; xi <= this.nbinsx; ++xi) {\n         xx = xaxis.GetBinCoord(xi - 0.5);\n         xside = (xi <= i1+1) ? 0 : (xi > i2+1 ? 2 : 1);\n\n         for (yi = 1; yi <= this.nbinsy; ++yi) {\n            yy = yaxis.GetBinCoord(yi - 0.5);\n            yside = (yi <= j1+1) ? 0 : (yi > j2+1 ? 2 : 1);\n\n            for (zi = 1; zi <= this.nbinsz; ++zi) {\n               zz = zaxis.GetBinCoord(zi - 0.5);\n               zside = (zi <= k1+1) ? 0 : (zi > k2+1 ? 2 : 1);\n\n               cont = histo.getBinContent(xi, yi, zi);\n               res.entries += cont;\n\n               if ((xside === 1) && (yside === 1) && (zside === 1)) {\n                  stat_sum0 += cont;\n                  stat_sumx1 += xx * cont;\n                  stat_sumy1 += yy * cont;\n                  stat_sumz1 += zz * cont;\n                  stat_sumx2 += xx**2 * cont;\n                  stat_sumy2 += yy**2 * cont;\n                  stat_sumz2 += zz**2 * cont;\n               }\n            }\n         }\n      }\n\n      if (Math.abs(stat_sum0) > 1e-300) {\n         res.meanx = stat_sumx1 / stat_sum0;\n         res.meany = stat_sumy1 / stat_sum0;\n         res.meanz = stat_sumz1 / stat_sum0;\n         res.rmsx = Math.sqrt(Math.abs(stat_sumx2 / stat_sum0 - res.meanx**2));\n         res.rmsy = Math.sqrt(Math.abs(stat_sumy2 / stat_sum0 - res.meany**2));\n         res.rmsz = Math.sqrt(Math.abs(stat_sumz2 / stat_sum0 - res.meanz**2));\n      }\n\n      res.integral = stat_sum0;\n\n      return res;\n   }\n\n   /** @summary Fill statistic */\n   fillStatistic(stat, dostat /* , dofit */) {\n      const data = this.countStat(),\n          print_name = dostat % 10,\n          print_entries = Math.floor(dostat / 10) % 10,\n          print_mean = Math.floor(dostat / 100) % 10,\n          print_rms = Math.floor(dostat / 1000) % 10,\n          print_integral = Math.floor(dostat / 1000000) % 10;\n\n      stat.clearStat();\n\n      if (print_name > 0)\n         stat.addText(data.name);\n\n      if (print_entries > 0)\n         stat.addText('Entries = ' + stat.format(data.entries, 'entries'));\n\n      if (print_mean > 0) {\n         stat.addText('Mean x = ' + stat.format(data.meanx));\n         stat.addText('Mean y = ' + stat.format(data.meany));\n         stat.addText('Mean z = ' + stat.format(data.meanz));\n      }\n\n      if (print_rms > 0) {\n         stat.addText('Std Dev x = ' + stat.format(data.rmsx));\n         stat.addText('Std Dev y = ' + stat.format(data.rmsy));\n         stat.addText('Std Dev z = ' + stat.format(data.rmsz));\n      }\n\n      if (print_integral > 0)\n         stat.addText('Integral = ' + stat.format(data.integral, 'entries'));\n\n\n      return true;\n   }\n\n   /** @summary Provide text information (tooltips) for histogram bin */\n   getBinTooltips(ix, iy, iz) {\n      const lines = [], histo = this.getHisto();\n      let dx = 1, dy = 1, dz = 1;\n\n      if (this.isDisplayItem()) {\n         dx = histo.stepx || 1;\n         dy = histo.stepy || 1;\n         dz = histo.stepz || 1;\n      }\n\n      lines.push(this.getObjectHint(),\n                 `x = ${this.getAxisBinTip('x', ix, dx)}  xbin=${ix+1}`,\n                 `y = ${this.getAxisBinTip('y', iy, dy)}  ybin=${iy+1}`,\n                 `z = ${this.getAxisBinTip('z', iz, dz)}  zbin=${iz+1}`);\n\n      const binz = histo.getBinContent(ix+1, iy+1, iz+1),\n            lbl = 'entries = '+ ((dx > 1) || (dy > 1) || (dz > 1) ? '~' : '');\n      if (binz === Math.round(binz))\n         lines.push(lbl + binz);\n      else\n         lines.push(lbl + floatToString(binz, gStyle.fStatFormat));\n\n      return lines;\n   }\n\n   /** @summary Try to draw 3D histogram as scatter plot\n     * @desc If there are too many points, returns promise with false */\n   async draw3DScatter(handle) {\n      const histo = this.getHisto(),\n            main = this.getFramePainter(),\n            i1 = handle.i1, i2 = handle.i2, di = handle.stepi,\n            j1 = handle.j1, j2 = handle.j2, dj = handle.stepj,\n            k1 = handle.k1, k2 = handle.k2, dk = handle.stepk;\n\n      if ((i2 <= i1) || (j2 <= j1) || (k2 <= k1))\n         return true;\n\n      // scale down factor if too large values\n      const coef = (this.gmaxbin > 1000) ? 1000/this.gmaxbin : 1,\n            content_lmt = Math.max(0, this.gminbin);\n      let i, j, k, bin_content, numpixels = 0, sumz = 0;\n\n      for (i = i1; i < i2; i += di) {\n         for (j = j1; j < j2; j += dj) {\n            for (k = k1; k < k2; k += dk) {\n               bin_content = histo.getBinContent(i+1, j+1, k+1);\n               sumz += bin_content;\n               if (bin_content <= content_lmt) continue;\n               numpixels += Math.round(bin_content*coef);\n            }\n         }\n      }\n\n      // too many pixels - use box drawing\n      if (numpixels > (main.webgl ? 100000 : 30000))\n         return false;\n\n      const pnts = new PointsCreator(numpixels, main.webgl, main.size_x3d/200),\n            bins = new Int32Array(numpixels),\n            xaxis = this.getAxis('x'), yaxis = this.getAxis('y'), zaxis = this.getAxis('z'),\n            rnd = new TRandom(sumz);\n      let nbin = 0;\n\n      for (i = i1; i < i2; i += di) {\n         for (j = j1; j < j2; j += dj) {\n            for (k = k1; k < k2; k += dk) {\n               bin_content = histo.getBinContent(i+1, j+1, k+1);\n               if (bin_content <= content_lmt) continue;\n               const num = Math.round(bin_content*coef);\n\n               for (let n=0; n<num; ++n) {\n                  const binx = xaxis.GetBinCoord(i + rnd.random()),\n                      biny = yaxis.GetBinCoord(j + rnd.random()),\n                      binz = zaxis.GetBinCoord(k + rnd.random());\n\n                  // remember bin index for tooltip\n                  bins[nbin++] = histo.getBin(i+1, j+1, k+1);\n\n                  pnts.addPoint(main.grx(binx), main.gry(biny), main.grz(binz));\n               }\n            }\n         }\n      }\n\n      return pnts.createPoints({ color: this.v7EvalColor('fill_color', 'red') }).then(mesh => {\n         main.add3DMesh(mesh);\n\n         mesh.bins = bins;\n         mesh.painter = this;\n         mesh.tip_color = 0x00FF00;\n\n         mesh.tooltip = function(intersect) {\n            const indx = Math.floor(intersect.index / this.nvertex);\n            if ((indx < 0) || (indx >= this.bins.length)) return null;\n\n            const p = this.painter,\n                main = p.getFramePainter(),\n                tip = p.get3DToolTip(this.bins[indx]);\n\n            tip.x1 = main.grx(p.getAxis('x').GetBinLowEdge(tip.ix));\n            tip.x2 = main.grx(p.getAxis('x').GetBinLowEdge(tip.ix+di));\n            tip.y1 = main.gry(p.getAxis('y').GetBinLowEdge(tip.iy));\n            tip.y2 = main.gry(p.getAxis('y').GetBinLowEdge(tip.iy+dj));\n            tip.z1 = main.grz(p.getAxis('z').GetBinLowEdge(tip.iz));\n            tip.z2 = main.grz(p.getAxis('z').GetBinLowEdge(tip.iz+dk));\n            tip.color = this.tip_color;\n            tip.opacity = 0.3;\n\n            return tip;\n         };\n\n         return true;\n      });\n   }\n\n   /** @summary Drawing of 3D histogram */\n   draw3DBins(handle) {\n      const main = this.getFramePainter();\n      let fillcolor = this.v7EvalColor('fill_color', 'red'),\n          use_lambert = false,\n          use_helper = false, use_colors = false, use_opacity = 1, use_scale = true,\n          tipscale = 0.5, single_bin_geom;\n\n      if (this.options.Sphere) {\n         // drawing spheres\n         tipscale = 0.4;\n         use_lambert = true;\n         if (this.options.Sphere === 11) use_colors = true;\n\n         single_bin_geom = new THREE.SphereGeometry(0.5, main.webgl ? 16 : 8, main.webgl ? 12 : 6);\n         single_bin_geom.applyMatrix4(new THREE.Matrix4().makeRotationX(Math.PI/2));\n         single_bin_geom.computeVertexNormals();\n      } else {\n         const indicies = Box3D.Indexes,\n               normals = Box3D.Normals,\n               vertices = Box3D.Vertices,\n               buffer_size = indicies.length*3,\n               single_bin_verts = new Float32Array(buffer_size),\n               single_bin_norms = new Float32Array(buffer_size);\n\n         for (let k = 0, nn = -3; k < indicies.length; ++k) {\n            const vert = vertices[indicies[k]];\n            single_bin_verts[k*3] = vert.x-0.5;\n            single_bin_verts[k*3+1] = vert.y-0.5;\n            single_bin_verts[k*3+2] = vert.z-0.5;\n\n            if (k%6 === 0) nn+=3;\n            single_bin_norms[k*3] = normals[nn];\n            single_bin_norms[k*3+1] = normals[nn+1];\n            single_bin_norms[k*3+2] = normals[nn+2];\n         }\n         use_helper = true;\n\n         if (this.options.Box === 11)\n            use_colors = true;\n         else if (this.options.Box === 12) {\n            use_colors = true;\n            use_helper = false;\n         } else if (this.options.Color) {\n            use_colors = true;\n            use_opacity = 0.5;\n            use_scale = false;\n            use_helper = false;\n            use_lambert = true;\n         }\n\n         single_bin_geom = new THREE.BufferGeometry();\n         single_bin_geom.setAttribute('position', new THREE.BufferAttribute(single_bin_verts, 3));\n         single_bin_geom.setAttribute('normal', new THREE.BufferAttribute(single_bin_norms, 3));\n      }\n\n      if (use_scale)\n         use_scale = (this.gminbin || this.gmaxbin) ? 1 / Math.max(Math.abs(this.gminbin), Math.abs(this.gmaxbin)) : 1;\n\n      const histo = this.getHisto(),\n            i1 = handle.i1, i2 = handle.i2, di = handle.stepi,\n            j1 = handle.j1, j2 = handle.j2, dj = handle.stepj,\n            k1 = handle.k1, k2 = handle.k2, dk = handle.stepk,\n            bins_matrixes = [], bins_colors = [], bins_ids = [];\n      let palette = null;\n\n      if (use_colors) {\n         palette = main.getHistPalette();\n         this.createContour(main, palette);\n      }\n\n      if ((i2 <= i1) || (j2 <= j1) || (k2 <= k1))\n         return true;\n\n      const xaxis = this.getAxis('x'), yaxis = this.getAxis('y'), zaxis = this.getAxis('z');\n\n      for (let i = i1; i < i2; i += di) {\n         const grx1 = main.grx(xaxis.GetBinLowEdge(i+1)),\n               grx2 = main.grx(xaxis.GetBinLowEdge(i+2));\n         for (let j = j1; j < j2; j += dj) {\n            const gry1 = main.gry(yaxis.GetBinLowEdge(j+1)),\n                  gry2 = main.gry(yaxis.GetBinLowEdge(j+2));\n            for (let k = k1; k < k2; k +=dk) {\n               const bin_content = histo.getBinContent(i+1, j+1, k+1);\n               if (!this.options.Color && ((bin_content === 0) || (bin_content < this.gminbin))) continue;\n\n               const wei = use_scale ? Math.pow(Math.abs(bin_content * use_scale), 0.3333) : 1;\n               if (wei < 1e-3) continue; // do not show very small bins\n\n               if (use_colors) {\n                  const colindx = palette.getContourIndex(bin_content);\n                  if (colindx < 0) continue;\n                  bins_colors.push(palette.getColor(colindx));\n               }\n\n               const grz1 = main.grz(zaxis.GetBinLowEdge(k+1)),\n                     grz2 = main.grz(zaxis.GetBinLowEdge(k+2));\n\n               // remember bin index for tooltip\n               bins_ids.push(histo.getBin(i+1, j+1, k+1));\n\n               const bin_matrix = new THREE.Matrix4();\n               bin_matrix.scale(new THREE.Vector3((grx2 - grx1) * wei, (gry2 - gry1) * wei, (grz2 - grz1) * wei));\n               bin_matrix.setPosition((grx2 + grx1) / 2, (gry2 + gry1) / 2, (grz2 + grz1) / 2);\n               bins_matrixes.push(bin_matrix);\n            }\n         }\n      }\n\n      function getBinTooltip(intersect) {\n         let binid = 0;\n\n         if (this.binid !== undefined)\n            binid = this.binid;\n         else {\n            if ((intersect.instanceId === undefined) || (intersect.instanceId >= this.bins.length)) return;\n            binid = this.bins[intersect.instanceId];\n         }\n\n         const p = this.painter,\n               main = p.getFramePainter(),\n               tip = p.get3DToolTip(binid),\n               grx1 = main.grx(xaxis.GetBinCoord(tip.ix-1)),\n               grx2 = main.grx(xaxis.GetBinCoord(tip.ix)),\n               gry1 = main.gry(yaxis.GetBinCoord(tip.iy-1)),\n               gry2 = main.gry(yaxis.GetBinCoord(tip.iy)),\n               grz1 = main.grz(zaxis.GetBinCoord(tip.iz-1)),\n               grz2 = main.grz(zaxis.GetBinCoord(tip.iz)),\n               wei2 = (this.use_scale ? Math.pow(Math.abs(tip.value*this.use_scale), 0.3333) : 1) * this.tipscale;\n\n         tip.x1 = (grx2 + grx1) / 2 - (grx2 - grx1) * wei2;\n         tip.x2 = (grx2 + grx1) / 2 + (grx2 - grx1) * wei2;\n         tip.y1 = (gry2 + gry1) / 2 - (gry2 - gry1) * wei2;\n         tip.y2 = (gry2 + gry1) / 2 + (gry2 - gry1) * wei2;\n         tip.z1 = (grz2 + grz1) / 2 - (grz2 - grz1) * wei2;\n         tip.z2 = (grz2 + grz1) / 2 + (grz2 - grz1) * wei2;\n         tip.color = this.tip_color;\n\n         return tip;\n      }\n\n      if (use_colors && (use_opacity !== 1)) {\n         // create individual meshes for each bin\n         for (let n = 0; n < bins_matrixes.length; ++n) {\n            const opacity = use_opacity,\n                  color = new THREE.Color(bins_colors[n]),\n                  material = use_lambert ? new THREE.MeshLambertMaterial({ color, opacity, transparent: opacity < 1, vertexColors: false })\n                                         : new THREE.MeshBasicMaterial({ color, opacity, transparent: opacity < 1, vertexColors: false }),\n                  bin_mesh = new THREE.Mesh(single_bin_geom, material);\n\n            bin_mesh.applyMatrix4(bins_matrixes[n]);\n\n            bin_mesh.painter = this;\n            bin_mesh.binid = bins_ids[n];\n            bin_mesh.tipscale = tipscale;\n            bin_mesh.tip_color = 0x00FF00;\n            bin_mesh.use_scale = use_scale;\n            bin_mesh.tooltip = getBinTooltip;\n\n            main.add3DMesh(bin_mesh);\n         }\n      } else {\n         if (use_colors)\n            fillcolor = new THREE.Color(1, 1, 1);\n\n         const material = use_lambert ? new THREE.MeshLambertMaterial({ color: fillcolor, vertexColors: false })\n                                      : new THREE.MeshBasicMaterial({ color: fillcolor, vertexColors: false }),\n               all_bins_mesh = new THREE.InstancedMesh(single_bin_geom, material, bins_matrixes.length);\n\n         for (let n = 0; n < bins_matrixes.length; ++n) {\n            all_bins_mesh.setMatrixAt(n, bins_matrixes[n]);\n            if (use_colors)\n               all_bins_mesh.setColorAt(n, new THREE.Color(bins_colors[n]));\n         }\n\n         all_bins_mesh.painter = this;\n         all_bins_mesh.bins = bins_ids;\n         all_bins_mesh.tipscale = tipscale;\n         all_bins_mesh.tip_color = 0x00FF00;\n         all_bins_mesh.use_scale = use_scale;\n         all_bins_mesh.tooltip = getBinTooltip;\n\n         main.add3DMesh(all_bins_mesh);\n      }\n\n      if (use_helper) {\n         const helper_segments = Box3D.Segments,\n               helper_positions = new Float32Array(bins_matrixes.length * Box3D.Segments.length * 3);\n         let vvv = 0;\n         for (let i = 0; i < bins_matrixes.length; ++i) {\n            const m = bins_matrixes[i].elements;\n            for (let n = 0; n < helper_segments.length; ++n, vvv += 3) {\n               const vert = Box3D.Vertices[helper_segments[n]];\n               helper_positions[vvv] = m[12] + (vert.x - 0.5) * m[0];\n               helper_positions[vvv+1] = m[13] + (vert.y - 0.5) * m[5];\n               helper_positions[vvv+2] = m[14] + (vert.z - 0.5) * m[10];\n            }\n         }\n\n         const helper_material = new THREE.LineBasicMaterial({ color: this.v7EvalColor('line_color', 'lightblue') }),\n               lines = createLineSegments(helper_positions, helper_material);\n\n         main.add3DMesh(lines);\n      }\n\n      if (use_colors)\n         this.updatePaletteDraw();\n\n      return true;\n   }\n\n   draw3D() {\n      if (!this.draw_content)\n         return false;\n\n      // this.options.Scatter = false;\n      // this.options.Box = true;\n\n      const handle = this.prepareDraw({ only_indexes: true, extra: -0.5, right_extra: -1 }),\n            pr = this.options.Scatter ? this.draw3DScatter(handle) : Promise.resolve(false);\n\n      return pr.then(res => {\n         return res || this.draw3DBins(handle);\n      });\n   }\n\n   /** @summary Redraw histogram */\n   redraw(reason) {\n      const main = this.getFramePainter(); // who makes axis and 3D drawing\n\n      if (reason === 'resize') {\n         if (main.resize3D()) main.render3D();\n         return this;\n      }\n\n      assignFrame3DMethods(main);\n      return main.create3DScene(this.options.Render3D).then(() => {\n         main.setAxesRanges(this.getAxis('x'), this.xmin, this.xmax, this.getAxis('y'), this.ymin, this.ymax, this.getAxis('z'), this.zmin, this.zmax);\n         main.set3DOptions(this.options);\n         main.drawXYZ(main.toplevel, RAxisPainter, { zoom: settings.Zooming, ndim: 3, draw: true, v7: true });\n         return this.drawingBins(reason);\n      }).then(() => this.draw3D()).then(() => {\n         main.render3D();\n         main.addKeysHandler();\n         return this;\n      });\n   }\n\n   /** @summary Fill pad toolbar with RH3-related functions */\n   fillToolbar() {\n      const pp = this.getPadPainter();\n      if (!pp) return;\n\n      pp.addPadButton('auto_zoom', 'Unzoom all axes', 'ToggleZoom', 'Ctrl *');\n      if (this.draw_content)\n         pp.addPadButton('statbox', 'Toggle stat box', 'ToggleStatBox');\n      pp.showPadButtons();\n   }\n\n   /** @summary Checks if it makes sense to zoom inside specified axis range */\n   canZoomInside(axis, min, max) {\n      let obj = this.getHisto();\n      if (obj) obj = obj['f'+axis.toUpperCase()+'axis'];\n      return !obj || (obj.FindBin(max, 0.5) - obj.FindBin(min, 0) > 1);\n   }\n\n   /** @summary Perform automatic zoom inside non-zero region of histogram */\n   autoZoom() {\n      const i1 = this.getSelectIndex('x', 'left'),\n            i2 = this.getSelectIndex('x', 'right'),\n            j1 = this.getSelectIndex('y', 'left'),\n            j2 = this.getSelectIndex('y', 'right'),\n            k1 = this.getSelectIndex('z', 'left'),\n            k2 = this.getSelectIndex('z', 'right'),\n            histo = this.getHisto();\n      let i, j, k;\n\n      if ((i1 === i2) || (j1 === j2) || (k1 === k2)) return;\n\n      // first find minimum\n      let min = histo.getBinContent(i1 + 1, j1 + 1, k1+1);\n      for (i = i1; i < i2; ++i) {\n         for (j = j1; j < j2; ++j) {\n            for (k = k1; k < k2; ++k)\n               min = Math.min(min, histo.getBinContent(i+1, j+1, k+1));\n         }\n      }\n\n      if (min > 0) return; // if all points positive, no chance for auto-scale\n\n      let ileft = i2, iright = i1, jleft = j2, jright = j1, kleft = k2, kright = k1;\n\n      for (i = i1; i < i2; ++i) {\n         for (j = j1; j < j2; ++j) {\n            for (k = k1; k < k2; ++k) {\n               if (histo.getBinContent(i+1, j+1, k+1) > min) {\n                  if (i < ileft) ileft = i;\n                  if (i >= iright) iright = i + 1;\n                  if (j < jleft) jleft = j;\n                  if (j >= jright) jright = j + 1;\n                  if (k < kleft) kleft = k;\n                  if (k >= kright) kright = k + 1;\n               }\n            }\n         }\n      }\n\n      let xmin, xmax, ymin, ymax, zmin, zmax, isany = false;\n\n      if ((ileft === iright-1) && (ileft > i1+1) && (iright < i2-1)) { ileft--; iright++; }\n      if ((jleft === jright-1) && (jleft > j1+1) && (jright < j2-1)) { jleft--; jright++; }\n      if ((kleft === kright-1) && (kleft > k1+1) && (kright < k2-1)) { kleft--; kright++; }\n\n      if ((ileft > i1 || iright < i2) && (ileft < iright - 1)) {\n         xmin = this.getAxis('x').GetBinLowEdge(ileft+1);\n         xmax = this.getAxis('x').GetBinLowEdge(iright+1);\n         isany = true;\n      }\n\n      if ((jleft > j1 || jright < j2) && (jleft < jright - 1)) {\n         ymin = this.getAxis('y').GetBinLowEdge(jleft+1);\n         ymax = this.getAxis('y').GetBinLowEdge(jright+1);\n         isany = true;\n      }\n\n      if ((kleft > k1 || kright < k2) && (kleft < kright - 1)) {\n         zmin = this.getAxis('z').GetBinLowEdge(kleft+1);\n         zmax = this.getAxis('z').GetBinLowEdge(kright+1);\n         isany = true;\n      }\n\n      if (isany)\n         return this.getFramePainter().zoom(xmin, xmax, ymin, ymax, zmin, zmax);\n   }\n\n   /** @summary Fill histogram context menu */\n   fillHistContextMenu(menu) {\n      const opts = this.getSupportedDrawOptions();\n\n      menu.addDrawMenu('Draw with', opts, arg => {\n         if (arg.indexOf(kInspect) === 0)\n            return this.showInspector(arg);\n\n         this.decodeOptions(arg);\n\n         this.interactiveRedraw(true, 'drawopt');\n      });\n   }\n\n   /** @summary draw RH3 object */\n  static async draw(dom, histo /* ,opt */) {\n      const painter = new RH3Painter(dom, histo);\n      painter.mode3d = true;\n\n      return ensureRCanvas(painter, '3d').then(() => {\n         painter.setAsMainPainter();\n\n         painter.options = { Box: 0, Scatter: false, Sphere: 0, Color: false, minimum: kNoZoom, maximum: kNoZoom, FrontBox: false, BackBox: false };\n\n         const kind = painter.v7EvalAttr('kind', ''),\n               sub = painter.v7EvalAttr('sub', 0),\n               o = painter.options;\n\n         switch (kind) {\n            case 'box': o.Box = 10 + sub; break;\n            case 'sphere': o.Sphere = 10 + sub; break;\n            case 'col': o.Color = true; break;\n            case 'scat': o.Scatter = true; break;\n            default: o.Box = 10;\n         }\n\n         painter.scanContent();\n         return painter.redraw();\n      });\n   }\n\n} // class RH3Painter\n\n/** @summary draw RHistDisplayItem  object\n  * @private */\nfunction drawHistDisplayItem(dom, obj, opt) {\n   if (!obj)\n      return null;\n\n   if (obj.fAxes.length === 1)\n      return RH1Painter.draw(dom, obj, opt);\n\n   if (obj.fAxes.length === 2)\n      return RH2Painter.draw(dom, obj, opt);\n\n   if (obj.fAxes.length === 3)\n      return RH3Painter.draw(dom, obj, opt);\n\n   return null;\n}\n\nexport { RH3Painter, drawHistDisplayItem };\n"],"x_google_ignoreList":[0]}