{"version":3,"file":"879.c0c53ce6bce14d0b.js","mappings":"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","names":["kNotEditable","BIT","TGraphPainter","ObjectPainter","constructor","dom","graph","super","this","axes_draw","bins","xmin","ymin","xmax","ymax","wheel_zoomy","is_bent","_typename","has_errors","match","redraw","promise","Promise","resolve","$redraw_hist","hist_painter","getMainPainter","$secondary","then","drawGraph","cleanup","interactive_bin","get_gme","getObject","decodeOptions","opt","first_time","indexOf","slice","is_gme","blocks_gme","has_main","options","decodeBlock","d","res","Object","assign","Line","Curve","Rect","Mark","Bar","OutRange","EF","Fill","MainError","Ends","ScaleErrX","check","partAsFloat","Errors","Axis","NoOpt","PadStats","original","second_x","second_y","individual_styles","split","shift","DrawOptions","hopt","forEach","name","part","empty","pos3d","partAsInt","_pfc","_plc","_pmc","blocks","skip_errors_x0","skip_errors_y0","undefined","length","fMarkerStyle","len","fEX","m","k","Math","max","fEY","pad","getPadPainter","getRootPad","fPrimitives","arr","bl","subres","push","extractGmeErrors","nblock","gr","bin","eylow","fEyL","indx","eyhigh","fEyH","createBins","kind","npoints","fNpoints","Array","p","x","fX","y","fY","exlow","exhigh","fExL","fExH","fEXlow","fEXhigh","fEYlow","fEYhigh","min","createHistogram","histo","set_x","set_y","dx","dy","uxmin","uxmax","minimum","maximum","fMinimum","fMaximum","fHistogram","fName","kNoStats","fBits","_own_histogram","fTitle","fXaxis","fXmin","fXmax","fYaxis","unzoomUserRange","dox","doy","extractAxesProperties","canOptimize","settings","optimizeBins","maxpnt","filter_func","selbins","n","step","floor","optbins","getTooltips","lines","funcs","getFramePainter","getGrFuncs","gme","getObjectHint","axisAsText","x_handle","ny","fNYErrors","y_handle","get_main","pmain","grx","gry","pp","rect","getPadRect","width","height","pad_layer","pw","ph","getFrameWidth","getFrameHeight","value","fLogx","log10","fUxmin","fX1","fX2","fLogy","fUymin","fY1","fY2","appendExclusion","is_curve","path","drawbins","excl_width","extrabins","dlen","sqrt","dgrx","dgry","path2","buildSvgPath","draw_g","append","attr","call","fillatt","func","style","drawBins","w","h","lineatt","main_block","excl_side","path1","bins2","draw_kind","close_symbol","elem","curvebins","nodes","pnt","i","grx1","round","gry1","grx0","grx2","gry0","gry2","grdx0","fEXlowd","grdx2","fEXhighd","grdy0","fEYlowd","grdy2","fEYhighd","selectAll","data","enter","yy0","usefill","fp","fpcol","getFillColor","TAttFillHandler","color","pattern","bar","dw","abs","filter","error_size","lw","gStyle","bb","vv","hh","vleft","vright","htop","hbottom","mainLine","fMarkerSize","visible","isBatchMode","error","createAttMarker","marker_size","markeratt","getFullSize","resetPos","want_tooltip","fill","hints_marker","hsz","maxnummarker","getMarkerLength","create","appendQQ","xqmin","scale_xmin","fXq1","xqmax","scale_xmax","fXq2","yqmin","scale_ymin","fYq1","yqmax","scale_ymax","fYq2","makeLine","x1","y1","x2","y2","yxmin","yxmax","latt1","TAttLineHandler","latt2","drawBins3D","console","log","createG","mp","createAutoColor","icolor","fFillColor","fLineColor","fMarkerColor","createAttLine","can_excl","createAttFill","used","fAttLine","std","fAttFill","svg","getCanvSvg","sub_g","addMoveHandler","testEditable","extractTooltip","extractTooltipForPath","esz","isbar1","findbin","best_dist2","best","msize","each","d3_select","datum","dist2","nproc","marker","matchy","exact","title","color1","d3bin","user_info","obj","cont","color2","menu","menu_dist","binindx","showTooltip","hint","select","remove","usepath","showTooltipForPath","ttrect","changed","property","processTooltipEvent","disabled","findBestBin","dist","islines","bestindx","bestbin","bestdist","radius","IsInside","bin0","posy","linex","liney","linedist","closeline","arg","TestBit","InvertBit","ismark","getColor","ttbin","moveEnabled","moveStart","pos_dx","pos_dy","move_binindx","move_bin","move_x0","move_y0","moveDrag","revertAxis","moveEnd","not_changed","exec","matchObjectType","submitCanvExec","fillContextMenu","snapid","addchk","size","executeMenuCommand","method","args","canp","getCanvPainter","getLastEventPos","_readonly","userx","usery","toFixed","args_menu_id","updateObject","canZoomInside","axis","clickButton","funcname","main","zoom","findFunc","fFunctions","findStat","createStat","stats","normal_canvas","create_stats","st","fOptStat","fOptFit","fBorderSize","fX1NDC","fStatX","fStatW","fY1NDC","fStatY","fStatH","fX2NDC","fY2NDC","fStatColor","fFillStyle","fStatStyle","fTextAngle","fTextSize","fStatFontSize","fTextAlign","fTextColor","fStatTextColor","fTextFont","fStatFont","AddText","Add","fillStatistic","stat","dostat","dofit","clearPave","fillFunctionStat","drawNextFunction","$main_painter","drawObject","getDom","drawAxisHisto","TH1Painter","static","painter","$primary","addToPadPrimitives","_drawGraph"],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist2d/TGraphPainter.mjs"],"sourcesContent":["import { gStyle, BIT, settings, create, createHistogram, isBatchMode } from '../core.mjs';\nimport { select as d3_select } from '../d3.mjs';\nimport { DrawOptions, buildSvgPath } from '../base/BasePainter.mjs';\nimport { ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { TH1Painter } from './TH1Painter.mjs';\nimport { TAttLineHandler } from '../base/TAttLineHandler.mjs';\nimport { TAttFillHandler } from '../base/TAttFillHandler.mjs';\nimport { addMoveHandler } from '../gui/utils.mjs';\n\n\nconst kNotEditable = BIT(18);   // bit set if graph is non editable\n\n/**\n * @summary Painter for TGraph object.\n *\n * @private\n */\n\nclass TGraphPainter extends ObjectPainter {\n\n   constructor(dom, graph) {\n      super(dom, graph);\n      this.axes_draw = false; // indicate if graph histogram was drawn for axes\n      this.bins = null;\n      this.xmin = this.ymin = this.xmax = this.ymax = 0;\n      this.wheel_zoomy = true;\n      this.is_bent = (graph._typename == 'TGraphBentErrors');\n      this.has_errors = (graph._typename == 'TGraphErrors') ||\n                        (graph._typename == 'TGraphMultiErrors') ||\n                        (graph._typename == 'TGraphAsymmErrors') ||\n                         this.is_bent || graph._typename.match(/^RooHist/);\n   }\n\n   /** @summary Redraw graph\n     * @desc may redraw histogram which was used to draw axes\n     * @returns {Promise} for ready */\n   redraw() {\n      let promise = Promise.resolve(true);\n\n      if (this.$redraw_hist) {\n         delete this.$redraw_hist;\n         let hist_painter = this.getMainPainter();\n         if (hist_painter?.$secondary && this.axes_draw)\n            promise = hist_painter.redraw();\n      }\n\n      return promise.then(() => this.drawGraph());\n   }\n\n   /** @summary Cleanup graph painter */\n   cleanup() {\n      delete this.interactive_bin; // break mouse handling\n      delete this.bins;\n      super.cleanup();\n   }\n\n   /** @summary Returns object if this drawing TGraphMultiErrors object */\n   get_gme() {\n      let graph = this.getObject();\n      return graph?._typename == \"TGraphMultiErrors\" ? graph : null;\n   }\n\n   /** @summary Decode options */\n   decodeOptions(opt, first_time) {\n\n      if ((typeof opt == \"string\") && (opt.indexOf(\"same \") == 0))\n         opt = opt.slice(5);\n\n      let graph = this.getObject(),\n          is_gme = !!this.get_gme(),\n          blocks_gme = [],\n          has_main = first_time ? !!this.getMainPainter() : !this.axes_draw;\n\n      if (!this.options) this.options = {};\n\n      // decode main draw options for the graph\n      const decodeBlock = (d, res) => {\n         Object.assign(res, { Line: 0, Curve: 0, Rect: 0, Mark: 0, Bar: 0, OutRange: 0, EF:0, Fill: 0, MainError: 1, Ends: 1, ScaleErrX: 1 });\n\n         if (is_gme && d.check(\"S=\", true)) res.ScaleErrX = d.partAsFloat();\n\n         if (d.check('L')) res.Line = 1;\n         if (d.check('F')) res.Fill = 1;\n         if (d.check('CC')) res.Curve = 2; // draw all points without reduction\n         if (d.check('C')) res.Curve = 1;\n         if (d.check('*')) res.Mark = 103;\n         if (d.check('P0')) res.Mark = 104;\n         if (d.check('P')) res.Mark = 1;\n         if (d.check('B')) { res.Bar = 1; res.Errors = 0; }\n         if (d.check('Z')) { res.Errors = 1; res.Ends = 0; }\n         if (d.check('||')) { res.Errors = 1; res.MainError = 0; res.Ends = 1; }\n         if (d.check('[]')) { res.Errors = 1; res.MainError = 0; res.Ends = 2; }\n         if (d.check('|>')) { res.Errors = 1; res.Ends = 3; }\n         if (d.check('>')) { res.Errors = 1; res.Ends = 4; }\n         if (d.check('0')) { res.Mark = 1; res.Errors = 1; res.OutRange = 1; }\n         if (d.check('1')) { if (res.Bar == 1) res.Bar = 2; }\n         if (d.check('2')) { res.Rect = 1; res.Errors = 0; }\n         if (d.check('3')) { res.EF = 1; res.Errors = 0;  }\n         if (d.check('4')) { res.EF = 2; res.Errors = 0; }\n         if (d.check('5')) { res.Rect = 2; res.Errors = 0; }\n         if (d.check('X')) res.Errors = 0;\n      };\n\n      Object.assign(this.options, { Axis: \"\", NoOpt: 0, PadStats: false, original: opt, second_x: false, second_y: false, individual_styles: false });\n\n      if (is_gme && opt) {\n         if (opt.indexOf(\";\") > 0) {\n            blocks_gme = opt.split(\";\");\n            opt = blocks_gme.shift();\n         } else if (opt.indexOf(\"_\") > 0) {\n            blocks_gme = opt.split(\"_\");\n            opt = blocks_gme.shift();\n         }\n      }\n\n      let res = this.options,\n          d = new DrawOptions(opt);\n\n      // check pad options first\n      res.PadStats = d.check(\"USE_PAD_STATS\");\n      let hopt = \"\", checkhopt = [\"USE_PAD_TITLE\", \"LOGXY\", \"LOGX\", \"LOGY\", \"LOGZ\", \"GRIDXY\", \"GRIDX\", \"GRIDY\", \"TICKXY\", \"TICKX\", \"TICKY\"];\n      checkhopt.forEach(name => { if (d.check(name)) hopt += \";\" + name; });\n      if (d.check('XAXIS_', true)) hopt += \";XAXIS_\" + d.part;\n      if (d.check('YAXIS_', true)) hopt += \";YAXIS_\" + d.part;\n\n      if (d.empty()) {\n         res.original = has_main ? \"lp\" : \"alp\";\n         d = new DrawOptions(res.original);\n      }\n\n      if (d.check('NOOPT')) res.NoOpt = 1;\n\n      if (d.check(\"POS3D_\", true)) res.pos3d = d.partAsInt() - 0.5;\n\n      res._pfc = d.check(\"PFC\");\n      res._plc = d.check(\"PLC\");\n      res._pmc = d.check(\"PMC\");\n\n      if (d.check('A')) res.Axis = d.check(\"I\") ? \"A\" : \"AXIS\"; // I means invisible axis\n      if (d.check('X+')) { res.Axis += \"X+\"; res.second_x = has_main; }\n      if (d.check('Y+')) { res.Axis += \"Y+\"; res.second_y = has_main; }\n      if (d.check('RX')) res.Axis += \"RX\";\n      if (d.check('RY')) res.Axis += \"RY\";\n\n      if (is_gme) {\n         res.blocks = [];\n         res.skip_errors_x0 = res.skip_errors_y0 = false;\n         if (d.check('X0')) res.skip_errors_x0 = true;\n         if (d.check('Y0')) res.skip_errors_y0 = true;\n      }\n\n      decodeBlock(d, res);\n\n      if (is_gme) {\n         if (d.check('S')) res.individual_styles = true;\n      }\n\n      // if (d.check('E')) res.Errors = 1; // E option only defined for TGraphPolar\n\n      if (res.Errors === undefined)\n         res.Errors = this.has_errors && (!is_gme || !blocks_gme.length) ? 1 : 0;\n\n      // special case - one could use svg:path to draw many pixels (\n      if ((res.Mark == 1) && (graph.fMarkerStyle == 1)) res.Mark = 101;\n\n      // if no drawing option is selected and if opt=='' nothing is done.\n      if (res.Line + res.Fill + res.Curve + res.Mark + res.Bar + res.EF + res.Rect + res.Errors == 0) {\n         if (d.empty()) res.Line = 1;\n      }\n\n      if (graph._typename == 'TGraphErrors') {\n         let len = graph.fEX.length, m = 0;\n         for (let k = 0; k < len; ++k)\n            m = Math.max(m, graph.fEX[k], graph.fEY[k]);\n         if (m < 1e-100)\n            res.Errors = 0;\n      }\n\n      if (!res.Axis) {\n         // check if axis should be drawn\n         // either graph drawn directly or\n         // graph is first object in list of primitives\n         let pp = this.getPadPainter(),\n             pad = pp?.getRootPad(true);\n         if (!pad || (pad?.fPrimitives?.arr[0] === graph)) res.Axis = \"AXIS\";\n      } else if (res.Axis.indexOf(\"A\") < 0) {\n         res.Axis = \"AXIS,\" + res.Axis;\n      }\n\n      res.Axis += hopt;\n\n      for (let bl = 0; bl < blocks_gme.length; ++bl) {\n         let subd = new DrawOptions(blocks_gme[bl]), subres = {};\n         decodeBlock(subd, subres);\n         subres.skip_errors_x0 = res.skip_errors_x0;\n         subres.skip_errors_y0 = res.skip_errors_y0;\n         res.blocks.push(subres);\n      }\n   }\n\n   /** @summary Extract errors for TGraphMultiErrors */\n   extractGmeErrors(nblock) {\n      if (!this.bins) return;\n      let gr = this.getObject();\n      this.bins.forEach(bin => {\n         bin.eylow  = gr.fEyL[nblock][bin.indx];\n         bin.eyhigh = gr.fEyH[nblock][bin.indx];\n      });\n   }\n\n   /** @summary Create bins for TF1 drawing */\n   createBins() {\n      let gr = this.getObject();\n      if (!gr) return;\n\n      let kind = 0, npoints = gr.fNpoints;\n      if ((gr._typename===\"TCutG\") && (npoints>3)) npoints--;\n\n      if (gr._typename == 'TGraphErrors') kind = 1; else\n      if (gr._typename == 'TGraphMultiErrors') kind = 2; else\n      if (gr._typename == 'TGraphAsymmErrors' || gr._typename == 'TGraphBentErrors'\n          || gr._typename.match(/^RooHist/)) kind = 3;\n\n      this.bins = new Array(npoints);\n\n      for (let p = 0; p < npoints; ++p) {\n         let bin = this.bins[p] = { x: gr.fX[p], y: gr.fY[p], indx: p };\n         switch(kind) {\n            case 1:\n               bin.exlow = bin.exhigh = gr.fEX[p];\n               bin.eylow = bin.eyhigh = gr.fEY[p];\n               break;\n            case 2:\n               bin.exlow  = gr.fExL[p];\n               bin.exhigh = gr.fExH[p];\n               bin.eylow  = gr.fEyL[0][p];\n               bin.eyhigh = gr.fEyH[0][p];\n               break;\n            case 3:\n               bin.exlow  = gr.fEXlow[p];\n               bin.exhigh = gr.fEXhigh[p];\n               bin.eylow  = gr.fEYlow[p];\n               bin.eyhigh = gr.fEYhigh[p];\n               break;\n         }\n\n         if (p === 0) {\n            this.xmin = this.xmax = bin.x;\n            this.ymin = this.ymax = bin.y;\n         }\n\n         if (kind > 0) {\n            this.xmin = Math.min(this.xmin, bin.x - bin.exlow, bin.x + bin.exhigh);\n            this.xmax = Math.max(this.xmax, bin.x - bin.exlow, bin.x + bin.exhigh);\n            this.ymin = Math.min(this.ymin, bin.y - bin.eylow, bin.y + bin.eyhigh);\n            this.ymax = Math.max(this.ymax, bin.y - bin.eylow, bin.y + bin.eyhigh);\n         } else {\n            this.xmin = Math.min(this.xmin, bin.x);\n            this.xmax = Math.max(this.xmax, bin.x);\n            this.ymin = Math.min(this.ymin, bin.y);\n            this.ymax = Math.max(this.ymax, bin.y);\n         }\n      }\n   }\n\n   /** @summary Create histogram for graph\n     * @desc graph bins should be created when calling this function\n     * @param {object} histo - existing histogram instance\n     * @param {boolean} [set_x] - set X axis range\n     * @param {boolean} [set_y] - set Y axis range */\n   createHistogram(histo, set_x, set_y) {\n      let xmin = this.xmin, xmax = this.xmax, ymin = this.ymin, ymax = this.ymax;\n\n      if (xmin >= xmax) xmax = xmin+1;\n      if (ymin >= ymax) ymax = ymin+1;\n      let dx = (xmax-xmin)*0.1, dy = (ymax-ymin)*0.1,\n          uxmin = xmin - dx, uxmax = xmax + dx,\n          minimum = ymin - dy, maximum = ymax + dy;\n\n      if ((uxmin < 0) && (xmin >= 0)) uxmin = xmin*0.9;\n      if ((uxmax > 0) && (xmax <= 0)) uxmax = 0;\n\n      let graph = this.getObject();\n\n      if (graph.fMinimum != -1111) minimum = ymin = graph.fMinimum;\n      if (graph.fMaximum != -1111) maximum = graph.fMaximum;\n      if ((minimum < 0) && (ymin >=0)) minimum = 0.9*ymin;\n\n      histo = graph.fHistogram;\n\n      if (!set_x && !set_y) set_x = set_y = true;\n\n      if (!histo) {\n         histo = graph.fHistogram = createHistogram(\"TH1F\", 100);\n         histo.fName = graph.fName + \"_h\";\n         let kNoStats = BIT(9);\n         histo.fBits = histo.fBits | kNoStats;\n         this._own_histogram = true;\n      }\n\n      histo.fTitle = graph.fTitle;\n\n      if (set_x) {\n         histo.fXaxis.fXmin = uxmin;\n         histo.fXaxis.fXmax = uxmax;\n      }\n\n      if (set_y) {\n         histo.fYaxis.fXmin = minimum;\n         histo.fYaxis.fXmax = maximum;\n         histo.fMinimum = minimum;\n         histo.fMaximum = maximum;\n      }\n\n      return histo;\n   }\n\n   /** @summary Check if user range can be unzommed\n     * @desc Used when graph points covers larger range than provided histogram */\n   unzoomUserRange(dox, doy /*, doz*/) {\n      let graph = this.getObject();\n      if (this._own_histogram || !graph) return false;\n\n      let histo = graph.fHistogram;\n\n      dox = dox && histo && ((histo.fXaxis.fXmin > this.xmin) || (histo.fXaxis.fXmax < this.xmax));\n      doy = doy && histo && ((histo.fYaxis.fXmin > this.ymin) || (histo.fYaxis.fXmax < this.ymax));\n      if (!dox && !doy) return false;\n\n      this.createHistogram(null, dox, doy);\n      this.getMainPainter()?.extractAxesProperties(1); // just to enforce ranges extraction\n\n      return true;\n   }\n\n   /** @summary Returns true if graph drawing can be optimize */\n   canOptimize() {\n      return (settings.OptimizeDraw > 0) && !this.options.NoOpt;\n   }\n\n   /** @summary Returns optimized bins - if optimization enabled */\n   optimizeBins(maxpnt, filter_func) {\n      if ((this.bins.length < 30) && !filter_func) return this.bins;\n\n      let selbins = null;\n      if (typeof filter_func == 'function') {\n         for (let n = 0; n < this.bins.length; ++n) {\n            if (filter_func(this.bins[n],n)) {\n               if (!selbins) selbins = (n==0) ? [] : this.bins.slice(0, n);\n            } else {\n               if (selbins) selbins.push(this.bins[n]);\n            }\n         }\n      }\n      if (!selbins) selbins = this.bins;\n\n      if (!maxpnt) maxpnt = 500000;\n\n      if ((selbins.length < maxpnt) || !this.canOptimize()) return selbins;\n      let step = Math.floor(selbins.length / maxpnt);\n      if (step < 2) step = 2;\n      let optbins = [];\n      for (let n = 0; n < selbins.length; n+=step)\n         optbins.push(selbins[n]);\n\n      return optbins;\n   }\n\n   /** @summary Returns tooltip for specified bin */\n   getTooltips(d) {\n      let pmain = this.getFramePainter(), lines = [],\n          funcs = pmain?.getGrFuncs(this.options.second_x, this.options.second_y),\n          gme = this.get_gme();\n\n      lines.push(this.getObjectHint());\n\n      if (d && funcs) {\n         if (d.indx !== undefined)\n            lines.push(\"p = \" + d.indx);\n         lines.push(\"x = \" + funcs.axisAsText(\"x\", d.x));\n         lines.push(\"y = \" + funcs.axisAsText(\"y\", d.y));\n\n         if (gme)\n            lines.push(\"error x = -\" + funcs.axisAsText(\"x\", gme.fExL[d.indx]) + \"/+\" + funcs.axisAsText(\"x\", gme.fExH[d.indx]));\n         else if (this.options.Errors && (funcs.x_handle.kind=='normal') && (d.exlow || d.exhigh))\n            lines.push(\"error x = -\" + funcs.axisAsText(\"x\", d.exlow) + \"/+\" + funcs.axisAsText(\"x\", d.exhigh));\n\n         if (gme) {\n            for (let ny = 0; ny < gme.fNYErrors; ++ny)\n               lines.push(`error y${ny} = -${funcs.axisAsText(\"y\", gme.fEyL[ny][d.indx])}/+${funcs.axisAsText(\"y\", gme.fEyH[ny][d.indx])}`);\n         } else if ((this.options.Errors || (this.options.EF > 0)) && (funcs.y_handle.kind=='normal') && (d.eylow || d.eyhigh))\n            lines.push(\"error y = -\" + funcs.axisAsText(\"y\", d.eylow) + \"/+\" + funcs.axisAsText(\"y\", d.eyhigh));\n\n      }\n      return lines;\n   }\n\n   /** @summary Provide frame painter for graph\n     * @desc If not exists, emulate its behaviour */\n   get_main() {\n      let pmain = this.getFramePainter();\n\n      if (pmain && pmain.grx && pmain.gry) return pmain;\n\n      // FIXME: check if needed, can be removed easily\n      let pp = this.getPadPainter(),\n          rect = pp?.getPadRect() || { width: 800, height: 600 };\n\n      pmain = {\n          pad_layer: true,\n          pad: pp?.getRootPad(true),\n          pw: rect.width,\n          ph: rect.height,\n          getFrameWidth() { return this.pw; },\n          getFrameHeight() { return this.ph; },\n          grx(value) {\n             if (this.pad.fLogx)\n                value = (value > 0) ? Math.log10(value) : this.pad.fUxmin;\n             else\n                value = (value - this.pad.fX1) / (this.pad.fX2 - this.pad.fX1);\n             return value*this.pw;\n          },\n          gry(value) {\n             if (this.pad.fLogy)\n                value = (value > 0) ? Math.log10(value) : this.pad.fUymin;\n             else\n                value = (value - this.pad.fY1) / (this.pad.fY2 - this.pad.fY1);\n             return (1-value)*this.ph;\n          },\n          getGrFuncs() { return this; }\n      }\n\n      return pmain.pad ? pmain : null;\n   }\n\n   /** @summary append exclusion area to created path */\n   appendExclusion(is_curve, path, drawbins, excl_width) {\n      let extrabins = [];\n      for (let n = drawbins.length-1; n >= 0; --n) {\n         let bin = drawbins[n],\n             dlen = Math.sqrt(bin.dgrx**2 + bin.dgry**2);\n         // shift point\n         bin.grx += excl_width*bin.dgry/dlen;\n         bin.gry -= excl_width*bin.dgrx/dlen;\n         extrabins.push(bin);\n      }\n\n      let path2 = buildSvgPath(is_curve ? \"Lbezier\" : \"Lline\", extrabins);\n\n      this.draw_g.append(\"svg:path\")\n                 .attr(\"d\", path.path + path2.path + \"Z\")\n                 .call(this.fillatt.func)\n                 .style('opacity', 0.75);\n   }\n\n   /** @summary draw TGraph bins with specified options\n     * @desc Can be called several times */\n   drawBins(funcs, options, draw_g, w, h, lineatt, fillatt, main_block) {\n      let graph = this.getObject(),\n          excl_width = 0, drawbins = null;\n\n      if (main_block && lineatt.excl_side) {\n         excl_width = lineatt.excl_width;\n         if ((lineatt.width > 0) && !options.Line && !options.Curve) options.Line = 1;\n      }\n\n      if (options.EF) {\n         drawbins = this.optimizeBins((options.EF > 1) ? 20000 : 0);\n\n         // build lower part\n         for (let n = 0; n < drawbins.length; ++n) {\n            let bin = drawbins[n];\n            bin.grx = funcs.grx(bin.x);\n            bin.gry = funcs.gry(bin.y - bin.eylow);\n         }\n\n         let path1 = buildSvgPath((options.EF > 1) ? \"bezier\" : \"line\", drawbins),\n             bins2 = [];\n\n         for (let n = drawbins.length-1; n >= 0; --n) {\n            let bin = drawbins[n];\n            bin.gry = funcs.gry(bin.y + bin.eyhigh);\n            bins2.push(bin);\n         }\n\n         // build upper part (in reverse direction)\n         let path2 = buildSvgPath((options.EF > 1) ? \"Lbezier\" : \"Lline\", bins2);\n\n         draw_g.append(\"svg:path\")\n               .attr(\"d\", path1.path + path2.path + \"Z\")\n               .call(fillatt.func);\n         if (main_block)\n            this.draw_kind = \"lines\";\n      }\n\n      if (options.Line || options.Fill) {\n\n         let close_symbol = \"\";\n         if (graph._typename == \"TCutG\") options.Fill = 1;\n\n         if (options.Fill) {\n            close_symbol = \"Z\"; // always close area if we want to fill it\n            excl_width = 0;\n         }\n\n         if (!drawbins) drawbins = this.optimizeBins(0);\n\n         for (let n = 0; n < drawbins.length; ++n) {\n            let bin = drawbins[n];\n            bin.grx = funcs.grx(bin.x);\n            bin.gry = funcs.gry(bin.y);\n         }\n\n         let kind = \"line\"; // simple line\n         if (excl_width) kind += \"calc\"; // we need to calculated deltas to build exclusion points\n\n         let path = buildSvgPath(kind, drawbins);\n\n         if (excl_width)\n             this.appendExclusion(false, path, drawbins, excl_width);\n\n         let elem = draw_g.append(\"svg:path\").attr(\"d\", path.path + close_symbol);\n         if (options.Line)\n            elem.call(lineatt.func);\n\n         if (options.Fill)\n            elem.call(fillatt.func);\n         else\n            elem.style('fill', 'none');\n\n         if (main_block)\n            this.draw_kind = \"lines\";\n      }\n\n      if (options.Curve) {\n         let curvebins = drawbins;\n         if ((this.draw_kind != \"lines\") || !curvebins || ((options.Curve == 1) && (curvebins.length > 20000))) {\n            curvebins = this.optimizeBins((options.Curve == 1) ? 20000 : 0);\n            for (let n = 0; n < curvebins.length; ++n) {\n               let bin = curvebins[n];\n               bin.grx = funcs.grx(bin.x);\n               bin.gry = funcs.gry(bin.y);\n            }\n         }\n\n         let kind = \"bezier\";\n         if (excl_width) kind += \"calc\"; // we need to calculated deltas to build exclusion points\n\n         let path = buildSvgPath(kind, curvebins);\n\n         if (excl_width)\n             this.appendExclusion(true, path, curvebins, excl_width);\n\n         draw_g.append(\"svg:path\")\n               .attr(\"d\", path.path)\n               .call(lineatt.func)\n               .style('fill', 'none');\n         if (main_block)\n            this.draw_kind = \"lines\"; // handled same way as lines\n      }\n\n      let nodes = null;\n\n      if (options.Errors || options.Rect || options.Bar) {\n\n         drawbins = this.optimizeBins(5000, (pnt,i) => {\n\n            let grx = funcs.grx(pnt.x);\n\n            // when drawing bars, take all points\n            if (!options.Bar && ((grx < 0) || (grx > w))) return true;\n\n            let gry = funcs.gry(pnt.y);\n\n            if (!options.Bar && !options.OutRange && ((gry < 0) || (gry > h))) return true;\n\n            pnt.grx1 = Math.round(grx);\n            pnt.gry1 = Math.round(gry);\n\n            if (this.has_errors) {\n               pnt.grx0 = Math.round(funcs.grx(pnt.x - options.ScaleErrX*pnt.exlow) - grx);\n               pnt.grx2 = Math.round(funcs.grx(pnt.x + options.ScaleErrX*pnt.exhigh) - grx);\n               pnt.gry0 = Math.round(funcs.gry(pnt.y - pnt.eylow) - gry);\n               pnt.gry2 = Math.round(funcs.gry(pnt.y + pnt.eyhigh) - gry);\n\n               if (this.is_bent) {\n                  pnt.grdx0 = Math.round(funcs.gry(pnt.y + graph.fEXlowd[i]) - gry);\n                  pnt.grdx2 = Math.round(funcs.gry(pnt.y + graph.fEXhighd[i]) - gry);\n                  pnt.grdy0 = Math.round(funcs.grx(pnt.x + graph.fEYlowd[i]) - grx);\n                  pnt.grdy2 = Math.round(funcs.grx(pnt.x + graph.fEYhighd[i]) - grx);\n               } else {\n                  pnt.grdx0 = pnt.grdx2 = pnt.grdy0 = pnt.grdy2 = 0;\n               }\n            }\n\n            return false;\n         });\n\n         if (main_block)\n            this.draw_kind = \"nodes\";\n\n         nodes = draw_g.selectAll(\".grpoint\")\n                       .data(drawbins)\n                       .enter()\n                       .append(\"svg:g\")\n                       .attr(\"class\", \"grpoint\")\n                       .attr(\"transform\", d => `translate(${d.grx1},${d.gry1})`);\n      }\n\n      if (options.Bar) {\n         // calculate bar width\n         for (let i = 1; i < drawbins.length-1; ++i)\n            drawbins[i].width = Math.max(2, (drawbins[i+1].grx1 - drawbins[i-1].grx1) / 2 - 2);\n\n         // first and last bins\n         switch (drawbins.length) {\n            case 0: break;\n            case 1: drawbins[0].width = w/4; break; // pathologic case of single bin\n            case 2: drawbins[0].width = drawbins[1].width = (drawbins[1].grx1-drawbins[0].grx1)/2; break;\n            default:\n               drawbins[0].width = drawbins[1].width;\n               drawbins[drawbins.length-1].width = drawbins[drawbins.length-2].width;\n         }\n\n         let yy0 = Math.round(funcs.gry(0)), usefill = fillatt;\n\n         if (main_block) {\n            let fp = this.getFramePainter(),\n                fpcol = fp?.fillatt && !fp?.fillatt.empty() ? fp.fillatt.getFillColor() : -1;\n            if (fpcol === fillatt.getFillColor())\n               usefill = new TAttFillHandler({ color: fpcol == \"white\" ? 1 : 0, pattern: 1001 });\n         }\n\n         nodes.append(\"svg:path\")\n              .attr(\"d\", d => {\n                 d.bar = true; // element drawn as bar\n                 let dx = Math.round(-d.width/2),\n                     dw = Math.round(d.width),\n                     dy = (options.Bar!==1) ? 0 : ((d.gry1 > yy0) ? yy0-d.gry1 : 0),\n                     dh = (options.Bar!==1) ? (h > d.gry1 ? h - d.gry1 : 0) : Math.abs(yy0 - d.gry1);\n                 return `M${dx},${dy}h${dw}v${dh}h${-dw}z`;\n              })\n            .call(usefill.func);\n      }\n\n      if (options.Rect) {\n         nodes.filter(d => (d.exlow > 0) && (d.exhigh > 0) && (d.eylow > 0) && (d.eyhigh > 0))\n           .append(\"svg:path\")\n           .attr(\"d\", d => {\n               d.rect = true;\n               return `M${d.grx0},${d.gry0}H${d.grx2}V${d.gry2}H${d.grx0}Z`;\n            })\n           .call(fillatt.func)\n           .call(options.Rect === 2 ? lineatt.func : () => {});\n      }\n\n      this.error_size = 0;\n\n      if (options.Errors) {\n         // to show end of error markers, use line width attribute\n         let lw = lineatt.width + gStyle.fEndErrorSize, bb = 0,\n             vv = options.Ends ? `m0,${lw}v${-2*lw}` : \"\",\n             hh = options.Ends ? `m${lw},0h${-2*lw}` : \"\",\n             vleft = vv, vright = vv, htop = hh, hbottom = hh;\n\n         const mainLine = (dx,dy) => {\n            if (!options.MainError) return `M${dx},${dy}`;\n            let res = \"M0,0\";\n            if (dx) return res + (dy ? `L${dx},${dy}` : `H${dx}`);\n            return dy ? res + `V${dy}` : res;\n         };\n\n         switch (options.Ends) {\n            case 2:  // option []\n               bb = Math.max(lineatt.width+1, Math.round(lw*0.66));\n               vleft = `m${bb},${lw}h${-bb}v${-2*lw}h${bb}`;\n               vright = `m${-bb},${lw}h${bb}v${-2*lw}h${-bb}`;\n               htop = `m${-lw},${bb}v${-bb}h${2*lw}v${bb}`;\n               hbottom = `m${-lw},${-bb}v${bb}h${2*lw}v${-bb}`;\n               break;\n            case 3: // option |>\n               lw = Math.max(lw, Math.round(graph.fMarkerSize*8*0.66));\n               bb = Math.max(lineatt.width+1, Math.round(lw*0.66));\n               vleft = `l${bb},${lw}v${-2*lw}l${-bb},${lw}`;\n               vright = `l${-bb},${lw}v${-2*lw}l${bb},${lw}`;\n               htop = `l${-lw},${bb}h${2*lw}l${-lw},${-bb}`;\n               hbottom = `l${-lw},${-bb}h${2*lw}l${-lw},${bb}`;\n               break;\n            case 4: // option >\n               lw = Math.max(lw, Math.round(graph.fMarkerSize*8*0.66));\n               bb = Math.max(lineatt.width+1, Math.round(lw*0.66));\n               vleft = `l${bb},${lw}m0,${-2*lw}l${-bb},${lw}`;\n               vright = `l${-bb},${lw}m0,${-2*lw}l${bb},${lw}`;\n               htop = `l${-lw},${bb}m${2*lw},0l${-lw},${-bb}`;\n               hbottom = `l${-lw},${-bb}m${2*lw},0l${-lw},${bb}`;\n               break;\n         }\n\n         this.error_size = lw;\n\n         lw = Math.floor((lineatt.width-1)/2); // one should take into account half of end-cup line width\n\n         let visible = nodes.filter(d => (d.exlow > 0) || (d.exhigh > 0) || (d.eylow > 0) || (d.eyhigh > 0));\n         if (options.skip_errors_x0 || options.skip_errors_y0)\n            visible = visible.filter(d => ((d.x != 0) || !options.skip_errors_x0) && ((d.y != 0) || !options.skip_errors_y0));\n\n         if (!isBatchMode() && settings.Tooltip && main_block)\n            visible.append(\"svg:path\")\n                   .style(\"fill\", \"none\")\n                   .style(\"pointer-events\", \"visibleFill\")\n                   .attr(\"d\", d => `M${d.grx0},${d.gry0}h${d.grx2-d.grx0}v${d.gry2-d.gry0}h${d.grx0-d.grx2}z`);\n\n         visible.append(\"svg:path\")\n             .call(lineatt.func)\n             .style(\"fill\", \"none\")\n             .attr(\"d\", d => {\n                d.error = true;\n                return ((d.exlow > 0)  ? mainLine(d.grx0+lw, d.grdx0) + vleft : \"\") +\n                       ((d.exhigh > 0) ? mainLine(d.grx2-lw, d.grdx2) + vright : \"\") +\n                       ((d.eylow > 0)  ? mainLine(d.grdy0, d.gry0-lw) + hbottom : \"\") +\n                       ((d.eyhigh > 0) ? mainLine(d.grdy2, d.gry2+lw) + htop : \"\");\n              });\n      }\n\n      if (options.Mark) {\n         // for tooltips use markers only if nodes were not created\n         this.createAttMarker({ attr: graph, style: options.Mark - 100 });\n\n         this.marker_size = this.markeratt.getFullSize();\n\n         this.markeratt.resetPos();\n\n         let path = \"\", pnt, grx, gry,\n             want_tooltip = !isBatchMode() && settings.Tooltip && (!this.markeratt.fill || (this.marker_size < 7)) && !nodes && main_block,\n             hints_marker = \"\", hsz = Math.max(5, Math.round(this.marker_size*0.7)),\n             maxnummarker = 1000000 / (this.markeratt.getMarkerLength() + 7), step = 1; // let produce SVG at maximum 1MB\n\n         if (!drawbins)\n            drawbins = this.optimizeBins(maxnummarker);\n         else if (this.canOptimize() && (drawbins.length > 1.5*maxnummarker))\n            step = Math.min(2, Math.round(drawbins.length/maxnummarker));\n\n         for (let n = 0; n < drawbins.length; n += step) {\n            pnt = drawbins[n];\n            grx = funcs.grx(pnt.x);\n            if ((grx > -this.marker_size) && (grx < w + this.marker_size)) {\n               gry = funcs.gry(pnt.y);\n               if ((gry > -this.marker_size) && (gry < h + this.marker_size)) {\n                  path += this.markeratt.create(grx, gry);\n                  if (want_tooltip) hints_marker += `M${grx-hsz},${gry-hsz}h${2*hsz}v${2*hsz}h${-2*hsz}z`;\n               }\n            }\n         }\n\n         if (path.length > 0) {\n            draw_g.append(\"svg:path\")\n                  .attr(\"d\", path)\n                  .call(this.markeratt.func);\n            if ((nodes === null) && (this.draw_kind == \"none\") && main_block)\n               this.draw_kind = (options.Mark == 101) ? \"path\" : \"mark\";\n         }\n         if (want_tooltip && hints_marker)\n            draw_g.append(\"svg:path\")\n                  .attr(\"d\", hints_marker)\n                  .style(\"fill\", \"none\")\n                  .style(\"pointer-events\", \"visibleFill\");\n      }\n   }\n\n   /** @summary append TGraphQQ part */\n   appendQQ(funcs, graph) {\n      let xqmin = Math.max(funcs.scale_xmin, graph.fXq1),\n          xqmax = Math.min(funcs.scale_xmax, graph.fXq2),\n          yqmin = Math.max(funcs.scale_ymin, graph.fYq1),\n          yqmax = Math.min(funcs.scale_ymax, graph.fYq2),\n          path2 = \"\",\n          makeLine = (x1,y1,x2,y2) => `M${funcs.grx(x1)},${funcs.gry(y1)}L${funcs.grx(x2)},${funcs.gry(y2)}`,\n          yxmin = (graph.fYq2 - graph.fYq1)*(funcs.scale_xmin-graph.fXq1)/(graph.fXq2-graph.fXq1) + graph.fYq1,\n          yxmax = (graph.fYq2-graph.fYq1)*(funcs.scale_xmax-graph.fXq1)/(graph.fXq2-graph.fXq1) + graph.fYq1;\n\n      if (yxmin < funcs.scale_ymin) {\n         let xymin = (graph.fXq2 - graph.fXq1)*(funcs.scale_ymin-graph.fYq1)/(graph.fYq2-graph.fYq1) + graph.fXq1;\n         path2 = makeLine(xymin, funcs.scale_ymin, xqmin, yqmin);\n      } else {\n         path2 = makeLine(funcs.scale_xmin, yxmin, xqmin, yqmin);\n      }\n\n      if (yxmax > funcs.scale_ymax) {\n         let xymax = (graph.fXq2-graph.fXq1)*(funcs.scale_ymax-graph.fYq1)/(graph.fYq2-graph.fYq1) + graph.fXq1;\n         path2 += makeLine(xqmax, yqmax, xymax, funcs.scale_ymax);\n      } else {\n         path2 += makeLine(xqmax, yqmax, funcs.scale_xmax, yxmax);\n      }\n\n      let latt1 = new TAttLineHandler({ style: 1, width: 1, color: \"black\" }),\n          latt2 = new TAttLineHandler({ style: 2, width: 1, color: \"black\" });\n\n      this.draw_g.append(\"path\")\n                 .attr(\"d\", makeLine(xqmin,yqmin,xqmax,yqmax))\n                 .call(latt1.func)\n                 .style(\"fill\", \"none\");\n\n      this.draw_g.append(\"path\")\n                 .attr(\"d\", path2)\n                 .call(latt2.func)\n                 .style(\"fill\", \"none\");\n   }\n\n   drawBins3D(/*fp, graph*/) {\n      console.log('Load ./hist/TGraphPainter.mjs to draw graph in 3D');\n   }\n\n   /** @summary draw TGraph */\n   drawGraph() {\n\n      let pmain = this.get_main(),\n          graph = this.getObject();\n      if (!pmain) return;\n\n      // special mode for TMultiGraph 3d drawing\n      if (this.options.pos3d)\n         return this.drawBins3D(pmain, graph);\n\n      let is_gme = !!this.get_gme(),\n          funcs = pmain.getGrFuncs(this.options.second_x, this.options.second_y),\n          w = pmain.getFrameWidth(),\n          h = pmain.getFrameHeight();\n\n      this.createG(!pmain.pad_layer);\n\n      if (this.options._pfc || this.options._plc || this.options._pmc) {\n         let mp = this.getMainPainter();\n         if (typeof mp?.createAutoColor == 'function') {\n            let icolor = mp.createAutoColor();\n            if (this.options._pfc) { graph.fFillColor = icolor; delete this.fillatt; }\n            if (this.options._plc) { graph.fLineColor = icolor; delete this.lineatt; }\n            if (this.options._pmc) { graph.fMarkerColor = icolor; delete this.markeratt; }\n            this.options._pfc = this.options._plc = this.options._pmc = false;\n         }\n      }\n\n      this.createAttLine({ attr: graph, can_excl: true });\n      this.createAttFill({ attr: graph });\n\n      this.fillatt.used = false; // mark used only when really used\n\n      this.draw_kind = \"none\"; // indicate if special svg:g were created for each bin\n      this.marker_size = 0; // indicate if markers are drawn\n      let draw_g = is_gme ? this.draw_g.append(\"svg:g\") : this.draw_g;\n\n      this.drawBins(funcs, this.options, draw_g, w, h, this.lineatt, this.fillatt, true);\n\n      if (graph._typename == \"TGraphQQ\")\n         this.appendQQ(funcs, graph);\n\n      if (is_gme) {\n         for (let k = 0; k < graph.fNYErrors; ++k) {\n            let lineatt = this.lineatt, fillatt = this.fillatt;\n            if (this.options.individual_styles) {\n               lineatt = new TAttLineHandler({ attr: graph.fAttLine[k], std: false });\n               fillatt = new TAttFillHandler({ attr: graph.fAttFill[k], std: false, svg: this.getCanvSvg() });\n            }\n            let sub_g = this.draw_g.append(\"svg:g\"),\n                options = k < this.options.blocks.length ? this.options.blocks[k] : this.options;\n            this.extractGmeErrors(k);\n            this.drawBins(funcs, options, sub_g, w, h, lineatt, fillatt);\n         }\n         this.extractGmeErrors(0); // ensure that first block kept at the end\n      }\n\n      if (!isBatchMode())\n         addMoveHandler(this, this.testEditable());\n   }\n\n   /** @summary Provide tooltip at specified point */\n   extractTooltip(pnt) {\n      if (!pnt) return null;\n\n      if ((this.draw_kind == \"lines\") || (this.draw_kind == \"path\") || (this.draw_kind == \"mark\"))\n         return this.extractTooltipForPath(pnt);\n\n      if (this.draw_kind != \"nodes\") return null;\n\n      let pmain = this.getFramePainter(),\n          height = pmain.getFrameHeight(),\n          esz = this.error_size,\n          isbar1 = (this.options.Bar === 1),\n          funcs = isbar1 ? pmain.getGrFuncs(this.options.second_x, this.options.second_y) : null,\n          findbin = null, best_dist2 = 1e10, best = null,\n          msize = this.marker_size ? Math.round(this.marker_size/2 + 1.5) : 0;\n\n      this.draw_g.selectAll('.grpoint').each(function() {\n         let d = d3_select(this).datum();\n         if (d === undefined) return;\n         let dist2 = (pnt.x - d.grx1) ** 2;\n         if (pnt.nproc === 1) dist2 += (pnt.y - d.gry1) ** 2;\n         if (dist2 >= best_dist2) return;\n\n         let rect;\n\n         if (d.error || d.rect || d.marker) {\n            rect = { x1: Math.min(-esz, d.grx0, -msize),\n                     x2: Math.max(esz, d.grx2, msize),\n                     y1: Math.min(-esz, d.gry2, -msize),\n                     y2: Math.max(esz, d.gry0, msize) };\n         } else if (d.bar) {\n             rect = { x1: -d.width/2, x2: d.width/2, y1: 0, y2: height - d.gry1 };\n\n             if (isbar1) {\n                let yy0 = funcs.gry(0);\n                rect.y1 = (d.gry1 > yy0) ? yy0-d.gry1 : 0;\n                rect.y2 = (d.gry1 > yy0) ? 0 : yy0-d.gry1;\n             }\n          } else {\n             rect = { x1: -5, x2: 5, y1: -5, y2: 5 };\n          }\n          let matchx = (pnt.x >= d.grx1 + rect.x1) && (pnt.x <= d.grx1 + rect.x2),\n              matchy = (pnt.y >= d.gry1 + rect.y1) && (pnt.y <= d.gry1 + rect.y2);\n\n          if (matchx && (matchy || (pnt.nproc > 1))) {\n             best_dist2 = dist2;\n             findbin = this;\n             best = rect;\n             best.exact = /* matchx && */ matchy;\n          }\n       });\n\n      if (findbin === null) return null;\n\n      let d = d3_select(findbin).datum(),\n          gr = this.getObject(),\n          res = { name: gr.fName, title: gr.fTitle,\n                  x: d.grx1, y: d.gry1,\n                  color1: this.lineatt.color,\n                  lines: this.getTooltips(d),\n                  rect: best, d3bin: findbin };\n\n       res.user_info = { obj: gr, name: gr.fName, bin: d.indx, cont: d.y, grx: d.grx1, gry: d.gry1 };\n\n      if (this.fillatt && this.fillatt.used && !this.fillatt.empty())\n         res.color2 = this.fillatt.getFillColor();\n\n      if (best.exact) res.exact = true;\n      res.menu = res.exact; // activate menu only when exactly locate bin\n      res.menu_dist = 3; // distance always fixed\n      res.bin = d;\n      res.binindx = d.indx;\n\n      return res;\n   }\n\n   /** @summary Show tooltip */\n   showTooltip(hint) {\n\n      if (!hint) {\n         if (this.draw_g) this.draw_g.select(\".tooltip_bin\").remove();\n         return;\n      }\n\n      if (hint.usepath) return this.showTooltipForPath(hint);\n\n      let d = d3_select(hint.d3bin).datum(),\n          ttrect = this.draw_g.select(\".tooltip_bin\");\n\n      if (ttrect.empty())\n         ttrect = this.draw_g.append(\"svg:rect\")\n                             .attr(\"class\",\"tooltip_bin h1bin\")\n                             .style(\"pointer-events\",\"none\");\n\n      hint.changed = ttrect.property(\"current_bin\") !== hint.d3bin;\n\n      if (hint.changed)\n         ttrect.attr(\"x\", d.grx1 + hint.rect.x1)\n               .attr(\"width\", hint.rect.x2 - hint.rect.x1)\n               .attr(\"y\", d.gry1 + hint.rect.y1)\n               .attr(\"height\", hint.rect.y2 - hint.rect.y1)\n               .style(\"opacity\", \"0.3\")\n               .property(\"current_bin\", hint.d3bin);\n   }\n\n   /** @summary Process tooltip event */\n   processTooltipEvent(pnt) {\n      let hint = this.extractTooltip(pnt);\n      if (!pnt || !pnt.disabled) this.showTooltip(hint);\n      return hint;\n   }\n\n   /** @summary Find best bin index for specified point */\n   findBestBin(pnt) {\n      if (!this.bins) return null;\n\n      let islines = (this.draw_kind == \"lines\"),\n          bestindx = -1,\n          bestbin = null,\n          bestdist = 1e10,\n          pmain = this.getFramePainter(),\n          funcs = pmain.getGrFuncs(this.options.second_x, this.options.second_y),\n          dist, grx, gry, n, bin;\n\n      for (n = 0; n < this.bins.length; ++n) {\n         bin = this.bins[n];\n\n         grx = funcs.grx(bin.x);\n         gry = funcs.gry(bin.y);\n\n         dist = (pnt.x-grx)**2 + (pnt.y-gry)**2;\n\n         if (dist < bestdist) {\n            bestdist = dist;\n            bestbin = bin;\n            bestindx = n;\n         }\n      }\n\n      // check last point\n      if ((bestdist > 100) && islines) bestbin = null;\n\n      let radius = Math.max(this.lineatt.width + 3, 4);\n\n      if (this.marker_size > 0) radius = Math.max(this.marker_size, radius);\n\n      if (bestbin)\n         bestdist = Math.sqrt((pnt.x-funcs.grx(bestbin.x))**2 + (pnt.y-funcs.gry(bestbin.y))**2);\n\n      if (!islines && (bestdist > radius)) bestbin = null;\n\n      if (!bestbin) bestindx = -1;\n\n      let res = { bin: bestbin, indx: bestindx, dist: bestdist, radius: Math.round(radius) };\n\n      if (!bestbin && islines) {\n\n         bestdist = 1e10;\n\n         const IsInside = (x, x1, x2) => ((x1 >= x) && (x >= x2)) || ((x1 <= x) && (x <= x2));\n\n         let bin0 = this.bins[0], grx0 = funcs.grx(bin0.x), gry0, posy = 0;\n         for (n = 1; n < this.bins.length; ++n) {\n            bin = this.bins[n];\n            grx = funcs.grx(bin.x);\n\n            if (IsInside(pnt.x, grx0, grx)) {\n               // if inside interval, check Y distance\n               gry0 = funcs.gry(bin0.y);\n               gry = funcs.gry(bin.y);\n\n               if (Math.abs(grx - grx0) < 1) {\n                  // very close x - check only y\n                  posy = pnt.y;\n                  dist = IsInside(pnt.y, gry0, gry) ? 0 : Math.min(Math.abs(pnt.y-gry0), Math.abs(pnt.y-gry));\n               } else {\n                  posy = gry0 + (pnt.x - grx0) / (grx - grx0) * (gry - gry0);\n                  dist = Math.abs(posy - pnt.y);\n               }\n\n               if (dist < bestdist) {\n                  bestdist = dist;\n                  res.linex = pnt.x;\n                  res.liney = posy;\n               }\n            }\n\n            bin0 = bin;\n            grx0 = grx;\n         }\n\n         if (bestdist < radius*0.5) {\n            res.linedist = bestdist;\n            res.closeline = true;\n         }\n      }\n\n      return res;\n   }\n\n   /** @summary Check editable flag for TGraph\n     * @desc if arg specified changes or toggles editable flag */\n   testEditable(arg) {\n      let obj = this.getObject();\n      if (!obj) return false;\n      if ((arg == \"toggle\") || ((arg !== undefined) && (!arg != obj.TestBit(kNotEditable))))\n         obj.InvertBit(kNotEditable);\n      return !obj.TestBit(kNotEditable);\n   }\n\n   /** @summary Provide tooltip at specified point for path-based drawing */\n   extractTooltipForPath(pnt) {\n\n      if (this.bins === null) return null;\n\n      let best = this.findBestBin(pnt);\n\n      if (!best || (!best.bin && !best.closeline)) return null;\n\n      let islines = (this.draw_kind==\"lines\"),\n          ismark = (this.draw_kind==\"mark\"),\n          pmain = this.getFramePainter(),\n          funcs = pmain.getGrFuncs(this.options.second_x, this.options.second_y),\n          gr = this.getObject(),\n          res = { name: gr.fName, title: gr.fTitle,\n                  x: best.bin ? funcs.grx(best.bin.x) : best.linex,\n                  y: best.bin ? funcs.gry(best.bin.y) : best.liney,\n                  color1: this.lineatt.color,\n                  lines: this.getTooltips(best.bin),\n                  usepath: true };\n\n      res.user_info = { obj: gr,  name: gr.fName, bin: 0, cont: 0, grx: res.x, gry: res.y };\n\n      res.ismark = ismark;\n      res.islines = islines;\n\n      if (best.closeline) {\n         res.menu = res.exact = true;\n         res.menu_dist = best.linedist;\n      } else if (best.bin) {\n         if (this.options.EF && islines) {\n            res.gry1 = funcs.gry(best.bin.y - best.bin.eylow);\n            res.gry2 = funcs.gry(best.bin.y + best.bin.eyhigh);\n         } else {\n            res.gry1 = res.gry2 = funcs.gry(best.bin.y);\n         }\n\n         res.binindx = best.indx;\n         res.bin = best.bin;\n         res.radius = best.radius;\n         res.user_info.bin = best.indx;\n         res.user_info.cont = best.bin.y;\n\n         res.exact = (Math.abs(pnt.x - res.x) <= best.radius) &&\n            ((Math.abs(pnt.y - res.gry1) <= best.radius) || (Math.abs(pnt.y - res.gry2) <= best.radius));\n\n         res.menu = res.exact;\n         res.menu_dist = Math.sqrt((pnt.x-res.x)**2 + Math.min(Math.abs(pnt.y-res.gry1), Math.abs(pnt.y-res.gry2))**2);\n      }\n\n      if (this.fillatt && this.fillatt.used && !this.fillatt.empty())\n         res.color2 = this.fillatt.getFillColor();\n\n      if (!islines) {\n         res.color1 = this.getColor(gr.fMarkerColor);\n         if (!res.color2) res.color2 = res.color1;\n      }\n\n      return res;\n   }\n\n   /** @summary Show tooltip for path drawing */\n   showTooltipForPath(hint) {\n\n      let ttbin = this.draw_g.select(\".tooltip_bin\");\n\n      if (!hint || !hint.bin) {\n         ttbin.remove();\n         return;\n      }\n\n      if (ttbin.empty())\n         ttbin = this.draw_g.append(\"svg:g\").attr(\"class\",\"tooltip_bin\");\n\n      hint.changed = ttbin.property(\"current_bin\") !== hint.bin;\n\n      if (hint.changed) {\n         ttbin.selectAll(\"*\").remove(); // first delete all children\n         ttbin.property(\"current_bin\", hint.bin);\n\n         if (hint.ismark) {\n            ttbin.append(\"svg:rect\")\n                 .attr(\"class\",\"h1bin\")\n                 .style(\"pointer-events\",\"none\")\n                 .style(\"opacity\", \"0.3\")\n                 .attr(\"x\", Math.round(hint.x - hint.radius))\n                 .attr(\"y\", Math.round(hint.y - hint.radius))\n                 .attr(\"width\", 2*hint.radius)\n                 .attr(\"height\", 2*hint.radius);\n         } else {\n            ttbin.append(\"svg:circle\").attr(\"cy\", Math.round(hint.gry1));\n            if (Math.abs(hint.gry1-hint.gry2) > 1)\n               ttbin.append(\"svg:circle\").attr(\"cy\", Math.round(hint.gry2));\n\n            let elem = ttbin.selectAll(\"circle\")\n                            .attr(\"r\", hint.radius)\n                            .attr(\"cx\", Math.round(hint.x));\n\n            if (!hint.islines) {\n               elem.style('stroke', hint.color1 == 'black' ? 'green' : 'black').style('fill','none');\n            } else {\n               if (this.options.Line || this.options.Curve)\n                  elem.call(this.lineatt.func);\n               else\n                  elem.style('stroke','black');\n               if (this.options.Fill)\n                  elem.call(this.fillatt.func);\n               else\n                  elem.style('fill','none');\n            }\n         }\n      }\n   }\n\n   /** @summary Check if graph moving is enabled */\n   moveEnabled() {\n      return this.testEditable();\n   }\n\n   /** @summary Start moving of TGraph */\n   moveStart(x,y) {\n      this.pos_dx = this.pos_dy = 0;\n      let hint = this.extractTooltip({x, y});\n      if (hint && hint.exact && (hint.binindx !== undefined)) {\n         this.move_binindx = hint.binindx;\n         this.move_bin = hint.bin;\n         let pmain = this.getFramePainter(),\n             funcs = pmain?.getGrFuncs(this.options.second_x, this.options.second_y);\n         this.move_x0 = funcs ? funcs.grx(this.move_bin.x) : x;\n         this.move_y0 = funcs ? funcs.gry(this.move_bin.y) : y;\n      } else {\n         delete this.move_binindx;\n      }\n   }\n\n   /** @summary Perform moving */\n   moveDrag(dx,dy) {\n      this.pos_dx += dx;\n      this.pos_dy += dy;\n\n      if (this.move_binindx === undefined) {\n         this.draw_g.attr(\"transform\", `translate(${this.pos_dx},${this.pos_dy})`);\n      } else {\n         let pmain = this.getFramePainter(),\n             funcs = pmain?.getGrFuncs(this.options.second_x, this.options.second_y);\n         if (funcs && this.move_bin) {\n            this.move_bin.x = funcs.revertAxis(\"x\", this.move_x0 + this.pos_dx);\n            this.move_bin.y = funcs.revertAxis(\"y\", this.move_y0 + this.pos_dy);\n            this.drawGraph();\n         }\n      }\n   }\n\n   /** @summary Complete moving */\n   moveEnd(not_changed) {\n      let exec = \"\";\n\n      if (this.move_binindx === undefined) {\n         this.draw_g.attr(\"transform\", null);\n\n         let pmain = this.getFramePainter(),\n             funcs = pmain?.getGrFuncs(this.options.second_x, this.options.second_y);\n         if (funcs && this.bins && !not_changed) {\n            for (let k = 0; k < this.bins.length; ++k) {\n               let bin = this.bins[k];\n               bin.x = funcs.revertAxis(\"x\", funcs.grx(bin.x) + this.pos_dx);\n               bin.y = funcs.revertAxis(\"y\", funcs.gry(bin.y) + this.pos_dy);\n               exec += `SetPoint(${bin.indx},${bin.x},${bin.y});;`;\n               if ((bin.indx == 0) && this.matchObjectType('TCutG'))\n                  exec += `SetPoint(${this.getObject().fNpoints-1},${bin.x},${bin.y});;`;\n            }\n            this.drawGraph();\n         }\n      } else {\n         exec = `SetPoint(${this.move_bin.indx},${this.move_bin.x},${this.move_bin.y});;`;\n         if ((this.move_bin.indx == 0) && this.matchObjectType('TCutG'))\n            exec += `SetPoint(${this.getObject().fNpoints-1},${this.move_bin.x},${this.move_bin.y});;`;\n         delete this.move_binindx;\n      }\n\n      if (exec && !not_changed)\n         this.submitCanvExec(exec);\n   }\n\n   /** @summary Fill context menu */\n   fillContextMenu(menu) {\n      super.fillContextMenu(menu);\n\n      if (!this.snapid)\n         menu.addchk(this.testEditable(), \"Editable\", () => { this.testEditable(\"toggle\"); this.drawGraph(); });\n\n      return menu.size() > 0;\n   }\n\n   /** @summary Execute menu command\n     * @private */\n   executeMenuCommand(method, args) {\n      if (super.executeMenuCommand(method,args)) return true;\n\n      let canp = this.getCanvPainter(), pmain = this.getFramePainter();\n\n      if ((method.fName == 'RemovePoint') || (method.fName == 'InsertPoint')) {\n         let pnt = pmain?.getLastEventPos();\n\n         if (!canp || canp._readonly || !pnt) return true; // ignore function\n\n         let hint = this.extractTooltip(pnt);\n\n         if (method.fName == 'InsertPoint') {\n            let funcs = pmain?.getGrFuncs(this.options.second_x, this.options.second_y),\n                userx = funcs?.revertAxis(\"x\", pnt.x) ?? 0,\n                usery = funcs?.revertAxis(\"y\", pnt.y) ?? 0;\n            this.submitCanvExec(`AddPoint(${userx.toFixed(3)}, ${usery.toFixed(3)})`, this.args_menu_id);\n         } else if (this.args_menu_id && (hint?.binindx !== undefined)) {\n            this.submitCanvExec(`RemovePoint(${hint.binindx})`, this.args_menu_id);\n         }\n\n         return true; // call is processed\n      }\n\n      return false;\n   }\n\n   /** @summary Update TGraph object */\n   updateObject(obj, opt) {\n      if (!this.matchObjectType(obj)) return false;\n\n      if (opt && (opt != this.options.original))\n         this.decodeOptions(opt);\n\n      let graph = this.getObject();\n      // TODO: make real update of TGraph object content\n      graph.fBits = obj.fBits;\n      graph.fTitle = obj.fTitle;\n      graph.fX = obj.fX;\n      graph.fY = obj.fY;\n      graph.fNpoints = obj.fNpoints;\n      graph.fMinimum = obj.fMinimum;\n      graph.fMaximum = obj.fMaximum;\n      this.createBins();\n\n      delete this.$redraw_hist;\n\n      // if our own histogram was used as axis drawing, we need update histogram as well\n      if (this.axes_draw) {\n         let histo = this.createHistogram(obj.fHistogram);\n         histo.fTitle = graph.fTitle; // copy title\n\n         let hist_painter = this.getMainPainter();\n         if (hist_painter?.$secondary) {\n            hist_painter.updateObject(histo, this.options.Axis);\n            this.$redraw_hist = true;\n         }\n      }\n\n      return true;\n   }\n\n   /** @summary Checks if it makes sense to zoom inside specified axis range\n     * @desc allow to zoom TGraph only when at least one point in the range */\n   canZoomInside(axis,min,max) {\n      let gr = this.getObject();\n      if (!gr || (axis !== (this.options.pos3d ? \"y\" : \"x\"))) return false;\n\n      for (let n = 0; n < gr.fNpoints; ++n)\n         if ((min < gr.fX[n]) && (gr.fX[n] < max)) return true;\n\n      return false;\n   }\n\n   /** @summary Process click on graph-defined buttons */\n   clickButton(funcname) {\n      if (funcname !== \"ToggleZoom\") return false;\n\n      let main = this.getFramePainter();\n      if (!main) return false;\n\n      if ((this.xmin === this.xmax) && (this.ymin === this.ymax)) return false;\n\n      main.zoom(this.xmin, this.xmax, this.ymin, this.ymax);\n\n      return true;\n   }\n\n   /** @summary Find TF1/TF2 in TGraph list of functions */\n   findFunc() {\n      let gr = this.getObject();\n      if (gr?.fFunctions?.arr)\n         for (let i = 0; i < gr.fFunctions.arr.length; ++i) {\n            let func = gr.fFunctions.arr[i];\n            if ((func._typename == 'TF1') || (func._typename == 'TF2')) return func;\n         }\n      return null;\n   }\n\n   /** @summary Find stat box in TGraph list of functions */\n   findStat() {\n      let gr = this.getObject();\n      if (gr?.fFunctions?.arr)\n         for (let i = 0; i < gr.fFunctions.arr.length; ++i) {\n            let func = gr.fFunctions.arr[i];\n            if ((func._typename == 'TPaveStats') && (func.fName == 'stats')) return func;\n         }\n      return null;\n   }\n\n   /** @summary Create stat box */\n   createStat() {\n      let func = this.findFunc();\n      if (!func) return null;\n\n      let stats = this.findStat();\n      if (stats) return stats;\n\n      // do not create stats box when drawing canvas\n      if (this.getCanvPainter()?.normal_canvas || this.options.PadStats) return null;\n\n      this.create_stats = true;\n\n      const st = gStyle;\n\n      stats = create('TPaveStats');\n      Object.assign(stats, { fName : 'stats', fOptStat: 0, fOptFit: st.fOptFit || 111, fBorderSize: 1 });\n\n      stats.fX1NDC = st.fStatX - st.fStatW;\n      stats.fY1NDC = st.fStatY - st.fStatH;\n      stats.fX2NDC = st.fStatX;\n      stats.fY2NDC = st.fStatY;\n\n      stats.fFillColor = st.fStatColor;\n      stats.fFillStyle = st.fStatStyle;\n\n      stats.fTextAngle = 0;\n      stats.fTextSize = st.fStatFontSize; // 9 ??\n      stats.fTextAlign = 12;\n      stats.fTextColor = st.fStatTextColor;\n      stats.fTextFont = st.fStatFont;\n\n      stats.AddText(func.fName);\n\n      // while TF1 was found, one can be sure that stats is existing\n      this.getObject().fFunctions.Add(stats);\n\n      return stats;\n   }\n\n   /** @summary Fill statistic */\n   fillStatistic(stat, dostat, dofit) {\n\n      // cannot fill stats without func\n      let func = this.findFunc();\n\n      if (!func || !dofit || !this.create_stats) return false;\n\n      stat.clearPave();\n\n      stat.fillFunctionStat(func, dofit);\n\n      return true;\n   }\n\n   /** @summary method draws next function from the functions list\n     * @returns {Promise} */\n   drawNextFunction(indx) {\n\n      let graph = this.getObject();\n\n      if (indx >= (graph?.fFunctions?.arr?.length || 0))\n         return Promise.resolve(this);\n\n      let pp = this.getPadPainter(),\n          func = graph.fFunctions.arr[indx],\n          opt = graph.fFunctions.opt[indx];\n\n      //  required for stats filling\n      // TODO: use weak reference (via pad list of painters and any kind of string)\n      func.$main_painter = this;\n\n      return pp.drawObject(this.getDom(), func, opt).then(() => this.drawNextFunction(indx+1));\n   }\n\n   /** @summary Draw axis histogram\n     * @private */\n   drawAxisHisto() {\n      let histo = this.createHistogram();\n      return TH1Painter.draw(this.getDom(), histo, this.options.Axis)\n   }\n\n   /** @summary Draw TGraph\n     * @private */\n   static _drawGraph(painter, opt) {\n      painter.decodeOptions(opt, true);\n      painter.createBins();\n      painter.createStat();\n      if (!settings.DragGraphs && !graph.TestBit(kNotEditable))\n         graph.InvertBit(kNotEditable);\n\n      let promise = Promise.resolve();\n\n      if ((!painter.getMainPainter() || painter.options.second_x || painter.options.second_y) && painter.options.Axis)\n         promise = painter.drawAxisHisto().then(hist_painter => {\n            if (hist_painter) {\n               painter.axes_draw = true;\n               if (!painter._own_histogram) painter.$primary = true;\n               hist_painter.$secondary = true;\n            }\n         });\n\n      return promise.then(() => {\n         painter.addToPadPrimitives();\n         return painter.drawGraph();\n      }).then(() => painter.drawNextFunction(0));\n   }\n\n   static draw(dom, graph, opt) {\n      return TGraphPainter._drawGraph(new TGraphPainter(dom, graph), opt);\n   }\n\n} // class TGraphPainter\n\nexport { TGraphPainter };\n"],"x_google_ignoreList":[0]}